uint64_t std::function<unsigned int ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;

  v4 = a2;
  v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DC9E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_20F4DCA58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DCAD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,MIL::IRTensorValueType const*&,std::vector<unsigned long long>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,0>(v0);
}

void sub_20F4DCB40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25DED8;
  MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue();
}

void sub_20F4DCBA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<unsigned long long>::~IRTypedTensorValue(a1 + 24);
}

uint64_t std::function<unsigned long long ()(unsigned long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DCE04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,MIL::IRTensorValueType const*&,std::vector<signed char>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,0>(v0);
}

void sub_20F4DCE70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25DF28;
  MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue();
}

void sub_20F4DCED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DF28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<signed char>::~IRTypedTensorValue(a1 + 24);
}

void *std::vector<signed char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F4DCFC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<signed char ()(signed char)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<signed char ()(signed char)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<signed char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20F4DD1AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short const*,short const*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DD228(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DD2A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<short>,std::allocator<MIL::IRTypedTensorValue<short>>,MIL::IRTensorValueType const*&,std::vector<short>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<short>,std::allocator<MIL::IRTypedTensorValue<short>>,0>(v0);
}

void sub_20F4DD310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<short>,std::allocator<MIL::IRTypedTensorValue<short>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25DF78;
  MIL::IRTypedTensorValue<short>::IRTypedTensorValue();
}

void sub_20F4DD370(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DF78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<short>::~IRTypedTensorValue(a1 + 24);
}

void *std::vector<short>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F4DD46C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<short ()(short)>::operator()(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<short ()(short)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<short ()(short)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    __int16 v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20F4DD654(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DD6D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<int>,std::allocator<MIL::IRTypedTensorValue<int>>,MIL::IRTensorValueType const*&,std::vector<int>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<int>,std::allocator<MIL::IRTypedTensorValue<int>>,0>(v0);
}

void sub_20F4DD73C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<int>,std::allocator<MIL::IRTypedTensorValue<int>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25DFC8;
  MIL::IRTypedTensorValue<int>::IRTypedTensorValue();
}

void sub_20F4DD79C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25DFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<int>::~IRTypedTensorValue(a1 + 24);
}

uint64_t std::function<int ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<int ()(int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_20F4DD9FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,MIL::IRTensorValueType const*&,std::vector<long long>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,0>(v0);
}

void sub_20F4DDA68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25E018;
  MIL::IRTypedTensorValue<long long>::IRTypedTensorValue();
}

void sub_20F4DDAC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<long long>::~IRTypedTensorValue(a1 + 24);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F4DDBC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<long long ()(long long)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::__function::__value_func<long long ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<long long ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DDDB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<BOOL>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,MIL::IRTensorValueType const*&,std::vector<unsigned char>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,0>(v0);
}

void sub_20F4DDE1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25E068;
  MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
}

void sub_20F4DDE7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<BOOL>::~IRTypedTensorValue(a1 + 24);
}

void *std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16*,MIL::Bf16*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DDF70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,0>(v0);
}

void sub_20F4DDFDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25E0B8;
  MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue();
}

void sub_20F4DE03C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<MIL::Bf16>::~IRTypedTensorValue(a1 + 24);
}

void *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4DE130(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,void>()
{
  v0 = operator new(0x30uLL);
  std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,0>(v0);
}

void sub_20F4DE19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25E108;
  MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue();
}

void sub_20F4DE1FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25E108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<MIL::Fp16>::~IRTypedTensorValue(a1 + 24);
}

void MIL::ValueTypeInference::CopyFromInput(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v3 = operator new(0x20uLL);
  *uint64_t v3 = &unk_26C25E158;
  uint64_t v4 = (std::string *)(v3 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a2 + 24) = v3;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v3[3] = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a2 + 24) = v3;
  }
}

void sub_20F4DE348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInference::BroadcastFromInputs(long long **a1@<X0>, uint64_t a2@<X8>)
{
  memset(&v4, 0, sizeof(v4));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v4, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  *(void *)(a2 + 24) = 0;
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v3 = &unk_26C25E1E8;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v3 + 8), (long long *)v4.__r_.__value_.__l.__data_, (long long *)v4.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3));
  *(void *)(a2 + 24) = v3;
  int v5 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_20F4DE428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  operator delete(v12);
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C25E158;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C25E158;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26C25E158;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20F4DE588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25E158;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, void **a4@<X8>)
{
  int v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v25 = v5;
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)(a1 + 8));
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(&v26, *((void **)v6 + 5), *((void **)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 4);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::string const*>::reserve(a4, (v27 - v26) >> 4);
  uint64_t v7 = v26;
  for (uint64_t i = v27; v7 != i; v7 += 16)
  {
    v9 = *(MIL::IRTypedArgument::IRTypedArgumentImpl ***)v7;
    v10 = *(std::__shared_weak_count **)(v7 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t ValueType = MIL::IRTypedArgument::GetValueType(v9);
    uint64_t v12 = ValueType;
    v14 = (uint64_t *)a4[1];
    unint64_t v13 = (unint64_t)a4[2];
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = ((char *)v14 - (unsigned char *)*a4) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v13 - (void)*a4;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v19);
      }
      else {
        v20 = 0;
      }
      v21 = (uint64_t *)&v20[8 * v16];
      uint64_t *v21 = v12;
      v15 = (char *)(v21 + 1);
      v23 = (char *)*a4;
      v22 = (char *)a4[1];
      if (v22 != *a4)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *--v21 = v24;
        }
        while (v22 != v23);
        v22 = (char *)*a4;
      }
      *a4 = v21;
      a4[1] = v15;
      a4[2] = &v20[8 * v19];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      uint64_t *v14 = ValueType;
      v15 = (char *)(v14 + 1);
    }
    a4[1] = v15;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  v29 = (void **)&v26;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v29);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_20F4DE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a14);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C25E1E8;
  long long v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26C25E1E8;
  long long v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x21056C700](a1, 0xA1C4030951706);
}

char *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C25E1E8;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 8), *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  return v2;
}

void sub_20F4DE9DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C25E1E8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 8), *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, MIL::IRUnknownDimension **a2, void *a3, void *a4)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v43 = 0;
  v44 = 0;
  unint64_t v45 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve(&v43, a4[3]);
  memset(&v42, 0, sizeof(v42));
  std::vector<int>::reserve(&v42, a4[3]);
  uint64_t v7 = *(long long **)(a1 + 8);
  for (i = *(long long **)(a1 + 16); v7 != i; uint64_t v7 = (long long *)((char *)v7 + 24))
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v9 = *v7;
      v41.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v9;
    }
    Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a4, (uint64_t)&v41);
    uint64_t v11 = MIL::IRValueType::AsTensorType(SingleValueType);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
    unint64_t v13 = v44;
    if ((unint64_t)v44 >= v45)
    {
      uint64_t v14 = std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(&v43, v12);
    }
    else
    {
      void *v44 = 0;
      v13[1] = 0;
      v13[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v13, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
      uint64_t v14 = (uint64_t)(v13 + 3);
    }
    v44 = (void *)v14;
    unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
    unsigned int v16 = v15;
    std::vector<unsigned int>::pointer end = v42.__end_;
    if (v42.__end_ >= v42.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = v42.__begin_;
      int64_t v20 = v42.__end_ - v42.__begin_;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      int64_t v22 = (char *)v42.__end_cap_.__value_ - (char *)v42.__begin_;
      if (((char *)v42.__end_cap_.__value_ - (char *)v42.__begin_) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v42.__end_cap_, v23);
        std::vector<unsigned int>::pointer begin = v42.__begin_;
        std::vector<unsigned int>::pointer end = v42.__end_;
      }
      else
      {
        uint64_t v24 = 0;
      }
      v25 = (unsigned int *)&v24[4 * v20];
      unsigned int *v25 = v16;
      uint64_t v18 = v25 + 1;
      while (end != begin)
      {
        unsigned int v26 = *--end;
        *--v25 = v26;
      }
      v42.__begin_ = v25;
      v42.__end_ = v18;
      v42.__end_cap_.__value_ = (unsigned int *)&v24[4 * v23];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *v42.__end_ = v15;
      uint64_t v18 = end + 1;
    }
    v42.__end_ = v18;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  std::vector<unsigned int>::pointer v28 = v42.__begin_;
  std::vector<unsigned int>::pointer v27 = v42.__end_;
  if (v42.__end_ == v42.__begin_) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v29 = *v42.__begin_;
  while (v29 != 18)
  {
    uint64_t v30 = *v28;
    if (v30 == 18) {
      break;
    }
    if (v29 == 3 && v30 == 3)
    {
      uint64_t v29 = 3;
    }
    else
    {
      if (v29 == 3 || v30 == 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "String dtype cannot be promoted to any other dtype.");
LABEL_77:
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      if (MIL::IsFloat(v29) || MIL::IsFloat(v30))
      {
        uint64_t v29 = 6;
        if (v31 != 6 && v32 != 6)
        {
          uint64_t v29 = 5;
          if (v31 != 5 && v32 != 5)
          {
            if (v32 == 7 || v31 == 7) {
              uint64_t v29 = 7;
            }
            else {
              uint64_t v29 = 4;
            }
          }
        }
      }
      else if (MIL::IsSignedInt(v29) || MIL::IsSignedInt(v30))
      {
        uint64_t v29 = 12;
        if (v34 != 12 && v35 != 12)
        {
          uint64_t v29 = 11;
          if (v34 != 11 && v35 != 11)
          {
            if (v35 == 10 || v34 == 10) {
              uint64_t v29 = 10;
            }
            else {
              uint64_t v29 = 9;
            }
          }
        }
      }
      else if (MIL::IsUnsignedInt(v29) || MIL::IsUnsignedInt(v30))
      {
        uint64_t v29 = 17;
        if (v37 != 17 && v38 != 17)
        {
          uint64_t v29 = 16;
          if (v37 != 16 && v38 != 16)
          {
            if (v38 == 15 || v37 == 15) {
              uint64_t v29 = 15;
            }
            else {
              uint64_t v29 = 14;
            }
          }
        }
      }
      else
      {
        uint64_t v29 = 2;
      }
    }
    if (++v28 == v27)
    {
      MIL::ValueTypeInferenceUtils::BroadcastShape(*a2, &v43, (unint64_t *)&v41);
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Any dtype is not valid for dtype promotion.");
  goto LABEL_77;
}

void sub_20F4DEF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, char *a19, uint64_t a20,char a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unsigned int v15 = v11;
  unsigned int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<MIL::IRDimension const*>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20F4DF178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValueTypeInference::anonymous namespace'::CastToFloat(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!MIL::IsFloat(a1))
  {
    uint64_t v2 = 0;
    {
      v2 += 2;
      if (v2 == 18)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v1, &v7);
        unint64_t v4 = std::string::insert(&v7, 0, "Invalid inputDtype ");
        long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v8);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
    }
  }
  return v1;
}

void sub_20F4DF28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::ValueTypeInference::anonymous namespace'::CastToInt(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!MIL::IsSignedInt(a1))
  {
    uint64_t v2 = 0;
    {
      v2 += 2;
      if (v2 == 10)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v1, &v7);
        unint64_t v4 = std::string::insert(&v7, 0, "Invalid inputDtype ");
        long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v8);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
    }
  }
  return v1;
}

void sub_20F4DF3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::ValueTypeInference::anonymous namespace'::CastToUInt(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!MIL::IsUnsignedInt(a1))
  {
    if (v1 != 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v1, &v6);
      unint64_t v4 = std::string::insert(&v6, 0, "Invalid inputDtype ");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v7);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    return 14;
  }
  return v1;
}

void sub_20F4DF52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::ValueTypeInferenceUtils::BroadcastShape(MIL::IRUnknownDimension *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  v49 = 0;
  v50 = 0;
  uint64_t v51 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve((uint64_t *)&v49, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      if (v8 <= (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3) {
        unint64_t v8 = (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3;
      }
      std::string __p = 0;
      v47 = 0;
      v48 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      unint64_t v9 = v47 - 8;
      if (__p != v47 && v9 > __p)
      {
        uint64_t v11 = (char *)__p + 8;
        do
        {
          uint64_t v12 = *((void *)v11 - 1);
          *((void *)v11 - 1) = *(void *)v9;
          *(void *)unint64_t v9 = v12;
          v9 -= 8;
          BOOL v13 = v11 >= v9;
          v11 += 8;
        }
        while (!v13);
      }
      std::vector<std::vector<MIL::IRDimension const*>>::push_back[abi:ne180100]((uint64_t *)&v49, (uint64_t)&__p);
      if (__p)
      {
        v47 = (char *)__p;
        operator delete(__p);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  std::string __p = 0;
  v47 = 0;
  v48 = 0;
  std::vector<std::string const*>::reserve(&__p, v8);
  unint64_t v45 = a3;
  if (v8)
  {
    unint64_t v14 = 0;
    while (1)
    {
      unsigned int v15 = v49;
      unsigned int v16 = v50;
      if (v49 == v50) {
        break;
      }
      char v17 = 0;
      char v18 = 0;
      unint64_t v19 = 1;
      do
      {
        if (v14 < (uint64_t)(v15[1] - *v15) >> 3)
        {
          uint64_t v20 = *(void *)(*v15 + 8 * v14);
          uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
          if (v21)
          {
            unint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
            if (v22 != 1 && v19 != 1 && v22 != v19)
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Shapes are not compatible for broadcasting.");
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            if (v22 > v19) {
              unint64_t v19 = v22;
            }
          }
          else
          {
            uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
            char v18 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
            char v17 = 1;
          }
        }
        v15 += 3;
      }
      while (v15 != v16);
      if (((v19 < 2) & v17) == 0) {
        goto LABEL_40;
      }
      uint64_t v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)(v18 & 1));
LABEL_41:
      uint64_t v27 = v26;
      std::vector<unsigned int>::pointer v28 = v47;
      if (v47 >= v48)
      {
        uint64_t v30 = (v47 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = (v48 - (unsigned char *)__p) >> 2;
        if (v31 <= v30 + 1) {
          unint64_t v31 = v30 + 1;
        }
        if ((unint64_t)(v48 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v48, v32);
        }
        else {
          v33 = 0;
        }
        int v34 = (uint64_t *)&v33[8 * v30];
        *int v34 = v27;
        uint64_t v29 = (uint64_t)(v34 + 1);
        v36 = (char *)__p;
        int v35 = v47;
        if (v47 != __p)
        {
          do
          {
            uint64_t v37 = *((void *)v35 - 1);
            v35 -= 8;
            *--int v34 = v37;
          }
          while (v35 != v36);
          int v35 = (char *)__p;
        }
        std::string __p = v34;
        v47 = (char *)v29;
        v48 = &v33[8 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)v47 = v26;
        uint64_t v29 = (uint64_t)(v28 + 8);
      }
      v47 = (char *)v29;
      if (++v14 == v8) {
        goto LABEL_60;
      }
    }
    unint64_t v19 = 1;
LABEL_40:
    uint64_t v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)v19);
    goto LABEL_41;
  }
  uint64_t v29 = (uint64_t)v47;
LABEL_60:
  int v38 = __p;
  *unint64_t v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v45, v38, v29, (v29 - (uint64_t)v38) >> 3);
  unint64_t v40 = *v45;
  unint64_t v39 = v45[1];
  if (*v45 != v39)
  {
    std::string v41 = (void *)(v39 - 8);
    if ((unint64_t)v41 > v40)
    {
      unint64_t v42 = v40 + 8;
      do
      {
        uint64_t v43 = *(void *)(v42 - 8);
        *(void *)(v42 - 8) = *v41;
        *v41-- = v43;
        BOOL v13 = v42 >= (unint64_t)v41;
        v42 += 8;
      }
      while (!v13);
    }
  }
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  std::string __p = &v49;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20F4DF99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, uint64_t a13, char a14)
{
  std::string __p = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValueTypeInferenceUtils::GetVariadicValueTypes@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v5 = v4;
  uint64_t result = (uint64_t)std::vector<MIL::IRValueType const*>::vector(a3, (uint64_t)(*((void *)v4 + 6) - *((void *)v4 + 5)) >> 4);
  uint64_t v7 = *((void *)v5 + 5);
  if (*((void *)v5 + 6) != v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v7 + v8));
      *(void *)(*a3 + 8 * v9++) = result;
      uint64_t v7 = *((void *)v5 + 5);
      v8 += 16;
    }
    while (v9 < (*((void *)v5 + 6) - v7) >> 4);
  }
  return result;
}

void sub_20F4DFA84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueTypeInferenceUtils::GetSingleValueType(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v4 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((void *)v3 + 5);
  if (*((void *)v3 + 6) - (void)v4 != 16)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Inputs must not be variadic. But size of input ", 47);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" is ", 4);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v14);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  long long v5 = *v4;

  return MIL::IRTypedArgument::GetValueType(v5);
}

void sub_20F4DFBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::ValueTypeInferenceUtils::TryGetSingleValue(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v4 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((void *)v3 + 5);
  if (*((void *)v3 + 6) - (void)v4 != 16)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Inputs must not be variadic. But size of input ", 47);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" is ", 4);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v14);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  long long v5 = *v4;

  return MIL::IRTypedArgument::TryGetValue(v5);
}

void sub_20F4DFD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::ValueTypeInferenceUtils::GetSingleValue(void *a1, uint64_t a2)
{
  uint64_t result = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a1, a2);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "The single input must store a Value.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F4DFE14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    long long v5 = a1;
    uint64_t v7 = (uint64_t)(a4 + 2);
    int v8 = &a1[a2];
    do
    {
      uint64_t v9 = (MIL::Validation *)*v5;
      if (!MIL::Validation::IsAxisValidForRank(v9, a3))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" for input_ndim: ", 17);
        std::ostream::operator<<();
        exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
        MIL::UnknownLocation::Make(exception);
      }
      if ((int)v9 < 0) {
        uint64_t v9 = (MIL::Validation *)((int)v9 + a3);
      }
      uint64_t v11 = a4[1];
      unint64_t v10 = (unint64_t)a4[2];
      if ((unint64_t)v11 >= v10)
      {
        BOOL v13 = *a4;
        uint64_t v14 = (v11 - *a4) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          char v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v17);
          BOOL v13 = *a4;
          uint64_t v11 = a4[1];
        }
        else
        {
          char v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = v9;
        uint64_t v12 = v19 + 8;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        *a4 = v19;
        a4[1] = v12;
        a4[2] = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v11 = v9;
        uint64_t v12 = v11 + 8;
      }
      a4[1] = v12;
      ++v5;
    }
    while (v5 != v8);
  }
}

void sub_20F4E0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  __cxa_free_exception(v20);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  unint64_t v22 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void *MIL::ValueTypeInferenceUtils::SliceShape@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v4 = a3 - a2;
  if (a3 < a2 || (uint64_t v5 = *a1, a3 > (a1[1] - *a1) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "invalid index");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v6 = (const void *)(v5 + 8 * a2);
  uint64_t v7 = v5 + 8 * a3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;

  return std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(a4, v6, v7, v4);
}

void sub_20F4E01C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(MIL::IRConstantDimension *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, void *a5@<X4>, int **a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, void **a9@<X8>)
{
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  uint64_t v16 = a3[1] - *a3;
  if (a8 && (unint64_t)v16 >= 0x11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ceil_mode must be False when there are 3 spatial dimensions (3D pool)");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v128 = *a3;
  uint64_t v129 = a3[1];
  unint64_t v127 = v16 >> 3;
  std::vector<std::string const*>::reserve(a9, v16 >> 3);
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  v130 = a3;
  unint64_t v19 = (v17 - *a3) >> 3;
  v134 = 0;
  v135 = 0;
  v133 = 0;
  std::vector<std::string const*>::reserve(&v133, v19);
  if ((*((char *)a6 + 23) & 0x80000000) == 0)
  {
    uint64_t v20 = (int *)a6;
    switch(*((unsigned char *)a6 + 23))
    {
      case 4:
        int v21 = *(_DWORD *)a6;
        goto LABEL_8;
      case 5:
        if (*(_DWORD *)a6 != 1768710518 || *((unsigned char *)a6 + 4) != 100) {
          goto LABEL_204;
        }
        goto LABEL_116;
      case 6:
        goto LABEL_21;
      case 0xA:
        if (*a6 != (int *)0x776F6C5F656D6173 || *((_WORD *)a6 + 4) != 29285) {
          goto LABEL_204;
        }
        goto LABEL_67;
      default:
        goto LABEL_204;
    }
  }
  switch((unint64_t)a6[1])
  {
    case 4uLL:
      int v21 = **a6;
LABEL_8:
      if (v21 != 1701667187) {
        goto LABEL_204;
      }
      goto LABEL_67;
    case 5uLL:
      if (**a6 != 1768710518 || *((unsigned char *)*a6 + 4) != 100) {
        goto LABEL_204;
      }
LABEL_116:
      std::string __p = (void *)MIL::IRConstantDimension::Make(a1, 0);
      std::vector<MIL::IRDimension const*>::assign((char **)&v133, (v17 - v18) >> 3, &__p);
      uint64_t v71 = v129;
      v70 = a3;
      uint64_t v72 = v128;
      goto LABEL_117;
    case 6uLL:
      uint64_t v20 = *a6;
LABEL_21:
      int v24 = *v20;
      int v25 = *((unsigned __int16 *)v20 + 2);
      if (v24 != 1953723747 || v25 != 28015) {
        goto LABEL_204;
      }
      std::string __p = 0;
      v138 = 0;
      uint64_t v139 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2);
      uint64_t v27 = __p;
      if (v138 - (unsigned char *)__p != v17 - v18)
      {
        v126 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v126, "Attribute 'pad' invalid: should be length of 2 * num_spatial_dims");
        v126->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v126, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      if (v17 != v18 && a8)
      {
        if (v19 <= 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = (v17 - v18) >> 3;
        }
        uint64_t v29 = (char *)__p + 4;
        do
        {
          if (*(v29 - 1) != *v29)
          {
            v117 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v117, "Padding must be symmetric if ceil_mode is True");
            v117->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v117, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      if (v17 == v18) {
        goto LABEL_109;
      }
      uint64_t v30 = 0;
      if (v19 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v19;
      }
      do
      {
        unint64_t v32 = (v138 - (unsigned char *)__p) >> 2;
        unint64_t v33 = (2 * v30) | 1;
        if (v32 <= 2 * v30 || v32 <= v33) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(*((int *)__p + v33) + (uint64_t)*((int *)__p + 2 * v30)));
        uint64_t v36 = v35;
        uint64_t v37 = v134;
        if (v134 >= (uint64_t *)v135)
        {
          uint64_t v39 = ((char *)v134 - (unsigned char *)v133) >> 3;
          if ((unint64_t)(v39 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = (v135 - (unsigned char *)v133) >> 2;
          if (v40 <= v39 + 1) {
            unint64_t v40 = v39 + 1;
          }
          if ((unint64_t)(v135 - (unsigned char *)v133) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41) {
            unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v41);
          }
          else {
            unint64_t v42 = 0;
          }
          uint64_t v43 = (uint64_t *)&v42[8 * v39];
          *uint64_t v43 = v36;
          int v38 = v43 + 1;
          unint64_t v45 = (char *)v133;
          v44 = (char *)v134;
          if (v134 != v133)
          {
            do
            {
              uint64_t v46 = *((void *)v44 - 1);
              v44 -= 8;
              *--uint64_t v43 = v46;
            }
            while (v44 != v45);
            v44 = (char *)v133;
          }
          v133 = v43;
          v134 = v38;
          v135 = &v42[8 * v41];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          uint64_t *v134 = v35;
          int v38 = v37 + 1;
        }
        v134 = v38;
        ++v30;
      }
      while (v30 != v31);
      goto LABEL_108;
    case 0xAuLL:
      if (*(void *)*a6 != 0x776F6C5F656D6173 || *((_WORD *)*a6 + 4) != 29285) {
        goto LABEL_204;
      }
LABEL_67:
      if (a8)
      {
        v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v125, "ceil_mode must be False when pad_type is equal to 'same'");
        v125->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v125, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      if (v17 == v18) {
        goto LABEL_108;
      }
      unint64_t v48 = 0;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      break;
    default:
LABEL_204:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid padding type ", 21);
      int v120 = *((char *)a6 + 23);
      if (v120 >= 0) {
        v121 = a6;
      }
      else {
        v121 = *a6;
      }
      if (v120 >= 0) {
        uint64_t v122 = *((unsigned __int8 *)a6 + 23);
      }
      else {
        uint64_t v122 = (uint64_t)a6[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
      v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v123, &v136);
      v123->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v123, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  do
  {
    if (v48 >= (uint64_t)(a2[1] - *a2) >> 3) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v49 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v48) + 24))(*(void *)(*a2 + 8 * v48));
    if (v49)
    {
      v50 = v134;
      if (v134 < (uint64_t *)v135) {
        goto LABEL_88;
      }
      uint64_t v51 = ((char *)v134 - (unsigned char *)v133) >> 3;
      if ((unint64_t)(v51 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = (v135 - (unsigned char *)v133) >> 2;
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      if ((unint64_t)(v135 - (unsigned char *)v133) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v52;
      }
      if (v53) {
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v53);
      }
      else {
        v54 = 0;
      }
      v64 = (uint64_t *)&v54[8 * v51];
      uint64_t *v64 = v49;
      v61 = v64 + 1;
      v66 = (char *)v133;
      v65 = (char *)v134;
      if (v134 != v133)
      {
        do
        {
          uint64_t v67 = *((void *)v65 - 1);
          v65 -= 8;
          *--v64 = v67;
        }
        while (v65 != v66);
LABEL_104:
        v65 = (char *)v133;
      }
    }
    else
    {
      if (v48 >= (uint64_t)(a2[1] - *a2) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v55 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v48));
      uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 48))(v55);
      if (v48 >= (v138 - (unsigned char *)__p) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v57 = v56;
      uint64_t v58 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v48));
      unint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 48))(v58);
      if (v48 >= (uint64_t)(a4[1] - *a4) >> 2) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      double v60 = (double)v59
          - ((double)v57
           - (double)*(int *)(*a4 + 4 * v48) * ceil((double)v57 / (double)*(int *)(*a4 + 4 * v48)))
          - (double)*(int *)(*a4 + 4 * v48);
      if (v60 < 0.0) {
        double v60 = 0.0;
      }
      uint64_t v49 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)v60);
      v50 = v134;
      if (v134 < (uint64_t *)v135)
      {
LABEL_88:
        uint64_t *v50 = v49;
        v61 = v50 + 1;
        goto LABEL_107;
      }
      uint64_t v62 = ((char *)v134 - (unsigned char *)v133) >> 3;
      if ((unint64_t)(v62 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v63 = (v135 - (unsigned char *)v133) >> 2;
      if (v63 <= v62 + 1) {
        unint64_t v63 = v62 + 1;
      }
      if ((unint64_t)(v135 - (unsigned char *)v133) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v63;
      }
      if (v53) {
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v53);
      }
      else {
        v54 = 0;
      }
      v64 = (uint64_t *)&v54[8 * v62];
      uint64_t *v64 = v49;
      v61 = v64 + 1;
      v68 = (char *)v133;
      v65 = (char *)v134;
      if (v134 != v133)
      {
        do
        {
          uint64_t v69 = *((void *)v65 - 1);
          v65 -= 8;
          *--v64 = v69;
        }
        while (v65 != v68);
        goto LABEL_104;
      }
    }
    v133 = v64;
    v134 = v61;
    v135 = &v54[8 * v53];
    if (v65) {
      operator delete(v65);
    }
LABEL_107:
    v134 = v61;
    ++v48;
  }
  while (v48 != v19);
LABEL_108:
  uint64_t v27 = __p;
LABEL_109:
  uint64_t v71 = v129;
  v70 = v130;
  uint64_t v72 = v128;
  if (v27)
  {
    v138 = v27;
    operator delete(v27);
  }
LABEL_117:
  if (v71 != v72)
  {
    unint64_t v74 = 0;
    if (v127 <= 1) {
      uint64_t v75 = 1;
    }
    else {
      uint64_t v75 = v127;
    }
    do
    {
      if (v74 >= (uint64_t)(a2[1] - *a2) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v76 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v74) + 24))(*(void *)(*a2 + 8 * v74));
      if (v76)
      {
        v78 = (uint64_t *)a9[1];
        unint64_t v77 = (unint64_t)a9[2];
        if ((unint64_t)v78 >= v77)
        {
          uint64_t v79 = ((char *)v78 - (unsigned char *)*a9) >> 3;
          if ((unint64_t)(v79 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v80 = v77 - (void)*a9;
          uint64_t v81 = v80 >> 2;
          if (v80 >> 2 <= (unint64_t)(v79 + 1)) {
            uint64_t v81 = v79 + 1;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v81;
          }
          if (v82) {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
          }
          else {
            v83 = 0;
          }
          v106 = (uint64_t *)&v83[8 * v79];
          uint64_t *v106 = v76;
          v105 = (char *)(v106 + 1);
          v108 = (char *)*a9;
          v107 = (char *)a9[1];
          if (v107 != *a9)
          {
            do
            {
              uint64_t v109 = *((void *)v107 - 1);
              v107 -= 8;
              *--v106 = v109;
            }
            while (v107 != v108);
            goto LABEL_176;
          }
          goto LABEL_177;
        }
      }
      else
      {
        if (v74 >= (uint64_t)(a2[1] - *a2) >> 3) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v84 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v74));
        uint64_t v85 = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 48))(v84);
        if (v74 >= ((char *)v134 - (unsigned char *)v133) >> 3) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v86 = v85;
        uint64_t v87 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v133 + v74));
        uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 48))(v87);
        if (v74 >= (v138 - (unsigned char *)__p) >> 3) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v89 = v88;
        uint64_t v90 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v74));
        uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)v90 + 48))(v90);
        if (a8)
        {
          if (v74 >= (uint64_t)(a4[1] - *a4) >> 2) {
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v92 = v89 + v86 - v91;
          uint64_t v93 = *(int *)(*a4 + 4 * v74);
          BOOL v94 = __OFADD__(v92, v93);
          uint64_t v95 = v92 + v93;
          if ((v95 < 0) ^ v94 | (v95 == 0))
          {
LABEL_198:
            v118 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v118, "output size is too small.");
            v118->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v118, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          double v96 = floor((double)(v95 - 1) / (double)(int)v93) + 1.0;
          int v97 = ((unint64_t)v96 - 1) * v93;
          if (v89 >= 0) {
            unint64_t v98 = v89;
          }
          else {
            unint64_t v98 = v89 + 1;
          }
          LODWORD(v99) = v97 >= (int)((v98 >> 1) + v86);
          if (v89 > 0) {
            uint64_t v99 = v99;
          }
          else {
            uint64_t v99 = 0;
          }
          uint64_t v76 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)((unint64_t)v96 - v99));
          v78 = (uint64_t *)a9[1];
          unint64_t v100 = (unint64_t)a9[2];
          if ((unint64_t)v78 >= v100)
          {
            uint64_t v101 = ((char *)v78 - (unsigned char *)*a9) >> 3;
            if ((unint64_t)(v101 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v102 = v100 - (void)*a9;
            uint64_t v103 = v102 >> 2;
            if (v102 >> 2 <= (unint64_t)(v101 + 1)) {
              uint64_t v103 = v101 + 1;
            }
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v103;
            }
            if (v82) {
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
            }
            else {
              v83 = 0;
            }
            v106 = (uint64_t *)&v83[8 * v101];
            uint64_t *v106 = v76;
            v105 = (char *)(v106 + 1);
            v113 = (char *)*a9;
            v107 = (char *)a9[1];
            if (v107 != *a9)
            {
              do
              {
                uint64_t v114 = *((void *)v107 - 1);
                v107 -= 8;
                *--v106 = v114;
              }
              while (v107 != v113);
              goto LABEL_176;
            }
            goto LABEL_177;
          }
        }
        else
        {
          if (v89 + v86 - v91 < 0) {
            goto LABEL_198;
          }
          if (v74 >= (uint64_t)(a4[1] - *a4) >> 2) {
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v76 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(floor((double)(v89 + v86 - v91) / (double)*(int *)(*a4 + 4 * v74)) + 1.0));
          v78 = (uint64_t *)a9[1];
          unint64_t v104 = (unint64_t)a9[2];
          if ((unint64_t)v78 >= v104)
          {
            uint64_t v110 = ((char *)v78 - (unsigned char *)*a9) >> 3;
            if ((unint64_t)(v110 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v111 = v104 - (void)*a9;
            uint64_t v112 = v111 >> 2;
            if (v111 >> 2 <= (unint64_t)(v110 + 1)) {
              uint64_t v112 = v110 + 1;
            }
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v112;
            }
            if (v82) {
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
            }
            else {
              v83 = 0;
            }
            v106 = (uint64_t *)&v83[8 * v110];
            uint64_t *v106 = v76;
            v105 = (char *)(v106 + 1);
            v115 = (char *)*a9;
            v107 = (char *)a9[1];
            if (v107 != *a9)
            {
              do
              {
                uint64_t v116 = *((void *)v107 - 1);
                v107 -= 8;
                *--v106 = v116;
              }
              while (v107 != v115);
LABEL_176:
              v107 = (char *)*a9;
            }
LABEL_177:
            *a9 = v106;
            a9[1] = v105;
            a9[2] = &v83[8 * v82];
            if (v107) {
              operator delete(v107);
            }
            goto LABEL_179;
          }
        }
      }
      uint64_t *v78 = v76;
      v105 = (char *)(v78 + 1);
LABEL_179:
      a9[1] = v105;
      ++v74;
    }
    while (v74 != v75);
  }
  if (__p)
  {
    v138 = __p;
    operator delete(__p);
  }
  if (v133)
  {
    v134 = (uint64_t *)v133;
    operator delete(v133);
  }
}

void sub_20F4E0F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      if (a15) {
        operator delete(a15);
      }
      uint64_t v29 = *(void **)v25;
      if (*(void *)v25)
      {
        *(void *)(v25 + 8) = v29;
        operator delete(v29);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void MIL::ValueTypeInferenceUtils::anonymous namespace'::GetEffectiveKernelShape(MIL::IRConstantDimension *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = (v8 - *a2) >> 3;
  std::vector<std::string const*>::reserve(a4, v10);
  if (v8 != v9)
  {
    unint64_t v11 = 0;
    if (v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10;
    }
    do
    {
      if (v11 >= (a2[1] - *a2) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v11));
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v11 >= (uint64_t)(a3[1] - *a3) >> 2) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v15 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)((v14 - 1) * *(int *)(*a3 + 4 * v11) + 1));
      uint64_t v16 = v15;
      uint64_t v18 = (uint64_t *)a4[1];
      unint64_t v17 = (unint64_t)a4[2];
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = ((char *)v18 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v17 - (void)*a4;
        uint64_t v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
          uint64_t v22 = v20 + 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v23);
        }
        else {
          int v24 = 0;
        }
        uint64_t v25 = (uint64_t *)&v24[8 * v20];
        uint64_t *v25 = v16;
        unint64_t v19 = (char *)(v25 + 1);
        int v27 = (char *)*a4;
        uint64_t v26 = (char *)a4[1];
        if (v26 != *a4)
        {
          do
          {
            uint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            *--uint64_t v25 = v28;
          }
          while (v26 != v27);
          uint64_t v26 = (char *)*a4;
        }
        *a4 = v25;
        a4[1] = v19;
        a4[2] = &v24[8 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *uint64_t v18 = v15;
        unint64_t v19 = (char *)(v18 + 1);
      }
      a4[1] = v19;
      ++v11;
    }
    while (v11 != v12);
  }
}

void sub_20F4E1270(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::ConvTransposeSpatialDimensionsOutShape(MIL::IRConstantDimension *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void **a8@<X8>)
{
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v16 = v15 - *a3;
  std::vector<std::string const*>::reserve(a8, v16 >> 3);
  int v17 = *(char *)(a6 + 23);
  if (v17 < 0)
  {
    if (*(void *)(a6 + 8) != 6) {
      goto LABEL_12;
    }
    uint64_t v18 = *(void **)a6;
  }
  else
  {
    uint64_t v18 = (void *)a6;
    if (v17 != 6) {
      goto LABEL_12;
    }
  }
  int v19 = *(_DWORD *)v18;
  int v20 = *((unsigned __int16 *)v18 + 2);
  BOOL v21 = v19 == 1953723747 && v20 == 28015;
  if (v21 && a7[1] - *a7 != v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attribute 'pad' invalid: should be length of 2 * num_spatial_dims");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
LABEL_12:
  if (v15 != v14)
  {
    unint64_t v22 = 0;
    uint64_t v80 = (uint64_t)(a8 + 2);
    if ((unint64_t)(v16 >> 3) <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v16 >> 3;
    }
    while (1)
    {
      if (v22 >= (uint64_t)(a2[1] - *a2) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v22) + 24))(*(void *)(*a2 + 8 * v22));
      if (v24)
      {
        uint64_t v26 = (uint64_t *)a8[1];
        unint64_t v25 = (unint64_t)a8[2];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v27 = ((char *)v26 - (unsigned char *)*a8) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v25 - (void)*a8;
          uint64_t v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v80, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v51 = (uint64_t *)&v31[8 * v27];
          *uint64_t v51 = v24;
          unint64_t v52 = (char *)(v51 + 1);
          v54 = (char *)*a8;
          unint64_t v53 = (char *)a8[1];
          if (v53 != *a8)
          {
            do
            {
              uint64_t v55 = *((void *)v53 - 1);
              v53 -= 8;
              *--uint64_t v51 = v55;
            }
            while (v53 != v54);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        goto LABEL_93;
      }
      if (v22 >= (uint64_t)(a2[1] - *a2) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v32 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v22));
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
      if (v22 >= v84 - v83) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v34 = v33;
      uint64_t v35 = MIL::IRDimension::AsConstant(v83[v22]);
      uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
      if ((*(char *)(a6 + 23) & 0x80000000) == 0)
      {
        int v37 = *(unsigned __int8 *)(a6 + 23);
        uint64_t v38 = a6;
        switch(*(unsigned char *)(a6 + 23))
        {
          case 4:
            if (*(_DWORD *)a6 != 1701667187) {
              goto LABEL_121;
            }
            goto LABEL_91;
          case 5:
            goto LABEL_76;
          case 6:
            goto LABEL_49;
          case 0xA:
            if (*(void *)a6 == 0x776F6C5F656D6173 && *(_WORD *)(a6 + 8) == 29285) {
              goto LABEL_91;
            }
            uint64_t v38 = a6;
            if (v37 == 6) {
              goto LABEL_49;
            }
            if (v37 != 5) {
              goto LABEL_121;
            }
LABEL_76:
            if (*(_DWORD *)a6 != 1768710518 || *(unsigned char *)(a6 + 4) != 100) {
              goto LABEL_121;
            }
            goto LABEL_81;
          default:
            goto LABEL_121;
        }
      }
      uint64_t v39 = *(void *)(a6 + 8);
      if (v39 == 4 && **(_DWORD **)a6 == 1701667187)
      {
LABEL_91:
        if (v22 >= (uint64_t)(a4[1] - *a4) >> 2) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v24 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(v34 * *(int *)(*a4 + 4 * v22)));
        uint64_t v26 = (uint64_t *)a8[1];
        unint64_t v62 = (unint64_t)a8[2];
        if ((unint64_t)v26 >= v62)
        {
          uint64_t v63 = ((char *)v26 - (unsigned char *)*a8) >> 3;
          if ((unint64_t)(v63 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v64 = v62 - (void)*a8;
          uint64_t v65 = v64 >> 2;
          if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
            uint64_t v65 = v63 + 1;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v65;
          }
          if (v30) {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v80, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          uint64_t v51 = (uint64_t *)&v31[8 * v63];
          *uint64_t v51 = v24;
          unint64_t v52 = (char *)(v51 + 1);
          v68 = (char *)*a8;
          unint64_t v53 = (char *)a8[1];
          if (v53 != *a8)
          {
            do
            {
              uint64_t v69 = *((void *)v53 - 1);
              v53 -= 8;
              *--uint64_t v51 = v69;
            }
            while (v53 != v68);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        goto LABEL_93;
      }
      if (v39 == 10)
      {
        if (**(void **)a6 == 0x776F6C5F656D6173 && *(_WORD *)(*(void *)a6 + 8) == 29285) {
          goto LABEL_91;
        }
        uint64_t v39 = *(void *)(a6 + 8);
      }
      if (v39 != 5) {
        goto LABEL_47;
      }
      if (**(_DWORD **)a6 != 1768710518 || *(unsigned char *)(*(void *)a6 + 4) != 100) {
        break;
      }
LABEL_81:
      if (v22 >= (uint64_t)(a4[1] - *a4) >> 2) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v24 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(v36 + (v34 - 1) * *(int *)(*a4 + 4 * v22)));
      uint64_t v26 = (uint64_t *)a8[1];
      unint64_t v58 = (unint64_t)a8[2];
      if ((unint64_t)v26 >= v58)
      {
        uint64_t v59 = ((char *)v26 - (unsigned char *)*a8) >> 3;
        if ((unint64_t)(v59 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = v58 - (void)*a8;
        uint64_t v61 = v60 >> 2;
        if (v60 >> 2 <= (unint64_t)(v59 + 1)) {
          uint64_t v61 = v59 + 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v61;
        }
        if (v30) {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v80, v30);
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v51 = (uint64_t *)&v31[8 * v59];
        *uint64_t v51 = v24;
        unint64_t v52 = (char *)(v51 + 1);
        v70 = (char *)*a8;
        unint64_t v53 = (char *)a8[1];
        if (v53 != *a8)
        {
          do
          {
            uint64_t v71 = *((void *)v53 - 1);
            v53 -= 8;
            *--uint64_t v51 = v71;
          }
          while (v53 != v70);
          goto LABEL_113;
        }
LABEL_114:
        *a8 = v51;
        a8[1] = v52;
        a8[2] = &v31[8 * v30];
        if (v53) {
          operator delete(v53);
        }
        goto LABEL_116;
      }
LABEL_93:
      *uint64_t v26 = v24;
      unint64_t v52 = (char *)(v26 + 1);
LABEL_116:
      a8[1] = v52;
      if (++v22 == v23) {
        goto LABEL_117;
      }
    }
    uint64_t v39 = *(void *)(a6 + 8);
LABEL_47:
    if (v39 != 6) {
      goto LABEL_121;
    }
    uint64_t v38 = *(void *)a6;
LABEL_49:
    int v42 = *(_DWORD *)v38;
    int v43 = *(unsigned __int16 *)(v38 + 4);
    if (v42 != 1953723747 || v43 != 28015)
    {
LABEL_121:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v82);
      uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Invalid padding type ", 21);
      int v73 = *(char *)(a6 + 23);
      if (v73 >= 0) {
        uint64_t v74 = a6;
      }
      else {
        uint64_t v74 = *(void *)a6;
      }
      if (v73 >= 0) {
        uint64_t v75 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        uint64_t v75 = *(void *)(a6 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
      uint64_t v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v76, &v81);
      v76->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v76, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    if (v22 >= (uint64_t)(a4[1] - *a4) >> 2
      || (unint64_t v45 = (uint64_t)(a7[1] - *a7) >> 2, v45 <= 2 * v22)
      || (unint64_t v46 = (2 * v22) | 1, v45 <= v46))
    {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v24 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(v36+ (v34 - 1) * *(int *)(*a4 + 4 * v22)- (*(int *)(*a7 + 4 * v46)+ (uint64_t)*(int *)(*a7 + 8 * v22))));
    uint64_t v26 = (uint64_t *)a8[1];
    unint64_t v47 = (unint64_t)a8[2];
    if ((unint64_t)v26 >= v47)
    {
      uint64_t v48 = ((char *)v26 - (unsigned char *)*a8) >> 3;
      if ((unint64_t)(v48 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v47 - (void)*a8;
      uint64_t v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1)) {
        uint64_t v50 = v48 + 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v50;
      }
      if (v30) {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v80, v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v51 = (uint64_t *)&v31[8 * v48];
      *uint64_t v51 = v24;
      unint64_t v52 = (char *)(v51 + 1);
      v66 = (char *)*a8;
      unint64_t v53 = (char *)a8[1];
      if (v53 != *a8)
      {
        do
        {
          uint64_t v67 = *((void *)v53 - 1);
          v53 -= 8;
          *--uint64_t v51 = v67;
        }
        while (v53 != v66);
LABEL_113:
        unint64_t v53 = (char *)*a8;
      }
      goto LABEL_114;
    }
    goto LABEL_93;
  }
LABEL_117:
  if (v83)
  {
    uint64_t v84 = v83;
    operator delete(v83);
  }
}

void sub_20F4E1A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  unint64_t v22 = *(void **)(v20 - 112);
  if (v22)
  {
    *(void *)(v20 - 104) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

BOOL MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    uint64_t v4 = *a1;
  }
  else
  {
    while (!(*(uint64_t (**)(void))(**(void **)v1 + 24))())
    {
      v1 += 8;
      if (v1 == v2)
      {
        uint64_t v1 = v2;
        break;
      }
    }
    uint64_t v4 = v1;
    uint64_t v1 = a1[1];
  }
  return v4 != v1;
}

BOOL MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    uint64_t v4 = *a1;
  }
  else
  {
    while (((*(uint64_t (**)(void))(**(void **)v1 + 32))() & 1) == 0)
    {
      v1 += 8;
      if (v1 == v2)
      {
        uint64_t v1 = v2;
        break;
      }
    }
    uint64_t v4 = v1;
    uint64_t v1 = a1[1];
  }
  return v4 != v1;
}

uint64_t MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    goto LABEL_7;
  }
  while (((*(uint64_t (**)(void))(**(void **)v1 + 32))() & 1) == 0)
  {
    v1 += 8;
    if (v1 == v2)
    {
      uint64_t v1 = v2;
      break;
    }
  }
  if (v1 == a1[1])
  {
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "input shape does not have any unknown variadic dimension.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return (v1 - *a1) >> 3;
}

void sub_20F4E1D94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float MIL::ValueTypeInferenceUtils::GetFloatScalarValue(MIL::ValueTypeInferenceUtils *this, const MIL::IRTensorValue *a2)
{
  uint64_t v3 = (int *)MIL::IRValue::TryGetScalar<int>(this);
  if (v3) {
    return (float)*v3;
  }
  uint64_t v5 = MIL::IRValue::TryGetScalar<float>(this);
  if (v5) {
    return *(float *)v5;
  }
  uint64_t v6 = (MIL::Fp16 *)MIL::IRValue::TryGetScalar<MIL::Fp16>(this);
  if (v6)
  {
    return MIL::Fp16::GetFloat(v6);
  }
  else
  {
    uint64_t v7 = (MIL::Bf16 *)MIL::IRValue::TryGetScalar<MIL::Bf16>(this);
    if (v7)
    {
      return MIL::Bf16::GetFloat(v7);
    }
    else
    {
      uint64_t v8 = (unsigned char *)MIL::IRValue::TryGetScalar<BOOL>(this);
      if (v8)
      {
        float result = 0.0;
        if (*v8) {
          return 1.0;
        }
      }
      else
      {
        uint64_t v9 = (uint64_t *)MIL::IRValue::TryGetScalar<long long>(this);
        if (!v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Cannot extract scalar from value.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        return (float)*v9;
      }
    }
  }
  return result;
}

void sub_20F4E1EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::GetTopkOutShape(MIL::IRUnknownDimension **a1@<X0>, char **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)a2))
  {
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, 0, *a2, a2[1], (a2[1] - *a2) >> 3);
    if ((a3 & 0x80000000) == 0)
    {
      *(void *)(*a6 + 8 * a3) = a4;
      return;
    }
    int v16 = a5 + a3;
    goto LABEL_10;
  }
  unint64_t VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t *)a2);
  unint64_t v13 = VariadicUnknownDimIndex;
  if ((a3 & 0x80000000) == 0)
  {
    if (VariadicUnknownDimIndex <= a3)
    {
      for (uint64_t i = *a2; !(*(unsigned int (**)(void))(**(void **)i + 32))(); i += 8)
      {
        uint64_t v19 = (void *)a6[1];
        unint64_t v18 = a6[2];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = ((uint64_t)v19 - *a6) >> 3;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v18 - *a6;
          uint64_t v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
            uint64_t v23 = v21 + 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v24);
          }
          else {
            unint64_t v25 = 0;
          }
          uint64_t v26 = &v25[8 * v21];
          *(void *)uint64_t v26 = *(void *)i;
          uint64_t v20 = v26 + 8;
          uint64_t v28 = (char *)*a6;
          uint64_t v27 = (char *)a6[1];
          if (v27 != (char *)*a6)
          {
            do
            {
              uint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            uint64_t v27 = (char *)*a6;
          }
          *a6 = v26;
          a6[1] = v20;
          a6[2] = &v25[8 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = *(void *)i;
          uint64_t v20 = v19 + 1;
        }
        a6[1] = v20;
      }
      uint64_t v30 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
      uint64_t v31 = v30;
      uint64_t v33 = (uint64_t *)a6[1];
      unint64_t v32 = a6[2];
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v41 = ((uint64_t)v33 - *a6) >> 3;
        if ((unint64_t)(v41 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v42 = v32 - *a6;
        uint64_t v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
          uint64_t v43 = v41 + 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        if (v44) {
          unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v44);
        }
        else {
          unint64_t v45 = 0;
        }
        uint64_t v51 = (uint64_t *)&v45[8 * v41];
        unint64_t v52 = &v45[8 * v44];
        *uint64_t v51 = v31;
        uint64_t v34 = v51 + 1;
        v54 = (char *)*a6;
        unint64_t v53 = (char *)a6[1];
        if (v53 != (char *)*a6)
        {
          do
          {
            uint64_t v55 = *((void *)v53 - 1);
            v53 -= 8;
            *--uint64_t v51 = v55;
          }
          while (v53 != v54);
          unint64_t v53 = (char *)*a6;
        }
        *a6 = v51;
        a6[1] = v34;
        a6[2] = v52;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        uint64_t *v33 = v30;
        uint64_t v34 = v33 + 1;
      }
      a6[1] = v34;
    }
    else
    {
      std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, a6[1], *a2, a2[1], (a2[1] - *a2) >> 3);
      *(void *)(*a6 + 8 * a3) = a4;
    }
    return;
  }
  uint64_t v14 = a2[1];
  uint64_t v15 = (v14 - *a2) >> 3;
  if ((int)VariadicUnknownDimIndex - (int)v15 < (int)a3)
  {
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, a6[1], *a2, v14, (v14 - *a2) >> 3);
    int v16 = v15 + a3;
LABEL_10:
    *(void *)(*a6 + 8 * v16) = a4;
    return;
  }
  uint64_t v35 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  uint64_t v36 = v35;
  uint64_t v38 = a6 + 2;
  unint64_t v37 = a6[2];
  uint64_t v39 = (uint64_t *)a6[1];
  if ((unint64_t)v39 >= v37)
  {
    uint64_t v46 = ((uint64_t)v39 - *a6) >> 3;
    if ((unint64_t)(v46 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = v37 - *a6;
    uint64_t v48 = v47 >> 2;
    if (v47 >> 2 <= (unint64_t)(v46 + 1)) {
      uint64_t v48 = v46 + 1;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49) {
      uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v49);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t v56 = (uint64_t *)&v50[8 * v46];
    unint64_t v57 = &v50[8 * v49];
    *uint64_t v56 = v36;
    unint64_t v40 = v56 + 1;
    uint64_t v59 = (char *)*a6;
    unint64_t v58 = (char *)a6[1];
    if (v58 != (char *)*a6)
    {
      do
      {
        uint64_t v60 = *((void *)v58 - 1);
        v58 -= 8;
        *--uint64_t v56 = v60;
      }
      while (v58 != v59);
      unint64_t v58 = (char *)*a6;
    }
    *a6 = v56;
    a6[1] = v40;
    a6[2] = v57;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    *uint64_t v39 = v35;
    unint64_t v40 = v39 + 1;
  }
  a6[1] = v40;
  unint64_t v61 = v13 + 1;
  for (j = *a2; v61 < (a2[1] - *a2) >> 3; j = *a2)
  {
    if ((unint64_t)v40 >= *v38)
    {
      uint64_t v63 = ((uint64_t)v40 - *a6) >> 3;
      if ((unint64_t)(v63 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v64 = *v38 - *a6;
      uint64_t v65 = v64 >> 2;
      if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
        uint64_t v65 = v63 + 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v66);
      }
      else {
        uint64_t v67 = 0;
      }
      v68 = &v67[8 * v63];
      *(void *)v68 = *(void *)&j[8 * v61];
      unint64_t v40 = v68 + 8;
      v70 = (char *)*a6;
      uint64_t v69 = (char *)a6[1];
      if (v69 != (char *)*a6)
      {
        do
        {
          uint64_t v71 = *((void *)v69 - 1);
          v69 -= 8;
          *((void *)v68 - 1) = v71;
          v68 -= 8;
        }
        while (v69 != v70);
        uint64_t v69 = (char *)*a6;
      }
      *a6 = v68;
      a6[1] = v40;
      a6[2] = &v67[8 * v66];
      if (v69) {
        operator delete(v69);
      }
    }
    else
    {
      *v40++ = *(void *)&j[8 * v61];
    }
    a6[1] = v40;
    ++v61;
  }
}

void sub_20F4E2334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(MIL::ValueTypeInferenceUtils *this@<X0>, MIL::MILContext *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (void **)(*(uint64_t (**)(MIL::MILContext *))(*(void *)a2 + 96))(a2);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)**v6 + 16))(**v6);
  if (v7)
  {
    unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    uint64_t v18 = MIL::IRUnknownDimension::Make(this, 0);
    std::vector<MIL::IRDimension const*>::vector(&v19, v8, &v18);
    uint64_t v9 = v20;
    *(_OWORD *)a3 = v19;
    a3[2] = v9;
  }
  else
  {
    uint64_t v10 = MIL::IRUnknownDimension::Make(this, (MIL::MILContext *)1);
    unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), 1uLL);
    unint64_t v13 = &v11[8 * v12];
    *(void *)unint64_t v11 = v10;
    uint64_t v14 = v11 + 8;
    int v16 = *a3;
    uint64_t v15 = a3[1];
    if (v15 != *a3)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v11 - 1) = v17;
        v11 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = *a3;
    }
    *a3 = v11;
    a3[1] = v14;
    a3[2] = v13;
    if (v15) {
      operator delete(v15);
    }
    a3[1] = v14;
  }
}

void sub_20F4E24C8(_Unwind_Exception *exception_object)
{
}

void MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  long long v98 = 0uLL;
  v99[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v8 + 5));
  BOOL v10 = IsValue;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v10)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(__p, "shape");
      SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
      uint64_t v12 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      Data = (const void *)MIL::IRTensorValue::GetDataView<int>(v12);
      uint64_t v95 = 0;
      double v96 = 0;
      uint64_t v97 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v95, Data, (uint64_t)Data + 4 * v14, (4 * v14) >> 2);
      uint64_t v15 = v95;
      if (v95 == v96)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v16 = 0;
        do
        {
          int v17 = *v15++;
          if (v17 == -1) {
            ++v16;
          }
        }
        while (v15 != v96);
        if (v16 >= 2)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          uint64_t v19 = a2[1];
          *(void *)&long long v94 = *a2;
          *((void *)&v94 + 1) = v19;
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v93, "Only one dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v94, (uint64_t)v93, 315);
        }
      }
      if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v7 + 104))(v7))
      {
        unint64_t v24 = v95;
        if (v96 != v95)
        {
          unint64_t v25 = 0;
          do
          {
            if (!v24[v25])
            {
              if (MIL::IRTensorValueType::Rank(v7) <= v25)
              {
                uint64_t v60 = __cxa_allocate_exception(0x48uLL);
                uint64_t v61 = a2[1];
                *(void *)&long long v92 = *a2;
                *((void *)&v92 + 1) = v61;
                if (v61) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
                }
                std::to_string(&v86, v25 + 1);
                unint64_t v62 = std::string::insert(&v86, 0, "Input shape must be at least rank ");
                long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                v87.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v63;
                v62->__r_.__value_.__l.__size_ = 0;
                v62->__r_.__value_.__r.__words[2] = 0;
                v62->__r_.__value_.__r.__words[0] = 0;
                uint64_t v64 = std::string::append(&v87, " for target dim ");
                long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                v88.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v85, v25);
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v66 = &v85;
                }
                else {
                  unint64_t v66 = (std::string *)v85.__r_.__value_.__r.__words[0];
                }
                if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v85.__r_.__value_.__l.__size_;
                }
                v68 = std::string::append(&v88, (const std::string::value_type *)v66, size);
                long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                v89.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v69;
                v68->__r_.__value_.__l.__size_ = 0;
                v68->__r_.__value_.__r.__words[2] = 0;
                v68->__r_.__value_.__r.__words[0] = 0;
                v70 = std::string::append(&v89, " to be set to 0 ");
                long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                __p[0].__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v71;
                v70->__r_.__value_.__l.__size_ = 0;
                v70->__r_.__value_.__r.__words[2] = 0;
                v70->__r_.__value_.__r.__words[0] = 0;
                uint64_t v72 = std::string::append(__p, "(copy the dim at the same index from x's shape).");
                long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                std::string::size_type v91 = v72->__r_.__value_.__r.__words[2];
                long long v90 = v73;
                v72->__r_.__value_.__l.__size_ = 0;
                v72->__r_.__value_.__r.__words[2] = 0;
                v72->__r_.__value_.__r.__words[0] = 0;
                MIL::ValidationError::ValidationError((uint64_t)v60, &v92, (uint64_t)&v90, 315);
              }
              uint64_t v26 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
              uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(*v26 + 8 * v25) + 16))(*(void *)(*v26 + 8 * v25));
              if (v27)
              {
                int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
                unint64_t v24 = v95;
                v95[v25] = v28;
              }
              else
              {
                unint64_t v24 = v95;
              }
            }
            ++v25;
          }
          while (v25 < v96 - v24);
        }
      }
      uint64_t v29 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
      if (MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v29))
      {
        int v30 = 0;
        unint64_t v32 = v95;
        uint64_t v31 = v96;
      }
      else
      {
        uint64_t v33 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 16))(v7);
        unint64_t v32 = v95;
        uint64_t v31 = v96;
        int v34 = 1;
        if (v95 != v96)
        {
          uint64_t v35 = v95;
          do
          {
            int v36 = *v35++;
            v34 *= v36;
          }
          while (v35 != v96);
        }
        if (v16)
        {
          if ((int)v33 % v34)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
            unint64_t v37 = (void *)std::ostream::operator<<();
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" into shape ", 12);
            (*(void (**)(std::string *__return_ptr, uint64_t *))(*v12 + 72))(&v89, v12);
            if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v39 = &v89;
            }
            else {
              uint64_t v39 = (std::string *)v89.__r_.__value_.__r.__words[0];
            }
            if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v40 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v40 = v89.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v89.__r_.__value_.__l.__data_);
            }
            uint64_t v41 = __cxa_allocate_exception(0x48uLL);
            uint64_t v42 = a2[1];
            *(void *)&long long v83 = *a2;
            *((void *)&v83 + 1) = v42;
            if (v42) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
            }
            std::stringbuf::str();
            MIL::ValidationError::ValidationError((uint64_t)v41, &v83, (uint64_t)v82, 315);
          }
        }
        else if (v33 != v34)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
          uint64_t v74 = (void *)std::ostream::operator<<();
          uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" into shape ", 12);
          (*(void (**)(std::string *__return_ptr, uint64_t *))(*v12 + 72))(&v89, v12);
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v76 = &v89;
          }
          else {
            uint64_t v76 = (std::string *)v89.__r_.__value_.__r.__words[0];
          }
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v77 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v77 = v89.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          v78 = __cxa_allocate_exception(0x48uLL);
          uint64_t v79 = a2[1];
          *(void *)&long long v81 = *a2;
          *((void *)&v81 + 1) = v79;
          if (v79) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::ValidationError::ValidationError((uint64_t)v78, &v81, (uint64_t)v80, 315);
        }
        int v30 = -((int)v33 / v34);
      }
      if (v32 != v31)
      {
        while (1)
        {
          int v43 = *v32;
          if (*v32 == -1) {
            int v43 = v30;
          }
          unint64_t v44 = *a1;
          if (v43)
          {
            uint64_t v45 = MIL::IRConstantDimension::Make(v44, (MIL::MILContext *)v43);
            uint64_t v46 = (uint64_t *)*((void *)&v98 + 1);
            if (*((void *)&v98 + 1) >= v99[0])
            {
              uint64_t v47 = (uint64_t)(*((void *)&v98 + 1) - v98) >> 3;
              if ((unint64_t)(v47 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v48 = (uint64_t)(v99[0] - v98) >> 2;
              if (v48 <= v47 + 1) {
                unint64_t v48 = v47 + 1;
              }
              if (v99[0] - (void)v98 >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v48;
              }
              if (v49) {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v99, v49);
              }
              else {
                uint64_t v50 = 0;
              }
              v54 = (uint64_t *)&v50[8 * v47];
              uint64_t *v54 = v45;
              uint64_t v51 = v54 + 1;
              uint64_t v55 = (char *)*((void *)&v98 + 1);
              uint64_t v56 = (char *)v98;
              if (*((void *)&v98 + 1) != (void)v98)
              {
                do
                {
                  uint64_t v57 = *((void *)v55 - 1);
                  v55 -= 8;
                  *--v54 = v57;
                }
                while (v55 != v56);
                goto LABEL_82;
              }
              goto LABEL_83;
            }
          }
          else
          {
            uint64_t v45 = MIL::IRUnknownDimension::Make(v44, 0);
            uint64_t v46 = (uint64_t *)*((void *)&v98 + 1);
            if (*((void *)&v98 + 1) >= v99[0])
            {
              uint64_t v52 = (uint64_t)(*((void *)&v98 + 1) - v98) >> 3;
              if ((unint64_t)(v52 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v53 = (uint64_t)(v99[0] - v98) >> 2;
              if (v53 <= v52 + 1) {
                unint64_t v53 = v52 + 1;
              }
              if (v99[0] - (void)v98 >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v53;
              }
              if (v49) {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v99, v49);
              }
              else {
                uint64_t v50 = 0;
              }
              v54 = (uint64_t *)&v50[8 * v52];
              uint64_t *v54 = v45;
              uint64_t v51 = v54 + 1;
              uint64_t v55 = (char *)*((void *)&v98 + 1);
              unint64_t v58 = (char *)v98;
              if (*((void *)&v98 + 1) != (void)v98)
              {
                do
                {
                  uint64_t v59 = *((void *)v55 - 1);
                  v55 -= 8;
                  *--v54 = v59;
                }
                while (v55 != v58);
LABEL_82:
                uint64_t v55 = (char *)v98;
              }
LABEL_83:
              *(void *)&long long v98 = v54;
              *((void *)&v98 + 1) = v51;
              v99[0] = &v50[8 * v49];
              if (v55) {
                operator delete(v55);
              }
              goto LABEL_85;
            }
          }
          *uint64_t v46 = v45;
          uint64_t v51 = v46 + 1;
LABEL_85:
          *((void *)&v98 + 1) = v51;
          if (++v32 == v31)
          {
            uint64_t v31 = v95;
            break;
          }
        }
      }
      if (v31)
      {
        double v96 = v31;
        uint64_t v23 = v31;
        goto LABEL_89;
      }
      goto LABEL_90;
    }
  }
  else if (IsValue)
  {
    goto LABEL_6;
  }
  uint64_t v20 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v95, "shape");
  uint64_t v21 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v95);
  uint64_t v22 = (MIL::MILContext *)MIL::IRValueType::AsTensorType(v21);
  MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(v20, v22, &__p[0].__r_.__value_.__l.__data_);
  if ((void)v98)
  {
    *((void *)&v98 + 1) = v98;
    operator delete((void *)v98);
  }
  long long v98 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  v99[0] = *((void *)&__p[0].__r_.__value_.__l + 2);
  memset(__p, 0, 24);
  if (SHIBYTE(v97) < 0)
  {
    uint64_t v23 = v95;
LABEL_89:
    operator delete(v23);
  }
LABEL_90:
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F4E2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (a9 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v17) {
    __cxa_free_exception(v16);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  uint64_t v20 = *(void **)(v18 - 136);
  if (v20)
  {
    *(void *)(v18 - 128) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v18 - 112);
  if (v21)
  {
    *(void *)(v18 - 104) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *a1;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = MIL::IRValueType::AsTensorType(SingleValueType);
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  unint64_t v8 = v7;
  if (v37 < 0)
  {
    operator delete(__p[0]);
    if (!v8)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "axis");
      BOOL v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v10)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "axis");
        SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
        uint64_t v12 = MIL::IRValue::GetScalar<int>(SingleValue);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
        if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v12, (unint64_t)(v6[1] - *v6) >> 3))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
          uint64_t v29 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" for input_ndim: ", 17);
          std::ostream::operator<<();
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &v35);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        uint64_t v13 = *v6;
        if ((v12 & 0x80000000) != 0) {
          LODWORD(v12) = v12 + ((unint64_t)(v6[1] - v13) >> 3);
        }
      }
      else
      {
        LODWORD(v12) = 0;
        uint64_t v13 = *v6;
      }
      uint64_t v14 = v6[1];
      if (v14 == v13) {
LABEL_54:
      }
        MIL::IRTensorValueType::MakeWithShape();
      uint64_t v15 = 0;
      while (v12 == v15)
      {
        if (v8)
        {
          uint64_t v16 = MIL::IRConstantDimension::Make(v31, (MIL::MILContext *)1);
          uint64_t v17 = v16;
          if (v33 < v34)
          {
            uint64_t *v33 = v16;
            uint64_t v18 = v33 + 1;
LABEL_52:
            uint64_t v33 = v18;
            uint64_t v13 = *v6;
            uint64_t v14 = v6[1];
            goto LABEL_53;
          }
          uint64_t v23 = v33 - v32;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = ((char *)v34 - (char *)v32) >> 2;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if ((unint64_t)((char *)v34 - (char *)v32) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v24;
          }
          if (v21) {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v34, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          unint64_t v25 = (uint64_t *)&v22[8 * v23];
          uint64_t *v25 = v17;
          uint64_t v18 = v25 + 1;
          uint64_t v26 = v33;
          if (v33 != v32)
          {
            do
            {
              uint64_t v28 = *--v26;
              *--unint64_t v25 = v28;
            }
            while (v26 != v32);
            goto LABEL_49;
          }
          goto LABEL_50;
        }
LABEL_53:
        if (++v15 >= (unint64_t)((v14 - v13) >> 3)) {
          goto LABEL_54;
        }
      }
      if (v33 < v34)
      {
        uint64_t *v33 = *(void *)(v13 + 8 * v15);
        uint64_t v18 = v33 + 1;
        goto LABEL_52;
      }
      uint64_t v19 = v33 - v32;
      if ((unint64_t)(v19 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = ((char *)v34 - (char *)v32) >> 2;
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      if ((unint64_t)((char *)v34 - (char *)v32) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v34, v21);
      }
      else {
        uint64_t v22 = 0;
      }
      unint64_t v25 = (uint64_t *)&v22[8 * v19];
      uint64_t *v25 = *(void *)(v13 + 8 * v15);
      uint64_t v18 = v25 + 1;
      uint64_t v26 = v33;
      if (v33 != v32)
      {
        do
        {
          uint64_t v27 = *--v26;
          *--unint64_t v25 = v27;
        }
        while (v26 != v32);
LABEL_49:
        uint64_t v26 = v32;
      }
LABEL_50:
      unint64_t v32 = v25;
      int v34 = (uint64_t *)&v22[8 * v21];
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_52;
    }
  }
  else if (!v7)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  uint64_t v9 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  LODWORD(v8) = MIL::IRValue::GetScalar<BOOL>(v9);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  goto LABEL_9;
}

void sub_20F4E3528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      if (a13) {
        operator delete(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void MIL::ValueTypeInferenceUtils::GetMatmulOutShape(MIL::IRConstantDimension **a1@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, int a4@<W3>, int a5@<W4>, unint64_t *a6@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a2 + 104))(a2)
    || ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a3 + 104))(a3) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "cannot do type inference if x or y have variadic shapes");
    goto LABEL_69;
  }
  if (MIL::IRTensorValueType::Rank(a2) == 1 && a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "transpose_x can't be true if x's rank is 1");
LABEL_69:
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v12 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  long long v71 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v71, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  if (a4)
  {
    uint64_t v13 = *((void *)v72 - 2);
    *((void *)v72 - 2) = *((void *)v72 - 1);
    *((void *)v72 - 1) = v13;
  }
  uint64_t v14 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a3 + 96))(a3);
  v68 = 0;
  long long v69 = 0;
  uint64_t v70 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v68, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
  if (a5)
  {
    uint64_t v15 = *((void *)v69 - 2);
    *((void *)v69 - 2) = *((void *)v69 - 1);
    *((void *)v69 - 1) = v15;
  }
  if (MIL::IRTensorValueType::Rank(a2) == 1)
  {
    uint64_t v16 = (char *)v71;
    v76[0] = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)&v71, v16, v76);
  }
  if (MIL::IRTensorValueType::Rank(a3) == 1)
  {
    uint64_t v17 = v69;
    v76[0] = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)&v68, v17, v76);
  }
  if (!(*(uint64_t (**)(void))(**((void **)v72 - 1) + 24))(*((void *)v72 - 1))
    && !(*(uint64_t (**)(void))(**((void **)v69 - 2) + 24))(*((void *)v69 - 2)))
  {
    uint64_t v18 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v72 - 1));
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v20 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v69 - 2));
    if (v19 != (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20))
    {
      unint64_t v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v58, "shapes of x and y are not broadcastable");
      v58->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v58, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  long long v65 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&v65, v71, (uint64_t)(v72 - 16), (v72 - 16 - (unsigned char *)v71) >> 3);
  long long v63 = 0;
  uint64_t v64 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&__p, v68, (uint64_t)(v69 - 16), (v69 - 16 - (unsigned char *)v68) >> 3);
  unint64_t v21 = *a1;
  memset(v76, 0, sizeof(v76));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v76, v65, (uint64_t)v66, (v66 - (unsigned char *)v65) >> 3);
  uint64_t v77 = 0;
  v78[0] = 0;
  v78[1] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v77, __p, (uint64_t)v63, (v63 - (unsigned char *)__p) >> 3);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v74 = (void **)&v59;
  char v75 = 0;
  uint64_t v59 = operator new(0x30uLL);
  uint64_t v60 = v59;
  uint64_t v61 = v59 + 6;
  uint64_t v60 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>((uint64_t)&v61, (uint64_t)v76, (uint64_t)&v79, v59);
  MIL::ValueTypeInferenceUtils::BroadcastShape(v21, (uint64_t *)&v59, a6);
  uint64_t v74 = (void **)&v59;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v74);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    uint64_t v23 = (void *)v76[i + 3];
    if (v23)
    {
      v78[i] = v23;
      operator delete(v23);
    }
  }
  unint64_t v24 = v71;
  uint64_t v25 = ((v72 - (unsigned char *)v71) >> 3) - 2;
  unint64_t v26 = a6[2];
  uint64_t v27 = (void *)a6[1];
  if ((unint64_t)v27 >= v26)
  {
    uint64_t v29 = (uint64_t)((uint64_t)v27 - *a6) >> 3;
    if ((unint64_t)(v29 + 1) >> 61) {
      goto LABEL_70;
    }
    uint64_t v30 = v26 - *a6;
    uint64_t v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
      uint64_t v31 = v29 + 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32) {
      uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v32);
    }
    else {
      uint64_t v33 = 0;
    }
    int v34 = &v33[8 * v29];
    std::string v35 = &v33[8 * v32];
    *(void *)int v34 = v24[v25];
    int v28 = v34 + 8;
    unint64_t v37 = *a6;
    int v36 = (char *)a6[1];
    if (v36 != (char *)*a6)
    {
      do
      {
        uint64_t v38 = *((void *)v36 - 1);
        v36 -= 8;
        *((void *)v34 - 1) = v38;
        v34 -= 8;
      }
      while (v36 != (char *)v37);
      int v36 = (char *)*a6;
    }
    *a6 = (unint64_t)v34;
    a6[1] = (unint64_t)v28;
    a6[2] = (unint64_t)v35;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *uint64_t v27 = *((void *)v71 + v25);
    int v28 = v27 + 1;
  }
  a6[1] = (unint64_t)v28;
  uint64_t v39 = v68;
  uint64_t v40 = ((v69 - (unsigned char *)v68) >> 3) - 1;
  unint64_t v41 = a6[2];
  if ((unint64_t)v28 < v41)
  {
    *int v28 = *((void *)v68 + v40);
    uint64_t v42 = v28 + 1;
    goto LABEL_52;
  }
  uint64_t v43 = (uint64_t)((uint64_t)v28 - *a6) >> 3;
  if ((unint64_t)(v43 + 1) >> 61) {
LABEL_70:
  }
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  uint64_t v44 = v41 - *a6;
  uint64_t v45 = v44 >> 2;
  if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
    uint64_t v45 = v43 + 1;
  }
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v46 = v45;
  }
  if (v46) {
    uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v46);
  }
  else {
    uint64_t v47 = 0;
  }
  unint64_t v48 = &v47[8 * v43];
  unint64_t v49 = &v47[8 * v46];
  *(void *)unint64_t v48 = v39[v40];
  uint64_t v42 = v48 + 8;
  unint64_t v51 = *a6;
  uint64_t v50 = (char *)a6[1];
  if (v50 != (char *)*a6)
  {
    do
    {
      uint64_t v52 = *((void *)v50 - 1);
      v50 -= 8;
      *((void *)v48 - 1) = v52;
      v48 -= 8;
    }
    while (v50 != (char *)v51);
    uint64_t v50 = (char *)*a6;
  }
  *a6 = (unint64_t)v48;
  a6[1] = (unint64_t)v42;
  a6[2] = (unint64_t)v49;
  if (v50) {
    operator delete(v50);
  }
LABEL_52:
  a6[1] = (unint64_t)v42;
  if (MIL::IRTensorValueType::Rank(a2) == 1)
  {
    unint64_t v54 = *a6;
    unint64_t v53 = (unsigned char *)a6[1];
    uint64_t v55 = (unsigned char *)(*a6 + 8);
    int64_t v56 = v53 - v55;
    if (v53 != v55) {
      memmove((void *)*a6, v55, v53 - v55);
    }
    a6[1] = v54 + v56;
  }
  if (MIL::IRTensorValueType::Rank(a3) == 1) {
    a6[1] -= 8;
  }
  if (__p)
  {
    long long v63 = __p;
    operator delete(__p);
  }
  if (v65)
  {
    unint64_t v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    long long v69 = (char *)v68;
    operator delete(v68);
  }
  if (v71)
  {
    uint64_t v72 = (char *)v71;
    operator delete(v71);
  }
}

void sub_20F4E3C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  __cxa_free_exception(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    unint64_t v24 = &v19[8 * v18];
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, a3);
    uint64_t v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v10 = __src + 8;
    unint64_t v11 = v6 - 8;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_20F4E3F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(MIL::MILContext *a1@<X3>, MIL::IRConstantDimension **a2@<X0>, void *a3@<X1>, uint64_t *a4@<X2>, void *a5@<X8>)
{
  uint64_t v6 = *a4;
  if ((unint64_t)(a4[1] - *a4) <= 0xF)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v38 = a3[1];
    *(void *)&long long v45 = *a3;
    *((void *)&v45 + 1) = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v44, "Parameter x must have a minimum rank of 2. The last dimension represents vector of probabilities and remaining dimensions represent specific distributions.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v45, (uint64_t)v44, 315);
  }
  int v7 = (int)a1;
  BOOL v10 = 0;
  unint64_t v11 = 0;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v12 = a5 + 2;
  do
  {
    if ((unint64_t)v10 >= *v12)
    {
      uint64_t v13 = ((uint64_t)v10 - *a5) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = *v12 - *a5;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[8 * v13];
      *(void *)unint64_t v18 = *(void *)(v6 + 8 * v11);
      BOOL v10 = v18 + 8;
      uint64_t v20 = (char *)*a5;
      uint64_t v19 = (char *)a5[1];
      if (v19 != (char *)*a5)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v18 - 1) = v21;
          v18 -= 8;
        }
        while (v19 != v20);
        uint64_t v19 = (char *)*a5;
      }
      *a5 = v18;
      a5[1] = v10;
      a5[2] = &v17[8 * v16];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *v10++ = *(void *)(v6 + 8 * v11);
    }
    a5[1] = v10;
    ++v11;
    uint64_t v6 = *a4;
  }
  while (v11 < ((a4[1] - *a4) >> 3) - 1);
  if (v7 < 1)
  {
    uint64_t v39 = __cxa_allocate_exception(0x48uLL);
    uint64_t v40 = a3[1];
    *(void *)&long long v43 = *a3;
    *((void *)&v43 + 1) = v40;
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "Parameter size must be positive.");
    MIL::ValidationError::ValidationError((uint64_t)v39, &v43, (uint64_t)v42, 315);
  }
  uint64_t v22 = MIL::IRConstantDimension::Make(*a2, (MIL::MILContext *)v7);
  uint64_t v23 = v22;
  uint64_t v25 = (uint64_t *)a5[1];
  unint64_t v24 = a5[2];
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = ((uint64_t)v25 - *a5) >> 3;
    if ((unint64_t)(v27 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v24 - *a5;
    uint64_t v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
      uint64_t v29 = v27 + 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30) {
      uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v30);
    }
    else {
      uint64_t v31 = 0;
    }
    unint64_t v32 = (uint64_t *)&v31[8 * v27];
    uint64_t v33 = &v31[8 * v30];
    *unint64_t v32 = v23;
    unint64_t v26 = v32 + 1;
    std::string v35 = (char *)*a5;
    int v34 = (char *)a5[1];
    if (v34 != (char *)*a5)
    {
      do
      {
        uint64_t v36 = *((void *)v34 - 1);
        v34 -= 8;
        *--unint64_t v32 = v36;
      }
      while (v34 != v35);
      int v34 = (char *)*a5;
    }
    *a5 = v32;
    a5[1] = v26;
    a5[2] = v33;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    uint64_t *v25 = v22;
    unint64_t v26 = v25 + 1;
  }
  a5[1] = v26;
}

void sub_20F4E425C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v27) {
    __cxa_free_exception(v28);
  }
  unint64_t v30 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v26 + 8) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  if (MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(a1))
  {
    int v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v19 = *a3;
    uint64_t v20 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    unint64_t v8 = std::string::append(&v15, " in op ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)a2;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a2 + 8);
    }
    uint64_t v13 = std::string::append(&v16, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v19, 304, __p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_20F4E4440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(v28 - 40);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(MIL::IRValue *this@<X1>, MIL::IRConstantDimension **a2@<X0>, MIL::IRDimension ***a3@<X2>, void *a4@<X3>, void **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (this)
  {
    unint64_t v8 = (uint64_t *)MIL::IRValue::AsTensor(this);
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v8);
    unint64_t v11 = v10;
    std::vector<std::string const*>::reserve(a5, v10);
    if (v11)
    {
      std::string::size_type v12 = &Data[v11];
      do
      {
        uint64_t v13 = (MIL::MILContext *)*Data;
        if ((int)v13 <= 0)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          uint64_t v31 = a4[1];
          *(void *)&long long v34 = *a4;
          *((void *)&v34 + 1) = v31;
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v33, "Shape parameter must have positive values only");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v34, (uint64_t)v33, 315);
        }
        uint64_t v14 = MIL::IRConstantDimension::Make(*a2, v13);
        uint64_t v15 = v14;
        uint64_t v17 = (uint64_t *)a5[1];
        unint64_t v16 = (unint64_t)a5[2];
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = ((char *)v17 - (unsigned char *)*a5) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v16 - (void)*a5;
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v22);
          }
          else {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (uint64_t *)&v23[8 * v19];
          *unint64_t v24 = v15;
          std::string::size_type v18 = (char *)(v24 + 1);
          uint64_t v26 = (char *)*a5;
          uint64_t v25 = (char *)a5[1];
          if (v25 != *a5)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--unint64_t v24 = v27;
            }
            while (v25 != v26);
            uint64_t v25 = (char *)*a5;
          }
          *a5 = v24;
          a5[1] = v18;
          a5[2] = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *uint64_t v17 = v14;
          std::string::size_type v18 = (char *)(v17 + 1);
        }
        a5[1] = v18;
        ++Data;
      }
      while (Data != v12);
    }
  }
  else
  {
    uint64_t v28 = MIL::IRDimension::AsConstant(**a3);
    unint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 48))(v28);
    uint64_t v32 = MIL::IRUnknownDimension::Make(*a2, 0);
    std::vector<MIL::IRDimension const*>::assign((char **)a5, v29, &v32);
  }
}

void sub_20F4E46C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::assign(char **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  float result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    unint64_t v13 = (a1[1] - result) >> 3;
    if (v13 >= a2) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = (a1[1] - result) >> 3;
    }
    for (; v14; --v14)
    {
      *(void *)float result = *a3;
      result += 8;
    }
    if (a2 <= v13)
    {
      a1[1] = &(*a1)[8 * a2];
    }
    else
    {
      uint64_t v15 = a1[1];
      unint64_t v16 = &v15[8 * (a2 - v13)];
      uint64_t v17 = 8 * a2 - 8 * v13;
      do
      {
        *(void *)uint64_t v15 = *a3;
        v15 += 8;
        v17 -= 8;
      }
      while (v17);
      a1[1] = v16;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    float result = std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, v9);
    unint64_t v10 = a1[1];
    unint64_t v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)unint64_t v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void MIL::ValueTypeInferenceUtils::GetOperatorType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (std::string::find((const std::string *)a1, 46, 0) == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v5 = *(const std::string::value_type **)a1;
      std::string::size_type v6 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::size_type v4 = std::string::find((const std::string *)a1, 46, 0);
    std::string::basic_string(a2, (const std::string *)a1, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
  }
}

void MIL::ValueTypeInferenceUtils::MixedOpTypeinference(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  v368[1] = *MEMORY[0x263EF8340];
  uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v6, (std::string *)__p);
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
    if (SBYTE7(v354) != 6) {
      goto LABEL_21;
    }
    if (LODWORD(__p[0]) != 1752457575 || WORD2(__p[0]) != 29285) {
      goto LABEL_21;
    }
LABEL_17:
    MIL::Builder::FunctionBuilder::GetContext(a1, &__sz);
    unint64_t v10 = (MIL::IRConstantDimension *)__sz.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    unint64_t v11 = *(MIL::Builder::OperationBuilder **)a2;
    uint64_t v12 = operator new(4uLL);
    _DWORD *v12 = 0;
    v365.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 1);
    v365.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 1);
    v365.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    operator delete(v12);
    if (SBYTE7(v354) < 0)
    {
      operator delete(__p[0]);
      if (!v13)
      {
LABEL_271:
        int64_t p_sz = 0;
        goto LABEL_474;
      }
    }
    else if (!v13)
    {
      goto LABEL_271;
    }
    uint64_t v87 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
    std::string v88 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v87 + 64))(v87);
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v88, (unsigned __int8 *)__p))
    {
      std::string v89 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v365, "batch_dims");
      BOOL v90 = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v89, (const void **)&v365.__r_.__value_.__l.__data_) != 0;
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      BOOL v90 = 0;
    }
    if (SBYTE7(v354) < 0)
    {
      operator delete(__p[0]);
      if (!v90) {
        goto LABEL_257;
      }
    }
    else if (!v90)
    {
      goto LABEL_257;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
    v142 = *(MIL::Builder::OperationBuilder **)a2;
    v143 = operator new(4uLL);
    _DWORD *v143 = 0;
    v365.__r_.__value_.__l.__size_ = (std::string::size_type)(v143 + 1);
    v365.__r_.__value_.__r.__words[2] = (std::string::size_type)(v143 + 1);
    v365.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
    operator delete(v143);
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    if (!v144) {
      goto LABEL_271;
    }
LABEL_257:
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "indices");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    if (!(void)v360) {
      goto LABEL_470;
    }
    if (!(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360)) {
      goto LABEL_470;
    }
    if (!v359.__r_.__value_.__r.__words[0]) {
      goto LABEL_470;
    }
    if (!(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0])) {
      goto LABEL_470;
    }
    uint64_t v145 = (*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
    v146 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v145 + 32))(v145);
    if (MIL::IRTensorValueType::Rank(v146) != 1) {
      goto LABEL_470;
    }
    uint64_t v147 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0]);
    uint64_t v148 = (*(uint64_t (**)(uint64_t))(*(void *)v147 + 32))(v147);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v148 + 16))(v148) != 1) {
      goto LABEL_470;
    }
    uint64_t v149 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0]);
    uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 32))(v149);
    int v151 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 88))(v150);
    switch(v151)
    {
      case 10:
        v301 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                            + 40))(v359.__r_.__value_.__r.__words[0]);
        int v300 = *(__int16 *)MIL::IRTensorValue::GetDataView<short>(v301);
        break;
      case 11:
        v299 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                            + 40))(v359.__r_.__value_.__r.__words[0]);
        int v300 = *(_DWORD *)MIL::IRTensorValue::GetDataView<int>(v299);
        break;
      case 15:
        v152 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                            + 40))(v359.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<unsigned short>(v152);
LABEL_466:
        uint64_t v304 = (*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
        uint64_t v305 = (*(uint64_t (**)(uint64_t))(*(void *)v304 + 32))(v304);
        int v306 = (*(uint64_t (**)(uint64_t))(*(void *)v305 + 88))(v305);
        switch(v306)
        {
          case 15:
            v338 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
            MIL::IRTensorValue::GetDataView<unsigned short>(v338);
            uint64_t v339 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0]);
            v340 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v339 + 32))(v339);
            unint64_t v341 = MIL::IRTensorValueType::Rank(v340);
            uint64_t v363 = 1;
            std::vector<unsigned long long>::vector(__p, v341, &v363);
            MIL::IRTensorValueType::Make(v10, 15, (MIL::MILContext ***)__p);
          case 11:
            v334 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
            MIL::IRTensorValue::GetDataView<int>(v334);
            uint64_t v335 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0]);
            v336 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v335 + 32))(v335);
            unint64_t v337 = MIL::IRTensorValueType::Rank(v336);
            uint64_t v363 = 1;
            std::vector<unsigned long long>::vector(__p, v337, &v363);
            MIL::IRTensorValueType::Make(v10, 11, (MIL::MILContext ***)__p);
          case 10:
            v307 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
            MIL::IRTensorValue::GetDataView<short>(v307);
            uint64_t v308 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 40))(v359.__r_.__value_.__r.__words[0]);
            v309 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v308 + 32))(v308);
            unint64_t v310 = MIL::IRTensorValueType::Rank(v309);
            uint64_t v363 = 1;
            std::vector<unsigned long long>::vector(__p, v310, &v363);
            MIL::IRTensorValueType::Make(v10, 10, (MIL::MILContext ***)__p);
        }
        goto LABEL_470;
      default:
LABEL_470:
        int64_t p_sz = 0;
        if (v359.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
        }
        if (*((void *)&v360 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v360 + 1));
        }
LABEL_474:
        if (__sz.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_);
        }
        if (p_sz)
        {
          __p[0] = (void *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          v311 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((void *)v311 + 5, &p_sz);
          std::string::size_type v134 = p_sz;
          int64_t p_sz = 0;
          if (v134) {
            goto LABEL_478;
          }
          goto LABEL_479;
        }
        return;
    }
    if (v300 < 0)
    {
      uint64_t v302 = (*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
      uint64_t v303 = (*(uint64_t (**)(uint64_t))(*(void *)v302 + 32))(v302);
      (*(uint64_t (**)(uint64_t))(*(void *)v303 + 16))(v303);
    }
    goto LABEL_466;
  }
  if (__p[1] != (void *)6)
  {
    operator delete(__p[0]);
    goto LABEL_21;
  }
  BOOL v9 = *(_DWORD *)__p[0] != 1752457575 || *((_WORD *)__p[0] + 2) != 29285;
  operator delete(__p[0]);
  if (!v9) {
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v14 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v15, (std::string *)__p);
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
    if (SBYTE7(v354) != 6) {
      goto LABEL_41;
    }
    if (LODWORD(__p[0]) != 1668181859 || WORD2(__p[0]) != 29793) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  if (__p[1] != (void *)6)
  {
    operator delete(__p[0]);
    goto LABEL_41;
  }
  BOOL v18 = *(_DWORD *)__p[0] != 1668181859 || *((_WORD *)__p[0] + 2) != 29793;
  operator delete(__p[0]);
  if (!v18)
  {
LABEL_37:
    MIL::Builder::FunctionBuilder::GetContext(a1, &v359);
    uint64_t v19 = (MIL::IRConstantDimension *)v359.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    uint64_t v20 = *(MIL::Builder::OperationBuilder **)a2;
    uint64_t v21 = operator new(4uLL);
    _DWORD *v21 = 0;
    v365.__r_.__value_.__l.__size_ = (std::string::size_type)(v21 + 1);
    v365.__r_.__value_.__r.__words[2] = (std::string::size_type)(v21 + 1);
    v365.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    operator delete(v21);
    if (SBYTE7(v354) < 0)
    {
      operator delete(__p[0]);
      if (!v22)
      {
LABEL_236:
        __sz.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_237;
      }
    }
    else if (!v22)
    {
      goto LABEL_236;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "interleave");
    v131 = (uint64_t *)MIL::IRValue::AsTensor((MIL::IRValue *)v365.__r_.__value_.__l.__data_);
    int v132 = *(unsigned __int8 *)MIL::IRTensorValue::GetDataView<BOOL>(v131);
    if (v365.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
    }
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    if (v132) {
      goto LABEL_236;
    }
    unint64_t v163 = 0;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v354 = 0;
    while (1)
    {
      v164 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v365, "values");
      unint64_t NumArguments = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v164, (const void **)&v365.__r_.__value_.__l.__data_);
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (v163 >= NumArguments)
      {
        v282 = __p[0];
        v281 = __p[1];
        v283 = operator new(8uLL);
        v365.__r_.__value_.__r.__words[0] = (std::string::size_type)v283;
        void *v283 = (v281 - v282) >> 2;
        v365.__r_.__value_.__l.__size_ = (std::string::size_type)(v283 + 1);
        v365.__r_.__value_.__r.__words[2] = (std::string::size_type)(v283 + 1);
        MIL::IRTensorValueType::Make(v19, 11, (MIL::MILContext ***)&v365);
      }
      v166 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v365, "values");
      ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v166, (uint64_t)&v365, v163);
      uint64_t Value = MIL::Builder::Variable::TryGetValue(ArgumentForParameter);
      uint64_t v169 = Value;
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v365.__r_.__value_.__l.__data_);
        if (v169)
        {
LABEL_286:
          v170 = *(MIL::Builder::OperationBuilder **)a2;
          std::string::basic_string[abi:ne180100]<0>(&v365, "values");
          v171 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v170, (uint64_t)&v365, v163);
          MIL::Builder::Variable::TryGetValueSharedPtr(v171, &v360);
          v172 = (std::__shared_weak_count *)*((void *)&v360 + 1);
          uint64_t v173 = v360;
          long long v360 = 0uLL;
          goto LABEL_294;
        }
      }
      else if (Value)
      {
        goto LABEL_286;
      }
      v174 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v365, "values");
      v175 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v174, (uint64_t)&v365, v163);
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v175);
      v177 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, Name);
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (!v177)
      {
        __sz.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_451;
      }
      v178 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v365, "values");
      v179 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v178, (uint64_t)&v365, v163);
      v180 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v179);
      v181 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, v180);
      if (!v181) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v173 = *((void *)v181 + 5);
      v172 = (std::__shared_weak_count *)*((void *)v181 + 6);
      if (v172) {
        atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_294:
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (!v173
        || !(*(uint64_t (**)(uint64_t))(*(void *)v173 + 40))(v173)
        || (uint64_t v182 = (*(uint64_t (**)(uint64_t))(*(void *)v173 + 40))(v173),
            uint64_t v183 = (*(uint64_t (**)(uint64_t))(*(void *)v182 + 32))(v182),
            v184 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v183 + 96))(v183),
            v184[1] - *v184 > 8uLL))
      {
        __sz.__r_.__value_.__r.__words[0] = 0;
        if (v172) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v172);
        }
LABEL_451:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
LABEL_237:
        if (v359.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
        }
        if (__sz.__r_.__value_.__r.__words[0])
        {
          __p[0] = (void *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((void *)v133 + 5, (uint64_t *)&__sz);
          std::string::size_type v134 = __sz.__r_.__value_.__r.__words[0];
          __sz.__r_.__value_.__r.__words[0] = 0;
          if (!v134) {
            goto LABEL_479;
          }
LABEL_478:
          (*(void (**)(std::string::size_type))(*(void *)v134 + 8))(v134);
LABEL_479:
          OwningBlock = (MIL::Builder::BlockBuilder *)MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2);
          MIL::Builder::BlockBuilder::GetOutputNames(OwningBlock, (std::string *)&v360);
          for (unint64_t i = 0; i < MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2); ++i)
          {
            Output = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, i);
            v315 = MIL::Builder::Variable::GetName(Output);
            if (*((char *)v315 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)v315, *((void *)v315 + 1));
            }
            else
            {
              long long v316 = *(_OWORD *)v315;
              v359.__r_.__value_.__r.__words[2] = *((void *)v315 + 2);
              *(_OWORD *)&v359.__r_.__value_.__l.__data_ = v316;
            }
            if ((v359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v359.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v359.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
            if ((SBYTE7(v354) & 0x80u) == 0) {
              v318 = __p;
            }
            else {
              v318 = (void **)__p[0];
            }
            if (size)
            {
              if ((v359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v319 = &v359;
              }
              else {
                v319 = (std::string *)v359.__r_.__value_.__r.__words[0];
              }
              memmove(v318, v319, size);
            }
            *(_WORD *)((char *)v318 + size) = 95;
            std::to_string(&v365, 0);
            if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v320 = &v365;
            }
            else {
              v320 = (std::string *)v365.__r_.__value_.__r.__words[0];
            }
            if ((v365.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v321 = HIBYTE(v365.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v321 = v365.__r_.__value_.__l.__size_;
            }
            v322 = std::string::append((std::string *)__p, (const std::string::value_type *)v320, v321);
            long long v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
            __sz.__r_.__value_.__r.__words[2] = v322->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v323;
            v322->__r_.__value_.__l.__size_ = 0;
            v322->__r_.__value_.__r.__words[2] = 0;
            v322->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v365.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v354) < 0) {
              operator delete(__p[0]);
            }
            unint64_t v324 = 1;
            while (MIL::Builder::BlockBuilder::TryGetVariable((uint64_t)OwningBlock, (uint64_t)&__sz))
            {
              std::to_string((std::string *)__p, v324);
              if ((v359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v325 = &v359;
              }
              else {
                v325 = (std::string *)v359.__r_.__value_.__r.__words[0];
              }
              if ((v359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v326 = HIBYTE(v359.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v326 = v359.__r_.__value_.__l.__size_;
              }
              v327 = std::string::insert((std::string *)__p, 0, (const std::string::value_type *)v325, v326);
              std::string::size_type v328 = v327->__r_.__value_.__r.__words[0];
              v365.__r_.__value_.__r.__words[0] = v327->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v365.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v327->__r_.__value_.__r.__words[1] + 7);
              char v329 = HIBYTE(v327->__r_.__value_.__r.__words[2]);
              v327->__r_.__value_.__l.__size_ = 0;
              v327->__r_.__value_.__r.__words[2] = 0;
              v327->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__sz.__r_.__value_.__l.__data_);
              }
              __sz.__r_.__value_.__r.__words[0] = v328;
              __sz.__r_.__value_.__l.__size_ = v365.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&__sz.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v365.__r_.__value_.__r.__words + 7);
              *((unsigned char *)&__sz.__r_.__value_.__s + 23) = v329;
              if (SBYTE7(v354) < 0) {
                operator delete(__p[0]);
              }
              ++v324;
            }
            __p[0] = &v359;
            v330 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)&v359, (uint64_t)&std::piecewise_construct, (long long **)__p);
            uint64_t v332 = *((void *)v330 + 5);
            v331 = (std::__shared_weak_count *)*((void *)v330 + 6);
            if (v331) {
              atomic_fetch_add_explicit(&v331->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v332)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "const");
              uint64_t v333 = *(void *)(a2 + 8);
              v352[0] = *(void *)a2;
              v352[1] = v333;
              if (v333) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v333 + 8), 1uLL, memory_order_relaxed);
              }
              MIL::Builder::BlockBuilder::AddOperation((uint64_t)OwningBlock, (unsigned __int8 *)__p, (uint64_t)v352);
            }
            if (v331) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v331);
            }
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__sz.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v359.__r_.__value_.__l.__data_);
            }
          }
          MIL::Builder::FunctionBuilder::GetContext(a1, __p);
          MIL::IRTensorValueType::MakeScalar();
        }
        return;
      }
      v185 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v173 + 40))(v173);
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v185);
      if (v187)
      {
        v188 = (int *)Data;
        v189 = (int *)(Data + 4 * v187);
        v190 = (char *)__p[1];
        do
        {
          int v191 = *v188;
          if ((unint64_t)v190 >= (unint64_t)v354)
          {
            v193 = (char *)__p[0];
            uint64_t v194 = (v190 - (char *)__p[0]) >> 2;
            unint64_t v195 = v194 + 1;
            if ((unint64_t)(v194 + 1) >> 62) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v196 = v354 - (unint64_t)__p[0];
            if ((uint64_t)(v354 - (unint64_t)__p[0]) >> 1 > v195) {
              unint64_t v195 = v196 >> 1;
            }
            if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v197 = v195;
            }
            if (v197)
            {
              v198 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v354, v197);
              v193 = (char *)__p[0];
              v190 = (char *)__p[1];
            }
            else
            {
              v198 = 0;
            }
            v199 = &v198[4 * v194];
            *(_DWORD *)v199 = v191;
            v192 = v199 + 4;
            while (v190 != v193)
            {
              int v200 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *((_DWORD *)v199 - 1) = v200;
              v199 -= 4;
            }
            __p[0] = v199;
            __p[1] = v192;
            *(void *)&long long v354 = &v198[4 * v197];
            if (v193) {
              operator delete(v193);
            }
          }
          else
          {
            *(_DWORD *)v190 = v191;
            v192 = v190 + 4;
          }
          __p[1] = v192;
          ++v188;
          v190 = (char *)v192;
        }
        while (v188 != v189);
      }
      if (v172) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v172);
      }
      ++v163;
    }
  }
LABEL_41:
  uint64_t v23 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v24, (std::string *)__p);
  if (SBYTE7(v354) < 0)
  {
    if (__p[1] != (void *)4)
    {
      operator delete(__p[0]);
      goto LABEL_72;
    }
    int v25 = *(_DWORD *)__p[0];
    operator delete(__p[0]);
    if (v25 != 1819044198) {
      goto LABEL_72;
    }
LABEL_47:
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    char v27 = v26;
    if (v26)
    {
      unint64_t v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v354 = 0;
      while (1)
      {
        unint64_t v29 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v365.__r_.__value_.__l.__data_
                                                                           + 40))(v365.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<int>(v29);
        if (v28 >= v30) {
          break;
        }
        MIL::Builder::FunctionBuilder::GetContext(a1, &v360);
        uint64_t v31 = (MIL::IRConstantDimension *)v360;
        uint64_t v32 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v365.__r_.__value_.__l.__data_
                                                                           + 40))(v365.__r_.__value_.__r.__words[0]);
        uint64_t v33 = MIL::IRTensorValue::GetDataView<int>(v32);
        uint64_t v34 = MIL::IRConstantDimension::Make(v31, (MIL::MILContext *)*(int *)(v33 + 4 * v28));
        uint64_t v35 = v34;
        uint64_t v36 = (char *)__p[1];
        if (__p[1] >= (void *)v354)
        {
          int64_t v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = (uint64_t)(v354 - (unint64_t)__p[0]) >> 2;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if ((unint64_t)v354 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v354, v40);
          }
          else {
            unint64_t v41 = 0;
          }
          uint64_t v42 = (uint64_t *)&v41[8 * v38];
          *uint64_t v42 = v35;
          unint64_t v37 = v42 + 1;
          uint64_t v44 = (char *)__p[0];
          long long v43 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v45 = *((void *)v43 - 1);
              v43 -= 8;
              *--uint64_t v42 = v45;
            }
            while (v43 != v44);
            long long v43 = (char *)__p[0];
          }
          __p[0] = v42;
          __p[1] = v37;
          *(void *)&long long v354 = &v41[8 * v40];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(void *)__p[1] = v34;
          unint64_t v37 = v36 + 8;
        }
        __p[1] = v37;
        if (*((void *)&v360 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v360 + 1));
        }
        ++v28;
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v360);
      uint64_t v84 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      uint64_t Type = MIL::Builder::Variable::TryGetType(v84);
      uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type);
      (*(void (**)(uint64_t))(*(void *)v86 + 88))(v86);
      MIL::IRTensorValueType::MakeWithShape();
    }
    if (v365.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
    }
    if (v27) {
      goto LABEL_479;
    }
    return;
  }
  if (SBYTE7(v354) == 4 && LODWORD(__p[0]) == 1819044198) {
    goto LABEL_47;
  }
LABEL_72:
  uint64_t v46 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 16))(v46);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v47, (std::string *)__p);
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
    if (SBYTE7(v354) != 11) {
      goto LABEL_99;
    }
    if (__p[0] != (void *)0x705F656375646572 || *(void **)((char *)__p + 3) != (void *)0x646F72705F656375) {
      goto LABEL_99;
    }
LABEL_88:
    std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
    unint64_t v51 = (uint64_t *)MIL::IRValue::AsTensor((MIL::IRValue *)v365.__r_.__value_.__l.__data_);
    int v52 = *(unsigned __int8 *)MIL::IRTensorValue::GetDataView<BOOL>(v51);
    if (v365.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
    }
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    if (!v52)
    {
      unint64_t v53 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "axes");
      if (MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v53, (const void **)__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v365, "axes");
        unint64_t v54 = *(MIL::Builder::OperationBuilder **)a2;
        LODWORD(v359.__r_.__value_.__l.__data_) = 0;
        std::vector<int>::vector[abi:ne180100](&v360, &v359, 1uLL);
        if ((void)v360)
        {
          *((void *)&v360 + 1) = v360;
          operator delete((void *)v360);
        }
        BOOL v56 = !v55;
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v365.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        BOOL v56 = 0;
      }
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      if (!v56)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "x");
        if (SBYTE7(v354) < 0) {
          operator delete(__p[0]);
        }
        char v266 = v265;
        if (v265)
        {
          v267 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
          v268 = (int *)MIL::IRTensorValue::GetDataView<int>(v267);
          if (v269)
          {
            uint64_t v270 = 4 * v269;
            int v271 = 1;
            do
            {
              int v272 = *v268++;
              v271 *= v272;
              v270 -= 4;
            }
            while (v270);
          }
          MIL::Builder::FunctionBuilder::GetContext(a1, &v359);
          v291 = (MIL::IRConstantDimension *)v359.__r_.__value_.__r.__words[0];
          int64_t p_sz = 1;
          std::vector<unsigned long long>::vector[abi:ne180100](__p, &p_sz, 1uLL);
          MIL::IRTensorValueType::Make(v291, 11, (MIL::MILContext ***)__p);
        }
        if (*((void *)&v360 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v360 + 1));
        }
        if (v266) {
          goto LABEL_479;
        }
      }
    }
    return;
  }
  if (__p[1] != (void *)11)
  {
    operator delete(__p[0]);
    goto LABEL_99;
  }
  BOOL v50 = *(void *)__p[0] != 0x705F656375646572 || *(void *)((char *)__p[0] + 3) != 0x646F72705F656375;
  operator delete(__p[0]);
  if (!v50) {
    goto LABEL_88;
  }
LABEL_99:
  uint64_t v57 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 16))(v57);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v58, (std::string *)__p);
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
    if (SBYTE7(v354) != 7) {
      goto LABEL_131;
    }
    if (LODWORD(__p[0]) != 1752393074 || *(_DWORD *)((char *)__p + 3) != 1701863784) {
      goto LABEL_131;
    }
LABEL_115:
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v354 = 0;
    {
      unint64_t v62 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                         + 40))(v359.__r_.__value_.__r.__words[0]);
      long long v63 = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v62);
      if (!v64) {
        goto LABEL_335;
      }
      uint64_t v65 = 0;
      uint64_t v66 = 4 * v64;
      unint64_t v67 = 1;
      do
      {
        uint64_t v68 = *v63;
        if ((int)v68 < 1)
        {
          uint64_t v65 = 1;
          if (v68 != -1) {
            goto LABEL_382;
          }
        }
        else
        {
          v67 *= v68;
        }
        ++v63;
        v66 -= 4;
      }
      while (v66);
      if (v65)
      {
        long long v69 = *(MIL::Builder::OperationBuilder **)a2;
        std::string::basic_string[abi:ne180100]<0>(&v365, "x");
        uint64_t v70 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v69, (uint64_t)&v365, 0);
        long long v71 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v70);
        if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v71))
        {
          uint64_t v72 = *(MIL::Builder::OperationBuilder **)a2;
          std::string::basic_string[abi:ne180100]<0>(&v360, "x");
          uint64_t v73 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v72, (uint64_t)&v360, 0);
          uint64_t v363 = (uint64_t)MIL::Builder::Variable::GetName(v73);
          BOOL v74 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v363, (uint64_t)&std::piecewise_construct, (long long **)&v363)+ 5) != 0;
          if (SBYTE7(v361) < 0) {
            operator delete((void *)v360);
          }
        }
        else
        {
          BOOL v74 = 0;
        }
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v365.__r_.__value_.__l.__data_);
        }
        if (!v74) {
          goto LABEL_382;
        }
        v285 = *(MIL::Builder::OperationBuilder **)a2;
        std::string::basic_string[abi:ne180100]<0>(&v365, "x");
        v286 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v285, (uint64_t)&v365, 0);
        *(void *)&long long v360 = MIL::Builder::Variable::GetName(v286);
        v287 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v360, (uint64_t)&std::piecewise_construct, (long long **)&v360);
        uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v287
                                                                           + 5));
        uint64_t v289 = MIL::IRValueType::AsTensorType(ValueType);
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v365.__r_.__value_.__l.__data_);
        }
        v290 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v289 + 96))(v289);
        if (MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v290))
        {
LABEL_382:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (__sz.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_);
          }
          if (v359.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
          }
          return;
        }
        unint64_t v205 = (*(uint64_t (**)(uint64_t))(*(void *)v289 + 16))(v289) / v67;
      }
      else
      {
LABEL_335:
        unint64_t v205 = 0;
      }
      v206 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                          + 40))(v359.__r_.__value_.__r.__words[0]);
      uint64_t v207 = MIL::IRTensorValue::GetDataView<int>(v206);
      if (v208)
      {
        v209 = (unsigned int *)v207;
        v210 = (unsigned int *)(v207 + 4 * v208);
        do
        {
          v211 = (MIL::MILContext *)*v209;
          if ((int)v211 >= 1)
          {
            MIL::Builder::FunctionBuilder::GetContext(a1, &v365);
            uint64_t v212 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v365.__r_.__value_.__l.__data_, v211);
            uint64_t v213 = v212;
            v214 = (char *)__p[1];
            if (__p[1] >= (void *)v354)
            {
              int64_t v216 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              if ((unint64_t)(v216 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v217 = (uint64_t)(v354 - (unint64_t)__p[0]) >> 2;
              if (v217 <= v216 + 1) {
                unint64_t v217 = v216 + 1;
              }
              if ((unint64_t)v354 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v218 = v217;
              }
              if (v218) {
                v219 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v354, v218);
              }
              else {
                v219 = 0;
              }
              v220 = (uint64_t *)&v219[8 * v216];
              uint64_t *v220 = v213;
              v215 = v220 + 1;
              v222 = (char *)__p[0];
              v221 = (char *)__p[1];
              if (__p[1] != __p[0])
              {
                do
                {
                  uint64_t v223 = *((void *)v221 - 1);
                  v221 -= 8;
                  *--v220 = v223;
                }
                while (v221 != v222);
                v221 = (char *)__p[0];
              }
              __p[0] = v220;
              __p[1] = v215;
              *(void *)&long long v354 = &v219[8 * v218];
              if (v221) {
                operator delete(v221);
              }
            }
            else
            {
              *(void *)__p[1] = v212;
              v215 = v214 + 8;
            }
            __p[1] = v215;
            if (v365.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
            }
          }
          if (v211 == -1)
          {
            MIL::Builder::FunctionBuilder::GetContext(a1, &v365);
            uint64_t v224 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v365.__r_.__value_.__l.__data_, (MIL::MILContext *)v205);
            uint64_t v225 = v224;
            v226 = (char *)__p[1];
            if (__p[1] >= (void *)v354)
            {
              int64_t v228 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              if ((unint64_t)(v228 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v229 = (uint64_t)(v354 - (unint64_t)__p[0]) >> 2;
              if (v229 <= v228 + 1) {
                unint64_t v229 = v228 + 1;
              }
              if ((unint64_t)v354 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v230 = v229;
              }
              if (v230) {
                v231 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v354, v230);
              }
              else {
                v231 = 0;
              }
              v232 = (uint64_t *)&v231[8 * v228];
              uint64_t *v232 = v225;
              v227 = v232 + 1;
              v234 = (char *)__p[0];
              v233 = (char *)__p[1];
              if (__p[1] != __p[0])
              {
                do
                {
                  uint64_t v235 = *((void *)v233 - 1);
                  v233 -= 8;
                  *--v232 = v235;
                }
                while (v233 != v234);
                v233 = (char *)__p[0];
              }
              __p[0] = v232;
              __p[1] = v227;
              *(void *)&long long v354 = &v231[8 * v230];
              if (v233) {
                operator delete(v233);
              }
            }
            else
            {
              *(void *)__p[1] = v224;
              v227 = v226 + 8;
            }
            __p[1] = v227;
            if (v365.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v365.__r_.__value_.__l.__size_);
            }
          }
          ++v209;
        }
        while (v209 != v210);
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v365);
      v236 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      uint64_t v237 = MIL::Builder::Variable::TryGetType(v236);
      uint64_t v238 = (*(uint64_t (**)(uint64_t))(*(void *)v237 + 24))(v237);
      (*(void (**)(uint64_t))(*(void *)v238 + 88))(v238);
      MIL::IRTensorValueType::MakeWithShape();
    }
    {
      uint64_t v239 = (*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_ + 32))(v359.__r_.__value_.__r.__words[0]);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v239 + 16))(v239) == 1)
      {
        v240 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                            + 40))(__sz.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<int>(v240);
        if (v241 <= 0xA)
        {
          v242 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                              + 40))(__sz.__r_.__value_.__r.__words[0]);
          v243 = (const void *)MIL::IRTensorValue::GetDataView<int>(v242);
          v244 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                              + 40))(__sz.__r_.__value_.__r.__words[0]);
          uint64_t v245 = MIL::IRTensorValue::GetDataView<int>(v244);
          memset(&v365, 0, sizeof(v365));
          std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v365, v243, v245 + 4 * v246, (v245 + 4 * v246 - (uint64_t)v243) >> 2);
          MIL::Builder::FunctionBuilder::GetContext(a1, &v363);
          v247 = (MIL::IRConstantDimension *)v363;
          v368[0] = (uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 2;
          std::vector<unsigned long long>::vector[abi:ne180100](&v360, v368, 1uLL);
          MIL::IRTensorValueType::Make(v247, 11, (MIL::MILContext ***)&v360);
        }
      }
    }
    goto LABEL_382;
  }
  if (__p[1] != (void *)7)
  {
    operator delete(__p[0]);
    goto LABEL_131;
  }
  BOOL v61 = *(_DWORD *)__p[0] != 1752393074 || *(_DWORD *)((char *)__p[0] + 3) != 1701863784;
  operator delete(__p[0]);
  if (!v61) {
    goto LABEL_115;
  }
LABEL_131:
  uint64_t v75 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 16))(v75);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v76, (std::string *)__p);
  if ((SBYTE7(v354) & 0x80000000) == 0)
  {
    if (SBYTE7(v354) != 14) {
      goto LABEL_170;
    }
    if (__p[0] != (void *)0x79625F6563696C73 || *(void **)((char *)__p + 6) != (void *)0x7865646E695F7962) {
      goto LABEL_170;
    }
LABEL_147:
    std::string::basic_string[abi:ne180100]<0>(__p, "begin");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "end");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    MIL::Builder::OperationBuilder::GetParameterNames(*(unsigned __int8 ***)a2, (uint64_t)__p);
    std::string::basic_string[abi:ne180100]<0>(&v365, "squeeze_mask");
    uint64_t v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(__p, (unsigned __int8 *)&v365);
    if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v365.__r_.__value_.__l.__data_);
    }
    if (v80)
    {
      long long v81 = std::string::basic_string[abi:ne180100]<0>(&v365, "squeeze_mask");
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      unint64_t v82 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
      BOOL v83 = *(unsigned char *)MIL::IRTensorValue::GetDataView<BOOL>(v82) != 0;
      if (*((void *)&v360 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v360 + 1));
      }
    }
    else
    {
      BOOL v83 = 0;
    }
    {
      {
        {
          uint64_t v201 = (*(uint64_t (**)(uint64_t))(*(void *)v363 + 40))(v363);
          v202 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v201 + 32))(v201);
          if (MIL::IRTensorValueType::Rank(v202) == 1)
          {
            if (v83)
            {
              v203 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                                  + 40))(v359.__r_.__value_.__r.__words[0]);
              MIL::IRTensorValue::GetDataView<int>(v203);
              v204 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v363 + 40))(v363);
              MIL::IRTensorValue::GetDataView<int>(v204);
              MIL::Builder::FunctionBuilder::GetContext(a1, &v365);
              MIL::IRTensorValueType::MakeScalar();
            }
            memset(&v365, 0, sizeof(v365));
            v292 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                                + 40))(v359.__r_.__value_.__r.__words[0]);
            uint64_t v293 = *(int *)MIL::IRTensorValue::GetDataView<int>(v292);
            for (uint64_t j = 4 * v293; ; j += 4)
            {
              v295 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                                  + 40))(__sz.__r_.__value_.__r.__words[0]);
              if (v293 >= *(int *)MIL::IRTensorValue::GetDataView<int>(v295)) {
                break;
              }
              v296 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v363 + 40))(v363);
              uint64_t v297 = MIL::IRTensorValue::GetDataView<int>(v296);
              std::vector<int>::push_back[abi:ne180100]((uint64_t)&v365, (_DWORD *)(v297 + j));
              ++v293;
            }
            MIL::Builder::FunctionBuilder::GetContext(a1, &p_sz);
            v298 = (MIL::IRConstantDimension *)p_sz;
            uint64_t v366 = (uint64_t)(v365.__r_.__value_.__l.__size_ - v365.__r_.__value_.__r.__words[0]) >> 2;
            std::vector<unsigned long long>::vector[abi:ne180100](&v360, &v366, 1uLL);
            MIL::IRTensorValueType::Make(v298, 11, (MIL::MILContext ***)&v360);
          }
        }
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
    if (v364) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v364);
    }
    if (__sz.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_);
    }
    uint64_t v116 = (std::__shared_weak_count *)v359.__r_.__value_.__l.__size_;
    if (!v359.__r_.__value_.__l.__size_) {
      return;
    }
LABEL_333:
    std::__shared_weak_count::__release_shared[abi:ne180100](v116);
    return;
  }
  if (__p[1] == (void *)14)
  {
    BOOL v79 = *(void *)__p[0] != 0x79625F6563696C73 || *(void *)((char *)__p[0] + 6) != 0x7865646E695F7962;
    operator delete(__p[0]);
    if (v79) {
      goto LABEL_170;
    }
    goto LABEL_147;
  }
  operator delete(__p[0]);
LABEL_170:
  uint64_t v91 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 16))(v91);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v92, (std::string *)__p);
  BOOL v93 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "slice_by_size");
  BOOL v94 = v93;
  if (SBYTE7(v354) < 0)
  {
    operator delete(__p[0]);
    if (v94)
    {
LABEL_172:
      std::string::basic_string[abi:ne180100]<0>(__p, "begin");
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "size");
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "x");
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v354 = 0;
        uint64_t v95 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
        uint64_t v96 = *(int *)MIL::IRTensorValue::GetDataView<int>(v95);
        uint64_t v97 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v359.__r_.__value_.__l.__data_
                                                                           + 40))(v359.__r_.__value_.__r.__words[0]);
        int v98 = *(_DWORD *)MIL::IRTensorValue::GetDataView<int>(v97);
        uint64_t v99 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                           + 40))(__sz.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<int>(v99);
        if (v98 == -1) {
          int v101 = v100;
        }
        else {
          int v101 = v98 + v96;
        }
        if ((int)v96 < v101)
        {
          do
          {
            uint64_t v102 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)__sz.__r_.__value_.__l.__data_
                                                                                + 40))(__sz.__r_.__value_.__r.__words[0]);
            uint64_t v103 = MIL::IRTensorValue::GetDataView<int>(v102);
            uint64_t v104 = v103;
            v105 = (char *)__p[1];
            if (__p[1] >= (void *)v354)
            {
              v107 = (char *)__p[0];
              int64_t v108 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              unint64_t v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 62) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v110 = v354 - (unint64_t)__p[0];
              if ((uint64_t)(v354 - (unint64_t)__p[0]) >> 1 > v109) {
                unint64_t v109 = v110 >> 1;
              }
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v109;
              }
              if (v111)
              {
                uint64_t v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v354, v111);
                v107 = (char *)__p[0];
                v105 = (char *)__p[1];
              }
              else
              {
                uint64_t v112 = 0;
              }
              v113 = &v112[4 * v108];
              *(_DWORD *)v113 = *(_DWORD *)(v104 + 4 * v96);
              v106 = v113 + 4;
              while (v105 != v107)
              {
                int v114 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v113 - 1) = v114;
                v113 -= 4;
              }
              __p[0] = v113;
              __p[1] = v106;
              *(void *)&long long v354 = &v112[4 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(_DWORD *)__p[1] = *(_DWORD *)(v103 + 4 * v96);
              v106 = v105 + 4;
            }
            __p[1] = v106;
            ++v96;
          }
          while (v101 != v96);
        }
        MIL::Builder::FunctionBuilder::GetContext(a1, &v363);
        v115 = (MIL::IRConstantDimension *)v363;
        v368[0] = ((char *)__p[1] - (char *)__p[0]) >> 2;
        std::vector<unsigned long long>::vector[abi:ne180100](&v365, v368, 1uLL);
        MIL::IRTensorValueType::Make(v115, 11, (MIL::MILContext ***)&v365);
      }
      if (__sz.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_);
      }
      if (v359.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
      }
      uint64_t v116 = (std::__shared_weak_count *)*((void *)&v360 + 1);
      if (!*((void *)&v360 + 1)) {
        return;
      }
      goto LABEL_333;
    }
  }
  else if (v93)
  {
    goto LABEL_172;
  }
  uint64_t v117 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v118 = (*(uint64_t (**)(uint64_t))(*(void *)v117 + 16))(v117);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v118, (std::string *)__p);
  BOOL v119 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "range_1d");
  BOOL v120 = v119;
  if (SBYTE7(v354) < 0)
  {
    operator delete(__p[0]);
    if (v120)
    {
LABEL_212:
      std::string::basic_string[abi:ne180100]<0>(__p, "step");
      v121 = *(MIL::Builder::OperationBuilder **)a2;
      LODWORD(v360) = 1;
      std::vector<int>::vector[abi:ne180100](&v365, &v360, 1uLL);
      if (v365.__r_.__value_.__r.__words[0])
      {
        v365.__r_.__value_.__l.__size_ = v365.__r_.__value_.__r.__words[0];
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      if (!v122) {
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "end");
      if (SBYTE7(v354) < 0) {
        operator delete(__p[0]);
      }
      {
        v123 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v360 + 40))(v360);
        uint64_t v124 = *(int *)MIL::IRTensorValue::GetDataView<int>(v123);
        v125 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(void *)v365.__r_.__value_.__l.__data_
                                                                            + 40))(v365.__r_.__value_.__r.__words[0]);
        uint64_t v126 = *(int *)MIL::IRTensorValue::GetDataView<int>(v125);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v354 = 0;
        MIL::Builder::FunctionBuilder::GetContext(a1, &v359);
        __sz.__r_.__value_.__r.__words[0] = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v359.__r_.__value_.__l.__data_, (MIL::MILContext *)(v124 - v126));
        std::vector<MIL::IRDimension const*>::emplace_back<MIL::IRConstantDimension const*>(__p, &__sz);
        if (v359.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
        }
        MIL::Builder::FunctionBuilder::GetContext(a1, &v359);
        unint64_t v127 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
        uint64_t v128 = MIL::Builder::Variable::TryGetType(v127);
        uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 24))(v128);
        (*(void (**)(uint64_t))(*(void *)v129 + 88))(v129);
        MIL::IRTensorValueType::MakeWithShape();
      }
      if (*((void *)&v360 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v360 + 1));
      }
      v130 = (std::__shared_weak_count *)v365.__r_.__value_.__l.__size_;
      if (!v365.__r_.__value_.__l.__size_) {
        return;
      }
LABEL_248:
      std::__shared_weak_count::__release_shared[abi:ne180100](v130);
      return;
    }
  }
  else if (v119)
  {
    goto LABEL_212;
  }
  uint64_t v135 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v136 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 16))(v135);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v136, (std::string *)__p);
  BOOL v137 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "const");
  if (SBYTE7(v354) < 0) {
    operator delete(__p[0]);
  }
  if (v137)
  {
    v138 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
    MIL::Builder::Variable::TryGetValueSharedPtr(v138, __p);
    v365.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
    uint64_t v139 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v365.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v365);
    long long v140 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v141 = (std::__shared_weak_count *)*((void *)v139 + 6);
    *(_OWORD *)(v139 + 40) = v140;
    if (!v141) {
      return;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v141);
    v130 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      return;
    }
    goto LABEL_248;
  }
  uint64_t v153 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v154 = (*(uint64_t (**)(uint64_t))(*(void *)v153 + 16))(v153);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v154, (std::string *)__p);
  BOOL v155 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "shape");
  if (SBYTE7(v354) < 0) {
    operator delete(__p[0]);
  }
  v156 = *(MIL::Builder::OperationBuilder **)a2;
  if (v155)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    v157 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v156, (uint64_t)__p, 0);
    v158 = MIL::Builder::Variable::GetName(v157);
    if (SBYTE7(v354) < 0) {
      operator delete(__p[0]);
    }
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v158)&& (__p[0] = v158, v159 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v158, (uint64_t)&std::piecewise_construct, (long long **)__p), uint64_t v160 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v159 + 5)), (*(uint64_t (**)(uint64_t))(*(void *)v160 + 24))(v160)))
    {
      __p[0] = v158;
      v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v158, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v162 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v161 + 5));
    }
    else
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)v158))return; {
      __p[0] = v158;
      }
      v273 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v158, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v274 = (*(uint64_t (**)(void))(**((void **)v273 + 5) + 32))(*((void *)v273 + 5));
      if (!(*(uint64_t (**)(uint64_t))(*(void *)v274 + 24))(v274)) {
        return;
      }
      __p[0] = v158;
      v275 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v158, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v162 = (*(uint64_t (**)(void))(**((void **)v275 + 5) + 32))(*((void *)v275 + 5));
    }
    uint64_t v276 = (*(uint64_t (**)(uint64_t))(*(void *)v162 + 24))(v162);
    if (v276)
    {
      uint64_t v277 = (*(uint64_t (**)(uint64_t))(*(void *)v276 + 96))(v276);
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v354 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v277, *(void *)(v277 + 8), (uint64_t)(*(void *)(v277 + 8) - *(void *)v277) >> 3);
      memset(&v365, 0, sizeof(v365));
      v278 = (MIL::IRDimension **)__p[0];
      v279 = (MIL::IRDimension **)__p[1];
      while (1)
      {
        if (v278 == v279)
        {
          MIL::Builder::FunctionBuilder::GetContext(a1, &v359);
          v284 = (MIL::IRConstantDimension *)v359.__r_.__value_.__r.__words[0];
          int64_t p_sz = ((char *)__p[1] - (char *)__p[0]) >> 3;
          std::vector<unsigned long long>::vector[abi:ne180100](&v360, &p_sz, 1uLL);
          MIL::IRTensorValueType::Make(v284, 11, (MIL::MILContext ***)&v360);
        }
        if (!(*(uint64_t (**)(void))(*(void *)*v278 + 16))()) {
          break;
        }
        uint64_t v280 = MIL::IRDimension::AsConstant(*v278);
        LODWORD(v360) = (*(uint64_t (**)(uint64_t))(*(void *)v280 + 48))(v280);
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v365, &v360);
        ++v278;
      }
      if (v365.__r_.__value_.__r.__words[0])
      {
        v365.__r_.__value_.__l.__size_ = v365.__r_.__value_.__r.__words[0];
        operator delete(v365.__r_.__value_.__l.__data_);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v248 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v248 + 224))(v248))
    {
      MIL::Builder::OperationBuilder::GetParameterNames(*(unsigned __int8 ***)a2, (uint64_t)&v365);
      long long v360 = 0u;
      long long v361 = 0u;
      int v362 = 1065353216;
      v249 = (const void **)v365.__r_.__value_.__r.__words[2];
      if (!v365.__r_.__value_.__r.__words[2])
      {
LABEL_404:
        uint64_t v256 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
        MIL::Builder::FunctionBuilder::GetContext(a1, &v363);
        LocationPtr = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr(*(MIL::Builder::OperationBuilder **)a2);
        v258 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v357 = *LocationPtr;
        v358 = v258;
        if (v258) {
          atomic_fetch_add_explicit(&v258->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)std::string __p = 0u;
        long long v354 = 0u;
        int v355 = 1065353216;
        memset(&__sz, 0, sizeof(__sz));
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *, uint64_t *, long long *, void **, std::string *, uint64_t))(*(void *)v256 + 208))(&v359, v256, &v363, &v357, &v360, __p, &__sz, 0xFFFFFFFFLL);
        int64_t p_sz = (int64_t)&__sz;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_sz);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
        if (v358) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v358);
        }
        if (v364) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v364);
        }
        uint64_t NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
        uint64_t v260 = NumOutputs;
        if (NumOutputs != (uint64_t)(v359.__r_.__value_.__l.__size_ - v359.__r_.__value_.__r.__words[0]) >> 4)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          v342 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output count does not match: ", 29);
          uint64_t OutputName = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          int v344 = *(char *)(OutputName + 23);
          if (v344 >= 0) {
            uint64_t v345 = OutputName;
          }
          else {
            uint64_t v345 = *(void *)OutputName;
          }
          if (v344 >= 0) {
            uint64_t v346 = *(unsigned __int8 *)(OutputName + 23);
          }
          else {
            uint64_t v346 = *(void *)(OutputName + 8);
          }
          v347 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v342, v345, v346);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v347, (uint64_t)".", 1);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &__sz);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        if (NumOutputs)
        {
          uint64_t v261 = 0;
          unint64_t v262 = 0;
          do
          {
            std::string::size_type v263 = v359.__r_.__value_.__r.__words[0];
            __sz.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, v262);
            v264 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__sz.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__sz);
            std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((void *)v264 + 5, (uint64_t *)(v263 + v261));
            ++v262;
            v261 += 16;
          }
          while (v260 != v262);
        }
        __p[0] = &v359;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v360);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v365);
        goto LABEL_479;
      }
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v354 = 0;
        unint64_t v250 = MIL::Builder::OperationBuilder::GetNumArguments(*(void *)a2, v249 + 2);
        if (v250)
        {
          LODWORD(v251) = 0;
          char v252 = 0;
          do
          {
            v253 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(*(void *)a2, (uint64_t)(v249 + 2), v251);
            MIL::Builder::Variable::TryGetValueSharedPtr(v253, &v359);
            std::string::size_type v254 = v359.__r_.__value_.__r.__words[0];
            if (v359.__r_.__value_.__r.__words[0]) {
              std::vector<std::shared_ptr<MIL::IRValue const>>::emplace_back<std::shared_ptr<MIL::IRValue const>&>((uint64_t *)__p, (long long *)&v359);
            }
            else {
              char v252 = 1;
            }
            if (v359.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v359.__r_.__value_.__l.__size_);
            }
            if (!v254) {
              break;
            }
            unint64_t v251 = (v251 + 1);
          }
          while (v250 > v251);
          if (v252) {
            break;
          }
        }
        __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)(v249 + 2);
        v255 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v360, (unsigned __int8 *)v249 + 16, (uint64_t)&std::piecewise_construct, (long long **)&__sz);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)v255 + 5);
        *(_OWORD *)(v255 + 40) = *(_OWORD *)__p;
        *((void *)v255 + 7) = v354;
        __p[1] = 0;
        *(void *)&long long v354 = 0;
        __p[0] = 0;
        v359.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v359);
        v249 = (const void **)*v249;
        if (!v249) {
          goto LABEL_404;
        }
      }
      v359.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v359);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v360);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v365);
    }
  }
}

void sub_20F4E87F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    if ((v70 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a69);
      a69 = &STACK[0x320];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v71 - 256);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v71 - 176);
      _Unwind_Resume(a1);
    }
  }
  else if (!v70)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v69);
  goto LABEL_6;
}

void anonymous namespace'::GetValueHelper(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
  uint64_t Value = MIL::Builder::Variable::TryGetValue(ArgumentForParameter);
  unint64_t v10 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
  if (Value)
  {
    MIL::Builder::Variable::TryGetValueSharedPtr(v10, a4);
  }
  else
  {
    Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v10);
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, Name))
    {
      uint64_t v12 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
      BOOL v13 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v12);
      uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
      if (!v14) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v15 = *((void *)v14 + 6);
      *a4 = *((void *)v14 + 5);
      a4[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
  }
}

uint64_t anonymous namespace'::VerifyInt32TensorType(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    if (result)
    {
      uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))();
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      return (*(unsigned int (**)(uint64_t))(*(void *)v4 + 88))(v4) == 11;
    }
  }
  return result;
}

void *std::vector<MIL::IRDimension const*>::emplace_back<MIL::IRConstantDimension const*>(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    }
    else {
      BOOL v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *char v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

BOOL anonymous namespace'::VerifyInt32TensorValue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
    && (unint64_t v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15),
        MIL::IRTensorValue::GetDataView<int>(v5),
        v6 == (uint64_t)(a4[1] - *a4) >> 2))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
      MIL::IRTensorValue::GetDataView<int>(v8);
      BOOL v10 = v7 >= v9;
      if (v7 >= v9) {
        break;
      }
      int v11 = *(_DWORD *)(*a4 + 4 * v7);
      unint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
      int v13 = *(_DWORD *)(MIL::IRTensorValue::GetDataView<int>(v12) + 4 * v7++);
    }
    while (v11 == v13);
  }
  else
  {
    BOOL v10 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v10;
}

void sub_20F4E9788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_20F4E9814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_20F4E9898(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void *std::vector<std::shared_ptr<MIL::IRValue const>>::emplace_back<std::shared_ptr<MIL::IRValue const>&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v19);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_20F4E9AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

uint64_t MIL::ValueTypeInferenceUtils::OpOutputsContainsUnknownShape(MIL::Builder::OperationBuilder::OperationBuilderImpl ***a1, uint64_t a2)
{
  MIL::Builder::OperationBuilder::GetOutputs(*a1, &__p);
  uint64_t v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
  if (v31 == __p)
  {
    uint64_t v28 = 0;
    if (__p) {
      goto LABEL_23;
    }
    return v28;
  }
  unint64_t v4 = 0;
  while (1)
  {
    Name = (long long *)MIL::Builder::Variable::GetName(v3[v4]);
    uint64_t v32 = Name;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    if (!MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v6 + 5))) {
      goto LABEL_19;
    }
    uint64_t v32 = Name;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    uint64_t ValueType = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v7 + 5));
    if ((*(uint64_t (**)(uint64_t))(*(void *)ValueType + 32))(ValueType)) {
      break;
    }
    uint64_t v32 = Name;
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    uint64_t v21 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v20 + 5));
    if ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21))
    {
      uint64_t v32 = Name;
      BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
      uint64_t v23 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v22 + 5));
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24))(v23);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v24 + 104))(v24) & 1) == 0) {
        goto LABEL_21;
      }
      int v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      while (v26 != v27)
      {
        if ((*(uint64_t (**)(void))(**(void **)v26 + 24))()) {
          goto LABEL_21;
        }
        v26 += 8;
      }
    }
LABEL_19:
    ++v4;
    uint64_t v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
    if (v4 >= ((char *)v31 - (unsigned char *)__p) >> 3)
    {
      uint64_t v28 = 0;
      goto LABEL_22;
    }
  }
  uint64_t v32 = Name;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
  uint64_t v10 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v9 + 5));
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13))
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14) & 1) == 0)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12))
      {
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 104))(v15)) {
          goto LABEL_21;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
        long long v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 96))(v16);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        while (v18 != v19)
        {
          if ((*(uint64_t (**)(void))(**(void **)v18 + 24))()) {
            goto LABEL_21;
          }
          v18 += 8;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_21:
  uint64_t v28 = 1;
LABEL_22:
  uint64_t v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
  if (__p)
  {
LABEL_23:
    uint64_t v31 = v3;
    operator delete(v3);
  }
  return v28;
}

void sub_20F4E9F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<short>::vector[abi:ne180100](void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_20F4EA004(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::vector[abi:ne180100](void *a1, const void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a3);
    unint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_20F4EA088(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRValueType const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F4EA100(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4EA17C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    unint64_t v5 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    int v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20F4EA370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<MIL::IRDimension const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F4EA4D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F4EA554(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20F4EA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t MIL::Operators::Common::Shared::MatchesExpectedShape(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (a3 != (v4 - *a1) >> 3) {
    return 0;
  }
  if (v4 == v3) {
    return 1;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 + 8 * v7) + 16))(*(void *)(v3 + 8 * v7));
    if (!result) {
      break;
    }
    uint64_t v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1 + 8 * v7));
    if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9) != *(_DWORD *)(a2 + 4 * v7)) {
      return 0;
    }
    ++v7;
    uint64_t v3 = *a1;
    if (v7 >= (a1[1] - *a1) >> 3) {
      return 1;
    }
  }
  return result;
}

void MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  MIL::IRObject::TryGetAttributeSharedPtr(a1, a2, &lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    uint64_t v6 = v5;
    std::string::size_type size = lpsrc.__r_.__value_.__l.__size_;
    *a3 = v5;
    a3[1] = size;
    if (size) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v9 = (MIL::IRObject *)a1;
    uint64_t v10 = exception;
    uint64_t v11 = v9;
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(v9);
    uint64_t v13 = LocationPtr[1];
    *(void *)&long long v26 = *LocationPtr;
    *((void *)&v26 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    unint64_t v14 = std::string::append(&v22, " is undefined for ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v11 + 56))(v11);
    int v17 = *(char *)(v16 + 23);
    if (v17 >= 0) {
      uint64_t v18 = (const std::string::value_type *)v16;
    }
    else {
      uint64_t v18 = *(const std::string::value_type **)v16;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v16 + 8);
    }
    uint64_t v20 = std::string::append(&lpsrc, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v20->__r_.__value_.__r.__words[2];
    long long v24 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v10, &v26, (uint64_t)&v24, 321);
  }
}

void sub_20F4EA90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v31 - 56);
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if ((v30 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v30)
  {
LABEL_12:
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v29);
  goto LABEL_12;
}

void MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(MIL::IRObject *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)a2, 0, (uint64_t *)&lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    unint64_t v7 = v6;
    std::string::size_type size = lpsrc.__r_.__value_.__l.__size_;
    *a3 = v6;
    a3[1] = size;
    if (size) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v7 = 0;
    *a3 = 0;
    a3[1] = 0;
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (!v7)
  {
    MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)a1, a2, &lpsrc);
    std::string::size_type v9 = lpsrc.__r_.__value_.__r.__words[0];
    if (lpsrc.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
    }
    exception = __cxa_allocate_exception(0x48uLL);
    if (!v9)
    {
      LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v12 = LocationPtr[1];
      *(void *)&long long v35 = *LocationPtr;
      *((void *)&v35 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      uint64_t v13 = std::string::append(&v37, " is undefined for ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      lpsrc.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
      int v16 = *(char *)(v15 + 23);
      if (v16 >= 0) {
        int v17 = (const std::string::value_type *)v15;
      }
      else {
        int v17 = *(const std::string::value_type **)v15;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(v15 + 8);
      }
      std::string::size_type v19 = std::string::append(&lpsrc, v17, v18);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v34 = v19->__r_.__value_.__r.__words[2];
      long long v33 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationError::ValidationError((uint64_t)exception, &v35, (uint64_t)&v33, 305);
    }
    long long v21 = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v22 = v21[1];
    *(void *)&long long v41 = *v21;
    *((void *)&v41 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v23 = std::string::append(&v36, " is undefined for ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    int v26 = *(char *)(v25 + 23);
    if (v26 >= 0) {
      uint64_t v27 = (const std::string::value_type *)v25;
    }
    else {
      uint64_t v27 = *(const std::string::value_type **)v25;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(v25 + 8);
    }
    uint64_t v29 = std::string::append(&v37, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = std::string::append(&lpsrc, ", but it is defined as an attribute, please fix.");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    std::string::size_type v40 = v31->__r_.__value_.__r.__words[2];
    long long v39 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)exception, &v41, (uint64_t)&v39, 305);
  }
}

void sub_20F4EACCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::string::size_type v40 = *(std::__shared_weak_count **)(v38 - 56);
  if (v40)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    if ((v36 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else if (!v36)
  {
LABEL_14:
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

char *MIL::Operators::Common::Shared::ValidateAndGetShape@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRTensorValue::TryGetDataView<unsigned int>(&v8, *a1);
  if (!(_BYTE)v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Shape must have dtype uint32.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = v9;
  unint64_t v4 = v10;
  unint64_t v5 = &v9[v10];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)a2, v3, v5, v4);
}

void sub_20F4EAE74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ValidateAndGetAxis(void *a1)
{
  uint64_t v1 = (unsigned int *)MIL::IRValue::TryGetScalar<int>(*a1);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Axis must be a scalar int32 value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *v1;
}

void sub_20F4EAEEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::HasSameConstantShape(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 8 * v6) + 16))(*(void *)(v2 + 8 * v6));
    if (!result) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v6) + 16))(*(void *)(*a2 + 8 * v6));
    if (!result) {
      break;
    }
    uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1 + 8 * v6));
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
    uint64_t v10 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v6));
    if (v9 != (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10)) {
      return 0;
    }
    ++v6;
    uint64_t v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3) {
      return 1;
    }
  }
  return result;
}

BOOL MIL::Operators::Common::Shared::IsShapeConstant(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 16))(*(void *)(v1 + 8 * v3));
    BOOL result = v4 != 0;
    if (!v4) {
      break;
    }
    ++v3;
    uint64_t v1 = *a1;
  }
  while (v3 < (a1[1] - *a1) >> 3);
  return result;
}

float MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(MIL::Operators::Common::Shared::ConstExprs *this, float a2, float a3, float a4)
{
  return (float)(a2 - a3) * a4;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(__int16 a1, float a2, float a3)
{
  __int16 v8 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  return MIL::Fp16::FromFloat(v6, (float)(a2 - a3) * Float);
}

void *MIL::Operators::Common::Shared::ConstExprs::ShapeToVector@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  BOOL result = std::vector<unsigned long>::vector(a2, (a1[1] - *a1) >> 3);
  uint64_t v5 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v5 + 8 * v6));
      BOOL result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      *(void *)(*a2 + 8 * v6++) = result;
      uint64_t v5 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 3);
  }
  return result;
}

void sub_20F4EB1A4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t **MIL::Operators::Common::Shared::ConstExprs::GetBlockSizes@<X0>(uint64_t **a1@<X0>, unint64_t **a2@<X1>, void *a3@<X8>)
{
  BOOL result = (unint64_t **)std::vector<unsigned long>::vector(a3, a1[1] - *a1);
  unint64_t v6 = *a1;
  uint64_t v7 = (char *)a1[1] - (char *)*a1;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    uint64_t v9 = *a2;
    uint64_t v10 = *result;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      unint64_t v12 = *v6++;
      unint64_t v11 = v12;
      unint64_t v13 = *v9++;
      *v10++ = v11 / v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

void *MIL::Operators::Common::Shared::ConstExprs::GetStrides@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  BOOL result = std::vector<unsigned long long>::vector(a2, (uint64_t)(a1[1] - *a1) >> 3);
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    uint64_t v5 = v4 >> 3;
    if ((unint64_t)(v4 >> 3) <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v4 >> 3;
    }
    uint64_t v7 = 8 * v5 - 8;
    unint64_t v8 = (uint64_t *)(*a1 + v7);
    uint64_t v9 = (uint64_t *)(*result + v7);
    uint64_t v10 = 1;
    do
    {
      *v9-- = v10;
      uint64_t v11 = *v8--;
      v10 *= v11;
      --v6;
    }
    while (v6);
  }
  return result;
}

unint64_t **MIL::Operators::Common::Shared::ConstExprs::UnravelIndex@<X0>(unint64_t a1@<X0>, unint64_t **a2@<X1>, void *a3@<X8>)
{
  BOOL result = (unint64_t **)std::vector<unsigned long>::vector(a3, a2[1] - *a2);
  uint64_t v6 = *a2;
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    uint64_t v9 = *result;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      unint64_t v10 = *v6++;
      *v9++ = a1 / v10;
      a1 %= v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

unint64_t MIL::Operators::Common::Shared::ConstExprs::UnravelIndex(unint64_t result, uint64_t a2, unint64_t **a3)
{
  unint64_t v3 = *(unint64_t **)a2;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    uint64_t v6 = *a3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      unint64_t v7 = *v3++;
      *v6++ = result / v7;
      result %= v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::RavelIndex(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v6 = v3 >> 3;
  unint64_t v7 = *a1;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  do
  {
    uint64_t v9 = *v7++;
    uint64_t v8 = v9;
    uint64_t v10 = *v2++;
    result += v10 * v8;
    --v6;
  }
  while (v6);
  return result;
}

void MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  long long v21 = 0;
  uint64_t v22 = 0;
  long long v20 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3);
  uint64_t v4 = v20;
  unint64_t v5 = v21;
  if (v20 != v21)
  {
    do
    {
      if (!(*(uint64_t (**)(void))(**(void **)v4 + 16))())
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v7 = std::string::append(&v16, ", shape of ");
        long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        int v9 = *(char *)(a2 + 23);
        if (v9 >= 0) {
          uint64_t v10 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v10 = *(const std::string::value_type **)a2;
        }
        if (v9 >= 0) {
          std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v11 = *(void *)(a2 + 8);
        }
        unint64_t v12 = std::string::append(&v17, v10, v11);
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        long long v14 = std::string::append(&v18, " needs to be constant");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v19);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v4 += 8;
    }
    while (v4 != v5);
    uint64_t v4 = v20;
  }
  if (v4)
  {
    long long v21 = v4;
    operator delete(v4);
  }
}

void sub_20F4EB53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_12:
      long long v32 = *(void **)(v30 - 56);
      if (v32)
      {
        *(void *)(v30 - 48) = v32;
        operator delete(v32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(MIL::IRTensorValueType *a1, uint64_t a2)
{
  uint64_t result = MIL::IRTensorValueType::Rank(a1);
  if (result != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v5 = std::string::append(&v14, ", rank of ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      long long v8 = (const std::string::value_type *)a2;
    }
    else {
      long long v8 = *(const std::string::value_type **)a2;
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v9 = *(void *)(a2 + 8);
    }
    uint64_t v10 = std::string::append(&v15, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = std::string::append(&v16, " needs to be 1");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F4EB70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  if (v3 != result)
  {
    int v18 = result;
    std::operator+<char>();
    unint64_t v5 = std::string::append(&v23, ", cannot output tensor value of dtype ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MIL::IRDataTypeToString(v18, v21);
    if ((v22 & 0x80u) == 0) {
      int v7 = v21;
    }
    else {
      int v7 = (void **)v21[0];
    }
    if ((v22 & 0x80u) == 0) {
      std::string::size_type v8 = v22;
    }
    else {
      std::string::size_type v8 = (std::string::size_type)v21[1];
    }
    std::string::size_type v9 = std::string::append(&v24, (const std::string::value_type *)v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    long long v11 = std::string::append(&v25, ". Expected output dtype is ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MIL::IRDataTypeToString(v3, __p);
    if ((v20 & 0x80u) == 0) {
      long long v13 = __p;
    }
    else {
      long long v13 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v14 = v20;
    }
    else {
      std::string::size_type v14 = (std::string::size_type)__p[1];
    }
    std::string v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if ((char)v22 < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F4EB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 41) < 0) {
    operator delete(*(void **)(v40 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertSameRank(MIL::IRTensorValueType *a1, MIL::IRTensorValueType *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = MIL::IRTensorValueType::Rank(a1);
  uint64_t result = MIL::IRTensorValueType::Rank(a2);
  if (v8 != result)
  {
    std::operator+<char>();
    long long v10 = std::string::append(&v45, ": Rank of ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      long long v13 = (const std::string::value_type *)a3;
    }
    else {
      long long v13 = *(const std::string::value_type **)a3;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a3 + 8);
    }
    std::string v15 = std::string::append(&v46, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::string v17 = std::string::append(&v47, " (");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v44, v19);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v20 = &v44;
    }
    else {
      unsigned __int8 v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v44.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v22 = std::string::append(&v48, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string v24 = std::string::append(&v49, ") ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string v26 = std::string::append(&v50, " is not equal to rank of ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = *(char *)(a4 + 23);
    if (v28 >= 0) {
      int v29 = (const std::string::value_type *)a4;
    }
    else {
      int v29 = *(const std::string::value_type **)a4;
    }
    if (v28 >= 0) {
      std::string::size_type v30 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v30 = *(void *)(a4 + 8);
    }
    uint64_t v31 = std::string::append(&v51, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    long long v33 = std::string::append(&v52, " (");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    uint64_t v35 = MIL::IRTensorValueType::Rank(a2);
    std::to_string(&v43, v35);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v36 = &v43;
    }
    else {
      int v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = std::string::append(&v53, (const std::string::value_type *)v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    uint64_t v40 = std::string::append(&v54, ") ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v55);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F4EBDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 73) < 0) {
    operator delete(*(void **)(v61 - 96));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  std::string v24 = 0;
  uint64_t v25 = 0;
  long long v23 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v23, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  unsigned __int8 v20 = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if ((MIL::Operators::Common::Shared::HasSameConstantShape((uint64_t *)&v23, &v20) & 1) == 0)
  {
    std::operator+<char>();
    int v7 = std::string::append(&v16, ", shape of ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v9 = *(char *)(a3 + 23);
    if (v9 >= 0) {
      long long v10 = (const std::string::value_type *)a3;
    }
    else {
      long long v10 = *(const std::string::value_type **)a3;
    }
    if (v9 >= 0) {
      std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v11 = *(void *)(a3 + 8);
    }
    int v12 = std::string::append(&v17, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v14 = std::string::append(&v18, ": ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    std::string v24 = v23;
    operator delete(v23);
  }
}

void sub_20F4EC2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 105) < 0) {
    operator delete(*(void **)(v61 - 128));
  }
  long long v63 = *(void **)(v61 - 96);
  if (v63)
  {
    *(void *)(v61 - 88) = v63;
    operator delete(v63);
  }
  uint64_t v64 = *(void **)(v61 - 72);
  if (v64)
  {
    *(void *)(v61 - 64) = v64;
    operator delete(v64);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ShapeToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F4EC49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9) {
    MIL::IRProgram::ToString(a9);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  long long v13 = 0;
  uint64_t v14 = 0;
  int v12 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v12, *(const void **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  int v9 = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v9, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
  if ((MIL::Operators::Common::Shared::HasSameConstantShape((uint64_t *)&v12, &v9) & 1) == 0)
  {
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v7, ", cannot output tensor value of shape ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  if (v12)
  {
    long long v13 = v12;
    operator delete(v12);
  }
}

void sub_20F4EC740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  std::string v49 = *(void **)(v47 - 80);
  if (v49)
  {
    *(void *)(v47 - 72) = v49;
    operator delete(v49);
  }
  std::string v50 = *(void **)(v47 - 56);
  if (v50)
  {
    *(void *)(v47 - 48) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(MIL::IRTensorValueType *a1, uint64_t a2)
{
  uint64_t result = MIL::IRTensorValueType::Rank(a1);
  if (result)
  {
    uint64_t result = MIL::IRTensorValueType::Rank(a1);
    if (result != 1)
    {
      std::operator+<char>();
      uint64_t v5 = std::string::append(&v21, ", parameter ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      int v7 = *(char *)(a2 + 23);
      if (v7 >= 0) {
        std::string v8 = (const std::string::value_type *)a2;
      }
      else {
        std::string v8 = *(const std::string::value_type **)a2;
      }
      if (v7 >= 0) {
        std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v9 = *(void *)(a2 + 8);
      }
      long long v10 = std::string::append(&v22, v8, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      int v12 = std::string::append(&v23, " should have rank equals to either 0 or 1 but provided rank is ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = MIL::IRTensorValueType::Rank(a1);
      std::to_string(&__p, v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string v17 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v25);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return result;
}

void sub_20F4EC9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(MIL::IRTensorValueType *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = MIL::IRTensorValueType::Rank(a1);
  if (result == 1)
  {
    uint64_t result = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 16))(a1);
    if (result != a2)
    {
      unint64_t __val = result;
      std::operator+<char>();
      std::string::size_type v9 = std::string::append(&v41, ", number of elements in ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      int v11 = *(char *)(a3 + 23);
      if (v11 >= 0) {
        int v12 = (const std::string::value_type *)a3;
      }
      else {
        int v12 = *(const std::string::value_type **)a3;
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v13 = *(void *)(a3 + 8);
      }
      uint64_t v14 = std::string::append(&v42, v12, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::string v16 = std::string::append(&v43, "(=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, __val);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v18 = &v40;
      }
      else {
        long long v18 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      unsigned __int8 v20 = std::string::append(&v44, (const std::string::value_type *)v18, size);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::string v22 = std::string::append(&v45, ") should be same as the dimension size of ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      int v24 = *(char *)(a4 + 23);
      if (v24 >= 0) {
        std::string v25 = (const std::string::value_type *)a4;
      }
      else {
        std::string v25 = *(const std::string::value_type **)a4;
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(a4 + 8);
      }
      long long v27 = std::string::append(&v46, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      int v29 = std::string::append(&v47, "(=");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, a2);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v39;
      }
      else {
        uint64_t v31 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v33 = std::string::append(&v48, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append(&v49, ")");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v50);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return result;
}

void sub_20F4ECDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ValidateConvolution(MIL::Operators::Common::Shared *this@<X0>, const MIL::IROperation *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = (int)a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  std::string::size_type v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if ((char)v103 < 0) {
    operator delete(__p);
  }
  uint64_t v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  int v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if ((char)v103 < 0) {
    operator delete(__p);
  }
  uint64_t v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v12 + 96))(v12);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v9 + 104))(v9)
    || ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v12 + 104))(v12) & 1) == 0)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    long long v17 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v97 = *LocationPtr;
    int v98 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v95, "Variadic input/weights not supported");
    MIL::ValidationResult::ValidationResult(a4, &v97, 315, v95);
    if (v96 < 0) {
      operator delete(v95[0]);
    }
    long long v18 = v98;
    if (!v98) {
      return;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    return;
  }
  uint64_t v14 = MIL::IRTensorValueType::Rank(v9);
  if (v14 == MIL::IRTensorValueType::Rank(v12))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
    Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
    if ((char)v103 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
    if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
    {
      std::string::basic_string[abi:ne180100]<0>(v84, "bias");
      BOOL v72 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)v84, 0) == 0;
      if (SHIBYTE(v84[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      BOOL v72 = 0;
    }
    if ((char)v103 < 0) {
      operator delete(__p);
    }
    uint64_t v74 = ParameterValue;
    int v73 = a3;
    uint64_t v75 = a4;
    memset(&v90, 0, sizeof(v90));
    std::vector<int>::reserve(&v90, 5uLL);
    std::string v22 = *(MIL::IRDimension ***)v13;
    long long v21 = *(MIL::IRDimension ***)(v13 + 8);
    if (*(MIL::IRDimension ***)v13 != v21)
    {
      while ((*(uint64_t (**)(void))(*(void *)*v22 + 16))())
      {
        uint64_t v23 = MIL::IRDimension::AsConstant(*v22);
        unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
        unsigned int v25 = v24;
        std::vector<unsigned int>::pointer end = v90.__end_;
        if (v90.__end_ >= v90.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = v90.__begin_;
          int64_t v29 = v90.__end_ - v90.__begin_;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          int64_t v31 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
          if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v90.__end_cap_, v32);
            std::vector<unsigned int>::pointer begin = v90.__begin_;
            std::vector<unsigned int>::pointer end = v90.__end_;
          }
          else
          {
            uint64_t v33 = 0;
          }
          long long v34 = (unsigned int *)&v33[4 * v29];
          *long long v34 = v25;
          long long v27 = v34 + 1;
          while (end != begin)
          {
            unsigned int v35 = *--end;
            *--long long v34 = v35;
          }
          v90.__begin_ = v34;
          v90.__end_ = v27;
          v90.__end_cap_.__value_ = (unsigned int *)&v33[4 * v32];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v90.__end_ = v24;
          long long v27 = end + 1;
        }
        v90.__end_ = v27;
        if (++v22 == v21) {
          goto LABEL_48;
        }
      }
      std::string v45 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      std::string v46 = (std::__shared_weak_count *)v45[1];
      uint64_t v88 = *v45;
      std::string v89 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v86, "Unexpected non-constant dimension in weights shape");
      MIL::ValidationResult::ValidationResult(v75, &v88, 315, v86);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      if (v89) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      }
      goto LABEL_155;
    }
LABEL_48:
    std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
    int v36 = v5;
    if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
    {
      std::string::basic_string[abi:ne180100]<0>(&v108, "groups");
      std::string::size_type v37 = (const void *)MIL::IROperation::GetParameterValue(this);
      int v38 = MIL::IRValue::GetScalar<int>(v37);
      if (v110 < 0) {
        operator delete(v108);
      }
    }
    else
    {
      int v38 = 1;
    }
    if ((char)v103 < 0) {
      operator delete(__p);
    }
    if (v5)
    {
      signed int v39 = *v90.__begin_;
      signed int v40 = v90.__begin_[1] * v38;
    }
    else
    {
      signed int v40 = *v90.__begin_;
      signed int v39 = v90.__begin_[1] * v38;
    }
    if ((*(uint64_t (**)(void))(**(void **)(*(void *)v10 + 8) + 16))(*(void *)(*(void *)v10 + 8))
      && (uint64_t v41 = (*(uint64_t (**)(void))(**(void **)(*(void *)v10 + 8) + 16))(*(void *)(*(void *)v10 + 8)),
          v39 != (*(unsigned int (**)(uint64_t))(*(void *)v41 + 48))(v41)))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      if (v36)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"KernelChannels(", 15);
        std::string v49 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") != InputChannels(", 19);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"KernelChannels (", 16);
        std::string v50 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)") != InputChannels (", 20);
        std::string v51 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)") / Group (", 11);
      }
      std::string v52 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)")", 1);
      std::string v53 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      std::string v54 = (std::__shared_weak_count *)v53[1];
      uint64_t v99 = (MIL::Operators::Common::Shared *)*v53;
      int v100 = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v84, &v99, 315, &v108);
      if (v110 < 0) {
        operator delete(v108);
      }
      if (v100) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      }
      std::string __p = (void *)*MEMORY[0x263F8C2C8];
      *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v102 = MEMORY[0x263F8C318] + 16;
      if (v106 < 0) {
        operator delete(v105);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x21056C620](&v107);
    }
    else
    {
      if (v39) {
        BOOL v42 = v40 == 0;
      }
      else {
        BOOL v42 = 1;
      }
      if (v42)
      {
        uint64_t v43 = MIL::IRObject::GetLocationPtr(this);
        std::string v44 = *(std::__shared_weak_count **)(v43 + 8);
        int64_t v108 = *(void **)v43;
        unint64_t v109 = v44;
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Could not infer number of input/output channels");
        MIL::ValidationResult::ValidationResult(v84, &v108, 315, &__p);
      }
      else
      {
        if (!(v40 % v38) && !(v39 % v38))
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v84);
          goto LABEL_94;
        }
        uint64_t v47 = MIL::IRObject::GetLocationPtr(this);
        std::string v48 = *(std::__shared_weak_count **)(v47 + 8);
        int64_t v108 = *(void **)v47;
        unint64_t v109 = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Both the number of input and output channels must be divisble by # of groups");
        MIL::ValidationResult::ValidationResult(v84, &v108, 315, &__p);
      }
      if ((char)v103 < 0) {
        operator delete(__p);
      }
      if (v109) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v109);
      }
    }
LABEL_94:
    if (((*(uint64_t (**)(std::string *))(v84[0].__r_.__value_.__r.__words[0] + 16))(v84) & 1) == 0)
    {
      MIL::MILResult::MILResult((std::string *)v75, (uint64_t)v84);
      *(void *)uint64_t v75 = &unk_26C25DB50;
      *(_DWORD *)(v75 + 48) = v85;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v84);
      goto LABEL_155;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v84);
    uint64_t v55 = MIL::IRTensorValueType::Rank(v9);
    uint64_t v56 = v55 - 2;
    if (v55 == 5) {
      int v57 = 1;
    }
    else {
      int v57 = v36 & ~v73;
    }
    if (!v74 && v57)
    {
      if (v36) {
        uint64_t v58 = "Deconvolution ";
      }
      else {
        uint64_t v58 = "3D Convolution";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v58);
      uint64_t v59 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v60 = (std::__shared_weak_count *)v59[1];
      uint64_t v82 = *v59;
      BOOL v83 = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v103 & 0x80u) == 0) {
        size_t v61 = v103;
      }
      else {
        size_t v61 = v102;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)v80, v61 + 33);
      if (v81 >= 0) {
        unint64_t v62 = v80;
      }
      else {
        unint64_t v62 = (void **)v80[0];
      }
      if (v61)
      {
        if ((v103 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        memmove(v62, p_p, v61);
      }
      strcpy((char *)v62 + v61, " does not support dynamic weights");
      MIL::ValidationResult::ValidationResult(v75, &v82, 315, v80);
      if (v81 < 0) {
        operator delete(v80[0]);
      }
      uint64_t v64 = v83;
      if (!v83) {
        goto LABEL_121;
      }
      goto LABEL_120;
    }
    if ((v72 & v57) == 1)
    {
      if (v36) {
        uint64_t v66 = "Deconvolution ";
      }
      else {
        uint64_t v66 = "3D Convolution";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v66);
      unint64_t v67 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v68 = (std::__shared_weak_count *)v67[1];
      uint64_t v78 = *v67;
      BOOL v79 = v68;
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not support dynamic bias", (const void **)&__p, v76);
      MIL::ValidationResult::ValidationResult(v75, &v78, 315, v76);
      if (v77 < 0) {
        operator delete(v76[0]);
      }
      uint64_t v64 = v79;
      if (!v79) {
        goto LABEL_121;
      }
LABEL_120:
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
LABEL_121:
      if (((char)v103 & 0x80000000) == 0) {
        goto LABEL_155;
      }
      uint64_t v65 = __p;
      goto LABEL_154;
    }
    uint64_t v99 = this;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pad_type");
    long long v69 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v69, v84);
    if ((char)v103 < 0) {
      operator delete(__p);
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v84, "custom"))
    {
      std::string::basic_string[abi:ne180100]<0>(&v108, "pad");
      MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, 2 * v56, (MIL::ValidationResult *)&__p);
      if (v110 < 0) {
        operator delete(v108);
      }
      if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) == 0) {
        goto LABEL_151;
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v108, "dilations");
    MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, v56, (MIL::ValidationResult *)&__p);
    if (v110 < 0) {
      operator delete(v108);
    }
    if ((*((uint64_t (**)(void **))__p + 2))(&__p))
    {
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v108, "strides");
      MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, v56, (MIL::ValidationResult *)&__p);
      if (v110 < 0) {
        operator delete(v108);
      }
      if ((*((uint64_t (**)(void **))__p + 2))(&__p))
      {
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
        if (v36)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
          if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
          {
            std::string::basic_string[abi:ne180100]<0>(&v108, "groups");
            int v70 = (const void *)MIL::IROperation::GetParameterValue(this);
            int v71 = MIL::IRValue::GetScalar<int>(v70);
            if (v110 < 0) {
              operator delete(v108);
            }
          }
          else
          {
            int v71 = 1;
          }
          if ((char)v103 < 0) {
            operator delete(__p);
          }
          std::string::basic_string[abi:ne180100]<0>(&v108, "bias");
          MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, *((int *)v90.__begin_ + 1) * (uint64_t)v71, (MIL::ValidationResult *)&__p);
          if (v110 < 0) {
            operator delete(v108);
          }
          if ((*((uint64_t (**)(void **))__p + 2))(&__p))
          {
            MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
            std::string::basic_string[abi:ne180100]<0>(&v108, "output_shape");
            MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, v55, (MIL::ValidationResult *)&__p);
            if (v110 < 0) {
              operator delete(v108);
            }
            if ((*((uint64_t (**)(void **))__p + 2))(&__p))
            {
LABEL_170:
              MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
              MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v75);
              goto LABEL_152;
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v108, "bias");
          MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v99, (const void **)&v108, (int)*v90.__begin_, (MIL::ValidationResult *)&__p);
          if (v110 < 0) {
            operator delete(v108);
          }
          if ((*((uint64_t (**)(void **))__p + 2))(&__p)) {
            goto LABEL_170;
          }
        }
      }
    }
LABEL_151:
    MIL::MILResult::MILResult((std::string *)v75, (uint64_t)&__p);
    *(void *)uint64_t v75 = &unk_26C25DB50;
    *(_DWORD *)(v75 + 48) = v104;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
LABEL_152:
    if ((SHIBYTE(v84[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_155;
    }
    uint64_t v65 = (void *)v84[0].__r_.__value_.__r.__words[0];
LABEL_154:
    operator delete(v65);
LABEL_155:
    if (v90.__begin_)
    {
      v90.__end_ = v90.__begin_;
      operator delete(v90.__begin_);
    }
    return;
  }
  std::string v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unsigned __int8 v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v93 = *v19;
  BOOL v94 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v91, "Weight must be the a compatible dimensionality for x");
  MIL::ValidationResult::ValidationResult(a4, &v93, 315, v91);
  if (v92 < 0) {
    operator delete(v91[0]);
  }
  long long v18 = v94;
  if (v94) {
    goto LABEL_18;
  }
}

void sub_20F4EDDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  int v5 = a2;
  if (!MIL::IROperation::IsParameterSet(*a1, a2))
  {
LABEL_4:
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType((MIL::IRObject *)*a1);
  std::string::size_type v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (MIL::IRTensorValueType::Rank(v9) == 1)
  {
    if ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 16))(v9) == a3) {
      goto LABEL_4;
    }
    std::operator+<char>();
    int v12 = std::string::append(&v29, " must be ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *((char *)v5 + 23);
    if (v14 < 0)
    {
      if (v5[1] != (const void *)3)
      {
LABEL_20:
        long long v17 = "";
LABEL_27:
        long long v18 = std::string::append(&v30, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        unsigned __int8 v20 = std::string::append(&v31, "# of spatial input dims");
        long long v21 = (std::string::value_type *)v20->__r_.__value_.__r.__words[0];
        std::string::size_type size = v20->__r_.__value_.__l.__size_;
        v32[0] = v20->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
        int v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)*a1);
        unsigned int v25 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v27 = *LocationPtr;
        long long v28 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v23 < 0)
        {
          std::string::__init_copy_ctor_external(&__p, v21, size);
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
          __p.__r_.__value_.__l.__size_ = size;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v32[0];
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v32 + 3);
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v23;
        }
        MIL::ValidationResult::ValidationResult(a4, &v27, 315, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (v23 < 0) {
          operator delete(v21);
        }
        return;
      }
      int v5 = (const void **)*v5;
    }
    else if (v14 != 3)
    {
      goto LABEL_20;
    }
    unsigned int v15 = bswap32(*(unsigned __int16 *)v5) >> 16;
    if (v15 == 28769)
    {
      int v16 = *((unsigned __int8 *)v5 + 2) - 100;
    }
    else if (v15 < 0x7061)
    {
      int v16 = -1;
    }
    else
    {
      int v16 = 1;
    }
    if (v16) {
      long long v17 = "";
    }
    else {
      long long v17 = "2 * ";
    }
    goto LABEL_27;
  }
  uint64_t v10 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)*a1);
  int v11 = (std::__shared_weak_count *)v10[1];
  uint64_t v35 = *v10;
  int v36 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "Input dialations should be rank 1");
  MIL::ValidationResult::ValidationResult(a4, &v35, 315, v33);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_20F4EE384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ValidateBaseGatherWithAxis(MIL::Operators::Common::Shared *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  BOOL v6 = IsParameterSet;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_3;
    }
LABEL_12:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!IsParameterSet) {
    goto LABEL_12;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  std::string v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  uint64_t v10 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v12 = (std::__shared_weak_count *)LocationPtr[1];
  v13[0] = *LocationPtr;
  v13[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20F4EE560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::anonymous namespace'::ValidateBaseGatherWithAxisInputs(MIL::IRTensorValueType *a1@<X0>, MIL::Validation *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  int v8 = MIL::IRTensorValueType::Rank(a1);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1)
    && !MIL::Validation::IsAxisValidForRank(a2, v8))
  {
    std::string::size_type v9 = (std::__shared_weak_count *)a3[1];
    uint64_t v12 = *a3;
    long long v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'axis' must be within range (-x_rank - 1, x_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a4, &v12, 315, __p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_20F4EE6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGather(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v118, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v118);
  int v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  int v8 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(v118, "indices");
  std::string::size_type v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v118);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v118, "batch_dims");
  char v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v118);
  uint64_t v12 = v11;
  if (v119 < 0)
  {
    operator delete(v118[0]);
    if (v12)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(v118, "batch_dims");
      Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v118);
      int v14 = (const void *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v108 = MIL::IRValue::GetScalar<int>(v14);
      if (v119 < 0) {
        operator delete(v118[0]);
      }
LABEL_11:
      std::string::basic_string[abi:ne180100]<0>(v118, "axis");
      char v15 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v118);
      int v16 = (const void *)MIL::IRValue::AsTensor(v15);
      uint64_t v17 = MIL::IRValue::GetScalar<int>(v16);
      if (v119 < 0) {
        operator delete(v118[0]);
      }
      long long v18 = (std::__shared_weak_count *)a2[1];
      v117[0] = *a2;
      v117[1] = (uint64_t)v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v118))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v115, (uint64_t)v118);
        v115[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
        int v116 = v120;
        MIL::ValidationError::ValidationError(exception, v115);
      }
      long long v19 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
      if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v8))
      {
        if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v19))
        {
          v105 = __cxa_allocate_exception(0x48uLL);
          uint64_t v106 = a2[1];
          v113[0] = *a2;
          v113[1] = v106;
          if (v106) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v112, "'input_shape' and 'indices_shape' cannot both have variadic dimensions.");
          MIL::ValidationResult::ValidationResult(v114, v113, 315, v112);
          MIL::ValidationError::ValidationError(v105, v114);
        }
        unint64_t VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(v8);
        unint64_t v21 = VariadicUnknownDimIndex;
        if ((v17 & 0x80000000) == 0 && VariadicUnknownDimIndex <= v17)
        {
          std::string __p = 0;
          char v110 = 0;
          unint64_t v111 = 0;
          std::vector<std::string const*>::reserve(&__p, VariadicUnknownDimIndex + 1);
          if (v21)
          {
            uint64_t v22 = 0;
            int v23 = (char *)v110;
            do
            {
              uint64_t v24 = *v8;
              if (v23 >= v111)
              {
                uint64_t v25 = (v23 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v25 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v26 = (v111 - (unsigned char *)__p) >> 2;
                if (v26 <= v25 + 1) {
                  unint64_t v26 = v25 + 1;
                }
                if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27) {
                  long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v27);
                }
                else {
                  long long v28 = 0;
                }
                std::string v29 = &v28[8 * v25];
                *(void *)std::string v29 = *(void *)(v24 + 8 * v22);
                int v23 = v29 + 8;
                std::string v31 = (char *)__p;
                std::string v30 = (char *)v110;
                if (v110 != __p)
                {
                  do
                  {
                    uint64_t v32 = *((void *)v30 - 1);
                    v30 -= 8;
                    *((void *)v29 - 1) = v32;
                    v29 -= 8;
                  }
                  while (v30 != v31);
                  std::string v30 = (char *)__p;
                }
                std::string __p = v29;
                char v110 = (uint64_t *)v23;
                unint64_t v111 = &v28[8 * v27];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                *(void *)int v23 = *(void *)(v24 + 8 * v22);
                v23 += 8;
              }
              char v110 = (uint64_t *)v23;
              ++v22;
            }
            while (v22 != v21);
          }
          uint64_t v33 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
          uint64_t v34 = v33;
          uint64_t v35 = v110;
          if (v110 >= (uint64_t *)v111)
          {
            uint64_t v72 = ((char *)v110 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v72 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v73 = (v111 - (unsigned char *)__p) >> 2;
            if (v73 <= v72 + 1) {
              unint64_t v73 = v72 + 1;
            }
            if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v73;
            }
            if (v74) {
              uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v74);
            }
            else {
              uint64_t v75 = 0;
            }
            uint64_t v80 = (uint64_t *)&v75[8 * v72];
            char v81 = &v75[8 * v74];
            *uint64_t v80 = v34;
            int v36 = v80 + 1;
            BOOL v83 = (char *)__p;
            uint64_t v82 = (char *)v110;
            if (v110 != __p)
            {
              do
              {
                uint64_t v84 = *((void *)v82 - 1);
                v82 -= 8;
                *--uint64_t v80 = v84;
              }
              while (v82 != v83);
              uint64_t v82 = (char *)__p;
            }
            std::string __p = v80;
            char v110 = v36;
            unint64_t v111 = v81;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            *char v110 = v33;
            int v36 = v35 + 1;
          }
          char v110 = v36;
          MIL::IRTensorValueType::MakeWithShape();
        }
        if ((v17 & 0x80000000) == 0)
        {
LABEL_47:
          char v110 = 0;
          unint64_t v111 = 0;
          std::string __p = 0;
          std::vector<std::string const*>::reserve(&__p, ((v8[1] - *v8) >> 3) + ((v19[1] - *v19) >> 3) - 1);
          uint64_t v107 = a2;
          uint64_t v38 = (int)v17;
          if (v17)
          {
            uint64_t v39 = 0;
            signed int v40 = (char *)v110;
            do
            {
              uint64_t v41 = *v8;
              if (v40 >= v111)
              {
                uint64_t v42 = (v40 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v42 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v43 = (v111 - (unsigned char *)__p) >> 2;
                if (v43 <= v42 + 1) {
                  unint64_t v43 = v42 + 1;
                }
                if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v43;
                }
                if (v44) {
                  std::string v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v44);
                }
                else {
                  std::string v45 = 0;
                }
                std::string v46 = &v45[8 * v42];
                *(void *)std::string v46 = *(void *)(v41 + 8 * v39);
                signed int v40 = v46 + 8;
                std::string v48 = (char *)__p;
                uint64_t v47 = (char *)v110;
                if (v110 != __p)
                {
                  do
                  {
                    uint64_t v49 = *((void *)v47 - 1);
                    v47 -= 8;
                    *((void *)v46 - 1) = v49;
                    v46 -= 8;
                  }
                  while (v47 != v48);
                  uint64_t v47 = (char *)__p;
                }
                std::string __p = v46;
                char v110 = (uint64_t *)v40;
                unint64_t v111 = &v45[8 * v44];
                if (v47) {
                  operator delete(v47);
                }
              }
              else
              {
                *(void *)signed int v40 = *(void *)(v41 + 8 * v39);
                v40 += 8;
              }
              char v110 = (uint64_t *)v40;
              ++v39;
            }
            while (v39 != v38);
          }
          unint64_t v50 = (int)v108;
          uint64_t v51 = *v19;
          if ((int)v108 < (unint64_t)((v19[1] - *v19) >> 3))
          {
            std::string v52 = (char *)v110;
            do
            {
              if (v52 >= v111)
              {
                uint64_t v53 = (v52 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v53 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v54 = (v111 - (unsigned char *)__p) >> 2;
                if (v54 <= v53 + 1) {
                  unint64_t v54 = v53 + 1;
                }
                if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v55 = v54;
                }
                if (v55) {
                  uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v55);
                }
                else {
                  uint64_t v56 = 0;
                }
                int v57 = &v56[8 * v53];
                *(void *)int v57 = *(void *)(v51 + 8 * v50);
                std::string v52 = v57 + 8;
                uint64_t v59 = (char *)__p;
                uint64_t v58 = (char *)v110;
                if (v110 != __p)
                {
                  do
                  {
                    uint64_t v60 = *((void *)v58 - 1);
                    v58 -= 8;
                    *((void *)v57 - 1) = v60;
                    v57 -= 8;
                  }
                  while (v58 != v59);
                  uint64_t v58 = (char *)__p;
                }
                std::string __p = v57;
                char v110 = (uint64_t *)v52;
                unint64_t v111 = &v56[8 * v55];
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(void *)std::string v52 = *(void *)(v51 + 8 * v50);
                v52 += 8;
              }
              char v110 = (uint64_t *)v52;
              ++v50;
              uint64_t v51 = *v19;
            }
            while (v50 < (v19[1] - *v19) >> 3);
          }
          unint64_t v61 = v38 + 1;
          uint64_t v62 = *v8;
          if (v38 + 1 < (unint64_t)((v8[1] - *v8) >> 3))
          {
            long long v63 = (char *)v110;
            do
            {
              if (v63 >= v111)
              {
                uint64_t v64 = (v63 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v64 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v65 = (v111 - (unsigned char *)__p) >> 2;
                if (v65 <= v64 + 1) {
                  unint64_t v65 = v64 + 1;
                }
                if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v65;
                }
                if (v66) {
                  unint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v66);
                }
                else {
                  unint64_t v67 = 0;
                }
                uint64_t v68 = &v67[8 * v64];
                *(void *)uint64_t v68 = *(void *)(v62 + 8 * v61);
                long long v63 = v68 + 8;
                int v70 = (char *)__p;
                long long v69 = (char *)v110;
                if (v110 != __p)
                {
                  do
                  {
                    uint64_t v71 = *((void *)v69 - 1);
                    v69 -= 8;
                    *((void *)v68 - 1) = v71;
                    v68 -= 8;
                  }
                  while (v69 != v70);
                  long long v69 = (char *)__p;
                }
                std::string __p = v68;
                char v110 = (uint64_t *)v63;
                unint64_t v111 = &v67[8 * v66];
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(void *)long long v63 = *(void *)(v62 + 8 * v61);
                v63 += 8;
              }
              char v110 = (uint64_t *)v63;
              ++v61;
              uint64_t v62 = *v8;
            }
            while (v61 < (v8[1] - *v8) >> 3);
          }
          MIL::IRTensorValueType::MakeWithShape();
        }
        uint64_t v37 = v8[1] - *v8;
        if ((v37 >> 3) - VariadicUnknownDimIndex <= -(int)v17)
        {
          char v110 = 0;
          unint64_t v111 = 0;
          std::string __p = 0;
          std::vector<std::string const*>::reserve(&__p, ((v8[1] - *v8) >> 3) - VariadicUnknownDimIndex);
          uint64_t v76 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
          uint64_t v77 = v76;
          uint64_t v78 = v110;
          if (v110 >= (uint64_t *)v111)
          {
            uint64_t v85 = ((char *)v110 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v85 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v86 = (v111 - (unsigned char *)__p) >> 2;
            if (v86 <= v85 + 1) {
              unint64_t v86 = v85 + 1;
            }
            if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v87 = v86;
            }
            if (v87) {
              uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v87);
            }
            else {
              uint64_t v88 = 0;
            }
            std::string v89 = (uint64_t *)&v88[8 * v85];
            std::vector<unsigned int> v90 = &v88[8 * v87];
            *std::string v89 = v77;
            BOOL v79 = v89 + 1;
            char v92 = (char *)__p;
            uint64_t v91 = (char *)v110;
            if (v110 != __p)
            {
              do
              {
                uint64_t v93 = *((void *)v91 - 1);
                v91 -= 8;
                *--std::string v89 = v93;
              }
              while (v91 != v92);
              uint64_t v91 = (char *)__p;
            }
            std::string __p = v89;
            char v110 = v79;
            unint64_t v111 = v90;
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *char v110 = v76;
            BOOL v79 = v78 + 1;
          }
          char v110 = v79;
          unint64_t v94 = v21 + 1;
          for (uint64_t i = *v8; v94 < (v8[1] - *v8) >> 3; uint64_t i = *v8)
          {
            if (v79 >= (uint64_t *)v111)
            {
              uint64_t v96 = ((char *)v79 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v96 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v97 = (v111 - (unsigned char *)__p) >> 2;
              if (v97 <= v96 + 1) {
                unint64_t v97 = v96 + 1;
              }
              if ((unint64_t)(v111 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v97;
              }
              if (v98) {
                uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v98);
              }
              else {
                uint64_t v99 = 0;
              }
              int v100 = &v99[8 * v96];
              *(void *)int v100 = *(void *)(i + 8 * v94);
              BOOL v79 = (uint64_t *)(v100 + 8);
              uint64_t v102 = (char *)__p;
              int v101 = (char *)v110;
              if (v110 != __p)
              {
                do
                {
                  uint64_t v103 = *((void *)v101 - 1);
                  v101 -= 8;
                  *((void *)v100 - 1) = v103;
                  v100 -= 8;
                }
                while (v101 != v102);
                int v101 = (char *)__p;
              }
              std::string __p = v100;
              char v110 = v79;
              unint64_t v111 = &v99[8 * v98];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *v79++ = *(void *)(i + 8 * v94);
            }
            char v110 = v79;
            ++v94;
          }
          MIL::IRTensorValueType::MakeWithShape();
        }
      }
      else
      {
        if ((v17 & 0x80000000) == 0) {
          goto LABEL_47;
        }
        uint64_t v37 = v8[1] - *v8;
      }
      LODWORD(v17) = v17 + ((unint64_t)v37 >> 3);
      goto LABEL_47;
    }
  }
  else if (v11)
  {
    goto LABEL_7;
  }
  uint64_t v108 = 0;
  goto LABEL_11;
}

void sub_20F4EF1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v31 - 144));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::anonymous namespace'::ValidateBatchDimMatch(uint64_t result, void *a2, void *a3, void *a4, uint64_t *a5)
{
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (int)result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v9) + 32))(*(void *)(*a2 + 8 * v9));
      if (result) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a3 + 8 * v9) + 32))(*(void *)(*a3 + 8 * v9));
      if (result) {
        break;
      }
      if ((*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v9) + 24))(*(void *)(*a2 + 8 * v9))
        || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a3 + 8 * v9) + 24))(*(void *)(*a3 + 8 * v9))) != 0)
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a2 + 8 * v9) + 24))(*(void *)(*a2 + 8 * v9));
        char v11 = result ? a3 : a2;
        *(void *)(*a4 + 8 * v9) = *(void *)(*v11 + 8 * v9);
      }
      else if (*(void *)(*a2 + 8 * v9) != *(void *)(*a3 + 8 * v9))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        long long v13 = a5;
        int v14 = exception;
        uint64_t v16 = *v13;
        uint64_t v15 = v13[1];
        v18[0] = v16;
        v18[1] = v15;
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v17, "value and index shape must match for first n=batch_dims dimensions.");
        MIL::ValidationResult::ValidationResult(v19, v18, 315, v17);
        MIL::ValidationError::ValidationError(v14, v19);
      }
      ++v9;
    }
    while (v10 != v9);
  }
  return result;
}

void sub_20F4EF4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a17);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGatherAlongAxis(uint64_t a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v8 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v8);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *a2;
  char v11 = (std::__shared_weak_count *)a2[1];
  v20[0] = v10;
  v20[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    (*(void (**)(MIL::IRTensorValueType *))(*(void *)v6 + 88))(v6);
    std::string::basic_string[abi:ne180100]<0>(v16, "indices");
    uint64_t v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v16);
    uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 96))(v13);
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v17 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v16, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v18, (uint64_t)__p);
  v18[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v19 = v23;
  MIL::ValidationError::ValidationError(exception, v18);
}

void sub_20F4EF784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGatherNd(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v59, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v59);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v61) < 0) {
    operator delete(v59);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  int v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(&v59, "indices");
  uint64_t v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v59);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v61) < 0) {
    operator delete(v59);
  }
  char v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  std::string::basic_string[abi:ne180100]<0>(&v59, "batch_dims");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v59);
  uint64_t v13 = v12;
  if (SHIBYTE(v61) < 0)
  {
    operator delete(v59);
    if (v13)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(&v59, "batch_dims");
      Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v59);
      uint64_t v15 = (const void *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v16 = MIL::IRValue::GetScalar<int>(v15);
      if (SHIBYTE(v61) < 0) {
        operator delete(v59);
      }
LABEL_11:
      if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v8)
        || !MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v11))
      {
        uint64_t v17 = (const void *)*v11;
        uint64_t v18 = v11[1] - 8;
        unint64_t v19 = (v18 - *v11) >> 3;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v59, v17, v18, v19);
        uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v11[1] - 8) + 16))(*(void *)(v11[1] - 8));
        if (v20)
        {
          unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
          if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v8)
            && v21 > MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(v8))
          {
            uint64_t v22 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
            uint64_t v23 = v22;
            uint64_t v24 = v60;
            if ((unint64_t)v60 >= v61)
            {
              uint64_t v36 = v60 - v59;
              if ((unint64_t)(v36 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v37 = (uint64_t)(v61 - (void)v59) >> 2;
              if (v37 <= v36 + 1) {
                unint64_t v37 = v36 + 1;
              }
              if (v61 - (unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38) {
                uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v61, v38);
              }
              else {
                uint64_t v39 = 0;
              }
              std::string v45 = (uint64_t *)&v39[8 * v36];
              std::string v46 = &v39[8 * v38];
              *std::string v45 = v23;
              uint64_t v25 = v45 + 1;
              std::string v48 = v59;
              uint64_t v47 = v60;
              if (v60 != v59)
              {
                do
                {
                  uint64_t v49 = *--v47;
                  *--std::string v45 = v49;
                }
                while (v47 != v48);
                uint64_t v47 = v59;
              }
              uint64_t v59 = v45;
              uint64_t v60 = v25;
              unint64_t v61 = (unint64_t)v46;
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *uint64_t v60 = v22;
              uint64_t v25 = v24 + 1;
            }
            uint64_t v60 = v25;
            MIL::IRTensorValueType::MakeWithShape();
          }
          unint64_t v26 = (char *)v8[1];
          if (v21 > (uint64_t)&v26[-*v8] >> 3)
          {
            exception = __cxa_allocate_exception(0x48uLL);
            uint64_t v53 = a2[1];
            *(void *)&long long v55 = *a2;
            *((void *)&v55 + 1) = v53;
            if (v53) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v54, "The last dimension of indices cannot be larger than the input shape size.");
            MIL::ValidationError::ValidationError((uint64_t)exception, &v55, (uint64_t)v54, 315);
          }
          unint64_t v27 = (char *)(*v8 + 8 * v21 + 8 * (int)v16);
          std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v59, (uint64_t)v60, v27, v26, (v26 - v27) >> 3);
        }
        else
        {
          uint64_t v28 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
          uint64_t v29 = v28;
          std::string v30 = v60;
          if ((unint64_t)v60 >= v61)
          {
            uint64_t v32 = v60 - v59;
            if ((unint64_t)(v32 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v33 = (uint64_t)(v61 - (void)v59) >> 2;
            if (v33 <= v32 + 1) {
              unint64_t v33 = v32 + 1;
            }
            if (v61 - (unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v33;
            }
            if (v34) {
              uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v61, v34);
            }
            else {
              uint64_t v35 = 0;
            }
            signed int v40 = (uint64_t *)&v35[8 * v32];
            uint64_t v41 = &v35[8 * v34];
            *signed int v40 = v29;
            uint64_t v31 = v40 + 1;
            unint64_t v43 = v59;
            uint64_t v42 = v60;
            if (v60 != v59)
            {
              do
              {
                uint64_t v44 = *--v42;
                *--signed int v40 = v44;
              }
              while (v42 != v43);
              uint64_t v42 = v59;
            }
            uint64_t v59 = v40;
            uint64_t v60 = v31;
            unint64_t v61 = (unint64_t)v41;
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *uint64_t v60 = v28;
            uint64_t v31 = v30 + 1;
          }
          uint64_t v60 = v31;
        }
        MIL::IRTensorValueType::MakeWithShape();
      }
      unint64_t v50 = __cxa_allocate_exception(0x48uLL);
      uint64_t v51 = a2[1];
      v57[0] = *a2;
      v57[1] = v51;
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v56, "'input_shape' and 'indices_shape' cannot both have variadic dimensions.");
      MIL::ValidationResult::ValidationResult(v58, v57, 315, v56);
      MIL::ValidationError::ValidationError(v50, v58);
    }
  }
  else if (v12)
  {
    goto LABEL_7;
  }
  uint64_t v16 = 0;
  goto LABEL_11;
}

void sub_20F4EFDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,char a25)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a25);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v26) {
    __cxa_free_exception(v25);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidatePropertyVec(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_26:
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  unint64_t v9 = 0;
  while (1)
  {
    if (v9 >= (uint64_t)(a2[1] - *a2) >> 3) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v10 = *(void **)(v5 + 8 * v9);
    char v11 = *(void **)(*a2 + 8 * v9);
    uint64_t v12 = (MIL::IRConstantPropertyImpl **)MIL::IRProperty::TryAsConstant(v10);
    uint64_t v13 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v11);
    uint64_t v14 = v13;
    if (!v12 || v13 == 0) {
      break;
    }
    ScalarDatauint64_t Type = MIL::IRConstantProperty::GetScalarDataType(v12);
    if (ScalarDataType == 14)
    {
      UInt8Scalaruint64_t Value = MIL::IRConstantProperty::GetUInt8ScalarValue((MIL::IRConstantProperty *)v12);
      if (UInt8ScalarValue == MIL::IRConstantProperty::GetUInt8ScalarValue(v14)) {
        goto LABEL_25;
      }
      uint64_t v60 = (std::__shared_weak_count *)a3[1];
      uint64_t v85 = *a3;
      unint64_t v86 = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      unint64_t v61 = std::string::append(&v88, " at index: ");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v9);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v63 = &v87;
      }
      else {
        long long v63 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      unint64_t v65 = std::string::append(&v89, (const std::string::value_type *)v63, size);
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      std::string::size_type v84 = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)BOOL v83 = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v85, 313, v83);
      if (SHIBYTE(v84) < 0) {
        operator delete(v83[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = v86;
      if (!v86) {
        return;
      }
LABEL_46:
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      return;
    }
    if (ScalarDataType != 12)
    {
      std::string v46 = (std::__shared_weak_count *)a3[1];
      uint64_t v81 = *a3;
      uint64_t v82 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      uint64_t v47 = std::string::append(&v88, " at index: ");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v9);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v49 = &v87;
      }
      else {
        uint64_t v49 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v50 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v50 = v87.__r_.__value_.__l.__size_;
      }
      uint64_t v51 = std::string::append(&v89, (const std::string::value_type *)v49, v50);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      std::string::size_type v80 = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)BOOL v79 = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v81, 313, v79);
      if (SHIBYTE(v80) < 0) {
        operator delete(v79[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = v82;
      if (!v82) {
        return;
      }
      goto LABEL_46;
    }
    Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue((MIL::IRConstantProperty *)v12);
    if (Int64ScalarValue != MIL::IRConstantProperty::GetInt64ScalarValue(v14))
    {
      uint64_t v53 = (std::__shared_weak_count *)a3[1];
      uint64_t v92 = *a3;
      uint64_t v93 = v53;
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      unint64_t v54 = std::string::append(&v88, " at index: ");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v9);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &v87;
      }
      else {
        uint64_t v56 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v87.__r_.__value_.__l.__size_;
      }
      uint64_t v58 = std::string::append(&v89, (const std::string::value_type *)v56, v57);
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v58->__r_.__value_.__r.__words[2];
      long long v90 = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v92, 313, &v90);
      if (SHIBYTE(v91) < 0) {
        operator delete((void *)v90);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = v93;
      if (!v93) {
        return;
      }
      goto LABEL_46;
    }
LABEL_25:
    ++v9;
    uint64_t v5 = *a1;
    if (v9 >= (a1[1] - *a1) >> 3) {
      goto LABEL_26;
    }
  }
  if (v12) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = v13 == 0;
  }
  if (v16)
  {
    if (v12) {
      BOOL v17 = v13 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      uint64_t v32 = (std::__shared_weak_count *)a3[1];
      uint64_t v73 = *a3;
      unint64_t v74 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      unint64_t v33 = std::string::append(&v88, " must not be constant at index: ");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v9);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v87;
      }
      else {
        uint64_t v35 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v87.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v89, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      std::string::size_type v72 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v71 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v73, 313, v71);
      if (SHIBYTE(v72) < 0) {
        operator delete(v71[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = v74;
      if (v74) {
        goto LABEL_46;
      }
      return;
    }
    uint64_t v18 = (MIL::IRUnknownProperty *)MIL::IRProperty::AsUnknown((MIL::IRProperty *)v10);
    int IsVariadic = MIL::IRUnknownProperty::IsVariadic(v18);
    uint64_t v20 = (MIL::IRUnknownProperty *)MIL::IRProperty::AsUnknown((MIL::IRProperty *)v11);
    if (IsVariadic != MIL::IRUnknownProperty::IsVariadic(v20))
    {
      uint64_t v39 = (std::__shared_weak_count *)a3[1];
      uint64_t v69 = *a3;
      int v70 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      signed int v40 = std::string::append(&v88, " in terms of being unknown variadic at index: ");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v9);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v42 = &v87;
      }
      else {
        uint64_t v42 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v43 = v87.__r_.__value_.__l.__size_;
      }
      uint64_t v44 = std::string::append(&v89, (const std::string::value_type *)v42, v43);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      std::string::size_type v68 = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v67 = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v69, 313, v67);
      if (SHIBYTE(v68) < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = v70;
      if (v70) {
        goto LABEL_46;
      }
      return;
    }
    goto LABEL_25;
  }
  uint64_t v24 = (std::__shared_weak_count *)a3[1];
  uint64_t v77 = *a3;
  uint64_t v78 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  uint64_t v25 = std::string::append(&v88, " must be constant at index: ");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v87, v9);
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v27 = &v87;
  }
  else {
    unint64_t v27 = (std::string *)v87.__r_.__value_.__r.__words[0];
  }
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = v87.__r_.__value_.__l.__size_;
  }
  uint64_t v29 = std::string::append(&v89, (const std::string::value_type *)v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  std::string::size_type v76 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a4, &v77, 313, __p);
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  uint64_t v31 = v78;
  if (v78) {
    goto LABEL_46;
  }
}

void sub_20F4F061C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v53 - 185) < 0) {
    operator delete(*(void **)(v53 - 208));
  }
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  if (*(char *)(v53 - 161) < 0) {
    operator delete(*(void **)(v53 - 184));
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  _Unwind_Resume(exception_object);
}

MIL::MILResult *MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors@<X0>(uint64_t a1@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  v12[1] = a4;
  uint64_t v13 = a1;
  v12[0] = &v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(a2, (uint64_t)v12, (const void **)__p, a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = (MIL::MILResult *)MIL::ValidationResult::IsGood(a5);
  if (result)
  {
    MIL::ValidationResult::~ValidationResult(a5);
    std::string::basic_string[abi:ne180100]<0>(__p, "interleaveFactors");
    MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(a3, (uint64_t)v12, (const void **)__p, a5);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t result = (MIL::MILResult *)MIL::ValidationResult::IsGood(a5);
    if (result)
    {
      MIL::ValidationResult::~ValidationResult(a5);
      return MIL::ValidationResult::ValidationResult(v9);
    }
  }
  return result;
}

void sub_20F4F099C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MIL::ValidationResult::~ValidationResult(v14);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(MIL::IRTensorValueType *this@<X1>, uint64_t a2@<X0>, const void **a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  if (MIL::IRTensorValueType::Rank(this) != 1)
  {
    char v11 = *(uint64_t **)(a2 + 8);
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    uint64_t v30 = v13;
    uint64_t v31 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a3 + 23) >= 0) {
      size_t v14 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v14 = (size_t)a3[1];
    }
    uint64_t v15 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 18);
    if (v29 < 0) {
      uint64_t v15 = (void **)__p[0];
    }
    if (v14)
    {
      if (*((char *)a3 + 23) >= 0) {
        BOOL v16 = a3;
      }
      else {
        BOOL v16 = *a3;
      }
      memmove(v15, v16, v14);
    }
    strcpy((char *)v15 + v14, " must have rank 1.");
    MIL::ValidationResult::ValidationResult(a4, &v30, 304, __p);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    BOOL v17 = v31;
    if (!v31) {
      return;
    }
LABEL_22:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    return;
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
  if (*(void *)(v8 + 8) == *(void *)v8) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v9 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  if (v10 == MIL::IRTensorValueType::Rank(**(MIL::IRTensorValueType ***)a2))
  {
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  uint64_t v18 = *(uint64_t **)(a2 + 8);
  uint64_t v20 = *v18;
  unint64_t v19 = (std::__shared_weak_count *)v18[1];
  uint64_t v26 = v20;
  unint64_t v27 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  unint64_t v21 = std::string::append(&v23, " must match the rank of input.");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v24 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a4, &v26, 304, v24);
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  BOOL v17 = v27;
  if (v27) {
    goto LABEL_22;
  }
}

void sub_20F4F0C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidatePixelBufferToTensor(MIL::Operators::Common::Shared::CustomValidators *this, const MIL::IROperation *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v10, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  uint64_t v5 = (MIL::IRTypedArgument *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v4);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "plane_index");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)&v10, 0, &v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  MIL::IRValueType::AsTensorType(OutputType);
  std::string::basic_string[abi:ne180100]<0>(&v9, "input");
  MIL::IRTypedArgument::Make(v5, v7);
}

void sub_20F4F13E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  operator delete(v46);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a44);
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 192);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  if (!a3[3])
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v26 = a2[1];
    v44[0] = *a2;
    v44[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "At least one input is expected.");
    MIL::ValidationResult::ValidationResult(v45, v44, 300, v43);
    MIL::ValidationError::ValidationError(exception, v45);
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v42);
  uint64_t v7 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  uint64_t v8 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v7);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "plane_index");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v42);
  std::string v10 = v9;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if (v10)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(&v42, "plane_index");
      Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v42);
      uint64_t v12 = (void *)MIL::IRValue::AsTensor(SingleValue);
      v41[0] = MIL::IRTensorValue::GetDataView<unsigned char>(v12);
      v41[1] = v13;
      unsigned int v14 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(v41, 0);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
LABEL_10:
      Shape = (void *)MIL::IRPixelBufferValueType::GetShape(v8);
      if (Shape[1] - *Shape == 16)
      {
        PixelFormatuint64_t Type = MIL::IRPixelBufferValueType::GetPixelFormatType(v8);
        if (MIL::GetNumPlanesForFormat(PixelFormatType) > v14)
        {
          int v17 = MIL::IRPixelBufferValueType::GetPixelFormatType(v8);
          if (MIL::SupportsMultiSlice(v17))
          {
            NumSlices = (void *)MIL::IRPixelBufferValueType::GetNumSlices((MIL::IRPixelBufferValueTypeImpl **)v8);
            unint64_t v19 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(*NumSlices + 8 * v14));
            Int64Scalaruint64_t Value = (MIL::MILContext *)MIL::IRConstantProperty::GetInt64ScalarValue(v19);
          }
          else
          {
            Int64Scalaruint64_t Value = 0;
          }
          unint64_t v21 = *a1;
          int v22 = MIL::IRPixelBufferValueType::GetPixelFormatType(v8);
          std::string v23 = (MIL::IRDimension ***)MIL::IRPixelBufferValueType::GetShape(v8);
          MIL::GetShapeForPlane(v21, Int64ScalarValue, v22, v23, v14, &v42);
          int v24 = MIL::IRPixelBufferValueType::GetPixelFormatType(v8);
          MIL::GetDTypeForPixelFormat(v24);
          MIL::IRTensorValueType::MakeWithShape();
        }
        char v29 = __cxa_allocate_exception(0x48uLL);
        uint64_t v30 = a2[1];
        v36[0] = *a2;
        v36[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v31 = MIL::IRPixelBufferValueType::GetPixelFormatType(v8);
        MIL::IRPixelFormatTypeToString(v31, &v42);
        uint64_t v32 = std::string::insert(&v42, 0, "Plane index exceeds the number of planes for the given format type: ");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        std::string::size_type v35 = v32->__r_.__value_.__r.__words[2];
        long long v34 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(v37, v36, 305, &v34);
        MIL::ValidationError::ValidationError(v29, v37);
      }
      unint64_t v27 = __cxa_allocate_exception(0x48uLL);
      uint64_t v28 = a2[1];
      v39[0] = *a2;
      v39[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v38, "Input rank must be 2.");
      MIL::ValidationResult::ValidationResult(v40, v39, 305, v38);
      MIL::ValidationError::ValidationError(v27, v40);
    }
  }
  else if (v9)
  {
    goto LABEL_6;
  }
  unsigned int v14 = 0;
  goto LABEL_10;
}

void sub_20F4F1A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 161) < 0) {
    operator delete(*(void **)(v35 - 184));
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v34) {
    __cxa_free_exception(v33);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::anonymous namespace'::ValidateShapes(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_22:
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  unint64_t v9 = 0;
  while (1)
  {
    if (v9 >= (uint64_t)(a2[1] - *a2) >> 3) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    std::string v10 = *(MIL::IRDimension **)(v5 + 8 * v9);
    uint64_t v11 = *(MIL::IRDimension **)(*a2 + 8 * v9);
    uint64_t v12 = (*(uint64_t (**)(MIL::IRDimension *))(*(void *)v10 + 16))(v10);
    uint64_t v13 = (*(uint64_t (**)(MIL::IRDimension *))(*(void *)v11 + 16))(v11);
    uint64_t v14 = v13;
    if (v12) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (!v15)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
      if (v21 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14))
      {
        uint64_t v26 = (std::__shared_weak_count *)a3[1];
        uint64_t v50 = *a3;
        uint64_t v51 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::to_string(&v47, v9);
        unint64_t v27 = std::string::insert(&v47, 0, "Unexpected output constant dim at index: ");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        std::string::size_type v49 = v27->__r_.__value_.__r.__words[2];
        long long v48 = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a4, &v50, 313, &v48);
        if (SHIBYTE(v49) < 0) {
          operator delete((void *)v48);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        std::string::size_type v25 = v51;
        if (!v51) {
          return;
        }
        goto LABEL_40;
      }
      goto LABEL_21;
    }
    if (v12) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = v13 == 0;
    }
    if (!v16)
    {
      int v22 = (std::__shared_weak_count *)a3[1];
      uint64_t v45 = *a3;
      std::string v46 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v47, v9);
      std::string v23 = std::string::insert(&v47, 0, "Output dim must be constant at index: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v44 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v45, 313, __p);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      std::string::size_type v25 = v46;
      if (!v46) {
        return;
      }
LABEL_40:
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      return;
    }
    if (v12) {
      BOOL v17 = v13 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      char v29 = (std::__shared_weak_count *)a3[1];
      uint64_t v41 = *a3;
      std::string v42 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v47, v9);
      uint64_t v30 = std::string::insert(&v47, 0, "Output dim must not be constant at index: ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v40 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v39 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v41, 313, v39);
      if (SHIBYTE(v40) < 0) {
        operator delete(v39[0]);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      std::string::size_type v25 = v42;
      if (v42) {
        goto LABEL_40;
      }
      return;
    }
    uint64_t v18 = MIL::IRDimension::AsUnknown(v10);
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
    uint64_t v20 = MIL::IRDimension::AsUnknown(v11);
    if (v19 != (*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20)) {
      break;
    }
LABEL_21:
    ++v9;
    uint64_t v5 = *a1;
    if (v9 >= (a1[1] - *a1) >> 3) {
      goto LABEL_22;
    }
  }
  uint64_t v32 = (std::__shared_weak_count *)a3[1];
  uint64_t v37 = *a3;
  long long v38 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::to_string(&v47, v9);
  long long v33 = std::string::insert(&v47, 0, "Unexpected unknown dim in terms of being variadic at index: ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  std::string::size_type v36 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v35 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a4, &v37, 313, v35);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::string::size_type v25 = v38;
  if (v38) {
    goto LABEL_40;
  }
}

void sub_20F4F1F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_20F4F2108(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorToPixelBuffer(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v23, "pixel_format_type");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)&v23, 0, (uint64_t *)&v21);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "bytes_per_row");
  MIL::IROperation::TryGetParameterType(this, (uint64_t)&v23, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "num_slices");
  MIL::IROperation::TryGetParameterType(this, (uint64_t)&v23, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  BOOL v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  MIL::IRMemoryLayoutValueType::AsPixelBufferType(v6);
  MIL::IRValue::GetScalar<std::string>(v21, &v23);
  int v7 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&v23);
  unsigned int NumPlanesForFormat = MIL::GetNumPlanesForFormat(v7);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "input");
  int v9 = (*(uint64_t (**)(MIL::Operators::Common::Shared::CustomValidators *, std::string *))(*(void *)this + 152))(this, &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v9 == NumPlanesForFormat)
  {
    std::vector<std::shared_ptr<MIL::IRTypedArgument>>::vector(&v16, NumPlanesForFormat);
    if (NumPlanesForFormat)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "input");
      Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      uint64_t v11 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(ParameterType);
      MIL::IRTypedArgument::Make(v11, v12);
    }
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRTypedArgument>>&,0>(&v23, "input", &v16);
    std::string::basic_string[abi:ne180100]<0>(&v15, "pixel_format_type");
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v19 = *LocationPtr;
  uint64_t v20 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch between expected number of planes and pixel format.");
  MIL::ValidationResult::ValidationResult(a2, &v19, 315, __p);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_20F4F3700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v70 - 169) < 0) {
    operator delete(*(void **)(v70 - 192));
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v69) {
    operator delete(v69);
  }
  std::string::size_type v72 = *(std::__shared_weak_count **)(v70 - 232);
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a64);
  a64 = (uint64_t)&a69;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  uint64_t v73 = *(std::__shared_weak_count **)(v70 - 248);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(MIL::IRConstantDimension **a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t **a4@<X8>)
{
  if ((unint64_t)(a3[3] - 2) >= 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v74 = a2[1];
    v106[0] = *a2;
    v106[1] = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v105, "Two or three inputs are expected.");
    MIL::ValidationResult::ValidationResult(v107, v106, 300, v105);
    MIL::ValidationError::ValidationError(exception, v107);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  MIL::ValueTypeInferenceUtils::GetVariadicValueTypes(a3, (unsigned __int8 *)__p, &v103);
  if (SBYTE7(v80) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v100, "pixel_format_type");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v100);
  MIL::IRValue::GetScalar<std::string>(SingleValue, (std::string *)__p);
  int v9 = MIL::StringToIRPixelFormatType((unsigned __int8 *)__p);
  if (SBYTE7(v80) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete(v100);
  }
  uint64_t v11 = v103;
  std::string v10 = v104;
  if (MIL::GetNumPlanesForFormat(v9) != v10 - v11)
  {
    uint64_t v75 = __cxa_allocate_exception(0x48uLL);
    uint64_t v76 = a2[1];
    v98[0] = *a2;
    v98[1] = v76;
    if (v76) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "Mismatch between expected number of planes and pixel format.");
    MIL::ValidationResult::ValidationResult(v99, v98, 315, v97);
    MIL::ValidationError::ValidationError(v75, v99);
  }
  uint64_t v12 = MIL::IRValueType::AsTensorType(*v103);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  int v100 = 0;
  int v101 = 0;
  uint64_t v102 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v100, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  uint64_t v14 = v100;
  int64_t v15 = (char *)v101 - (char *)(v100 + 1);
  if (v101 != v100 + 1) {
    memmove(v100, v100 + 1, (char *)v101 - (char *)(v100 + 1));
  }
  int v101 = (MIL::IRDimension **)((char *)v14 + v15);
  uint64_t v16 = MIL::IRValueType::AsTensorType(*v103);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16);
  if (v17 != MIL::GetDTypeForPixelFormat(v9))
  {
    uint64_t v77 = __cxa_allocate_exception(0x48uLL);
    uint64_t v78 = a2[1];
    v95[0] = *a2;
    v95[1] = v78;
    if (v78) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v94, "Unexpected pixel format type for the given tensor dtype.");
    MIL::ValidationResult::ValidationResult(v96, v95, 313, v94);
    MIL::ValidationError::ValidationError(v77, v96);
  }
  for (unsigned __int8 i = 1; MIL::GetNumPlanesForFormat(v9) > i; ++i)
  {
    uint64_t v19 = MIL::IRValueType::AsTensorType(v103[i]);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v80 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 3);
    MIL::GetShapeForPlane(*a1, 0, v9, &v100, i, v93);
    if ((MIL::Validation::IsEqualConstShape((uint64_t *)__p, v93) & 1) == 0)
    {
      unint64_t v61 = __cxa_allocate_exception(0x48uLL);
      uint64_t v62 = a2[1];
      v91[0] = *a2;
      v91[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
      std::to_string(&v87, i);
      long long v63 = std::string::insert(&v87, 0, "Plane index ");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      unint64_t v65 = std::string::append(&v88, " has unexpected shape.");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      std::string::size_type v90 = v65->__r_.__value_.__r.__words[2];
      long long v89 = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v92, v91, 315, &v89);
      MIL::ValidationError::ValidationError(v61, v92);
    }
    uint64_t v21 = MIL::IRValueType::AsTensorType(v103[i]);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 88))(v21) != v17)
    {
      unint64_t v67 = __cxa_allocate_exception(0x48uLL);
      uint64_t v68 = a2[1];
      v85[0] = *a2;
      v85[1] = v68;
      if (v68) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
      }
      std::to_string(&v87, i);
      uint64_t v69 = std::string::insert(&v87, 0, "Plane index ");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      uint64_t v71 = std::string::append(&v88, " has unexpected dtype.");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      std::string::size_type v84 = v71->__r_.__value_.__r.__words[2];
      long long v83 = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v86, v85, 315, &v83);
      MIL::ValidationError::ValidationError(v67, v86);
    }
    if (v93[0])
    {
      v93[1] = v93[0];
      operator delete(v93[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  memset(v93, 0, sizeof(v93));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v93, v100, (uint64_t)v101, v101 - v100);
  memset(&v88, 0, sizeof(v88));
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  int v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  std::string v23 = v22;
  if (SBYTE7(v80) < 0)
  {
    operator delete(__p[0]);
    if (!v23) {
      goto LABEL_42;
    }
  }
  else if (!v22)
  {
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v25 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SBYTE7(v80) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 96))(v25);
  if (*(void *)(v26 + 8) == *(void *)v26) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v27 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v26);
  unint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
  std::vector<MIL::IRProperty const*>::vector(__p, v28);
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v88.__r_.__value_.__r.__words[2] = v80;
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  uint64_t v29 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  uint64_t v30 = v29;
  if (SBYTE7(v80) < 0)
  {
    operator delete(__p[0]);
    if (v30) {
      goto LABEL_32;
    }
  }
  else if (v29)
  {
LABEL_32:
    std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
    long long v31 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    uint64_t v32 = (uint64_t *)MIL::IRValue::AsTensor(v31);
    v87.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<long long>(v32);
    v87.__r_.__value_.__l.__size_ = v33;
    if (SBYTE7(v80) < 0) {
      operator delete(__p[0]);
    }
    if (v88.__r_.__value_.__l.__size_ != v88.__r_.__value_.__r.__words[0])
    {
      unint64_t v34 = 0;
      do
      {
        uint64_t v35 = *a1;
        std::string::size_type v36 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v87, v34);
        uint64_t Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v35, *v36);
        *(void *)(v88.__r_.__value_.__r.__words[0] + 8 * v34++) = Int64Scalar;
      }
      while (v34 < (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_42;
  }
  if (v88.__r_.__value_.__l.__size_ != v88.__r_.__value_.__r.__words[0])
  {
    unint64_t v38 = 0;
    do
    {
      uint64_t v39 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(void *)(v88.__r_.__value_.__r.__words[0] + 8 * v38++) = v39;
    }
    while (v38 < (uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_42:
  memset(&v87, 0, sizeof(v87));
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  std::string::size_type v40 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v41 = v40;
  if (SBYTE7(v80) < 0)
  {
    operator delete(__p[0]);
    if (!v41) {
      goto LABEL_63;
    }
  }
  else if (!v40)
  {
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  std::string v42 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v43 = MIL::IRValueType::AsTensorType(v42);
  if (SBYTE7(v80) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 96))(v43);
  if (*(void *)(v44 + 8) == *(void *)v44) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v45 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v44);
  unint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 48))(v45);
  std::vector<MIL::IRProperty const*>::vector(__p, v46);
  if (v87.__r_.__value_.__r.__words[0])
  {
    v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v87.__r_.__value_.__r.__words[2] = v80;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  uint64_t v47 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  uint64_t v48 = v47;
  if (SBYTE7(v80) < 0)
  {
    operator delete(__p[0]);
    if (v48) {
      goto LABEL_53;
    }
  }
  else if (v47)
  {
LABEL_53:
    std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
    std::string::size_type v49 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    uint64_t v50 = (uint64_t *)MIL::IRValue::AsTensor(v49);
    v82[0] = MIL::IRTensorValue::GetDataView<long long>(v50);
    v82[1] = v51;
    if (SBYTE7(v80) < 0) {
      operator delete(__p[0]);
    }
    if (v87.__r_.__value_.__l.__size_ != v87.__r_.__value_.__r.__words[0])
    {
      unint64_t v52 = 0;
      do
      {
        uint64_t v53 = *a1;
        unint64_t v54 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v82, v52);
        uint64_t v55 = MIL::IRConstantProperty::MakeInt64Scalar(v53, *v54);
        *(void *)(v87.__r_.__value_.__r.__words[0] + 8 * v52++) = v55;
      }
      while (v52 < (uint64_t)(v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_63;
  }
  if (v87.__r_.__value_.__l.__size_ != v87.__r_.__value_.__r.__words[0])
  {
    unint64_t v56 = 0;
    do
    {
      uint64_t v57 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(void *)(v87.__r_.__value_.__r.__words[0] + 8 * v56++) = v57;
    }
    while (v56 < (uint64_t)(v87.__r_.__value_.__l.__size_ - v87.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_63:
  uint64_t v58 = *a1;
  *(_OWORD *)std::string __p = 0u;
  long long v80 = 0u;
  int v81 = 1065353216;
  uint64_t v59 = MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(v58, v9, (long long *)v93, (std::__shared_weak_count_vtbl **)&v88, (std::__shared_weak_count_vtbl **)&v87, (uint64_t *)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v60 = (uint64_t *)operator new(8uLL);
  *a4 = v60;
  *v60++ = v59;
  a4[1] = v60;
  a4[2] = v60;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  if (v87.__r_.__value_.__r.__words[0])
  {
    v87.__r_.__value_.__l.__size_ = v87.__r_.__value_.__r.__words[0];
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
  if (v100)
  {
    int v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    int v104 = v103;
    operator delete(v103);
  }
}

void sub_20F4F489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,std::__shared_weak_count *a60,char a61)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a61);
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a60);
  }
  if (v62) {
    __cxa_free_exception(v61);
  }
  unint64_t v65 = *(void **)(v63 - 208);
  if (v65)
  {
    *(void *)(v63 - 200) = v65;
    operator delete(v65);
  }
  long long v66 = *(void **)(v63 - 184);
  if (v66)
  {
    *(void *)(v63 - 176) = v66;
    operator delete(v66);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::anonymous namespace'::ValidatePropertyVecPtr(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  if (!a1 && a2)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    uint64_t v18 = *a3;
    uint64_t v19 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a4, &v18, 313, &v16);
    if (v17 < 0) {
      operator delete(v16);
    }
    BOOL v6 = v19;
    if (!v19) {
      return;
    }
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    return;
  }
  if (!a1 || a2)
  {
    if (a1 && a2)
    {
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      v9[0] = *a3;
      v9[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Operators::Common::Shared::ValidatePropertyVec(a1, a2, v9, (MIL::ValidationResult *)v10);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (!(*(unsigned int (**)(void *))(v10[0] + 16))(v10))
      {
        MIL::MILResult::MILResult((std::string *)a4, (uint64_t)v10);
        *(void *)a4 = &unk_26C25DB50;
        *(_DWORD *)(a4 + 48) = v11;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v10);
        return;
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v10);
    }
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a4);
    return;
  }
  int v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  int64_t v15 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  MIL::ValidationResult::ValidationResult(a4, &v14, 313, &__p);
  if (v13 < 0) {
    operator delete(__p);
  }
  BOOL v6 = v15;
  if (v15) {
    goto LABEL_16;
  }
}

void sub_20F4F4DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<long long const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 8 * a2;
}

void sub_20F4F4E90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorBufferToTensor(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v27, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  int v7 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v6);
  if (v28 < 0) {
    operator delete(v27);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v9 = MIL::IRValueType::AsTensorType(OutputType);
  uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v7);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  size_t v12 = *(void *)(Shape + 8) - *(void *)Shape;
  if (v12 == *(void *)(v11 + 8) - *(void *)v11 && !memcmp(*(const void **)Shape, *(const void **)v11, v12))
  {
    RowAlignmentInBytes = (void *)MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v7);
    if (!MIL::IRProperty::TryAsUnknown(RowAlignmentInBytes))
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v18 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v21 = *LocationPtr;
    int v22 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "Row_alignment_in_bytes in input cannot be unknown.");
    MIL::ValidationResult::ValidationResult(a2, &v21, 313, v19);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    int64_t v15 = v22;
    if (v22) {
      goto LABEL_10;
    }
  }
  else
  {
    char v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v14 = (std::__shared_weak_count *)v13[1];
    uint64_t v25 = *v13;
    uint64_t v26 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Output shape must match the input shape.");
    MIL::ValidationResult::ValidationResult(a2, &v25, 313, __p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    int64_t v15 = v26;
    if (v26) {
LABEL_10:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_20F4F5064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  BOOL v6 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v6);
  __p[1] = 0;
  uint64_t v9 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)Shape, *(void *)(Shape + 8), (uint64_t)(*(void *)(Shape + 8) - *(void *)Shape) >> 3);
  MIL::IRTensorBufferValueType::GetDataType(v6);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F4F51B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorToTensorBuffer(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v32, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "strides");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)&v32, 0, &v30);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "strides");
  uint64_t v7 = MIL::IROperation::TryGetParameterType(this, (uint64_t)&v32, 0);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "row_alignment_in_bytes");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)&v32, 0, &v28);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "interleave_factors");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)&v32, 0, &v26);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "interleave_factors");
  uint64_t v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  std::string v10 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  MIL::IRMemoryLayoutValueType::AsTensorBufferType(v10);
  if (v7)
  {
    if (v28)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      size_t v12 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v20 = *LocationPtr;
      uint64_t v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Both strides and row_alignment_in_bytes cannot be specified as an input parameter simultaneously in ios18 and above opsets.");
      MIL::ValidationResult::ValidationResult(a2, &v20, 315, __p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      char v13 = v21;
      if (!v21) {
        goto LABEL_29;
      }
LABEL_28:
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_29;
    }
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(&v17, "input");
    MIL::IRTypedArgument::Make(v6, v14);
  }
  if (v28) {
    goto LABEL_22;
  }
  int64_t v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v16 = (std::__shared_weak_count *)v15[1];
  uint64_t v24 = *v15;
  uint64_t v25 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "One of strides or row_alignment_in_bytes is a required input parameter in ios18 and above opsets.");
  MIL::ValidationResult::ValidationResult(a2, &v24, 316, v22);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  char v13 = v25;
  if (v25) {
    goto LABEL_28;
  }
LABEL_29:
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_20F4F63F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  operator delete(v64);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a63);
  unint64_t v67 = *(std::__shared_weak_count **)(v65 - 232);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  uint64_t v68 = *(std::__shared_weak_count **)(v65 - 216);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  uint64_t v69 = *(std::__shared_weak_count **)(v65 - 200);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(MIL::IRUnknownProperty **a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t **a4@<X8>)
{
  if (a3[3] != 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v61 = a2[1];
    v105[0] = *a2;
    v105[1] = v61;
    if (v61) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v104, "Three inputs are expected.");
    MIL::ValidationResult::ValidationResult(v106, v105, 300, v104);
    MIL::ValidationError::ValidationError(exception, v106);
  }
  std::string::basic_string[abi:ne180100]<0>(v101, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v101);
  uint64_t v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if ((v101[23] & 0x80000000) != 0) {
    operator delete(*(void **)v101);
  }
  std::string::basic_string[abi:ne180100]<0>(v101, "interleave_factors");
  std::string v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v101);
  uint64_t v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v10);
  if ((v101[23] & 0x80000000) != 0) {
    operator delete(*(void **)v101);
  }
  std::string::basic_string[abi:ne180100]<0>(v101, "strides");
  size_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v101);
  if ((v101[23] & 0x80000000) != 0) {
    operator delete(*(void **)v101);
  }
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v101, "strides");
    char v13 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v101);
    uint64_t v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v13);
    if ((v101[23] & 0x80000000) != 0) {
      operator delete(*(void **)v101);
    }
    int64_t v15 = (std::__shared_weak_count *)a2[1];
    uint64_t v99 = *a2;
    int v100 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v9, v14, v11, (uint64_t)&v99, (MIL::ValidationResult *)v101);
    if (v100) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
    }
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v101))
    {
      int v62 = __cxa_allocate_exception(0x48uLL);
      MIL::MILResult::MILResult(v97, (uint64_t)v101);
      v97[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
      int v98 = v103;
      MIL::ValidationError::ValidationError(v62, v97);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v101);
    unint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v16 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v14 + 96))(v14);
    if (*(void *)(v16 + 8) == *(void *)v16) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v17 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v16);
    unint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
    std::vector<MIL::IRProperty const*>::resize((uint64_t)&v94, v18);
    std::string::basic_string[abi:ne180100]<0>(v101, "strides");
    Singleuint64_t Value = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v101);
    uint64_t v20 = SingleValue;
    if ((v101[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v101);
      if (v20) {
        goto LABEL_19;
      }
    }
    else if (SingleValue)
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(v101, "strides");
      uint64_t v21 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v101);
      int v22 = (uint64_t *)MIL::IRValue::AsTensor(v21);
      v90.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<long long>(v22);
      v90.__r_.__value_.__l.__size_ = v23;
      if ((v101[23] & 0x80000000) != 0) {
        operator delete(*(void **)v101);
      }
      if (v95 != v94)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = (void *)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v90, v24);
          uint64_t v26 = *a1;
          if (*v25 == -1)
          {
            uint64_t Int64Scalar = MIL::IRUnknownProperty::Make(*a1, 0);
          }
          else
          {
            uint64_t v27 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v90, v24);
            uint64_t Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v26, *v27);
          }
          *((void *)v94 + v24++) = Int64Scalar;
        }
        while (v24 < (v95 - (unsigned char *)v94) >> 3);
      }
LABEL_54:
      Uuint64_t Int64Scalar = 0;
      goto LABEL_55;
    }
    if (v95 != v94)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = MIL::IRUnknownProperty::Make(*a1, 0);
        *((void *)v94 + v39++) = v40;
      }
      while (v39 < (v95 - (unsigned char *)v94) >> 3);
    }
    goto LABEL_54;
  }
  unint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  std::string::basic_string[abi:ne180100]<0>(v101, "row_alignment_in_bytes");
  uint64_t v29 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v101);
  uint64_t v30 = (const void *)MIL::IRValue::AsTensor(v29);
  long long v31 = (MIL::MILContext *)MIL::IRValue::GetScalar<unsigned long long>(v30);
  if ((v101[23] & 0x80000000) != 0) {
    operator delete(*(void **)v101);
  }
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 88))(v9);
  BOOL v34 = v32 == 15 || v32 == 10 || v32 == 4;
  if (v34 && (unint64_t)v31 <= 1)
  {
    uint64_t v63 = __cxa_allocate_exception(0x48uLL);
    uint64_t v64 = a2[1];
    *(void *)&long long v93 = *a2;
    *((void *)&v93 + 1) = v64;
    if (v64) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v90, (unint64_t)v31);
    uint64_t v65 = std::string::insert(&v90, 0, "Row_alignment_in_bytes is ");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    *(void *)&v101[16] = *((void *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)int v101 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    unint64_t v67 = std::string::append((std::string *)v101, ", it needs to have a minimum value equal to the natural alignment 2 of the input datatype");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    std::string::size_type v92 = v67->__r_.__value_.__r.__words[2];
    long long v91 = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v63, &v93, (uint64_t)&v91, 315);
  }
  BOOL v36 = v32 == 16 || v32 == 11 || v32 == 5;
  if (v36 && (unint64_t)v31 <= 3)
  {
    uint64_t v69 = __cxa_allocate_exception(0x48uLL);
    uint64_t v70 = a2[1];
    *(void *)&long long v89 = *a2;
    *((void *)&v89 + 1) = v70;
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v90, (unint64_t)v31);
    uint64_t v71 = std::string::insert(&v90, 0, "Row_alignment_in_bytes is ");
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    *(void *)&v101[16] = *((void *)&v71->__r_.__value_.__l + 2);
    *(_OWORD *)int v101 = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    uint64_t v73 = std::string::append((std::string *)v101, ", it needs to have a minimum value equal to the natural alignment 4 of the input datatype");
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    std::string::size_type v88 = v73->__r_.__value_.__r.__words[2];
    long long v87 = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v69, &v89, (uint64_t)&v87, 315);
  }
  uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.u32[0] != 1)
  {
    uint64_t v75 = __cxa_allocate_exception(0x48uLL);
    uint64_t v76 = a2[1];
    *(void *)&long long v86 = *a2;
    *((void *)&v86 + 1) = v76;
    if (v76) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v90, (unint64_t)v31);
    uint64_t v77 = std::string::insert(&v90, 0, "Row_alignment_in_bytes is ");
    long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    *(void *)&v101[16] = *((void *)&v77->__r_.__value_.__l + 2);
    *(_OWORD *)int v101 = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    BOOL v79 = std::string::append((std::string *)v101, ", it needs to be a power-of-2.");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    std::string::size_type v85 = v79->__r_.__value_.__r.__words[2];
    long long v84 = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v75, &v86, (uint64_t)&v84, 315);
  }
  Uuint64_t Int64Scalar = MIL::IRConstantProperty::MakeUInt64Scalar(*a1, v31);
LABEL_55:
  uint64_t v41 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v11 + 96))(v11);
  if (*(void *)(v41 + 8) == *(void *)v41) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v42 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v41);
  unint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 48))(v42);
  std::vector<MIL::IRProperty const*>::vector(&v90, v43);
  std::string::basic_string[abi:ne180100]<0>(v101, "interleave_factors");
  uint64_t v44 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v101);
  uint64_t v45 = v44;
  if ((v101[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v101);
    if (v45) {
      goto LABEL_58;
    }
  }
  else if (v44)
  {
LABEL_58:
    std::string::basic_string[abi:ne180100]<0>(v101, "interleave_factors");
    unint64_t v46 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v101);
    uint64_t v47 = (void *)MIL::IRValue::AsTensor(v46);
    std::string __p = (void *)MIL::IRTensorValue::GetDataView<unsigned char>(v47);
    uint64_t v82 = v48;
    if ((v101[23] & 0x80000000) != 0) {
      operator delete(*(void **)v101);
    }
    if (v90.__r_.__value_.__l.__size_ != v90.__r_.__value_.__r.__words[0])
    {
      unint64_t v49 = 0;
      do
      {
        uint64_t v50 = *a1;
        uint64_t v51 = (unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&__p, v49);
        uint64_t UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(v50, (MIL::MILContext *)*v51);
        *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v49++) = UInt8Scalar;
      }
      while (v49 < (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_68;
  }
  if (v90.__r_.__value_.__l.__size_ != v90.__r_.__value_.__r.__words[0])
  {
    unint64_t v53 = 0;
    do
    {
      uint64_t v54 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v53++) = v54;
    }
    while (v53 < (uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_68:
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  std::string __p = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v55, *(void *)(v55 + 8), (uint64_t)(*(void *)(v55 + 8) - *(void *)v55) >> 3);
  unint64_t v56 = *a1;
  int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 88))(v9);
  memset(v101, 0, sizeof(v101));
  int v102 = 1065353216;
  if (v12) {
    uint64_t v58 = MIL::IRTensorBufferValueType::MakeWithShape(v56, v57, (uint64_t)&__p, (uint64_t)&v94, (uint64_t)&v90, (uint64_t *)v101);
  }
  else {
    uint64_t v58 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(v56, v57, (uint64_t)&__p, UInt64Scalar, (uint64_t)&v90, (uint64_t *)v101);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v59 = (uint64_t *)operator new(8uLL);
  *a4 = v59;
  *v59++ = v58;
  a4[1] = v59;
  a4[2] = v59;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v101);
  if (__p)
  {
    uint64_t v82 = __p;
    operator delete(__p);
  }
  if (v90.__r_.__value_.__r.__words[0])
  {
    v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
}

void sub_20F4F7418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v50 - 217) < 0) {
    operator delete(*(void **)(v50 - 240));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (v49) {
    __cxa_free_exception(v48);
  }
  if (a45) {
    operator delete(a45);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::IRProperty const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<MIL::IRProperty const*>::__append((void **)a1, a2 - v2);
  }
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, void **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(this[1].__r_.__value_.__r.__words, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_20F4F7784(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRTypedArgument>>&,0>(void *a1, char *a2, void **a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  v5 += 3;
  v5[2] = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(v5, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_20F4F77E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_20F4F7868(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F4F7AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F4F7B60(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(this[1].__r_.__value_.__r.__words, *((void **)a2 + 3), *((void **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  return this;
}

void sub_20F4F7BE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<MIL::IRTypedArgument>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_20F4F7C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F4F7EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F4F7F64(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<MIL::IRProperty const*>::__append(void **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    float v16 = &v14[8 * a2];
    BOOL v18 = (char *)*a1;
    float v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      float v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void MIL::Operators::Common::Shared::ValidateTopkInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 96))(a1);
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  long long v74 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v74, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  if (a3 <= 0 && a3 != -1)
  {
    uint64_t v11 = (std::__shared_weak_count *)a4[1];
    uint64_t v72 = *a4;
    uint64_t v73 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v68, a3);
    unint64_t v12 = std::string::insert(&v68, 0, "Provided k (");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v69, ") is invalid for TopK.");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v71 = v14->__r_.__value_.__r.__words[2];
    long long v70 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v72, 315, &v70);
    if (SHIBYTE(v71) < 0) {
      operator delete((void *)v70);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    goto LABEL_81;
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a5);
    goto LABEL_81;
  }
  uint64_t v16 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 96))(a1);
  memset(&v69, 0, sizeof(v69));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v69, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3);
  int v17 = a2;
  if (a2 < 0) {
    int v17 = MIL::IRTensorValueType::Rank(a1) + a2;
  }
  uint64_t v18 = MIL::IRTensorValueType::Rank(a1);
  if (v17 < 0 || v18 <= v17)
  {
    BOOL v34 = (std::__shared_weak_count *)a4[1];
    uint64_t v66 = *a4;
    unint64_t v67 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v59, a2);
    uint64_t v35 = std::string::insert(&v59, 0, "Provided axis (");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint8x8_t v37 = std::string::append(&v60, ") is not within range [-");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    uint64_t v39 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v58, v39);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v40 = &v58;
    }
    else {
      uint64_t v40 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
    }
    uint64_t v42 = std::string::append(&v61, (const std::string::value_type *)v40, size);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    uint64_t v44 = std::string::append(&v62, ", ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    uint64_t v46 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v57, v46 - 1);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v47 = &v57;
    }
    else {
      uint64_t v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v57.__r_.__value_.__l.__size_;
    }
    int v49 = std::string::append(&v63, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    uint64_t v51 = std::string::append(&v68, "] for TopK");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v64 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v66, 315, v64);
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = v67;
    if (!v67) {
      goto LABEL_79;
    }
LABEL_77:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    goto LABEL_79;
  }
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v69.__r_.__value_.__r.__words[0] + 8 * v17) + 16))(*(void *)(v69.__r_.__value_.__r.__words[0] + 8 * v17));
  if (a3 != -1)
  {
    uint64_t v20 = v19;
    if (v19)
    {
      if ((*(int (**)(uint64_t))(*(void *)v19 + 48))(v19) < a3)
      {
        size_t v21 = (std::__shared_weak_count *)a4[1];
        uint64_t v55 = *a4;
        unint64_t v56 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::to_string(&v61, a3);
        int v22 = std::string::insert(&v61, 0, "Provided k (");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        unint64_t v24 = std::string::append(&v62, ") exceed maximum dimension size (");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        unint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
        std::to_string(&v60, v26);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = &v60;
        }
        else {
          uint64_t v27 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v60.__r_.__value_.__l.__size_;
        }
        uint64_t v29 = std::string::append(&v63, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        long long v31 = std::string::append(&v68, ") for TopK");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        std::string::size_type v54 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a5, &v55, 315, __p);
        if (SHIBYTE(v54) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        uint64_t v33 = v56;
        if (!v56) {
          goto LABEL_79;
        }
        goto LABEL_77;
      }
    }
  }
  MIL::ValidationResult::ValidationResult(a5);
LABEL_79:
  if (v69.__r_.__value_.__r.__words[0])
  {
    v69.__r_.__value_.__l.__size_ = v69.__r_.__value_.__r.__words[0];
    operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_81:
  if (v74)
  {
    uint64_t v75 = v74;
    operator delete(v74);
  }
}

void sub_20F4F86DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 169) < 0) {
    operator delete(*(void **)(v52 - 192));
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::string::size_type v54 = *(void **)(v52 - 160);
  if (v54)
  {
    *(void *)(v52 - 152) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v52 - 88);
  if (v55)
  {
    *(void *)(v52 - 80) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceTopkCommon(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v39, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v39);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(v39, "k");
  Singleuint64_t Value = MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v39);
  uint64_t v10 = MIL::IRValue::TryGetScalar<int>(SingleValue);
  uint64_t v11 = (int *)v10;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v11) {
      goto LABEL_5;
    }
  }
  else if (v10)
  {
LABEL_5:
    int v12 = *v11;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "k");
  uint64_t v13 = MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v39);
  uint64_t v14 = MIL::IRValue::TryGetScalar<short>(v13);
  long long v15 = (__int16 *)v14;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v15) {
      goto LABEL_9;
    }
  }
  else if (v14)
  {
LABEL_9:
    int v12 = *v15;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "k");
  uint64_t v16 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v39);
  int v12 = MIL::IRValue::GetScalar<signed char>(v16);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(v39, "axis");
  int v17 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v39);
  signed int v18 = MIL::IRValue::GetScalar<int>(v17);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "return_indices");
  uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  uint64_t v20 = v19;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v20)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(v39, "return_indices");
      size_t v21 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v39);
      int v22 = MIL::IRValue::GetScalar<BOOL>(v21);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
LABEL_21:
      int v23 = MIL::IRTensorValueType::Rank(v7);
      uint64_t v24 = *a2;
      long long v25 = (std::__shared_weak_count *)a2[1];
      v38[0] = v24;
      v38[1] = (uint64_t)v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Operators::Common::Shared::ValidateTopkInputs(v7, v18, v12, v38, (MIL::ValidationResult *)v39);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v39))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v36, (uint64_t)v39);
        v36[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
        int v37 = v41;
        MIL::ValidationError::ValidationError(exception, v36);
      }
      memset(&__p, 0, sizeof(__p));
      std::vector<std::string const*>::reserve((void **)&__p.__r_.__value_.__l.__data_, (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
      uint64_t v26 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v12);
      if (v12 == -1) {
        uint64_t v26 = *(void *)(*(void *)v8 + 8 * v18);
      }
      MIL::ValueTypeInferenceUtils::GetTopkOutShape(a1, (char **)v8, v18, v26, v23, &v34);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v34;
      if (!v22) {
        MIL::IRTensorValueType::MakeWithShape();
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "output_indices_dtype");
      uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v34);
      std::string::size_type v28 = v27;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v34.__r_.__value_.__l.__data_);
        if (!v28) {
          goto LABEL_39;
        }
      }
      else if (!v27)
      {
        goto LABEL_39;
      }
      std::string::basic_string[abi:ne180100]<0>(v32, "output_indices_dtype");
      uint64_t v29 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v32);
      long long v30 = (const void *)MIL::IRValue::AsTensor(v29);
      MIL::IRValue::GetScalar<std::string>(v30, &v34);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      MIL::StringToIRDataType((const void **)&v34.__r_.__value_.__l.__data_, 0);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
LABEL_39:
      memset(&v34, 0, sizeof(v34));
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  else if (v19)
  {
    goto LABEL_17;
  }
  int v22 = 1;
  goto LABEL_21;
}

void sub_20F4F8DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a26);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v26 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidatePReLU(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  BOOL v6 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "x");
  std::string::basic_string[abi:ne180100]<0>(&v7, "alpha");
  MIL::Validation::VerifyDimSizeIsNumChannels(ParameterType, v6, (uint64_t)v9, this, 1, (MIL::ValidationResult *)__p);
  if (v8 < 0) {
    operator delete(v7);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if ((*((uint64_t (**)(void **))__p[0] + 2))(__p))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    MIL::Validation::VerifyOutputShapeMatchesInput(this, a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
    *(void *)a2 = &unk_26C25DB50;
    *((_DWORD *)a2 + 12) = v13;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  }
}

void sub_20F4F907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSoftplusParametric(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string v18[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = 0;
  v18[0] = "alpha";
  v18[1] = "beta";
  do
  {
    uint64_t v7 = (char *)v18[v6];
    std::string::basic_string[abi:ne180100]<0>(&v13, v7);
    char v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    std::string::basic_string[abi:ne180100]<0>(v11, "x");
    std::string::basic_string[abi:ne180100]<0>(&v9, v7);
    MIL::Validation::VerifyDimSizeIsNumChannels(ParameterType, v8, (uint64_t)v11, this, 1, (MIL::ValidationResult *)__p);
    if (v10 < 0) {
      operator delete(v9);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (((*((uint64_t (**)(void **))__p[0] + 2))(__p) & 1) == 0)
    {
      MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
      *(void *)a2 = &unk_26C25DB50;
      *(_DWORD *)(a2 + 48) = v17;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
      return;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    ++v6;
  }
  while (v6 != 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  MIL::Validation::VerifyOutputShapeMatchesInput(this, (MIL::ValidationResult *)a2);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F4F92E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void MIL::Operators::Common::ios15::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4F9BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  std::string v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F4F9F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4FA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 128));
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  unint64_t v53 = *(void **)(v51 - 168);
  if (v53)
  {
    *(void *)(v51 - 160) = v53;
    operator delete(v53);
  }
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4FB960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v61 - 128));
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  std::string v63 = *(void **)(v61 - 168);
  if (v63)
  {
    *(void *)(v61 - 160) = v63;
    operator delete(v63);
  }
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ClampedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make();
}

void sub_20F4FBE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LinearActivation::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make();
}

void sub_20F4FBF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScaledTanh::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make();
}

void sub_20F4FBFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SigmoidHard::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make();
}

void sub_20F4FC0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ELU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make();
}

void sub_20F4FC154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LeakyReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make();
}

void sub_20F4FC208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ThresholdedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make();
}

void sub_20F4FC2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ERF::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReLU6::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sigmoid::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SiLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Softplus::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Softsign::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make();
}

void sub_20F4FC7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::GeLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4FD2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a47);
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 8))(a40);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  int v49 = *(void **)(v47 - 112);
  if (v49)
  {
    *(void *)(v47 - 104) = v49;
    operator delete(v49);
  }
  long long v50 = *(void **)(v47 - 248);
  if (v50)
  {
    *(void *)(v47 - 240) = v50;
    operator delete(v50);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a41, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::PReLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4FE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a56);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  std::string v58 = *(void **)(v56 - 128);
  if (v58)
  {
    *(void *)(v56 - 120) = v58;
    operator delete(v58);
  }
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Softmax::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F4FF2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a51);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  unint64_t v53 = *(void **)(v51 - 136);
  if (v53)
  {
    *(void *)(v51 - 128) = v53;
    operator delete(v53);
  }
  std::string::size_type v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(void *)(v51 - 88) = v54;
    operator delete(v54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

void sub_20F4FF698()
{
}

void MIL::Operators::Common::ios15::SoftplusParametric::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F500648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,void **a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x208]);
  if (a62) {
    (*(void (**)(uint64_t))(*(void *)a62 + 8))(a62);
  }
  if (a61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a61);
  }
  std::string::size_type v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(void *)(v69 - 120) = v71;
    operator delete(v71);
  }
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F500C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F500CF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F500D44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  unint64_t v2 = *result;
  *unint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = v2;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x21056C700](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v4 = a2;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x21056C700](a2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<MIL::IRParameter>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F50138C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F501428(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F501478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F5014F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F501590(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F5015E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C25E4A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E4A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConv(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConvTranspose(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConv(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v38, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v38);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "weight");
  uint64_t v7 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v38);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "strides");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v38);
  uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "dilations");
  uint64_t v11 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v38);
  char v12 = (uint64_t *)MIL::IRValue::AsTensor(v11);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pad_type");
  char v13 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  MIL::IRValue::GetScalar<std::string>(v13, &v38);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  long long v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  long long v15 = (uint64_t *)MIL::IRValue::AsTensor(v14);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  char v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  int v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
  uint64_t Data = (const void *)MIL::IRTensorValue::GetDataView<int>(v10);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v37 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(__p, Data, (uint64_t)Data + 4 * v19, (4 * v19) >> 2);
  uint64_t v20 = (const void *)MIL::IRTensorValue::GetDataView<int>(v12);
  memset(v35, 0, sizeof(v35));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v35, v20, (uint64_t)v20 + 4 * v21, (4 * v21) >> 2);
  int v22 = (const void *)MIL::IRTensorValue::GetDataView<int>(v15);
  memset(v34, 0, sizeof(v34));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v34, v22, (uint64_t)v22 + 4 * v23, (4 * v23) >> 2);
  uint64_t v24 = *a1;
  MIL::ValueTypeInferenceUtils::SliceShape(v16, 2uLL, (v16[1] - *v16) >> 3, &v29);
  MIL::ValueTypeInferenceUtils::SliceShape(v17, 2uLL, (v17[1] - *v17) >> 3, v28);
  MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(v24, &v29, (uint64_t *)v28, __p, v35, (int **)&v38, (uint64_t)v34, 0, &v32);
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v29)
  {
    long long v30 = v29;
    operator delete(v29);
  }
  if (v16[1] != *v16 && v17[1] != *v17)
  {
    uint64_t v25 = *(void *)*v16;
    uint64_t v26 = *(void *)*v17;
    uint64_t v27 = operator new(0x10uLL);
    long long v30 = v27 + 2;
    long long v31 = v27 + 2;
    *uint64_t v27 = v25;
    v27[1] = v26;
    uint64_t v29 = v27;
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v29, (uint64_t)(v27 + 2), (char *)v32, v33, (v33 - (unsigned char *)v32) >> 3);
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
}

void sub_20F501C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 81) < 0) {
    operator delete(*(void **)(v30 - 104));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConvTranspose(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v85, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v85);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  std::string::basic_string[abi:ne180100]<0>(&v85, "output_shape");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v85);
  uint64_t v8 = v7;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v85.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_5:
      std::string::basic_string[abi:ne180100]<0>(&v85, "output_shape");
      Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v85);
      uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v10);
      unint64_t v13 = v12;
      memset(&v85, 0, sizeof(v85));
      std::vector<std::string const*>::reserve((void **)&v85.__r_.__value_.__l.__data_, v12);
      if (v13)
      {
        long long v14 = &Data[v13];
        do
        {
          uint64_t v15 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
          uint64_t v16 = v15;
          std::string::size_type size = v85.__r_.__value_.__l.__size_;
          if (v85.__r_.__value_.__l.__size_ >= v85.__r_.__value_.__r.__words[2])
          {
            uint64_t v19 = (uint64_t)(v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v19 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = (uint64_t)(v85.__r_.__value_.__r.__words[2] - v85.__r_.__value_.__r.__words[0]) >> 2;
            if (v20 <= v19 + 1) {
              unint64_t v20 = v19 + 1;
            }
            if (v85.__r_.__value_.__r.__words[2] - v85.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v85.__r_.__value_.__r.__words[2], v21);
            }
            else {
              int v22 = 0;
            }
            uint64_t v23 = (uint64_t *)&v22[8 * v19];
            uint64_t *v23 = v16;
            std::string::size_type v18 = (std::string::size_type)(v23 + 1);
            uint64_t v24 = (char *)v85.__r_.__value_.__l.__size_;
            std::string::size_type v25 = v85.__r_.__value_.__r.__words[0];
            if (v85.__r_.__value_.__l.__size_ != v85.__r_.__value_.__r.__words[0])
            {
              do
              {
                uint64_t v26 = *((void *)v24 - 1);
                v24 -= 8;
                *--uint64_t v23 = v26;
              }
              while (v24 != (char *)v25);
              uint64_t v24 = (char *)v85.__r_.__value_.__r.__words[0];
            }
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
            v85.__r_.__value_.__l.__size_ = v18;
            v85.__r_.__value_.__r.__words[2] = (std::string::size_type)&v22[8 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *(void *)v85.__r_.__value_.__l.__size_ = v15;
            std::string::size_type v18 = size + 8;
          }
          v85.__r_.__value_.__l.__size_ = v18;
          ++Data;
        }
        while (Data != v14);
      }
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  else if (v7)
  {
    goto LABEL_5;
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "weight");
  uint64_t v27 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v85);
  uint64_t v28 = MIL::IRValueType::AsTensorType(v27);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "strides");
  uint64_t v29 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v85);
  uint64_t v30 = (uint64_t *)MIL::IRValue::AsTensor(v29);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "dilations");
  long long v31 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v85);
  long long v32 = (uint64_t *)MIL::IRValue::AsTensor(v31);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "pad_type");
  char v33 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v83);
  MIL::IRValue::GetScalar<std::string>(v33, &v85);
  if (SHIBYTE(v84) < 0) {
    operator delete(v83[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "pad");
  std::string v34 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v83);
  uint64_t v35 = (uint64_t *)MIL::IRValue::AsTensor(v34);
  if (SHIBYTE(v84) < 0) {
    operator delete(v83[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "groups");
  long long v36 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v83);
  int v37 = MIL::IRValue::GetScalar<int>(v36);
  if (SHIBYTE(v84) < 0) {
    operator delete(v83[0]);
  }
  std::string v38 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v39 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 96))(v28);
  char v40 = (const void *)MIL::IRTensorValue::GetDataView<int>(v30);
  v83[0] = 0;
  v83[1] = 0;
  uint64_t v84 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v83, v40, (uint64_t)v40 + 4 * v41, (4 * v41) >> 2);
  uint64_t v42 = (const void *)MIL::IRTensorValue::GetDataView<int>(v32);
  memset(v82, 0, sizeof(v82));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v82, v42, (uint64_t)v42 + 4 * v43, (4 * v43) >> 2);
  uint64_t v44 = (const void *)MIL::IRTensorValue::GetDataView<int>(v35);
  memset(v81, 0, sizeof(v81));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v81, v44, (uint64_t)v44 + 4 * v45, (4 * v45) >> 2);
  if (v38[1] == *v38) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v46 = *(void *)*v38;
  uint64_t v47 = operator new(8uLL);
  std::string __p = v47;
  void *v47 = v46;
  __dst = v47 + 1;
  unint64_t v80 = (unint64_t)(v47 + 1);
  uint64_t v48 = (*(uint64_t (**)(void))(**(void **)(*v39 + 8) + 24))(*(void *)(*v39 + 8));
  uint64_t v49 = v48;
  if (v48)
  {
    long long v50 = (char *)__dst;
    if ((unint64_t)__dst < v80)
    {
      *(void *)__dst = v48;
      uint64_t v51 = v50 + 8;
      goto LABEL_72;
    }
    int64_t v58 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v58 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v59 = (uint64_t)(v80 - (void)__p) >> 2;
    if (v59 <= v58 + 1) {
      unint64_t v59 = v58 + 1;
    }
    if (v80 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v59;
    }
    if (v60) {
      uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v60);
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v66 = &v61[8 * v58];
    unint64_t v67 = &v61[8 * v60];
    *(void *)uint64_t v66 = v49;
    uint64_t v51 = v66 + 8;
    uint64_t v69 = (char *)__p;
    std::string v68 = (char *)__dst;
    if (__dst == __p) {
      goto LABEL_70;
    }
    do
    {
      uint64_t v70 = *((void *)v68 - 1);
      v68 -= 8;
      *((void *)v66 - 1) = v70;
      v66 -= 8;
    }
    while (v68 != v69);
  }
  else
  {
    uint64_t v52 = *a1;
    uint64_t v53 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v39 + 8));
    uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
    uint64_t v55 = MIL::IRConstantDimension::Make(v52, (MIL::MILContext *)(v54 * v37));
    uint64_t v56 = v55;
    std::string v57 = (char *)__dst;
    if ((unint64_t)__dst < v80)
    {
      *(void *)__dst = v55;
      uint64_t v51 = v57 + 8;
      goto LABEL_72;
    }
    int64_t v62 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v62 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v63 = (uint64_t)(v80 - (void)__p) >> 2;
    if (v63 <= v62 + 1) {
      unint64_t v63 = v62 + 1;
    }
    if (v80 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v63;
    }
    if (v64) {
      std::string::size_type v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v64);
    }
    else {
      std::string::size_type v65 = 0;
    }
    uint64_t v66 = &v65[8 * v62];
    unint64_t v67 = &v65[8 * v64];
    *(void *)uint64_t v66 = v56;
    uint64_t v51 = v66 + 8;
    std::string::size_type v71 = (char *)__p;
    std::string v68 = (char *)__dst;
    if (__dst == __p)
    {
LABEL_70:
      std::string __p = v66;
      __dst = v51;
      unint64_t v80 = (unint64_t)v67;
      if (v68) {
        operator delete(v68);
      }
LABEL_72:
      __dst = v51;
      uint64_t v73 = *a1;
      MIL::ValueTypeInferenceUtils::SliceShape(v38, 2uLL, (v38[1] - *v38) >> 3, v75);
      MIL::ValueTypeInferenceUtils::SliceShape(v39, 2uLL, (v39[1] - *v39) >> 3, v74);
      MIL::ValueTypeInferenceUtils::ConvTransposeSpatialDimensionsOutShape(v73, v75, (uint64_t *)v74, v83, v82, (uint64_t)&v85, v81, &v76);
      if (v74[0])
      {
        v74[1] = v74[0];
        operator delete(v74[0]);
      }
      if (v75[0])
      {
        v75[1] = v75[0];
        operator delete(v75[0]);
      }
      std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)__dst, (char *)v76, v77, (v77 - (unsigned char *)v76) >> 3);
      MIL::IRTensorValueType::MakeWithShape();
    }
    do
    {
      uint64_t v72 = *((void *)v68 - 1);
      v68 -= 8;
      *((void *)v66 - 1) = v72;
      v66 -= 8;
    }
    while (v68 != v71);
  }
  std::string v68 = (char *)__p;
  goto LABEL_70;
}

void sub_20F5024F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  uint64_t v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(void *)(v26 - 128) = v28;
    operator delete(v28);
  }
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::Conv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F50449C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x3E8]);
  unint64_t v3 = STACK[0x388];
  STACK[0x388] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3E0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ConvTranspose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F506E70(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x3F8]);
  unint64_t v3 = STACK[0x398];
  STACK[0x398] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x440];
  if (STACK[0x440])
  {
    STACK[0x448] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3B0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3F0], 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F507954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F5079F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F507A40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F507ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F507B58(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F507BA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F507C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F507CC0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F507D10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F507D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F507E28(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F507E78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F507EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F507F90(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F507FE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E5B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E5B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__invoke_void_return_wrapper<std::vector<MIL::IRValueType const*>,false>::__call[abi:ne180100]<std::vector<MIL::IRValueType const*> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&>((void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<std::vector<MIL::IRValueType const*>,false>::__call[abi:ne180100]<std::vector<MIL::IRValueType const*> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&>(void (**a1)(uint64_t, long long *, uint64_t, uint64_t, uint64_t), uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a1;
  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v6(a2, &v7, a4, a5, a6);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_20F508138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F508260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  long long v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *long long v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F5082FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F50834C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v13 = 0;
  long long v14 = 0;
  unint64_t v15 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve(&v13, a3[3]);
  for (unsigned __int8 i = (long long *)a3[2]; i; unsigned __int8 i = *(long long **)i)
  {
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100](&__p, i + 1);
    Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
    uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
    long long v9 = v14;
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v10 = std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(&v13, v8);
    }
    else
    {
      void *v14 = 0;
      v9[1] = 0;
      uint64_t v9[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v9, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
      uint64_t v10 = (uint64_t)(v9 + 3);
    }
    long long v14 = (void *)v10;
    uint64_t v16 = (void **)&v12;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  MIL::ValueTypeInferenceUtils::BroadcastShape(*a1, &v13, (unint64_t *)&__p);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5084D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "add");
}

void sub_20F508658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::BinaryOpHelper(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v23, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v23);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(***((void ***)v4 + 5) + 40))(**((void **)v4 + 5));
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, "y");
      uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v23);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(***((void ***)v6 + 5) + 40))(**((void **)v6 + 5));
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (v7)
        {
          std::string::basic_string[abi:ne180100]<0>(&v23, "x");
          uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v23);
          if (v8)
          {
            uint64_t v9 = *((void *)v8 + 5);
            uint64_t v11 = *(void **)v9;
            uint64_t v10 = *(atomic_ullong **)(v9 + 8);
            if (v10) {
              atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v23.__r_.__value_.__l.__data_);
            }
            std::string::basic_string[abi:ne180100]<0>(&v23, "y");
            uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v23);
            if (v12)
            {
              uint64_t v13 = (uint64_t *)*((void *)v12 + 5);
              uint64_t v15 = *v13;
              uint64_t v14 = v13[1];
              if (v14) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
              }
              if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v23.__r_.__value_.__l.__data_);
              }
              uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v11 + 32))(v11);
              int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16);
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
              if (v17 == (*(unsigned int (**)(uint64_t))(*(void *)v18 + 88))(v18))
              {
                std::string::basic_string[abi:ne180100]<0>(v22, "x");
                v22[15] = v11;
                v22[16] = v10;
                if (v10) {
                  atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
                }
                MIL::IRTypedArgument::Make();
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Datatype do not match for input tensors x and Tensor y.");
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v20, "Input Tensor y is not an IRTensor object.");
        __cxa_throw(v20, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v19, "Input Tensor x is not an IRTensor object.");
    __cxa_throw(v19, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F509E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  __cxa_free_exception(v60);
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a60);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void sub_20F50A378()
{
  if (*(char *)(v0 - 185) < 0) {
    operator delete(*(void **)(v0 - 208));
  }
  JUMPOUT(0x20F50A370);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "floor_div");
}

void sub_20F50A56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "maximum");
}

void sub_20F50A6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "minimum");
}

void sub_20F50A884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mul");
}

void sub_20F50AA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pow");
}

void sub_20F50AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "real_div");
}

void sub_20F50AD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sub");
}

void sub_20F50AEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod(uint64_t a1, void *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mod");
}

void sub_20F50B040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void **a20)
{
  *(void *)(v21 + 8) = v22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 56);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50B63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void anonymous namespace'::BinaryOpBoolOutputHelper(MIL::IRConstantDimension **a1, void *a2, MIL *a3, _DWORD *a4)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = (*(uint64_t (**)(void))(***((void ***)v8 + 5) + 40))(**((void **)v8 + 5));
  if (v94 < 0) {
    operator delete(__p[0]);
  }
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input Tensor x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v11 = (*(uint64_t (**)(void))(***((void ***)v10 + 5) + 40))(**((void **)v10 + 5));
  if (v94 < 0) {
    operator delete(__p[0]);
  }
  if (!v11)
  {
    unint64_t v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v59, "Input Tensor y is not an IRTensor object.");
    __cxa_throw(v59, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v13 = (uint64_t *)*((void *)v12 + 5);
  uint64_t v15 = *v13;
  uint64_t v14 = (std::__shared_weak_count *)v13[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v94 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v17 = (uint64_t *)*((void *)v16 + 5);
  uint64_t v19 = *v17;
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v94 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 88))(v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
  if (v21 == (*(unsigned int (**)(uint64_t))(*(void *)v22 + 88))(v22))
  {
    if ((*(unsigned int (**)(MIL *))(*(void *)a3 + 88))(a3) == 2)
    {
      switch(v21)
      {
        case 2:
          uint64_t v66 = v15;
          unint64_t v67 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v66, (uint64_t)__p);
          if (v67) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v67);
          }
          uint64_t v64 = v19;
          std::string::size_type v65 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v64, (uint64_t)v90);
          if (v65) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
          }
          if (*((char *)a4 + 23) < 0)
          {
            uint64_t v34 = *((void *)a4 + 1);
            if (v34 != 10)
            {
              if (v34 != 11) {
                goto LABEL_92;
              }
              a4 = *(_DWORD **)a4;
              goto LABEL_84;
            }
            BOOL v39 = **(void **)a4 == 0x5F6C616369676F6CLL && *(_WORD *)(*(void *)a4 + 8) == 29295;
          }
          else
          {
            int v24 = *((unsigned __int8 *)a4 + 23);
            if (v24 != 10)
            {
              if (v24 != 11) {
                goto LABEL_92;
              }
LABEL_84:
              BOOL v35 = *(void *)a4 == 0x5F6C616369676F6CLL && *(void *)((char *)a4 + 3) == 0x646E615F6C616369;
              long long v36 = MIL::MathOps::LogicalAndOp;
              if (!v35)
              {
                BOOL v37 = *(void *)a4 == 0x5F6C616369676F6CLL && *(void *)((char *)a4 + 3) == 0x726F785F6C616369;
                long long v36 = MIL::MathOps::LogicalXorOp;
                if (!v37)
                {
LABEL_92:
                  std::string v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v38, "Invalid OpName specified");
                  v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                  __cxa_throw(v38, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
                }
              }
LABEL_101:
              uint64_t v99 = &unk_26C25EA28;
              int v100 = v36;
              int v101 = &v99;
              MIL::GetTensorShapeWithDimensionsAllKnown(a3, v23, (uint64_t)&v86);
              std::__function::__value_func<unsigned char ()(unsigned char,unsigned char)>::__value_func[abi:ne180100]((uint64_t)v95, (uint64_t)&v99);
              uint64_t v61 = 0;
              int64_t v62 = 0;
              uint64_t v63 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v61, v86, v87, (v87 - (uint64_t)v86) >> 3);
              MIL::ValueInference::BinaryOp<BOOL,BOOL>(__p, v90, (uint64_t)v95, &v61, (uint64_t)v85);
              if (v61)
              {
                int64_t v62 = v61;
                operator delete(v61);
              }
              std::__function::__value_func<unsigned char ()(unsigned char,unsigned char)>::~__value_func[abi:ne180100](v95);
              MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v85, *a1);
            }
            BOOL v39 = *(void *)a4 == 0x5F6C616369676F6CLL && *((_WORD *)a4 + 4) == 29295;
          }
          long long v36 = MIL::MathOps::LogicalOrOp;
          if (!v39) {
            goto LABEL_92;
          }
          goto LABEL_101;
        case 4:
          uint64_t v73 = v15;
          long long v74 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v73, (uint64_t)__p);
          if (v74) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v74);
          }
          uint64_t v71 = v19;
          uint64_t v72 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v71, (uint64_t)v90);
          if (v72) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v72);
          }
          if ((*((char *)a4 + 23) & 0x80000000) == 0)
          {
            switch(*((unsigned char *)a4 + 23))
            {
              case 4:
                int v30 = *a4;
                goto LABEL_77;
              case 5:
                BOOL v49 = *a4 == 1635086693 && *((unsigned char *)a4 + 4) == 108;
                goto LABEL_174;
              case 7:
                BOOL v51 = *a4 == 1634038375 && *(_DWORD *)((char *)a4 + 3) == 1919251553;
                goto LABEL_210;
              case 9:
                goto LABEL_219;
              case 0xA:
                BOOL v42 = *(void *)a4 == 0x7571655F7373656CLL && *((_WORD *)a4 + 4) == 27745;
                goto LABEL_164;
              case 0xD:
                BOOL v45 = *(void *)a4 == 0x5F72657461657267 && *(void *)((char *)a4 + 5) == 0x6C617571655F7265;
                goto LABEL_189;
              default:
                goto LABEL_223;
            }
          }
          switch(*((void *)a4 + 1))
          {
            case 4:
              int v30 = **(_DWORD **)a4;
LABEL_77:
              char v33 = MIL::MathOps::LessOp<MIL::Fp16>;
              if (v30 == 1936942444) {
                goto LABEL_78;
              }
              goto LABEL_223;
            case 5:
              BOOL v49 = **(_DWORD **)a4 == 1635086693 && *(unsigned char *)(*(void *)a4 + 4) == 108;
LABEL_174:
              char v33 = MIL::MathOps::EqualOp<MIL::Fp16>;
              if (!v49) {
                goto LABEL_223;
              }
              goto LABEL_78;
            case 7:
              BOOL v51 = **(_DWORD **)a4 == 1634038375 && *(_DWORD *)(*(void *)a4 + 3) == 1919251553;
LABEL_210:
              char v33 = MIL::MathOps::GreaterOp<MIL::Fp16>;
              if (!v51) {
                goto LABEL_223;
              }
              goto LABEL_78;
            case 9:
              a4 = *(_DWORD **)a4;
LABEL_219:
              BOOL v56 = *(void *)a4 == 0x617571655F746F6ELL && *((unsigned char *)a4 + 8) == 108;
              char v33 = MIL::MathOps::NotEqualOp<MIL::Fp16>;
              if (!v56) {
                goto LABEL_223;
              }
              goto LABEL_78;
            case 0xALL:
              BOOL v42 = **(void **)a4 == 0x7571655F7373656CLL && *(_WORD *)(*(void *)a4 + 8) == 27745;
LABEL_164:
              char v33 = MIL::MathOps::LessEqualOp<MIL::Fp16>;
              if (!v42) {
                goto LABEL_223;
              }
              goto LABEL_78;
            case 0xDLL:
              BOOL v45 = **(void **)a4 == 0x5F72657461657267 && *(void *)(*(void *)a4 + 5) == 0x6C617571655F7265;
LABEL_189:
              char v33 = MIL::MathOps::GreaterEqualOp<MIL::Fp16>;
              if (!v45) {
                goto LABEL_223;
              }
LABEL_78:
              uint64_t v99 = &unk_26C25E978;
              int v100 = v33;
              int v101 = &v99;
              MIL::GetTensorShapeWithDimensionsAllKnown(a3, v29, (uint64_t)&v86);
              std::__function::__value_func<unsigned char ()(MIL::Fp16,MIL::Fp16)>::__value_func[abi:ne180100]((uint64_t)v96, (uint64_t)&v99);
              std::string v68 = 0;
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v68, v86, v87, (v87 - (uint64_t)v86) >> 3);
              MIL::ValueInference::BinaryOp<MIL::Fp16,BOOL>(__p, v90, (uint64_t)v96, &v68, (uint64_t)v85);
              if (v68)
              {
                uint64_t v69 = v68;
                operator delete(v68);
              }
              std::__function::__value_func<unsigned char ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v96);
              MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v85, *a1);
            default:
LABEL_223:
              std::string v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v57, "Invalid OpName specified");
              v57->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v57, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
        case 5:
          uint64_t v91 = v15;
          std::string::size_type v92 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v91, (uint64_t)__p);
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          uint64_t v88 = v19;
          long long v89 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v88, (uint64_t)v90);
          if (v89) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v89);
          }
          if ((*((char *)a4 + 23) & 0x80000000) == 0)
          {
            switch(*((unsigned char *)a4 + 23))
            {
              case 4:
                int v26 = *a4;
                goto LABEL_69;
              case 5:
                BOOL v46 = *a4 == 1635086693 && *((unsigned char *)a4 + 4) == 108;
                goto LABEL_159;
              case 7:
                BOOL v47 = *a4 == 1634038375 && *(_DWORD *)((char *)a4 + 3) == 1919251553;
                goto LABEL_194;
              case 9:
                goto LABEL_197;
              case 0xA:
                BOOL v40 = *(void *)a4 == 0x7571655F7373656CLL && *((_WORD *)a4 + 4) == 27745;
                goto LABEL_143;
              case 0xD:
                BOOL v43 = *(void *)a4 == 0x5F72657461657267 && *(void *)((char *)a4 + 5) == 0x6C617571655F7265;
                goto LABEL_179;
              default:
                goto LABEL_201;
            }
          }
          switch(*((void *)a4 + 1))
          {
            case 4:
              int v26 = **(_DWORD **)a4;
LABEL_69:
              long long v31 = MIL::MathOps::LessOp<float>;
              if (v26 != 1936942444) {
                goto LABEL_201;
              }
              goto LABEL_145;
            case 5:
              BOOL v46 = **(_DWORD **)a4 == 1635086693 && *(unsigned char *)(*(void *)a4 + 4) == 108;
LABEL_159:
              long long v31 = MIL::MathOps::EqualOp<float>;
              if (!v46) {
                goto LABEL_201;
              }
              goto LABEL_145;
            case 7:
              BOOL v47 = **(_DWORD **)a4 == 1634038375 && *(_DWORD *)(*(void *)a4 + 3) == 1919251553;
LABEL_194:
              long long v31 = MIL::MathOps::GreaterOp<float>;
              if (!v47) {
                goto LABEL_201;
              }
              goto LABEL_145;
            case 9:
              a4 = *(_DWORD **)a4;
LABEL_197:
              BOOL v52 = *(void *)a4 == 0x617571655F746F6ELL && *((unsigned char *)a4 + 8) == 108;
              long long v31 = MIL::MathOps::NotEqualOp<float>;
              if (!v52) {
                goto LABEL_201;
              }
              goto LABEL_145;
            case 0xALL:
              BOOL v40 = **(void **)a4 == 0x7571655F7373656CLL && *(_WORD *)(*(void *)a4 + 8) == 27745;
LABEL_143:
              long long v31 = MIL::MathOps::LessEqualOp<float>;
              if (!v40) {
                goto LABEL_201;
              }
              goto LABEL_145;
            case 0xDLL:
              BOOL v43 = **(void **)a4 == 0x5F72657461657267 && *(void *)(*(void *)a4 + 5) == 0x6C617571655F7265;
LABEL_179:
              long long v31 = MIL::MathOps::GreaterEqualOp<float>;
              if (!v43) {
                goto LABEL_201;
              }
LABEL_145:
              uint64_t v99 = &unk_26C25E818;
              int v100 = v31;
              int v101 = &v99;
              MIL::GetTensorShapeWithDimensionsAllKnown(a3, v25, (uint64_t)&v86);
              std::__function::__value_func<unsigned char ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v99);
              uint64_t v82 = 0;
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v82, v86, v87, (v87 - (uint64_t)v86) >> 3);
              MIL::ValueInference::BinaryOp<float,BOOL>(__p, v90, (uint64_t)v98, &v82, (uint64_t)v85);
              if (v82)
              {
                uint64_t v83 = v82;
                operator delete(v82);
              }
              std::__function::__value_func<unsigned char ()(float,float)>::~__value_func[abi:ne180100](v98);
              MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v85, *a1);
            default:
LABEL_201:
              uint64_t v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v53, "Invalid OpName specified");
              v53->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v53, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
        case 11:
          uint64_t v80 = v15;
          int v81 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v80, (uint64_t)__p);
          if (v81) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
          uint64_t v78 = v19;
          BOOL v79 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v78, (uint64_t)v90);
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
          if ((*((char *)a4 + 23) & 0x80000000) == 0)
          {
            switch(*((unsigned char *)a4 + 23))
            {
              case 4:
                int v28 = *a4;
                goto LABEL_73;
              case 5:
                BOOL v48 = *a4 == 1635086693 && *((unsigned char *)a4 + 4) == 108;
                goto LABEL_169;
              case 7:
                BOOL v50 = *a4 == 1634038375 && *(_DWORD *)((char *)a4 + 3) == 1919251553;
                goto LABEL_205;
              case 9:
                goto LABEL_213;
              case 0xA:
                BOOL v41 = *(void *)a4 == 0x7571655F7373656CLL && *((_WORD *)a4 + 4) == 27745;
                goto LABEL_151;
              case 0xD:
                BOOL v44 = *(void *)a4 == 0x5F72657461657267 && *(void *)((char *)a4 + 5) == 0x6C617571655F7265;
                goto LABEL_184;
              default:
                goto LABEL_217;
            }
          }
          switch(*((void *)a4 + 1))
          {
            case 4:
              int v28 = **(_DWORD **)a4;
LABEL_73:
              long long v32 = MIL::MathOps::LessOp<int>;
              if (v28 != 1936942444) {
                goto LABEL_217;
              }
              goto LABEL_153;
            case 5:
              BOOL v48 = **(_DWORD **)a4 == 1635086693 && *(unsigned char *)(*(void *)a4 + 4) == 108;
LABEL_169:
              long long v32 = MIL::MathOps::EqualOp<int>;
              if (!v48) {
                goto LABEL_217;
              }
              goto LABEL_153;
            case 7:
              BOOL v50 = **(_DWORD **)a4 == 1634038375 && *(_DWORD *)(*(void *)a4 + 3) == 1919251553;
LABEL_205:
              long long v32 = MIL::MathOps::GreaterOp<int>;
              if (!v50) {
                goto LABEL_217;
              }
              goto LABEL_153;
            case 9:
              a4 = *(_DWORD **)a4;
LABEL_213:
              BOOL v54 = *(void *)a4 == 0x617571655F746F6ELL && *((unsigned char *)a4 + 8) == 108;
              long long v32 = MIL::MathOps::NotEqualOp<int>;
              if (!v54) {
                goto LABEL_217;
              }
              goto LABEL_153;
            case 0xALL:
              BOOL v41 = **(void **)a4 == 0x7571655F7373656CLL && *(_WORD *)(*(void *)a4 + 8) == 27745;
LABEL_151:
              long long v32 = MIL::MathOps::LessEqualOp<int>;
              if (!v41) {
                goto LABEL_217;
              }
              goto LABEL_153;
            case 0xDLL:
              BOOL v44 = **(void **)a4 == 0x5F72657461657267 && *(void *)(*(void *)a4 + 5) == 0x6C617571655F7265;
LABEL_184:
              long long v32 = MIL::MathOps::GreaterEqualOp<int>;
              if (!v44) {
                goto LABEL_217;
              }
LABEL_153:
              uint64_t v99 = &unk_26C25E8C8;
              int v100 = v32;
              int v101 = &v99;
              MIL::GetTensorShapeWithDimensionsAllKnown(a3, v27, (uint64_t)&v86);
              std::__function::__value_func<unsigned char ()(int,int)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)&v99);
              uint64_t v75 = 0;
              uint64_t v76 = 0;
              uint64_t v77 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v75, v86, v87, (v87 - (uint64_t)v86) >> 3);
              MIL::ValueInference::BinaryOp<int,BOOL>(__p, v90, (uint64_t)v97, &v75, (uint64_t)v85);
              if (v75)
              {
                uint64_t v76 = v75;
                operator delete(v75);
              }
              std::__function::__value_func<unsigned char ()(int,int)>::~__value_func[abi:ne180100](v97);
              MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v85, *a1);
            default:
LABEL_217:
              uint64_t v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v55, "Invalid OpName specified");
              v55->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v55, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
        default:
          unint64_t v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v60, "Unsupported Datatype for the input IRTensor.");
          goto LABEL_232;
      }
    }
    unint64_t v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v60, "Unsupported Datatype for the output IRTensor.");
  }
  else
  {
    unint64_t v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v60, "Datatypes do not match for input tensors x and Tensor y.");
  }
LABEL_232:
  v60->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(v60, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
}

void sub_20F50CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  __cxa_free_exception(v63);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50D580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50DE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50E6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F50F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F51008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F510928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "x");
  std::string::basic_string[abi:ne180100]<0>(v8, "x");
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v8);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 5);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v9 = v7;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F5111C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a21) {
    (*(void (**)(void *))(*(void *)a21 + 8))(a21);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a42);
  _Unwind_Resume(a1);
}

float MIL::MathOps::FloorDivOp<float>(float a1, float a2)
{
  return floorf(a1 / a2);
}

uint64_t std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t MIL::MathOps::AddOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float + v3);
}

uint64_t MIL::MathOps::FloorDivOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, floorf(Float / v3));
}

uint64_t MIL::MathOps::MaximumOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v4 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  if (Float >= v4) {
    float v4 = Float;
  }
  return MIL::Fp16::FromFloat(v3, v4);
}

uint64_t MIL::MathOps::MinimumOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v4 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  if (v4 >= Float) {
    float v4 = Float;
  }
  return MIL::Fp16::FromFloat(v3, v4);
}

uint64_t MIL::MathOps::MulOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float * v3);
}

uint64_t MIL::MathOps::PowOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v8 = a1;
  __int16 v7 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v4 = powf(Float, v3);
  return MIL::Fp16::FromFloat(v5, v4);
}

uint64_t MIL::MathOps::RealDivOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float / v3);
}

uint64_t MIL::MathOps::SubOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v7 = a1;
  __int16 v6 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float - v3);
}

uint64_t MIL::MathOps::ModOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v8 = a1;
  __int16 v7 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  float v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  float v4 = fmodf(Float, v3);
  return MIL::Fp16::FromFloat(v5, v4);
}

void std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E6B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E6B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::target_type()
{
}

uint64_t std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t MIL::MathOps::AddOp<int>(int a1, int a2)
{
  return (a2 + a1);
}

uint64_t MIL::MathOps::FloorDivOp<int>(int a1, int a2)
{
  return (a1 / a2);
}

uint64_t MIL::MathOps::MaximumOp<int>(uint64_t result, int a2)
{
  if ((int)result <= a2) {
    return a2;
  }
  else {
    return result;
  }
}

uint64_t MIL::MathOps::MinimumOp<int>(uint64_t result, int a2)
{
  if (a2 >= (int)result) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t MIL::MathOps::MulOp<int>(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t MIL::MathOps::PowOp<int>(int a1, int a2)
{
  return (int)pow((double)a1, (double)a2);
}

uint64_t MIL::MathOps::RealDivOp<int>(int a1, int a2)
{
  return (a1 / a2);
}

uint64_t MIL::MathOps::SubOp<int>(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t MIL::MathOps::ModOp<int>(int a1, int a2)
{
  return (a1 % a2);
}

void std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::~__func()
{
}

void *std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E768;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E768;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::target_type()
{
}

uint64_t std::__function::__value_func<int ()(int,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL MIL::MathOps::EqualOp<float>(float a1, float a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<float>(float a1, float a2)
{
  return a1 > a2;
}

BOOL MIL::MathOps::GreaterEqualOp<float>(float a1, float a2)
{
  return a1 >= a2;
}

BOOL MIL::MathOps::LessOp<float>(float a1, float a2)
{
  return a1 < a2;
}

BOOL MIL::MathOps::LessEqualOp<float>(float a1, float a2)
{
  return a1 <= a2;
}

BOOL MIL::MathOps::NotEqualOp<float>(float a1, float a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E818;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E818;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned char ()(float,float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned char ()(float,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL MIL::MathOps::EqualOp<int>(int a1, int a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<int>(int a1, int a2)
{
  return a1 > a2;
}

BOOL MIL::MathOps::GreaterEqualOp<int>(int a1, int a2)
{
  return a1 >= a2;
}

BOOL MIL::MathOps::LessOp<int>(int a1, int a2)
{
  return a1 < a2;
}

BOOL MIL::MathOps::LessEqualOp<int>(int a1, int a2)
{
  return a1 <= a2;
}

BOOL MIL::MathOps::NotEqualOp<int>(int a1, int a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E8C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E8C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned char ()(int,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned char ()(int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL MIL::MathOps::EqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v5 = a1;
  __int16 v4 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float > MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::GreaterEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v5 = a1;
  __int16 v4 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float >= MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::LessOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v5 = a1;
  __int16 v4 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float < MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::LessEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  __int16 v5 = a1;
  __int16 v4 = a2;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float <= MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::NotEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25E978;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25E978;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned char ()(MIL::Fp16,MIL::Fp16)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned char ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25EA28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25EA28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned char ()(unsigned char,unsigned char)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned char ()(unsigned char,unsigned char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void MIL::Operators::Common::ios15::ElementwiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F513224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 256));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F51367C()
{
}

void MIL::Operators::Common::ios15::Add::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5142C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F514728()
{
}

void MIL::Operators::Common::ios15::ElementwiseBinaryBoolOutput::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F515110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v60 - 128));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ElementwiseBinaryLogical::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F515D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v58 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 248), 0);
  _Unwind_Resume(a1);
}

void sub_20F516020()
{
}

void MIL::Operators::Common::ios15::LogicalAnd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51691C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 256));
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v59 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void sub_20F516C34()
{
}

void MIL::Operators::Common::ios15::LogicalOr::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F517530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 256));
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v59 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void sub_20F517848()
{
}

void MIL::Operators::Common::ios15::LogicalXor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F518144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 256));
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v59 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void sub_20F51845C()
{
}

void MIL::Operators::Common::ios15::Equal::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F518E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Greater::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F519C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::GreaterEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51A990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Less::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51B71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LessEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51C4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::NotEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a53) {
    (*(void (**)(void *))(*(void *)a53 + 8))(a53);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::FloorDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F51E630()
{
}

void MIL::Operators::Common::ios15::Maximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F51F274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F51F6DC()
{
}

void MIL::Operators::Common::ios15::Minimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F520320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F520788()
{
}

void MIL::Operators::Common::ios15::Mul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5213CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F521834()
{
}

void MIL::Operators::Common::ios15::Pow::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F522478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F5228E0()
{
}

void MIL::Operators::Common::ios15::RealDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F523524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F52398C()
{
}

void MIL::Operators::Common::ios15::Sub::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5245D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F524A38()
{
}

void MIL::Operators::Common::ios15::Mod::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F52567C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 240));
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F525AE4()
{
}

void std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__func()
{
}

void *std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C25EAD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25EAD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  std::__invoke_void_return_wrapper<std::vector<std::shared_ptr<MIL::IRValue const>>,false>::__call[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRValue const>> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int>((void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target_type()
{
}

void std::__invoke_void_return_wrapper<std::vector<std::shared_ptr<MIL::IRValue const>>,false>::__call[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRValue const>> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int>(void (**a1)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void), uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  __int16 v7 = *a1;
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v7(a2, &v8, a4, a5, a6, *a7);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_20F525C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateCast(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtype");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  __int16 v6 = (const void *)MIL::IRValue::AsTensor(ParameterValue);
  MIL::IRValue::GetScalar<std::string>(v6, &v19);
  if (v18 < 0) {
    operator delete(__p);
  }
  int v7 = MIL::StringToIRDataType((const void **)&v19.__r_.__value_.__l.__data_, 0);
  uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 176))(this);
  if (*(void *)(v8 + 8) == *(void *)v8) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v8);
  uint64_t v10 = MIL::IRValueType::AsTensorType(Type);
  if (v7 == (*(unsigned int (**)(uint64_t))(*(void *)v10 + 88))(v10))
  {
    MIL::ValidationResult::ValidationResult(a2);
  }
  else
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v12 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v15 = *LocationPtr;
    uint64_t v16 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "Specified dtype of cast does not match that of output tensor.");
    MIL::ValidationResult::ValidationResult(a2, &v15, 313, v13);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_20F525DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "dtype");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v4)
  {
    uint64_t Value = MIL::IRTypedArgument::TryGetValue(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v4 + 5));
    __int16 v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)Value + 40))(Value);
    MIL::IRValue::GetScalar<std::string>(v6, &v15);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    MIL::StringToIRDataType((const void **)&v15.__r_.__value_.__l.__data_, 0);
    std::string::basic_string[abi:ne180100]<0>(v11, "x");
    int v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v11);
    if (v7)
    {
      uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::TryGetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v7
                                                                             + 5));
      uint64_t v9 = MIL::IRValueType::AsTensorType(ValueType);
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v14 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      MIL::IRTensorValueType::MakeWithShape();
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F525FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcos(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "acos");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F526200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::UnaryOpHelper(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(void))(*(void *)*a3 + 40))())
  {
    uint64_t v5 = (void *)*a3;
    __int16 v4 = (atomic_ullong *)a3[1];
    if (v4) {
      atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    __p[23] = v5;
    __p[24] = v4;
    if (v4) {
      atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
    }
    MIL::IRTypedArgument::Make();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "IRValue x is not an IRTensor object.");
  __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
}

void sub_20F528568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  __cxa_free_exception(v57);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a43);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor((void *)(v58 - 208));
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__value_func[abi:ne180100]((void *)(v58 - 136));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a56);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcosh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "acosh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F528AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsin(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "asin");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F528D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v16, "x");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v16);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(***((void ***)v4 + 5) + 40))(**((void **)v4 + 5));
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "x");
      __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v16);
      if (v6)
      {
        int v7 = (uint64_t *)*((void *)v6 + 5);
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v16, "dtype");
        long long v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v16);
        if (v10)
        {
          uint64_t v11 = *(void *)(*((void *)v10 + 5) + 8);
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v15, "x");
          uint64_t v13 = v9;
          uint64_t v14 = v8;
          if (v8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
          }
          MIL::IRTypedArgument::Make();
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "IRValue x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F5299F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  __cxa_free_exception(v55);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a48);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(a1);
}

void sub_20F529F3C()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  JUMPOUT(0x20F529F28);
}

void sub_20F529F54()
{
  if (*(char *)(v0 - 169) < 0) {
    operator delete(*(void **)(v0 - 192));
  }
  JUMPOUT(0x20F529F34);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsinh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "asinh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtan(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "atan");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52A3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtanh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "atanh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCeil(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ceil");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52A834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCos(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "cos");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52AA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCosh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "cosh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52ACC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "exp");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloor(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "floor");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52B154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRound(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "round");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52B39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSin(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "sin");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSinh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "sinh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52B82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSqrt(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "sqrt");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52BA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTan(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "tan");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52BCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTanh(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "tanh");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52BF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAbs(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "abs");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp2(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "exp2");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52C394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSign(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "sign");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52C5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSquare(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "square");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceInverse(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v6)
  {
    int v7 = (uint64_t *)*((void *)v6 + 5);
    std::string::basic_string[abi:ne180100]<0>(v20, "epsilon");
    uint64_t v22 = *v7;
    uint64_t v8 = (std::__shared_weak_count *)v7[1];
    uint64_t v23 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v19, (unsigned __int8 *)v20, 1);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v16[0] = v9;
    v16[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "x");
    long long v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v20);
    if (v11)
    {
      int v12 = (void *)*((void *)v11 + 5);
      uint64_t v13 = v12[1];
      v15[0] = *v12;
      v15[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v14, (uint64_t)v19);
      std::string::basic_string[abi:ne180100]<0>(__p, "inverse");
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52CB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v32 = v30;
  *(void *)(v28 + 8) = v32;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 128));
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 104);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLog(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v6)
  {
    int v7 = (uint64_t *)*((void *)v6 + 5);
    std::string::basic_string[abi:ne180100]<0>(v20, "epsilon");
    uint64_t v22 = *v7;
    uint64_t v8 = (std::__shared_weak_count *)v7[1];
    uint64_t v23 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v19, (unsigned __int8 *)v20, 1);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v16[0] = v9;
    v16[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "x");
    long long v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v20);
    if (v11)
    {
      int v12 = (void *)*((void *)v11 + 5);
      uint64_t v13 = v12[1];
      v15[0] = *v12;
      v15[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v14, (uint64_t)v19);
      std::string::basic_string[abi:ne180100]<0>(__p, "log");
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52CE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v32 = v30;
  *(void *)(v28 + 8) = v32;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 128));
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 104);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRsqrt(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v6)
  {
    int v7 = (uint64_t *)*((void *)v6 + 5);
    std::string::basic_string[abi:ne180100]<0>(v20, "epsilon");
    uint64_t v22 = *v7;
    uint64_t v8 = (std::__shared_weak_count *)v7[1];
    uint64_t v23 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v19, (unsigned __int8 *)v20, 1);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v16[0] = v9;
    v16[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "x");
    long long v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v20);
    if (v11)
    {
      int v12 = (void *)*((void *)v11 + 5);
      uint64_t v13 = v12[1];
      v15[0] = *v12;
      v15[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v14, (uint64_t)v19);
      std::string::basic_string[abi:ne180100]<0>(__p, "rsqrt");
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52D18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v32 = v30;
  *(void *)(v28 + 8) = v32;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 128));
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 104);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceClip(uint64_t a1, uint64_t *a2, void *a3)
{
  v30[1] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v25, "alpha");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v25);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    std::string::basic_string[abi:ne180100]<0>(v28, "alpha");
    v28[3] = *v7;
    uint64_t v8 = v7[1];
    v28[4] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "beta");
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
    if (v9)
    {
      uint64_t v10 = (void *)*((void *)v9 + 5);
      std::string::basic_string[abi:ne180100]<0>(v29, "beta");
      v29[3] = *v10;
      uint64_t v11 = v10[1];
      v30[0] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v27, (unsigned __int8 *)v28, 2);
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = &v28[v12];
        uint64_t v14 = (std::__shared_weak_count *)v30[v12];
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (*((char *)v13 + 63) < 0) {
          operator delete((void *)v13[5]);
        }
        v12 -= 5;
        if (v12 == -10)
        {
          if (v24 < 0) {
            operator delete(__p);
          }
          if (v26 < 0) {
            operator delete(v25[0]);
          }
          uint64_t v15 = *a2;
          uint64_t v16 = a2[1];
          v22[0] = v15;
          v22[1] = v16;
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v28, "x");
          uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v28);
          if (v17)
          {
            char v18 = (void *)*((void *)v17 + 5);
            uint64_t v19 = v18[1];
            v21[0] = *v18;
            v21[1] = v19;
            if (v19) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
            }
            std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v20, (uint64_t)v27);
            std::string::basic_string[abi:ne180100]<0>(v25, "clip");
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
      }
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  *(void *)(v35 + 8) = v37;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  BOOL v40 = *(std::__shared_weak_count **)(v38 - 168);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (*(char *)(v38 - 129) < 0) {
    operator delete(*(void **)(v38 - 152));
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalNot(uint64_t a1, void *a2, void *a3)
{
  v15[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "x");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
  if (v6)
  {
    int v7 = (void *)*((void *)v6 + 5);
    uint64_t v8 = v7[1];
    v14[0] = *v7;
    v14[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(&__p, "logical_not");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v31 = v29;
  *(void *)(v28 + 8) = v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 80));
  char v33 = *(std::__shared_weak_count **)(v30 - 56);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceThreshold(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v6)
  {
    int v7 = (uint64_t *)*((void *)v6 + 5);
    std::string::basic_string[abi:ne180100]<0>(v20, "alpha");
    uint64_t v22 = *v7;
    uint64_t v8 = (std::__shared_weak_count *)v7[1];
    uint64_t v23 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v19, (unsigned __int8 *)v20, 1);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v16[0] = v9;
    v16[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "x");
    long long v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v20);
    if (v11)
    {
      int v12 = (void *)*((void *)v11 + 5);
      uint64_t v13 = v12[1];
      v15[0] = *v12;
      v15[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v14, (uint64_t)v19);
      std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F52DB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v32 = v30;
  *(void *)(v28 + 8) = v32;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 128));
  uint64_t v34 = *(std::__shared_weak_count **)(v31 - 104);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unsigned __int8 i = *v14; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20F52DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F52DF48(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

float MIL::MathOps::CeilOp<float>(float a1)
{
  return ceilf(a1);
}

float MIL::MathOps::FloorOp<float>(float a1)
{
  return floorf(a1);
}

float MIL::MathOps::SqrtOp<float>(float a1)
{
  return sqrtf(a1);
}

float MIL::MathOps::SignOp<float>(float a1)
{
  BOOL v1 = a1 < 0.0;
  BOOL v2 = a1 <= 0.0;
  float result = 0.0;
  if (v1) {
    float result = -1.0;
  }
  if (!v2) {
    return 1.0;
  }
  return result;
}

float MIL::MathOps::SquareOp<float>(float a1)
{
  return a1 * a1;
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C25EB88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52E040(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C25EC08;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52E0BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C25EC88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52E138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C25ED08;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52E1B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C25ED88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52E230(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EB88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EB88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EB88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52E340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EB88;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  BOOL v2 = (void *)(a1 + 8);
  float v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v5 = *((float *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 1.0 / (float)(v3 + v5);
}

void sub_20F52E448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EC08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EC08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EC08;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52E5AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EC08;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  BOOL v2 = (void *)(a1 + 8);
  float v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v5 = *((float *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }

  return logf(v3 + v5);
}

void sub_20F52E6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EC88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25EC88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EC88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52E820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EC88;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  BOOL v2 = (void *)(a1 + 8);
  float v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v5 = *((float *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 1.0 / sqrtf(v3 + v5);
}

void sub_20F52E92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::target_type()
{
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25ED08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25ED08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25ED08;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52EA90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25ED08;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::operator()(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v4, "alpha");
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)v4))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  if (v3 < 0)
  }
    operator delete(__p[0]);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_20F52EBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::target_type()
{
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25ED88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_26C25ED88;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25ED88;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52ED68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25ED88;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::operator()(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  if (v3 < 0)
  }
    operator delete(__p[0]);
}

void sub_20F52EE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::target_type()
{
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unsigned __int8 i = *(unsigned __int8 **)(a2 + 16); i; unsigned __int8 i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F52EF34(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F52F1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  float result = *(float *)(a3 + 24);
  *((float *)v8 + 10) = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F52F25C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unsigned __int8 i = *v14; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20F52F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_WORD *)v8 + 20) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F52F5A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::MathOps::AcosOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = acosf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AcoshOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = acoshf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AsinOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = asinf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AsinhOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = asinhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AtanOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = atanf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AtanhOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = atanhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::CeilOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, ceilf(Float));
}

uint64_t MIL::MathOps::CosOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = cosf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::CoshOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = coshf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::ExpOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = expf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::FloorOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, floorf(Float));
}

uint64_t MIL::MathOps::RoundOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, roundf(Float));
}

uint64_t MIL::MathOps::SinOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = sinf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SinhOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = sinhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SqrtOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, sqrtf(Float));
}

uint64_t MIL::MathOps::TanOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = tanf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::TanhOp<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = tanhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AbsOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, fabsf(Float));
}

uint64_t MIL::MathOps::Exp2Op<MIL::Fp16>(__int16 a1)
{
  __int16 v5 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  float v2 = exp2f(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SignOp<MIL::Fp16>(__int16 a1)
{
  __int16 v7 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  BOOL v3 = Float == 0.0;
  BOOL v4 = Float < 0.0;
  float v5 = 0.0;
  if (v4) {
    float v5 = -1.0;
  }
  if (!v4 && !v3) {
    float v5 = 1.0;
  }
  return MIL::Fp16::FromFloat(v1, v5);
}

uint64_t MIL::MathOps::SquareOp<MIL::Fp16>(__int16 a1)
{
  __int16 v4 = a1;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, Float * Float);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25EEB8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52FA28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25EF38;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52FAA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25EFB8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52FB20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F038;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52FB9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F0B8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F52FC18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26C25EE08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25EE08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EEB8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EEB8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EEB8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F52FE0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EEB8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int16 v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v5 = *((_WORD *)v4 + 20);
  __int16 v14 = v3;
  __int16 v13 = v5;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  uint64_t v9 = MIL::Fp16::FromFloat(v8, 1.0 / (float)(Float + v7));
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F52FF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EF38;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EF38;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EF38;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F5300A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EF38;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int16 v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v5 = *((_WORD *)v4 + 20);
  __int16 v15 = v3;
  __int16 v14 = v5;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v15);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  float v8 = logf(Float + v7);
  uint64_t v10 = MIL::Fp16::FromFloat(v9, v8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_20F5301CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EFB8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25EFB8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25EFB8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F530330(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25EFB8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int16 v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v5 = *((_WORD *)v4 + 20);
  __int16 v14 = v3;
  __int16 v13 = v5;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  uint64_t v9 = MIL::Fp16::FromFloat(v8, 1.0 / sqrtf(Float + v7));
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F530464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25F038;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25F038;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F038;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F5305C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F038;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int16 v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v16, "alpha");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)v16);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v5 = *((_WORD *)v4 + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v7 = *((_WORD *)v6 + 20);
  __int16 v20 = v3;
  __int16 v19 = v5;
  __int16 v18 = v7;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v19);
  float v9 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v20);
  float v11 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v18);
  if (v11 >= v9) {
    float v11 = v9;
  }
  if (Float >= v11) {
    float v11 = Float;
  }
  uint64_t v12 = MIL::Fp16::FromFloat(v10, v11);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return v12;
}

void sub_20F530758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25F0B8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(void *a1)
{
  *a1 = &unk_26C25F0B8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F0B8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F5308D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F0B8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  __int16 v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v5 = *((_WORD *)v4 + 20);
  __int16 v14 = v3;
  __int16 v13 = v5;
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  float v8 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  if (Float >= v8) {
    float v8 = Float;
  }
  uint64_t v9 = MIL::Fp16::FromFloat(v7, v8);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F530A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

uint64_t std::unordered_map<std::string,MIL::Fp16>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unsigned __int8 i = *(unsigned __int8 **)(a2 + 16); i; unsigned __int8 i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::Fp16> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F530ACC(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::Fp16> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    __int16 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::pair<std::string const,MIL::Fp16> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F530D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::pair<std::string const,MIL::Fp16> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_WORD *)v8 + 20) = *(_WORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F530DF4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::MathOps::AcosOp<int>(int a1)
{
  return (int)acos((double)a1);
}

uint64_t MIL::MathOps::AcoshOp<int>(int a1)
{
  return (int)acosh((double)a1);
}

uint64_t MIL::MathOps::AsinOp<int>(int a1)
{
  return (int)asin((double)a1);
}

uint64_t MIL::MathOps::AsinhOp<int>(int a1)
{
  return (int)asinh((double)a1);
}

uint64_t MIL::MathOps::AtanOp<int>(int a1)
{
  return (int)atan((double)a1);
}

uint64_t MIL::MathOps::AtanhOp<int>(int a1)
{
  return (int)atanh((double)a1);
}

uint64_t MIL::MathOps::CosOp<int>(int a1)
{
  return (int)cos((double)a1);
}

uint64_t MIL::MathOps::CoshOp<int>(int a1)
{
  return (int)cosh((double)a1);
}

uint64_t MIL::MathOps::ExpOp<int>(int a1)
{
  return (int)exp((double)a1);
}

uint64_t MIL::MathOps::SinOp<int>(int a1)
{
  return (int)sin((double)a1);
}

uint64_t MIL::MathOps::SinhOp<int>(int a1)
{
  return (int)sinh((double)a1);
}

uint64_t MIL::MathOps::SqrtOp<int>(int a1)
{
  return (int)sqrt((double)a1);
}

uint64_t MIL::MathOps::TanOp<int>(int a1)
{
  return (int)tan((double)a1);
}

uint64_t MIL::MathOps::TanhOp<int>(int a1)
{
  return (int)tanh((double)a1);
}

uint64_t MIL::MathOps::AbsOp<int>(int a1)
{
  return (int)fabs((double)a1);
}

uint64_t MIL::MathOps::Exp2Op<int>(int a1)
{
  return (int)ldexp(1.0, a1);
}

uint64_t MIL::MathOps::SignOp<int>(int a1)
{
  if (a1) {
    unsigned int v1 = -1;
  }
  else {
    unsigned int v1 = 0;
  }
  if (a1 >= 1) {
    return 1;
  }
  else {
    return v1;
  }
}

uint64_t MIL::MathOps::SquareOp<int>(int a1)
{
  return (int)((double)a1 * (double)a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F1E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F531088(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F268;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F531104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F2E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F531180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F368;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F5311FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  __int16 v4 = operator new(0x30uLL);
  *__int16 v4 = &unk_26C25F3E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_20F531278(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::~__func()
{
}

void *std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26C25F138;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25F138;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::target_type()
{
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F1E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F1E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F1E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F53146C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F1E8;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v5 + v3 + 1) >= 3) {
    return 0;
  }
  else {
    return (v5 + v3);
  }
}

void sub_20F531570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::target_type()
{
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F268;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F268;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F268;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F5316D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F268;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return (int)log((double)(v5 + v3));
}

void sub_20F5317D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::target_type()
{
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F2E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F2E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F2E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F53193C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F2E8;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return (int)(1.0 / sqrt((double)(v5 + v3)));
}

void sub_20F531A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::target_type()
{
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F368;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F368;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F368;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F531BAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F368;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v12, "alpha");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)v12);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unsigned int v5 = *((_DWORD *)v4 + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  __int16 v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v7 = *((_DWORD *)v6 + 10);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v7 >= v3) {
    unsigned int v8 = v3;
  }
  else {
    unsigned int v8 = v7;
  }
  if ((int)v8 <= (int)v5) {
    return v5;
  }
  else {
    return v8;
  }
}

void sub_20F531CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::target_type()
{
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F3E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26C25F3E8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C25F3E8;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F531E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F3E8;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  unsigned int v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  __int16 v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unsigned int v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v5 <= (int)v3) {
    return v3;
  }
  else {
    return v5;
  }
}

void sub_20F531F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::target_type()
{
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unsigned __int8 i = *(unsigned __int8 **)(a2 + 16); i; unsigned __int8 i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F532040(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F5322B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F532368(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    __int16 v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unsigned __int8 i = *v14; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20F5325F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[40] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F5326AC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26C25F468;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25F468;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::target_type()
{
}

uint64_t std::unordered_map<std::string,unsigned char>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unsigned __int8 i = *(unsigned __int8 **)(a2 + 16); i; unsigned __int8 i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F53280C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unsigned __int8 i = *v13; i; unsigned __int8 i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unsigned __int8 i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F532A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  v8[40] = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F532B34(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Cast::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F533840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,void **a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 8))(a43);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a44, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Clip::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5348F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v61 - 112));
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  uint64_t v63 = *(void **)(v61 - 152);
  if (v63)
  {
    *(void *)(v61 - 144) = v63;
    operator delete(v63);
  }
  if (__p)
  {
    a57 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

void sub_20F534D88()
{
}

void MIL::Operators::Common::ios15::ElementwiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5355D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Acos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5361A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Acosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F536D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Asin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F537968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Asinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F538548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Atan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F539128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Atanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F539D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Ceil::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53A8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Cos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Cosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ElementwiseUnaryWithEpsilon::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 128));
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  uint64_t v53 = *(void **)(v51 - 168);
  if (v53)
  {
    *(void *)(v51 - 160) = v53;
    operator delete(v53);
  }
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Inverse::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53DC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 112));
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  uint64_t v53 = *(void **)(v51 - 152);
  if (v53)
  {
    *(void *)(v51 - 144) = v53;
    operator delete(v53);
  }
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Log::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53EAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 112));
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  uint64_t v53 = *(void **)(v51 - 152);
  if (v53)
  {
    *(void *)(v51 - 144) = v53;
    operator delete(v53);
  }
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Rsqrt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F53F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 112));
  if (a42) {
    (*(void (**)(uint64_t))(*(void *)a42 + 8))(a42);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  uint64_t v53 = *(void **)(v51 - 152);
  if (v53)
  {
    *(void *)(v51 - 144) = v53;
    operator delete(v53);
  }
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ElementwiseUnaryWithInt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5405DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 128));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Abs::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F541278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,char a61,char a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Exp2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F541F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,char a61,char a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sign::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F542BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,char a61,char a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Square::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54387C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,__int16 a60,char a61,char a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Exp::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Floor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Round::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F545C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54683C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54741C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sqrt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F547FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Tan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F548BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Tanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5497BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v61 = *(void **)(v59 - 112);
  if (v61)
  {
    *(void *)(v59 - 104) = v61;
    operator delete(v61);
  }
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LogicalNot::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54A030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a28);
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v36 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Threshold::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54ACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v57 - 112));
  if (a45) {
    (*(void (**)(uint64_t))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGather(a1, v4, a3);
}

void sub_20F54B164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGatherAlongAxis(a1, v4, a3);
}

void sub_20F54B1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGatherNd(a1, v4, a3);
}

void sub_20F54B234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::BaseGather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54BD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v52 - 128));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  BOOL v54 = *(void **)(v52 - 176);
  if (v54)
  {
    *(void *)(v52 - 168) = v54;
    operator delete(v54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v52 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseGatherWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54CDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v54 - 128));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  BOOL v56 = *(void **)(v54 - 176);
  if (v56)
  {
    *(void *)(v54 - 168) = v56;
    operator delete(v56);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v54 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Gather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  uint64_t v60 = *(void **)(v58 - 160);
  if (v60)
  {
    *(void *)(v58 - 152) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F54E2E4()
{
}

void MIL::Operators::Common::ios15::GatherAlongAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  uint64_t v60 = *(void **)(v58 - 160);
  if (v60)
  {
    *(void *)(v58 - 152) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void sub_20F54F3C4()
{
}

void MIL::Operators::Common::ios15::GatherNd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F54FF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v56 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  uint64_t v58 = *(void **)(v56 - 160);
  if (v58)
  {
    *(void *)(v56 - 152) = v58;
    operator delete(v58);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateAffine(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v29, "padding_value");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  __int16 v6 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)ParameterValue + 32))(ParameterValue);
  uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  if (v8 == 4)
  {
    LOWORD(v29.__r_.__value_.__l.__data_) = MIL::IRValue::GetScalar<MIL::Fp16>(ParameterValue);
    float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v29);
LABEL_7:
    if (Float == 0.0)
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    else
    {
      std::to_string(&v23, Float);
      unint64_t v10 = std::string::insert(&v23, 0, "Unsupported value, '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = std::string::append(&v29, "', for parameter 'padding_value'");
      unint64_t v13 = (std::string::value_type *)v12->__r_.__value_.__r.__words[0];
      std::string::size_type size = v12->__r_.__value_.__l.__size_;
      v24[0] = v12->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
      int v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      float v17 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v21 = *LocationPtr;
      size_t v22 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15 < 0)
      {
        std::string::__init_copy_ctor_external(&v20, v13, size);
      }
      else
      {
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
        v20.__r_.__value_.__l.__size_ = size;
        LODWORD(v20.__r_.__value_.__r.__words[2]) = v24[0];
        *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v24 + 3);
        *((unsigned char *)&v20.__r_.__value_.__s + 23) = v15;
      }
      MIL::ValidationResult::ValidationResult(a2, &v21, 315, &v20);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v15 < 0) {
        operator delete(v13);
      }
    }
    return;
  }
  if (v8 == 5)
  {
    float Float = MIL::IRValue::GetScalar<float>(ParameterValue);
    goto LABEL_7;
  }
  BOOL v18 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unint64_t v19 = (std::__shared_weak_count *)v18[1];
  uint64_t v27 = *v18;
  uint64_t v28 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Unexpected dType for affine input padding_value.");
  MIL::ValidationResult::ValidationResult(a2, &v27, 1, __p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_20F550618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCropResize(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "roi");
  uint64_t v7 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target_height");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  unint64_t v10 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  int v11 = MIL::IRValue::GetScalar<int>(v10);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target_width");
  unint64_t v12 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  unint64_t v13 = (const void *)MIL::IRValue::AsTensor(v12);
  int v14 = MIL::IRValue::GetScalar<int>(v13);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
  uint64_t v16 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v17 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6) + 8);
  uint64_t v18 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v11);
  uint64_t v19 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v14);
  std::string v20 = operator new(0x28uLL);
  __p[1] = v20 + 5;
  size_t v22 = v20 + 5;
  void *v20 = v15;
  v20[1] = v16;
  uint64_t v20[2] = v17;
  v20[3] = v18;
  v20[4] = v19;
  __p[0] = v20;
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F55092C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceAffine(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_height");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  uint64_t v8 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  int v9 = MIL::IRValue::GetScalar<int>(v8);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_width");
  unint64_t v10 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v11 = (const void *)MIL::IRValue::AsTensor(v10);
  int v12 = MIL::IRValue::GetScalar<int>(v11);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (v9 >= 1 && v12 > 0)
  {
    uint64_t v13 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    uint64_t v14 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6) + 8);
    uint64_t v15 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v9);
    uint64_t v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v12);
    uint64_t v17 = operator new(0x20uLL);
    __p[1] = v17 + 4;
    std::string v20 = v17 + 4;
    *uint64_t v17 = v13;
    v17[1] = v14;
    v17[2] = v15;
    void v17[3] = v16;
    __p[0] = v17;
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
  MIL::UnknownLocation::Make(exception);
}

void sub_20F550C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a17) {
    (*(void (**)(void *))(*(void *)a17 + 8))(a17);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "coordinates");
  uint64_t v6 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
  uint64_t v8 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  uint64_t v9 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5) + 8);
  uint64_t v10 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7) + 8);
  uint64_t v11 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7) + 16);
  int v12 = operator new(0x20uLL);
  __p[1] = v12 + 4;
  uint64_t v14 = v12 + 4;
  void *v12 = v8;
  v12[1] = v9;
  void v12[2] = v10;
  void v12[3] = v11;
  __p[0] = v12;
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F550EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleNearestNeighbor(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  BOOL v41 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v41, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v37[0] = v9;
  v37[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "scale_factor_height");
    uint64_t v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v32);
    uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v32);
    uint64_t v15 = (const void *)MIL::IRValue::AsTensor(SingleValue);
    if (v13 == 11) {
      float v16 = (float)(int)MIL::IRValue::GetScalar<int>(v15);
    }
    else {
      float v16 = MIL::IRValue::GetScalar<float>(v15);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
    std::string::basic_string[abi:ne180100]<0>(&v32, "scale_factor_width");
    uint64_t v17 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v32);
    uint64_t v18 = MIL::IRValueType::AsTensorType(v17);
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 88))(v18);
    std::string v20 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v32);
    uint64_t v21 = (const void *)MIL::IRValue::AsTensor(v20);
    if (v19 == 11) {
      float v22 = (float)(int)MIL::IRValue::GetScalar<int>(v21);
    }
    else {
      float v22 = MIL::IRValue::GetScalar<float>(v21);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
    int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, v41, v42, (v42 - (uint64_t)v41) >> 3);
    uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(v42 - 16) + 16))(*(void *)(v42 - 16));
    unint64_t v24 = *a1;
    if (v23)
    {
      unint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
      uint64_t v26 = MIL::IRConstantDimension::Make(v24, (MIL::MILContext *)vcvtms_u32_f32(v16 * (float)v25));
    }
    else
    {
      uint64_t v26 = MIL::IRUnknownDimension::Make(*a1, 0);
    }
    *(void *)(v33 - 16) = v26;
    uint64_t v27 = (*(uint64_t (**)(void))(**(void **)&v41[v33 - (void)v32 - 8] + 16))(*(void *)&v41[v33 - (void)v32 - 8]);
    uint64_t v28 = *a1;
    if (v27)
    {
      unint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
      uint64_t v30 = MIL::IRConstantDimension::Make(v28, (MIL::MILContext *)vcvtms_u32_f32(v22 * (float)v29));
    }
    else
    {
      uint64_t v30 = MIL::IRUnknownDimension::Make(*a1, 0);
    }
    *(void *)(v33 - 8) = v30;
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v35, (uint64_t)__p);
  v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v36 = v40;
  MIL::ValidationError::ValidationError(exception, v35);
}

void sub_20F551360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a24);
  uint64_t v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(void *)(v29 - 96) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::anonymous namespace'::ImageResizingValidationHelper(void *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v17, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&v17))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v8 = a1[1];
    v15[0] = *a1;
    v15[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "Variadic shape is not supported for upsample op type inference.");
    MIL::ValidationResult::ValidationResult(v16, v15, 315, v14);
    MIL::ValidationError::ValidationError(exception, v16);
  }
  if (MIL::IRTensorValueType::Rank(a2) <= 2)
  {
    uint64_t v9 = __cxa_allocate_exception(0x48uLL);
    uint64_t v10 = a1[1];
    v12[0] = *a1;
    v12[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "Rank of the input tensor must be at least 3.");
    MIL::ValidationResult::ValidationResult(v13, v12, 315, v11);
    MIL::ValidationError::ValidationError(v9, v13);
  }
  MIL::ValidationResult::ValidationResult(a3);
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
}

void sub_20F5515D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a18);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v33) {
    __cxa_free_exception(v32);
  }
  int v36 = *(void **)(v34 - 56);
  if (v36)
  {
    *(void *)(v34 - 48) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleBilinear(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleNearestNeighbor(a1, v4, a3);
}

void sub_20F5516EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeNearestNeighbor(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v32 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v28[0] = *a2;
  v28[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "target_size_width");
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v23);
    uint64_t v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
    int v12 = MIL::IRValue::GetScalar<int>(v11);
    if (SHIBYTE(v25) < 0) {
      operator delete(v23);
    }
    std::string::basic_string[abi:ne180100]<0>(&v23, "target_size_height");
    int v13 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v23);
    uint64_t v14 = (const void *)MIL::IRValue::AsTensor(v13);
    int v15 = MIL::IRValue::GetScalar<int>(v14);
    if (SHIBYTE(v25) < 0) {
      operator delete(v23);
    }
    if (v12 >= 1 && v15 > 0)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v23, v32, v33, (v33 - (uint64_t)v32) >> 3);
      uint64_t v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v12);
      *(void *)(v24 - 8) = v16;
      uint64_t v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v15);
      *(void *)(v24 - 16) = v17;
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v20 = a2[1];
    *(void *)&long long v22 = *a2;
    *((void *)&v22 + 1) = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "Param target_size should be greater than zero.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v22, (uint64_t)v21, 315);
  }
  uint64_t v18 = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v26, (uint64_t)__p);
  v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v27 = v31;
  MIL::ValidationError::ValidationError(v18, v26);
}

void sub_20F551A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a24);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a33);
  int v40 = *(void **)(v38 - 88);
  if (v40)
  {
    *(void *)(v38 - 80) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeBilinear(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeNearestNeighbor(a1, v4, a3);
}

void sub_20F551B94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCrop(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  BOOL v47 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v47, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v43[0] = *a2;
  v43[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v38, "crop_height");
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v38);
    uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v11);
    uint64_t v14 = v13;
    if (SHIBYTE(v40) < 0) {
      operator delete(v38);
    }
    std::string::basic_string[abi:ne180100]<0>(&v38, "crop_width");
    int v15 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v38);
    uint64_t v16 = (uint64_t *)MIL::IRValue::AsTensor(v15);
    uint64_t v17 = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v16);
    uint64_t v19 = v18;
    if (SHIBYTE(v40) < 0) {
      operator delete(v38);
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v38, v47, v48, (v48 - (uint64_t)v47) >> 3);
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v48 - 16) + 16))(*(void *)(v48 - 16));
    uint64_t v21 = *a1;
    if (v20)
    {
      unint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      v37[0] = *a2;
      v37[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = MIL::IRConstantDimension::Make(v21, v24);
      *(void *)(v39 - 16) = v25;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    else
    {
      uint64_t v26 = MIL::IRUnknownDimension::Make(*a1, 0);
      *(void *)(v39 - 16) = v26;
    }
    uint64_t v27 = (*(uint64_t (**)(void))(**(void **)&v47[v39 - (void)v38 - 8] + 16))(*(void *)&v47[v39 - (void)v38 - 8]);
    uint64_t v28 = *a1;
    if (v27)
    {
      unint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
      uint64_t v30 = *a2;
      int v31 = (std::__shared_weak_count *)a2[1];
      v36[0] = v30;
      v36[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v33 = MIL::IRConstantDimension::Make(v28, v32);
      *(void *)(v39 - 8) = v33;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
    else
    {
      uint64_t v34 = MIL::IRUnknownDimension::Make(*a1, 0);
      *(void *)(v39 - 8) = v34;
    }
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v41, (uint64_t)__p);
  v41[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v42 = v46;
  MIL::ValidationError::ValidationError(exception, v41);
}

void sub_20F551FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a20);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a29);
  int v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

unint64_t MIL::Operators::Common::ios15::CustomValueTypeInference::anonymous namespace'::InferCroppedDimension(unsigned int *a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a2 != 2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v14 = a4[1];
    v41[0] = *a4;
    v41[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "Crop parameter must have exactly 2 elements");
    MIL::ValidationResult::ValidationResult(v42, v41, 315, v40);
    MIL::ValidationError::ValidationError(exception, v42);
  }
  uint64_t v4 = *a1;
  if ((v4 & 0x80000000) != 0 || (uint64_t v5 = a1[1], (v5 & 0x80000000) != 0))
  {
    uint64_t v10 = __cxa_allocate_exception(0x48uLL);
    uint64_t v11 = a4[1];
    v38[0] = *a4;
    v38[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v37, "Crop parameter must be non-negative");
    MIL::ValidationResult::ValidationResult(v39, v38, 315, v37);
    MIL::ValidationError::ValidationError(v10, v39);
  }
  unint64_t v7 = v5 + v4;
  unint64_t result = a3 - (v5 + v4);
  if (a3 <= v5 + v4)
  {
    uint64_t v16 = __cxa_allocate_exception(0x48uLL);
    uint64_t v17 = a4[1];
    v35[0] = *a4;
    v35[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v29, v7);
    uint64_t v18 = std::string::insert(&v29, 0, "Sum of crop parameters (");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v30, ") must be less than input dimension (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a3);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = &v28;
    }
    else {
      unint64_t v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v31, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v32, ").");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v34 = v26->__r_.__value_.__r.__words[2];
    long long v33 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(v36, v35, 315, &v33);
    MIL::ValidationError::ValidationError(v16, v36);
  }
  return result;
}

void sub_20F552354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,std::__shared_weak_count *a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a50);
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  if (v62) {
    __cxa_free_exception(v63);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Affine::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5544E4(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v2 = STACK[0x3C8];
  STACK[0x3C8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x3C0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C0]);
  }
  uint64_t v3 = *(void **)(v1 - 192);
  if (v3)
  {
    *(void *)(v1 - 184) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x468], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Crop::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F555CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v55 - 248));
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  uint64_t v57 = *(void **)(v55 - 112);
  if (v57)
  {
    *(void *)(v55 - 104) = v57;
    operator delete(v57);
  }
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CropResize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F557B0C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x328]);
  unint64_t v3 = STACK[0x308];
  STACK[0x308] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x278]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x278]);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x320], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Resample::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F55A654(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x4C8]);
  unint64_t v3 = STACK[0x440];
  STACK[0x440] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x438]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x438]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x528];
  if (STACK[0x528])
  {
    STACK[0x530] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x448], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4C0], 0);
  _Unwind_Resume(a1);
}

void sub_20F55B23C()
{
  uint64_t v0 = (void *)STACK[0x4C8];
  if (STACK[0x4C8])
  {
    STACK[0x4D0] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x20F55B1FCLL);
}

void sub_20F55B254()
{
}

void MIL::Operators::Common::ios15::ResizeBilinear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F55C118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a61);
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  uint64_t v63 = *(void **)(v61 - 112);
  if (v63)
  {
    *(void *)(v61 - 104) = v63;
    operator delete(v63);
  }
  uint64_t v64 = *(void **)(v61 - 248);
  if (v64)
  {
    *(void *)(v61 - 240) = v64;
    operator delete(v64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ResizeNearestNeighbor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F55D318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a57);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  uint64_t v59 = *(void **)(v57 - 136);
  if (v59)
  {
    *(void *)(v57 - 128) = v59;
    operator delete(v59);
  }
  uint64_t v60 = *(void **)(v57 - 96);
  if (v60)
  {
    *(void *)(v57 - 88) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::UpsampleBilinear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F55E718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v65 - 112));
  if (a64) {
    (*(void (**)(uint64_t))(*(void *)a64 + 8))(a64);
  }
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  unint64_t v67 = *(void **)(v65 - 176);
  if (v67)
  {
    *(void *)(v65 - 168) = v67;
    operator delete(v67);
  }
  std::string v68 = *(void **)(v65 - 136);
  if (v68)
  {
    *(void *)(v65 - 128) = v68;
    operator delete(v68);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x208], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::UpsampleNearestNeighbor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F55FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 112));
  if (a64) {
    (*(void (**)(uint64_t))(*(void *)a64 + 8))(a64);
  }
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  uint64_t v73 = *(void **)(v71 - 152);
  if (v73)
  {
    *(void *)(v71 - 144) = v73;
    operator delete(v73);
  }
  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_20F5600C8()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F5601CC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F56021C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F560334(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F560384(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F56049C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F5604EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F560604(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F560654(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[23],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F5606D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[23],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[23],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F56076C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[23],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F5607BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[20],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[20],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[20],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F5608D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[20],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F560924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F5609A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F560A3C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F560A8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F560B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F560BA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F560BF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateEinsum(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v7 = *LocationPtr;
  uint64_t v6 = (std::__shared_weak_count *)LocationPtr[1];
  v21[0] = *LocationPtr;
  v21[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "values");
  int v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, std::string *))(*(void *)this + 152))(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "values");
    Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    uint64_t v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "values");
    uint64_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    int v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, "equation");
    Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(ParameterValue, &__p);
    if (v15 < 0) {
      operator delete(v14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v18 = v7;
    long long v19 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "Inputs 'values' must be of length 2");
    MIL::ValidationResult::ValidationResult(a2, &v18, 315, v16);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F560DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, MIL::IRConstantDimension *a5@<X4>, uint64_t a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1)
    || !(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a2 + 104))(a2)
    || (uint64_t v14 = MIL::IRTensorValueType::Rank(a1), v14 != MIL::IRTensorValueType::Rank(a2)))
  {
    uint64_t v23 = (std::__shared_weak_count *)a4[1];
    uint64_t v103 = *a4;
    int v104 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v101, "Inputs must have equal fixed ranks");
    MIL::ValidationResult::ValidationResult(a7, &v103, 315, v101);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    uint64_t v24 = v104;
    if (!v104) {
      return;
    }
    goto LABEL_22;
  }
  int v15 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 88))(a1);
  if (v15 != (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a2 + 88))(a2))
  {
    long long v25 = (std::__shared_weak_count *)a4[1];
    uint64_t v99 = *a4;
    int v100 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v97, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a7, &v99, 319, v97);
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    uint64_t v24 = v100;
    if (!v100) {
      return;
    }
    goto LABEL_22;
  }
  unint64_t v16 = MIL::IRTensorValueType::Rank(a1);
  if (v16 - 3 >= 2)
  {
    std::to_string(&v95, v16);
    uint64_t v26 = std::string::insert(&v95, 0, "Rank of the inputs is ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::string v28 = std::string::append(&__str, ", but it must be either 3 or 4");
    std::string v29 = (const std::string::value_type *)v28->__r_.__value_.__r.__words[0];
    std::string::size_type size = v28->__r_.__value_.__l.__size_;
    LODWORD(v83.__r_.__value_.__l.__data_) = v28->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v83.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v28->__r_.__value_.__r.__words[2] + 3);
    int v31 = SHIBYTE(v28->__r_.__value_.__r.__words[2]);
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    std::string v32 = (std::__shared_weak_count *)a4[1];
    uint64_t v93 = *a4;
    char v94 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v31 < 0)
    {
      std::string::__init_copy_ctor_external(&v92, v29, size);
    }
    else
    {
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      v92.__r_.__value_.__l.__size_ = size;
      LODWORD(v92.__r_.__value_.__r.__words[2]) = v83.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v92.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v83.__r_.__value_.__r.__words + 3);
      *((unsigned char *)&v92.__r_.__value_.__s + 23) = v31;
    }
    MIL::ValidationResult::ValidationResult(a7, &v93, 315, &v92);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    if (v31 < 0)
    {
      long long v33 = (std::string::value_type *)v29;
LABEL_45:
      operator delete(v33);
    }
    return;
  }
  unint64_t v58 = v16 - 3;
  std::vector<int>::size_type v59 = v16;
  uint64_t v17 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  BOOL v18 = (v17 & 0x80u) != 0;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = a3->__r_.__value_.__l.__size_;
  }
  if (v18) {
    long long v19 = (const std::string *)a3->__r_.__value_.__r.__words[0];
  }
  else {
    long long v19 = a3;
  }
  if (v17 >= 2)
  {
    uint64_t v20 = (char *)v19 + v17;
    long long v21 = (std::string *)v19;
    while (1)
    {
      unint64_t v22 = (char *)memchr(v21, 45, v17 - 1);
      if (!v22) {
        goto LABEL_80;
      }
      if (*(_WORD *)v22 == 15917) {
        break;
      }
      long long v21 = (std::string *)(v22 + 1);
      uint64_t v17 = v20 - (char *)v21;
      if (v20 - (char *)v21 < 2) {
        goto LABEL_80;
      }
    }
    if (v22 == v20) {
      goto LABEL_80;
    }
    std::string::size_type v34 = v22 - (char *)v19;
    if (v34 == -1) {
      goto LABEL_80;
    }
    std::string::basic_string(&__str, a3, 0, v34, (std::allocator<char> *)&v95);
    std::string::basic_string(&v95, a3, v34 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v83);
    std::string::size_type v35 = std::string::find(&__str, 44, 0);
    if (v35 == -1)
    {
      uint64_t v52 = (std::__shared_weak_count *)a4[1];
      uint64_t v86 = *a4;
      uint64_t v87 = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v84, "Invalid equation");
      MIL::ValidationResult::ValidationResult(a7, &v86, 315, v84);
      if (v85 < 0) {
        operator delete(v84[0]);
      }
      if (v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      }
LABEL_102:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v33 = (std::string::value_type *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_45;
      }
      return;
    }
    std::string::size_type v36 = v35;
    std::string::basic_string(&v83, &__str, 0, v35, (std::allocator<char> *)&v82);
    std::string::basic_string(&v82, &__str, v36 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v77);
    std::string::size_type v37 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v37 = v83.__r_.__value_.__l.__size_;
    }
    if (v37 != v59) {
      goto LABEL_86;
    }
    std::string::size_type v38 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v38 = v82.__r_.__value_.__l.__size_;
    }
    if (v38 != v59) {
      goto LABEL_86;
    }
    std::string::size_type v39 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = v95.__r_.__value_.__l.__size_;
    }
    if (v39 != v59)
    {
LABEL_86:
      uint64_t v51 = (std::__shared_weak_count *)a4[1];
      uint64_t v80 = *a4;
      int v81 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v78, "Invalid equation, ranks from the equation are incompatible with the input/output ranks.");
      MIL::ValidationResult::ValidationResult(a7, &v80, 315, v78);
      if (v79 < 0) {
        operator delete(v78[0]);
      }
      if (v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      }
      goto LABEL_92;
    }
    std::vector<int>::vector(&v77, v59);
    std::vector<int>::vector(&v76, v59);
    std::vector<int>::vector(&v75, v59);
    v74[0] = 0;
    v74[1] = 0;
    uint64_t v72 = (uint64_t **)&v73;
    uint64_t v73 = v74;
    long long v107 = xmmword_20F90EBB0;
    std::vector<int>::vector[abi:ne180100](&v69, &v107, 4uLL);
    int v42 = v69;
    if ((char *)v77.__end_ - (char *)v77.__begin_ != v70 - (unsigned char *)v69
      || memcmp(v77.__begin_, v69, (char *)v77.__end_ - (char *)v77.__begin_))
    {
      BOOL v43 = 0;
      if (!v42) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    long long v106 = xmmword_20F91B060;
    std::vector<int>::vector[abi:ne180100](&v66, &v106, 4uLL);
    uint64_t v54 = v66;
    if ((char *)v76.__end_ - (char *)v76.__begin_ == v67 - (unsigned char *)v66
      && !memcmp(v76.__begin_, v66, (char *)v76.__end_ - (char *)v76.__begin_))
    {
      long long v105 = xmmword_20F91B070;
      std::vector<int>::vector[abi:ne180100](&__p, &v105, 4uLL);
      uint64_t v56 = __p;
      BOOL v43 = (char *)v75.__end_ - (char *)v75.__begin_ == v65 - (unsigned char *)__p
         && memcmp(v75.__begin_, __p, (char *)v75.__end_ - (char *)v75.__begin_) == 0;
      if (v56)
      {
        uint64_t v65 = v56;
        operator delete(v56);
      }
      uint64_t v54 = v66;
      if (!v66)
      {
LABEL_116:
        int v42 = v69;
        if (!v69)
        {
LABEL_62:
          if (v43) {
            goto LABEL_68;
          }
          *(void *)&long long v107 = 0x100000000;
          DWORD2(v107) = 2;
          std::vector<int>::vector[abi:ne180100](&v69, &v107, 3uLL);
          BOOL v44 = v69;
          if ((char *)v77.__end_ - (char *)v77.__begin_ != v70 - (unsigned char *)v69
            || memcmp(v77.__begin_, v69, (char *)v77.__end_ - (char *)v77.__begin_))
          {
            BOOL v45 = 0;
            if (!v44) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }
          *(void *)&long long v106 = 0x100000002;
          DWORD2(v106) = 3;
          std::vector<int>::vector[abi:ne180100](&v66, &v106, 3uLL);
          uint64_t v55 = v66;
          if ((char *)v76.__end_ - (char *)v76.__begin_ == v67 - (unsigned char *)v66
            && !memcmp(v76.__begin_, v66, (char *)v76.__end_ - (char *)v76.__begin_))
          {
            *(void *)&long long v105 = 0x100000000;
            DWORD2(v105) = 3;
            std::vector<int>::vector[abi:ne180100](&__p, &v105, 3uLL);
            uint64_t v57 = __p;
            BOOL v45 = (char *)v75.__end_ - (char *)v75.__begin_ == v65 - (unsigned char *)__p
               && memcmp(v75.__begin_, __p, (char *)v75.__end_ - (char *)v75.__begin_) == 0;
            if (v57)
            {
              uint64_t v65 = v57;
              operator delete(v57);
            }
            uint64_t v55 = v66;
            if (!v66)
            {
LABEL_122:
              BOOL v44 = v69;
              if (!v69)
              {
LABEL_67:
                if (!v45)
                {
                  uint64_t v53 = (std::__shared_weak_count *)a4[1];
                  uint64_t v62 = *a4;
                  uint64_t v63 = v53;
                  if (v53) {
                    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v60, "invalid or unsupported equation.");
                  MIL::ValidationResult::ValidationResult(a7, &v62, 315, v60);
                  if (v61 < 0) {
                    operator delete(v60[0]);
                  }
                  if (v63) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
                  }
                  goto LABEL_74;
                }
LABEL_68:
                if (a5 && a6)
                {
                  uint64_t v46 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 96))(a1);
                  uint64_t v69 = 0;
                  uint64_t v70 = 0;
                  uint64_t v71 = 0;
                  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v69, *(const void **)v46, *(void *)(v46 + 8), (uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 3);
                  uint64_t v47 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2);
                  uint64_t v66 = 0;
                  unint64_t v67 = 0;
                  uint64_t v68 = 0;
                  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v66, *(const void **)v47, *(void *)(v47 + 8), (uint64_t)(*(void *)(v47 + 8) - *(void *)v47) >> 3);
                  *(void *)&long long v107 = &v69;
                  *((void *)&v107 + 1) = &v66;
                  *(void *)&long long v106 = MIL::IRConstantDimension::Make(a5, (MIL::MILContext *)1);
                  std::vector<MIL::IRDimension const*>::vector(&__p, v59, &v106);
                  *((void *)__p + v59 - 1) = *((void *)v66 + v59 - 1);
                  *((void *)__p + v58) = *((void *)v69 + v58);
                  *((void *)__p + v59 - 2) = v48;
                  if (v59 == 4)
                  {
                    *(void *)std::string __p = v49;
                  }
                  (*(void (**)(MIL::IRTensorValueType *))(*(void *)a1 + 88))(a1);
                  MIL::IRTensorValueType::MakeWithShape();
                }
                MIL::ValidationResult::ValidationResult(a7);
LABEL_74:
                std::__tree<float>::destroy((uint64_t)&v73, v74[0]);
                if (v75.__begin_)
                {
                  v75.__end_ = v75.__begin_;
                  operator delete(v75.__begin_);
                }
                if (v76.__begin_)
                {
                  v76.__end_ = v76.__begin_;
                  operator delete(v76.__begin_);
                }
                if (v77.__begin_)
                {
                  v77.__end_ = v77.__begin_;
                  operator delete(v77.__begin_);
                }
LABEL_92:
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v82.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v83.__r_.__value_.__l.__data_);
                }
                goto LABEL_102;
              }
LABEL_66:
              uint64_t v70 = v44;
              operator delete(v44);
              goto LABEL_67;
            }
          }
          else
          {
            BOOL v45 = 0;
            if (!v55) {
              goto LABEL_122;
            }
          }
          unint64_t v67 = v55;
          operator delete(v55);
          goto LABEL_122;
        }
LABEL_61:
        uint64_t v70 = v42;
        operator delete(v42);
        goto LABEL_62;
      }
    }
    else
    {
      BOOL v43 = 0;
      if (!v54) {
        goto LABEL_116;
      }
    }
    unint64_t v67 = v54;
    operator delete(v54);
    goto LABEL_116;
  }
LABEL_80:
  BOOL v50 = (std::__shared_weak_count *)a4[1];
  uint64_t v90 = *a4;
  uint64_t v91 = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "Invalid equation");
  MIL::ValidationResult::ValidationResult(a7, &v90, 315, v88);
  if (v89 < 0) {
    operator delete(v88[0]);
  }
  uint64_t v24 = v91;
  if (v91) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
}

void sub_20F56193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  std::__tree<float>::destroy((uint64_t)&a26, (void *)a27);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear(uint64_t a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v35, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  int v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  std::string v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  uint64_t v11 = *(void *)(v36 - 8);
  if (v11 == *(void *)(v33 - 8)
    || (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11)
    && (uint64_t v12 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(v36 - 8)),
        !(*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12)))
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    std::string __p = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
    *(void *)(v30 - 8) = *v32;
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The last dimension of x and the last dimension of weight should be compatible, but they are ", 92);
  (*(void (**)(void **__return_ptr))(**(void **)(v36 - 8) + 40))(v27);
  if ((v28 & 0x80u) == 0) {
    int v15 = v27;
  }
  else {
    int v15 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v16 = v28;
  }
  else {
    uint64_t v16 = (uint64_t)v27[1];
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" and ", 5);
  (*(void (**)(void **__return_ptr))(**(void **)(v33 - 8) + 40))(v25);
  if ((v26 & 0x80u) == 0) {
    long long v19 = v25;
  }
  else {
    long long v19 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v20 = v26;
  }
  else {
    uint64_t v20 = (uint64_t)v25[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  exception = __cxa_allocate_exception(0x48uLL);
  uint64_t v22 = a2[1];
  *(void *)&long long v24 = *a2;
  *((void *)&v24 + 1) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationError::ValidationError((uint64_t)exception, &v24, (uint64_t)&v23, 315);
}

void sub_20F561FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v35) {
    __cxa_free_exception(v34);
  }
  std::ostringstream::~ostringstream((uint64_t)&a29);
  std::string::size_type v38 = *(void **)(v36 - 112);
  if (v38)
  {
    *(void *)(v36 - 104) = v38;
    operator delete(v38);
  }
  std::string::size_type v39 = *(void **)(v36 - 88);
  if (v39)
  {
    *(void *)(v36 - 80) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void sub_20F5620BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    JUMPOUT(0x20F5620B0);
  }
  JUMPOUT(0x20F5620B4);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMatMul(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v14 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  uint64_t v7 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  int v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  if (v14 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_x");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v10 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (v14 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_y");
  uint64_t v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v12 = MIL::IRValue::GetScalar<BOOL>(v11);
  if (v14 < 0) {
    operator delete(__p);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v6 + 88))(v6);
  MIL::ValueTypeInferenceUtils::GetMatmulOutShape(a1, v6, v8, v10, v12, (unint64_t *)&__p);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F562270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceEinsum(MIL::IRConstantDimension **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(&v31, *((void **)v8 + 5), *((void **)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 4);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v32 - (void)v31 != 32)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v17 = a2[1];
    *(void *)&long long v30 = *a2;
    *((void *)&v30 + 1) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v29, "Inputs 'values' must be of length 2");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v30, (uint64_t)v29, 315);
  }
  uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v31);
  int v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
  uint64_t v11 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(v31[2]);
  int v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "equation");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  MIL::IRValue::GetScalar<std::string>(SingleValue, &v28);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v27 = 0;
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    BOOL v18 = __cxa_allocate_exception(0x48uLL);
    uint64_t v19 = a2[1];
    *(void *)&long long v24 = *a2;
    *((void *)&v24 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t Message = MIL::MILResult::GetMessage((MIL::MILResult *)__p);
    if (*(char *)(Message + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)Message, *(void *)(Message + 8));
    }
    else
    {
      long long v21 = *(_OWORD *)Message;
      v23.__r_.__value_.__r.__words[2] = *(void *)(Message + 16);
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v21;
    }
    uint64_t Reason = MIL::ValidationResult::GetReason((MIL::ValidationResult *)__p);
    MIL::ValidationError::ValidationError((uint64_t)v18, &v24, (uint64_t)&v23, Reason);
  }
  uint64_t v14 = v27;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int v15 = operator new(8uLL);
  *a4 = v15;
  *v15++ = v14;
  a4[1] = v15;
  a4[2] = v15;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  __p[0] = &v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20F562548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v40) {
    __cxa_free_exception(v39);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a17);
  if (a33 < 0) {
    operator delete(a28);
  }
  a17 = v41 - 88;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_20F562624(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20F56261CLL);
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::string const&,std::shared_ptr<MIL::Location const> &,MIL::MILContext *,MIL::IRValueType const**)::$_0::operator()(uint64_t ***a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a4[1] != *a4)
  {
    unint64_t v8 = 0;
    do
    {
      char v20 = 0;
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v9 = a3;
      }
      else {
        uint64_t v9 = (uint64_t *)*a3;
      }
      int v10 = *((char *)v9 + v8);
      char v20 = v10;
      uint64_t v11 = *a1;
      uint64_t v12 = (uint64_t)(*a1)[1];
      if (!v12) {
        goto LABEL_16;
      }
      uint64_t v13 = (uint64_t)(*a1 + 1);
      do
      {
        int v14 = *(char *)(v12 + 28);
        BOOL v15 = v14 < v10;
        if (v14 >= v10) {
          uint64_t v16 = (uint64_t *)v12;
        }
        else {
          uint64_t v16 = (uint64_t *)(v12 + 8);
        }
        if (!v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }
      while (*v16);
      if ((uint64_t **)v13 == *a1 + 1 || v10 < *(char *)(v13 + 28))
      {
LABEL_16:
        long long v21 = &v20;
        *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(v11, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 8) = a2;
        a2 = (a2 + 1);
        uint64_t v11 = *a1;
      }
      long long v21 = &v20;
      uint64_t v17 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(v11, &v20, (uint64_t)&std::piecewise_construct, &v21);
      uint64_t v18 = *a4;
      *(_DWORD *)(*a4 + 4 * v8++) = *((_DWORD *)v17 + 8);
    }
    while (v8 < (a4[1] - v18) >> 2);
  }
  return a2;
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::string const&,std::shared_ptr<MIL::Location const> &,MIL::MILContext *,MIL::IRValueType const**)::$_1::operator()(void **a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(**a1 + 8 * a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4))
  {
    char v5 = a1;
  }
  else
  {
    char v5 = a1 + 1;
    uint64_t v6 = *(void *)(*a1[1] + 8 * a2);
    if (!(*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6))
    {
      uint64_t v7 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(**a1 + 8 * a2));
      unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      uint64_t v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 8 * a2));
      if (v8 > (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9)) {
        char v5 = a1;
      }
    }
  }
  return *(void *)(**v5 + 8 * a2);
}

uint64_t **std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t **a1, char *a2, uint64_t a3, unsigned char **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((char *)v6 + 28);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void MIL::Operators::Common::ios15::Einsum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F563494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a51);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  uint64_t v53 = *(void **)(v51 - 136);
  if (v53)
  {
    *(void *)(v51 - 128) = v53;
    operator delete(v53);
  }
  uint64_t v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(void *)(v51 - 88) = v54;
    operator delete(v54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

void sub_20F563874()
{
}

void MIL::Operators::Common::ios15::Linear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F564C5C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x270];
  STACK[0x270] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x268]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x268]);
  }
  uint64_t v4 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x278], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::MatMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F566358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 8))(a63);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  long long v74 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateMakeList(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v66, "init_length");
  if (MIL::IROperation::TryGetParameterValue(this, (uint64_t)v66, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v63, "init_length");
    Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
    BOOL v6 = (int)MIL::IRValue::GetScalar<int>(ParameterValue) < 1;
    if (SHIBYTE(v65) < 0) {
      operator delete(v63);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  if (v67 < 0)
  {
    operator delete(v66[0]);
    if (v6) {
      goto LABEL_7;
    }
  }
  else if (v6)
  {
LABEL_7:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v8 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v61 = *LocationPtr;
    uint64_t v62 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Param init_length of operator 'make_list' must be greater than or equal to 1");
    MIL::ValidationResult::ValidationResult(a2, &v61, 315, __p);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    return;
  }
  uint64_t v9 = (const void ***)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 160))(this);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)v66, v9);
  unint64_t v10 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "elem_shape");
    uint64_t v68 = v57;
    uint64_t v11 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66, (const void **)v57, (uint64_t)&std::piecewise_construct, (_OWORD **)&v68);
    uint64_t v13 = *((void *)v11 + 7);
    uint64_t v12 = *((void *)v11 + 8);
    if (v58 < 0) {
      operator delete(v57[0]);
    }
    if (v10 >= (v12 - v13) >> 4)
    {
      if (v64 == v63 || (unint64_t)(v64 - v63) >= 0x11)
      {
        uint64_t v41 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        int v42 = (std::__shared_weak_count *)v41[1];
        uint64_t v47 = *v41;
        uint64_t v48 = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v45, "Param elem_shape of operator 'make_list' can have minimum 1 and maximum 4 dimensions specified");
        MIL::ValidationResult::ValidationResult(a2, &v47, 315, v45);
        if (v46 < 0) {
          operator delete(v45[0]);
        }
        int v40 = v48;
        if (v48) {
          goto LABEL_65;
        }
      }
      else
      {
        MIL::ValidationResult::ValidationResult(a2);
      }
      goto LABEL_66;
    }
    std::string::basic_string[abi:ne180100]<0>(v57, "elem_shape");
    Parameteruint64_t Type = MIL::IROperation::GetParameterType(this);
    if (v58 < 0) {
      operator delete(v57[0]);
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 16))(ParameterType) != 1
      || (v15 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 24))(ParameterType), (uint64_t v16 = v15) == 0)
      || (*(unsigned int (**)(uint64_t))(*(void *)v15 + 88))(v15) != 3
      && (*(unsigned int (**)(uint64_t))(*(void *)v16 + 88))(v16) != 11)
    {
      std::string::size_type v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      std::string::size_type v39 = (std::__shared_weak_count *)v38[1];
      uint64_t v55 = *v38;
      uint64_t v56 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v53, "elem_shape of operator 'make_list' should be tuple of int or string");
      MIL::ValidationResult::ValidationResult(a2, &v55, 315, v53);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      int v40 = v56;
      if (v56) {
        goto LABEL_65;
      }
      goto LABEL_66;
    }
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 24))(ParameterType);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 88))(v17) != 3) {
      break;
    }
    uint64_t v18 = v64;
    if (v64 >= v65)
    {
      char v26 = v63;
      uint64_t v27 = (v64 - v63) >> 2;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v65 - v63;
      if ((v65 - v63) >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v65, v30);
        char v26 = v63;
        uint64_t v18 = v64;
      }
      else
      {
        uint64_t v31 = 0;
      }
      int v35 = &v31[4 * v27];
      *(_DWORD *)int v35 = 1;
      uint64_t v19 = v35 + 4;
      while (v18 != v26)
      {
        int v36 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v35 - 1) = v36;
        v35 -= 4;
      }
LABEL_56:
      uint64_t v63 = v35;
      uint64_t v64 = v19;
      uint64_t v65 = &v31[4 * v30];
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_58;
    }
    *(_DWORD *)uint64_t v64 = 1;
    uint64_t v19 = v18 + 4;
LABEL_58:
    uint64_t v64 = v19;
LABEL_59:
    ++v10;
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "elem_shape");
  char v20 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v57, v10);
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v20)
  {
    long long v21 = (uint64_t *)MIL::IRValue::AsTensor(v20);
    v57[0] = (void *)MIL::IRTensorValue::GetDataView<int>(v21);
    v57[1] = v22;
    std::string v23 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v57, 0);
    long long v24 = v23;
    long long v25 = v64;
    if (v64 < v65)
    {
      *(_DWORD *)uint64_t v64 = *v23;
      uint64_t v64 = v25 + 4;
      goto LABEL_59;
    }
    char v26 = v63;
    uint64_t v32 = (v64 - v63) >> 2;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v65 - v63;
    if ((v65 - v63) >> 1 > v33) {
      unint64_t v33 = v34 >> 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v33;
    }
    if (v30)
    {
      uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v65, v30);
      char v26 = v63;
      long long v25 = v64;
    }
    else
    {
      uint64_t v31 = 0;
    }
    int v35 = &v31[4 * v32];
    *(_DWORD *)int v35 = *v24;
    uint64_t v19 = v35 + 4;
    while (v25 != v26)
    {
      int v37 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *((_DWORD *)v35 - 1) = v37;
      v35 -= 4;
    }
    goto LABEL_56;
  }
  BOOL v43 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  BOOL v44 = (std::__shared_weak_count *)v43[1];
  uint64_t v51 = *v43;
  uint64_t v52 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v49, "elem_shape of operator 'make_list' should be tuple of const values");
  MIL::ValidationResult::ValidationResult(a2, &v51, 315, v49);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  int v40 = v52;
  if (v52) {
LABEL_65:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_66:
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)v66, v66[1]);
}

void sub_20F566F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  uint64_t v48 = *(void **)(v46 - 152);
  if (v48)
  {
    *(void *)(v46 - 144) = v48;
    operator delete(v48);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v46 - 128, *(void **)(v46 - 120));
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 4 * a2;
}

void sub_20F5670D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListGather(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ls");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = MIL::IRValueType::AsListType(SingleValueType);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  BOOL v6 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5);
  uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  int v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  __p[1] = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  std::vector<MIL::IRDimension const*>::insert((uint64_t)__p, (char *)__p[0], (char *)&v11);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5672A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  BOOL v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    char v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        std::string v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v8, v22);
        char v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)char v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    uint64_t v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_20F5674F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMakeList(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "dtype");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  unint64_t v7 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  MIL::IRValue::GetScalar<std::string>(v7, &v38);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  MIL::StringToIRDataType((const void **)&v38.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "elem_shape");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  int v36 = 0;
  int v37 = 0;
  std::vector<std::string const*>::reserve(&__p, (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 4);
  uint64_t v9 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((void *)v8 + 5);
  uint64_t v10 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((void *)v8 + 6);
  if (v9 == v10) {
LABEL_39:
  }
    MIL::IRTensorValueType::MakeWithShape();
  while (1)
  {
    uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v9);
    uint64_t v12 = MIL::IRValueType::AsTensorType(ValueType);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 88))(v12) == 3)
    {
      uint64_t v13 = MIL::IRUnknownDimension::Make(*a1, 0);
      unint64_t v14 = v36;
      if (v36 >= (uint64_t *)v37)
      {
        uint64_t v15 = ((char *)v36 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = (v37 - (unsigned char *)__p) >> 2;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        if ((unint64_t)(v37 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v37, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        long long v25 = (uint64_t *)&v18[8 * v15];
        uint64_t *v25 = v13;
        unint64_t v22 = v25 + 1;
        uint64_t v27 = (char *)__p;
        char v26 = (char *)v36;
        if (v36 != __p)
        {
          do
          {
            uint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            *--long long v25 = v28;
          }
          while (v26 != v27);
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t Value = (MIL::IRValue *)MIL::IRTypedArgument::GetValue(*v9);
      char v20 = (const void *)MIL::IRValue::AsTensor(Value);
      int v21 = MIL::IRValue::GetScalar<int>(v20);
      if (v21 <= 0)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        uint64_t v32 = a2[1];
        *(void *)&long long v34 = *a2;
        *((void *)&v34 + 1) = v32;
        if (v32) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v33, "elem_shape values must be > 0");
        MIL::ValidationError::ValidationError((uint64_t)exception, &v34, (uint64_t)v33, 315);
      }
      uint64_t v13 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v21);
      unint64_t v14 = v36;
      if (v36 >= (uint64_t *)v37)
      {
        uint64_t v23 = ((char *)v36 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = (v37 - (unsigned char *)__p) >> 2;
        if (v24 <= v23 + 1) {
          unint64_t v24 = v23 + 1;
        }
        if ((unint64_t)(v37 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v24;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v37, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        long long v25 = (uint64_t *)&v18[8 * v23];
        uint64_t *v25 = v13;
        unint64_t v22 = v25 + 1;
        uint64_t v29 = (char *)__p;
        char v26 = (char *)v36;
        if (v36 != __p)
        {
          do
          {
            uint64_t v30 = *((void *)v26 - 1);
            v26 -= 8;
            *--long long v25 = v30;
          }
          while (v26 != v29);
LABEL_35:
          char v26 = (char *)__p;
        }
LABEL_36:
        std::string __p = v25;
        int v36 = v22;
        int v37 = &v18[8 * v17];
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_38;
      }
    }
    uint64_t *v14 = v13;
    unint64_t v22 = v14 + 1;
LABEL_38:
    int v36 = v22;
    v9 += 2;
    if (v9 == v10) {
      goto LABEL_39;
    }
  }
}

void sub_20F5679E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v39) {
    __cxa_free_exception(v38);
  }
  if (a33) {
    operator delete(a33);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListLength()
{
}

void *MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListRead@<X0>(void *a1@<X2>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ls");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a1, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = MIL::IRValueType::AsListType(SingleValueType);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v7 = operator new(8uLL);
  *a2 = v7;
  *unint64_t v7 = v6;
  unint64_t result = v7 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void sub_20F567BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::ListGather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5687B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v51 - 112));
  if (a39) {
    (*(void (**)(uint64_t))(*(void *)a39 + 8))(a39);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  uint64_t v53 = *(void **)(v51 - 136);
  if (v53)
  {
    *(void *)(v51 - 128) = v53;
    operator delete(v53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ListLength::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5691E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int16 a35,char a36,char a37)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v37 - 112));
  if (a25) {
    (*(void (**)(void *))(*(void *)a25 + 8))(a25);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a28, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a34, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ListRead::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F569D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v49 - 112));
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 8))(a35);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a36, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v49 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ListScatter::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F56B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  uint64_t v65 = *(void **)(v63 - 136);
  if (v65)
  {
    *(void *)(v63 - 128) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ListWrite::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F56C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v54 - 112));
  if (a41) {
    (*(void (**)(uint64_t))(*(void *)a41 + 8))(a41);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v54 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::MakeList::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F56D464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F56D908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[3],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[3],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F56D9A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[3],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F56D9F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F56DA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F56DB0C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F56DB5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateCond(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const MIL::IROperation *))(*(void *)this + 208))(this, a2);
  if (*(void *)(*(void *)v5 + 8) - **(void **)v5 != 32)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v27 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v87 = *LocationPtr;
    uint64_t v88 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    uint64_t v29 = (char *)v28;
    if (*(char *)(v28 + 23) >= 0) {
      size_t v30 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      size_t v30 = *(void *)(v28 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v85, v30 + 29);
    if (v86 >= 0) {
      uint64_t v31 = v85;
    }
    else {
      uint64_t v31 = (void **)v85[0];
    }
    if (v30)
    {
      if (v29[23] >= 0) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = *(char **)v29;
      }
      memmove(v31, v32, v30);
    }
    strcpy((char *)v31 + v30, " must have exactly two blocks");
    MIL::ValidationResult::ValidationResult(a3, &v87, 308, v85);
    if (v86 < 0) {
      operator delete(v85[0]);
    }
    unint64_t v33 = v88;
    if (!v88) {
      return;
    }
LABEL_49:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    return;
  }
  uint64_t v6 = *(uint64_t ***)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this
                                                                                                  + 208))(this);
  if (v6[1] == *v6
    || (uint64_t v7 = **v6,
        uint64_t v8 = *(void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 208))(this),
        v8[1] - *v8 <= 0x10uLL))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v9 = *(void *)(*v8 + 16);
  char v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 88))(v9);
  if (v10[1] - *v10 != v11[1] - *v11)
  {
    long long v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v35 = (std::__shared_weak_count *)v34[1];
    uint64_t v83 = *v34;
    uint64_t v84 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    uint64_t v37 = (char *)v36;
    if (*(char *)(v36 + 23) >= 0) {
      size_t v38 = *(unsigned __int8 *)(v36 + 23);
    }
    else {
      size_t v38 = *(void *)(v36 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v81, v38 + 53);
    if (v82 >= 0) {
      int v39 = v81;
    }
    else {
      int v39 = (void **)v81[0];
    }
    if (v38)
    {
      if (v37[23] >= 0) {
        uint64_t v40 = v37;
      }
      else {
        uint64_t v40 = *(char **)v37;
      }
      memmove(v39, v40, v38);
    }
    strcpy((char *)v39 + v38, " must return same number of values from both branches");
    MIL::ValidationResult::ValidationResult(a3, &v83, 102, v81);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    unint64_t v33 = v84;
    if (!v84) {
      return;
    }
    goto LABEL_49;
  }
  uint64_t v12 = v11;
  (*(void (**)(uint64_t *__return_ptr, MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 200))(&v79, this);
  uint64_t v13 = *v10;
  uint64_t v14 = v10[1];
  if (v80 - v79 == v14 - *v10)
  {
    if (v14 == v13)
    {
LABEL_15:
      MIL::ValidationResult::ValidationResult(a3);
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = v7 + 64;
      uint64_t v18 = v9 + 64;
      while (1)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v13 + v15, 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3) <= v16) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        char v20 = (const MIL::IRValueType *)v19;
        int v21 = (MIL *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, *v12 + v15, 1);
        if (MIL::IsEqualOrStrongerType(v20, v21, v22))
        {
          char v20 = v21;
        }
        else if ((MIL::IsEqualOrStrongerType(v21, v20, v23) & 1) == 0)
        {
          uint64_t v53 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
          uint64_t v54 = (char *)v53;
          if (*(char *)(v53 + 23) >= 0) {
            size_t v55 = *(unsigned __int8 *)(v53 + 23);
          }
          else {
            size_t v55 = *(void *)(v53 + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v74, v55 + 69);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v56 = &v74;
          }
          else {
            uint64_t v56 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          if (v55)
          {
            if (v54[23] >= 0) {
              uint64_t v57 = v54;
            }
            else {
              uint64_t v57 = *(char **)v54;
            }
            memmove(v56, v57, v55);
          }
          strcpy((char *)v56 + v55, " must return compatible types from both branches for output at index ");
          std::to_string(&v73, v16);
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v58 = &v73;
          }
          else {
            char v58 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v73.__r_.__value_.__l.__size_;
          }
          char v60 = std::string::append(&v74, (const std::string::value_type *)v58, size);
          uint64_t v48 = (std::string::value_type *)v60->__r_.__value_.__r.__words[0];
          std::string::size_type v61 = v60->__r_.__value_.__l.__size_;
          LODWORD(v68.__r_.__value_.__l.__data_) = v60->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v68.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v60->__r_.__value_.__r.__words[2]
                                                                             + 3);
          int v50 = SHIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v73.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          uint64_t v62 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          uint64_t v63 = (std::__shared_weak_count *)v62[1];
          uint64_t v71 = *v62;
          uint64_t v72 = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v50 < 0)
          {
            std::string::__init_copy_ctor_external(&v70, v48, v61);
          }
          else
          {
            v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
            v70.__r_.__value_.__l.__size_ = v61;
            LODWORD(v70.__r_.__value_.__r.__words[2]) = v68.__r_.__value_.__l.__data_;
            *(_DWORD *)((char *)&v70.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v68.__r_.__value_.__r.__words
                                                                                   + 3);
            *((unsigned char *)&v70.__r_.__value_.__s + 23) = v50;
          }
          MIL::ValidationResult::ValidationResult(a3, &v71, 103, &v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          uint64_t v64 = v72;
          if (v72) {
            goto LABEL_101;
          }
          goto LABEL_102;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v80 - v79) >> 3) <= v16) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v24 = (MIL::Validation *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 8) + 16))((char *)this + 64, v79 + v15, 1);
        if (!MIL::Validation::TypeShapeAndDataTypeMatch(v24, v20, v25)) {
          break;
        }
        ++v16;
        uint64_t v13 = *v10;
        v15 += 24;
        if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3)) {
          goto LABEL_15;
        }
      }
      (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
      std::operator+<char>();
      BOOL v43 = std::string::append(&v73, " for output at index ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v68, v16);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v45 = &v68;
      }
      else {
        BOOL v45 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = v68.__r_.__value_.__l.__size_;
      }
      uint64_t v47 = std::string::append(&v74, (const std::string::value_type *)v45, v46);
      uint64_t v48 = (std::string::value_type *)v47->__r_.__value_.__r.__words[0];
      std::string::size_type v49 = v47->__r_.__value_.__l.__size_;
      v69[0] = v47->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v69 + 3) = *(_DWORD *)((char *)&v47->__r_.__value_.__r.__words[2] + 3);
      int v50 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      uint64_t v51 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v52 = (std::__shared_weak_count *)v51[1];
      uint64_t v66 = *v51;
      char v67 = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v50 < 0)
      {
        std::string::__init_copy_ctor_external(&v65, v48, v49);
      }
      else
      {
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
        v65.__r_.__value_.__l.__size_ = v49;
        LODWORD(v65.__r_.__value_.__r.__words[2]) = v69[0];
        *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v69 + 3);
        *((unsigned char *)&v65.__r_.__value_.__s + 23) = v50;
      }
      MIL::ValidationResult::ValidationResult(a3, &v66, 103, &v65);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      uint64_t v64 = v67;
      if (v67) {
LABEL_101:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
LABEL_102:
      if (v50 < 0) {
        operator delete(v48);
      }
    }
  }
  else
  {
    uint64_t v41 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v42 = (std::__shared_weak_count *)v41[1];
    uint64_t v77 = *v41;
    uint64_t v78 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a3, &v77, 102, &__p);
    if (v76 < 0) {
      operator delete(__p);
    }
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
}

void sub_20F56E450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (v53 < 0) {
    operator delete(v52);
  }
  a39 = (void *)(v54 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Const::Make(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v3[0] = 0;
  v3[1] = 0;
  v2[0] = 0;
  v2[1] = 0;
  v7[0] = &unk_26C25E4A8;
  v7[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateConst;
  uint64_t v7[3] = v7;
  v6[0] = &unk_26C25F518;
  v6[3] = v6;
  MIL::IROperator::Make(__p, 0, 0, 1, 1, v3, v2, (uint64_t)v7, (uint64_t)v6);
}

void sub_20F56EA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__value_func[abi:ne180100](&a33);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  uint64_t v35 = *v33;
  uint64_t *v33 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConst(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "val");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute((uint64_t)this, (unsigned __int8 *)v24);
  uint64_t v6 = Attribute;
  if ((v25 & 0x80000000) == 0)
  {
    if (Attribute) {
      goto LABEL_3;
    }
LABEL_7:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v12 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v22 = *LocationPtr;
    uint64_t v23 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute val is undefined for const");
    MIL::ValidationResult::ValidationResult(a2, &v22, 315, __p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = v23;
    if (!v23) {
      return;
    }
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    return;
  }
  operator delete(v24[0]);
  if (!v6) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 176))(this);
  if (*(void *)(v7 + 8) == *(void *)v7) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = (MIL *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v7);
  uint64_t v9 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if (MIL::IsEqualOrStrongerType(Type, v9, v10))
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v14 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v18 = *v14;
  uint64_t v19 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "Attribute val has incompatible type with operation output");
  MIL::ValidationResult::ValidationResult(a2, &v18, 306, v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v13 = v19;
  if (v19) {
    goto LABEL_12;
  }
}

void sub_20F56ED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateWhileLoop(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const MIL::IROperation *))(*(void *)this + 208))(this, a2);
  if (*(void *)(*(void *)v5 + 8) - **(void **)v5 == 32)
  {
    std::string::basic_string[abi:ne180100]<0>(v227, "loop_vars");
    BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v227);
    BOOL v7 = IsParameterSet;
    if (SHIBYTE(v228) < 0)
    {
      operator delete((void *)v227[0]);
      if (v7)
      {
LABEL_4:
        uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 160))(this);
        std::string::basic_string[abi:ne180100]<0>(&v220, "loop_vars");
        uint64_t v9 = (void **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(v8, (const void **)&v220);
        v227[0] = 0;
        v227[1] = 0;
        uint64_t v228 = 0;
        std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(v227, *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
        if (SHIBYTE(v222) < 0) {
          operator delete(v220);
        }
        std::string::basic_string[abi:ne180100]<0>(&v220, "loop_vars");
        unsigned int v10 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const void ***))(*(void *)this + 152))(this, &v220);
        if (SHIBYTE(v222) < 0) {
          operator delete(v220);
        }
        uint64_t v11 = *(void *)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 208))(this);
        if (*(void *)(v11 + 8) == *(void *)v11) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v12 = **(void ***)v11;
        uint64_t v13 = *(void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 208))(this);
        if (v13[1] - *v13 <= 0x10uLL) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v14 = *(void **)(*v13 + 16);
        uint64_t v15 = (void **)(*(uint64_t (**)(void *))(*v12 + 40))(v12);
        v220 = 0;
        uint64_t v221 = 0;
        uint64_t v222 = 0;
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(&v220, *v15, v15[1], ((char *)v15[1] - (char *)*v15) >> 4);
        unint64_t v16 = (void **)(*(uint64_t (**)(void *))(*v14 + 40))(v14);
        unint64_t v217 = 0;
        uint64_t v218 = 0;
        uint64_t v219 = 0;
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(&v217, *v16, v16[1], ((char *)v16[1] - (char *)*v16) >> 4);
        uint64_t v17 = v10;
        if (v10 != (v221 - (uint64_t)v220) >> 4 || v10 != (v218 - (uint64_t)v217) >> 4)
        {
          LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          std::string v70 = (std::__shared_weak_count *)LocationPtr[1];
          uint64_t v215 = *LocationPtr;
          int64_t v216 = v70;
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v71 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
          uint64_t v72 = (char *)v71;
          if (*(char *)(v71 + 23) >= 0) {
            size_t v73 = *(unsigned __int8 *)(v71 + 23);
          }
          else {
            size_t v73 = *(void *)(v71 + 8);
          }
          std::string v74 = v213;
          std::string::basic_string[abi:ne180100]((uint64_t)v213, v73 + 96);
          if (v214 < 0) {
            std::string v74 = (void **)v213[0];
          }
          if (v73)
          {
            if (v72[23] >= 0) {
              std::vector<int> v75 = v72;
            }
            else {
              std::vector<int> v75 = *(char **)v72;
            }
            memmove(v74, v75, v73);
          }
          strcpy((char *)v74 + v73, " cond and body blocks must declare the same number of inputs as num arguments bound to loop_vars");
          MIL::ValidationResult::ValidationResult(a3, &v215, 100, v213);
          if (v214 < 0) {
            operator delete(v213[0]);
          }
          char v76 = v216;
          if (!v216) {
            goto LABEL_95;
          }
          goto LABEL_94;
        }
        uint64_t v173 = v14;
        v174 = a3;
        if (v10)
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          char v20 = v14 + 8;
          while (1)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "loop_vars");
            Parameteruint64_t Type = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v19 >= (v218 - (uint64_t)v217) >> 4) {
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t Name = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v217[v18]);
            uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v20 + 16))(v20, Name, 1);
            if (v19 >= (v221 - (uint64_t)v220) >> 4) {
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v24 = (MIL *)v23;
            uint64_t v25 = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v220[v18]);
            char v26 = (MIL *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v12[8] + 16))(v12 + 8, v25, 1);
            if ((MIL::IsEqualOrStrongerType(v26, ParameterType, v27) & 1) == 0) {
              break;
            }
            if (v24 != v26)
            {
              int v101 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              char v102 = (std::__shared_weak_count *)v101[1];
              uint64_t v202 = *v101;
              v203 = v102;
              if (v102) {
                atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v103 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this
                                                                                                  + 56))(this);
              int v104 = (char *)v103;
              if (*(char *)(v103 + 23) >= 0) {
                size_t v105 = *(unsigned __int8 *)(v103 + 23);
              }
              else {
                size_t v105 = *(void *)(v103 + 8);
              }
              long long v106 = &v206;
              std::string::basic_string[abi:ne180100]((uint64_t)&v206, v105 + 27);
              if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v106 = (std::string *)v206.__r_.__value_.__r.__words[0];
              }
              if (v105)
              {
                if (v104[23] >= 0) {
                  long long v107 = v104;
                }
                else {
                  long long v107 = *(char **)v104;
                }
                memmove(v106, v107, v105);
              }
              strcpy((char *)v106 + v105, " body block input at index ");
              std::to_string(&v205, v19);
              if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v108 = &v205;
              }
              else {
                uint64_t v108 = (std::string *)v205.__r_.__value_.__r.__words[0];
              }
              if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v205.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v205.__r_.__value_.__l.__size_;
              }
              char v110 = std::string::append(&v206, (const std::string::value_type *)v108, size);
              long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
              v207.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v111;
              v110->__r_.__value_.__l.__size_ = 0;
              v110->__r_.__value_.__r.__words[2] = 0;
              v110->__r_.__value_.__r.__words[0] = 0;
              uint64_t v112 = std::string::append(&v207, " must be the same type as its cond block input at index ");
              long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v113;
              v112->__r_.__value_.__l.__size_ = 0;
              v112->__r_.__value_.__r.__words[2] = 0;
              v112->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v204, v19);
              if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v114 = &v204;
              }
              else {
                int v114 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v115 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v115 = v204.__r_.__value_.__l.__size_;
              }
              int v116 = std::string::append(&__p, (const std::string::value_type *)v114, v115);
              long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              std::string::size_type v201 = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)int v200 = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v174, &v202, 304, v200);
              if (SHIBYTE(v201) < 0) {
                operator delete(v200[0]);
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v204.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v207.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v205.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v206.__r_.__value_.__l.__data_);
              }
              char v76 = v203;
              if (v203) {
                goto LABEL_94;
              }
              goto LABEL_95;
            }
            ++v19;
            v18 += 2;
            a3 = v174;
            if (v17 == v19) {
              goto LABEL_21;
            }
          }
          uint64_t v84 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          char v85 = (std::__shared_weak_count *)v84[1];
          uint64_t v210 = *v84;
          v211 = v85;
          if (v85) {
            atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v86 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
          uint64_t v87 = (char *)v86;
          if (*(char *)(v86 + 23) >= 0) {
            size_t v88 = *(unsigned __int8 *)(v86 + 23);
          }
          else {
            size_t v88 = *(void *)(v86 + 8);
          }
          char v89 = &v206;
          std::string::basic_string[abi:ne180100]((uint64_t)&v206, v88 + 28);
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v89 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          if (v88)
          {
            if (v87[23] >= 0) {
              uint64_t v90 = v87;
            }
            else {
              uint64_t v90 = *(char **)v87;
            }
            memmove(v89, v90, v88);
          }
          strcpy((char *)v89 + v88, " loop_var argument at index ");
          std::to_string(&v205, v19);
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v91 = &v205;
          }
          else {
            uint64_t v91 = (std::string *)v205.__r_.__value_.__r.__words[0];
          }
          if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v92 = v205.__r_.__value_.__l.__size_;
          }
          uint64_t v93 = std::string::append(&v206, (const std::string::value_type *)v91, v92);
          long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          v207.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          std::string v95 = std::string::append(&v207, " must be a compatible with its cond block input at index ");
          long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v204, v19);
          if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v97 = &v204;
          }
          else {
            unint64_t v97 = (std::string *)v204.__r_.__value_.__r.__words[0];
          }
          if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v98 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v98 = v204.__r_.__value_.__l.__size_;
          }
          uint64_t v99 = std::string::append(&__p, (const std::string::value_type *)v97, v98);
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          std::string::size_type v209 = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v208 = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(v174, &v210, 304, v208);
          if (SHIBYTE(v209) < 0) {
            operator delete(v208[0]);
          }
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v204.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v207.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v205.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v206.__r_.__value_.__l.__data_);
          }
          char v76 = v211;
          if (v211) {
            goto LABEL_94;
          }
          goto LABEL_95;
        }
LABEL_21:
        uint64_t v28 = (void *)(*(uint64_t (**)(void *))(*v12 + 88))(v12);
        if (v28[1] - *v28 != 24)
        {
          uint64_t v77 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          uint64_t v78 = (std::__shared_weak_count *)v77[1];
          uint64_t v198 = *v77;
          v199 = v78;
          if (v78) {
            atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v79 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
          uint64_t v80 = (char *)v79;
          if (*(char *)(v79 + 23) >= 0) {
            size_t v81 = *(unsigned __int8 *)(v79 + 23);
          }
          else {
            size_t v81 = *(void *)(v79 + 8);
          }
          char v82 = v196;
          std::string::basic_string[abi:ne180100]((uint64_t)v196, v81 + 43);
          if (v197 < 0) {
            char v82 = (void **)v196[0];
          }
          if (v81)
          {
            if (v80[23] >= 0) {
              uint64_t v83 = v80;
            }
            else {
              uint64_t v83 = *(char **)v80;
            }
            memmove(v82, v83, v81);
          }
          strcpy((char *)v82 + v81, " cond block body should output only 1 value");
          MIL::ValidationResult::ValidationResult(a3, &v198, 300, v196);
          if (v197 < 0) {
            operator delete(v196[0]);
          }
          char v76 = v199;
          if (!v199) {
            goto LABEL_95;
          }
          goto LABEL_94;
        }
        uint64_t v29 = (void *)(*(uint64_t (**)(void *))(*v12 + 88))(v12);
        if (v29[1] == *v29) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v30 = (*(uint64_t (**)(void *))(v12[8] + 16))(v12 + 8);
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30);
        uint64_t v32 = (MIL::IRTensorValueType *)v31;
        if (v31
          && ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 88))(v31) == 2
           || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v32 + 88))(v32) == 5))
        {
          if (MIL::IRTensorValueType::IsScalar(v32)) {
            goto LABEL_31;
          }
          unint64_t v33 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v32 + 96))(v32);
          if (v33[1] == *v33) {
            goto LABEL_306;
          }
          if (!(*(uint64_t (**)(void))(**(void **)*v33 + 16))()) {
            goto LABEL_31;
          }
          uint64_t v34 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v32 + 96))(v32);
          if (*(void *)(v34 + 8) == *(void *)v34) {
LABEL_306:
          }
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          uint64_t v35 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v34);
          if ((*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35) == 1)
          {
LABEL_31:
            uint64_t v36 = (uint64_t *)(*(uint64_t (**)(void *))(*v173 + 88))(v173);
            uint64_t v37 = v36[1];
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - *v36) >> 3) != v17)
            {
              v121 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              BOOL v122 = (std::__shared_weak_count *)v121[1];
              uint64_t v190 = *v121;
              int v191 = v122;
              if (v122) {
                atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v123 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" loop body's block output count must match the number of input variables bound to loop_vars. This count does not include any immediate constant bound to loop_vars", v123, v188);
              MIL::ValidationResult::ValidationResult(a3, &v190, 100, v188);
              if (v189 < 0) {
                operator delete(v188[0]);
              }
              char v76 = v191;
              if (!v191) {
                goto LABEL_95;
              }
              goto LABEL_94;
            }
            if (v37 != *v36)
            {
              uint64_t v38 = 0;
              uint64_t v39 = 0;
              unint64_t v40 = 0;
              while (1)
              {
                if (v40 >= (v218 - (uint64_t)v217) >> 4) {
                  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v41 = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v217[v39]);
                if (v40 >= (v218 - (uint64_t)v217) >> 4) {
                  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v42 = v41;
                uint64_t Type = MIL::IRNamedValueType::GetType((MIL::IRNamedValueType *)v217[v39]);
                uint64_t v44 = *v36;
                if (0xAAAAAAAAAAAAAAABLL * ((v36[1] - *v36) >> 3) <= v40) {
                  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                }
                BOOL v45 = (MIL *)Type;
                std::string::size_type v46 = (const MIL::IRValueType *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v173[8] + 16))(v173 + 8, v44 + v38, 1);
                if ((MIL::IsEqualOrStrongerType(v45, v46, v47) & 1) == 0) {
                  break;
                }
                ++v40;
                v39 += 2;
                v38 += 24;
                if (v40 >= 0xAAAAAAAAAAAAAAABLL * ((v36[1] - *v36) >> 3)) {
                  goto LABEL_39;
                }
              }
              v141 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              v142 = (std::__shared_weak_count *)v141[1];
              uint64_t v186 = *v141;
              uint64_t v187 = v142;
              if (v142) {
                atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v143 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this
                                                                                                  + 56))(this);
              BOOL v144 = (char *)v143;
              if (*(char *)(v143 + 23) >= 0) {
                size_t v145 = *(unsigned __int8 *)(v143 + 23);
              }
              else {
                size_t v145 = *(void *)(v143 + 8);
              }
              v146 = &v206;
              std::string::basic_string[abi:ne180100]((uint64_t)&v206, v145 + 23);
              if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v146 = (std::string *)v206.__r_.__value_.__r.__words[0];
              }
              if (v145)
              {
                if (v144[23] >= 0) {
                  uint64_t v147 = v144;
                }
                else {
                  uint64_t v147 = *(char **)v144;
                }
                memmove(v146, v147, v145);
              }
              strcpy((char *)v146 + v145, " body block input type ");
              int v148 = *(char *)(v42 + 23);
              if (v148 >= 0) {
                uint64_t v149 = (const std::string::value_type *)v42;
              }
              else {
                uint64_t v149 = *(const std::string::value_type **)v42;
              }
              if (v148 >= 0) {
                std::string::size_type v150 = *(unsigned __int8 *)(v42 + 23);
              }
              else {
                std::string::size_type v150 = *(void *)(v42 + 8);
              }
              int v151 = std::string::append(&v206, v149, v150);
              long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
              v207.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v152;
              v151->__r_.__value_.__l.__size_ = 0;
              v151->__r_.__value_.__r.__words[2] = 0;
              v151->__r_.__value_.__r.__words[0] = 0;
              uint64_t v153 = std::string::append(&v207, " is not compatible with the type of the corresponding body block output ");
              long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v154;
              v153->__r_.__value_.__l.__size_ = 0;
              v153->__r_.__value_.__r.__words[2] = 0;
              v153->__r_.__value_.__r.__words[0] = 0;
              int v155 = *(char *)(v44 + v38 + 23);
              if (v155 >= 0) {
                v156 = (const std::string::value_type *)(v44 + v38);
              }
              else {
                v156 = *(const std::string::value_type **)(v44 + v38);
              }
              if (v155 >= 0) {
                std::string::size_type v157 = *(unsigned __int8 *)(v44 + v38 + 23);
              }
              else {
                std::string::size_type v157 = *(void *)(v44 + v38 + 8);
              }
              v158 = std::string::append(&__p, v156, v157);
              if (SHIBYTE(v158->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v185, v158->__r_.__value_.__l.__data_, v158->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
                v185.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v159;
              }
              MIL::ValidationResult::ValidationResult(v174, &v186, 103, &v185);
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v185.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v207.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v206.__r_.__value_.__l.__data_);
              }
              char v76 = v187;
              if (!v187) {
                goto LABEL_95;
              }
LABEL_94:
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
LABEL_95:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              unint64_t v217 = (void ***)&v220;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
              v220 = v227;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
              return;
            }
LABEL_39:
            (*(void (**)(std::string *__return_ptr, MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 200))(&__p, this);
            if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == v36[1] - *v36)
            {
              if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
              {
LABEL_45:
                MIL::ValidationResult::ValidationResult(v174);
LABEL_231:
                v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                goto LABEL_95;
              }
              uint64_t v48 = 0;
              unint64_t v49 = 0;
              while (1)
              {
                Outputuint64_t Type = MIL::IROperation::GetOutputType(this, v49);
                if (0xAAAAAAAAAAAAAAABLL * ((v36[1] - *v36) >> 3) <= v49) {
                  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v51 = (MIL::Validation *)OutputType;
                uint64_t v52 = (const MIL::IRValueType *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v173[8] + 16))(v173 + 8, *v36 + v48, 1);
                if (!MIL::Validation::TypeShapeAndDataTypeMatch(v51, v52, v53)) {
                  break;
                }
                ++v49;
                v48 += 24;
                if (v49 >= 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3))
                  goto LABEL_45;
              }
              uint64_t v160 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              v161 = (std::__shared_weak_count *)v160[1];
              uint64_t v177 = *v160;
              v178 = v161;
              if (v161) {
                atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v162 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" output at index ", v162, (void **)&v205.__r_.__value_.__l.__data_);
              std::to_string(&v204, v49);
              if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v163 = &v204;
              }
              else {
                unint64_t v163 = (std::string *)v204.__r_.__value_.__r.__words[0];
              }
              if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v164 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v164 = v204.__r_.__value_.__l.__size_;
              }
              v165 = std::string::append(&v205, (const std::string::value_type *)v163, v164);
              long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
              v206.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v166;
              v165->__r_.__value_.__l.__size_ = 0;
              v165->__r_.__value_.__r.__words[2] = 0;
              v165->__r_.__value_.__r.__words[0] = 0;
              v167 = std::string::append(&v206, " must be the same type as the body block output at index ");
              long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              v207.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v180, v49);
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v169 = &v180;
              }
              else {
                uint64_t v169 = (std::string *)v180.__r_.__value_.__r.__words[0];
              }
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v170 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v170 = v180.__r_.__value_.__l.__size_;
              }
              v171 = std::string::append(&v207, (const std::string::value_type *)v169, v170);
              long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
              std::string::size_type v176 = v171->__r_.__value_.__r.__words[2];
              *(_OWORD *)v175 = v172;
              v171->__r_.__value_.__l.__size_ = 0;
              v171->__r_.__value_.__r.__words[2] = 0;
              v171->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v174, &v177, 103, v175);
              if (SHIBYTE(v176) < 0) {
                operator delete(v175[0]);
              }
              if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v180.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v207.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v206.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v204.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v205.__r_.__value_.__l.__data_);
              }
              long long v140 = v178;
              if (!v178) {
                goto LABEL_231;
              }
            }
            else
            {
              uint64_t v124 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              v125 = (std::__shared_weak_count *)v124[1];
              uint64_t v183 = *v124;
              v184 = v125;
              if (v125) {
                atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v126 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" returns ", v126, (void **)&v204.__r_.__value_.__l.__data_);
              unint64_t v127 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this
                                                                                                  + 192))(this);
              std::to_string(&v180, v127);
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v128 = &v180;
              }
              else {
                uint64_t v128 = (std::string *)v180.__r_.__value_.__r.__words[0];
              }
              if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v129 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v129 = v180.__r_.__value_.__l.__size_;
              }
              v130 = std::string::append(&v204, (const std::string::value_type *)v128, v129);
              long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
              v205.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v131;
              v130->__r_.__value_.__l.__size_ = 0;
              v130->__r_.__value_.__r.__words[2] = 0;
              v130->__r_.__value_.__r.__words[0] = 0;
              int v132 = std::string::append(&v205, " outputs, but its body block declares ");
              long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
              v206.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v133;
              v132->__r_.__value_.__l.__size_ = 0;
              v132->__r_.__value_.__r.__words[2] = 0;
              v132->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v179, 0xAAAAAAAAAAAAAAABLL * ((v36[1] - *v36) >> 3));
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v134 = &v179;
              }
              else {
                std::string::size_type v134 = (std::string *)v179.__r_.__value_.__r.__words[0];
              }
              if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v135 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v135 = v179.__r_.__value_.__l.__size_;
              }
              uint64_t v136 = std::string::append(&v206, (const std::string::value_type *)v134, v135);
              long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
              v207.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v137;
              v136->__r_.__value_.__l.__size_ = 0;
              v136->__r_.__value_.__r.__words[2] = 0;
              v136->__r_.__value_.__r.__words[0] = 0;
              v138 = std::string::append(&v207, " outputs.");
              long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
              std::string::size_type v182 = v138->__r_.__value_.__r.__words[2];
              *(_OWORD *)v181 = v139;
              v138->__r_.__value_.__l.__size_ = 0;
              v138->__r_.__value_.__r.__words[2] = 0;
              v138->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v174, &v183, 102, v181);
              if (SHIBYTE(v182) < 0) {
                operator delete(v181[0]);
              }
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v207.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v179.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v206.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v205.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v180.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v204.__r_.__value_.__l.__data_);
              }
              long long v140 = v184;
              if (!v184) {
                goto LABEL_231;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v140);
            goto LABEL_231;
          }
        }
        uint64_t v118 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        char v119 = (std::__shared_weak_count *)v118[1];
        uint64_t v194 = *v118;
        unint64_t v195 = v119;
        if (v119) {
          atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v120 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" cond block body should output a BOOLean or fp32 tensor of shape scalar or [1]", v120, v192);
        MIL::ValidationResult::ValidationResult(a3, &v194, 304, v192);
        if (v193 < 0) {
          operator delete(v192[0]);
        }
        char v76 = v195;
        if (!v195) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else if (IsParameterSet)
    {
      goto LABEL_4;
    }
    uint64_t v62 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v63 = (std::__shared_weak_count *)v62[1];
    uint64_t v225 = *v62;
    v226 = v63;
    if (v63) {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    std::string v65 = (char *)v64;
    if (*(char *)(v64 + 23) >= 0) {
      size_t v66 = *(unsigned __int8 *)(v64 + 23);
    }
    else {
      size_t v66 = *(void *)(v64 + 8);
    }
    char v67 = v223;
    std::string::basic_string[abi:ne180100]((uint64_t)v223, v66 + 33);
    if (v224 < 0) {
      char v67 = (void **)v223[0];
    }
    if (v66)
    {
      if (v65[23] >= 0) {
        std::string v68 = v65;
      }
      else {
        std::string v68 = *(char **)v65;
      }
      memmove(v67, v68, v66);
    }
    strcpy((char *)v67 + v66, " must define at least 1 loop_var.");
    MIL::ValidationResult::ValidationResult(a3, &v225, 317, v223);
    if (v224 < 0) {
      operator delete(v223[0]);
    }
    std::string::size_type v61 = v226;
    if (v226) {
LABEL_78:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  else
  {
    uint64_t v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    size_t v55 = (std::__shared_weak_count *)v54[1];
    uint64_t v231 = *v54;
    v232 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v56 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    uint64_t v57 = (char *)v56;
    if (*(char *)(v56 + 23) >= 0) {
      size_t v58 = *(unsigned __int8 *)(v56 + 23);
    }
    else {
      size_t v58 = *(void *)(v56 + 8);
    }
    std::vector<int>::size_type v59 = v229;
    std::string::basic_string[abi:ne180100]((uint64_t)v229, v58 + 29);
    if (v230 < 0) {
      std::vector<int>::size_type v59 = (void **)v229[0];
    }
    if (v58)
    {
      if (v57[23] >= 0) {
        char v60 = v57;
      }
      else {
        char v60 = *(char **)v57;
      }
      memmove(v59, v60, v58);
    }
    strcpy((char *)v59 + v58, " must have exactly two blocks");
    MIL::ValidationResult::ValidationResult(a3, &v231, 308, v229);
    if (v230 < 0) {
      operator delete(v229[0]);
    }
    std::string::size_type v61 = v232;
    if (v232) {
      goto LABEL_78;
    }
  }
}

void sub_20F570478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  a74 = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  a74 = (void *)(v75 - 240);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  *(void *)(v75 - 240) = v75 - 216;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v75 - 240));
  *(void *)(v75 - 216) = v75 - 152;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v75 - 216));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCond(MIL::IRUnknownDimension **a1@<X0>, void *a2@<X1>, MIL::IRValueType ****a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 48)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v23 = a2[1];
    *(void *)&long long v35 = *a2;
    *((void *)&v35 + 1) = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v34, "Output types of two and only two blocks have to be set to infer cond output types.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v35, (uint64_t)v34, 315);
  }
  uint64_t v8 = *v6;
  BOOL v7 = v6[1];
  uint64_t v9 = (char *)v7 - (char *)*v6;
  if (v9 != (char *)v6[4] - (char *)v6[3])
  {
    unint64_t v24 = __cxa_allocate_exception(0x48uLL);
    uint64_t v25 = a2[1];
    *(void *)&long long v33 = *a2;
    *((void *)&v33 + 1) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "Two blocks outputs must have same number of outputs.");
    MIL::ValidationError::ValidationError((uint64_t)v24, &v33, (uint64_t)v32, 315);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<std::string const*>::reserve((void **)a4, v9 >> 3);
  if (v7 != v8)
  {
    if ((*(uint64_t (**)(MIL::IRValueType *))(*(void *)***a3 + 24))(***a3)
      && (*(uint64_t (**)(void))(*(void *)*(*a3)[3] + 24))(*(*a3)[3]))
    {
      uint64_t v12 = MIL::IRValueType::AsTensorType(***a3);
      uint64_t v13 = MIL::IRValueType::AsTensorType(*(*a3)[3]);
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
      if (v14 == (*(unsigned int (**)(uint64_t))(*(void *)v13 + 88))(v13))
      {
        uint64_t v15 = *a1;
        unint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
        uint64_t v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 96))(v13);
        (*(void (**)(uint64_t))(*(void *)v12 + 88))(v12);
        MIL::IRTensorValueType::MakeWithShape();
      }
      char v20 = __cxa_allocate_exception(0x48uLL);
      uint64_t v21 = a2[1];
      *(void *)&long long v29 = *a2;
      *((void *)&v29 + 1) = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "Input a and input b should have the same dtype.");
      MIL::ValidationError::ValidationError((uint64_t)v20, &v29, (uint64_t)v28, 315);
    }
    uint64_t v18 = __cxa_allocate_exception(0x48uLL);
    uint64_t v19 = a2[1];
    *(void *)&long long v31 = *a2;
    *((void *)&v31 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v30, "The case of non-tensor blocks outputs has not been implemented yet.");
    MIL::ValidationError::ValidationError((uint64_t)v18, &v31, (uint64_t)v30, 315);
  }
}

void sub_20F570E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (v38) {
    __cxa_free_exception(v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::DeduceSameShape(MIL::IRUnknownDimension *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(a2);
  BOOL v9 = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(a3);
  int v10 = !v9;
  if (!HasVariadicUnknownDims || (v10 & 1) != 0)
  {
    if (!HasVariadicUnknownDims || v9)
    {
      if ((HasVariadicUnknownDims | v10))
      {
        unint64_t v82 = (a2[1] - *a2) >> 3;
        if (v82 != (a3[1] - *a3) >> 3)
        {
          exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
          MIL::UnknownLocation::Make(exception);
        }
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        std::vector<std::string const*>::reserve((void **)a4, v82);
        uint64_t v84 = *a2;
        if (a2[1] != *a2)
        {
          unint64_t v85 = 0;
          do
          {
            uint64_t v87 = CompatibleDim;
            char v89 = *(MIL::Operators::Common::ios15::_anonymous_namespace_ ***)(a4 + 8);
            unint64_t v88 = *(void *)(a4 + 16);
            if ((unint64_t)v89 >= v88)
            {
              uint64_t v91 = ((uint64_t)v89 - *(void *)a4) >> 3;
              if ((unint64_t)(v91 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v92 = v88 - *(void *)a4;
              uint64_t v93 = v92 >> 2;
              if (v92 >> 2 <= (unint64_t)(v91 + 1)) {
                uint64_t v93 = v91 + 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v93;
              }
              if (v94) {
                std::string v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v94);
              }
              else {
                std::string v95 = 0;
              }
              long long v96 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v95[8 * v91];
              *long long v96 = v87;
              uint64_t v90 = v96 + 1;
              std::string::size_type v98 = *(char **)a4;
              unint64_t v97 = *(char **)(a4 + 8);
              if (v97 != *(char **)a4)
              {
                do
                {
                  uint64_t v99 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((void *)v97 - 1);
                  v97 -= 8;
                  *--long long v96 = v99;
                }
                while (v97 != v98);
                unint64_t v97 = *(char **)a4;
              }
              *(void *)a4 = v96;
              *(void *)(a4 + 8) = v90;
              *(void *)(a4 + 16) = &v95[8 * v94];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *char v89 = CompatibleDim;
              uint64_t v90 = v89 + 1;
            }
            *(void *)(a4 + 8) = v90;
            ++v85;
            uint64_t v84 = *a2;
          }
          while (v85 < (a2[1] - *a2) >> 3);
        }
        return;
      }
      long long v100 = (char **)a4;
      int v101 = a3;
      char v102 = a2;
    }
    else
    {
      long long v100 = (char **)a4;
      int v101 = a2;
      char v102 = a3;
    }
  }
  else
  {
    unint64_t VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(a2);
    unint64_t v12 = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(a3);
    uint64_t v13 = (const void *)*a2;
    v123 = 0;
    unint64_t v124 = 0;
    BOOL v122 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v122, v13, (uint64_t)v13 + 8 * VariadicUnknownDimIndex, VariadicUnknownDimIndex);
    int v14 = (const void *)*a3;
    int v120 = 0;
    uint64_t v121 = 0;
    std::string __p = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&__p, v14, (uint64_t)v14 + 8 * v12, v12);
    unint64_t v115 = VariadicUnknownDimIndex;
    int v114 = a1;
    v125 = 0;
    uint64_t v126 = 0;
    v127[0] = 0;
    if ((v123 - (unsigned char *)v122) >> 3 <= (unint64_t)((v120 - (unsigned char *)__p) >> 3)) {
      unint64_t v15 = (v120 - (unsigned char *)__p) >> 3;
    }
    else {
      unint64_t v15 = (v123 - (unsigned char *)v122) >> 3;
    }
    std::vector<std::string const*>::reserve((void **)&v125, v15);
    if (v15)
    {
      unint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = v122;
        if (v17 >= (v123 - (unsigned char *)v122) >> 3) {
          break;
        }
        if (v17 >= (v120 - (unsigned char *)__p) >> 3)
        {
          uint64_t v23 = v126;
          if ((unint64_t)v126 >= v127[0])
          {
            int64_t v28 = (v126 - v125) >> 3;
            if ((unint64_t)(v28 + 1) >> 61) {
LABEL_165:
            }
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            unint64_t v29 = (uint64_t)(v127[0] - (void)v125) >> 2;
            if (v29 <= v28 + 1) {
              unint64_t v29 = v28 + 1;
            }
            if (v127[0] - (void)v125 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v29;
            }
            if (v26) {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v127, v26);
            }
            else {
              uint64_t v27 = 0;
            }
            uint64_t v32 = &v27[8 * v28];
            *(void *)uint64_t v32 = v18[v17];
            uint64_t v22 = v32 + 8;
            uint64_t v36 = v125;
            long long v33 = v126;
            if (v126 != v125)
            {
              do
              {
                uint64_t v37 = *((void *)v33 - 1);
                v33 -= 8;
                *((void *)v32 - 1) = v37;
                v32 -= 8;
              }
              while (v33 != v36);
              goto LABEL_50;
            }
            goto LABEL_51;
          }
LABEL_22:
          *(void *)uint64_t v23 = v18[v17];
          uint64_t v22 = v23 + 8;
          goto LABEL_53;
        }
        char v20 = v19;
        uint64_t v21 = v126;
        if ((unint64_t)v126 >= v127[0])
        {
          int64_t v30 = (v126 - v125) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = (uint64_t)(v127[0] - (void)v125) >> 2;
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          if (v127[0] - (void)v125 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v31;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v127, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v32 = &v27[8 * v30];
          *(void *)uint64_t v32 = v20;
          uint64_t v22 = v32 + 8;
          int v38 = v125;
          long long v33 = v126;
          if (v126 != v125)
          {
            do
            {
              uint64_t v39 = *((void *)v33 - 1);
              v33 -= 8;
              *((void *)v32 - 1) = v39;
              v32 -= 8;
            }
            while (v33 != v38);
            goto LABEL_50;
          }
          goto LABEL_51;
        }
        *(void *)uint64_t v126 = v19;
        uint64_t v22 = v21 + 8;
LABEL_53:
        uint64_t v126 = v22;
        if (++v17 == v15) {
          goto LABEL_54;
        }
      }
      uint64_t v18 = __p;
      uint64_t v23 = v126;
      if ((unint64_t)v126 >= v127[0])
      {
        int64_t v24 = (v126 - v125) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          goto LABEL_165;
        }
        unint64_t v25 = (uint64_t)(v127[0] - (void)v125) >> 2;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        if (v127[0] - (void)v125 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v127, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v32 = &v27[8 * v24];
        *(void *)uint64_t v32 = v18[v17];
        uint64_t v22 = v32 + 8;
        uint64_t v34 = v125;
        long long v33 = v126;
        if (v126 != v125)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
LABEL_50:
          long long v33 = v125;
        }
LABEL_51:
        v125 = v32;
        uint64_t v126 = v22;
        v127[0] = &v27[8 * v26];
        if (v33) {
          operator delete(v33);
        }
        goto LABEL_53;
      }
      goto LABEL_22;
    }
LABEL_54:
    if (__p)
    {
      int v120 = __p;
      operator delete(__p);
    }
    if (v122)
    {
      v123 = (char *)v122;
      operator delete(v122);
    }
    uint64_t v40 = a2[1];
    uint64_t v41 = (const void *)(*a2 + 8 * v115 + 8);
    int v120 = 0;
    uint64_t v121 = 0;
    std::string __p = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&__p, v41, v40, (v40 - (uint64_t)v41) >> 3);
    uint64_t v42 = a3[1];
    BOOL v43 = (const void *)(*a3 + 8 * v12 + 8);
    long long v117 = 0;
    uint64_t v118 = 0;
    int v116 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v116, v43, v42, (v42 - (uint64_t)v43) >> 3);
    BOOL v122 = 0;
    v123 = 0;
    unint64_t v124 = 0;
    if ((v120 - (unsigned char *)__p) >> 3 <= (unint64_t)((v117 - (unsigned char *)v116) >> 3)) {
      unint64_t v44 = (v117 - (unsigned char *)v116) >> 3;
    }
    else {
      unint64_t v44 = (v120 - (unsigned char *)__p) >> 3;
    }
    std::vector<std::string const*>::reserve(&v122, v44);
    if (v44)
    {
      uint64_t v46 = 0;
      while (1)
      {
        uint64_t v47 = __p;
        unint64_t v48 = v46 + ((v120 - (unsigned char *)__p) >> 3);
        unint64_t v49 = v116;
        uint64_t v50 = (v117 - (unsigned char *)v116) >> 3;
        uint64_t v51 = v48 - v44;
        if (v48 < v44) {
          break;
        }
        unint64_t v55 = v50 + v46;
        BOOL v56 = v55 >= v44;
        unint64_t v57 = v55 - v44;
        if (!v56)
        {
          int v53 = v123;
          if ((unint64_t)v123 >= v124)
          {
            int64_t v66 = (v123 - (unsigned char *)v122) >> 3;
            if ((unint64_t)(v66 + 1) >> 61) {
LABEL_164:
            }
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            unint64_t v67 = (uint64_t)(v124 - (void)v122) >> 2;
            if (v67 <= v66 + 1) {
              unint64_t v67 = v66 + 1;
            }
            if (v124 - (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v67;
            }
            if (v61) {
              uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v61);
            }
            else {
              uint64_t v62 = 0;
            }
            std::string v70 = &v62[8 * v66];
            *(void *)std::string v70 = v47[v51];
            size_t v58 = v70 + 8;
            std::string v74 = (char *)v122;
            uint64_t v71 = v123;
            if (v123 != v122)
            {
              do
              {
                uint64_t v75 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v70 - 1) = v75;
                v70 -= 8;
              }
              while (v71 != v74);
              goto LABEL_107;
            }
            goto LABEL_108;
          }
          uint64_t v54 = *((void *)__p + v51);
          goto LABEL_69;
        }
        uint64_t v64 = v63;
        std::string v65 = v123;
        if ((unint64_t)v123 >= v124)
        {
          int64_t v68 = (v123 - (unsigned char *)v122) >> 3;
          if ((unint64_t)(v68 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v69 = (uint64_t)(v124 - (void)v122) >> 2;
          if (v69 <= v68 + 1) {
            unint64_t v69 = v68 + 1;
          }
          if (v124 - (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v69;
          }
          if (v61) {
            uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v61);
          }
          else {
            uint64_t v62 = 0;
          }
          std::string v70 = &v62[8 * v68];
          *(void *)std::string v70 = v64;
          size_t v58 = v70 + 8;
          char v76 = (char *)v122;
          uint64_t v71 = v123;
          if (v123 != v122)
          {
            do
            {
              uint64_t v77 = *((void *)v71 - 1);
              v71 -= 8;
              *((void *)v70 - 1) = v77;
              v70 -= 8;
            }
            while (v71 != v76);
LABEL_107:
            uint64_t v71 = (char *)v122;
          }
LABEL_108:
          BOOL v122 = v70;
          v123 = v58;
          unint64_t v124 = (unint64_t)&v62[8 * v61];
          if (v71) {
            operator delete(v71);
          }
          goto LABEL_110;
        }
        *(void *)v123 = v63;
        size_t v58 = v65 + 8;
LABEL_110:
        v123 = v58;
        if (++v46 == v44) {
          goto LABEL_111;
        }
      }
      unint64_t v52 = v46 - v44 + v50;
      int v53 = v123;
      if ((unint64_t)v123 >= v124)
      {
        int64_t v59 = (v123 - (unsigned char *)v122) >> 3;
        if ((unint64_t)(v59 + 1) >> 61) {
          goto LABEL_164;
        }
        unint64_t v60 = (uint64_t)(v124 - (void)v122) >> 2;
        if (v60 <= v59 + 1) {
          unint64_t v60 = v59 + 1;
        }
        if (v124 - (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61) {
          uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v61);
        }
        else {
          uint64_t v62 = 0;
        }
        std::string v70 = &v62[8 * v59];
        *(void *)std::string v70 = v49[v52];
        size_t v58 = v70 + 8;
        uint64_t v72 = (char *)v122;
        uint64_t v71 = v123;
        if (v123 != v122)
        {
          do
          {
            uint64_t v73 = *((void *)v71 - 1);
            v71 -= 8;
            *((void *)v70 - 1) = v73;
            v70 -= 8;
          }
          while (v71 != v72);
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      uint64_t v54 = *((void *)v116 + v52);
LABEL_69:
      *(void *)int v53 = v54;
      size_t v58 = v53 + 8;
      goto LABEL_110;
    }
LABEL_111:
    if (v116)
    {
      long long v117 = v116;
      operator delete(v116);
    }
    if (__p)
    {
      int v120 = __p;
      operator delete(__p);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(a4, 0, v125, v126, (v126 - v125) >> 3);
    uint64_t v78 = MIL::IRUnknownDimension::Make(v114, (MIL::MILContext *)1);
    unint64_t v79 = *(void *)(a4 + 16);
    uint64_t v80 = *(uint64_t **)(a4 + 8);
    if ((unint64_t)v80 >= v79)
    {
      uint64_t v103 = ((uint64_t)v80 - *(void *)a4) >> 3;
      if ((unint64_t)(v103 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v104 = v79 - *(void *)a4;
      uint64_t v105 = v104 >> 2;
      if (v104 >> 2 <= (unint64_t)(v103 + 1)) {
        uint64_t v105 = v103 + 1;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v106 = v105;
      }
      if (v106) {
        long long v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v106);
      }
      else {
        long long v107 = 0;
      }
      uint64_t v108 = (uint64_t *)&v107[8 * v103];
      unint64_t v109 = &v107[8 * v106];
      uint64_t *v108 = v78;
      uint64_t v81 = (uint64_t)(v108 + 1);
      long long v111 = *(char **)a4;
      char v110 = *(char **)(a4 + 8);
      if (v110 != *(char **)a4)
      {
        do
        {
          uint64_t v112 = *((void *)v110 - 1);
          v110 -= 8;
          *--uint64_t v108 = v112;
        }
        while (v110 != v111);
        char v110 = *(char **)a4;
      }
      *(void *)a4 = v108;
      *(void *)(a4 + 8) = v81;
      *(void *)(a4 + 16) = v109;
      if (v110) {
        operator delete(v110);
      }
    }
    else
    {
      *uint64_t v80 = v78;
      uint64_t v81 = (uint64_t)(v80 + 1);
    }
    *(void *)(a4 + 8) = v81;
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(a4, v81, (char *)v122, v123, (v123 - (unsigned char *)v122) >> 3);
    if (v122)
    {
      v123 = (char *)v122;
      operator delete(v122);
    }
    if (v125)
    {
      uint64_t v126 = v125;
      operator delete(v125);
    }
  }
}

void sub_20F571900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v31 = *(void *)(v29 - 112);
  *(void *)(v29 - 112) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSelect(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "a");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  uint64_t v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  if (v10 != (*(unsigned int (**)(uint64_t))(*(void *)v9 + 88))(v9))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v16 = a2[1];
    *(void *)&long long v20 = *a2;
    *((void *)&v20 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "Two inputs should have the same dtype.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v20, (uint64_t)v19, 315);
  }
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v22 = 0;
  uint64_t v13 = (char *)*v11;
  uint64_t v14 = v11[1];
  if (*v11 == v14)
  {
    if (__p == (void **)v12) {
      goto LABEL_15;
    }
    uint64_t v13 = *(char **)v12;
    uint64_t v14 = *(void *)(v12 + 8);
  }
  else
  {
    if (*(void *)v12 != *(void *)(v12 + 8))
    {
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v17;
      uint64_t v22 = v18;
LABEL_15:
      (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
      MIL::IRTensorValueType::MakeWithShape();
    }
    if (__p == (void **)v11) {
      goto LABEL_15;
    }
  }
  std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)__p, v13, v14, (v14 - (uint64_t)v13) >> 3);
  goto LABEL_15;
}

void sub_20F571D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceWhileLoop@<X0>(void *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X4>, void *a4@<X8>)
{
  uint64_t v6 = *a3;
  if (a3[1] - *a3 != 48)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v17 = a1[1];
    *(void *)&long long v25 = *a1;
    *((void *)&v25 + 1) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "Output types of exactly two blocks have to be set to infer while_loop output types.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v25, (uint64_t)v24, 315);
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v6 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "loop_vars");
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = (v9 - v10) >> 3;
  uint64_t v13 = (uint64_t)(*((void *)v11 + 6) - *((void *)v11 + 5)) >> 4;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v12 != v13)
  {
    uint64_t v18 = __cxa_allocate_exception(0x48uLL);
    uint64_t v19 = a1[1];
    *(void *)&long long v21 = *a1;
    *((void *)&v21 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v20, "while_loop body block must output same number of values as input.");
    MIL::ValidationError::ValidationError((uint64_t)v18, &v21, (uint64_t)v20, 315);
  }
  uint64_t v14 = *a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  return std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(a4, *(const void **)(v14 + 24), *(void *)(v14 + 32), (uint64_t)(*(void *)(v14 + 32) - *(void *)(v14 + 24)) >> 3);
}

void sub_20F571F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v30) {
    __cxa_free_exception(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::DeduceSameShapeOneVariadic(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(a1);
  uint64_t v7 = a2[1] - *a2;
  if (((a1[1] - *a1) >> 3) - 1 > (unint64_t)(v7 >> 3))
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(exception);
  }
  uint64_t v8 = VariadicUnknownDimIndex;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::string const*>::reserve((void **)a3, v7 >> 3);
  uint64_t v57 = v8;
  unint64_t v10 = v8 - 1;
  if (v8 != 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v13 = CompatibleDim;
      unint64_t v15 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)a3[1];
      unint64_t v14 = (unint64_t)a3[2];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - *a3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v14 - (void)*a3;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v20);
        }
        else {
          long long v21 = 0;
        }
        uint64_t v22 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v21[8 * v17];
        char *v22 = v13;
        uint64_t v16 = (char *)(v22 + 1);
        int64_t v24 = *a3;
        char v23 = a3[1];
        if (v23 != *a3)
        {
          do
          {
            long long v25 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((void *)v23 - 1);
            v23 -= 8;
            *--uint64_t v22 = v25;
          }
          while (v23 != v24);
          char v23 = *a3;
        }
        *a3 = (char *)v22;
        a3[1] = v16;
        a3[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        MIL::IRUnknownDimension *v15 = CompatibleDim;
        uint64_t v16 = (char *)(v15 + 1);
      }
      a3[1] = v16;
      ++v11;
    }
    while (v11 != v10);
  }
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1] - *a2;
  unint64_t v28 = v57 + (v27 >> 3) - ((a1[1] - *a1) >> 3) + 1;
  if (v10 < v28)
  {
    uint64_t v29 = a3 + 2;
    int v30 = a3[1];
    do
    {
      uint64_t v31 = *a2;
      if ((unint64_t)v30 >= *v29)
      {
        uint64_t v32 = (v30 - *a3) >> 3;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = *v29 - (void)*a3;
        uint64_t v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = &v36[8 * v32];
        *(void *)uint64_t v37 = *(void *)(v31 + 8 * v10);
        int v30 = v37 + 8;
        uint64_t v39 = *a3;
        int v38 = a3[1];
        if (v38 != *a3)
        {
          do
          {
            uint64_t v40 = *((void *)v38 - 1);
            v38 -= 8;
            *((void *)v37 - 1) = v40;
            v37 -= 8;
          }
          while (v38 != v39);
          int v38 = *a3;
        }
        *a3 = v37;
        a3[1] = v30;
        a3[2] = &v36[8 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *(void *)int v30 = *(void *)(v31 + 8 * v10);
        v30 += 8;
      }
      a3[1] = v30;
      ++v10;
    }
    while (v10 < v28);
    uint64_t v26 = *a2;
    uint64_t v27 = a2[1] - *a2;
  }
  for (unint64_t i = v27 >> 3; v10 < i; unint64_t i = (a2[1] - *a2) >> 3)
  {
    BOOL v43 = v42;
    BOOL v45 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)a3[1];
    unint64_t v44 = (unint64_t)a3[2];
    if ((unint64_t)v45 >= v44)
    {
      uint64_t v47 = ((char *)v45 - *a3) >> 3;
      if ((unint64_t)(v47 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = v44 - (void)*a3;
      uint64_t v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
        uint64_t v49 = v47 + 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v49;
      }
      if (v50) {
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v50);
      }
      else {
        uint64_t v51 = 0;
      }
      unint64_t v52 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v51[8 * v47];
      *unint64_t v52 = v43;
      uint64_t v46 = (char *)(v52 + 1);
      uint64_t v54 = *a3;
      int v53 = a3[1];
      if (v53 != *a3)
      {
        do
        {
          unint64_t v55 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((void *)v53 - 1);
          v53 -= 8;
          *--unint64_t v52 = v55;
        }
        while (v53 != v54);
        int v53 = *a3;
      }
      *a3 = (char *)v52;
      a3[1] = v46;
      a3[2] = &v51[8 * v50];
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *BOOL v45 = v42;
      uint64_t v46 = (char *)(v45 + 1);
    }
    a3[1] = v46;
    ++v10;
    uint64_t v26 = *a2;
  }
}

void sub_20F57244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

MIL::Operators::Common::ios15::_anonymous_namespace_ *MIL::Operators::Common::ios15::anonymous namespace'::GetCompatibleDim(MIL::Operators::Common::ios15::_anonymous_namespace_ *this, const MIL::IRDimension *a2, const MIL::IRDimension *a3)
{
  unint64_t v3 = a2;
  uint64_t v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::_anonymous_namespace_ *, const MIL::IRDimension *, const MIL::IRDimension *))(*(void *)this + 16))(this, a2, a3);
  uint64_t v6 = (*(uint64_t (**)(MIL::Operators::Common::ios15::_anonymous_namespace_ *))(*(void *)v3 + 16))(v3);
  if (v5)
  {
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      unint64_t v3 = this;
      if (v8 != (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7))
      {
        exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
        MIL::UnknownLocation::Make(exception);
      }
    }
    else
    {
      return this;
    }
  }
  return v3;
}

void sub_20F5726C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    int v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)unint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    long long v21 = &__src[8 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_17:
    int64_t v24 = &v5[8 * a5];
    long long v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20F572938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26C25F518;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F518;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(MIL::IRObject *a1@<X1>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)a1, (unsigned __int8 *)__p, a2);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v6 = LocationPtr[1];
    *(void *)&long long v7 = *LocationPtr;
    *((void *)&v7 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    std::operator+<char>();
    MIL::ValidationError::ValidationError((uint64_t)exception, &v7, (uint64_t)__p, 321);
  }
}

void sub_20F572AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
    if ((v19 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v19)
  {
LABEL_8:
    long long v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v18);
  goto LABEL_8;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26C25F5A8;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F5A8;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  uint64_t v6 = v5;
  long long v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::IRObject::SetAttribute(a2, (unsigned __int8 *)__p, (uint64_t)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F572CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26C25F638;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F638;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t *a1@<X2>, void *a2@<X4>, uint64_t **a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  long long v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(void *)&long long v11 = v6;
    *((void *)&v11 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute val is undefined for const");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v11, (uint64_t)__p, 315);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)v7 + 5) + 32))(*((void *)v7 + 5));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v9 = (uint64_t *)operator new(8uLL);
  *a3 = v9;
  *v9++ = v8;
  a3[1] = v9;
  a3[2] = v9;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F572F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v19) {
    __cxa_free_exception(v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26C25F6B8;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F6B8;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()(uint64_t *a1@<X2>, void *a2@<X4>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  long long v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(void *)&long long v14 = v6;
    *((void *)&v14 + 1) = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute val is undefined for const");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v14, (uint64_t)&__p, 315);
  }
  uint64_t v8 = *((void *)v7 + 6);
  *(void *)&long long v14 = *((void *)v7 + 5);
  *((void *)&v14 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string __p = a3;
  char v12 = 0;
  char v9 = operator new(0x10uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 2;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const>*>((uint64_t)(a3 + 2), &v14, &v15, v9);
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F5731B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target_type()
{
}

void MIL::Operators::Common::ios15::Cond::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5735C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,char a30,char a31)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Select::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F57435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a45) {
    (*(void (**)(uint64_t))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  unint64_t v61 = *(void **)(v59 - 136);
  if (v61)
  {
    *(void *)(v59 - 128) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::WhileLoop::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F575054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,__int16 a55,char a56,char a57)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v57 - 184), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBatchNorm(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = off_26412C690[v7];
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
    BOOL v10 = IsParameterSet;
    if ((v20 & 0x80000000) == 0) {
      break;
    }
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_8;
    }
LABEL_16:
    if (++v7 == 4)
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  if (!IsParameterSet) {
    goto LABEL_16;
  }
LABEL_8:
  std::string::basic_string[abi:ne180100]<0>(&v17, v8);
  long long v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  char v12 = (MIL::IRValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(v15, "x");
  std::string::basic_string[abi:ne180100]<0>(&v13, v8);
  MIL::Validation::VerifyDimSizeIsNumChannels(v6, v12, (uint64_t)v15, this, 0, (MIL::ValidationResult *)__p);
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if ((*((uint64_t (**)(void **))__p[0] + 2))(__p))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    goto LABEL_16;
  }
  MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
  *(void *)a2 = &unk_26C25DB50;
  *((_DWORD *)a2 + 12) = v21;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
}

void sub_20F57544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void MIL::Operators::Common::ios15::BatchNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F577104(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x388];
  STACK[0x388] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x380]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x380]);
  }
  uint64_t v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x3E8];
  if (STACK[0x3E8])
  {
    STACK[0x3F0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x390], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::InstanceNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F579014(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x288];
  STACK[0x288] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x280]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x280]);
  }
  uint64_t v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::L2Norm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F57A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a58) {
    (*(void (**)(uint64_t))(*(void *)a58 + 8))(a58);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  std::string v65 = *(void **)(v63 - 152);
  if (v65)
  {
    *(void *)(v63 - 144) = v65;
    operator delete(v65);
  }
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_20F57AA74()
{
}

void MIL::Operators::Common::ios15::LayerNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F57BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v69 - 112));
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  uint64_t v71 = *(void **)(v69 - 152);
  if (v71)
  {
    *(void *)(v69 - 144) = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v69 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LocalResponseNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F57D514(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x208];
  STACK[0x208] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x200]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x200]);
  }
  uint64_t v4 = *(void **)(v1 - 176);
  if (v4)
  {
    *(void *)(v1 - 168) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 136);
  if (v5)
  {
    *(void *)(v1 - 128) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v75, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v75, "pad");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  char v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  unint64_t v10 = v7 - 2;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (*(uint64_t (**)(MIL::IRValue *))(*(void *)v9 + 32))(v9);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) != 2 * v10)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int64_t v22 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v73 = *LocationPtr;
    std::string v74 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v71, "Attribute 'pad' invalid: should be length of 2 * spatial rank");
    MIL::ValidationResult::ValidationResult(a2, &v73, 315, v71);
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    return;
  }
  char v12 = (uint64_t *)MIL::IRValue::AsTensor(v9);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v12);
  uint64_t v15 = (_DWORD *)Data;
  uint64_t v16 = v14;
  if (!v14)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v69, "pad_type");
    int v19 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v19, &v75);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v75.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_38;
      }
      char v20 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if (!v16) {
        goto LABEL_38;
      }
    }
    else
    {
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_38;
      }
      char v20 = &v75;
      if (!v16) {
        goto LABEL_38;
      }
    }
    if (!(LODWORD(v20->__r_.__value_.__l.__data_) ^ 0x696C6176 | v20->__r_.__value_.__s.__data_[4] ^ 0x64))
    {
      uint64_t v31 = 4 * v16;
      uint64_t v32 = v15;
      while (!*v32)
      {
        ++v32;
        v31 -= 4;
        if (!v31) {
          goto LABEL_38;
        }
      }
      BOOL v45 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v46 = (std::__shared_weak_count *)v45[1];
      uint64_t v64 = *v45;
      std::string v65 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v62, "Pad values must be 0s for 'valid' pad type.");
      MIL::ValidationResult::ValidationResult(a2, &v64, 315, v62);
      if (v63 < 0) {
        operator delete(v62[0]);
      }
      uint64_t v42 = v65;
      if (v65) {
LABEL_79:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      goto LABEL_90;
    }
LABEL_38:
    std::string::basic_string[abi:ne180100]<0>(&v69, "ceil_mode");
    BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v69.__r_.__value_.__l.__data_);
    BOOL v34 = IsParameterSet;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v69.__r_.__value_.__l.__data_);
      if (!v34) {
        goto LABEL_89;
      }
    }
    else if (!IsParameterSet)
    {
      goto LABEL_89;
    }
    std::string::basic_string[abi:ne180100]<0>(&v69, "ceil_mode");
    unint64_t v35 = (const void *)MIL::IROperation::GetParameterValue(this);
    int v36 = MIL::IRValue::GetScalar<BOOL>(v35);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v10) {
      int v37 = v36;
    }
    else {
      int v37 = 0;
    }
    if (v37 == 1)
    {
      int v38 = v15 + 1;
      unint64_t v39 = v10;
      do
      {
        if (*(v38 - 1) != *v38)
        {
          uint64_t v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          uint64_t v48 = (std::__shared_weak_count *)v47[1];
          uint64_t v60 = *v47;
          unint64_t v61 = v48;
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v58, "Padding must be symmetric if ceil_mode is True");
          MIL::ValidationResult::ValidationResult(a2, &v60, 315, v58);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          uint64_t v42 = v61;
          if (!v61) {
            goto LABEL_90;
          }
          goto LABEL_79;
        }
        v38 += 2;
        --v39;
      }
      while (v39);
      if (v10 < 3) {
        goto LABEL_58;
      }
      uint64_t v40 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v41 = (std::__shared_weak_count *)v40[1];
      uint64_t v56 = *v40;
      uint64_t v57 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ceil_mode must be False when there are 3 spatial dimensions (3D pool)");
      MIL::ValidationResult::ValidationResult(a2, &v56, 315, __p);
      if (v55 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v42 = v57;
      if (v57) {
        goto LABEL_79;
      }
      goto LABEL_90;
    }
LABEL_58:
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v75.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_83;
      }
      BOOL v43 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) != 4) {
        goto LABEL_83;
      }
      BOOL v43 = &v75;
    }
    if (LODWORD(v43->__r_.__value_.__l.__data_) == 1701667187)
    {
      if (v36) {
        goto LABEL_84;
      }
      goto LABEL_89;
    }
LABEL_83:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "same_lower") & v36)
    {
LABEL_84:
      std::operator+<char>();
      uint64_t v49 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      unint64_t v50 = (std::__shared_weak_count *)v49[1];
      uint64_t v52 = *v49;
      int v53 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v51, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
      }
      else {
        std::string v51 = v69;
      }
      MIL::ValidationResult::ValidationResult(a2, &v52, 315, &v51);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      goto LABEL_90;
    }
LABEL_89:
    MIL::ValidationResult::ValidationResult(a2);
LABEL_90:
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    unint64_t v44 = (std::string::value_type *)v75.__r_.__value_.__r.__words[0];
    goto LABEL_92;
  }
  uint64_t v17 = 4 * v14;
  char v18 = (int *)Data;
  while (*v18 < 0x8000)
  {
    ++v18;
    v17 -= 4;
    if (!v17) {
      goto LABEL_11;
    }
  }
  std::to_string(&v69, 0x7FFF);
  char v23 = std::string::insert(&v69, 0, "At least one of pad values exceed maximum allowed values (");
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  long long v25 = std::string::append(&v75, ").");
  uint64_t v26 = (const std::string::value_type *)v25->__r_.__value_.__r.__words[0];
  std::string::size_type size = v25->__r_.__value_.__l.__size_;
  v70[0] = v25->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v70 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
  int v28 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v30 = (std::__shared_weak_count *)v29[1];
  uint64_t v67 = *v29;
  int64_t v68 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v28 < 0)
  {
    std::string::__init_copy_ctor_external(&v66, v26, size);
  }
  else
  {
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v66.__r_.__value_.__l.__size_ = size;
    LODWORD(v66.__r_.__value_.__r.__words[2]) = v70[0];
    *(_DWORD *)((char *)&v66.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v70 + 3);
    *((unsigned char *)&v66.__r_.__value_.__s + 23) = v28;
  }
  MIL::ValidationResult::ValidationResult(a2, &v67, 315, &v66);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (v28 < 0)
  {
    unint64_t v44 = (std::string::value_type *)v26;
LABEL_92:
    operator delete(v44);
  }
}

void sub_20F57E220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (*(char *)(v48 - 73) < 0) {
    operator delete(*(void **)(v48 - 96));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateL2Pool(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v14 < 0) {
    operator delete(__p);
  }
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6)
    && MIL::IRTensorValueType::Rank(v6) == 5)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v8 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v11 = *LocationPtr;
    char v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "Unsupported 3D Pooling type.");
    MIL::ValidationResult::ValidationResult(a2, &v11, 315, v9);
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    MIL::Operators::Common::ios15::CustomValidators::ValidateBasePool(this, a2);
  }
}

void sub_20F57E4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v55, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v55);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(&v55, "pad");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v55);
  char v9 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, "pad_type");
  char v10 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v52);
  MIL::IRValue::GetScalar<std::string>(v10, &v55);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, "ceil_mode");
  uint64_t v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v52);
  int v12 = MIL::IRValue::GetScalar<BOOL>(v11);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, "strides");
  char v13 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v52);
  uint64_t v41 = (uint64_t *)MIL::IRValue::AsTensor(v13);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v52, "kernel_sizes");
  char v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v52);
  uint64_t v15 = (uint64_t *)MIL::IRValue::AsTensor(v14);
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v15);
  unint64_t v18 = v17;
  uint64_t v40 = (uint64_t *)v7;
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  int v39 = v12;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  std::vector<std::string const*>::reserve((void **)&v52, v18);
  if (v18)
  {
    int v19 = &Data[v18];
    do
    {
      uint64_t v20 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
      uint64_t v21 = v20;
      int64_t v22 = v53;
      if (v53 >= v54)
      {
        uint64_t v24 = v53 - v52;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = ((char *)v54 - (char *)v52) >> 2;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        if ((unint64_t)((char *)v54 - (char *)v52) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v54, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        int v28 = (uint64_t *)&v27[8 * v24];
        *int v28 = v21;
        char v23 = v28 + 1;
        uint64_t v29 = v53;
        int v30 = (char *)v52;
        if (v53 != v52)
        {
          do
          {
            uint64_t v31 = *--v29;
            *--int v28 = v31;
          }
          while (v29 != (uint64_t *)v30);
          uint64_t v29 = v52;
        }
        uint64_t v52 = v28;
        int v53 = v23;
        uint64_t v54 = (uint64_t *)&v27[8 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *int v53 = v20;
        char v23 = v22 + 1;
      }
      int v53 = v23;
      ++Data;
    }
    while (Data != v19);
  }
  uint64_t v32 = (const void *)MIL::IRTensorValue::GetDataView<int>(v41);
  memset(v51, 0, sizeof(v51));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v51, v32, (uint64_t)v32 + 4 * v33, (4 * v33) >> 2);
  BOOL v34 = (const void *)MIL::IRTensorValue::GetDataView<int>(v9);
  memset(v50, 0, sizeof(v50));
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v50, v34, (uint64_t)v34 + 4 * v35, (4 * v35) >> 2);
  int v36 = *a1;
  unint64_t v37 = (v40[1] - *v40) >> 3;
  MIL::ValueTypeInferenceUtils::SliceShape(v40, 2uLL, v37, &__p);
  std::vector<int>::value_type __x = 1;
  std::vector<int>::vector(&v44, v37 - 2, &__x);
  MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(v36, &__p, (uint64_t *)&v52, v51, &v44, (int **)&v55, (uint64_t)v50, v39, &v48);
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  long long v42 = *(_OWORD *)*v40;
  int v38 = operator new(0x10uLL);
  std::string __p = v38;
  *int v38 = v42;
  uint64_t v46 = v38 + 1;
  uint64_t v47 = v38 + 1;
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)(v38 + 1), (char *)v48, v49, (v49 - (unsigned char *)v48) >> 3);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F57E9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v33 = *(void **)(v31 - 136);
  if (v33)
  {
    *(void *)(v30 + 8) = v33;
    operator delete(v33);
  }
  if (*(char *)(v31 - 89) < 0) {
    operator delete(*(void **)(v30 + 24));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::BasePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F580244(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x300]);
  unint64_t v3 = STACK[0x288];
  STACK[0x288] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x280]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x280]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2F8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F582290(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x310]);
  unint64_t v3 = STACK[0x288];
  STACK[0x288] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x280]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x280]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x290], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x308], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::AvgPool::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseAvgPool::Make();
}

void sub_20F582B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::L2Pool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C25E4A8;
  v2[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateL2Pool;
  v2[3] = v2;
  MIL::Operators::Common::ios15::BasePool::Make();
}

void sub_20F582C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::MaxPool::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BasePool::Make();
}

void sub_20F582D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[29],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F582D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[29],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  char v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *char v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[29],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F582E2C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[29],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F582E7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomBernoulli(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v15, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v10 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v11 = *LocationPtr;
  int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v15, v8, &v11, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_20F582FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomCategorical(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v15, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v10 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v11 = *LocationPtr;
  int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v15, v8, &v11, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_20F583188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomNormal(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v15, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v10 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v11 = *LocationPtr;
  int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v15, v8, &v11, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_20F583330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRandomUniform(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v15, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v10 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v11 = *LocationPtr;
  int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v15, v8, &v11, a2);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_20F5834D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "random_bernoulli");
  std::string::basic_string[abi:ne180100]<0>(__p, "prob");
}

void sub_20F5835F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::anonymous namespace'::ValueTypeInferenceRandomOpHelper(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, a5);
  uint64_t v10 = MIL::IRValueType::AsTensorType(SingleValueType);
  (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  uint64_t v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  memset(v28, 0, sizeof(v28));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v28, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "shape");
  char v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  int64_t v22 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)v28, a4, &v21, (MIL::ValidationResult *)__p);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "shape");
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&v23);
    if (v24 < 0) {
      operator delete(v23);
    }
    uint64_t v16 = a2[1];
    v18[0] = *a2;
    v18[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(SingleValue, a1, v28, v18, &v23);
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v19, (uint64_t)__p);
  v19[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v20 = v27;
  MIL::ValidationError::ValidationError(exception, v19);
}

void sub_20F5838D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a11);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a26);
  uint64_t v33 = *(void **)(v31 - 88);
  if (v33)
  {
    *(void *)(v31 - 80) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomCategorical(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v31, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if ((unint64_t)(v32 - v31) > 0xF)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "random_categorical");
    std::string::basic_string[abi:ne180100]<0>(&v22, "x");
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v20 = *a2;
    uint64_t v21 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(&v31, (uint64_t)&v24, &v20, (MIL::ValidationResult *)__p);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "size");
      Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v24);
      uint64_t v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v12 = (MIL::MILContext *)MIL::IRValue::GetScalar<int>(v11);
      if (v25 < 0) {
        operator delete(v24);
      }
      uint64_t v13 = a2[1];
      v17[0] = *a2;
      v17[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(v12, a1, v17, &v31, &v24);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v18, (uint64_t)__p);
    v18[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v19 = v28;
    MIL::ValidationError::ValidationError(exception, v18);
  }
  char v14 = __cxa_allocate_exception(0x48uLL);
  uint64_t v15 = a2[1];
  *(void *)&long long v30 = *a2;
  *((void *)&v30 + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "Parameter x must have a minimum rank of 2. The last dimension represents vector of probabilities and remaining dimensions represent specific distributions.");
  MIL::ValidationError::ValidationError((uint64_t)v14, &v30, (uint64_t)v29, 315);
}

void sub_20F583CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a11);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a32);
  int v39 = *(void **)(v37 - 88);
  if (v39)
  {
    *(void *)(v37 - 80) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomNormal(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "random_normal");
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
}

void sub_20F583ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRandomUniform(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "random_uniform");
  std::string::basic_string[abi:ne180100]<0>(__p, "low");
}

void sub_20F583FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::RandomBernoulli::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F584B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v52 - 112));
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  uint64_t v54 = *(void **)(v52 - 176);
  if (v54)
  {
    *(void *)(v52 - 168) = v54;
    operator delete(v54);
  }
  std::string v55 = *(void **)(v52 - 152);
  if (v55)
  {
    *(void *)(v52 - 144) = v55;
    operator delete(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::RandomCategorical::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5859E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a57);
  if (a46) {
    (*(void (**)(uint64_t))(*(void *)a46 + 8))(a46);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  uint64_t v60 = *(void **)(v58 - 136);
  if (v60)
  {
    *(void *)(v58 - 128) = v60;
    operator delete(v60);
  }
  unint64_t v61 = *(void **)(v58 - 96);
  if (v61)
  {
    *(void *)(v58 - 88) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::RandomNormal::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F586ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  uint64_t v64 = *(void **)(v62 - 176);
  if (v64)
  {
    *(void *)(v62 - 168) = v64;
    operator delete(v64);
  }
  std::string v65 = *(void **)(v62 - 152);
  if (v65)
  {
    *(void *)(v62 - 144) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::RandomUniform::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F587CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  uint64_t v64 = *(void **)(v62 - 176);
  if (v64)
  {
    *(void *)(v62 - 168) = v64;
    operator delete(v64);
  }
  std::string v65 = *(void **)(v62 - 152);
  if (v65)
  {
    *(void *)(v62 - 144) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateGru(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_h");
  uint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_ih");
  char v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_hh");
  uint64_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  uint64_t v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  char v14 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v16 = (std::__shared_weak_count *)LocationPtr[1];
  v19[0] = *LocationPtr;
  v19[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "GRU");
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_20F588348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateGruRnnHelper(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::IRValueType *a6@<X5>, MIL::IRValueType *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  uint64_t v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 96))(a4);
  char v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a5 + 96))(a5);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)
    || !(*(unsigned int (**)(uint64_t))(*(void *)a3 + 104))(a3)
    || !(*(unsigned int (**)(uint64_t))(*(void *)a4 + 104))(a4)
    || ((*(uint64_t (**)(uint64_t))(*(void *)a5 + 104))(a5) & 1) == 0)
  {
    uint64_t v46 = (std::__shared_weak_count *)a1[1];
    uint64_t v142 = *a1;
    uint64_t v143 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a9, &v142, 315, &v140);
    if (v141 < 0) {
      operator delete(v140);
    }
    BOOL v45 = v143;
    if (v143) {
      goto LABEL_59;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v137, "weight_ih");
  int v19 = (std::__shared_weak_count *)a1[1];
  uint64_t v135 = *a1;
  uint64_t v136 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(v17, a8, &v135, (MIL::ValidationResult *)&v138);
  if (v136) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v136);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(std::string *))(v138.__r_.__value_.__r.__words[0] + 16))(&v138) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v138);
LABEL_63:
    *(void *)a9 = &unk_26C25DB50;
    *(_DWORD *)(a9 + 48) = v139;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
  std::string::basic_string[abi:ne180100]<0>(&v137, "weight_hh");
  uint64_t v20 = (std::__shared_weak_count *)a1[1];
  uint64_t v133 = *a1;
  std::string::size_type v134 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(v18, a8, &v133, (MIL::ValidationResult *)&v138);
  if (v134) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v134);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(std::string *))(v138.__r_.__value_.__r.__words[0] + 16))(&v138) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v138);
    goto LABEL_63;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
  uint64_t v21 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v17 + 8));
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
  uint64_t v23 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v18 + 8));
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
  uint64_t v25 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)*v18);
  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25);
  if ((*(uint64_t (**)(void))(**(void **)(*(void *)v16 + 16) + 16))(*(void *)(*(void *)v16 + 16)))
  {
    uint64_t v27 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(void *)v16 + 16));
    if (v22 != (*(unsigned int (**)(uint64_t))(*(void *)v27 + 48))(v27))
    {
      uint64_t v48 = (std::__shared_weak_count *)a1[1];
      uint64_t v131 = *a1;
      int v132 = v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v128, v22);
      uint64_t v49 = std::string::insert(&v128, 0, "Input size from weight_ih: ");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::string v51 = std::string::append(&v137, " does not match with input shape for op: ");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      int v53 = *(char *)(a8 + 23);
      if (v53 >= 0) {
        uint64_t v54 = (const std::string::value_type *)a8;
      }
      else {
        uint64_t v54 = *(const std::string::value_type **)a8;
      }
      if (v53 >= 0) {
        std::string::size_type v55 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        std::string::size_type v55 = *(void *)(a8 + 8);
      }
      uint64_t v56 = std::string::append(&v138, v54, v55);
      long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      std::string::size_type v130 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string::size_type v129 = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a9, &v131, 315, v129);
      if (SHIBYTE(v130) < 0) {
        operator delete(v129[0]);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      BOOL v45 = v132;
      if (v132) {
        goto LABEL_59;
      }
      return;
    }
  }
  uint64_t v28 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)*v17);
  if (v26 != (*(unsigned int (**)(uint64_t))(*(void *)v28 + 48))(v28))
  {
    uint64_t v47 = (std::__shared_weak_count *)a1[1];
    uint64_t v126 = *a1;
    unint64_t v127 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a9, &v126, 315, &v124);
    if (v125 < 0) {
      operator delete(v124);
    }
    BOOL v45 = v127;
    if (v127) {
      goto LABEL_59;
    }
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a8, "GRU")
    && 3 * v24 != v26)
  {
    uint64_t v29 = (std::__shared_weak_count *)a1[1];
    uint64_t v122 = *a1;
    v123 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v118, v24);
    long long v30 = std::string::insert(&v118, 0, "Hidden dimension must be of shape 3*HiddenSize. Provided hiddenSize: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    uint64_t v32 = std::string::append(&v119, "hiddenDim: ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v128.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v117, v26);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v34 = &v117;
    }
    else {
      BOOL v34 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v117.__r_.__value_.__l.__size_;
    }
    int v36 = std::string::append(&v128, (const std::string::value_type *)v34, size);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    int v38 = std::string::append(&v137, "for op: ");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    int v40 = *(char *)(a8 + 23);
    if (v40 >= 0) {
      uint64_t v41 = (const std::string::value_type *)a8;
    }
    else {
      uint64_t v41 = *(const std::string::value_type **)a8;
    }
    if (v40 >= 0) {
      std::string::size_type v42 = *(unsigned __int8 *)(a8 + 23);
    }
    else {
      std::string::size_type v42 = *(void *)(a8 + 8);
    }
    BOOL v43 = std::string::append(&v138, v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    std::string::size_type v121 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a9, &v122, 315, __p);
    if (SHIBYTE(v121) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v138.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    BOOL v45 = v123;
    if (!v123) {
      return;
    }
LABEL_59:
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    return;
  }
  if (a6)
  {
    uint64_t v58 = MIL::IRValueType::AsTensorType(a6);
    uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 96))(v58);
    memset(&v137, 0, sizeof(v137));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v137, *(const void **)v59, *(void *)(v59 + 8), (uint64_t)(*(void *)(v59 + 8) - *(void *)v59) >> 3);
    std::string::basic_string[abi:ne180100]<0>(&v128, "bias");
    uint64_t v60 = (std::__shared_weak_count *)a1[1];
    uint64_t v115 = *a1;
    int v116 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v137, a8, &v115, (MIL::ValidationResult *)&v138);
    if (v116) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v116);
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if ((*(uint64_t (**)(std::string *))(v138.__r_.__value_.__r.__words[0] + 16))(&v138))
    {
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
      uint64_t v61 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v137.__r_.__value_.__l.__data_);
      int v62 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 48))(v61);
      if (v62 == v26)
      {
        char v63 = 1;
        goto LABEL_130;
      }
      uint64_t v64 = (std::__shared_weak_count *)a1[1];
      uint64_t v113 = *a1;
      int v114 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v117, v62);
      std::string v65 = std::string::insert(&v117, 0, "Incorrect bias shape (");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      uint64_t v67 = std::string::append(&v118, ") but expecting: ");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v110, v26);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v69 = &v110;
      }
      else {
        std::string v69 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = v110.__r_.__value_.__l.__size_;
      }
      uint64_t v71 = std::string::append(&v119, (const std::string::value_type *)v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      uint64_t v73 = std::string::append(&v128, " for op: ");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      int v75 = *(char *)(a8 + 23);
      if (v75 >= 0) {
        char v76 = (const std::string::value_type *)a8;
      }
      else {
        char v76 = *(const std::string::value_type **)a8;
      }
      if (v75 >= 0) {
        std::string::size_type v77 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        std::string::size_type v77 = *(void *)(a8 + 8);
      }
      uint64_t v78 = std::string::append(&v138, v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      std::string::size_type v112 = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v111 = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a9, &v113, 315, v111);
      if (SHIBYTE(v112) < 0) {
        operator delete(v111[0]);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v119.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      if (v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v114);
      }
    }
    else
    {
      MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v138);
      *(void *)a9 = &unk_26C25DB50;
      *(_DWORD *)(a9 + 48) = v139;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
    }
    char v63 = 0;
LABEL_130:
    if (v137.__r_.__value_.__r.__words[0])
    {
      v137.__r_.__value_.__l.__size_ = v137.__r_.__value_.__r.__words[0];
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if ((v63 & 1) == 0) {
      return;
    }
  }
  if (!a7)
  {
LABEL_178:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a9);
    return;
  }
  uint64_t v80 = MIL::IRValueType::AsTensorType(a7);
  uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 96))(v80);
  memset(&v137, 0, sizeof(v137));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v137, *(const void **)v81, *(void *)(v81 + 8), (uint64_t)(*(void *)(v81 + 8) - *(void *)v81) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v128, "input_bias");
  unint64_t v82 = (std::__shared_weak_count *)a1[1];
  uint64_t v108 = *a1;
  unint64_t v109 = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v137, a8, &v108, (MIL::ValidationResult *)&v138);
  if (v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(std::string *))(v138.__r_.__value_.__r.__words[0] + 16))(&v138))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
    uint64_t v83 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v137.__r_.__value_.__l.__data_);
    int v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 48))(v83);
    if (v84 == v26)
    {
      char v85 = 1;
      goto LABEL_175;
    }
    uint64_t v86 = (std::__shared_weak_count *)a1[1];
    uint64_t v106 = *a1;
    long long v107 = v86;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v117, v84);
    uint64_t v87 = std::string::insert(&v117, 0, "Incorrect input_bias shape (");
    long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    char v89 = std::string::append(&v118, ") but expecting: ");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v110, v26);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v91 = &v110;
    }
    else {
      uint64_t v91 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v92 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v92 = v110.__r_.__value_.__l.__size_;
    }
    uint64_t v93 = std::string::append(&v119, (const std::string::value_type *)v91, v92);
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v128.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    std::string v95 = std::string::append(&v128, " for op: ");
    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    int v97 = *(char *)(a8 + 23);
    if (v97 >= 0) {
      std::string::size_type v98 = (const std::string::value_type *)a8;
    }
    else {
      std::string::size_type v98 = *(const std::string::value_type **)a8;
    }
    if (v97 >= 0) {
      std::string::size_type v99 = *(unsigned __int8 *)(a8 + 23);
    }
    else {
      std::string::size_type v99 = *(void *)(a8 + 8);
    }
    long long v100 = std::string::append(&v138, v98, v99);
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    std::string::size_type v105 = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v104 = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a9, &v106, 315, v104);
    if (SHIBYTE(v105) < 0) {
      operator delete(v104[0]);
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v138.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (v107) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v107);
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v138);
    *(void *)a9 = &unk_26C25DB50;
    *(_DWORD *)(a9 + 48) = v139;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v138);
  }
  char v85 = 0;
LABEL_175:
  if (v137.__r_.__value_.__r.__words[0])
  {
    v137.__r_.__value_.__l.__size_ = v137.__r_.__value_.__r.__words[0];
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (v85) {
    goto LABEL_178;
  }
}

void sub_20F5891E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v69 - 169) < 0) {
    operator delete(*(void **)(v69 - 192));
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  uint64_t v71 = *(void **)(v69 - 224);
  if (v71)
  {
    *(void *)(v69 - 216) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateLstm(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v28, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "initial_h");
  uint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "weight_ih");
  char v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "weight_hh");
  uint64_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "weight_ih_back");
  uint64_t v21 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)&v28, 0);
  uint64_t v22 = v12;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "weight_hh_back");
  uint64_t v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)&v28, 0);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "direction");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(ParameterValue, &v28);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  uint64_t v15 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_back");
  uint64_t v16 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "peephole");
  uint64_t v17 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "peephole_back");
  char v18 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v20 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v24 = *LocationPtr;
  uint64_t v25 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v28;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_20F5898D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateLSTMHelper(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::IRValueType *a6@<X5>, MIL::IRValueType *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, MIL::IRValueType *a10, MIL::IRValueType *a11, MIL::IRValueType *a12, MIL::IRValueType *a13)
{
  uint64_t v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 104))(a3)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) & 1) != 0)
  {
    v100[0] = a1;
    v100[1] = v22;
    memset(&v99, 0, sizeof(v99));
    memset(&v98, 0, sizeof(v98));
    std::string::basic_string[abi:ne180100]<0>(&v95, "weight_ih");
    std::string::basic_string[abi:ne180100]<0>(&__p, "weight_hh");
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(v95.__end_cap_.__value_) < 0) {
      operator delete(v95.__begin_);
    }
    if (((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96) & 1) == 0)
    {
      MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v96);
LABEL_73:
      *(void *)a9 = &unk_26C25DB50;
      *(_DWORD *)(a9 + 48) = v97;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
      goto LABEL_74;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
    int v23 = v99.__begin_[1];
    unsigned int v25 = *v98.__begin_;
    int v24 = v98.__begin_[1];
    int v26 = *((char *)a8 + 23);
    if (v26 < 0)
    {
      if (a8[1] != 13) {
        goto LABEL_51;
      }
      a8 = (uint64_t *)*a8;
    }
    else if (v26 != 13)
    {
      goto LABEL_51;
    }
    if (*a8 != 0x7463657269646962 || *(uint64_t *)((char *)a8 + 5) != 0x6C616E6F69746365)
    {
LABEL_51:
      __p.__begin_ = (std::vector<unsigned int>::pointer)a1;
      if (a10)
      {
        uint64_t v37 = MIL::IRValueType::AsTensorType(a10);
        std::string::basic_string[abi:ne180100]<0>(&v95, "bias");
        if (SHIBYTE(v95.__end_cap_.__value_) < 0) {
          operator delete(v95.__begin_);
        }
        if (((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96) & 1) == 0) {
          goto LABEL_72;
        }
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
      }
      if (a11)
      {
        uint64_t v38 = MIL::IRValueType::AsTensorType(a11);
        std::string::basic_string[abi:ne180100]<0>(&v95, "bias_back");
        if (SHIBYTE(v95.__end_cap_.__value_) < 0) {
          operator delete(v95.__begin_);
        }
        if (((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96) & 1) == 0) {
          goto LABEL_72;
        }
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
      }
      if (!a12)
      {
LABEL_66:
        if (!a13)
        {
LABEL_71:
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a9);
LABEL_74:
          if (v98.__begin_)
          {
            v98.__end_ = v98.__begin_;
            operator delete(v98.__begin_);
          }
          if (v99.__begin_)
          {
            v99.__end_ = v99.__begin_;
            operator delete(v99.__begin_);
          }
          return;
        }
        uint64_t v40 = MIL::IRValueType::AsTensorType(a13);
        std::string::basic_string[abi:ne180100]<0>(&v95, "peephole_back");
        if (SHIBYTE(v95.__end_cap_.__value_) < 0) {
          operator delete(v95.__begin_);
        }
        if ((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96))
        {
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
          goto LABEL_71;
        }
        goto LABEL_72;
      }
      uint64_t v39 = MIL::IRValueType::AsTensorType(a12);
      std::string::basic_string[abi:ne180100]<0>(&v95, "peephole");
      if (SHIBYTE(v95.__end_cap_.__value_) < 0) {
        operator delete(v95.__begin_);
      }
      if ((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96))
      {
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
        goto LABEL_66;
      }
LABEL_72:
      MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v96);
      goto LABEL_73;
    }
    memset(&v95, 0, sizeof(v95));
    memset(&__p, 0, sizeof(__p));
    if (a6 && a7)
    {
      uint64_t v29 = MIL::IRValueType::AsTensorType(a6);
      uint64_t v30 = MIL::IRValueType::AsTensorType(a7);
      std::string::basic_string[abi:ne180100]<0>(&v93, "weight_ih_back");
      std::string::basic_string[abi:ne180100]<0>(&v92, "weight_hh_back");
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (((*(uint64_t (**)(std::string *))(v96.__r_.__value_.__r.__words[0] + 16))(&v96) & 1) == 0)
      {
        MIL::MILResult::MILResult((std::string *)a9, (uint64_t)&v96);
        *(void *)a9 = &unk_26C25DB50;
        *(_DWORD *)(a9 + 48) = v97;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
        goto LABEL_45;
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v96);
      int v31 = v95.__begin_[1];
      if (v31 == v23)
      {
        int v32 = __p.__begin_[1];
        if (v32 == v24)
        {
          unsigned int v33 = *v95.__begin_;
          if (*v95.__begin_ == v25)
          {
            char v34 = 1;
            goto LABEL_46;
          }
          uint64_t v63 = a1[1];
          uint64_t v80 = *a1;
          uint64_t v81 = (std::__shared_weak_count *)v63;
          if (v63) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
          }
          std::to_string(&v87, v25);
          uint64_t v64 = std::string::insert(&v87, 0, "Hidden dimensions for forward and reverse weight differs. forward hidden dim: ");
          long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          long long v66 = std::string::append(&v92, " reverse hidden dim: ");
          long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v86, v33);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v68 = &v86;
          }
          else {
            long long v68 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v86.__r_.__value_.__l.__size_;
          }
          std::string::size_type v70 = std::string::append(&v93, (const std::string::value_type *)v68, size);
          long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          long long v72 = std::string::append(&v96, " for LSTM op.");
          long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          std::string::size_type v79 = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v78 = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a9, &v80, 315, v78);
          if (SHIBYTE(v79) < 0) {
            operator delete(v78[0]);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
          int v36 = v81;
          if (!v81)
          {
LABEL_45:
            char v34 = 0;
LABEL_46:
            if (__p.__begin_)
            {
              __p.__end_ = __p.__begin_;
              operator delete(__p.__begin_);
            }
            if (v95.__begin_)
            {
              v95.__end_ = v95.__begin_;
              operator delete(v95.__begin_);
            }
            if ((v34 & 1) == 0) {
              goto LABEL_74;
            }
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v52 = a1[1];
          uint64_t v84 = *a1;
          char v85 = (std::__shared_weak_count *)v52;
          if (v52) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
          }
          std::to_string(&v87, v24);
          int v53 = std::string::insert(&v87, 0, "Hidden size for forward and reverse weight differs. forward hidden size: ");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v55 = std::string::append(&v92, " reverse hidden size: ");
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v86, v32);
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v57 = &v86;
          }
          else {
            long long v57 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v58 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v58 = v86.__r_.__value_.__l.__size_;
          }
          uint64_t v59 = std::string::append(&v93, (const std::string::value_type *)v57, v58);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          uint64_t v61 = std::string::append(&v96, " for LSTM op.");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          std::string::size_type v83 = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)unint64_t v82 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a9, &v84, 315, v82);
          if (SHIBYTE(v83) < 0) {
            operator delete(v82[0]);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
          int v36 = v85;
          if (!v85) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        uint64_t v41 = a1[1];
        uint64_t v90 = *a1;
        uint64_t v91 = (std::__shared_weak_count *)v41;
        if (v41) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
        }
        std::to_string(&v87, v23);
        std::string::size_type v42 = std::string::insert(&v87, 0, "Input size for forward and reverse weight differs. forward input size: ");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        long long v44 = std::string::append(&v92, " reverse input size: ");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v86, v31);
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v86;
        }
        else {
          uint64_t v46 = (std::string *)v86.__r_.__value_.__r.__words[0];
        }
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v86.__r_.__value_.__l.__size_;
        }
        uint64_t v48 = std::string::append(&v93, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        long long v50 = std::string::append(&v96, " for LSTM op.");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v89 = v50->__r_.__value_.__r.__words[2];
        long long v88 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a9, &v90, 315, &v88);
        if (SHIBYTE(v89) < 0) {
          operator delete((void *)v88);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        int v36 = v91;
        if (!v91) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      uint64_t v35 = a1[1];
      uint64_t v76 = *a1;
      std::string::size_type v77 = (std::__shared_weak_count *)v35;
      if (v35) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v74, "Parameter weight_ih_back and weight_hh_back must be provided when direction is bidirectional for LSTM op.");
      MIL::ValidationResult::ValidationResult(a9, &v76, 316, v74);
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      int v36 = v77;
      if (!v77) {
        goto LABEL_45;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    goto LABEL_45;
  }
  char v27 = (std::__shared_weak_count *)a1[1];
  uint64_t v103 = *a1;
  uint64_t v104 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v101, "Variadic input / initial_h / initial_c not supported for LSTM op.");
  MIL::ValidationResult::ValidationResult(a9, &v103, 315, v101);
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  if (v104) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v104);
  }
}

void sub_20F58A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v65 - 233) < 0) {
    operator delete(*(void **)(v65 - 256));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a62) {
    operator delete(a62);
  }
  if (a65) {
    operator delete(a65);
  }
  long long v67 = *(void **)(v65 - 200);
  if (v67)
  {
    *(void *)(v65 - 192) = v67;
    operator delete(v67);
  }
  long long v68 = *(void **)(v65 - 176);
  if (v68)
  {
    *(void *)(v65 - 168) = v68;
    operator delete(v68);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateRnn(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_h");
  uint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_ih");
  char v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_hh");
  uint64_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  uint64_t v13 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v15 = (std::__shared_weak_count *)LocationPtr[1];
  v18[0] = *LocationPtr;
  v18[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "RNN");
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_20F58A9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGru(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
}

void sub_20F58AAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValueTypeInferenceGruRnnHelper(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(v39, "x");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v8
                                                                      + 5));
  uint64_t v10 = MIL::IRValueType::AsTensorType(ValueType);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "initial_h");
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v12 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v11 + 5));
  uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "weight_ih");
  char v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v15 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v14 + 5));
  uint64_t v16 = MIL::IRValueType::AsTensorType(v15);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "weight_hh");
  char v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  if (!v17) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  char v18 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v17 + 5));
  uint64_t v19 = MIL::IRValueType::AsTensorType(v18);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "bias");
  char v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  uint64_t v21 = (MIL::IRValueType *)v20;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (!v21) {
      goto LABEL_20;
    }
  }
  else if (!v20)
  {
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(v39, "bias");
  uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v39);
  if (!v22) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v21 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v22 + 5));
  if (v40 < 0) {
    operator delete(v39[0]);
  }
LABEL_20:
  uint64_t v23 = *a2;
  int v24 = (std::__shared_weak_count *)a2[1];
  v38[0] = v23;
  v38[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v37 = *(std::string *)a4;
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v39))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "output_sequence");
    Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    char v26 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
    if (SHIBYTE(v34) < 0) {
      operator delete(__p[0]);
    }
    char v27 = __p[1];
    uint64_t v28 = v34;
    uint64_t v29 = __p[0];
    uint64_t v30 = operator new(0x18uLL);
    *uint64_t v30 = v28;
    v30[1] = v29;
    void v30[2] = v27;
    int v31 = operator new(0x10uLL);
    *int v31 = v29;
    v31[1] = v27;
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v35, (uint64_t)v39);
  v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v36 = v41;
  MIL::ValidationError::ValidationError(exception, v35);
}

void sub_20F58AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a23);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v35 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRnn(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RNN");
}

void sub_20F58B090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLstm(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v68, "x");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v6
                                                                      + 5));
  uint64_t v8 = MIL::IRValueType::AsTensorType(ValueType);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "initial_h");
  char v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v10 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v9 + 5));
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "weight_ih");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v13 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v12 + 5));
  uint64_t v14 = MIL::IRValueType::AsTensorType(v13);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "weight_hh");
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v16 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v15 + 5));
  uint64_t v17 = MIL::IRValueType::AsTensorType(v16);
  uint64_t v60 = v14;
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "weight_ih_back");
  char v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
  uint64_t v19 = v18;
  if (v69 < 0)
  {
    operator delete(v68[0]);
    if (v19) {
      goto LABEL_15;
    }
  }
  else if (v18)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v68, "weight_ih_back");
    char v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
    if (!v20) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v21 = MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v20 + 5));
    if (v69 < 0) {
      operator delete(v68[0]);
    }
    uint64_t v59 = (MIL::IRValueType *)v21;
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(v68, "weight_hh_back");
    uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
    uint64_t v23 = v22;
    if (v69 < 0)
    {
      operator delete(v68[0]);
      if (v23) {
        goto LABEL_23;
      }
    }
    else if (v22)
    {
LABEL_23:
      std::string::basic_string[abi:ne180100]<0>(v68, "weight_hh_back");
      int v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
      if (!v24) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::string::size_type v58 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v24
                                                                    + 5));
      if (v69 < 0) {
        operator delete(v68[0]);
      }
LABEL_28:
      std::string::basic_string[abi:ne180100]<0>(v68, "direction");
      Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v68);
      MIL::IRValue::GetScalar<std::string>(SingleValue, &v71);
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "bias");
      char v26 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      uint64_t v57 = v17;
      if (v26)
      {
        std::string::basic_string[abi:ne180100]<0>(v68, "bias");
        char v27 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        if (!v27) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v28 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v27
                                                                      + 5));
        if (v69 < 0) {
          operator delete(v68[0]);
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "bias_back");
      uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
      uint64_t v30 = v29;
      if (v69 < 0)
      {
        operator delete(v68[0]);
        if (v30) {
          goto LABEL_39;
        }
      }
      else if (v29)
      {
LABEL_39:
        uint64_t v31 = v8;
        std::string::basic_string[abi:ne180100]<0>(v68, "bias_back");
        int v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        if (!v32) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unsigned int v33 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v32
                                                                      + 5));
        if (v69 < 0) {
          operator delete(v68[0]);
        }
LABEL_44:
        std::string::basic_string[abi:ne180100]<0>(v68, "peephole");
        uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        uint64_t v35 = (MIL::IRValueType *)v34;
        if (v69 < 0)
        {
          operator delete(v68[0]);
          if (!v35) {
            goto LABEL_51;
          }
        }
        else if (!v34)
        {
          goto LABEL_51;
        }
        std::string::basic_string[abi:ne180100]<0>(v68, "peephole");
        int v36 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        if (!v36) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v35 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v36
                                                                      + 5));
        if (v69 < 0) {
          operator delete(v68[0]);
        }
LABEL_51:
        std::string::basic_string[abi:ne180100]<0>(v68, "peephole_back");
        std::string v37 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        uint64_t v38 = (MIL::IRValueType *)v37;
        if (v69 < 0)
        {
          operator delete(v68[0]);
          if (!v38) {
            goto LABEL_58;
          }
        }
        else if (!v37)
        {
          goto LABEL_58;
        }
        std::string::basic_string[abi:ne180100]<0>(v68, "peephole_back");
        uint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v68);
        if (!v39) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v38 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v39
                                                                      + 5));
        if (v69 < 0) {
          operator delete(v68[0]);
        }
LABEL_58:
        char v40 = (std::__shared_weak_count *)a2[1];
        uint64_t v66 = *a2;
        long long v67 = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v65, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
        }
        else {
          std::string v65 = v71;
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v68))
        {
          exception = __cxa_allocate_exception(0x48uLL);
          MIL::MILResult::MILResult(v63, (uint64_t)v68);
          v63[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
          int v64 = v70;
          MIL::ValidationError::ValidationError(exception, v63);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "output_sequence");
        int v41 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
        char v42 = MIL::IRValue::GetScalar<BOOL>(v41);
        if (SHIBYTE(v62) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v71.__r_.__value_.__l.__size_ == 13)
          {
            long long v43 = (std::string *)v71.__r_.__value_.__r.__words[0];
            goto LABEL_75;
          }
        }
        else if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) == 13)
        {
          long long v43 = &v71;
LABEL_75:
          std::string::size_type v44 = v43->__r_.__value_.__r.__words[0];
          uint64_t v45 = *(std::string::size_type *)((char *)v43->__r_.__value_.__r.__words + 5);
          char v47 = v44 == 0x7463657269646962 && v45 == 0x6C616E6F69746365;
LABEL_82:
          uint64_t v48 = MIL::IRDimension::AsConstant((MIL::IRDimension *)__p[1]);
          uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 48))(v48);
          uint64_t v50 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v49 << v47));
          uint64_t v51 = v62;
          uint64_t v52 = __p[0];
          int v53 = operator new(0x18uLL);
          *int v53 = v51;
          v53[1] = v52;
          v53[2] = v50;
          long long v54 = operator new(0x10uLL);
          void *v54 = v52;
          v54[1] = v50;
          std::string::size_type v55 = operator new(0x10uLL);
          *std::string::size_type v55 = v52;
          v55[1] = v50;
          MIL::IRTensorValueType::MakeWithShape();
        }
        char v47 = 0;
        goto LABEL_82;
      }
      uint64_t v31 = v8;
      unsigned int v33 = 0;
      goto LABEL_44;
    }
    std::string::size_type v58 = 0;
    goto LABEL_28;
  }
  uint64_t v59 = 0;
  goto LABEL_21;
}

void sub_20F58B8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a33);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v33 - 168));
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::GetRecurrentOpOutputDimensions@<X0>(MIL::IRConstantDimension **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v11 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  uint64_t v12 = **v11;
  uint64_t v13 = (*v11)[1];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
  uint64_t v15 = *(void *)(*(void *)result + 8);
  if ((a4 & 1) == 0)
  {
    uint64_t result = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    uint64_t v12 = result;
  }
  *(void *)a5 = v13;
  *(void *)(a5 + 8) = v15;
  *(void *)(a5 + 16) = v12;
  *(_DWORD *)(a5 + 24) = v10;
  return result;
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateLSTMHelper(std::shared_ptr<MIL::Location const>,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,std::string,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*)::$_0::operator()(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::vector<unsigned int> *a5@<X5>, std::vector<unsigned int> *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)
    || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) & 1) == 0)
  {
    uint64_t v55 = (*a1)[1];
    uint64_t v116 = **a1;
    std::string v117 = (std::__shared_weak_count *)v55;
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v114, "Variadic weights not supported for LSTM op.");
    MIL::ValidationResult::ValidationResult(a7, &v116, 315, v114);
    if (v115 < 0) {
      operator delete(v114[0]);
    }
    long long v56 = v117;
    if (!v117) {
      return;
    }
LABEL_63:
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v111, "LSTM");
  uint64_t v16 = (std::__shared_weak_count *)(*a1)[1];
  uint64_t v109 = **a1;
  std::string v110 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(v14, (uint64_t)&v111, &v109, (MIL::ValidationResult *)&v112);
  if (v110) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v110);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(std::string *))(v112.__r_.__value_.__r.__words[0] + 16))(&v112) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a7, (uint64_t)&v112);
LABEL_66:
    *(void *)a7 = &unk_26C25DB50;
    *(_DWORD *)(a7 + 48) = v113;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v112);
    return;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v112);
  std::string::basic_string[abi:ne180100]<0>(&v111, "LSTM");
  uint64_t v17 = (std::__shared_weak_count *)(*a1)[1];
  uint64_t v107 = **a1;
  uint64_t v108 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(v15, (uint64_t)&v111, &v107, (MIL::ValidationResult *)&v112);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(std::string *))(v112.__r_.__value_.__r.__words[0] + 16))(&v112) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a7, (uint64_t)&v112);
    goto LABEL_66;
  }
  uint64_t v89 = a4;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v112);
  std::vector<int>::reserve(a5, 2uLL);
  char v18 = (MIL::IRDimension **)*v14;
  uint64_t v19 = (MIL::IRDimension **)v14[1];
  if ((MIL::IRDimension **)*v14 != v19)
  {
    do
    {
      uint64_t v20 = MIL::IRDimension::AsConstant(*v18);
      unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
      unsigned int v22 = v21;
      std::vector<unsigned int>::pointer end = a5->__end_;
      value = a5->__end_cap_.__value_;
      if (end >= value)
      {
        std::vector<unsigned int>::pointer begin = a5->__begin_;
        uint64_t v27 = end - a5->__begin_;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = (char *)value - (char *)begin;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a5->__end_cap_, v30);
          std::vector<unsigned int>::pointer begin = a5->__begin_;
          std::vector<unsigned int>::pointer end = a5->__end_;
        }
        else
        {
          uint64_t v31 = 0;
        }
        int v32 = (unsigned int *)&v31[4 * v27];
        *int v32 = v22;
        unsigned int v25 = v32 + 1;
        while (end != begin)
        {
          unsigned int v33 = *--end;
          *--int v32 = v33;
        }
        a5->__begin_ = v32;
        a5->__end_ = v25;
        a5->__end_cap_.__value_ = (unsigned int *)&v31[4 * v30];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer end = v21;
        unsigned int v25 = end + 1;
      }
      a5->__end_ = v25;
      ++v18;
    }
    while (v18 != v19);
  }
  std::vector<int>::reserve(a6, 2uLL);
  uint64_t v34 = (MIL::IRDimension **)*v15;
  uint64_t v35 = (MIL::IRDimension **)v15[1];
  if ((MIL::IRDimension **)*v15 != v35)
  {
    do
    {
      uint64_t v36 = MIL::IRDimension::AsConstant(*v34);
      unsigned int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 48))(v36);
      unsigned int v38 = v37;
      std::vector<unsigned int>::pointer v40 = a6->__end_;
      uint64_t v39 = a6->__end_cap_.__value_;
      if (v40 >= v39)
      {
        std::vector<unsigned int>::pointer v42 = a6->__begin_;
        uint64_t v43 = v40 - a6->__begin_;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = (char *)v39 - (char *)v42;
        if (v45 >> 1 > v44) {
          unint64_t v44 = v45 >> 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46)
        {
          char v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a6->__end_cap_, v46);
          std::vector<unsigned int>::pointer v42 = a6->__begin_;
          std::vector<unsigned int>::pointer v40 = a6->__end_;
        }
        else
        {
          char v47 = 0;
        }
        uint64_t v48 = (unsigned int *)&v47[4 * v43];
        unsigned int *v48 = v38;
        int v41 = v48 + 1;
        while (v40 != v42)
        {
          unsigned int v49 = *--v40;
          *--uint64_t v48 = v49;
        }
        a6->__begin_ = v48;
        a6->__end_ = v41;
        a6->__end_cap_.__value_ = (unsigned int *)&v47[4 * v46];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer v40 = v37;
        int v41 = v40 + 1;
      }
      a6->__end_ = v41;
      ++v34;
    }
    while (v34 != v35);
  }
  uint64_t v50 = *(void *)(*a1[1] + 16);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50))
  {
    unsigned int v51 = a5->__begin_[1];
    uint64_t v52 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 16));
    if (v51 != (*(unsigned int (**)(uint64_t))(*(void *)v52 + 48))(v52))
    {
      uint64_t v58 = (*a1)[1];
      uint64_t v105 = **a1;
      uint64_t v106 = (std::__shared_weak_count *)v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v59 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 16));
      int v60 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 48))(v59);
      std::to_string(&v99, v60);
      uint64_t v61 = std::string::insert(&v99, 0, "Different input size for input: ");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      uint64_t v63 = std::string::append(&v100, " and input weight: ");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v101.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v98, a5->__begin_[1]);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v65 = &v98;
      }
      else {
        std::string v65 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v98.__r_.__value_.__l.__size_;
      }
      long long v67 = std::string::append(&v101, (const std::string::value_type *)v65, size);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      char v69 = std::string::append(&v102, " for ");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      int v71 = *(char *)(v89 + 23);
      if (v71 >= 0) {
        long long v72 = (const std::string::value_type *)v89;
      }
      else {
        long long v72 = *(const std::string::value_type **)v89;
      }
      if (v71 >= 0) {
        std::string::size_type v73 = *(unsigned __int8 *)(v89 + 23);
      }
      else {
        std::string::size_type v73 = *(void *)(v89 + 8);
      }
      long long v74 = std::string::append(&v111, v72, v73);
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      uint64_t v76 = std::string::append(&v112, " parameter of LSTM op.");
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      std::string::size_type v104 = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v103 = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a7, &v105, 315, v103);
      if (SHIBYTE(v104) < 0) {
        operator delete(v103[0]);
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v112.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      long long v56 = v106;
      if (!v106) {
        return;
      }
      goto LABEL_63;
    }
  }
  unsigned int v53 = *a6->__begin_;
  if (v53 != *a5->__begin_)
  {
    uint64_t v57 = (*a1)[1];
    uint64_t v96 = **a1;
    int v97 = (std::__shared_weak_count *)v57;
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input and Hidden weights hidden dimensions mismatch for LSTM op.");
    MIL::ValidationResult::ValidationResult(a7, &v96, 315, __p);
    if (v95 < 0) {
      operator delete(__p[0]);
    }
    long long v56 = v97;
    if (!v97) {
      return;
    }
    goto LABEL_63;
  }
  int v54 = a6->__begin_[1];
  if (v53 == 4 * v54)
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a7);
    return;
  }
  uint64_t v78 = (*a1)[1];
  uint64_t v92 = **a1;
  std::string v93 = (std::__shared_weak_count *)v78;
  if (v78)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
    int v54 = a6->__begin_[1];
  }
  std::to_string(&v101, v54);
  std::string::size_type v79 = std::string::insert(&v101, 0, "Hidden dimension must be of shape 4*HiddenSize. Provided hiddenSize: ");
  long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  uint64_t v81 = std::string::append(&v102, " hiddenDim: ");
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v100, *a6->__begin_);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v83 = &v100;
  }
  else {
    std::string::size_type v83 = (std::string *)v100.__r_.__value_.__r.__words[0];
  }
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v84 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v84 = v100.__r_.__value_.__l.__size_;
  }
  char v85 = std::string::append(&v111, (const std::string::value_type *)v83, v84);
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v112.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  std::string v87 = std::string::append(&v112, "for LSTM op.");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  std::string::size_type v91 = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v90 = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a7, &v92, 315, v90);
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[0]);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  long long v56 = v93;
  if (v93) {
    goto LABEL_63;
  }
}

void sub_20F58C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v49 - 169) < 0) {
    operator delete(*(void **)(v49 - 192));
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v49 - 201) < 0) {
    operator delete(*(void **)(v49 - 224));
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateLSTMHelper(std::shared_ptr<MIL::Location const>,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,std::string,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*,MIL::IRValueType const*)::$_1::operator()(uint64_t **a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  int v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned int>::pointer v40 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v40, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v37, "LSTM");
  uint64_t v8 = (std::__shared_weak_count *)(*a1)[1];
  uint64_t v35 = **a1;
  uint64_t v36 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant((uint64_t *)&v40, (uint64_t)&v37, &v35, (MIL::ValidationResult *)&v38);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(std::string *))(v38.__r_.__value_.__r.__words[0] + 16))(&v38))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v38);
    uint64_t v9 = MIL::IRDimension::AsConstant(*v40);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
    if (v10 == a3)
    {
      MIL::ValidationResult::ValidationResult(a4);
    }
    else
    {
      uint64_t v11 = (std::__shared_weak_count *)(*a1)[1];
      uint64_t v33 = **a1;
      uint64_t v34 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      uint64_t v12 = std::string::append(&v28, " elements: ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v27, v10);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v27;
      }
      else {
        uint64_t v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v27.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = std::string::append(&v29, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      char v18 = std::string::append(&v30, ".");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v37, " Expecting ");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, a3);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v22 = &v26;
      }
      else {
        unsigned int v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v26.__r_.__value_.__l.__size_;
      }
      int v24 = std::string::append(&v38, (const std::string::value_type *)v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v24->__r_.__value_.__r.__words[2];
      long long __p = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v33, 315, &__p);
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a4, (uint64_t)&v38);
    *(void *)a4 = &unk_26C25DB50;
    *((_DWORD *)a4 + 12) = v39;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v38);
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
}

void sub_20F58CAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  if (*(char *)(v50 - 137) < 0) {
    operator delete(*(void **)(v50 - 160));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  uint64_t v52 = *(void **)(v50 - 72);
  if (v52)
  {
    *(void *)(v50 - 64) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::Gru::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F58F724(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x660]);
  unint64_t v3 = STACK[0x5C0];
  STACK[0x5C0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x5A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5A8]);
  }
  uint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x658], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Lstm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5951D4(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0xB90]);
  unint64_t v3 = STACK[0xA70];
  STACK[0xA70] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0xA48]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xA48]);
  }
  uint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xB88], 0);
  _Unwind_Resume(a1);
}

void sub_20F596B04()
{
}

void sub_20F596B0C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xB90]) {
      JUMPOUT(0x20F596B30);
    }
  }
}

void sub_20F596B7C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xB90]) {
      JUMPOUT(0x20F596BA0);
    }
  }
}

void sub_20F596BEC()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xB90]) {
      JUMPOUT(0x20F596C10);
    }
  }
}

void MIL::Operators::Common::ios15::Rnn::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F599444(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x5E0]);
  unint64_t v3 = STACK[0x550];
  STACK[0x550] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x538]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x538]);
  }
  uint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x5D8], 0);
  _Unwind_Resume(a1);
}

void sub_20F59A148()
{
}

void sub_20F59A18C()
{
}

void sub_20F59A194()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x5E0]) {
      JUMPOUT(0x20F59A1B8);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F59A274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F59A310(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F59A360(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F59A3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[21],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[21],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F59A478(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[21],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F59A4C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBaseReduction(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v48, "axes");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v48.__r_.__value_.__l.__data_);
  BOOL v6 = IsParameterSet;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 104))(v8) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v9 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(&v48, "axes");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v11 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = (uint64_t *)MIL::IRValue::AsTensor(v11);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v12);
  if (v14)
  {
    uint64_t v15 = (int *)Data;
    uint64_t v16 = 4 * v14;
    while (1)
    {
      int v17 = *v15;
      if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v15, (int)v9)) {
        break;
      }
      ++v15;
      v16 -= 4;
      if (!v16) {
        goto LABEL_14;
      }
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unsigned int v22 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v46 = *LocationPtr;
    char v47 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    std::operator+<char>();
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, v17);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v25 = &v40;
    }
    else {
      long long v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    std::string v27 = std::string::append(&v42, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string v29 = std::string::append(&v43, "for input with rank: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, (int)v9);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v39;
    }
    else {
      uint64_t v31 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v39.__r_.__value_.__l.__size_;
    }
    uint64_t v33 = std::string::append(&v48, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    std::string::size_type v45 = v33->__r_.__value_.__r.__words[2];
    long long v44 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v46, 315, &v44);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = v47;
    if (v47) {
      goto LABEL_52;
    }
    return;
  }
LABEL_14:
  if (MIL::Validation::HasUniqueElementsInAxes(v11, v9))
  {
LABEL_15:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  char v18 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  long long v19 = (std::__shared_weak_count *)v18[1];
  uint64_t v37 = *v18;
  std::string v38 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::operator+<char>();
  MIL::ValidationResult::ValidationResult(a2, &v37, 315, &__p);
  if (v36 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = v38;
  if (v38) {
LABEL_52:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
}

void sub_20F59A8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 104);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(a1, (uint64_t)v4, a3);
}

void sub_20F59AA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseReduction(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  uint64_t v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v11 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  std::string v42 = 0;
  unint64_t v43 = 0;
  std::string v41 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "axes");
  long long v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v14 = v13;
  if (v46 < 0)
  {
    operator delete(__p[0]);
    if (v14) {
      goto LABEL_9;
    }
  }
  else if (v13)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, "axes");
    uint64_t v15 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    uint64_t v16 = (uint64_t *)MIL::IRValue::AsTensor(v15);
    uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v16);
    uint64_t v19 = v18;
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v19, (v12[1] - *v12) >> 3, (char **)&v47);
    std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>((uint64_t)__p, (unint64_t *)v47, v48);
    unint64_t v44 = 0;
    if (v12[1] != *v12)
    {
      while (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, &v44))
      {
        if (v11)
        {
          uint64_t v20 = MIL::IRConstantDimension::Make(v7, (MIL::MILContext *)1);
          uint64_t v21 = v20;
          unsigned int v22 = v42;
          if ((unint64_t)v42 < v43)
          {
            *(void *)std::string v42 = v20;
            std::string::size_type v23 = v22 + 8;
LABEL_44:
            std::string v42 = v23;
            goto LABEL_45;
          }
          int64_t v31 = (v42 - (unsigned char *)v41) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v32 = (uint64_t)(v43 - (void)v41) >> 2;
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          if (v43 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v32;
          }
          if (v29) {
            long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v29);
          }
          else {
            long long v30 = 0;
          }
          uint64_t v33 = &v30[8 * v31];
          *(void *)uint64_t v33 = v21;
          std::string::size_type v23 = v33 + 8;
          uint64_t v37 = (char *)v41;
          long long v34 = v42;
          if (v42 != v41)
          {
            do
            {
              uint64_t v38 = *((void *)v34 - 1);
              v34 -= 8;
              *((void *)v33 - 1) = v38;
              v33 -= 8;
            }
            while (v34 != v37);
            goto LABEL_41;
          }
          goto LABEL_42;
        }
LABEL_45:
        if (++v44 >= (v12[1] - *v12) >> 3) {
          goto LABEL_46;
        }
      }
      unint64_t v24 = v44;
      uint64_t v25 = *v12;
      std::string v26 = v42;
      if ((unint64_t)v42 < v43)
      {
        *(void *)std::string v42 = *(void *)(v25 + 8 * v44);
        std::string::size_type v23 = v26 + 8;
        goto LABEL_44;
      }
      int64_t v27 = (v42 - (unsigned char *)v41) >> 3;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v28 = (uint64_t)(v43 - (void)v41) >> 2;
      if (v28 <= v27 + 1) {
        unint64_t v28 = v27 + 1;
      }
      if (v43 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        long long v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v29);
      }
      else {
        long long v30 = 0;
      }
      uint64_t v33 = &v30[8 * v27];
      *(void *)uint64_t v33 = *(void *)(v25 + 8 * v24);
      std::string::size_type v23 = v33 + 8;
      uint64_t v35 = (char *)v41;
      long long v34 = v42;
      if (v42 != v41)
      {
        do
        {
          uint64_t v36 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v33 - 1) = v36;
          v33 -= 8;
        }
        while (v34 != v35);
LABEL_41:
        long long v34 = (char *)v41;
      }
LABEL_42:
      std::string v41 = v33;
      std::string v42 = v23;
      unint64_t v43 = (unint64_t)&v30[8 * v29];
      if (v34) {
        operator delete(v34);
      }
      goto LABEL_44;
    }
LABEL_46:
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
    if (v47)
    {
      std::string v48 = (unint64_t *)v47;
      operator delete(v47);
    }
LABEL_52:
    MIL::IRTensorValueType::MakeWithShape();
  }
  if (v11)
  {
    uint64_t v40 = *v12;
    uint64_t v39 = v12[1];
    __p[0] = (void *)MIL::IRConstantDimension::Make(v7, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)&v41, v42, (v39 - v40) >> 3, (char *)__p);
  }
  goto LABEL_52;
}

void sub_20F59AE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  if (a3)
  {
    char v5 = a4;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    uint64_t v9 = v10;
    int v11 = *(char **)(v8 - 8);
    if (a3 <= (v10 - (uint64_t)v11) >> 3)
    {
      uint64_t v18 = v11 - __src;
      if (a3 <= (v11 - __src) >> 3)
      {
        uint64_t v21 = *(char **)(v8 - 8);
        uint64_t v20 = a3;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18 >> 3;
        uint64_t v21 = &v11[8 * (a3 - (v18 >> 3))];
        do
        {
          *(void *)&v11[v19] = *(void *)a4;
          v19 += 8;
        }
        while (8 * a3 - 8 * v20 != v19);
        *(void *)(a1 + 8) = v21;
        if (v11 == __src) {
          return v4;
        }
      }
      unsigned int v22 = &__src[8 * a3];
      std::string::size_type v23 = &v21[-8 * a3];
      unint64_t v24 = v21;
      if (v23 < v11)
      {
        unint64_t v24 = v21;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)unint64_t v24 = v25;
          v24 += 8;
        }
        while (v23 < v11);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-8 * ((v21 - v22) >> 3)], __src, v21 - v22);
      }
      if (v4 <= v5)
      {
        if (*(void *)(a1 + 8) <= (unint64_t)v5) {
          unint64_t v26 = 0;
        }
        else {
          unint64_t v26 = a3;
        }
        v5 += 8 * v26;
      }
      int64_t v27 = v4;
      do
      {
        *(void *)int64_t v27 = *(void *)v5;
        v27 += 8;
        --v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v12 = *(unsigned char **)a1;
      unint64_t v13 = a3 + ((uint64_t)&v11[-*(void *)a1] >> 3);
      if (v13 >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (__src - v12) >> 3;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v36 = v8;
      if (v16) {
        int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v8, v16);
      }
      else {
        int v17 = 0;
      }
      unint64_t v28 = &v17[8 * v14];
      long long __p = v17;
      uint64_t v33 = v28;
      uint64_t v35 = &v17[8 * v16];
      uint64_t v29 = 8 * a3;
      long long v30 = &v28[8 * a3];
      do
      {
        *(void *)unint64_t v28 = *(void *)v5;
        v28 += 8;
        v29 -= 8;
      }
      while (v29);
      long long v34 = v30;
      uint64_t v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_20F59B0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    char v5 = a2;
    do
    {
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20F59B184(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F59B3A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseArgReduction::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F59BF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v50 - 128));
  if (a42) {
    (*(void (**)(void *))(*(void *)a42 + 8))(a42);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  uint64_t v52 = *(void **)(v50 - 160);
  if (v52)
  {
    *(void *)(v50 - 152) = v52;
    operator delete(v52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceArgmax::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseArgReduction::Make();
}

void sub_20F59C354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceArgmin::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseArgReduction::Make();
}

void sub_20F59C408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseReduction::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F59D240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v66 - 128));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  long long v68 = *(void **)(v66 - 176);
  if (v68)
  {
    *(void *)(v66 - 168) = v68;
    operator delete(v68);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceL1Norm::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59D7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceL2Norm::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59D870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceLogSum::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59D924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceLogSumExp::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMax::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMean::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceMin::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceProd::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceSum::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReduceSumSquare::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseReduction::Make();
}

void sub_20F59DE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBaseScatterWithAxis(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v35, "axis");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v35.__r_.__value_.__l.__data_);
  BOOL v6 = IsParameterSet;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if (!v6)
    {
LABEL_11:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "data");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint8x8_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 104))(v8) & 1) == 0) {
    goto LABEL_11;
  }
  int v9 = MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(&v35, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  unint64_t v11 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (MIL::Validation::IsAxisValidForRank(v11, v9)) {
    goto LABEL_11;
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  float v13 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v33 = *LocationPtr;
  long long v34 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  std::operator+<char>();
  BOOL v14 = std::string::append(&v28, ", 'axis' must be within range (-data_rank - 1, data_rank) (exclusive). Provided axis: ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v27, (int)v11);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v27;
  }
  else {
    unint64_t v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  uint64_t v18 = std::string::append(&v29, (const std::string::value_type *)v16, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  unint64_t v20 = std::string::append(&v30, "for input 'data' with rank: ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v26, v9);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v22 = &v26;
  }
  else {
    unsigned int v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v26.__r_.__value_.__l.__size_;
  }
  unint64_t v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v24->__r_.__value_.__r.__words[2];
  long long v31 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a2, &v33, 315, &v31);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_20F59E140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::string v42 = *(std::__shared_weak_count **)(v40 - 88);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::BaseScatter::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F59F614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x290]);
  unint64_t v74 = STACK[0x220];
  STACK[0x220] = 0;
  if (v74) {
    (*(void (**)(unint64_t))(*(void *)v74 + 8))(v74);
  }
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(__p);
  }
  long long v75 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = *(void **)(v72 - 112);
  if (v76)
  {
    *(void *)(v72 - 104) = v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x228], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BaseScatterWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5A1238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2A0]);
  unint64_t v74 = STACK[0x220];
  STACK[0x220] = 0;
  if (v74) {
    (*(void (**)(unint64_t))(*(void *)v74 + 8))(v74);
  }
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(__p);
  }
  long long v75 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = *(void **)(v72 - 112);
  if (v76)
  {
    *(void *)(v72 - 104) = v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x228], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Scatter::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseScatterWithAxis::Make();
}

void sub_20F5A1A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScatterAlongAxis::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseScatterWithAxis::Make();
}

void sub_20F5A1AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScatterNd::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios15::BaseScatter::Make();
}

void sub_20F5A1BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateArgsort(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v34, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0) {
    goto LABEL_17;
  }
  int v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(v34, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v9 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v9 >= v7 || v9 < -v7)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    long long v19 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v32 = *LocationPtr;
    uint64_t v33 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v30, "'axis' must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v32, 315, v30);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    size_t v17 = v33;
    if (v33) {
      goto LABEL_23;
    }
  }
  else
  {
    Outputuint64_t Type = MIL::IROperation::GetOutputType(this, 0);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
      uint64_t v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
      size_t v14 = *(void *)(v12 + 8) - *(void *)v12;
      if (v14 != *(void *)(v13 + 8) - *(void *)v13 || memcmp(*(const void **)v12, *(const void **)v13, v14))
      {
        long long v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        unint64_t v16 = (std::__shared_weak_count *)v15[1];
        uint64_t v24 = *v15;
        long long v25 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Output type should be same as input type");
        MIL::ValidationResult::ValidationResult(a2, &v24, 313, __p);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        size_t v17 = v25;
        if (!v25) {
          return;
        }
LABEL_23:
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        return;
      }
LABEL_17:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    unint64_t v20 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    long long v21 = (std::__shared_weak_count *)v20[1];
    uint64_t v28 = *v20;
    std::string v29 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "Output type should be a tensor");
    MIL::ValidationResult::ValidationResult(a2, &v28, 313, v26);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    size_t v17 = v29;
    if (v29) {
      goto LABEL_23;
    }
  }
}

void sub_20F5A1E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidatePad(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v141, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v142) < 0) {
    operator delete(v141);
  }
  uint64_t v7 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
  std::string::size_type v150 = 0;
  uint64_t v151 = 0;
  uint64_t v149 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v149, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v141, "pad");
  uint8x8_t v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v142) < 0) {
    operator delete(v141);
  }
  uint64_t v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 96))(v9);
  v146 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v146, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v12 = (std::__shared_weak_count *)LocationPtr[1];
  v140[0] = *LocationPtr;
  v140[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v141))
  {
    long long v16 = v143;
    *(_OWORD *)(a2 + 8) = v142;
    long long v142 = 0uLL;
    *(_OWORD *)(a2 + 24) = v16;
    *(void *)(a2 + 40) = v144;
    long long v143 = 0uLL;
    uint64_t v144 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v145;
    goto LABEL_96;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(ParameterValue, &v139);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  uint64_t v14 = MIL::IRDimension::AsConstant(*v146);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) < 5) {
    goto LABEL_34;
  }
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v139.__r_.__value_.__l.__size_ == 8)
    {
      long long v15 = (std::string *)v139.__r_.__value_.__r.__words[0];
LABEL_19:
      if (v15->__r_.__value_.__r.__words[0] == 0x746E6174736E6F63) {
        goto LABEL_34;
      }
    }
  }
  else if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) == 8)
  {
    long long v15 = &v139;
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
  uint64_t v17 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
  uint64_t v18 = (MIL::IRValue *)v17;
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v18)
    {
LABEL_82:
      uint64_t v55 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      long long v56 = (std::__shared_weak_count *)v55[1];
      uint64_t v136 = *v55;
      std::string v137 = v56;
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::ValidationResult::ValidationResult(a2, &v136, 315, v134);
      if (v135 < 0) {
        operator delete(v134[0]);
      }
      if (v137) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v137);
      }
      goto LABEL_94;
    }
  }
  else if (!v17)
  {
    goto LABEL_82;
  }
  uint64_t v19 = MIL::IRDimension::AsConstant(*v146);
  std::vector<int>::size_type v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
  std::vector<int>::vector(&__p, v20);
  if (__p.__end_ == __p.__begin_) {
    std::vector<int>::pointer begin = 0;
  }
  else {
    std::vector<int>::pointer begin = __p.__begin_;
  }
  MIL::IRValueUtils::CopyTensorTo<int>(v18, begin, __p.__end_ - __p.__begin_);
  if (__p.__end_ - __p.__begin_ != 4)
  {
    uint64_t v22 = 0;
    while (!__p.__begin_[v22])
    {
      if (__p.__end_ - __p.__begin_ - 4 == ++v22) {
        goto LABEL_33;
      }
    }
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
    goto LABEL_82;
  }
  if (__p.__begin_)
  {
LABEL_33:
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
LABEL_34:
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v24 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6)
    && (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v24 + 104))(v24))
  {
    uint64_t v25 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v24 + 96))(v24);
    memset(&__p, 0, sizeof(__p));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v25, *(void *)(v25 + 8), (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3);
    uint64_t v26 = MIL::IRTensorValueType::Rank(v6);
    if (v26 == MIL::IRTensorValueType::Rank(v24))
    {
      unint64_t v27 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 16))(v9);
      std::string::basic_string[abi:ne180100]<0>(&v129, "pad");
      uint64_t v28 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v129, 0);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v129.__r_.__value_.__l.__data_);
      }
      if (!v28)
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
        goto LABEL_89;
      }
      std::string v29 = (uint64_t *)MIL::IRValue::AsTensor(v28);
      unint64_t v30 = 0;
      unint64_t v104 = v27 >> 1;
      for (uint64_t i = MIL::IRTensorValue::GetDataView<int>(v29) + 8 * (v27 >> 1); ; i += 8)
      {
        if (v30 >= MIL::IRTensorValueType::Rank(v6))
        {
          char v57 = 1;
          goto LABEL_90;
        }
        uint64_t v32 = v149[v30];
        uint64_t v33 = *(void *)&__p.__begin_[2 * v30];
        uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
        if ((v34 == 0) == (v35 != 0))
        {
          uint64_t v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          uint64_t v59 = (std::__shared_weak_count *)v58[1];
          uint64_t v127 = *v58;
          std::string v128 = v59;
          if (v59) {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::to_string(&v124, v30);
          int v60 = std::string::insert(&v124, 0, "Dim ");
          long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v129.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          long long v62 = std::string::append(&v129, " for both input and output should have matching dimension type");
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          std::string::size_type v126 = v62->__r_.__value_.__r.__words[2];
          long long v125 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a2, &v127, 313, &v125);
          if (SHIBYTE(v126) < 0) {
            operator delete((void *)v125);
          }
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v129.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          int v54 = v128;
          if (v128) {
            goto LABEL_80;
          }
          goto LABEL_89;
        }
        if (v30 < MIL::IRTensorValueType::Rank(v6) - v104)
        {
          if (v32 != v33)
          {
            long long v64 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
            std::string v65 = (std::__shared_weak_count *)v64[1];
            uint64_t v107 = *v64;
            uint64_t v108 = v65;
            if (v65) {
              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v105, "Output shape dimensions should match input when no padding is added");
            MIL::ValidationResult::ValidationResult(a2, &v107, 313, v105);
            if (v106 < 0) {
              operator delete(v105[0]);
            }
            int v54 = v108;
            if (v108) {
              goto LABEL_80;
            }
            goto LABEL_89;
          }
          goto LABEL_74;
        }
        if (!v34) {
          goto LABEL_74;
        }
        uint64_t v36 = MIL::IRTensorValueType::Rank(v6);
        uint64_t v37 = v36;
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v139.__r_.__value_.__l.__size_ == 7
            && *(_DWORD *)v139.__r_.__value_.__l.__data_ == 1818649970
            && *(_DWORD *)(v139.__r_.__value_.__r.__words[0] + 3) == 1952671084)
          {
LABEL_71:
            char v46 = (int *)(i - 8 * v36);
            unint64_t v103 = *v46;
            if ((*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34) <= v103
              || (unint64_t v47 = v46[1], (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34) <= v47))
            {
              uint64_t v89 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              uint64_t v90 = (std::__shared_weak_count *)v89[1];
              uint64_t v122 = *v89;
              v123 = v90;
              if (v90) {
                atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::to_string(&v118, v30);
              std::string::size_type v91 = std::string::insert(&v118, 0, "Padding size for dim");
              long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
              v119.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v92;
              v91->__r_.__value_.__l.__size_ = 0;
              v91->__r_.__value_.__r.__words[2] = 0;
              v91->__r_.__value_.__r.__words[0] = 0;
              std::string v93 = std::string::append(&v119, " is too big for mode reflect. ");
              long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
              v124.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v94;
              v93->__r_.__value_.__l.__size_ = 0;
              v93->__r_.__value_.__r.__words[2] = 0;
              v93->__r_.__value_.__r.__words[0] = 0;
              char v95 = std::string::append(&v124, " It can a maximum of (dim_size - 1) ");
              long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
              v129.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v96;
              v95->__r_.__value_.__l.__size_ = 0;
              v95->__r_.__value_.__r.__words[2] = 0;
              v95->__r_.__value_.__r.__words[0] = 0;
              uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
              std::to_string(&v117, v97 - 1);
              if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v98 = &v117;
              }
              else {
                std::string v98 = (std::string *)v117.__r_.__value_.__r.__words[0];
              }
              if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v117.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v117.__r_.__value_.__l.__size_;
              }
              std::string v100 = std::string::append(&v129, (const std::string::value_type *)v98, size);
              long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
              std::string::size_type v121 = v100->__r_.__value_.__r.__words[2];
              long long v120 = v101;
              v100->__r_.__value_.__l.__size_ = 0;
              v100->__r_.__value_.__r.__words[2] = 0;
              v100->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(a2, &v122, 315, &v120);
              if (SHIBYTE(v121) < 0) {
                operator delete((void *)v120);
              }
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v117.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v129.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v124.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v119.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
              int v54 = v123;
              if (v123) {
                goto LABEL_80;
              }
              goto LABEL_89;
            }
            goto LABEL_73;
          }
          if (v139.__r_.__value_.__l.__size_ == 9)
          {
            uint64_t v38 = (std::string *)v139.__r_.__value_.__r.__words[0];
LABEL_58:
            std::string::size_type v40 = v38->__r_.__value_.__r.__words[0];
            int v41 = v38->__r_.__value_.__s.__data_[8];
            if (v40 == 0x746163696C706572 && v41 == 101)
            {
              unint64_t v43 = (int *)(i - 8 * v36);
              unint64_t v102 = *v43;
              if ((*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34) < v102
                || (unint64_t v44 = v43[1], (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34) < v44))
              {
                uint64_t v76 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
                long long v77 = (std::__shared_weak_count *)v76[1];
                uint64_t v115 = *v76;
                uint64_t v116 = v77;
                if (v77) {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::to_string(&v118, v30);
                uint64_t v78 = std::string::insert(&v118, 0, "Padding size for dim");
                long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                v119.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v79;
                v78->__r_.__value_.__l.__size_ = 0;
                v78->__r_.__value_.__r.__words[2] = 0;
                v78->__r_.__value_.__r.__words[0] = 0;
                long long v80 = std::string::append(&v119, " is too big for mode replicate. ");
                long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                v124.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v81;
                v80->__r_.__value_.__l.__size_ = 0;
                v80->__r_.__value_.__r.__words[2] = 0;
                v80->__r_.__value_.__r.__words[0] = 0;
                long long v82 = std::string::append(&v124, " It can a maximum of (dim_size) ");
                long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                v129.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v83;
                v82->__r_.__value_.__l.__size_ = 0;
                v82->__r_.__value_.__r.__words[2] = 0;
                v82->__r_.__value_.__r.__words[0] = 0;
                uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
                std::to_string(&v117, v84 - 1);
                if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v85 = &v117;
                }
                else {
                  char v85 = (std::string *)v117.__r_.__value_.__r.__words[0];
                }
                if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v86 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v86 = v117.__r_.__value_.__l.__size_;
                }
                std::string v87 = std::string::append(&v129, (const std::string::value_type *)v85, v86);
                long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
                std::string::size_type v114 = v87->__r_.__value_.__r.__words[2];
                *(_OWORD *)int v113 = v88;
                v87->__r_.__value_.__l.__size_ = 0;
                v87->__r_.__value_.__r.__words[2] = 0;
                v87->__r_.__value_.__r.__words[0] = 0;
                MIL::ValidationResult::ValidationResult(a2, &v115, 315, v113);
                if (SHIBYTE(v114) < 0) {
                  operator delete(v113[0]);
                }
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v117.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v129.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v124.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v119.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v118.__r_.__value_.__l.__data_);
                }
                int v54 = v116;
                if (v116) {
                  goto LABEL_80;
                }
                goto LABEL_89;
              }
            }
          }
        }
        else
        {
          if (HIBYTE(v139.__r_.__value_.__r.__words[2]) != 7)
          {
            if (HIBYTE(v139.__r_.__value_.__r.__words[2]) != 9) {
              goto LABEL_73;
            }
            uint64_t v38 = &v139;
            goto LABEL_58;
          }
          if (LODWORD(v139.__r_.__value_.__l.__data_) == 1818649970
            && *(_DWORD *)((char *)v139.__r_.__value_.__r.__words + 3) == 1952671084)
          {
            goto LABEL_71;
          }
        }
LABEL_73:
        std::string v48 = (int *)(i - 8 * v37);
        uint64_t v49 = *v48;
        uint64_t v50 = v48[1];
        unint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34) + v50 + v49;
        if (v51 != (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35))
        {
          uint64_t v66 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          long long v67 = (std::__shared_weak_count *)v66[1];
          uint64_t v111 = *v66;
          std::string v112 = v67;
          if (v67) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::to_string(&v119, v30);
          long long v68 = std::string::insert(&v119, 0, "Output dim");
          long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          long long v70 = std::string::append(&v124, " size incorrect. Expected ");
          long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v129.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v118, v51);
          if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v72 = &v118;
          }
          else {
            uint64_t v72 = (std::string *)v118.__r_.__value_.__r.__words[0];
          }
          if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v73 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v73 = v118.__r_.__value_.__l.__size_;
          }
          unint64_t v74 = std::string::append(&v129, (const std::string::value_type *)v72, v73);
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          std::string::size_type v110 = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v109 = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a2, &v111, 313, v109);
          if (SHIBYTE(v110) < 0) {
            operator delete(v109[0]);
          }
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v118.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v129.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v119.__r_.__value_.__l.__data_);
          }
          int v54 = v112;
          if (v112) {
            goto LABEL_80;
          }
          goto LABEL_89;
        }
LABEL_74:
        ++v30;
      }
    }
    uint64_t v52 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unsigned int v53 = (std::__shared_weak_count *)v52[1];
    uint64_t v132 = *v52;
    uint64_t v133 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v130, "Input and output should have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v132, 313, v130);
    if (v131 < 0) {
      operator delete(v130[0]);
    }
    int v54 = v133;
    if (v133) {
LABEL_80:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
LABEL_89:
    char v57 = 0;
LABEL_90:
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if ((v57 & 1) == 0) {
      goto LABEL_94;
    }
  }
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_94:
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }
LABEL_96:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v141);
  if (v146)
  {
    uint64_t v147 = v146;
    operator delete(v146);
  }
  if (v149)
  {
    std::string::size_type v150 = v149;
    operator delete(v149);
  }
}

void sub_20F5A2D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a56);
  }
  if (a73) {
    operator delete(a73);
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v73 - 200));
  long long v75 = *(void **)(v73 - 144);
  if (v75)
  {
    *(void *)(v73 - 136) = v75;
    operator delete(v75);
  }
  uint64_t v76 = *(void **)(v73 - 120);
  if (v76)
  {
    *(void *)(v73 - 112) = v76;
    operator delete(v76);
  }
  _Unwind_Resume(a1);
}

void sub_20F5A3168()
{
  if (*(char *)(v0 - 177) < 0) {
    JUMPOUT(0x20F5A315CLL);
  }
  JUMPOUT(0x20F5A3160);
}

void anonymous namespace'::ValidatePadInputs(MIL::IRTensorValueType *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 96))(a1);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v32, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  uint64_t v9 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2);
  std::string v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v29, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  if (MIL::IRTensorValueType::Rank(a2) == 1)
  {
    uint64_t v10 = MIL::IRDimension::AsConstant(*v29);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1))
    {
      unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
      if (v11 > 2 * MIL::IRTensorValueType::Rank(a1))
      {
        uint64_t v12 = (std::__shared_weak_count *)a3[1];
        uint64_t v23 = *a3;
        uint64_t v24 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Pad can have a maximum size of 2 * (input x rank)");
        MIL::ValidationResult::ValidationResult(a4, &v23, 315, __p);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v13 = v24;
        if (!v24) {
          goto LABEL_24;
        }
LABEL_23:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        goto LABEL_24;
      }
    }
    uint64_t v15 = MIL::IRDimension::AsConstant(*v29);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15) & 1) == 0)
    {
      MIL::ValidationResult::ValidationResult(a4);
      goto LABEL_24;
    }
    long long v16 = (std::__shared_weak_count *)a3[1];
    uint64_t v19 = *a3;
    std::vector<int>::size_type v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "Padding must be even! Provided odd number of padding");
    MIL::ValidationResult::ValidationResult(a4, &v19, 315, v17);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    uint64_t v13 = v20;
    if (v20) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v14 = (std::__shared_weak_count *)a3[1];
    uint64_t v27 = *a3;
    uint64_t v28 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "Padding must be rank 1");
    MIL::ValidationResult::ValidationResult(a4, &v27, 315, v25);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    uint64_t v13 = v28;
    if (v28) {
      goto LABEL_23;
    }
  }
LABEL_24:
  if (v29)
  {
    unint64_t v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_20F5A342C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  uint64_t v33 = *(void **)(v31 - 80);
  if (v33)
  {
    *(void *)(v31 - 72) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v31 - 56);
  if (v34)
  {
    *(void *)(v31 - 48) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRValueUtils::CopyTensorTo<int>(MIL::IRValue *a1, void *a2, unint64_t a3)
{
  char v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  unint64_t result = (void *)MIL::IRTensorValue::GetDataView<int>(v5);
  if (a3 < v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Insufficient destination buffer size.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v7)
  {
    return memmove(a2, result, 4 * v7);
  }
  return result;
}

void sub_20F5A3580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateFill(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v29, "shape");
  Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v29, 0);
  uint64_t v6 = ParameterValue;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else if (!ParameterValue)
  {
    goto LABEL_19;
  }
  unint64_t v7 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  unint64_t v9 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 16))(v8);
  if (v9 >= 6)
  {
    std::to_string(&v29, v9);
    uint64_t v10 = std::string::insert(&v29, 0, "'shape' parameter must have size less than equal to 5. Instead, size is ");
    unint64_t v11 = (std::string::value_type *)v10->__r_.__value_.__r.__words[0];
    std::string::size_type size = v10->__r_.__value_.__l.__size_;
    v28[0] = v10->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
    int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v15 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v26 = *LocationPtr;
    uint64_t v27 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13 < 0)
    {
      std::string::__init_copy_ctor_external(&v25, v11, size);
    }
    else
    {
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v25.__r_.__value_.__l.__size_ = size;
      LODWORD(v25.__r_.__value_.__r.__words[2]) = v28[0];
      *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v28 + 3);
      *((unsigned char *)&v25.__r_.__value_.__s + 23) = v13;
    }
    MIL::ValidationResult::ValidationResult(a2, &v26, 315, &v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    long long v21 = v27;
    if (!v27) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v16 = MIL::IRTensorValueType::Rank(v8);
  if (v16 < 2)
  {
LABEL_19:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v29, v16);
  uint64_t v17 = std::string::insert(&v29, 0, "'shape' parameter must have 1 dimension (rank 1). Instead, rank is ");
  unint64_t v11 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
  std::string::size_type v18 = v17->__r_.__value_.__l.__size_;
  v28[0] = v17->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  std::vector<int>::size_type v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v23 = *v19;
  uint64_t v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v11, v18);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p.__r_.__value_.__l.__size_ = v18;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v28[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v28 + 3);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v13;
  }
  MIL::ValidationResult::ValidationResult(a2, &v23, 315, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v21 = v24;
  if (!v24) {
    goto LABEL_25;
  }
LABEL_24:
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_25:
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_20F5A382C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateFlatten2D(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  BOOL v8 = IsParameterSet;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      goto LABEL_5;
    }
LABEL_12:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!IsParameterSet) {
    goto LABEL_12;
  }
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v10 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v12 = (std::__shared_weak_count *)LocationPtr[1];
  v13[0] = *LocationPtr;
  v13[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20F5A39E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateFlatten2DInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1) & 1) != 0
    && ((int v8 = MIL::IRTensorValueType::Rank(a1), v8 < a2) || -v8 > a2))
  {
    unint64_t v9 = (std::__shared_weak_count *)a3[1];
    uint64_t v12 = *a3;
    int v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'axis'' must be within range [-input_rank, input_rank]");
    MIL::ValidationResult::ValidationResult(a4, &v12, 315, __p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_20F5A3B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateNonMaximumSuppression(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v40, "boxes");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "scores");
  unint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 104))(v6)
    && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8) & 1) != 0)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    int v41 = 0;
    uint64_t v42 = 0;
    std::string::size_type v40 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v40, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v33, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
    if (*v40 == *(void *)v33)
    {
      if (v40[1] == *((void *)v33 + 1))
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v40[2] + 16))(v40[2]);
        if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18) == 4)
        {
          MIL::ValidationResult::ValidationResult(a2);
LABEL_35:
          if (v33)
          {
            uint64_t v34 = v33;
            operator delete(v33);
          }
          if (v40)
          {
            int v41 = v40;
            operator delete(v40);
          }
          return;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        std::vector<int>::size_type v20 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v23 = *LocationPtr;
        uint64_t v24 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v21, "Invalid boxes coordinate");
        MIL::ValidationResult::ValidationResult(a2, &v23, 315, v21);
        if (v22 < 0) {
          operator delete(v21[0]);
        }
        int v13 = v24;
        if (!v24) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v17 = (std::__shared_weak_count *)v16[1];
        uint64_t v27 = *v16;
        uint64_t v28 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v25, "Boxes don't match between boxes and scores");
        MIL::ValidationResult::ValidationResult(a2, &v27, 315, v25);
        if (v26 < 0) {
          operator delete(v25[0]);
        }
        int v13 = v28;
        if (!v28) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      char v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v12 = (std::__shared_weak_count *)v11[1];
      uint64_t v31 = *v11;
      uint64_t v32 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Batch doesn't match between boxes and scores");
      MIL::ValidationResult::ValidationResult(a2, &v31, 315, __p);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      int v13 = v32;
      if (!v32) {
        goto LABEL_35;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_35;
  }
  uint64_t v14 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v38 = *v14;
  uint64_t v39 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "Non-fixed rank not supported");
  MIL::ValidationResult::ValidationResult(a2, &v38, 315, v36);
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
}

void sub_20F5A3F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a33) {
    operator delete(a33);
  }
  uint64_t v36 = *(void **)(v34 - 72);
  if (v36)
  {
    *(void *)(v34 - 64) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTile(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reps");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unint64_t v7 = (std::__shared_weak_count *)LocationPtr[1];
  v8[0] = *LocationPtr;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F5A4098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateTileInputs(MIL::IRValue *a1@<X0>, uint64_t *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  if (a1 && (char v5 = (uint64_t *)MIL::IRValue::AsTensor(a1), Data = (int *)MIL::IRTensorValue::GetDataView<int>(v5), v7))
  {
    uint64_t v8 = 4 * v7;
    while (*Data > 0)
    {
      ++Data;
      v8 -= 4;
      if (!v8) {
        goto LABEL_6;
      }
    }
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v12 = *a2;
    int v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "All values of reps must be at least 1");
    MIL::ValidationResult::ValidationResult(a3, &v12, 315, __p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
LABEL_6:
    MIL::ValidationResult::ValidationResult(a3);
  }
}

void sub_20F5A419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTopk(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  if (MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "axis");
    Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
    int v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
    if (v21 < 0) {
      operator delete(v20);
    }
  }
  else
  {
    int v8 = -1;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "k");
  uint64_t v9 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
  char v10 = (const void *)v9;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p);
    if (v10) {
      goto LABEL_11;
    }
  }
  else if (v9)
  {
LABEL_11:
    int v11 = MIL::IRValue::GetScalar<int>(v10);
    goto LABEL_14;
  }
  int v11 = 1;
LABEL_14:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v13 = (std::__shared_weak_count *)LocationPtr[1];
  v14[0] = *LocationPtr;
  v14[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v16;
    long long v16 = 0uLL;
    *(_OWORD *)(a2 + 24) = v17;
    *(void *)(a2 + 40) = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v19;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
}

void sub_20F5A43B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateTopkInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 96))(a1);
  std::string v65 = 0;
  uint64_t v66 = 0;
  long long v64 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v64, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a1 + 104))(a1) & 1) == 0) {
    goto LABEL_9;
  }
  int v11 = a2;
  if (a2 < 0) {
    int v11 = MIL::IRTensorValueType::Rank(a1) + a2;
  }
  uint64_t v12 = MIL::IRTensorValueType::Rank(a1);
  if (v11 < 0 || v12 <= v11)
  {
    long long v16 = (std::__shared_weak_count *)a4[1];
    uint64_t v62 = *a4;
    long long v63 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v54, a2);
    long long v17 = std::string::insert(&v54, 0, "Provided axis (");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append(&v55, ") is not within range [-");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v53, v21);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v22 = &v53;
    }
    else {
      char v22 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v56, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    char v26 = std::string::append(&v57, ", ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v52, v28 - 1);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v29 = &v52;
    }
    else {
      std::string v29 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v52.__r_.__value_.__l.__size_;
    }
    uint64_t v31 = std::string::append(&v58, (const std::string::value_type *)v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    uint64_t v33 = std::string::append(&v59, "] for TopK");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    std::string::size_type v61 = v33->__r_.__value_.__r.__words[2];
    long long v60 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v62, 315, &v60);
    if (SHIBYTE(v61) < 0) {
      operator delete((void *)v60);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    uint64_t v35 = v63;
    if (!v63) {
      goto LABEL_45;
    }
LABEL_44:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    goto LABEL_45;
  }
  uint64_t v13 = (*(uint64_t (**)(void *))(*v64[v11] + 16))(v64[v11]);
  uint64_t v14 = v13;
  if (!v13 || (int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13), a3 >= 1) && v15 >= a3)
  {
LABEL_9:
    MIL::ValidationResult::ValidationResult(a5);
    goto LABEL_45;
  }
  uint64_t v36 = (std::__shared_weak_count *)a4[1];
  uint64_t v50 = *a4;
  unint64_t v51 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::to_string(&v56, a3);
  char v37 = std::string::insert(&v56, 0, "Provided k (");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = std::string::append(&v57, ") is not within range [1, ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
  std::to_string(&v55, v41);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v42 = &v55;
  }
  else {
    uint64_t v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v55.__r_.__value_.__l.__size_;
  }
  unint64_t v44 = std::string::append(&v58, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  char v46 = std::string::append(&v59, "] for TopK");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  std::string::size_type v49 = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a5, &v50, 315, __p);
  if (SHIBYTE(v49) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  uint64_t v35 = v51;
  if (v51) {
    goto LABEL_44;
  }
LABEL_45:
  if (v64)
  {
    std::string v65 = v64;
    operator delete(v64);
  }
}

void sub_20F5A4930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v54 - 169) < 0) {
    operator delete(*(void **)(v54 - 192));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::string v56 = *(void **)(v54 - 88);
  if (v56)
  {
    *(void *)(v54 - 80) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceArgsort(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = MIL::IRValueType::AsTensorType(SingleValueType);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  memset(v9, 0, sizeof(v9));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v9, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5A4BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFill(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (v6)
  {
    uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v6
                                                                        + 5));
    uint64_t v8 = MIL::IRValueType::AsTensorType(ValueType);
    if (SHIBYTE(v71) < 0) {
      operator delete(__p);
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 88))(v8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
    if (SHIBYTE(v71) < 0) {
      operator delete(__p);
    }
    std::string __p = 0;
    long long v70 = 0;
    long long v71 = 0;
    if (SingleValue)
    {
      uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*v10 + 32))(v10);
      unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      std::vector<std::string const*>::reserve(&__p, v12);
      long long v64 = a2;
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v10);
      if (v14)
      {
        int v15 = (unsigned int *)Data;
        long long v16 = (unsigned int *)(Data + 4 * v14);
        do
        {
          long long v17 = (MIL::MILContext *)*v15;
          if ((int)v17 <= 0)
          {
            exception = __cxa_allocate_exception(0x48uLL);
            uint64_t v63 = v64[1];
            *(void *)&long long v68 = *v64;
            *((void *)&v68 + 1) = v63;
            if (v63) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v67, "Cannot fill tensor of shape with negative elements.");
            MIL::ValidationError::ValidationError((uint64_t)exception, &v68, (uint64_t)v67, 315);
          }
          uint64_t v18 = MIL::IRConstantDimension::Make(*a1, v17);
          uint64_t v19 = v18;
          long long v20 = v70;
          if (v70 >= (uint64_t *)v71)
          {
            uint64_t v22 = ((char *)v70 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v22 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v23 = (v71 - (unsigned char *)__p) >> 2;
            if (v23 <= v22 + 1) {
              unint64_t v23 = v22 + 1;
            }
            if ((unint64_t)(v71 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v71, v24);
            }
            else {
              long long v25 = 0;
            }
            char v26 = (uint64_t *)&v25[8 * v22];
            *char v26 = v19;
            uint64_t v21 = v26 + 1;
            uint64_t v28 = (char *)__p;
            long long v27 = (char *)v70;
            if (v70 != __p)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *--char v26 = v29;
              }
              while (v27 != v28);
              long long v27 = (char *)__p;
            }
            std::string __p = v26;
            long long v70 = v21;
            long long v71 = &v25[8 * v24];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            uint64_t *v70 = v18;
            uint64_t v21 = v20 + 1;
          }
          long long v70 = v21;
          ++v15;
        }
        while (v15 != v16);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v65, "shape");
      std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v65);
      if (!v30) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v31 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v30
                                                                    + 5));
      uint64_t v32 = MIL::IRValueType::AsTensorType(v31);
      uint64_t v33 = **(MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 96))(v32);
      if (v66 < 0) {
        operator delete(v65[0]);
      }
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)v33 + 24))(v33))
      {
        uint64_t v34 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
        uint64_t v35 = v34;
        uint64_t v36 = v70;
        if (v70 >= (uint64_t *)v71)
        {
          uint64_t v53 = ((char *)v70 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v53 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v54 = (v71 - (unsigned char *)__p) >> 2;
          if (v54 <= v53 + 1) {
            unint64_t v54 = v53 + 1;
          }
          if ((unint64_t)(v71 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v54;
          }
          if (v55) {
            std::string v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v71, v55);
          }
          else {
            std::string v56 = 0;
          }
          std::string v57 = (uint64_t *)&v56[8 * v53];
          std::string v58 = &v56[8 * v55];
          *std::string v57 = v35;
          char v37 = v57 + 1;
          long long v60 = (char *)__p;
          std::string v59 = (char *)v70;
          if (v70 != __p)
          {
            do
            {
              uint64_t v61 = *((void *)v59 - 1);
              v59 -= 8;
              *--std::string v57 = v61;
            }
            while (v59 != v60);
            std::string v59 = (char *)__p;
          }
          std::string __p = v57;
          long long v70 = v37;
          long long v71 = v58;
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          uint64_t *v70 = v34;
          char v37 = v36 + 1;
        }
        long long v70 = v37;
      }
      else
      {
        uint64_t v38 = MIL::IRDimension::AsConstant(v33);
        unint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
        std::vector<std::string const*>::reserve(&__p, v39);
        if (v39)
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            uint64_t v41 = MIL::IRUnknownDimension::Make(*a1, 0);
            uint64_t v42 = v41;
            std::string::size_type v43 = v70;
            if (v70 >= (uint64_t *)v71)
            {
              uint64_t v45 = ((char *)v70 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v45 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v46 = (v71 - (unsigned char *)__p) >> 2;
              if (v46 <= v45 + 1) {
                unint64_t v46 = v45 + 1;
              }
              if ((unint64_t)(v71 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v46;
              }
              if (v47) {
                std::string v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v71, v47);
              }
              else {
                std::string v48 = 0;
              }
              std::string::size_type v49 = (uint64_t *)&v48[8 * v45];
              uint64_t *v49 = v42;
              unint64_t v44 = v49 + 1;
              unint64_t v51 = (char *)__p;
              uint64_t v50 = (char *)v70;
              if (v70 != __p)
              {
                do
                {
                  uint64_t v52 = *((void *)v50 - 1);
                  v50 -= 8;
                  *--std::string::size_type v49 = v52;
                }
                while (v50 != v51);
                uint64_t v50 = (char *)__p;
              }
              std::string __p = v49;
              long long v70 = v44;
              long long v71 = &v48[8 * v47];
              if (v50) {
                operator delete(v50);
              }
            }
            else
            {
              uint64_t *v70 = v41;
              unint64_t v44 = v43 + 1;
            }
            long long v70 = v44;
          }
        }
      }
    }
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F5A51AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v19);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v8 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  std::string::basic_string[abi:ne180100]<0>(v19, "axis");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v19);
  int v10 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v11 = *a2;
  unint64_t v12 = (std::__shared_weak_count *)a2[1];
  v18[0] = v11;
  v18[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v19))
  {
    if (v10 < 0) {
      v10 += (v8[1] - *v8) >> 3;
    }
    memset(__p, 0, sizeof(__p));
    std::vector<std::string const*>::reserve(__p, 2uLL);
    if ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 104))(v7))
    {
      v14[0] = __p;
      v14[1] = v8;
      uint64_t v14[2] = a1;
      MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((uint64_t)v14, 0, v10);
      MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((uint64_t)v14, v10, (uint64_t)(v8[1] - *v8) >> 3);
    }
    else
    {
      v14[0] = MIL::IRUnknownDimension::Make(*a1, 0);
      std::vector<MIL::IRDimension const*>::assign((char **)__p, 2uLL, v14);
    }
    (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v16, (uint64_t)v19);
  v16[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v17 = v21;
  MIL::ValidationError::ValidationError(exception, v16);
}

void sub_20F5A5510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v15 - 104));
  _Unwind_Resume(a1);
}

void sub_20F5A5590()
{
  if (*(char *)(v0 - 81) < 0) {
    operator delete(*(void **)(v0 - 104));
  }
  JUMPOUT(0x20F5A5588);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceFlatten2D(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    unint64_t v5 = a2;
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t v7 = *(void *)(**(void **)(a1 + 8) + 8 * v5);
      if (!(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7)) {
        break;
      }
      uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(**(void **)(a1 + 8) + 8 * v5));
      v6 *= (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      if (a3 == ++v5) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = *(void ***)a1;
    uint64_t v10 = MIL::IRUnknownDimension::Make(**(MIL::IRUnknownDimension ***)(a1 + 16), 0);
    uint64_t v11 = (uint64_t *)v9[1];
    unint64_t v18 = (unint64_t)v9[2];
    if ((unint64_t)v11 < v18)
    {
LABEL_17:
      *uint64_t v11 = v10;
      uint64_t v19 = v11 + 1;
      goto LABEL_36;
    }
    uint64_t v25 = ((char *)v11 - (unsigned char *)*v9) >> 3;
    if (!((unint64_t)(v25 + 1) >> 61))
    {
      uint64_t v26 = v18 - (void)*v9;
      uint64_t v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v9 + 2), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      char v20 = (uint64_t *)&v29[8 * v25];
      int v21 = &v29[8 * v28];
      uint64_t *v20 = v10;
      uint64_t v19 = v20 + 1;
      std::string::size_type v30 = (char *)*v9;
      uint64_t v22 = (char *)v9[1];
      if (v22 == *v9) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v31 = *((void *)v22 - 1);
        v22 -= 8;
        *--char v20 = v31;
      }
      while (v22 != v30);
      goto LABEL_33;
    }
LABEL_37:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = 1;
LABEL_7:
  uint64_t v9 = *(void ***)a1;
  uint64_t v10 = MIL::IRConstantDimension::Make(**(MIL::IRConstantDimension ***)(a1 + 16), (MIL::MILContext *)v6);
  uint64_t v11 = (uint64_t *)v9[1];
  unint64_t v12 = (unint64_t)v9[2];
  if ((unint64_t)v11 < v12) {
    goto LABEL_17;
  }
  uint64_t v13 = ((char *)v11 - (unsigned char *)*v9) >> 3;
  if ((unint64_t)(v13 + 1) >> 61) {
    goto LABEL_37;
  }
  uint64_t v14 = v12 - (void)*v9;
  uint64_t v15 = v14 >> 2;
  if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
    uint64_t v15 = v13 + 1;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16) {
    int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v9 + 2), v16);
  }
  else {
    int v17 = 0;
  }
  char v20 = (uint64_t *)&v17[8 * v13];
  int v21 = &v17[8 * v16];
  uint64_t *v20 = v10;
  uint64_t v19 = v20 + 1;
  unint64_t v23 = (char *)*v9;
  uint64_t v22 = (char *)v9[1];
  if (v22 == *v9) {
    goto LABEL_34;
  }
  do
  {
    uint64_t v24 = *((void *)v22 - 1);
    v22 -= 8;
    *--char v20 = v24;
  }
  while (v22 != v23);
LABEL_33:
  uint64_t v22 = (char *)*v9;
LABEL_34:
  *uint64_t v9 = v20;
  v9[1] = v19;
  uint64_t v9[2] = v21;
  if (v22) {
    operator delete(v22);
  }
LABEL_36:
  v9[1] = v19;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v34, "max_boxes");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v34);
  int v7 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
  if (v7 > 0)
  {
    uint64_t v8 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v7);
    std::string::basic_string[abi:ne180100]<0>(&v34, "boxes");
    Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v34);
    uint64_t v10 = MIL::IRValueType::AsTensorType(SingleValueType);
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "scores");
    uint64_t v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v34);
    uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
    if (SHIBYTE(v36) < 0) {
      operator delete(v34);
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v34 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
    if ((unint64_t)((char *)v35 - (char *)v34) >= 9)
    {
      v34[1] = v8;
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v27, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
      if ((unint64_t)(v28 - (void)v27) >= 9)
      {
        *((void *)v27 + 1) = v8;
        uint64_t v15 = v34;
        if (v35 != v34)
        {
          uint64_t v16 = *v34;
          int v17 = operator new(0x10uLL);
          *int v17 = v16;
          v17[1] = v8;
          uint64_t v18 = *v15;
          *(void *)operator new(8uLL) = v18;
          (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
          MIL::IRTensorValueType::MakeWithShape();
        }
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      exception = __cxa_allocate_exception(0x48uLL);
      uint64_t v24 = a2[1];
      *(void *)&long long v26 = *a2;
      *((void *)&v26 + 1) = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v25, "Scores param should have a rank of 3");
      MIL::ValidationError::ValidationError((uint64_t)exception, &v26, (uint64_t)v25, 315);
    }
    int v21 = __cxa_allocate_exception(0x48uLL);
    uint64_t v22 = a2[1];
    *(void *)&long long v31 = *a2;
    *((void *)&v31 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v30, "Boxes param should have a rank of 3");
    MIL::ValidationError::ValidationError((uint64_t)v21, &v31, (uint64_t)v30, 315);
  }
  uint64_t v19 = __cxa_allocate_exception(0x48uLL);
  uint64_t v20 = a2[1];
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + 1) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "Max_boxes parameter needs to be greater than zero always.");
  MIL::ValidationError::ValidationError((uint64_t)v19, &v33, (uint64_t)v32, 315);
}

void sub_20F5A5C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v35) {
    __cxa_free_exception(v34);
  }
  if (a24) {
    operator delete(a24);
  }
  uint64_t v38 = *(void **)(v36 - 88);
  if (v38)
  {
    *(void *)(v36 - 80) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceNonZero(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  int v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string __p = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  std::vector<std::string const*>::reserve(&__p, 2uLL);
  uint64_t v8 = MIL::IRUnknownDimension::Make(*a1, 0);
  uint64_t v9 = v8;
  uint64_t v10 = v42;
  if ((unint64_t)v42 >= v43)
  {
    uint64_t v12 = ((char *)v42 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (uint64_t)(v43 - (void)__p) >> 2;
    if (v13 <= v12 + 1) {
      unint64_t v13 = v12 + 1;
    }
    if (v43 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (uint64_t *)&v15[8 * v12];
    int v17 = &v15[8 * v14];
    *uint64_t v16 = v9;
    uint64_t v11 = v16 + 1;
    uint64_t v19 = (char *)__p;
    uint64_t v18 = (char *)v42;
    if (v42 != __p)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--uint64_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)__p;
    }
    std::string __p = v16;
    uint64_t v42 = v11;
    unint64_t v43 = (unint64_t)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v42 = v8;
    uint64_t v11 = v10 + 1;
  }
  uint64_t v42 = v11;
  BOOL HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v7);
  uint64_t v22 = *a1;
  if (HasVariadicUnknownDims)
  {
    uint64_t v23 = MIL::IRUnknownDimension::Make(v22, 0);
    uint64_t v24 = v42;
    if ((unint64_t)v42 >= v43)
    {
      uint64_t v25 = ((char *)v42 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (uint64_t)(v43 - (void)__p) >> 2;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      if (v43 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v27);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v34 = (uint64_t *)&v28[8 * v25];
      int v35 = &v28[8 * v27];
      *uint64_t v34 = v23;
      uint64_t v29 = v34 + 1;
      char v37 = (char *)__p;
      uint64_t v36 = (char *)v42;
      if (v42 == __p) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v38 = *((void *)v36 - 1);
        v36 -= 8;
        *--uint64_t v34 = v38;
      }
      while (v36 != v37);
LABEL_46:
      uint64_t v36 = (char *)__p;
LABEL_47:
      std::string __p = v34;
      uint64_t v42 = v29;
      unint64_t v43 = (unint64_t)v35;
      if (v36) {
        operator delete(v36);
      }
LABEL_49:
      uint64_t v42 = v29;
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  else
  {
    uint64_t v23 = MIL::IRConstantDimension::Make(v22, (MIL::MILContext *)((v7[1] - *v7) >> 3));
    uint64_t v24 = v42;
    if ((unint64_t)v42 >= v43)
    {
      uint64_t v30 = ((char *)v42 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v30 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = (uint64_t)(v43 - (void)__p) >> 2;
      if (v31 <= v30 + 1) {
        unint64_t v31 = v30 + 1;
      }
      if (v43 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32) {
        long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v43, v32);
      }
      else {
        long long v33 = 0;
      }
      uint64_t v34 = (uint64_t *)&v33[8 * v30];
      int v35 = &v33[8 * v32];
      *uint64_t v34 = v23;
      uint64_t v29 = v34 + 1;
      unint64_t v39 = (char *)__p;
      uint64_t v36 = (char *)v42;
      if (v42 == __p) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v40 = *((void *)v36 - 1);
        v36 -= 8;
        *--uint64_t v34 = v40;
      }
      while (v36 != v39);
      goto LABEL_46;
    }
  }
  *uint64_t v24 = v23;
  uint64_t v29 = v24 + 1;
  goto LABEL_49;
}

void sub_20F5A60A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(void *a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v42, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "on_value");
  uint64_t v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "off_value");
  uint64_t v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 88))(v13);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (v11 != v14)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v29 = a2[1];
    *(void *)&long long v41 = *a2;
    *((void *)&v41 + 1) = v29;
    if (v29) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v40, "The dtype of on_value and off_value must match with each other.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v41, (uint64_t)v40, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "one_hot_vector_size");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  int v39 = -1;
  if (SingleValue)
  {
    int v39 = MIL::IRValue::GetScalar<int>(SingleValue);
    if (v39 < 0)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The value of one_hot_vector_size must be non-negative but is ", 61);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)".", 1);
      unint64_t v31 = __cxa_allocate_exception(0x48uLL);
      uint64_t v32 = a2[1];
      *(void *)&long long v35 = *a2;
      *((void *)&v35 + 1) = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::ValidationError::ValidationError((uint64_t)v31, &v35, (uint64_t)v34, 315);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  int v17 = v16;
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p);
    if (v17)
    {
LABEL_14:
      std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
      uint64_t v18 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
      unsigned int v19 = MIL::IRValue::GetScalar<int>(v18);
      if (SHIBYTE(v38) < 0) {
        operator delete(__p);
      }
      std::string __p = a1;
      char v37 = &v42;
      uint64_t v38 = &v39;
      memset(&v33[32], 0, 24);
      if ((v19 & 0x80000000) == 0)
      {
        MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((MIL::IRUnknownDimension ***)&__p, (uint64_t *)&v42, v19, (void **)v33);
        *(_OWORD *)&v33[32] = *(_OWORD *)v33;
        *(void *)&v33[48] = *(void *)&v33[16];
        goto LABEL_33;
      }
LABEL_20:
      if (v42 != v43)
      {
        uint64_t v20 = (void *)(v43 - 8);
        if (v43 - 8 > v42)
        {
          unint64_t v21 = v42 + 8;
          do
          {
            uint64_t v22 = *(void *)(v21 - 8);
            *(void *)(v21 - 8) = *v20;
            *v20-- = v22;
            BOOL v23 = v21 >= (unint64_t)v20;
            v21 += 8;
          }
          while (!v23);
        }
      }
      MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()((MIL::IRUnknownDimension ***)&__p, (uint64_t *)&v42, ~v19, (void **)v33);
      *(void *)&v33[32] = *(void *)v33;
      *(_OWORD *)&v33[40] = *(_OWORD *)&v33[8];
      uint64_t v24 = (void *)(*(void *)&v33[8] - 8);
      if (*(void *)v33 != *(void *)&v33[8] && (unint64_t)v24 > *(void *)v33)
      {
        unint64_t v26 = *(void *)v33 + 8;
        do
        {
          uint64_t v27 = *(void *)(v26 - 8);
          *(void *)(v26 - 8) = *v24;
          *v24-- = v27;
          BOOL v23 = v26 >= (unint64_t)v24;
          v26 += 8;
        }
        while (!v23);
      }
LABEL_33:
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  else if (v16)
  {
    goto LABEL_14;
  }
  std::string __p = a1;
  char v37 = &v42;
  uint64_t v38 = &v39;
  unsigned int v19 = -1;
  goto LABEL_20;
}

void sub_20F5A6574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v30) {
    __cxa_free_exception(v29);
  }
  std::ostringstream::~ostringstream((uint64_t)&a24);
  long long v33 = *(void **)(v31 - 88);
  if (v33)
  {
    *(void *)(v31 - 80) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void sub_20F5A6678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x20F5A666CLL);
  }
  JUMPOUT(0x20F5A6670);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceOneHot(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)::$_0::operator()(MIL::IRUnknownDimension ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2[1] == *a2) {
    return;
  }
  uint64_t v8 = 0;
  while (1)
  {
    if (v8 != a3) {
      goto LABEL_35;
    }
    uint64_t v9 = (MIL::MILContext *)*(unsigned int *)a1[2];
    uint64_t v10 = **a1;
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v11 = MIL::IRUnknownDimension::Make(v10, 0);
      uint64_t v13 = (uint64_t *)a4[1];
      unint64_t v19 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v19)
      {
        uint64_t v21 = ((char *)v13 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v19 - (void)*a4;
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v23;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v24 = (uint64_t *)&v18[8 * v21];
        *uint64_t v24 = v11;
        uint64_t v20 = v24 + 1;
        uint64_t v28 = (char *)*a4;
        uint64_t v25 = (char *)a4[1];
        if (v25 == *a4) {
          goto LABEL_32;
        }
        do
        {
          uint64_t v29 = *((void *)v25 - 1);
          v25 -= 8;
          *--uint64_t v24 = v29;
        }
        while (v25 != v28);
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v11 = MIL::IRConstantDimension::Make(v10, v9);
      uint64_t v13 = (uint64_t *)a4[1];
      unint64_t v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v14 = ((char *)v13 - (unsigned char *)*a4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v12 - (void)*a4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v24 = (uint64_t *)&v18[8 * v14];
        *uint64_t v24 = v11;
        uint64_t v20 = v24 + 1;
        unint64_t v26 = (char *)*a4;
        uint64_t v25 = (char *)a4[1];
        if (v25 == *a4) {
          goto LABEL_32;
        }
        do
        {
          uint64_t v27 = *((void *)v25 - 1);
          v25 -= 8;
          *--uint64_t v24 = v27;
        }
        while (v25 != v26);
LABEL_31:
        uint64_t v25 = (char *)*a4;
LABEL_32:
        *a4 = v24;
        a4[1] = v20;
        a4[2] = &v18[8 * v17];
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_34;
      }
    }
    *uint64_t v13 = v11;
    uint64_t v20 = v13 + 1;
LABEL_34:
    a4[1] = v20;
LABEL_35:
    uint64_t v30 = *((void *)*a1[1] + v8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 32))(v30)) {
      break;
    }
    uint64_t v31 = *a2;
    long long v33 = a4[1];
    unint64_t v32 = (unint64_t)a4[2];
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v35 = ((char *)v33 - (unsigned char *)*a4) >> 3;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v32 - (void)*a4;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v38);
      }
      else {
        int v39 = 0;
      }
      uint64_t v40 = &v39[8 * v35];
      *(void *)uint64_t v40 = *(void *)(v31 + 8 * v8);
      uint64_t v34 = v40 + 8;
      unint64_t v42 = (char *)*a4;
      long long v41 = (char *)a4[1];
      if (v41 != *a4)
      {
        do
        {
          uint64_t v43 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v40 - 1) = v43;
          v40 -= 8;
        }
        while (v41 != v42);
        long long v41 = (char *)*a4;
      }
      *a4 = v40;
      a4[1] = v34;
      a4[2] = &v39[8 * v38];
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      void *v33 = *(void *)(v31 + 8 * v8);
      uint64_t v34 = v33 + 1;
    }
    a4[1] = v34;
    if (++v8 >= (unint64_t)((a2[1] - *a2) >> 3)) {
      return;
    }
  }
  uint64_t v44 = MIL::IRUnknownDimension::Make(**a1, (MIL::MILContext *)1);
  uint64_t v45 = v44;
  unint64_t v47 = (uint64_t *)a4[1];
  unint64_t v46 = (unint64_t)a4[2];
  if ((unint64_t)v47 >= v46)
  {
    uint64_t v49 = ((char *)v47 - (unsigned char *)*a4) >> 3;
    if ((unint64_t)(v49 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v50 = v46 - (void)*a4;
    uint64_t v51 = v50 >> 2;
    if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
      uint64_t v51 = v49 + 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v51;
    }
    if (v52) {
      uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v52);
    }
    else {
      uint64_t v53 = 0;
    }
    unint64_t v54 = (uint64_t *)&v53[8 * v49];
    unint64_t v55 = &v53[8 * v52];
    uint64_t *v54 = v45;
    std::string v48 = v54 + 1;
    std::string v57 = (char *)*a4;
    std::string v56 = (char *)a4[1];
    if (v56 != *a4)
    {
      do
      {
        uint64_t v58 = *((void *)v56 - 1);
        v56 -= 8;
        *--unint64_t v54 = v58;
      }
      while (v56 != v57);
      std::string v56 = (char *)*a4;
    }
    *a4 = v54;
    a4[1] = v48;
    a4[2] = v55;
    if (v56) {
      operator delete(v56);
    }
  }
  else
  {
    uint64_t *v47 = v44;
    std::string v48 = v47 + 1;
  }
  a4[1] = v48;
}

void sub_20F5A6A28(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePad(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v109 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  std::string v112 = 0;
  v113[0] = 0;
  uint64_t v111 = 0;
  std::vector<std::string const*>::reserve((void **)&v111, (v8[1] - *v8) >> 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "pad");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v9
                                                                      + 5));
  uint64_t v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
  if (v109 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v12 = (std::__shared_weak_count *)a2[1];
  v107[0] = *a2;
  v107[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v105, (uint64_t)__p);
    v105[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v106 = v110;
    MIL::ValidationError::ValidationError(exception, v105);
  }
  std::string v99 = a3;
  std::string v98 = a2;
  unint64_t v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v11 + 16))(v11);
  uint64_t v14 = (v8[1] - *v8) >> 3;
  unint64_t v15 = v14 - (v13 >> 1);
  if (v14 != v13 >> 1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v112;
    do
    {
      uint64_t v18 = *v8;
      if ((unint64_t)v17 >= v113[0])
      {
        uint64_t v19 = (v17 - v111) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = (uint64_t)(v113[0] - (void)v111) >> 2;
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        if (v113[0] - (void)v111 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v113, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = &v22[8 * v19];
        *(void *)uint64_t v23 = *(void *)(v18 + 8 * v16);
        unint64_t v17 = v23 + 8;
        uint64_t v25 = v111;
        uint64_t v24 = v112;
        if (v112 != v111)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v23 - 1) = v26;
            v23 -= 8;
          }
          while (v24 != v25);
          uint64_t v24 = v111;
        }
        uint64_t v111 = v23;
        std::string v112 = v17;
        v113[0] = &v22[8 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)unint64_t v17 = *(void *)(v18 + 8 * v16);
        v17 += 8;
      }
      std::string v112 = v17;
      ++v16;
    }
    while (v16 != v15);
  }
  std::string::basic_string[abi:ne180100]<0>(&v102, "pad");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(v99, (uint64_t)&v102);
  if (SHIBYTE(v104) < 0) {
    operator delete(v102);
  }
  unint64_t v28 = v13 >> 1;
  if (!SingleValue)
  {
    if (v13 >= 2)
    {
      uint64_t v77 = 0;
      if (v28 <= 1) {
        uint64_t v78 = 1;
      }
      else {
        uint64_t v78 = v13 >> 1;
      }
      do
      {
        uint64_t v79 = *(void *)(*v8 + 8 * (v77 + v15));
        if ((*(uint64_t (**)(uint64_t))(*(void *)v79 + 24))(v79))
        {
          uint64_t v80 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v8 + 8 * (v77 + v15)));
          long long v81 = (MIL::MILContext *)(*(uint64_t (**)(uint64_t))(*(void *)v80 + 32))(v80);
        }
        else
        {
          long long v81 = 0;
        }
        uint64_t v82 = MIL::IRUnknownDimension::Make(*a1, v81);
        uint64_t v83 = v82;
        uint64_t v84 = v112;
        if ((unint64_t)v112 >= v113[0])
        {
          int64_t v86 = (v112 - v111) >> 3;
          if ((unint64_t)(v86 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v87 = (uint64_t)(v113[0] - (void)v111) >> 2;
          if (v87 <= v86 + 1) {
            unint64_t v87 = v86 + 1;
          }
          if (v113[0] - (void)v111 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          if (v88) {
            uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v113, v88);
          }
          else {
            uint64_t v89 = 0;
          }
          uint64_t v90 = &v89[8 * v86];
          *(void *)uint64_t v90 = v83;
          char v85 = v90 + 8;
          long long v92 = v111;
          std::string::size_type v91 = v112;
          if (v112 != v111)
          {
            do
            {
              uint64_t v93 = *((void *)v91 - 1);
              v91 -= 8;
              *((void *)v90 - 1) = v93;
              v90 -= 8;
            }
            while (v91 != v92);
            std::string::size_type v91 = v111;
          }
          uint64_t v111 = v90;
          std::string v112 = v85;
          v113[0] = &v89[8 * v88];
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          *(void *)std::string v112 = v82;
          char v85 = v84 + 8;
        }
        std::string v112 = v85;
        ++v77;
      }
      while (v77 != v78);
    }
    goto LABEL_122;
  }
  uint64_t v29 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v29);
  unint64_t v102 = 0;
  unint64_t v103 = 0;
  unint64_t v104 = 0;
  std::vector<std::string const*>::reserve(&v102, v13 >> 1);
  if ((int)v28 < 1) {
    goto LABEL_120;
  }
  char v31 = 0;
  for (uint64_t i = (v13 >> 1); ; --i)
  {
    unint64_t v28 = (v28 - 1);
    if (v31)
    {
      uint64_t v33 = MIL::IRUnknownDimension::Make(*a1, 0);
      uint64_t v34 = v33;
      uint64_t v35 = v103;
      if ((unint64_t)v103 >= v104)
      {
        uint64_t v45 = ((char *)v103 - (unsigned char *)v102) >> 3;
        if ((unint64_t)(v45 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = (uint64_t)(v104 - (void)v102) >> 2;
        if (v46 <= v45 + 1) {
          unint64_t v46 = v45 + 1;
        }
        if (v104 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          std::string v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v104, v47);
        }
        else {
          std::string v48 = 0;
        }
        long long v60 = (uint64_t *)&v48[8 * v45];
        *long long v60 = v34;
        uint64_t v36 = v60 + 1;
        uint64_t v62 = v102;
        uint64_t v61 = v103;
        if (v103 != v102)
        {
          do
          {
            uint64_t v63 = *--v61;
            *--long long v60 = v63;
          }
          while (v61 != v62);
          uint64_t v61 = v102;
        }
        unint64_t v102 = v60;
        unint64_t v103 = v36;
        unint64_t v104 = (unint64_t)&v48[8 * v47];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *unint64_t v103 = v33;
        uint64_t v36 = v35 + 1;
      }
      unint64_t v103 = v36;
      char v31 = 1;
    }
    else
    {
      unint64_t v37 = v15 + v28;
      if ((*(uint64_t (**)(void))(**(void **)(*v8 + 8 * v37) + 16))(*(void *)(*v8 + 8 * v37)))
      {
        uint64_t v38 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v8 + 8 * v37));
        int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
        int v40 = *(_DWORD *)(Data + 8 * v28) + *(_DWORD *)(Data + 8 * v28 + 4);
        if (v40 + v39 < 0)
        {
          char v95 = __cxa_allocate_exception(0x48uLL);
          uint64_t v96 = v98[1];
          *(void *)&long long v101 = *v98;
          *((void *)&v101 + 1) = v96;
          if (v96) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v100, "Negative padded dimension is not allowed.");
          MIL::ValidationError::ValidationError((uint64_t)v95, &v101, (uint64_t)v100, 315);
        }
        uint64_t v41 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v40 + v39));
        uint64_t v42 = v41;
        uint64_t v43 = v103;
        if ((unint64_t)v103 >= v104)
        {
          uint64_t v56 = ((char *)v103 - (unsigned char *)v102) >> 3;
          if ((unint64_t)(v56 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v57 = (uint64_t)(v104 - (void)v102) >> 2;
          if (v57 <= v56 + 1) {
            unint64_t v57 = v56 + 1;
          }
          if (v104 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v57;
          }
          if (v58) {
            std::string v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v104, v58);
          }
          else {
            std::string v59 = 0;
          }
          long long v68 = (uint64_t *)&v59[8 * v56];
          uint64_t *v68 = v42;
          uint64_t v44 = v68 + 1;
          long long v70 = v102;
          long long v69 = v103;
          if (v103 != v102)
          {
            do
            {
              uint64_t v71 = *--v69;
              *--long long v68 = v71;
            }
            while (v69 != v70);
            long long v69 = v102;
          }
          unint64_t v102 = v68;
          unint64_t v103 = v44;
          unint64_t v104 = (unint64_t)&v59[8 * v58];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *unint64_t v103 = v41;
          uint64_t v44 = v43 + 1;
        }
        unint64_t v103 = v44;
        if (i <= 1) {
          goto LABEL_120;
        }
        char v31 = 0;
        continue;
      }
      uint64_t v49 = *a1;
      uint64_t v50 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v8 + 8 * v37));
      uint64_t v51 = (MIL::MILContext *)(*(uint64_t (**)(uint64_t))(*(void *)v50 + 32))(v50);
      uint64_t v52 = MIL::IRUnknownDimension::Make(v49, v51);
      uint64_t v53 = v52;
      unint64_t v54 = v103;
      if ((unint64_t)v103 >= v104)
      {
        uint64_t v64 = ((char *)v103 - (unsigned char *)v102) >> 3;
        if ((unint64_t)(v64 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v65 = (uint64_t)(v104 - (void)v102) >> 2;
        if (v65 <= v64 + 1) {
          unint64_t v65 = v64 + 1;
        }
        if (v104 - (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66) {
          long long v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v104, v66);
        }
        else {
          long long v67 = 0;
        }
        uint64_t v72 = (uint64_t *)&v67[8 * v64];
        *uint64_t v72 = v53;
        unint64_t v55 = v72 + 1;
        unint64_t v74 = v102;
        uint64_t v73 = v103;
        if (v103 != v102)
        {
          do
          {
            uint64_t v75 = *--v73;
            *--uint64_t v72 = v75;
          }
          while (v73 != v74);
          uint64_t v73 = v102;
        }
        unint64_t v102 = v72;
        unint64_t v103 = v55;
        unint64_t v104 = (unint64_t)&v67[8 * v66];
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        *unint64_t v103 = v52;
        unint64_t v55 = v54 + 1;
      }
      unint64_t v103 = v55;
      uint64_t v76 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)(*v8 + 8 * v37));
      char v31 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 32))(v76);
    }
    if (i < 2)
    {
      if ((v31 & 1) != 0 && v112 != v111)
      {
        uint64_t v94 = MIL::IRUnknownDimension::Make(*a1, 0);
        *((void *)v112 - 1) = v94;
      }
LABEL_120:
      std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>,std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>>((uint64_t)&v111, v112, (uint64_t)v103, (uint64_t)v103, (uint64_t)v102, (uint64_t)v102, ((char *)v103 - (unsigned char *)v102) >> 3);
      if (v102)
      {
        unint64_t v103 = (uint64_t *)v102;
        operator delete(v102);
      }
LABEL_122:
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
}

void sub_20F5A73C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a36);
  uint64_t v43 = *(void **)(v41 - 112);
  if (v43)
  {
    *(void *)(v41 - 104) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRange1D(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "start");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "start");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "end");
  uint64_t v8 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "step");
  uint64_t v9 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  std::vector<std::string const*>::reserve(&__p, 1uLL);
  if (SingleValue && v8 && v9)
  {
    uint64_t v10 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(SingleValue);
    FloatScalaruint64_t Value = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v10, v11);
    unint64_t v13 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(v8);
    float v15 = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v13, v14);
    uint64_t v16 = (MIL::ValueTypeInferenceUtils *)MIL::IRValue::AsTensor(v9);
    float v18 = MIL::ValueTypeInferenceUtils::GetFloatScalarValue(v16, v17);
    uint64_t v19 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)vcvtps_u32_f32((float)(v15 - FloatScalarValue) / v18));
    unint64_t v20 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v21 = ((char *)v38 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v21 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v22 = (uint64_t)(v39 - (void)__p) >> 2;
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (v39 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23) {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v39, v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v30 = (uint64_t *)&v24[8 * v21];
      char v31 = &v24[8 * v23];
      *uint64_t v30 = v19;
      uint64_t v25 = v30 + 1;
      uint64_t v35 = (char *)__p;
      unint64_t v32 = (char *)v38;
      if (v38 == __p) {
        goto LABEL_39;
      }
      do
      {
        uint64_t v36 = *((void *)v32 - 1);
        v32 -= 8;
        *--uint64_t v30 = v36;
      }
      while (v32 != v35);
LABEL_38:
      unint64_t v32 = (char *)__p;
LABEL_39:
      std::string __p = v30;
      uint64_t v38 = v25;
      unint64_t v39 = (unint64_t)v31;
      if (v32) {
        operator delete(v32);
      }
LABEL_41:
      uint64_t v38 = v25;
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
  else
  {
    uint64_t v19 = MIL::IRUnknownDimension::Make(*a1, 0);
    unint64_t v20 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v26 = ((char *)v38 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = (uint64_t)(v39 - (void)__p) >> 2;
      if (v27 <= v26 + 1) {
        unint64_t v27 = v26 + 1;
      }
      if (v39 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v39, v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = (uint64_t *)&v29[8 * v26];
      char v31 = &v29[8 * v28];
      *uint64_t v30 = v19;
      uint64_t v25 = v30 + 1;
      uint64_t v33 = (char *)__p;
      unint64_t v32 = (char *)v38;
      if (v38 == __p) {
        goto LABEL_39;
      }
      do
      {
        uint64_t v34 = *((void *)v32 - 1);
        v32 -= 8;
        *--uint64_t v30 = v34;
      }
      while (v32 != v33);
      goto LABEL_38;
    }
  }
  uint64_t *v20 = v19;
  uint64_t v25 = v20 + 1;
  goto LABEL_41;
}

void sub_20F5A7858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceShape(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  BOOL HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&__p);
  uint64_t v9 = *a1;
  if (HasVariadicUnknownDims) {
    uint64_t v10 = MIL::IRUnknownDimension::Make(v9, 0);
  }
  else {
    uint64_t v10 = MIL::IRConstantDimension::Make(v9, (MIL::MILContext *)((v12 - (uint64_t)__p) >> 3));
  }
  *(void *)operator new(8uLL) = v10;
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5A79FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTile(MIL::IRUnknownDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v63, "reps");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v63);
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  v62[0] = *a2;
  v62[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v63))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v60, (uint64_t)v63);
    v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v61 = v65;
    MIL::ValidationError::ValidationError(exception, v60);
  }
  std::string::basic_string[abi:ne180100]<0>(&v57, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v57);
  uint64_t v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v59) < 0) {
    operator delete(v57);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  unint64_t v57 = 0;
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v57, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&v57))
  {
    uint64_t v42 = __cxa_allocate_exception(0x48uLL);
    uint64_t v43 = a2[1];
    v55[0] = *a2;
    v55[1] = v43;
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "Variadic shape is not supported for tile type inference.");
    MIL::ValidationResult::ValidationResult(v56, v55, 315, v54);
    MIL::ValidationError::ValidationError(v42, v56);
  }
  uint64_t v12 = v57;
  uint64_t v11 = v58;
  std::string::basic_string[abi:ne180100]<0>(__p, "reps");
  uint64_t v13 = MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  uint64_t v15 = (v11 - v12) >> 3;
  if (SHIBYTE(v53[0]) < 0) {
    operator delete(__p[0]);
  }
  if (v15 != v14)
  {
    uint64_t v44 = __cxa_allocate_exception(0x48uLL);
    uint64_t v45 = a2[1];
    v50[0] = *a2;
    v50[1] = v45;
    if (v45) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Reps 1-D Length must be the same as the number of dimensions in input.");
    MIL::ValidationResult::ValidationResult(v51, v50, 315, v49);
    MIL::ValidationError::ValidationError(v44, v51);
  }
  __p[0] = 0;
  __p[1] = 0;
  v53[0] = 0;
  std::vector<std::string const*>::reserve(__p, (v58 - v57) >> 3);
  if (SingleValue)
  {
    uint64_t v16 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
    uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v16);
    float v18 = (void **)v57;
    if (v58 != v57)
    {
      uint64_t v19 = Data;
      for (unint64_t i = 0; i < (v58 - v57) >> 3; ++i)
      {
        uint64_t v21 = (*(uint64_t (**)(void *))(*v18[i] + 16))(v18[i]);
        unint64_t v22 = *a1;
        if (v21)
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
          uint64_t v24 = MIL::IRConstantDimension::Make(v22, (MIL::MILContext *)(v23 * *(int *)(v19 + 4 * i)));
          uint64_t v25 = (uint64_t *)__p[1];
          if (__p[1] >= (void *)v53[0])
          {
            int64_t v26 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v27 = (uint64_t)(v53[0] - (unint64_t)__p[0]) >> 2;
            if (v27 <= v26 + 1) {
              unint64_t v27 = v26 + 1;
            }
            if (v53[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v27;
            }
            if (v28) {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v53, v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v33 = (uint64_t *)&v29[8 * v26];
            uint64_t *v33 = v24;
            uint64_t v30 = v33 + 1;
            uint64_t v35 = (char *)__p[0];
            uint64_t v34 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v36 = *((void *)v34 - 1);
                v34 -= 8;
                *--uint64_t v33 = v36;
              }
              while (v34 != v35);
              goto LABEL_44;
            }
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v24 = MIL::IRUnknownDimension::Make(*a1, 0);
          uint64_t v25 = (uint64_t *)__p[1];
          if (__p[1] >= (void *)v53[0])
          {
            int64_t v31 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v31 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = (uint64_t)(v53[0] - (unint64_t)__p[0]) >> 2;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if (v53[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v32;
            }
            if (v28) {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v53, v28);
            }
            else {
              uint64_t v29 = 0;
            }
            uint64_t v33 = (uint64_t *)&v29[8 * v31];
            uint64_t *v33 = v24;
            uint64_t v30 = v33 + 1;
            unint64_t v37 = (char *)__p[0];
            uint64_t v34 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v38 = *((void *)v34 - 1);
                v34 -= 8;
                *--uint64_t v33 = v38;
              }
              while (v34 != v37);
LABEL_44:
              uint64_t v34 = (char *)__p[0];
            }
LABEL_45:
            __p[0] = v33;
            __p[1] = v30;
            v53[0] = &v29[8 * v28];
            if (v34) {
              operator delete(v34);
            }
            goto LABEL_47;
          }
        }
        uint64_t *v25 = v24;
        uint64_t v30 = v25 + 1;
LABEL_47:
        __p[1] = v30;
        float v18 = (void **)v57;
      }
    }
  }
  else
  {
    int v40 = v57;
    unint64_t v39 = v58;
    uint64_t v46 = MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&v47, (v39 - v40) >> 3, &v46);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v47;
    v53[0] = v48;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5A804C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a23);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (v46) {
    __cxa_free_exception(v45);
  }
  uint64_t v49 = *(void **)(v47 - 240);
  if (v49)
  {
    *(void *)(v47 - 232) = v49;
    operator delete(v49);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v47 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTopk(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v26, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v26);
  uint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(v26, "k");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v26);
  int v10 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "axis");
  uint64_t v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v26);
  unsigned int v12 = MIL::IRValue::GetScalar<int>(v11);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  int v13 = MIL::IRTensorValueType::Rank(v7);
  uint64_t v14 = *a2;
  uint64_t v15 = (std::__shared_weak_count *)a2[1];
  v25[0] = v14;
  v25[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v26))
  {
    std::string __p = 0;
    long long v22 = 0uLL;
    memset(v20, 0, sizeof(v20));
    std::vector<std::string const*>::reserve(&__p, (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
    uint64_t v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v10);
    MIL::ValueTypeInferenceUtils::GetTopkOutShape(a1, (char **)v8, v12, v16, v13, &__src);
    if (__p)
    {
      *(void *)&long long v22 = __p;
      operator delete(__p);
    }
    std::string __p = __src;
    long long v22 = v19;
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v20, (char *)__src, v19, (uint64_t)(v19 - (void)__src) >> 3);
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  MIL::MILResult::MILResult(v23, (uint64_t)v26);
  v23[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
  int v24 = v28;
  MIL::ValidationError::ValidationError(exception, v23);
}

void sub_20F5A84D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v19 - 136));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceShape(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v5)
  {
    uint64_t v6 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v5 + 5));
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v14, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    uint64_t v11 = operator new(8uLL);
    __p[0] = v11;
    *uint64_t v11 = (v10 - (uint64_t)v9) >> 3;
    __p[1] = v11 + 1;
    int v13 = v11 + 1;
    MIL::IRTensorValueType::Make(*a1, 11, (MIL::MILContext ***)__p);
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F5A8914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>,std::reverse_iterator<std::__wrap_iter<MIL::IRDimension const**>>>(uint64_t a1, char *__src, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = __src;
  if (a7 < 1) {
    return v7;
  }
  uint64_t v9 = a4;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v11 = a1 + 16;
  uint64_t v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (a7 > (uint64_t)(v13 - v14) >> 3)
  {
    uint64_t v15 = *(unsigned char **)a1;
    unint64_t v16 = a7 + ((uint64_t)(v14 - *(void *)a1) >> 3);
    if (v16 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (__src - v15) >> 3;
    uint64_t v18 = v12 - (void)v15;
    if (v18 >> 2 > v16) {
      unint64_t v16 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v16;
    }
    uint64_t v43 = v11;
    if (v19) {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v11, v19);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v33 = &v20[8 * v17];
    std::string __p = v20;
    int v40 = v33;
    uint64_t v42 = &v20[8 * v19];
    uint64_t v34 = 8 * a7;
    uint64_t v35 = (uint64_t *)(v9 - 8);
    uint64_t v36 = &v33[8 * a7];
    do
    {
      uint64_t v37 = *v35--;
      *(void *)uint64_t v33 = v37;
      v33 += 8;
      v34 -= 8;
    }
    while (v34);
    uint64_t v41 = v36;
    uint64_t v7 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v7);
    if (v41 != v40) {
      v41 += (v40 - v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v7;
  }
  uint64_t v21 = (uint64_t)(v14 - (void)__src) >> 3;
  if (v21 >= a7)
  {
    uint64_t v22 = a4 - 8 * a7;
    uint64_t v23 = *(char **)(v11 - 8);
LABEL_18:
    char v27 = &__src[8 * a7];
    int v28 = &v23[-8 * a7];
    uint64_t v29 = v23;
    if ((unint64_t)v28 < v14)
    {
      uint64_t v29 = v23;
      do
      {
        uint64_t v30 = *(void *)v28;
        v28 += 8;
        *(void *)uint64_t v29 = v30;
        v29 += 8;
      }
      while ((unint64_t)v28 < v14);
    }
    *(void *)(a1 + 8) = v29;
    if (v23 != v27) {
      memmove(&v23[-8 * ((v23 - v27) >> 3)], __src, v23 - v27);
    }
    if (v22 != v9)
    {
      int64_t v31 = v7;
      do
      {
        uint64_t v32 = *(void *)(v9 - 8);
        v9 -= 8;
        *(void *)int64_t v31 = v32;
        v31 += 8;
      }
      while (v9 != v22);
    }
    return v7;
  }
  uint64_t v22 = a4 - 8 * v21;
  uint64_t v23 = *(char **)(v11 - 8);
  if (v22 != a6)
  {
    uint64_t v24 = v22;
    uint64_t v25 = *(void **)(v11 - 8);
    do
    {
      uint64_t v26 = *(void *)(v24 - 8);
      v24 -= 8;
      *v25++ = v26;
      v23 += 8;
    }
    while (v24 != a6);
  }
  *(void *)(a1 + 8) = v23;
  if ((uint64_t)(v14 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v7;
}

void sub_20F5A8BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::Argsort::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5A96F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v45 - 112));
  if (a42) {
    (*(void (**)(void *))(*(void *)a42 + 8))(a42);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  uint64_t v47 = *(void **)(v45 - 144);
  if (v47)
  {
    *(void *)(v45 - 136) = v47;
    operator delete(v47);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v45 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BandPart::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5AA778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v60 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 248), 0);
  _Unwind_Resume(a1);
}

void sub_20F5AAC20()
{
}

void MIL::Operators::Common::ios15::Cumsum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5AB938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Fill::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5AC944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,void **a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8))(a53);
  }
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a48) {
    operator delete(a48);
  }
  int v61 = *(void **)(v59 - 168);
  if (v61)
  {
    *(void *)(v59 - 160) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Flatten2D::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5AD9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v58 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 248), 0);
  _Unwind_Resume(a1);
}

void sub_20F5ADE58()
{
}

void MIL::Operators::Common::ios15::Identity::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5AE7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v61 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::NonMaximumSuppression::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B0764(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 128));
  uint64_t v3 = *(void *)(v1 - 192);
  *(void *)(v1 - 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2A0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A0]);
  }
  uint64_t v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

void sub_20F5B103C()
{
  uint64_t v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(void *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x20F5B1018);
}

void sub_20F5B1054()
{
}

void MIL::Operators::Common::ios15::NonZero::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B1DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v64 - 112));
  if (a57) {
    (*(void (**)(void *))(*(void *)a57 + 8))(a57);
  }
  if (a56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a56);
  }
  if (__p)
  {
    a64 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v64 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::OneHot::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B2F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  int v65 = *(void **)(v63 - 168);
  if (v65)
  {
    *(void *)(v63 - 160) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Pad::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x220]);
  if (a66) {
    (*(void (**)(uint64_t))(*(void *)a66 + 8))(a66);
  }
  if (a65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a65);
  }
  long long v69 = *(void **)(v67 - 112);
  if (v69)
  {
    *(void *)(v67 - 104) = v69;
    operator delete(v69);
  }
  long long v70 = *(void **)(v67 - 248);
  if (v70)
  {
    *(void *)(v67 - 240) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Range1D::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,void **a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v60 - 112));
  if (a59) {
    (*(void (**)(uint64_t))(*(void *)a59 + 8))(a59);
  }
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a58);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Shape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B65F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v57 - 112));
  if (a45) {
    (*(void (**)(void *))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Tile::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B78D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,void **a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v69 - 112));
  if (a61) {
    (*(void (**)(uint64_t))(*(void *)a61 + 8))(a61);
  }
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a60);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  uint64_t v71 = *(void **)(v69 - 136);
  if (v71)
  {
    *(void *)(v69 - 128) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Topk::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5B8D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 128));
  uint64_t v64 = a57;
  a57 = 0;
  if (v64) {
    (*(void (**)(void *))(*(void *)v64 + 8))(v64);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v65 = *(void **)(v62 - 152);
  if (v65)
  {
    *(void *)(v62 - 144) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[22],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[22],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_20F5B9270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[22],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[22],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_20F5B930C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[22],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F5B935C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBatchToSpace(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v80, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  uint64_t v9 = MIL::IRTensorValueType::Rank(v6);
  if (v9 != MIL::IRTensorValueType::Rank(v8))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v22 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v78 = *LocationPtr;
    uint64_t v79 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "Input and output tensor shape must have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v78, 315, v76);
    if (v77 < 0) {
      operator delete(v76[0]);
    }
    uint64_t v23 = v79;
    if (!v79) {
      return;
    }
LABEL_45:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "block_shape");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(*v11 + 32))(v11);
  uint64_t v13 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  uint64_t v14 = MIL::IRDimension::AsConstant(**v13);
  uint64_t v15 = MIL::IRTensorValueType::Rank(v6);
  if (v15 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) + 2)
  {
    uint64_t v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v25 = (std::__shared_weak_count *)v24[1];
    uint64_t v74 = *v24;
    uint64_t v75 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input and output shape must have exactly two more dimensions than the block shape");
    MIL::ValidationResult::ValidationResult(a2, &v74, 315, __p);
    if (v73 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v23 = v75;
    if (!v75) {
      return;
    }
    goto LABEL_45;
  }
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v11);
  if (v17)
  {
    uint64_t v18 = 4 * v17;
    int v19 = 1;
    do
    {
      int v20 = *Data++;
      v19 *= v20;
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    int v19 = 1;
  }
  uint64_t v26 = (void **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
  uint64_t v27 = (*(uint64_t (**)(void))(*(void *)**v26 + 16))(**v26);
  int v28 = (void **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 96))(v8);
  uint64_t v29 = (*(uint64_t (**)(void))(*(void *)**v28 + 16))(**v28);
  if (v27) {
    BOOL v30 = v29 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30)
  {
    uint64_t v31 = v29;
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
    if (v19 * (*(unsigned int (**)(uint64_t))(*(void *)v31 + 48))(v31) != v32)
    {
      uint64_t v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v51 = (std::__shared_weak_count *)v50[1];
      uint64_t v70 = *v50;
      uint64_t v71 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "Input batch size must be equal to the output batch size times the total block size");
      MIL::ValidationResult::ValidationResult(a2, &v70, 315, v68);
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      uint64_t v23 = v71;
      if (!v71) {
        return;
      }
      goto LABEL_45;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "crops");
  uint64_t v33 = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v34 = (uint64_t *)MIL::IRValue::AsTensor(v33);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t *))(*v34 + 32))(v34);
  uint64_t v36 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 96))(v35);
  uint64_t v37 = MIL::IRDimension::AsConstant(**v36);
  uint64_t v38 = MIL::IRDimension::AsConstant((*v36)[1]);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38) != 2)
  {
    uint64_t v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v49 = (std::__shared_weak_count *)v48[1];
    uint64_t v66 = *v48;
    uint64_t v67 = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v64, "'crops' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v66, 315, v64);
    if (v65 < 0) {
      operator delete(v64[0]);
    }
    uint64_t v23 = v67;
    if (!v67) {
      return;
    }
    goto LABEL_45;
  }
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
  if (v39 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14))
  {
    uint64_t v52 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v53 = (std::__shared_weak_count *)v52[1];
    uint64_t v62 = *v52;
    uint64_t v63 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "'crops' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v62, 315, v60);
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    uint64_t v23 = v63;
    if (!v63) {
      return;
    }
    goto LABEL_45;
  }
  int v40 = (int *)MIL::IRTensorValue::GetDataView<int>(v34);
  if (v41 >= 2)
  {
    uint64_t v43 = v40 + 1;
    int v42 = *v40;
    uint64_t v44 = 4 * v41 - 4;
    uint64_t v45 = v40 + 1;
    do
    {
      int v47 = *v45++;
      int v46 = v47;
      if (v47 < v42)
      {
        int v42 = v46;
        int v40 = v43;
      }
      uint64_t v43 = v45;
      v44 -= 4;
    }
    while (v44);
  }
  if ((*v40 & 0x80000000) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  unint64_t v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unint64_t v55 = (std::__shared_weak_count *)v54[1];
  uint64_t v58 = *v54;
  uint64_t v59 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v56, "'crops' values must all be >= 0");
  MIL::ValidationResult::ValidationResult(a2, &v58, 315, v56);
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  uint64_t v23 = v59;
  if (v59) {
    goto LABEL_45;
  }
}

void sub_20F5B9A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateExpandDims(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v7 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v28, "axes");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (v29 < 0) {
    operator delete(v28);
  }
  uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(v9);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v10);
  if (v12)
  {
    uint64_t v13 = (unsigned int *)Data;
    uint64_t v14 = 4 * v12;
    while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v13, (int)v7))
    {
      ++v13;
      v14 -= 4;
      if (!v14) {
        goto LABEL_8;
      }
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v19 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v26 = *LocationPtr;
    uint64_t v27 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "Each 'axis' in 'axes' must be within range (-output_rank - 1, output_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v26, 315, v24);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    uint64_t v17 = v27;
    if (!v27) {
      return;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    return;
  }
LABEL_8:
  if (MIL::Validation::HasUniqueElementsInAxes(v9, v7))
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  unint64_t v16 = (std::__shared_weak_count *)v15[1];
  uint64_t v22 = *v15;
  uint64_t v23 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Each 'axis' in 'axes' must correspond to a unique & different dimension");
  MIL::ValidationResult::ValidationResult(a2, &v22, 315, __p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = v23;
  if (v23) {
    goto LABEL_18;
  }
}

void sub_20F5B9D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateReshape(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)__p, 0);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
    uint64_t v8 = (MIL::IRValue *)ParameterValue;
    if (v46 < 0)
    {
      operator delete(__p[0]);
      if (!v8)
      {
LABEL_35:
        MIL::ValidationResult::ValidationResult(a2);
        return;
      }
    }
    else if (!ParameterValue)
    {
      goto LABEL_35;
    }
    unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    if (v12 < 6)
    {
      unint64_t v15 = v12;
      unint64_t v16 = (uint64_t *)MIL::IRValue::AsTensor(v8);
      uint64_t Data = (__int32 *)MIL::IRTensorValue::GetDataView<int>(v16);
      size_t v55 = v17;
      std::string::basic_string[abi:ne180100]<0>(__p, "x");
      uint64_t v18 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      int v19 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v18);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      int v20 = &Data[v55];
      char v21 = wmemchr(Data, -1, v55);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v20;
      }
      if (v22 == &Data[v55]
        || MIL::IRTensorValueType::Rank(v19) != v15
        || ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v19 + 104))(v19) & 1) != 0)
      {
        if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v19 + 104))(v19)
          || !MIL::Validation::IsZeroOutOfRangeForReshape(&Data, v19))
        {
          goto LABEL_35;
        }
        uint64_t v23 = Data;
        size_t v24 = v55;
        while (v24 * 4)
        {
          if (!Data[--v24])
          {
            uint64_t v26 = &Data[v24 + 1];
            goto LABEL_44;
          }
        }
        uint64_t v26 = Data;
LABEL_44:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Can only reshape to a shape containing 0 when shape[i]==0 && i<rank(X).  Index of 0: ", 85);
        std::to_string(&v44, v26 - v23);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v30 = &v44;
        }
        else {
          BOOL v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
        }
        int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, size);
        uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", rank of X: ", 13);
        uint64_t v34 = MIL::IRTensorValueType::Rank(v19);
        std::to_string(&v43, v34);
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v35 = &v43;
        }
        else {
          uint64_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v35, v36);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v38 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v41 = *LocationPtr;
        int v42 = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::stringbuf::str();
        MIL::ValidationResult::ValidationResult(a2, &v41, 315, &v39);
        if (v40 < 0) {
          operator delete(v39);
        }
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        __p[0] = *(void **)MEMORY[0x263F8C2C8];
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
        __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
        if (v48 < 0) {
          operator delete(v47);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x21056C620](&v49);
      }
      else
      {
        uint64_t v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        int v28 = (std::__shared_weak_count *)v27[1];
        uint64_t v52 = *v27;
        uint64_t v53 = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v50, "Unable to reshape tensors of non-fixed rank");
        MIL::ValidationResult::ValidationResult(a2, &v52, 315, v50);
        if (v51 < 0) {
          operator delete(v50[0]);
        }
        uint64_t v11 = v53;
        if (v53) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      uint64_t v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v14 = (std::__shared_weak_count *)v13[1];
      uint64_t v58 = *v13;
      uint64_t v59 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v56, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
      MIL::ValidationResult::ValidationResult(a2, &v58, 315, v56);
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      uint64_t v11 = v59;
      if (v59) {
LABEL_20:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v10 = (std::__shared_weak_count *)v9[1];
    uint64_t v62 = *v9;
    uint64_t v63 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "The target shape cannot have non-fixed rank in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v62, 315, v60);
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    uint64_t v11 = v63;
    if (v63) {
      goto LABEL_20;
    }
  }
}

void sub_20F5BA2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 177) < 0) {
    operator delete(*(void **)(v35 - 200));
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 168);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSlidingWindows(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0) {
    goto LABEL_7;
  }
  int v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  uint64_t v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (!MIL::Validation::IsAxisValidForRank(v9, v7))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v11 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v14 = *LocationPtr;
    unint64_t v15 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "Axis must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v14, 315, v12);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
LABEL_7:
    MIL::ValidationResult::ValidationResult(a2);
  }
}

void sub_20F5BA540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSpaceToBatch(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v80, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  uint64_t v9 = MIL::IRTensorValueType::Rank(v6);
  if (v9 != MIL::IRTensorValueType::Rank(v8))
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v22 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v78 = *LocationPtr;
    uint64_t v79 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "Input and output tensor shape must have the same rank");
    MIL::ValidationResult::ValidationResult(a2, &v78, 315, v76);
    if (v77 < 0) {
      operator delete(v76[0]);
    }
    uint64_t v23 = v79;
    if (!v79) {
      return;
    }
LABEL_45:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "block_shape");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t *))(*v11 + 32))(v11);
  char v13 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  uint64_t v14 = MIL::IRDimension::AsConstant(**v13);
  uint64_t v15 = MIL::IRTensorValueType::Rank(v6);
  if (v15 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14) + 2)
  {
    size_t v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v25 = (std::__shared_weak_count *)v24[1];
    uint64_t v74 = *v24;
    uint64_t v75 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input and output shape must have exactly two more dimensions than the block shape");
    MIL::ValidationResult::ValidationResult(a2, &v74, 315, __p);
    if (v73 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v23 = v75;
    if (!v75) {
      return;
    }
    goto LABEL_45;
  }
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v11);
  if (v17)
  {
    uint64_t v18 = 4 * v17;
    int v19 = 1;
    do
    {
      int v20 = *Data++;
      v19 *= v20;
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    int v19 = 1;
  }
  uint64_t v26 = (void **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
  uint64_t v27 = (*(uint64_t (**)(void))(*(void *)**v26 + 16))(**v26);
  int v28 = (void **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 96))(v8);
  uint64_t v29 = (*(uint64_t (**)(void))(*(void *)**v28 + 16))(**v28);
  if (v27) {
    BOOL v30 = v29 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  if (!v30)
  {
    uint64_t v31 = v29;
    int v32 = v19 * (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
    if (v32 != (*(unsigned int (**)(uint64_t))(*(void *)v31 + 48))(v31))
    {
      uint64_t v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      char v51 = (std::__shared_weak_count *)v50[1];
      uint64_t v70 = *v50;
      uint64_t v71 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "Input batch size must be equal to the output batch size times the total block size");
      MIL::ValidationResult::ValidationResult(a2, &v70, 315, v68);
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      uint64_t v23 = v71;
      if (!v71) {
        return;
      }
      goto LABEL_45;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "paddings");
  uint64_t v33 = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v34 = (uint64_t *)MIL::IRValue::AsTensor(v33);
  if (v81 < 0) {
    operator delete(v80[0]);
  }
  uint64_t v35 = (*(uint64_t (**)(uint64_t *))(*v34 + 32))(v34);
  std::string::size_type v36 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 96))(v35);
  uint64_t v37 = MIL::IRDimension::AsConstant(**v36);
  uint64_t v38 = MIL::IRDimension::AsConstant((*v36)[1]);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38) != 2)
  {
    char v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v49 = (std::__shared_weak_count *)v48[1];
    uint64_t v66 = *v48;
    uint64_t v67 = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v64, "'paddings' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v66, 315, v64);
    if (v65 < 0) {
      operator delete(v64[0]);
    }
    uint64_t v23 = v67;
    if (!v67) {
      return;
    }
    goto LABEL_45;
  }
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
  if (v39 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14))
  {
    uint64_t v52 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v53 = (std::__shared_weak_count *)v52[1];
    uint64_t v62 = *v52;
    uint64_t v63 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "'paddings' must be an M x 2 tensor");
    MIL::ValidationResult::ValidationResult(a2, &v62, 315, v60);
    if (v61 < 0) {
      operator delete(v60[0]);
    }
    uint64_t v23 = v63;
    if (!v63) {
      return;
    }
    goto LABEL_45;
  }
  char v40 = (int *)MIL::IRTensorValue::GetDataView<int>(v34);
  if (v41 >= 2)
  {
    std::string v43 = v40 + 1;
    int v42 = *v40;
    uint64_t v44 = 4 * v41 - 4;
    uint64_t v45 = v40 + 1;
    do
    {
      int v47 = *v45++;
      int v46 = v47;
      if (v47 < v42)
      {
        int v42 = v46;
        char v40 = v43;
      }
      std::string v43 = v45;
      v44 -= 4;
    }
    while (v44);
  }
  if ((*v40 & 0x80000000) == 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  unint64_t v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  size_t v55 = (std::__shared_weak_count *)v54[1];
  uint64_t v58 = *v54;
  uint64_t v59 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v56, "'paddings' values must all be >= 0");
  MIL::ValidationResult::ValidationResult(a2, &v58, 315, v56);
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  uint64_t v23 = v59;
  if (v59) {
    goto LABEL_45;
  }
}

void sub_20F5BAC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSqueeze(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v30, "axes");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v30);
  BOOL v6 = IsParameterSet;
  if (v31 < 0)
  {
    operator delete((void *)v30[0]);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v31 < 0) {
    operator delete((void *)v30[0]);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 104))(v8) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v9 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v8);
  std::string::basic_string[abi:ne180100]<0>(v30, "axes");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v11 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (v31 < 0) {
    operator delete((void *)v30[0]);
  }
  uint64_t v12 = (uint64_t *)MIL::IRValue::AsTensor(v11);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v12);
  if (v14)
  {
    uint64_t v15 = (unsigned int *)Data;
    uint64_t v16 = 4 * v14;
    while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v15, (int)v9))
    {
      ++v15;
      v16 -= 4;
      if (!v16) {
        goto LABEL_14;
      }
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v21 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v28 = *LocationPtr;
    uint64_t v29 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "Each 'axis' in 'axes' must be within range (-input_rank - 1, input_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a2, &v28, 315, v26);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    int v19 = v29;
    if (v29) {
      goto LABEL_28;
    }
    return;
  }
LABEL_14:
  if (MIL::Validation::HasUniqueElementsInAxes(v11, v9))
  {
LABEL_15:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  uint64_t v24 = *v17;
  char v25 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Each 'axis' in 'axes' must correspond to a unique & different dimension");
  MIL::ValidationResult::ValidationResult(a2, &v24, 315, __p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  int v19 = v25;
  if (v25) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
}

void sub_20F5BAF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateTranspose(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v36, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0) {
    goto LABEL_13;
  }
  int v7 = (const MIL::IRTensorValue *)MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v36, "perm");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v9 = (MIL::IRValue *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (*(uint64_t (**)(MIL::IRValue *))(*(void *)v9 + 32))(v9);
  uint64_t v11 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if (MIL::IRTensorValueType::Rank(v11) == 1)
  {
    uint64_t v12 = (MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v11 + 96))(v11);
    uint64_t v13 = MIL::IRDimension::AsConstant(**v12);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13) == (int)v7)
    {
      uint64_t v14 = (uint64_t *)MIL::IRValue::AsTensor(v9);
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v14);
      if (v16)
      {
        uint64_t v17 = (unsigned int *)Data;
        uint64_t v18 = 4 * v16;
        while (MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v17, (int)v7))
        {
          ++v17;
          v18 -= 4;
          if (!v18) {
            goto LABEL_12;
          }
        }
        (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
        std::operator+<char>();
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v24 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v30 = *LocationPtr;
        char v31 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v29, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
        }
        else {
          std::string v29 = v36;
        }
        MIL::ValidationResult::ValidationResult(a2, &v30, 315, &v29);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        char v25 = v31;
        if (!v31) {
          goto LABEL_34;
        }
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
LABEL_34:
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        return;
      }
LABEL_12:
      if (!MIL::Validation::HasUniqueElementsInAxes(v9, v7))
      {
        (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
        std::operator+<char>();
        char v21 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v22 = (std::__shared_weak_count *)v21[1];
        uint64_t v27 = *v21;
        uint64_t v28 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v26, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
        }
        else {
          std::string v26 = v36;
        }
        MIL::ValidationResult::ValidationResult(a2, &v27, 315, &v26);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        char v25 = v28;
        if (!v28) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
LABEL_13:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  int v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v34 = *v19;
  uint64_t v35 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Perm must have shape [rank of x].");
  MIL::ValidationResult::ValidationResult(a2, &v34, 315, __p);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_20F5BB3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateReverse(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v31, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v32 < 0) {
    operator delete((void *)v31[0]);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v11 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v29 = *LocationPtr;
    uint64_t v30 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Non-fixed rank not supported");
    MIL::ValidationResult::ValidationResult(a2, &v29, 315, __p);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = v30;
    if (!v30) {
      return;
    }
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    return;
  }
  uint64_t v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(v31, "axes");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v31);
  BOOL v9 = IsParameterSet;
  if (v32 < 0)
  {
    operator delete((void *)v31[0]);
    if (!v9) {
      goto LABEL_24;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_24;
  }
  std::string::basic_string[abi:ne180100]<0>(v31, "axes");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v14 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v14);
  uint64_t v17 = v15;
  if (v32 < 0)
  {
    operator delete((void *)v31[0]);
    if (v17) {
      goto LABEL_18;
    }
LABEL_24:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!v15) {
    goto LABEL_24;
  }
LABEL_18:
  uint64_t v18 = 4 * v17;
  while (1)
  {
    uint64_t v19 = *Data;
    if (v19 < -v7 || v7 <= v19) {
      break;
    }
    ++Data;
    v18 -= 4;
    if (!v18) {
      goto LABEL_24;
    }
  }
  char v21 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v22 = (std::__shared_weak_count *)v21[1];
  uint64_t v25 = *v21;
  std::string v26 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "Axes must be within range [-rank, rank)");
  MIL::ValidationResult::ValidationResult(a2, &v25, 315, v23);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v12 = v26;
  if (v26) {
    goto LABEL_12;
  }
}

void sub_20F5BB674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConcat(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v64, "values");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0) {
    goto LABEL_26;
  }
  int v7 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v64, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  BOOL v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (MIL::IRTensorValueType::IsScalar(v6) && v9)
  {
    std::to_string(&v62, (int)v9);
    uint64_t v10 = std::string::insert(&v62, 0, "Axis (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v63, ") must be 0 when inputs are scalars for ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      uint64_t v16 = (const std::string::value_type *)v14;
    }
    else {
      uint64_t v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    uint64_t v18 = std::string::append(&v64, v16, v17);
    uint64_t v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
    std::string::size_type size = v18->__r_.__value_.__l.__size_;
    LODWORD(v57.__r_.__value_.__l.__data_) = v18->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v57.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
    int v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v23 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v60 = *LocationPtr;
    char v61 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v21 < 0)
    {
      std::string::__init_copy_ctor_external(&v59, v19, size);
    }
    else
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v59.__r_.__value_.__l.__size_ = size;
      LODWORD(v59.__r_.__value_.__r.__words[2]) = v57.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v59.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v57.__r_.__value_.__r.__words + 3);
      *((unsigned char *)&v59.__r_.__value_.__s + 23) = v21;
    }
    MIL::ValidationResult::ValidationResult(a2, &v60, 315, &v59);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    char v24 = v61;
    if (!v61) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (MIL::IRTensorValueType::IsScalar(v6) || MIL::Validation::IsAxisValidForRank(v9, v7))
  {
LABEL_26:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v54, (int)v9);
  uint64_t v25 = std::string::insert(&v54, 0, "Axis (");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  uint64_t v27 = std::string::append(&v55, ") must be within range [-");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v53, v7);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v53;
  }
  else {
    uint64_t v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v53.__r_.__value_.__l.__size_;
  }
  char v31 = std::string::append(&v56, (const std::string::value_type *)v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  char v33 = std::string::append(&v57, ", ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v52, v7);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v52;
  }
  else {
    uint64_t v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v52.__r_.__value_.__l.__size_;
  }
  uint64_t v37 = std::string::append(&v62, (const std::string::value_type *)v35, v36);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = std::string::append(&v63, ") for ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  uint64_t v41 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  int v42 = *(char *)(v41 + 23);
  if (v42 >= 0) {
    std::string v43 = (const std::string::value_type *)v41;
  }
  else {
    std::string v43 = *(const std::string::value_type **)v41;
  }
  if (v42 >= 0) {
    std::string::size_type v44 = *(unsigned __int8 *)(v41 + 23);
  }
  else {
    std::string::size_type v44 = *(void *)(v41 + 8);
  }
  uint64_t v45 = std::string::append(&v64, v43, v44);
  uint64_t v19 = (std::string::value_type *)v45->__r_.__value_.__r.__words[0];
  std::string::size_type v46 = v45->__r_.__value_.__l.__size_;
  v58[0] = v45->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v58 + 3) = *(_DWORD *)((char *)&v45->__r_.__value_.__r.__words[2] + 3);
  int v21 = SHIBYTE(v45->__r_.__value_.__r.__words[2]);
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  int v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v48 = (std::__shared_weak_count *)v47[1];
  uint64_t v50 = *v47;
  char v51 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v21 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v19, v46);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    __p.__r_.__value_.__l.__size_ = v46;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v58[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v58 + 3);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v21;
  }
  MIL::ValidationResult::ValidationResult(a2, &v50, 315, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v24 = v51;
  if (!v51) {
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_32:
  if (v21 < 0) {
    operator delete(v19);
  }
}

void sub_20F5BBC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSplit(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  BOOL v6 = (std::__shared_weak_count *)LocationPtr[1];
  v18[0] = *LocationPtr;
  v18[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "num_splits");
  Parameteruint64_t Value = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v16, 0);
  std::string::basic_string[abi:ne180100]<0>(&v14, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  uint64_t v10 = (const void *)MIL::IROperation::GetParameterValue(this);
  long long v11 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v10);
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F5BBF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValidateSplitHelper(uint64_t *a1@<X0>, const void *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, MIL::Validation *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  if (a2 && (int)MIL::IRValue::GetScalar<int>(a2) <= 1)
  {
    BOOL v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v44 = *a1;
    uint64_t v45 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "Invalid num_splits (must be at least 2)");
    MIL::ValidationResult::ValidationResult(a5, &v44, 315, v42);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  else if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a3 + 104))(a3) & 1) != 0 {
         && (int v10 = MIL::IRTensorValueType::Rank(a3), !MIL::Validation::IsAxisValidForRank(a4, v10)))
  }
  {
    std::to_string(&v35, (int)a4);
    long long v11 = std::string::insert(&v35, 0, "Axis (");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    char v13 = std::string::append(&v36, ") must be within range [-");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v34, v10);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v15 = &v34;
    }
    else {
      char v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v34.__r_.__value_.__l.__size_;
    }
    char v17 = std::string::append(&v37, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v38, ", ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v33, v10);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = &v33;
    }
    else {
      int v21 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v33.__r_.__value_.__l.__size_;
    }
    char v23 = std::string::append(&v39, (const std::string::value_type *)v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v40, ") for split");
    long long v26 = (std::string::value_type *)v25->__r_.__value_.__r.__words[0];
    std::string::size_type v27 = v25->__r_.__value_.__l.__size_;
    v41[0] = v25->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
    int v28 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    uint64_t v29 = (std::__shared_weak_count *)a1[1];
    uint64_t v31 = *a1;
    long long v32 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v28 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v26, v27);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      __p.__r_.__value_.__l.__size_ = v27;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v41[0];
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v28;
    }
    MIL::ValidationResult::ValidationResult(a5, &v31, 315, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v28 < 0) {
      operator delete(v26);
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a5);
  }
}

void sub_20F5BC2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateStack(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v56, "values");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0) {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "values");
  BOOL v7 = MIL::Validation::VariadicTensorsDTypesMatch(this, (uint64_t)&v56);
  BOOL v8 = v7;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if (v8) {
      goto LABEL_6;
    }
LABEL_12:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v13 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v54 = *LocationPtr;
    int v55 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a2, &v54, 319, v52);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    return;
  }
  if (!v7) {
    goto LABEL_12;
  }
LABEL_6:
  int v9 = MIL::IRTensorValueType::Rank(v6);
  std::string::basic_string[abi:ne180100]<0>(&v56, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  long long v11 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (MIL::Validation::IsAxisValidForRank(v11, v9 + 1))
  {
LABEL_9:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v45, (int)v11);
  long long v14 = std::string::insert(&v45, 0, "Axis (");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v46, ") must be within range [-");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v44, v9);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v18 = &v44;
  }
  else {
    long long v18 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  long long v20 = std::string::append(&v47, (const std::string::value_type *)v18, size);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v22 = std::string::append(&v48, ", ");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v43, v9);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v24 = &v43;
  }
  else {
    long long v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v43.__r_.__value_.__l.__size_;
  }
  long long v26 = std::string::append(&v49, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  int v28 = std::string::append(&v50, "] for ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(void *)this + 56))(this);
  int v31 = *(char *)(v30 + 23);
  if (v31 >= 0) {
    long long v32 = (const std::string::value_type *)v30;
  }
  else {
    long long v32 = *(const std::string::value_type **)v30;
  }
  if (v31 >= 0) {
    std::string::size_type v33 = *(unsigned __int8 *)(v30 + 23);
  }
  else {
    std::string::size_type v33 = *(void *)(v30 + 8);
  }
  std::string v34 = std::string::append(&v56, v32, v33);
  std::string v35 = (std::string::value_type *)v34->__r_.__value_.__r.__words[0];
  std::string::size_type v36 = v34->__r_.__value_.__l.__size_;
  v51[0] = v34->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v51 + 3) = *(_DWORD *)((char *)&v34->__r_.__value_.__r.__words[2] + 3);
  int v37 = SHIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  std::string v39 = (std::__shared_weak_count *)v38[1];
  uint64_t v41 = *v38;
  int v42 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v37 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v35, v36);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    __p.__r_.__value_.__l.__size_ = v36;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v51[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v51 + 3);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v37;
  }
  MIL::ValidationResult::ValidationResult(a2, &v41, 315, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v37 < 0) {
    operator delete(v35);
  }
}

void sub_20F5BC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v62 < 0) {
    operator delete(v61);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBatchToSpace(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v115) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  BOOL v7 = (char **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "block_shape");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v9 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v9);
  uint64_t v11 = v10;
  if (SHIBYTE(v115) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "crops");
  long long v12 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  char v13 = (uint64_t *)MIL::IRValue::AsTensor(v12);
  if (SHIBYTE(v115) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t *))(*v13 + 32))(v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
  __p[1] = 0;
  uint64_t v115 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
  uint64_t v16 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)__p[0]);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16) != v11
    || (uint64_t v17 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p[0] + 1)),
        (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17) != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "'crops' must be an M x 2 tensor");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  long long v18 = (_DWORD *)MIL::IRTensorValue::GetDataView<int>(v13);
  long long v20 = v18;
  long long v21 = v18;
  if (v19 >= 2)
  {
    long long v23 = v18 + 1;
    int v22 = *v18;
    uint64_t v24 = 4 * v19 - 4;
    long long v21 = v18;
    std::string::size_type v25 = v18 + 1;
    do
    {
      int v27 = *v25++;
      int v26 = v27;
      if (v27 < v22)
      {
        int v22 = v26;
        long long v21 = v23;
      }
      long long v23 = v25;
      v24 -= 4;
    }
    while (v24);
  }
  if (*v21 < 0)
  {
    uint64_t v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v108, "'crops' values must all be >= 0");
    v108->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v108, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (v11)
  {
    uint64_t v28 = 4 * v11;
    unint64_t v29 = 1;
    uint64_t v30 = (int *)Data;
    do
    {
      uint64_t v31 = *v30++;
      v29 *= v31;
      v28 -= 4;
    }
    while (v28);
  }
  else
  {
    unint64_t v29 = 1;
  }
  std::string v112 = 0;
  int v113 = 0;
  uint64_t v111 = 0;
  if (v7[1] == *v7) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)*v7 + 16))();
  if (v32)
  {
    unint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
    if (v33 % v29)
    {
      char v109 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v109, "Total block size is not divisible by the batch dimension.");
      v109->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v109, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    uint64_t v34 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v33 / v29));
    uint64_t v35 = (v112 - (unsigned char *)v111) >> 3;
    if ((unint64_t)(v35 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v36 = (v113 - (unsigned char *)v111) >> 2;
    if (v36 <= v35 + 1) {
      unint64_t v36 = v35 + 1;
    }
    if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37) {
      std::string v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v37);
    }
    else {
      std::string v38 = 0;
    }
    std::string v44 = (uint64_t *)&v38[8 * v35];
    std::string v45 = &v38[8 * v37];
    uint64_t *v44 = v34;
    std::string v46 = (char *)(v44 + 1);
    std::string v48 = (char *)v111;
    std::string v47 = v112;
    if (v112 != v111)
    {
      do
      {
        uint64_t v49 = *((void *)v47 - 1);
        v47 -= 8;
        *--std::string v44 = v49;
      }
      while (v47 != v48);
LABEL_46:
      std::string v47 = (char *)v111;
    }
  }
  else
  {
    uint64_t v39 = MIL::IRUnknownDimension::Make(*a1, 0);
    uint64_t v40 = (v112 - (unsigned char *)v111) >> 3;
    if ((unint64_t)(v40 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = (v113 - (unsigned char *)v111) >> 2;
    if (v41 <= v40 + 1) {
      unint64_t v41 = v40 + 1;
    }
    if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      std::string v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v42);
    }
    else {
      std::string v43 = 0;
    }
    std::string v44 = (uint64_t *)&v43[8 * v40];
    std::string v45 = &v43[8 * v42];
    uint64_t *v44 = v39;
    std::string v46 = (char *)(v44 + 1);
    std::string v50 = (char *)v111;
    std::string v47 = v112;
    if (v112 != v111)
    {
      do
      {
        uint64_t v51 = *((void *)v47 - 1);
        v47 -= 8;
        *--std::string v44 = v51;
      }
      while (v47 != v50);
      goto LABEL_46;
    }
  }
  uint64_t v111 = v44;
  std::string v112 = v46;
  int v113 = v45;
  if (v47) {
    operator delete(v47);
  }
  std::string v112 = v46;
  std::string v52 = *v7;
  if ((unint64_t)(v7[1] - *v7) > 8)
  {
    if (v46 >= v113)
    {
      uint64_t v54 = (v46 - (unsigned char *)v111) >> 3;
      if ((unint64_t)(v54 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v55 = (v113 - (unsigned char *)v111) >> 2;
      if (v55 <= v54 + 1) {
        unint64_t v55 = v54 + 1;
      }
      if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56) {
        std::string v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v56);
      }
      else {
        std::string v57 = 0;
      }
      uint64_t v58 = &v57[8 * v54];
      std::string v59 = &v57[8 * v56];
      *(void *)uint64_t v58 = *((void *)v52 + 1);
      uint64_t v53 = (uint64_t)(v58 + 8);
      char v61 = (char *)v111;
      uint64_t v60 = v112;
      if (v112 != v111)
      {
        do
        {
          uint64_t v62 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v58 - 1) = v62;
          v58 -= 8;
        }
        while (v60 != v61);
        uint64_t v60 = (char *)v111;
      }
      uint64_t v111 = v58;
      std::string v112 = (char *)v53;
      int v113 = v59;
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)std::string v46 = *((void *)v52 + 1);
      uint64_t v53 = (uint64_t)(v46 + 8);
    }
    std::string v112 = (char *)v53;
    if (v11)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v64 = i + 2;
        if (i + 2 >= (unint64_t)((v7[1] - *v7) >> 3)) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v65 = (*(uint64_t (**)(void))(**(void **)&(*v7)[8 * v64] + 16))(*(void *)&(*v7)[8 * v64]);
        if (v65)
        {
          uint64_t v66 = *a1;
          int v67 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 48))(v65);
          uint64_t v68 = MIL::IRConstantDimension::Make(v66, (MIL::MILContext *)(*(_DWORD *)(Data + 4 * i) * v67 - (v20[2 * i] + v20[2 * i + 1])));
          uint64_t v69 = v68;
          uint64_t v70 = v112;
          if (v112 >= v113)
          {
            uint64_t v79 = (v112 - (unsigned char *)v111) >> 3;
            if ((unint64_t)(v79 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v80 = (v113 - (unsigned char *)v111) >> 2;
            if (v80 <= v79 + 1) {
              unint64_t v80 = v79 + 1;
            }
            if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v80;
            }
            if (v81) {
              uint64_t v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v81);
            }
            else {
              uint64_t v82 = 0;
            }
            unint64_t v87 = (uint64_t *)&v82[8 * v79];
            *unint64_t v87 = v69;
            uint64_t v71 = (char *)(v87 + 1);
            uint64_t v89 = (char *)v111;
            unint64_t v88 = v112;
            if (v112 != v111)
            {
              do
              {
                uint64_t v90 = *((void *)v88 - 1);
                v88 -= 8;
                *--unint64_t v87 = v90;
              }
              while (v88 != v89);
              unint64_t v88 = (char *)v111;
            }
            uint64_t v111 = v87;
            std::string v112 = v71;
            int v113 = &v82[8 * v81];
            if (v88) {
              operator delete(v88);
            }
          }
          else
          {
            *(void *)std::string v112 = v68;
            uint64_t v71 = v70 + 8;
          }
          std::string v112 = v71;
        }
        else
        {
          if (v64 >= (v7[1] - *v7) >> 3) {
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v72 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)&(*v7)[8 * v64]);
          int v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 32))(v72);
          uint64_t v74 = *a1;
          if (v73)
          {
            uint64_t v75 = MIL::IRUnknownDimension::Make(v74, (MIL::MILContext *)1);
            uint64_t v76 = v75;
            char v77 = v112;
            if (v112 >= v113)
            {
              uint64_t v91 = (v112 - (unsigned char *)v111) >> 3;
              if ((unint64_t)(v91 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v92 = (v113 - (unsigned char *)v111) >> 2;
              if (v92 <= v91 + 1) {
                unint64_t v92 = v91 + 1;
              }
              if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v92;
              }
              if (v93) {
                uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v93);
              }
              else {
                uint64_t v94 = 0;
              }
              std::string v99 = (uint64_t *)&v94[8 * v91];
              *std::string v99 = v76;
              uint64_t v78 = (char *)(v99 + 1);
              long long v101 = (char *)v111;
              std::string v100 = v112;
              if (v112 != v111)
              {
                do
                {
                  uint64_t v102 = *((void *)v100 - 1);
                  v100 -= 8;
                  *--std::string v99 = v102;
                }
                while (v100 != v101);
                std::string v100 = (char *)v111;
              }
              uint64_t v111 = v99;
              std::string v112 = v78;
              int v113 = &v94[8 * v93];
              if (v100) {
                operator delete(v100);
              }
            }
            else
            {
              *(void *)std::string v112 = v75;
              uint64_t v78 = v77 + 8;
            }
            std::string v112 = v78;
            MIL::IRTensorValueType::MakeWithShape();
          }
          uint64_t v83 = MIL::IRUnknownDimension::Make(v74, 0);
          uint64_t v84 = v83;
          char v85 = v112;
          if (v112 >= v113)
          {
            uint64_t v95 = (v112 - (unsigned char *)v111) >> 3;
            if ((unint64_t)(v95 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v96 = (v113 - (unsigned char *)v111) >> 2;
            if (v96 <= v95 + 1) {
              unint64_t v96 = v95 + 1;
            }
            if ((unint64_t)(v113 - (unsigned char *)v111) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v96;
            }
            if (v97) {
              std::string v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v113, v97);
            }
            else {
              std::string v98 = 0;
            }
            unint64_t v103 = (uint64_t *)&v98[8 * v95];
            *unint64_t v103 = v84;
            int64_t v86 = (char *)(v103 + 1);
            uint64_t v105 = (char *)v111;
            unint64_t v104 = v112;
            if (v112 != v111)
            {
              do
              {
                uint64_t v106 = *((void *)v104 - 1);
                v104 -= 8;
                *--unint64_t v103 = v106;
              }
              while (v104 != v105);
              unint64_t v104 = (char *)v111;
            }
            uint64_t v111 = v103;
            std::string v112 = v86;
            int v113 = &v98[8 * v97];
            if (v104) {
              operator delete(v104);
            }
          }
          else
          {
            *(void *)std::string v112 = v83;
            int64_t v86 = v85 + 8;
          }
          std::string v112 = v86;
        }
      }
      uint64_t v53 = (uint64_t)v112;
    }
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v111, v53, &(*v7)[8 * v11 + 16], v7[1], (v7[1] - &(*v7)[8 * v11 + 16]) >> 3);
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
}

void sub_20F5BD440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __cxa_free_exception(v19);
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConcat(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "values");
  char v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(&v34, *((void **)v5 + 5), *((void **)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 4);
  if (v39 < 0) {
    operator delete(__p);
  }
  uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v34);
  uint64_t v7 = MIL::IRValueType::AsTensorType(ValueType);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v31, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  uint64_t v10 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (v39 < 0) {
    operator delete(__p);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v28, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3);
  if (v29 == v28)
  {
    if (!v10)
    {
      std::string __p = (void *)MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(((char *)v35 - (char *)v34) >> 4));
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v31, (char *)&__p, (uint64_t)&v38, 1uLL);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Scalar concatenation is only allowed when axis is 0.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v10, (unint64_t)(v32 - (unsigned char *)v31) >> 3))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" for input_ndim: ", 17);
    std::ostream::operator<<();
    std::string::size_type v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v25, &v27);
    v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v25, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if ((v10 & 0x80000000) != 0) {
    LODWORD(v10) = v10 + ((unint64_t)(v32 - (unsigned char *)v31) >> 3);
  }
  long long v12 = v34;
  char v13 = v35;
  uint64_t v14 = 0;
  if (v34 == v35)
  {
LABEL_22:
    uint64_t v23 = MIL::IRConstantDimension::Make(*a1, v14);
    *((void *)v31 + (int)v10) = v23;
    MIL::IRTensorValueType::MakeWithShape();
  }
  while (1)
  {
    uint64_t v15 = *v12;
    uint64_t v16 = (std::__shared_weak_count *)v12[1];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(v15);
    uint64_t v18 = MIL::IRValueType::AsTensorType(v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 96))(v18);
    if (&v28 != (void **)v19) {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v28, *(char **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
    }
    uint64_t v20 = (*(uint64_t (**)(void))(**((void **)v28 + (int)v10) + 16))(*((void *)v28 + (int)v10));
    uint64_t v21 = v20;
    if (!v20)
    {
      uint64_t v22 = MIL::IRUnknownDimension::Make(*a1, 0);
      *((void *)v31 + (int)v10) = v22;
      MIL::IRTensorValueType::MakeWithShape();
    }
    uint64_t v14 = (MIL::MILContext *)((char *)v14 + (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20));
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (!v21) {
      break;
    }
    v12 += 2;
    if (v12 == v13) {
      goto LABEL_22;
    }
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  std::string __p = &v34;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20F5BDA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      if (a18) {
        operator delete(a18);
      }
      if (a21) {
        operator delete(a21);
      }
      a27 = &a24;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceDepthToSpace(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "block_size");
}

void sub_20F5BDBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::anonymous namespace'::ValueTypeInferenceDepthToSpaceImpl(MIL::IRConstantDimension **a1, void *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, a3);
  int v10 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (*(void *)(v8 + 8) == *(void *)v8) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  int v11 = v10;
  uint64_t v12 = **(void **)v8;
  char v13 = (uint64_t *)operator new(8uLL);
  uint64_t v62 = v13;
  *char v13 = v12;
  std::string v63 = v13 + 1;
  v64[0] = v13 + 1;
  if (*(void *)(v8 + 8) - *(void *)v8 <= 8uLL) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(*(void *)v8 + 8) + 16))(*(void *)(*(void *)v8 + 8));
  if (v14)
  {
    unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
    unint64_t v16 = (v11 * v11);
    if (v15 % v16)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      int v54 = *(char *)(a3 + 23);
      if (v54 >= 0) {
        uint64_t v55 = a3;
      }
      else {
        uint64_t v55 = *(void *)a3;
      }
      if (v54 >= 0) {
        uint64_t v56 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v56 = *(void *)(a3 + 8);
      }
      std::string v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v55, v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" is not divisible by the channel dimension.", 43);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v59);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    uint64_t v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v15 / v16));
    uint64_t v18 = v63;
    if ((unint64_t)v63 >= v64[0])
    {
      uint64_t v19 = v63 - v62;
      if ((unint64_t)(v19 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = (uint64_t)(v64[0] - (void)v62) >> 2;
      if (v20 <= v19 + 1) {
        unint64_t v20 = v19 + 1;
      }
      if (v64[0] - (void)v62 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v64, v21);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v28 = (uint64_t *)&v22[8 * v19];
      unint64_t v29 = &v22[8 * v21];
      *uint64_t v28 = v17;
      uint64_t v23 = v28 + 1;
      uint64_t v31 = v62;
      uint64_t v30 = v63;
      if (v63 == v62) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v32 = *--v30;
        *--uint64_t v28 = v32;
      }
      while (v30 != v31);
LABEL_33:
      uint64_t v30 = v62;
LABEL_34:
      uint64_t v62 = v28;
      std::string v63 = v23;
      v64[0] = v29;
      if (v30) {
        operator delete(v30);
      }
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v17 = MIL::IRUnknownDimension::Make(*a1, 0);
    uint64_t v18 = v63;
    if ((unint64_t)v63 >= v64[0])
    {
      uint64_t v24 = v63 - v62;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (uint64_t)(v64[0] - (void)v62) >> 2;
      if (v25 <= v24 + 1) {
        unint64_t v25 = v24 + 1;
      }
      if (v64[0] - (void)v62 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26) {
        std::string v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v64, v26);
      }
      else {
        std::string v27 = 0;
      }
      uint64_t v28 = (uint64_t *)&v27[8 * v24];
      unint64_t v29 = &v27[8 * v26];
      *uint64_t v28 = v17;
      uint64_t v23 = v28 + 1;
      int v33 = v62;
      uint64_t v30 = v63;
      if (v63 == v62) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v34 = *--v30;
        *--uint64_t v28 = v34;
      }
      while (v30 != v33);
      goto LABEL_33;
    }
  }
  *uint64_t v18 = v17;
  uint64_t v23 = v18 + 1;
LABEL_36:
  std::string v63 = v23;
  uint64_t v35 = v11;
  unint64_t v36 = 2;
  while (1)
  {
    if (v36 >= (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v37 = (*(uint64_t (**)(void))(**(void **)(*(void *)v8 + 8 * v36) + 16))(*(void *)(*(void *)v8 + 8 * v36));
    if (v37)
    {
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
      uint64_t v39 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v38 * v35));
      uint64_t v40 = v63;
      if ((unint64_t)v63 < v64[0]) {
        goto LABEL_49;
      }
      uint64_t v41 = v63 - v62;
      if ((unint64_t)(v41 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v42 = (uint64_t)(v64[0] - (void)v62) >> 2;
      if (v42 <= v41 + 1) {
        unint64_t v42 = v41 + 1;
      }
      if (v64[0] - (void)v62 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        std::string v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v64, v43);
      }
      else {
        std::string v44 = 0;
      }
      std::string v48 = (uint64_t *)&v44[8 * v41];
      uint64_t *v48 = v39;
      std::string v45 = v48 + 1;
      std::string v50 = v62;
      uint64_t v49 = v63;
      if (v63 != v62)
      {
        do
        {
          uint64_t v51 = *--v49;
          *--std::string v48 = v51;
        }
        while (v49 != v50);
LABEL_65:
        uint64_t v49 = v62;
      }
    }
    else
    {
      uint64_t v39 = MIL::IRUnknownDimension::Make(*a1, 0);
      uint64_t v40 = v63;
      if ((unint64_t)v63 < v64[0])
      {
LABEL_49:
        *uint64_t v40 = v39;
        std::string v45 = v40 + 1;
        goto LABEL_68;
      }
      uint64_t v46 = v63 - v62;
      if ((unint64_t)(v46 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v47 = (uint64_t)(v64[0] - (void)v62) >> 2;
      if (v47 <= v46 + 1) {
        unint64_t v47 = v46 + 1;
      }
      if (v64[0] - (void)v62 >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v47;
      }
      if (v43) {
        std::string v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v64, v43);
      }
      else {
        std::string v44 = 0;
      }
      std::string v48 = (uint64_t *)&v44[8 * v46];
      uint64_t *v48 = v39;
      std::string v45 = v48 + 1;
      std::string v52 = v62;
      uint64_t v49 = v63;
      if (v63 != v62)
      {
        do
        {
          uint64_t v53 = *--v49;
          *--std::string v48 = v53;
        }
        while (v49 != v52);
        goto LABEL_65;
      }
    }
    uint64_t v62 = v48;
    std::string v63 = v45;
    v64[0] = &v44[8 * v43];
    if (v49) {
      operator delete(v49);
    }
LABEL_68:
    std::string v63 = v45;
    if (++v36 == 4) {
      MIL::IRTensorValueType::MakeWithShape();
    }
  }
}

void sub_20F5BE1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      unint64_t v26 = *(void **)(v24 - 112);
      if (v26)
      {
        *(void *)(v24 - 104) = v26;
        operator delete(v26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceExpandDims(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v7))
  {
    __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)__p, (char *)&__src, (uint64_t)&v21, 1uLL);
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "axes");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__src);
  int v9 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v9);
  uint64_t v12 = v11;
  if (v22 < 0) {
    operator delete(__src);
  }
  MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v12, v12 + ((v7[1] - *v7) >> 3), (char **)&__src);
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (__p != (void **)v7) {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)__p, (char *)*v7, v7[1], (v7[1] - *v7) >> 3);
  }
  char v13 = (uint64_t *)__src;
  uint64_t v14 = v21;
  while (v13 != v14)
  {
    uint64_t v15 = *v13;
    unint64_t v16 = (char *)__p[0];
    uint64_t v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)__p, &v16[8 * (int)v15], &v17);
    ++v13;
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5BE4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferencePixelShuffle(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "upscale_factor");
}

void sub_20F5BE5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceReshape(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(a1, v4, a3);
}

void sub_20F5BE62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceByIndex(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  memset(&__p, 0, sizeof(__p));
  unint64_t v8 = (v7[1] - *v7) >> 3;
  LOBYTE(__src) = 0;
  std::vector<BOOL>::vector(&v113, v8, (unsigned __int8 *)&__src);
  std::string::basic_string[abi:ne180100]<0>(&__src, "squeeze_mask");
  int v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__src);
  int v10 = v9;
  if (v118 < 0)
  {
    operator delete(__src);
    if (!v10) {
      goto LABEL_10;
    }
  }
  else if (!v9)
  {
LABEL_10:
    LOBYTE(__x.__begin_) = 0;
    __src = v113;
    v117[0] = 0;
    v112.__begin_ = (std::vector<int>::pointer)((char *)v113 + 8 * (v114 >> 6));
    LODWORD(v112.__end_) = v114 & 0x3F;
    unint64_t v16 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&__src, (uint64_t)&v112, &__x);
    unint64_t v17 = (v7[1] - *v7) >> 3;
    LOBYTE(v112.__begin_) = 0;
    std::vector<BOOL>::vector(&__src, v17, (unsigned __int8 *)&v112);
    std::string::basic_string[abi:ne180100]<0>(&v112, "begin_mask");
    uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v112);
    uint64_t v19 = v18;
    if (SHIBYTE(v112.__end_cap_.__value_) < 0)
    {
      operator delete(v112.__begin_);
      if (!v19) {
        goto LABEL_17;
      }
    }
    else if (!v18)
    {
LABEL_17:
      unint64_t v25 = (v7[1] - *v7) >> 3;
      LOBYTE(v111.__begin_) = 0;
      std::vector<BOOL>::vector(&v112, v25, (unsigned __int8 *)&v111);
      std::string::basic_string[abi:ne180100]<0>(&v111, "end_mask");
      unint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v111);
      std::string v27 = v26;
      if (SHIBYTE(v111.__end_cap_.__value_) < 0)
      {
        operator delete(v111.__begin_);
        if (!v27) {
          goto LABEL_26;
        }
      }
      else if (!v26)
      {
LABEL_26:
        std::vector<int>::size_type v33 = (v7[1] - *v7) >> 3;
        LODWORD(__x.__begin_) = 1;
        std::vector<int>::vector(&v111, v33, (const std::vector<int>::value_type *)&__x);
        std::string::basic_string[abi:ne180100]<0>(&__x, "stride");
        uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__x);
        uint64_t v35 = v34;
        if (SHIBYTE(__x.__end_cap_.__value_) < 0)
        {
          operator delete(__x.__begin_);
          if (!v35)
          {
LABEL_39:
            std::string::basic_string[abi:ne180100]<0>(&__x, "begin");
            Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__x);
            if (SHIBYTE(__x.__end_cap_.__value_) < 0) {
              operator delete(__x.__begin_);
            }
            std::string::basic_string[abi:ne180100]<0>(&__x, "end");
            uint64_t v41 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__x);
            if (SHIBYTE(__x.__end_cap_.__value_) < 0) {
              operator delete(__x.__begin_);
            }
            uint64_t v42 = *v7;
            if (v7[1] == *v7) {
LABEL_135:
            }
              MIL::IRTensorValueType::MakeWithShape();
            unint64_t v43 = 0;
            while (1)
            {
              uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(v42 + 8 * v43) + 24))(*(void *)(v42 + 8 * v43));
              if (v44 && (*(unsigned int (**)(uint64_t))(*(void *)v44 + 32))(v44))
              {
                uint64_t v94 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
                uint64_t v95 = v94;
                std::vector<int>::pointer end = __p.__end_;
                if (__p.__end_ >= __p.__end_cap_.__value_)
                {
                  int64_t v98 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                  if ((unint64_t)(v98 + 1) >> 61) {
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v99 = __p.__end_cap_.__value_ - __p.__begin_;
                  if (v99 <= v98 + 1) {
                    unint64_t v99 = v98 + 1;
                  }
                  if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8) {
                    unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v100 = v99;
                  }
                  if (v100) {
                    long long v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v100);
                  }
                  else {
                    long long v101 = 0;
                  }
                  uint64_t v102 = (int *)&v101[8 * v98];
                  unint64_t v103 = (int *)&v101[8 * v100];
                  *(void *)uint64_t v102 = v95;
                  unint64_t v97 = v102 + 2;
                  std::vector<int>::pointer begin = __p.__begin_;
                  std::vector<int>::pointer v104 = __p.__end_;
                  if (__p.__end_ != __p.__begin_)
                  {
                    do
                    {
                      uint64_t v106 = *((void *)v104 - 1);
                      v104 -= 2;
                      *((void *)v102 - 1) = v106;
                      v102 -= 2;
                    }
                    while (v104 != begin);
                    std::vector<int>::pointer v104 = __p.__begin_;
                  }
                  __p.__begin_ = v102;
                  __p.__end_ = v97;
                  __p.__end_cap_.__value_ = v103;
                  if (v104) {
                    operator delete(v104);
                  }
                }
                else
                {
                  *(void *)__p.__end_ = v94;
                  unint64_t v97 = end + 2;
                }
                __p.__end_ = v97;
                MIL::IRTensorValueType::MakeWithShape();
              }
              unint64_t v45 = v43 >> 6;
              uint64_t v46 = 1 << v43;
              if ((*((void *)v113 + (v43 >> 6)) & (1 << v43)) != 0) {
                goto LABEL_134;
              }
              int v47 = v111.__begin_[v43];
              if (!v47)
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "stride cannot be 0.");
                exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
              }
              if ((*((void *)__src + v45) & v46) != 0)
              {
                if (v47 <= 0)
                {
                  uint64_t v53 = (*(uint64_t (**)(void))(**(void **)(*v7 + 8 * v43) + 16))(*(void *)(*v7 + 8 * v43));
                  if (!v53) {
                    goto LABEL_67;
                  }
                  int v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
                  unsigned __int8 v48 = v54 - 1;
                  unsigned int v49 = (v54 - 1) & 0xFFFFFF00;
                }
                else
                {
                  unsigned __int8 v48 = 0;
                  unsigned int v49 = 0;
                }
                int v55 = v48 | v49;
              }
              else
              {
                if (!SingleValue {
                  || ((std::string v50 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)SingleValue
                }
                                                                                           + 32))(SingleValue),
                       uint64_t v51 = MIL::IRValueType::AsTensorType(v50),
                       (*(unsigned int (**)(uint64_t))(*(void *)v51 + 88))(v51) != 11)
                    ? ((uint64_t v56 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)SingleValue
                                                                                            + 32))(SingleValue),
                        uint64_t v57 = MIL::IRValueType::AsTensorType(v56),
                        (*(unsigned int (**)(uint64_t))(*(void *)v57 + 88))(v57) != 10)
                {
LABEL_67:
                  uint64_t v61 = MIL::IRUnknownDimension::Make(*a1, 0);
                  std::vector<int>::pointer v62 = __p.__end_;
                  if (__p.__end_ >= __p.__end_cap_.__value_)
                  {
                    int64_t v63 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                    if ((unint64_t)(v63 + 1) >> 61) {
                      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v64 = __p.__end_cap_.__value_ - __p.__begin_;
                    if (v64 <= v63 + 1) {
                      unint64_t v64 = v63 + 1;
                    }
                    if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8) {
                      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v65 = v64;
                    }
                    if (v65) {
                      uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v65);
                    }
                    else {
                      uint64_t v66 = 0;
                    }
                    int v73 = (int *)&v66[8 * v63];
                    *(void *)int v73 = v61;
                    uint64_t v74 = v73 + 2;
                    std::vector<int>::pointer v76 = __p.__begin_;
                    std::vector<int>::pointer v75 = __p.__end_;
                    if (__p.__end_ == __p.__begin_) {
                      goto LABEL_131;
                    }
                    do
                    {
                      uint64_t v77 = *((void *)v75 - 1);
                      v75 -= 2;
                      *((void *)v73 - 1) = v77;
                      v73 -= 2;
                    }
                    while (v75 != v76);
LABEL_130:
                    std::vector<int>::pointer v75 = __p.__begin_;
                    goto LABEL_131;
                  }
                  goto LABEL_114;
                }
                int v55 = v52;
              }
              if ((*(void *)&v112.__begin_[2 * v45] & v46) != 0)
              {
                if (v111.__begin_[v43] < 1)
                {
                  LOBYTE(v59) = -1;
                  unsigned int v60 = -256;
                  goto LABEL_80;
                }
                uint64_t v58 = (*(uint64_t (**)(void))(**(void **)(*v7 + 8 * v43) + 16))(*(void *)(*v7 + 8 * v43));
                if (v58)
                {
                  int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 48))(v58);
                  unsigned int v60 = v59 & 0xFFFFFF00;
LABEL_80:
                  int v70 = v59 | v60;
                  goto LABEL_90;
                }
              }
              else if (v41)
              {
                int v67 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v41 + 32))(v41);
                uint64_t v68 = MIL::IRValueType::AsTensorType(v67);
                if ((*(unsigned int (**)(uint64_t))(*(void *)v68 + 88))(v68) == 11)
                {
                }
                else
                {
                  uint64_t v71 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v41 + 32))(v41);
                  uint64_t v72 = MIL::IRValueType::AsTensorType(v71);
                  uint64_t v69 = (*(unsigned int (**)(uint64_t))(*(void *)v72 + 88))(v72) == 10
                }
                if ((v69 & 0xFF00000000) != 0)
                {
                  int v70 = v69;
LABEL_90:
                  uint64_t v78 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v7 + 8 * v43));
                  int v79 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 48))(v78);
                  int v80 = v111.__begin_[v43];
                  if (v80 < 1)
                  {
                    if (v55 >= v79) {
                      int v55 = ~(v55 % v80) + v79;
                    }
                    if (v70 < 0) {
                      int v86 = -1;
                    }
                    else {
                      int v86 = v70;
                    }
                    int v83 = v86 - v55 + 1;
                  }
                  else
                  {
                    int v81 = v55 + -v55 / v80 * v80;
                    if (v55 >= 0) {
                      int v81 = v55;
                    }
                    if (v79 >= v70) {
                      int v82 = v70;
                    }
                    else {
                      int v82 = v79;
                    }
                    int v83 = v82 + ~v81;
                  }
                  int v87 = v83 / v80;
                  if (v87 < 0)
                  {
                    uint64_t v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v108, "zero shape error");
                    __cxa_throw(v108, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                  }
                  uint64_t v61 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v87 + 1));
                  std::vector<int>::pointer v62 = __p.__end_;
                  if (__p.__end_ >= __p.__end_cap_.__value_)
                  {
                    int64_t v88 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                    if ((unint64_t)(v88 + 1) >> 61) {
                      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v89 = __p.__end_cap_.__value_ - __p.__begin_;
                    if (v89 <= v88 + 1) {
                      unint64_t v89 = v88 + 1;
                    }
                    if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8) {
                      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v65 = v89;
                    }
                    if (v65) {
                      uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v65);
                    }
                    else {
                      uint64_t v66 = 0;
                    }
                    int v73 = (int *)&v66[8 * v88];
                    *(void *)int v73 = v61;
                    uint64_t v74 = v73 + 2;
                    std::vector<int>::pointer v90 = __p.__begin_;
                    std::vector<int>::pointer v75 = __p.__end_;
                    if (__p.__end_ != __p.__begin_)
                    {
                      do
                      {
                        uint64_t v91 = *((void *)v75 - 1);
                        v75 -= 2;
                        *((void *)v73 - 1) = v91;
                        v73 -= 2;
                      }
                      while (v75 != v90);
                      goto LABEL_130;
                    }
LABEL_131:
                    __p.__begin_ = v73;
                    __p.__end_ = v74;
                    __p.__end_cap_.__value_ = (int *)&v66[8 * v65];
                    if (v75) {
                      operator delete(v75);
                    }
                    goto LABEL_133;
                  }
                  goto LABEL_114;
                }
              }
              uint64_t v61 = MIL::IRUnknownDimension::Make(*a1, 0);
              std::vector<int>::pointer v62 = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                int64_t v84 = ((char *)__p.__end_ - (char *)__p.__begin_) >> 3;
                if ((unint64_t)(v84 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v85 = __p.__end_cap_.__value_ - __p.__begin_;
                if (v85 <= v84 + 1) {
                  unint64_t v85 = v84 + 1;
                }
                if ((int *)((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8) {
                  unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v85;
                }
                if (v65) {
                  uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&__p.__end_cap_, v65);
                }
                else {
                  uint64_t v66 = 0;
                }
                int v73 = (int *)&v66[8 * v84];
                *(void *)int v73 = v61;
                uint64_t v74 = v73 + 2;
                std::vector<int>::pointer v92 = __p.__begin_;
                std::vector<int>::pointer v75 = __p.__end_;
                if (__p.__end_ == __p.__begin_) {
                  goto LABEL_131;
                }
                do
                {
                  uint64_t v93 = *((void *)v75 - 1);
                  v75 -= 2;
                  *((void *)v73 - 1) = v93;
                  v73 -= 2;
                }
                while (v75 != v92);
                goto LABEL_130;
              }
LABEL_114:
              *(void *)std::vector<int>::pointer v62 = v61;
              uint64_t v74 = v62 + 2;
LABEL_133:
              __p.__end_ = v74;
LABEL_134:
              ++v43;
              uint64_t v42 = *v7;
              if (v43 >= (v7[1] - *v7) >> 3) {
                goto LABEL_135;
              }
            }
          }
        }
        else if (!v34)
        {
          goto LABEL_39;
        }
        std::string::basic_string[abi:ne180100]<0>(&__x, "stride");
        uint64_t v36 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__x);
        uint64_t v37 = (MIL::IRValue *)v36;
        if (SHIBYTE(__x.__end_cap_.__value_) < 0)
        {
          operator delete(__x.__begin_);
          if (v37) {
            goto LABEL_36;
          }
        }
        else if (v36)
        {
LABEL_36:
          uint64_t v38 = (MIL::Validation *)MIL::IRValue::AsTensor(v37);
          MIL::Validation::GetIntTensorValueCasted(v38, v39, (char **)&__x);
          if (v111.__begin_)
          {
            v111.__end_ = v111.__begin_;
            operator delete(v111.__begin_);
          }
          std::vector<int> v111 = __x;
          goto LABEL_39;
        }
        uint64_t v109 = MIL::IRUnknownDimension::Make(*a1, 0);
        std::vector<MIL::IRDimension const*>::vector(&__x, v16, &v109);
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        std::vector<int> __p = __x;
        MIL::IRTensorValueType::MakeWithShape();
      }
      std::string::basic_string[abi:ne180100]<0>(&v111, "end_mask");
      uint64_t v28 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&v111);
      unint64_t v29 = (MIL::IRValue *)v28;
      if (SHIBYTE(v111.__end_cap_.__value_) < 0)
      {
        operator delete(v111.__begin_);
        if (v29) {
          goto LABEL_25;
        }
      }
      else if (v28)
      {
LABEL_25:
        uint64_t v30 = (uint64_t *)MIL::IRValue::AsTensor(v29);
        uint64_t Data = (unsigned char *)MIL::IRTensorValue::GetDataView<BOOL>(v30);
        std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&v112, Data, &Data[v32], v32);
        goto LABEL_26;
      }
      __x.__begin_ = (std::vector<int>::pointer)MIL::IRUnknownDimension::Make(*a1, 0);
      std::vector<MIL::IRDimension const*>::vector(&v111, v16, &__x);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      std::vector<int> __p = v111;
      MIL::IRTensorValueType::MakeWithShape();
    }
    std::string::basic_string[abi:ne180100]<0>(&v112, "begin_mask");
    uint64_t v20 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&v112);
    unint64_t v21 = (MIL::IRValue *)v20;
    if (SHIBYTE(v112.__end_cap_.__value_) < 0)
    {
      operator delete(v112.__begin_);
      if (v21) {
        goto LABEL_16;
      }
    }
    else if (v20)
    {
LABEL_16:
      char v22 = (uint64_t *)MIL::IRValue::AsTensor(v21);
      uint64_t v23 = (unsigned char *)MIL::IRTensorValue::GetDataView<BOOL>(v22);
      std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&__src, v23, &v23[v24], v24);
      goto LABEL_17;
    }
    v111.__begin_ = (std::vector<int>::pointer)MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&v112, v16, &v111);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    std::vector<int> __p = v112;
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "squeeze_mask");
  uint64_t v11 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__src);
  uint64_t v12 = (MIL::IRValue *)v11;
  if (v118 < 0)
  {
    operator delete(__src);
    if (v12) {
      goto LABEL_9;
    }
  }
  else if (v11)
  {
LABEL_9:
    char v13 = (uint64_t *)MIL::IRValue::AsTensor(v12);
    uint64_t v14 = (unsigned char *)MIL::IRTensorValue::GetDataView<BOOL>(v13);
    std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(&v113, v14, &v14[v15], v15);
    goto LABEL_10;
  }
  __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, (char *)&__src, (uint64_t)v117, 1uLL);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5BF4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  unint64_t v43 = *(void **)(v41 - 120);
  if (v43) {
    operator delete(v43);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSliceBySize(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__p);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  unint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  long long v118 = 0uLL;
  uint64_t v119 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "begin");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "begin");
  uint64_t v10 = MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "size");
  uint64_t v11 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__p);
  }
  if (!v11)
  {
    uint64_t v21 = *v8;
    uint64_t v20 = v8[1];
    v120.__r_.__value_.__r.__words[0] = MIL::IRUnknownDimension::Make(*a1, 0);
    std::vector<MIL::IRDimension const*>::vector(&__p, (v20 - v21) >> 3, &v120);
    long long v118 = __p;
    uint64_t v119 = v122;
    MIL::IRTensorValueType::MakeWithShape();
  }
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t Data = 0;
  uint64_t v107 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
  int v14 = v13;
  if ((v13 - 12) <= 0xFFFFFFFC)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v101 = a2[1];
    *(void *)&long long v105 = *a2;
    *((void *)&v105 + 1) = v101;
    if (v101) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v104, "Incompatible dtype for begin, size");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v105, (uint64_t)v104, 315);
  }
  if (v13 == 11)
  {
    unint64_t v15 = (uint64_t *)MIL::IRValue::AsTensor(v11);
    uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v15);
    uint64_t v107 = v16;
    if (SingleValue)
    {
      unint64_t v17 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v108 = MIL::IRTensorValue::GetDataView<int>(v17);
      uint64_t v109 = v18;
      uint64_t v19 = v107;
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 == 10)
    {
      char v22 = (uint64_t *)MIL::IRValue::AsTensor(v11);
      uint64_t v110 = MIL::IRTensorValue::GetDataView<short>(v22);
      uint64_t v111 = v23;
      if (!SingleValue
        || (unint64_t v24 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue),
            uint64_t v112 = MIL::IRTensorValue::GetDataView<short>(v24),
            uint64_t v113 = v25,
            v25 == v111))
      {
        int v26 = 1;
LABEL_23:
        std::vector<std::string const*>::reserve((void **)&v118, (v8[1] - *v8) >> 3);
        uint64_t v30 = *v8;
        if (v8[1] == *v8) {
LABEL_104:
        }
          MIL::IRTensorValueType::MakeWithShape();
        unint64_t v31 = 0;
        while (1)
        {
          uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(v30 + 8 * v31) + 16))(*(void *)(v30 + 8 * v31));
          uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(*v8 + 8 * v31) + 24))(*(void *)(*v8 + 8 * v31));
          if (v33 && (*(unsigned int (**)(uint64_t))(*(void *)v33 + 32))(v33))
          {
            uint64_t v78 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
            uint64_t v79 = v78;
            uint64_t v80 = *((void *)&v118 + 1);
            if (*((void *)&v118 + 1) >= (unint64_t)v119)
            {
              uint64_t v82 = (uint64_t)(*((void *)&v118 + 1) - v118) >> 3;
              if ((unint64_t)(v82 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v83 = (uint64_t)&v119[-v118] >> 2;
              if (v83 <= v82 + 1) {
                unint64_t v83 = v82 + 1;
              }
              if ((unint64_t)&v119[-v118] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v84 = v83;
              }
              if (v84) {
                unint64_t v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v84);
              }
              else {
                unint64_t v85 = 0;
              }
              int v86 = (uint64_t *)&v85[8 * v82];
              int v87 = &v85[8 * v84];
              *int v86 = v79;
              int v81 = v86 + 1;
              int64_t v88 = (char *)*((void *)&v118 + 1);
              unint64_t v89 = (char *)v118;
              if (*((void *)&v118 + 1) != (void)v118)
              {
                do
                {
                  uint64_t v90 = *((void *)v88 - 1);
                  v88 -= 8;
                  *--int v86 = v90;
                }
                while (v88 != v89);
                int64_t v88 = (char *)v118;
              }
              *(void *)&long long v118 = v86;
              *((void *)&v118 + 1) = v81;
              uint64_t v119 = v87;
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              **((void **)&v118 + 1) = v78;
              int v81 = (void *)(v80 + 8);
            }
            *((void *)&v118 + 1) = v81;
            MIL::IRTensorValueType::MakeWithShape();
          }
          if (v32) {
            BOOL v34 = SingleValue == 0;
          }
          else {
            BOOL v34 = 1;
          }
          if (!v34)
          {
            int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
            int v44 = v43;
            if (v14 == 11)
            {
              unint64_t v45 = (unsigned int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v108, v31);
              if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v45, v44))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
                MIL::Util::Span<int const,18446744073709551615ul>::At(&v108, v31);
                uint64_t v91 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" for input_ndim: ", 17);
                std::ostream::operator<<();
                std::vector<int>::pointer v92 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::stringbuf::str();
                std::logic_error::logic_error(v92, &v120);
                v92->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                __cxa_throw(v92, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
              }
              int v46 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v108, v31);
              int v47 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v108, v31);
              int v48 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v31);
              unsigned int v49 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v31);
              int v50 = v47 + (v44 & (v46 >> 31));
              int v51 = *v49;
              if ((v48 & 0x80000000) == 0)
              {
                if (v51 + v50 > v44) {
                  goto LABEL_134;
                }
                int v52 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v31);
                goto LABEL_83;
              }
              if (v51 != -1) {
                goto LABEL_136;
              }
LABEL_82:
              int v52 = v44 - v50;
              goto LABEL_83;
            }
            if (v26)
            {
              uint64_t v53 = (__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v112, v31);
              if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v53, v44))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
                MIL::Util::Span<short const,18446744073709551615ul>::At(&v112, v31);
                int64_t v98 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" for input_ndim: ", 17);
                std::ostream::operator<<();
                unint64_t v99 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::stringbuf::str();
                std::logic_error::logic_error(v99, &v120);
                v99->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                __cxa_throw(v99, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
              }
              int v54 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v112, v31);
              int v55 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v112, v31);
              int v56 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v110, v31);
              uint64_t v57 = (__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v110, v31);
              int v50 = (v44 & (v54 >> 31)) + v55;
              int v58 = *v57;
              if (v56 < 0)
              {
                if (v58 != -1) {
                  goto LABEL_136;
                }
                goto LABEL_82;
              }
              if (v50 + v58 > v44) {
                goto LABEL_134;
              }
              int v52 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v110, v31);
            }
            else
            {
              uint64_t v61 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v116, v31);
              if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)*v61, v44))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
                uint64_t v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Begin axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 89);
                v120.__r_.__value_.__s.__data_[0] = *(unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v116, v31);
                unint64_t v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)&v120, 1);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" for input_ndim: ", 17);
                std::ostream::operator<<();
                unint64_t v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::stringbuf::str();
                std::logic_error::logic_error(v97, &v120);
                v97->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                __cxa_throw(v97, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
              }
              int v62 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v116, v31);
              int v63 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v116, v31);
              int v64 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v114, v31);
              unint64_t v65 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v114, v31);
              int v50 = (v44 & (v62 >> 31)) + v63;
              int v66 = *v65;
              if (v64 < 0)
              {
                if (v66 != -1)
                {
LABEL_136:
                  uint64_t v102 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v102, "size[i] cannot be negative value except -1.");
LABEL_137:
                  v102->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                  __cxa_throw(v102, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
                }
                goto LABEL_82;
              }
              if (v50 + v66 > v44)
              {
LABEL_134:
                uint64_t v102 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v102, "begin[i] + size[i] is required to be <= input dimension.");
                goto LABEL_137;
              }
              int v52 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v114, v31);
            }
LABEL_83:
            uint64_t v37 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v52);
            uint64_t v38 = (uint64_t *)*((void *)&v118 + 1);
            if (*((void *)&v118 + 1) >= (unint64_t)v119)
            {
              uint64_t v72 = (uint64_t)(*((void *)&v118 + 1) - v118) >> 3;
              if ((unint64_t)(v72 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v73 = (uint64_t)&v119[-v118] >> 2;
              if (v73 <= v72 + 1) {
                unint64_t v73 = v72 + 1;
              }
              if ((unint64_t)&v119[-v118] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v73;
              }
              if (v41) {
                uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v41);
              }
              else {
                uint64_t v42 = 0;
              }
              int v67 = (uint64_t *)&v42[8 * v72];
              *int v67 = v37;
              uint64_t v68 = v67 + 1;
              uint64_t v69 = (char *)*((void *)&v118 + 1);
              uint64_t v74 = (char *)v118;
              if (*((void *)&v118 + 1) != (void)v118)
              {
                do
                {
                  uint64_t v75 = *((void *)v69 - 1);
                  v69 -= 8;
                  *--int v67 = v75;
                }
                while (v69 != v74);
                goto LABEL_100;
              }
              goto LABEL_101;
            }
            goto LABEL_84;
          }
          if (v14 == 11)
          {
            unsigned int v35 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v31);
            if ((v35 & 0x80000000) == 0) {
              goto LABEL_34;
            }
          }
          else if (v26)
          {
            unsigned int v35 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(&v110, v31);
            if ((v35 & 0x80000000) == 0) {
              goto LABEL_34;
            }
          }
          else
          {
            unsigned int v35 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v114, v31);
            if ((v35 & 0x80000000) == 0)
            {
LABEL_34:
              uint64_t v36 = (MIL::MILContext *)v35;
              if (v32 && (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32) < (unint64_t)v35)
              {
                uint64_t v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v93, "size[i] is required to be <= input dimension when begin is unknown.");
                v93->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                __cxa_throw(v93, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
              }
              uint64_t v37 = MIL::IRConstantDimension::Make(*a1, v36);
              uint64_t v38 = (uint64_t *)*((void *)&v118 + 1);
              if (*((void *)&v118 + 1) >= (unint64_t)v119)
              {
                uint64_t v39 = (uint64_t)(*((void *)&v118 + 1) - v118) >> 3;
                if ((unint64_t)(v39 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v40 = (uint64_t)&v119[-v118] >> 2;
                if (v40 <= v39 + 1) {
                  unint64_t v40 = v39 + 1;
                }
                if ((unint64_t)&v119[-v118] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v40;
                }
                if (v41) {
                  uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v41);
                }
                else {
                  uint64_t v42 = 0;
                }
                int v67 = (uint64_t *)&v42[8 * v39];
                *int v67 = v37;
                uint64_t v68 = v67 + 1;
                uint64_t v69 = (char *)*((void *)&v118 + 1);
                int v70 = (char *)v118;
                if (*((void *)&v118 + 1) != (void)v118)
                {
                  do
                  {
                    uint64_t v71 = *((void *)v69 - 1);
                    v69 -= 8;
                    *--int v67 = v71;
                  }
                  while (v69 != v70);
                  goto LABEL_100;
                }
                goto LABEL_101;
              }
              goto LABEL_84;
            }
          }
          if (v35 != -1)
          {
            uint64_t v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v94, "size[i] cannot be negative value except -1.");
            v94->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v94, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          uint64_t v37 = MIL::IRUnknownDimension::Make(*a1, 0);
          uint64_t v38 = (uint64_t *)*((void *)&v118 + 1);
          if (*((void *)&v118 + 1) >= (unint64_t)v119)
          {
            uint64_t v59 = (uint64_t)(*((void *)&v118 + 1) - v118) >> 3;
            if ((unint64_t)(v59 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v60 = (uint64_t)&v119[-v118] >> 2;
            if (v60 <= v59 + 1) {
              unint64_t v60 = v59 + 1;
            }
            if ((unint64_t)&v119[-v118] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v60;
            }
            if (v41) {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v41);
            }
            else {
              uint64_t v42 = 0;
            }
            int v67 = (uint64_t *)&v42[8 * v59];
            *int v67 = v37;
            uint64_t v68 = v67 + 1;
            uint64_t v69 = (char *)*((void *)&v118 + 1);
            std::vector<int>::pointer v76 = (char *)v118;
            if (*((void *)&v118 + 1) != (void)v118)
            {
              do
              {
                uint64_t v77 = *((void *)v69 - 1);
                v69 -= 8;
                *--int v67 = v77;
              }
              while (v69 != v76);
LABEL_100:
              uint64_t v69 = (char *)v118;
            }
LABEL_101:
            *(void *)&long long v118 = v67;
            *((void *)&v118 + 1) = v68;
            uint64_t v119 = &v42[8 * v41];
            if (v69) {
              operator delete(v69);
            }
            goto LABEL_103;
          }
LABEL_84:
          *uint64_t v38 = v37;
          uint64_t v68 = v38 + 1;
LABEL_103:
          *((void *)&v118 + 1) = v68;
          ++v31;
          uint64_t v30 = *v8;
          if (v31 >= (v8[1] - *v8) >> 3) {
            goto LABEL_104;
          }
        }
      }
      goto LABEL_135;
    }
    std::string v27 = (uint64_t *)MIL::IRValue::AsTensor(v11);
    uint64_t v114 = MIL::IRTensorValue::GetDataView<signed char>(v27);
    uint64_t v115 = v28;
    if (SingleValue)
    {
      unint64_t v29 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      uint64_t v116 = MIL::IRTensorValue::GetDataView<signed char>(v29);
      uint64_t v117 = v18;
      uint64_t v19 = v115;
LABEL_21:
      if (v18 == v19) {
        goto LABEL_22;
      }
LABEL_135:
      unint64_t v103 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v103, "Length of begin is not equal to the length of size.");
      v103->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v103, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
LABEL_22:
  int v26 = 0;
  goto LABEL_23;
}

void sub_20F5C04CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a41);
      if (a32) {
        operator delete(a32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t MIL::Util::Span<short const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_20F5C06C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_20F5C0740(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSlidingWindows(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v9 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  int v10 = MIL::IRValue::GetScalar<int>(v9);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "size");
  uint64_t v11 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  uint64_t v12 = (const void *)MIL::IRValue::AsTensor(v11);
  int v13 = MIL::IRValue::GetScalar<int>(v12);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stride");
  int v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  unint64_t v15 = (const void *)MIL::IRValue::AsTensor(v14);
  int v16 = MIL::IRValue::GetScalar<int>(v15);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v17 = *(const void **)v7;
  uint64_t v18 = *(void *)(v7 + 8);
  uint64_t v19 = v18 - *(void *)v7;
  int v20 = v10 + (((unint64_t)v19 >> 3) & (v10 >> 31));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v31 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, v17, v18, v19 >> 3);
  uint64_t v21 = *(void *)(*(void *)v7 + 8 * v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
  uint64_t v23 = v22;
  if (v22)
  {
    if (v13 > (*(int (**)(uint64_t))(*(void *)v22 + 48))(v22))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "size cannot exceed the input dimension.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    unint64_t v24 = *a1;
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
    uint64_t v26 = MIL::IRConstantDimension::Make(v24, (MIL::MILContext *)((v25 - v13) / v16 + 1));
  }
  else
  {
    uint64_t v26 = MIL::IRUnknownDimension::Make(*a1, 0);
  }
  *((void *)__p[0] + v20) = v26;
  std::string v27 = (char *)__p[0];
  uint64_t v29 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v13);
  std::vector<MIL::IRDimension const*>::insert((uint64_t)__p, &v27[8 * v20 + 8], &v29);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5C0A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToBatch(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v76) < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (char **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "block_shape");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v9 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v9);
  unint64_t v12 = v11;
  if (SHIBYTE(v76) < 0) {
    operator delete(__p);
  }
  int v13 = (MIL::IRDimension **)*v7;
  int v14 = (MIL::IRDimension **)v7[1];
  if (v12 > (((char *)v14 - *v7) >> 3) - 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "size of the block_shape cannot exceed the size of input spatial dimensions.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (v12)
  {
    uint64_t v15 = 4 * v12;
    uint64_t v16 = 1;
    unint64_t v17 = (int *)Data;
    do
    {
      uint64_t v18 = *v17++;
      v16 *= v18;
      v15 -= 4;
    }
    while (v15);
  }
  else
  {
    uint64_t v16 = 1;
  }
  if (v14 == v13
    || (uint64_t v19 = MIL::IRDimension::AsConstant(*v13),
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19),
        uint64_t v21 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v20 * v16)),
        (unint64_t)(v7[1] - *v7) <= 8))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v22 = v21;
  uint64_t v23 = *((void *)*v7 + 1);
  unint64_t v24 = operator new(0x10uLL);
  __dst = v24 + 2;
  unint64_t v76 = (unint64_t)(v24 + 2);
  *unint64_t v24 = v22;
  v24[1] = v23;
  long long __p = v24;
  std::string::basic_string[abi:ne180100]<0>(v72, "paddings");
  int v25 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v72);
  uint64_t v26 = (uint64_t *)MIL::IRValue::AsTensor(v25);
  uint64_t v27 = MIL::IRTensorValue::GetDataView<int>(v26);
  if (v73 < 0)
  {
    operator delete(v72[0]);
    if (!v12) {
      goto LABEL_74;
    }
  }
  else if (!v12)
  {
    goto LABEL_74;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    unint64_t v29 = i + 2;
    if (i + 2 >= (unint64_t)((v7[1] - *v7) >> 3)) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)&(*v7)[8 * v29] + 16))(*(void *)&(*v7)[8 * v29]);
    if (v30)
    {
      int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30);
      uint64_t v32 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)((*(_DWORD *)(v27 + 8 * i) + *(_DWORD *)(v27 + 8 * i + 4) + v31)/ *(_DWORD *)(Data + 4 * i)));
      uint64_t v33 = v32;
      BOOL v34 = (char *)__dst;
      if ((unint64_t)__dst >= v76)
      {
        int64_t v43 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v44 = (uint64_t)(v76 - (void)__p) >> 2;
        if (v44 <= v43 + 1) {
          unint64_t v44 = v43 + 1;
        }
        if (v76 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          int v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v76, v45);
        }
        else {
          int v46 = 0;
        }
        int v51 = (uint64_t *)&v46[8 * v43];
        *int v51 = v33;
        unsigned int v35 = v51 + 1;
        uint64_t v53 = (char *)__p;
        int v52 = (char *)__dst;
        if (__dst != __p)
        {
          do
          {
            uint64_t v54 = *((void *)v52 - 1);
            v52 -= 8;
            *--int v51 = v54;
          }
          while (v52 != v53);
          int v52 = (char *)__p;
        }
        long long __p = v51;
        __dst = v35;
        unint64_t v76 = (unint64_t)&v46[8 * v45];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)__dst = v32;
        unsigned int v35 = v34 + 8;
      }
      __dst = v35;
    }
    else
    {
      if (v29 >= (v7[1] - *v7) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v36 = MIL::IRDimension::AsUnknown(*(MIL::IRDimension **)&(*v7)[8 * v29]);
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 32))(v36);
      uint64_t v38 = *a1;
      if (v37)
      {
        uint64_t v39 = MIL::IRUnknownDimension::Make(v38, (MIL::MILContext *)1);
        uint64_t v40 = v39;
        unint64_t v41 = (char *)__dst;
        if ((unint64_t)__dst >= v76)
        {
          int64_t v55 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v55 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v56 = (uint64_t)(v76 - (void)__p) >> 2;
          if (v56 <= v55 + 1) {
            unint64_t v56 = v55 + 1;
          }
          if (v76 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            int v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v76, v57);
          }
          else {
            int v58 = 0;
          }
          int v63 = (uint64_t *)&v58[8 * v55];
          *int v63 = v40;
          uint64_t v42 = v63 + 1;
          unint64_t v65 = (char *)__p;
          int v64 = (char *)__dst;
          if (__dst != __p)
          {
            do
            {
              uint64_t v66 = *((void *)v64 - 1);
              v64 -= 8;
              *--int v63 = v66;
            }
            while (v64 != v65);
            int v64 = (char *)__p;
          }
          long long __p = v63;
          __dst = v42;
          unint64_t v76 = (unint64_t)&v58[8 * v57];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *(void *)__dst = v39;
          uint64_t v42 = v41 + 8;
        }
        __dst = v42;
        MIL::IRTensorValueType::MakeWithShape();
      }
      uint64_t v47 = MIL::IRUnknownDimension::Make(v38, 0);
      uint64_t v48 = v47;
      unsigned int v49 = (char *)__dst;
      if ((unint64_t)__dst >= v76)
      {
        int64_t v59 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v59 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v60 = (uint64_t)(v76 - (void)__p) >> 2;
        if (v60 <= v59 + 1) {
          unint64_t v60 = v59 + 1;
        }
        if (v76 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61) {
          int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v76, v61);
        }
        else {
          int v62 = 0;
        }
        int v67 = (uint64_t *)&v62[8 * v59];
        *int v67 = v48;
        int v50 = v67 + 1;
        uint64_t v69 = (char *)__p;
        uint64_t v68 = (char *)__dst;
        if (__dst != __p)
        {
          do
          {
            uint64_t v70 = *((void *)v68 - 1);
            v68 -= 8;
            *--int v67 = v70;
          }
          while (v68 != v69);
          uint64_t v68 = (char *)__p;
        }
        long long __p = v67;
        __dst = v50;
        unint64_t v76 = (unint64_t)&v62[8 * v61];
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        *(void *)__dst = v47;
        int v50 = v49 + 8;
      }
      __dst = v50;
    }
  }
LABEL_74:
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)__dst, &(*v7)[8 * v12 + 16], v7[1], (v7[1] - &(*v7)[8 * v12 + 16]) >> 3);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5C1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSpaceToDepth(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v77 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "block_size");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  int v9 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  int v10 = MIL::IRValue::GetScalar<int>(v9);
  if (v77 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(v7 + 8) == *(void *)v7) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v11 = **(void **)v7;
  unint64_t v12 = (uint64_t *)operator new(8uLL);
  uint64_t v78 = v12;
  uint64_t *v12 = v11;
  uint64_t v79 = v12 + 1;
  uint64_t v80 = (char *)(v12 + 1);
  if (*(void *)(v7 + 8) - *(void *)v7 <= 8uLL) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(*(void *)v7 + 8) + 16))(*(void *)(*(void *)v7 + 8));
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    uint64_t v15 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v14 * (v10 * v10)));
    uint64_t v16 = v79;
    if (v79 >= (uint64_t *)v80)
    {
      uint64_t v17 = v79 - v78;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = (v80 - (char *)v78) >> 2;
      if (v18 <= v17 + 1) {
        unint64_t v18 = v17 + 1;
      }
      if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v19);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v26 = (uint64_t *)&v20[8 * v17];
      uint64_t v27 = &v20[8 * v19];
      *uint64_t v26 = v15;
      uint64_t v21 = v26 + 1;
      unint64_t v29 = v78;
      uint64_t v28 = v79;
      if (v79 == v78) {
        goto LABEL_35;
      }
      do
      {
        uint64_t v30 = *--v28;
        *--uint64_t v26 = v30;
      }
      while (v28 != v29);
LABEL_34:
      uint64_t v28 = v78;
LABEL_35:
      uint64_t v78 = v26;
      uint64_t v79 = v21;
      uint64_t v80 = v27;
      if (v28) {
        operator delete(v28);
      }
LABEL_37:
      uint64_t v79 = v21;
      if (*(void *)(v7 + 8) - *(void *)v7 <= 0x10uLL) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(*(void *)v7 + 16) + 16))(*(void *)(*(void *)v7 + 16));
      if (v33)
      {
        unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 48))(v33);
        if (v34 % v10)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block_size is not divisible by the first space dimension.", 57);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &v75);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        uint64_t v35 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v34 / v10));
        uint64_t v36 = v79;
        if (v79 >= (uint64_t *)v80)
        {
          uint64_t v37 = v79 - v78;
          if ((unint64_t)(v37 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v38 = (v80 - (char *)v78) >> 2;
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v39);
          }
          else {
            uint64_t v40 = 0;
          }
          int v46 = (uint64_t *)&v40[8 * v37];
          uint64_t v47 = &v40[8 * v39];
          *int v46 = v35;
          unint64_t v41 = v46 + 1;
          unsigned int v49 = v78;
          uint64_t v48 = v79;
          if (v79 == v78) {
            goto LABEL_67;
          }
          do
          {
            uint64_t v50 = *--v48;
            *--int v46 = v50;
          }
          while (v48 != v49);
LABEL_66:
          uint64_t v48 = v78;
LABEL_67:
          uint64_t v78 = v46;
          uint64_t v79 = v41;
          uint64_t v80 = v47;
          if (v48) {
            operator delete(v48);
          }
LABEL_69:
          uint64_t v79 = v41;
          if (*(void *)(v7 + 8) - *(void *)v7 <= 0x18uLL) {
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v53 = (*(uint64_t (**)(void))(**(void **)(*(void *)v7 + 24) + 16))(*(void *)(*(void *)v7 + 24));
          if (v53)
          {
            unint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
            if (v54 % v10)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"block_size is not divisible by the second space dimension.", 58);
              uint64_t v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::stringbuf::str();
              std::logic_error::logic_error(v74, &v75);
              v74->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v74, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            uint64_t v55 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)(v54 / v10));
            unint64_t v56 = v79;
            if (v79 >= (uint64_t *)v80)
            {
              uint64_t v57 = v79 - v78;
              if ((unint64_t)(v57 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v58 = (v80 - (char *)v78) >> 2;
              if (v58 <= v57 + 1) {
                unint64_t v58 = v57 + 1;
              }
              if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v58;
              }
              if (v59) {
                unint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v59);
              }
              else {
                unint64_t v60 = 0;
              }
              uint64_t v66 = (uint64_t *)&v60[8 * v57];
              int v67 = &v60[8 * v59];
              uint64_t *v66 = v55;
              unint64_t v61 = v66 + 1;
              uint64_t v69 = v78;
              uint64_t v68 = v79;
              if (v79 == v78) {
                goto LABEL_99;
              }
              do
              {
                uint64_t v70 = *--v68;
                *--uint64_t v66 = v70;
              }
              while (v68 != v69);
LABEL_98:
              uint64_t v68 = v78;
LABEL_99:
              uint64_t v78 = v66;
              uint64_t v79 = v61;
              uint64_t v80 = v67;
              if (v68) {
                operator delete(v68);
              }
LABEL_101:
              uint64_t v79 = v61;
              MIL::IRTensorValueType::MakeWithShape();
            }
          }
          else
          {
            uint64_t v55 = MIL::IRUnknownDimension::Make(*a1, 0);
            unint64_t v56 = v79;
            if (v79 >= (uint64_t *)v80)
            {
              uint64_t v62 = v79 - v78;
              if ((unint64_t)(v62 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v63 = (v80 - (char *)v78) >> 2;
              if (v63 <= v62 + 1) {
                unint64_t v63 = v62 + 1;
              }
              if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v64 = v63;
              }
              if (v64) {
                unint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v64);
              }
              else {
                unint64_t v65 = 0;
              }
              uint64_t v66 = (uint64_t *)&v65[8 * v62];
              int v67 = &v65[8 * v64];
              uint64_t *v66 = v55;
              unint64_t v61 = v66 + 1;
              uint64_t v71 = v78;
              uint64_t v68 = v79;
              if (v79 == v78) {
                goto LABEL_99;
              }
              do
              {
                uint64_t v72 = *--v68;
                *--uint64_t v66 = v72;
              }
              while (v68 != v71);
              goto LABEL_98;
            }
          }
          *unint64_t v56 = v55;
          unint64_t v61 = v56 + 1;
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v35 = MIL::IRUnknownDimension::Make(*a1, 0);
        uint64_t v36 = v79;
        if (v79 >= (uint64_t *)v80)
        {
          uint64_t v42 = v79 - v78;
          if ((unint64_t)(v42 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v43 = (v80 - (char *)v78) >> 2;
          if (v43 <= v42 + 1) {
            unint64_t v43 = v42 + 1;
          }
          if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v44);
          }
          else {
            unint64_t v45 = 0;
          }
          int v46 = (uint64_t *)&v45[8 * v42];
          uint64_t v47 = &v45[8 * v44];
          *int v46 = v35;
          unint64_t v41 = v46 + 1;
          int v51 = v78;
          uint64_t v48 = v79;
          if (v79 == v78) {
            goto LABEL_67;
          }
          do
          {
            uint64_t v52 = *--v48;
            *--int v46 = v52;
          }
          while (v48 != v51);
          goto LABEL_66;
        }
      }
      uint64_t *v36 = v35;
      unint64_t v41 = v36 + 1;
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v15 = MIL::IRUnknownDimension::Make(*a1, 0);
    uint64_t v16 = v79;
    if (v79 >= (uint64_t *)v80)
    {
      uint64_t v22 = v79 - v78;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = (v80 - (char *)v78) >> 2;
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      if ((unint64_t)(v80 - (char *)v78) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v80, v24);
      }
      else {
        int v25 = 0;
      }
      uint64_t v26 = (uint64_t *)&v25[8 * v22];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v15;
      uint64_t v21 = v26 + 1;
      int v31 = v78;
      uint64_t v28 = v79;
      if (v79 == v78) {
        goto LABEL_35;
      }
      do
      {
        uint64_t v32 = *--v28;
        *--uint64_t v26 = v32;
      }
      while (v28 != v31);
      goto LABEL_34;
    }
  }
  *uint64_t v16 = v15;
  uint64_t v21 = v16 + 1;
  goto LABEL_37;
}

void sub_20F5C19D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      int v25 = *(void **)(v23 - 104);
      if (v25)
      {
        *(void *)(v23 - 96) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSplit(MIL::IRUnknownDimension **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v71);
  int v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v9 + 88))(v9);
  uint64_t v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(v71, "axis");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v71);
  unint64_t v12 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t v13 = MIL::IRValue::GetScalar<int>(v12);
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v71, "num_splits");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v71);
  if (v14)
  {
    uint64_t v15 = (std::__shared_weak_count *)a2[1];
    v66[0] = *a2;
    v66[1] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "num_splits");
    uint64_t v16 = (const void *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
    MIL::MILResult::operator=((uint64_t)v71, (uint64_t)&v67);
    int v73 = v70;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v67);
    if (v65 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v15 = (std::__shared_weak_count *)a2[1];
    v63[0] = *a2;
    v63[1] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::MILResult::operator=((uint64_t)v71, (uint64_t)&v67);
    int v73 = v70;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v67);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v71))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v61, (uint64_t)v71);
    v61[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v62 = v73;
    MIL::ValidationError::ValidationError(exception, v61);
  }
  if ((v13 & 0x80000000) != 0) {
    LODWORD(v13) = v13 + ((*(void *)(v10 + 8) - *(void *)v10) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v67, "split_sizes");
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v67);
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
  if (!((unint64_t)v14 | (unint64_t)v17))
  {
    unint64_t v45 = __cxa_allocate_exception(0x48uLL);
    uint64_t v46 = a2[1];
    *(void *)&long long v60 = *a2;
    *((void *)&v60 + 1) = v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::ValidationError::ValidationError((uint64_t)v45, &v60, (uint64_t)v59, 315);
  }
  if (!v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "num_splits");
    uint64_t v35 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v67);
    uint64_t v36 = (const void *)MIL::IRValue::AsTensor(v35);
    int v37 = MIL::IRValue::GetScalar<int>(v36);
    if (SHIBYTE(v69) < 0) {
      operator delete(v67);
    }
    int v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v67, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
    uint64_t v38 = *(void *)(*(void *)v10 + 8 * (int)v13);
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
    uint64_t v40 = v39;
    if (v39)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v39 + 48))(v39) % (unint64_t)v37)
      {
        int v51 = __cxa_allocate_exception(0x48uLL);
        uint64_t v52 = a2[1];
        *(void *)&long long v54 = *a2;
        *((void *)&v54 + 1) = v52;
        if (v52) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v53, "Axis dimension is not divisible by parameter num_splits.");
        MIL::ValidationError::ValidationError((uint64_t)v51, &v54, (uint64_t)v53, 315);
      }
      unint64_t v41 = *a1;
      unint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
      uint64_t v43 = MIL::IRConstantDimension::Make(v41, (MIL::MILContext *)(v42 / v37));
    }
    else
    {
      uint64_t v43 = MIL::IRUnknownDimension::Make(*a1, 0);
    }
    *((void *)v67 + (int)v13) = v43;
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::string::basic_string[abi:ne180100]<0>(&v67, "split_sizes");
  unint64_t v18 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v67);
  unint64_t v19 = (uint64_t *)MIL::IRValue::AsTensor(v18);
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v19);
  unint64_t v22 = v21;
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
  int v23 = 0;
  if (v22)
  {
    uint64_t v24 = 4 * v22;
    int v25 = Data;
    do
    {
      int v26 = *v25++;
      v23 += v26;
      v24 -= 4;
    }
    while (v24);
  }
  uint64_t v27 = *(void *)(*(void *)v10 + 8 * (int)v13);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
  if (v28 && (*(uint64_t (**)(uint64_t))(*(void *)v28 + 48))(v28) != v23)
  {
    uint64_t v47 = __cxa_allocate_exception(0x48uLL);
    uint64_t v48 = a2[1];
    *(void *)&long long v58 = *a2;
    *((void *)&v58 + 1) = v48;
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v57, "The sum of split_sizes does not match the input dimension.");
    MIL::ValidationError::ValidationError((uint64_t)v47, &v58, (uint64_t)v57, 315);
  }
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, "num_splits");
    unint64_t v29 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v67);
    uint64_t v30 = (const void *)MIL::IRValue::AsTensor(v29);
    uint64_t v31 = (int)MIL::IRValue::GetScalar<int>(v30);
    if (SHIBYTE(v69) < 0) {
      operator delete(v67);
    }
    if (v22 != v31)
    {
      unsigned int v49 = __cxa_allocate_exception(0x48uLL);
      uint64_t v50 = a2[1];
      *(void *)&long long v56 = *a2;
      *((void *)&v56 + 1) = v50;
      if (v50) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v55, "Parameter num_splits is not equal to length of split_sizes param when both are specified.");
      MIL::ValidationError::ValidationError((uint64_t)v49, &v56, (uint64_t)v55, 315);
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::vector<std::string const*>::reserve((void **)a4, v22);
  if (v22)
  {
    uint64_t v32 = (int)v13;
    uint64_t v33 = (MIL::MILContext *)*Data;
    int v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v67, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
    uint64_t v34 = MIL::IRConstantDimension::Make(*a1, v33);
    *((void *)v67 + v32) = v34;
    MIL::IRTensorValueType::MakeWithShape();
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v71);
}

void sub_20F5C22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v57) {
    __cxa_free_exception(v56);
  }
  long long v60 = *(void **)(v58 - 200);
  if (v60)
  {
    *(void *)(v58 - 192) = v60;
    operator delete(v60);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v58 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSqueeze(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v7))
  {
    __p[0] = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v34, (char *)__p, (uint64_t)&__p[1], 1uLL);
    MIL::IRTensorValueType::MakeWithShape();
  }
  *(_OWORD *)long long __p = 0u;
  long long v38 = 0u;
  int v39 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(v30, "axes");
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v30);
  int v9 = v8;
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v9) {
      goto LABEL_13;
    }
  }
  else if (!v8)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v30, "axes");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v30);
  uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v11);
  uint64_t v14 = v13;
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(Data, v14, (v7[1] - *v7) >> 3, (char **)&v32);
  std::unordered_set<unsigned long>::unordered_set<std::__wrap_iter<unsigned long *>>((uint64_t)v30, (unint64_t *)v32, v33);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)__p, (uint64_t *)v30);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v30);
  if (v32)
  {
    uint64_t v33 = (unint64_t *)v32;
    operator delete(v32);
  }
LABEL_13:
  v30[0] = 0;
  uint64_t v15 = *v7;
  if (v7[1] != *v7)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v15 + 8 * v16) + 16))(*(void *)(v15 + 8 * v16));
      if (!v17
        || (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17) != 1
        || *((void *)&v38 + 1)
        && !std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, (unint64_t *)v30))
      {
        unint64_t v18 = v30[0];
        uint64_t v19 = *v7;
        uint64_t v20 = v35;
        if (v35 >= v36)
        {
          uint64_t v22 = (v35 - (unsigned char *)v34) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v23 = (v36 - (unsigned char *)v34) >> 2;
          if (v23 <= v22 + 1) {
            unint64_t v23 = v22 + 1;
          }
          if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v36, v24);
          }
          else {
            int v25 = 0;
          }
          int v26 = &v25[8 * v22];
          *(void *)int v26 = *(void *)(v19 + 8 * (void)v18);
          unint64_t v21 = v26 + 8;
          uint64_t v28 = (char *)v34;
          uint64_t v27 = v35;
          if (v35 != v34)
          {
            do
            {
              uint64_t v29 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v26 - 1) = v29;
              v26 -= 8;
            }
            while (v27 != v28);
            uint64_t v27 = (char *)v34;
          }
          uint64_t v34 = v26;
          uint64_t v35 = v21;
          uint64_t v36 = &v25[8 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)uint64_t v35 = *(void *)(v19 + 8 * (uint64_t)v30[0]);
          unint64_t v21 = v20 + 8;
        }
        uint64_t v35 = v21;
      }
      unint64_t v16 = (unint64_t)v30[0] + 1;
      v30[0] = (void *)v16;
      uint64_t v15 = *v7;
    }
    while (v16 < (v7[1] - *v7) >> 3);
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5C28C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a24);
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceStack(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  char v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v5)
  {
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v5
                                                                        + 5));
    uint64_t v7 = MIL::IRValueType::AsTensorType(ValueType);
    (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
    uint64_t v9 = *((void *)v5 + 5);
    uint64_t v8 = *((void *)v5 + 6);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    unint64_t v12 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(SingleValue);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (MIL::Validation::IsAxisValidForRank(v12, ((*(void *)(v10 + 8) - *(void *)v10) >> 3) + 1))
    {
      uint64_t v13 = (v8 - v9) >> 4;
      uint64_t v14 = *(const void **)v10;
      uint64_t v15 = *(void *)(v10 + 8);
      uint64_t v16 = v15 - *(void *)v10;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v24 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, v14, v15, v16 >> 3);
      uint64_t v17 = (char *)__p[0];
      uint64_t v18 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v13);
      if ((int)v12 < 0) {
        int v19 = v12 + ((unint64_t)v16 >> 3) + 1;
      }
      else {
        int v19 = (int)v12;
      }
      v22.__r_.__value_.__r.__words[0] = v18;
      std::vector<MIL::IRDimension const*>::insert((uint64_t)__p, &v17[8 * v19], &v22);
      MIL::IRTensorValueType::MakeWithShape();
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis must be within range (-input_ndim-2, input_ndim+1) (exclusive) to stack. Invalid axis: ", 92);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for input_ndim: ", 17);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v22);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F5C2C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceTranspose(MIL::IRUnknownDimension **a1, uint64_t a2, void *a3)
{
  v34[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "perm");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  uint64_t v9 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  uint64_t Data = (int *)MIL::IRTensorValue::GetDataView<int>(v9);
  uint64_t v12 = v11;
  std::unordered_set<int>::unordered_set<int const*>((uint64_t)__p, Data, &Data[v11]);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(v7))
  {
    __src = (void *)MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v30, (char *)&__src, (uint64_t)v34, 1uLL);
    MIL::IRTensorValueType::MakeWithShape();
  }
  if (*(void *)v29 == (v7[1] - *v7) >> 3)
  {
    MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg((unsigned int *)Data, v12, v29[0], (char **)&__src);
    uint64_t v13 = (uint64_t *)__src;
    uint64_t v14 = (uint64_t *)v34[0];
    if (__src != (void *)v34[0])
    {
      uint64_t v15 = v31;
      do
      {
        uint64_t v16 = *v13;
        uint64_t v17 = *v7;
        if (v15 >= v32)
        {
          uint64_t v18 = (v15 - (unsigned char *)v30) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v19 = (v32 - (unsigned char *)v30) >> 2;
          if (v19 <= v18 + 1) {
            unint64_t v19 = v18 + 1;
          }
          if ((unint64_t)(v32 - (unsigned char *)v30) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v20);
          }
          else {
            int v21 = 0;
          }
          std::string v22 = &v21[8 * v18];
          *(void *)std::string v22 = *(void *)(v17 + 8 * v16);
          uint64_t v15 = v22 + 8;
          uint64_t v24 = (char *)v30;
          unint64_t v23 = v31;
          if (v31 != v30)
          {
            do
            {
              uint64_t v25 = *((void *)v23 - 1);
              v23 -= 8;
              *((void *)v22 - 1) = v25;
              v22 -= 8;
            }
            while (v23 != v24);
            unint64_t v23 = (char *)v30;
          }
          uint64_t v30 = v22;
          char v31 = v15;
          uint64_t v32 = &v21[8 * v20];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(void *)uint64_t v15 = *(void *)(v17 + 8 * v16);
          v15 += 8;
        }
        char v31 = v15;
        ++v13;
      }
      while (v13 != v14);
    }
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Each 'axis' in 'perm' must correspond to a unique and different dimension.");
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
}

void sub_20F5C301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a11);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::inferIndexHelper<int>(MIL::IRValue *a1, void *a2, unint64_t a3)
{
  char v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v12[0] = MIL::IRTensorValue::GetDataView<int>(v5);
  v12[1] = v6;
  if ((*(uint64_t (**)(void))(**(void **)(*a2 + 8 * a3) + 24))(*(void *)(*a2 + 8 * a3)))
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
    if ((*(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3) & 0x80000000) != 0) {
      unsigned int v8 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3) + v10;
    }
    else {
      unsigned int v8 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v12, a3);
    }
    uint64_t v7 = 0x100000000;
  }
  return v7 | v8;
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::inferIndexHelper<short>(MIL::IRValue *a1, void *a2, unint64_t a3)
{
  char v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v11[0] = MIL::IRTensorValue::GetDataView<short>(v5);
  v11[1] = v6;
  if ((*(uint64_t (**)(void))(**(void **)(*a2 + 8 * a3) + 24))(*(void *)(*a2 + 8 * a3))) {
    return 0;
  }
  uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  int v10 = *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(v11, a3);
  return ((v9 & (v10 >> 31)) + *(__int16 *)MIL::Util::Span<short const,18446744073709551615ul>::At(v11, a3)) | 0x100000000;
}

uint64_t MIL::Operators::Common::ios15::anonymous namespace'::inferIndexHelper<signed char>(MIL::IRValue *a1, void *a2, unint64_t a3)
{
  char v5 = (uint64_t *)MIL::IRValue::AsTensor(a1);
  v11[0] = MIL::IRTensorValue::GetDataView<signed char>(v5);
  v11[1] = v6;
  if ((*(uint64_t (**)(void))(**(void **)(*a2 + 8 * a3) + 24))(*(void *)(*a2 + 8 * a3))) {
    return 0;
  }
  uint64_t v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * a3));
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  int v10 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(v11, a3);
  return ((v9 & (v10 >> 31))
        + *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(v11, a3)) | 0x100000000;
}

void *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  result[1] = 0;
  if (a4)
  {
    uint64_t v7 = result;
    if (a4 > result[2] << 6)
    {
      uint64_t v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *uint64_t v7 = 0;
        v7[1] = 0;
        uint64_t v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

void *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    uint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      *uint64_t v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *a1;
  if (*a3)
  {
    uint64_t v6 = *a1;
    return std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>((uint64_t)&v6, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
  else
  {
    uint64_t v5 = *a1;
    return std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v5, *(unsigned int *)(a2 + 8) - (unint64_t)*((unsigned int *)a1 + 2) + 8 * (*(void *)a2 - v3));
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & **(void **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(int8x8_t **)a1;
    do
    {
      int8x8_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1 = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(**(void **)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2)));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    if ((64 - v2) >= a2) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = (64 - v2);
    }
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v2 - v3)) & (-1 << v2) & ~**(void **)a1));
    v4.i16[0] = vaddlv_u8(v4);
    uint64_t v5 = v4.u32[0];
    a2 -= v3;
    *(void *)a1 += 8;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (a2 >= 0x40)
  {
    uint64_t v6 = *(uint64_t **)a1;
    do
    {
      uint64_t v7 = *v6++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v5 += v8.u32[0];
      a2 -= 64;
    }
    while (a2 > 0x3F);
    *(void *)a1 = v6;
  }
  if (a2)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~**(void **)a1));
    v9.i16[0] = vaddlv_u8(v9);
    v5 += v9.u32[0];
  }
  return v5;
}

void *std::vector<MIL::IRValueType const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F5C370C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<int>::unordered_set<int const*>(uint64_t a1, int *a2, int *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20F5C3790(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20F5C39AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::BatchToSpace::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5C4E94(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2C8]);
  unint64_t v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  uint8x8_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x270], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Concat::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5C6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v50 - 112));
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a38, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v50 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::DepthToSpace::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5C7214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a67);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v69 = *(void **)(v67 - 152);
  if (v69)
  {
    *(void *)(v67 - 144) = v69;
    operator delete(v69);
  }
  int v70 = *(void **)(v67 - 112);
  if (v70)
  {
    *(void *)(v67 - 104) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ExpandDims::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5C833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  unint64_t v61 = *(void **)(v59 - 136);
  if (v61)
  {
    *(void *)(v59 - 128) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::PixelShuffle::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5C95A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a67);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v69 = *(void **)(v67 - 152);
  if (v69)
  {
    *(void *)(v67 - 144) = v69;
    operator delete(v69);
  }
  int v70 = *(void **)(v67 - 112);
  if (v70)
  {
    *(void *)(v67 - 104) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5CA698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  unint64_t v61 = *(void **)(v59 - 136);
  if (v61)
  {
    *(void *)(v59 - 128) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Reverse::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5CBA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,void **a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 112));
  if (a59) {
    (*(void (**)(uint64_t))(*(void *)a59 + 8))(a59);
  }
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a58);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  int v73 = *(void **)(v71 - 136);
  if (v73)
  {
    *(void *)(v71 - 128) = v73;
    operator delete(v73);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  _Unwind_Resume(a1);
}

void sub_20F5CBF74()
{
}

void MIL::Operators::Common::ios15::ReverseSequence::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5CCF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,void **a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 112));
  if (a59) {
    (*(void (**)(uint64_t))(*(void *)a59 + 8))(a59);
  }
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a58);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  int v73 = *(void **)(v71 - 136);
  if (v73)
  {
    *(void *)(v71 - 128) = v73;
    operator delete(v73);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x210], 0);
  _Unwind_Resume(a1);
}

void sub_20F5CD510()
{
}

void MIL::Operators::Common::ios15::SliceByIndex::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5CEC54(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2B0];
  STACK[0x2B0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A8]);
  }
  uint8x8_t v4 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(v1 - 136);
  if (v7)
  {
    *(void *)(v1 - 128) = v7;
    operator delete(v7);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x360], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SliceBySize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D03F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  if (a63) {
    (*(void (**)(uint64_t))(*(void *)a63 + 8))(a63);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  uint64_t v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  std::string v75 = *(void **)(v72 - 136);
  if (v75)
  {
    *(void *)(v72 - 128) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x220], 0);
  _Unwind_Resume(a1);
}

void sub_20F5D0918()
{
}

void MIL::Operators::Common::ios15::SlidingWindows::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D16B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SpaceToBatch::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D3008(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2C8]);
  unint64_t v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  uint8x8_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x270], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SpaceToDepth::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a67);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v69 = *(void **)(v67 - 152);
  if (v69)
  {
    *(void *)(v67 - 144) = v69;
    operator delete(v69);
  }
  int v70 = *(void **)(v67 - 112);
  if (v70)
  {
    *(void *)(v67 - 104) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Split::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D51C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v53 = *(void *)(v51 - 112);
  *(void *)(v51 - 112) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *v50;
  uint64_t *v50 = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v51 - 88), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Squeeze::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v67 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  uint64_t v69 = *(void **)(v67 - 136);
  if (v69)
  {
    *(void *)(v67 - 128) = v69;
    operator delete(v69);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void sub_20F5D6784()
{
}

void MIL::Operators::Common::ios15::Stack::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D71E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 112));
  if (a49) {
    (*(void (**)(uint64_t))(*(void *)a49 + 8))(a49);
  }
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Transpose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D8374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v67 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  uint64_t v69 = *(void **)(v67 - 136);
  if (v69)
  {
    *(void *)(v67 - 128) = v69;
    operator delete(v69);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5D94B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  uint64_t v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5DA764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  unint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  int v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5DBC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a69);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(void *)(v69 - 120) = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ClampedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make();
}

void sub_20F5DC30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LinearActivation::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make();
}

void sub_20F5DC3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScaledTanh::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make();
}

void sub_20F5DC474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::SigmoidHard::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlphaBeta::Make();
}

void sub_20F5DC528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ELU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make();
}

void sub_20F5DC5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LeakyReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make();
}

void sub_20F5DC690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ThresholdedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivationWithAlpha::Make();
}

void sub_20F5DC744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ERF::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DC7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::GeLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5DD684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a57);
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  uint64_t v74 = *(void **)(v72 - 128);
  if (v74)
  {
    *(void *)(v72 - 120) = v74;
    operator delete(v74);
  }
  std::string v75 = __p;
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DDCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReLU6::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DDD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sigmoid::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DDE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::SiLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DDEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Softplus::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DDF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Softsign::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseActivation::Make();
}

void sub_20F5DE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::PReLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5DF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a65);
  if (a58) {
    (*(void (**)(uint64_t))(*(void *)a58 + 8))(a58);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  uint64_t v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  uint64_t v68 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v68;
    operator delete(v68);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Softmax::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5E0500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a61);
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  uint64_t v63 = *(void **)(v61 - 128);
  if (v63)
  {
    *(void *)(v61 - 120) = v63;
    operator delete(v63);
  }
  unint64_t v64 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v64;
    operator delete(v64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::SoftplusParametric::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5E1E0C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x250]);
  unint64_t v3 = STACK[0x208];
  STACK[0x208] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x200]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x200]);
  }
  uint8x8_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpAttributeConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprAffineDequantize(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v79, "quantized_data");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v79, &lpsrc);
  if (lpsrc)
  {
    if (v5)
    {
      unint64_t v6 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "zero_point");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v79, &lpsrc);
  if (lpsrc)
  {
    if (v7)
    {
      uint8x8_t v8 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint8x8_t v8 = 0;
    }
  }
  else
  {
    uint8x8_t v8 = 0;
    unint64_t v7 = 0;
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "scale");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v79, &lpsrc);
  if (lpsrc)
  {
    if (v9)
    {
      uint64_t v10 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint8x8_t v9 = 0;
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v79, "axis");
  uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)&v79);
  float v12 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  uint64_t v13 = *(int *)MIL::IRTensorValue::GetDataView<int>(v12);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  BOOL v14 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
  uint64_t v15 = MIL::IRTensorValueType::Rank(v14);
  if ((int)v13 >= 0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v13 < -v15 || v15 <= v13)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v43 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v77 = *LocationPtr;
    uint64_t v78 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v79, v13);
    unint64_t v44 = std::string::insert(&v79, 0, "Attribute axis should be in the range -quantizedData.rank <= axis < quantizedData.rank. Provided axis = ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    std::string::size_type v76 = v44->__r_.__value_.__r.__words[2];
    long long v75 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v77, 322, &v75);
    if (SHIBYTE(v76) < 0) {
      operator delete((void *)v75);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    uint64_t v46 = v78;
    if (!v78) {
      goto LABEL_81;
    }
LABEL_59:
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    goto LABEL_81;
  }
  size_t v17 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(void *)v7 + 32))(v7);
  uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
  unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 96))(v18);
  uint64_t v20 = v16 + v13;
  uint64_t v21 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v19 + 8 * v20));
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
  if (MIL::IRTensorValueType::Rank(v17) == 1
    && (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v17 + 16))(v17) != v22)
  {
    uint64_t v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v51 = (std::__shared_weak_count *)v50[1];
    uint64_t v73 = *v50;
    uint64_t v74 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v71, "Attribute zeroPoint, if vector, needs to have same number of elements as quantizedData[axis]");
    MIL::ValidationResult::ValidationResult(a2, &v73, 322, v71);
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    uint64_t v46 = v74;
    if (!v74) {
      goto LABEL_81;
    }
    goto LABEL_59;
  }
  unint64_t v23 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void *))(*(void *)v9 + 32))(v9);
  uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
  uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24);
  uint64_t v26 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v25 + 8 * v20));
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
  if (MIL::IRTensorValueType::Rank(v23) != 1
    || (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v23 + 16))(v23) == v27)
  {
    uint64_t v28 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(void *)this + 176))(this);
    if (*(void *)(v28 + 8) == *(void *)v28) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v28);
    uint64_t v30 = MIL::IRValueType::AsTensorType(Type);
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 96))(v30);
    memset(&v79, 0, sizeof(v79));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v79, *(const void **)v31, *(void *)(v31 + 8), (uint64_t)(*(void *)(v31 + 8) - *(void *)v31) >> 3);
    uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 96))(v32);
    std::string lpsrc = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&lpsrc, *(const void **)v33, *(void *)(v33 + 8), (uint64_t)(*(void *)(v33 + 8) - *(void *)v33) >> 3);
    std::string::size_type v34 = v79.__r_.__value_.__r.__words[0];
    if (v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0] == (char *)v65 - (unsigned char *)lpsrc)
    {
      if (v79.__r_.__value_.__l.__size_ == v79.__r_.__value_.__r.__words[0])
      {
LABEL_50:
        uint64_t v39 = MIL::IRValueType::AsTensorType(Type);
        int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 88))(v39);
        uint64_t v41 = (*(uint64_t (**)(void *))(*(void *)v9 + 32))(v9);
        if (v40 == (*(unsigned int (**)(uint64_t))(*(void *)v41 + 88))(v41))
        {
          MIL::ValidationResult::ValidationResult(a2);
LABEL_66:
          if (lpsrc)
          {
            uint64_t v65 = (std::__shared_weak_count *)lpsrc;
            operator delete(lpsrc);
          }
          if (v79.__r_.__value_.__r.__words[0])
          {
            v79.__r_.__value_.__l.__size_ = v79.__r_.__value_.__r.__words[0];
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          goto LABEL_81;
        }
        uint64_t v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v55 = (std::__shared_weak_count *)v54[1];
        uint64_t v58 = *v54;
        uint64_t v59 = v55;
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v56, "Attribute scale and output should have same dtype");
        MIL::ValidationResult::ValidationResult(a2, &v58, 306, v56);
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        unsigned int v49 = v59;
        if (!v59) {
          goto LABEL_66;
        }
LABEL_65:
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        goto LABEL_66;
      }
      unint64_t v35 = 0;
      while ((*(uint64_t (**)(void))(**(void **)(v34 + 8 * v35) + 16))(*(void *)(v34 + 8 * v35)))
      {
        if (!(*(uint64_t (**)(void))(**((void **)lpsrc + v35) + 16))(*((void *)lpsrc + v35))) {
          break;
        }
        uint64_t v36 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v79.__r_.__value_.__r.__words[0] + 8 * v35));
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 48))(v36);
        uint64_t v38 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)lpsrc + v35));
        if (v37 != (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38)) {
          break;
        }
        ++v35;
        std::string::size_type v34 = v79.__r_.__value_.__r.__words[0];
        if (v35 >= (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v48 = (std::__shared_weak_count *)v47[1];
    uint64_t v62 = *v47;
    uint64_t v63 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute quantizedData and output should have same shape");
    MIL::ValidationResult::ValidationResult(a2, &v62, 322, __p);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
    unsigned int v49 = v63;
    if (!v63) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  uint64_t v52 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v53 = (std::__shared_weak_count *)v52[1];
  uint64_t v69 = *v52;
  int v70 = v53;
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v67, "Attribute scale, if vector, needs to have same number of elements as quantizedData[axis]");
  MIL::ValidationResult::ValidationResult(a2, &v69, 322, v67);
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  uint64_t v46 = v70;
  if (v70) {
    goto LABEL_59;
  }
LABEL_81:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F5E2F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a26) {
    operator delete(a26);
  }
  unsigned int v49 = *(void **)(v47 - 112);
  if (v49)
  {
    *(void *)(v47 - 104) = v49;
    operator delete(v49);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_20F5E3A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,void **a35,uint64_t a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v44 - 112));
  if (a34) {
    (*(void (**)(uint64_t))(*(void *)a34 + 8))(a34);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  uint64_t v46 = *(void **)(v44 - 160);
  if (v46)
  {
    *(void *)(v44 - 152) = v46;
    operator delete(v46);
  }
  uint64_t v47 = *(void **)(v44 - 136);
  if (v47)
  {
    *(void *)(v44 - 128) = v47;
    operator delete(v47);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a35, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a36, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstexprCast::Make()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_20F5E4334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void **a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a32);
  uint64_t v35 = *(void *)(v33 - 80);
  *(void *)(v33 - 80) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a31, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprLutToDense(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)__p, v56);
  if (*(void *)v56)
  {
    if (v5)
    {
      unint64_t v6 = *(std::__shared_weak_count **)&v56[8];
      if (*(void *)&v56[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v56[8] + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  if (*(void *)&v56[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v56[8]);
  }
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)__p, v56);
  if (!*(void *)v56)
  {
    unint64_t v7 = 0;
    goto LABEL_16;
  }
  if (!v7)
  {
LABEL_16:
    uint8x8_t v8 = 0;
    goto LABEL_17;
  }
  uint8x8_t v8 = *(std::__shared_weak_count **)&v56[8];
  if (*(void *)&v56[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v56[8] + 8), 1uLL, memory_order_relaxed);
  }
LABEL_17:
  if (*(void *)&v56[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v56[8]);
  }
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned int>(v10);
  uint64_t v13 = v12;
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v55 = 0;
  uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v7 + 32))(v7);
  unint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  *(_OWORD *)long long v56 = xmmword_20F91B8D0;
  *(_OWORD *)&v56[16] = unk_20F91B8E0;
  uint64_t v57 = 256;
  std::unordered_set<unsigned long>::unordered_set((uint64_t)__p, (unint64_t *)v56, 5);
  if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, &v55))
  {
    uint64_t v15 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(void *)this + 176))(this);
    if (*(void *)(v15 + 8) == *(void *)v15) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v15);
    uint64_t v17 = MIL::IRValueType::AsTensorType(Type);
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
    uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v7 + 32))(v7);
    if (v18 == (*(unsigned int (**)(uint64_t))(*(void *)v19 + 88))(v19))
    {
      uint64_t v20 = MIL::IRValueType::AsTensorType(Type);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 96))(v20);
      memset(v56, 0, 24);
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v56, *(const void **)v21, *(void *)(v21 + 8), (uint64_t)(*(void *)(v21 + 8) - *(void *)v21) >> 3);
      if (MIL::Operators::Common::Shared::MatchesExpectedShape((uint64_t *)v56, Data, v13))
      {
        double v22 = log2((double)v55);
        uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
        if (v24 == vcvtpd_u64_f64((double)(unint64_t)(*(uint64_t (**)(MIL::IRValueType *))(*(void *)Type + 16))(Type)* 0.125* (double)(int)v22))
        {
          MIL::ValidationResult::ValidationResult(a2);
          goto LABEL_49;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v36 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v39 = *LocationPtr;
        int v40 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v37, "Attribute indices and shape should satisfy indicesSize == std::ceil(nBits * (prod(shape) / 8.0))");
        MIL::ValidationResult::ValidationResult(a2, &v39, 322, v37);
        if (v38 < 0) {
          operator delete(v37[0]);
        }
        std::string::size_type v34 = v40;
        if (!v40) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v33 = (std::__shared_weak_count *)v32[1];
        uint64_t v43 = *v32;
        uint64_t v44 = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v41, "Attribute shape and output's shape should match");
        MIL::ValidationResult::ValidationResult(a2, &v43, 322, v41);
        if (v42 < 0) {
          operator delete(v41[0]);
        }
        std::string::size_type v34 = v44;
        if (!v44) {
          goto LABEL_49;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_49:
      if (*(void *)v56)
      {
        *(void *)&v56[8] = *(void *)v56;
        operator delete(*(void **)v56);
      }
      goto LABEL_51;
    }
    uint64_t v30 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v31 = (std::__shared_weak_count *)v30[1];
    uint64_t v47 = *v30;
    uint64_t v48 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "Attribute lut and output should have same dtype");
    MIL::ValidationResult::ValidationResult(a2, &v47, 306, v45);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    uint64_t v29 = v48;
    if (v48) {
LABEL_42:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  else
  {
    uint64_t v25 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v26 = (std::__shared_weak_count *)v25[1];
    uint64_t v51 = *v25;
    uint64_t v52 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string((std::string *)v56, v55);
    uint64_t v27 = std::string::insert((std::string *)v56, 0, "Attribute lut should have number of elements equal to one of {2, 4, 16, 64, 256}, but provided ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v50 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)unsigned int v49 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v51, 322, v49);
    if (SHIBYTE(v50) < 0) {
      operator delete(v49[0]);
    }
    if ((v56[23] & 0x80000000) != 0) {
      operator delete(*(void **)v56);
    }
    uint64_t v29 = v52;
    if (v52) {
      goto LABEL_42;
    }
  }
LABEL_51:
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F5E4B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  uint64_t v52 = *(void **)(v50 - 160);
  if (v52)
  {
    *(void *)(v50 - 152) = v52;
    operator delete(v52);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a43);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstexprLutToDense::Make()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_20F5E560C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,void **a39,uint64_t a40,__int16 a41,char a42,char a43)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v43 - 112));
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 8))(a38);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33) {
    operator delete(a33);
  }
  long long v45 = *(void **)(v43 - 168);
  if (v45)
  {
    *(void *)(v43 - 160) = v45;
    operator delete(v45);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConstexprSparseToDense(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v56, "nonzero_data");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v56, &v59);
  if (v59)
  {
    if (v5)
    {
      unint64_t v6 = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(v56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "mask");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)this, (unsigned __int8 *)&v56, &v59);
  if (!v59)
  {
    unint64_t v7 = 0;
    goto LABEL_16;
  }
  if (!v7)
  {
LABEL_16:
    uint8x8_t v8 = 0;
    goto LABEL_17;
  }
  uint8x8_t v8 = v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_17:
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(v56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "shape");
  uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)&v56);
  uint64_t v10 = (uint64_t *)MIL::IRValue::AsTensor(Attribute);
  uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned int>(v10);
  uint64_t v13 = v12;
  if (SHIBYTE(v58) < 0) {
    operator delete(v56);
  }
  uint64_t v14 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(void *)this + 176))(this);
  if (*(void *)(v14 + 8) == *(void *)v14) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v14);
  uint64_t v16 = MIL::IRValueType::AsTensorType(Type);
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16);
  uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
  if (v17 == (*(unsigned int (**)(uint64_t))(*(void *)v18 + 88))(v18))
  {
    uint64_t v19 = MIL::IRValueType::AsTensorType(Type);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
    long long v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v56, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 3);
    if (MIL::Operators::Common::Shared::MatchesExpectedShape((uint64_t *)&v56, Data, v13))
    {
      unint64_t v21 = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)Type + 16))(Type);
      uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v7 + 32))(v7);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22) == vcvtpd_u64_f64((double)v21 * 0.125))
      {
        uint64_t v23 = (unsigned __int8 *)MIL::IRTensorValue::GetDataView<unsigned char>(v7);
        if (v24)
        {
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = &v23[v24];
          do
          {
            if (v25 + 8 <= v21) {
              unint64_t v28 = 8;
            }
            else {
              unint64_t v28 = v21 - v25;
            }
            if (v28)
            {
              int v29 = 0;
              do
                v26 += (*v23 >> v29++) & 1;
              while (v28 > v29);
            }
            v25 += v28;
            ++v23;
          }
          while (v23 != v27);
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
        if (v26 == (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37))
        {
          MIL::ValidationResult::ValidationResult(a2);
          goto LABEL_64;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v39 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v42 = *LocationPtr;
        uint64_t v43 = v39;
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v40, "Number of set bits in attribute 'mask' must match the number of elements in attribute 'nonZeroData'");
        MIL::ValidationResult::ValidationResult(a2, &v42, 322, v40);
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        std::string::size_type v34 = v43;
        if (!v43) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v35 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v36 = (std::__shared_weak_count *)v35[1];
        uint64_t v46 = *v35;
        uint64_t v47 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v44, "Attribute mask and shape should satisfy maskSize == std::ceil( prod(shape) / 8.0)");
        MIL::ValidationResult::ValidationResult(a2, &v46, 322, v44);
        if (v45 < 0) {
          operator delete(v44[0]);
        }
        std::string::size_type v34 = v47;
        if (!v47) {
          goto LABEL_64;
        }
      }
    }
    else
    {
      uint64_t v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v33 = (std::__shared_weak_count *)v32[1];
      uint64_t v50 = *v32;
      uint64_t v51 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v48, "Attribute shape and output's shape should match");
      MIL::ValidationResult::ValidationResult(a2, &v50, 322, v48);
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      std::string::size_type v34 = v51;
      if (!v51) {
        goto LABEL_64;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_64:
    if (v56)
    {
      uint64_t v57 = v56;
      operator delete(v56);
    }
    goto LABEL_66;
  }
  uint64_t v30 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v31 = (std::__shared_weak_count *)v30[1];
  uint64_t v54 = *v30;
  unint64_t v55 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribute nonZeroData and output should have same dtype");
  MIL::ValidationResult::ValidationResult(a2, &v54, 306, __p);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
LABEL_66:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F5E5F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  uint64_t v44 = *(void **)(v42 - 128);
  if (v44)
  {
    *(void *)(v42 - 120) = v44;
    operator delete(v44);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstexprSparseToDense::Make()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_20F5E6960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,void **a39,uint64_t a40,__int16 a41,char a42,char a43)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v43 - 112));
  if (a38) {
    (*(void (**)(uint64_t))(*(void *)a38 + 8))(a38);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33) {
    operator delete(a33);
  }
  char v45 = *(void **)(v43 - 168);
  if (v45)
  {
    *(void *)(v43 - 160) = v45;
    operator delete(v45);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C25F798;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25F798;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "quantized_data");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v13, &v15);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "zero_point");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v13, &v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "scale");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v13, &v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "axis");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)v13, &v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  uint64_t v3 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  MIL::IRTensorValueType::Rank(v3);
  uint64_t v7 = v9;
  uint8x8_t v8 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateAndGetAxis(&v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v13, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F5E70BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>()
{
}

void sub_20F5E7360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v12, v11);
  MEMORY[0x21056C700](v10, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C25F818;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F818;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_data");
  uint8x8_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "scale");
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)__p);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (v9)
    {
      uint64_t v10 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v8 + 5));
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v19 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
      uint64_t v13 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
      (*(void (**)(uint64_t))(*(void *)v14 + 88))(v14);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    *(void *)&long long v17 = v7;
    *((void *)&v17 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute scale is undefined for constexpr_affine_dequantize");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v17, (uint64_t)__p, 315);
  }
  uint64_t v15 = __cxa_allocate_exception(0x48uLL);
  *(void *)&long long v17 = v7;
  *((void *)&v17 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribute quantized_data is undefined for constexpr_affine_dequantize");
  MIL::ValidationError::ValidationError((uint64_t)v15, &v17, (uint64_t)__p, 315);
}

void sub_20F5E76AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v19) {
    __cxa_free_exception(v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprAffineDequantize::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C25F898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25F898;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IRObject *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "source_val");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr((uint64_t)a2, (unsigned __int8 *)__p, &v14);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr((uint64_t)a2, (unsigned __int8 *)__p, &v11);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v14 + 32))(v14);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
  uint64_t v5 = (const void **)MIL::IRValue::TryGetScalar<std::string>(v11);
  if (v5)
  {
    MIL::StringToIRDataType(v5, 0);
    MIL::IRTensorValueType::MakeWithShape();
  }
  exception = __cxa_allocate_exception(0x48uLL);
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
  uint64_t v8 = LocationPtr[1];
  *(void *)&long long v10 = *LocationPtr;
  *((void *)&v10 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "Attribute output_dtype is not a scalar string");
  MIL::ValidationError::ValidationError((uint64_t)exception, &v10, (uint64_t)&v9, 306);
}

void sub_20F5E7B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
    if ((v26 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v26)
  {
LABEL_8:
    if (a21) {
      operator delete(a21);
    }
    if (a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    }
    uint64_t v30 = *(std::__shared_weak_count **)(v28 - 40);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C25F918;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25F918;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *(void **)a3;
  uint64_t v6 = *(atomic_ullong **)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "source_val");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
    std::string v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9)
    {
      long long v10 = (const void *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
      MIL::IRValue::GetScalar<std::string>(v10, &__p);
      MIL::StringToIRDataType((const void **)&__p.__r_.__value_.__l.__data_, 0);
      uint64_t v11 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v8 + 5));
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
      memset(v16, 0, sizeof(v16));
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v16, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    v16[0] = v7;
    v16[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute output_dtype is undefined for constexpr_cast");
    MIL::ValidationError::ValidationError((uint64_t)exception, (long long *)v16, (uint64_t)&__p, 315);
  }
  long long v14 = __cxa_allocate_exception(0x48uLL);
  v16[0] = v7;
  v16[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute source_val is undefined for constexpr_cast");
  MIL::ValidationError::ValidationError((uint64_t)v14, (long long *)v16, (uint64_t)&__p, 315);
}

void sub_20F5E7FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v19) {
    __cxa_free_exception(v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprCast::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::unordered_set<unsigned long>::unordered_set(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_20F5E811C(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C25F998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25F998;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "indices");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v13);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "lut");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v10);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "shape");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v8);
  if (v12 < 0) {
    operator delete(v11);
  }
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateAndGetShape(&v6, (uint64_t)&v11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  MIL::IRTensorValueType::Make(*(MIL::IRConstantDimension **)(a1 + 8), v5, &v11);
}

void sub_20F5E8490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, MIL::Operators::Common::ios16::ConstExprs::LutToDense *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>()
{
}

void sub_20F5E86BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C25FA18;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FA18;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, MIL::IRConstantDimension **a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "lut");
  std::string v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    if (v10)
    {
      uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
      uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v11);
      unint64_t v14 = v13;
      std::string __p = 0;
      std::string::size_type v34 = 0;
      uint64_t v35 = 0;
      std::vector<std::string const*>::reserve(&__p, v13);
      if (v14)
      {
        uint64_t v15 = &Data[v14];
        do
        {
          uint64_t v16 = MIL::IRConstantDimension::Make(*a2, (MIL::MILContext *)*Data);
          uint64_t v17 = v16;
          uint64_t v18 = v34;
          if (v34 >= v35)
          {
            uint64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v20 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = ((char *)v35 - (unsigned char *)__p) >> 2;
            if (v21 <= v20 + 1) {
              unint64_t v21 = v20 + 1;
            }
            if ((unint64_t)((char *)v35 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            if (v22) {
              uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v35, v22);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v24 = (uint64_t *)&v23[8 * v20];
            *uint64_t v24 = v17;
            int v19 = v24 + 1;
            int v26 = (char *)__p;
            uint64_t v25 = (char *)v34;
            if (v34 != __p)
            {
              do
              {
                uint64_t v27 = *((void *)v25 - 1);
                v25 -= 8;
                *--uint64_t v24 = v27;
              }
              while (v25 != v26);
              uint64_t v25 = (char *)__p;
            }
            std::string __p = v24;
            std::string::size_type v34 = v19;
            uint64_t v35 = (uint64_t *)&v23[8 * v22];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *std::string::size_type v34 = v16;
            int v19 = v18 + 1;
          }
          std::string::size_type v34 = v19;
          ++Data;
        }
        while (Data != v15);
      }
      uint64_t v28 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28);
      (*(void (**)(uint64_t))(*(void *)v29 + 88))(v29);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    *(void *)&long long v32 = v8;
    *((void *)&v32 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute shape is undefined for constexpr_lut_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v32, (uint64_t)&__p, 315);
  }
  uint64_t v30 = __cxa_allocate_exception(0x48uLL);
  *(void *)&long long v32 = v8;
  *((void *)&v32 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute lut is undefined for constexpr_lut_to_dense");
  MIL::ValidationError::ValidationError((uint64_t)v30, &v32, (uint64_t)&__p, 315);
}

void sub_20F5E8AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v17) {
    __cxa_free_exception(v18);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprLutToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C25FA98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25FA98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "nonzero_data");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v13);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "mask");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v10);
  if (v12 < 0) {
    operator delete(v11);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "shape");
  MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(a2, (unsigned __int8 *)&v11, &v8);
  if (v12 < 0) {
    operator delete(v11);
  }
  uint64_t v6 = v8;
  uint64_t v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateAndGetShape(&v6, (uint64_t)&v11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  MIL::IRTensorValueType::Make(*(MIL::IRConstantDimension **)(a1 + 8), v5, &v11);
}

void sub_20F5E8F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, MIL::Operators::Common::ios16::ConstExprs::SparseToDense *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>()
{
}

void sub_20F5E913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C25FB18;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FB18;
}

void std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, MIL::IRConstantDimension **a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nonzero_data");
  std::string v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a5, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p);
    }
    if (v10)
    {
      uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(*((MIL::IRValue **)v10 + 5));
      uint64_t Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v11);
      unint64_t v14 = v13;
      std::string __p = 0;
      std::string::size_type v34 = 0;
      uint64_t v35 = 0;
      std::vector<std::string const*>::reserve(&__p, v13);
      if (v14)
      {
        uint64_t v15 = &Data[v14];
        do
        {
          uint64_t v16 = MIL::IRConstantDimension::Make(*a2, (MIL::MILContext *)*Data);
          uint64_t v17 = v16;
          uint64_t v18 = v34;
          if (v34 >= v35)
          {
            uint64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v20 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = ((char *)v35 - (unsigned char *)__p) >> 2;
            if (v21 <= v20 + 1) {
              unint64_t v21 = v20 + 1;
            }
            if ((unint64_t)((char *)v35 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            if (v22) {
              uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v35, v22);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v24 = (uint64_t *)&v23[8 * v20];
            *uint64_t v24 = v17;
            int v19 = v24 + 1;
            int v26 = (char *)__p;
            uint64_t v25 = (char *)v34;
            if (v34 != __p)
            {
              do
              {
                uint64_t v27 = *((void *)v25 - 1);
                v25 -= 8;
                *--uint64_t v24 = v27;
              }
              while (v25 != v26);
              uint64_t v25 = (char *)__p;
            }
            std::string __p = v24;
            std::string::size_type v34 = v19;
            uint64_t v35 = (uint64_t *)&v23[8 * v22];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *std::string::size_type v34 = v16;
            int v19 = v18 + 1;
          }
          std::string::size_type v34 = v19;
          ++Data;
        }
        while (Data != v15);
      }
      uint64_t v28 = MIL::IRValue::AsTensor(*((MIL::IRValue **)v9 + 5));
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28);
      (*(void (**)(uint64_t))(*(void *)v29 + 88))(v29);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    *(void *)&long long v32 = v8;
    *((void *)&v32 + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute shape is undefined for constexpr_sparse_to_dense");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v32, (uint64_t)&__p, 315);
  }
  uint64_t v30 = __cxa_allocate_exception(0x48uLL);
  *(void *)&long long v32 = v8;
  *((void *)&v32 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute nonzero_data is undefined for constexpr_sparse_to_dense");
  MIL::ValidationError::ValidationError((uint64_t)v30, &v32, (uint64_t)&__p, 315);
}

void sub_20F5E9540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v17) {
    __cxa_free_exception(v18);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios16::ConstexprSparseToDense::Make(MIL::MILContext &,std::string)::$_1>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a1 + 56) = a6;
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *)a1);
  return a1;
}

void sub_20F5E9694(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 48);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::Impl(v2, v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v42, "Constexpr-AffineDequantize");
  uint64_t v2 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&__p, "quantizedData");
  if (MIL::IRTensorValueType::Rank(v2) <= 0)
  {
    std::operator+<char>();
    uint64_t v15 = std::string::append(&v46, ", parameter ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v19 = std::string::append(&v47, (const std::string::value_type *)p_p, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unint64_t v21 = std::string::append(&v48, " should have minimum rank equals to 1 but its provided rank is ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = MIL::IRTensorValueType::Rank(v2);
    std::to_string(&v45, v23);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v45;
    }
    else {
      uint64_t v24 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v45.__r_.__value_.__l.__size_;
    }
    int v26 = std::string::append(&v49, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v50);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v50, "scale");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(v3, (uint64_t)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  std::string::basic_string[abi:ne180100]<0>(&v50, "zeroPoint");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(v4, (uint64_t)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  unint64_t v6 = MIL::IRTensorValueType::Rank(v5);
  if (*((void *)this + 7) >= v6)
  {
    std::operator+<char>();
    uint64_t v29 = std::string::append(&v46, ", parameter axis should be in the range 0 <= axis < quantizedData.rank(=");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, v6);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v45;
    }
    else {
      uint64_t v31 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v45.__r_.__value_.__l.__size_;
    }
    uint64_t v33 = std::string::append(&v47, (const std::string::value_type *)v31, v32);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    uint64_t v35 = std::string::append(&v48, ") but provided axis is ");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((void *)this + 7));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v37 = &__p;
    }
    else {
      uint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v39 = std::string::append(&v49, (const std::string::value_type *)v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    char v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, &v50);
    __cxa_throw(v41, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v8 + 8 * *((void *)this + 7)));
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v11 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(&v50, "scale");
  std::string::basic_string[abi:ne180100]<0>(&v49, "axisDim");
  MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(v11, v10, (uint64_t)&v50, (uint64_t)&v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  std::string::basic_string[abi:ne180100]<0>(&v50, "zeroPoint");
  std::string::basic_string[abi:ne180100]<0>(&v49, "axisDim");
  MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(v12, v10, (uint64_t)&v50, (uint64_t)&v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v13, *(void *)this);
  uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v14, *(void *)this);
  if (v43 < 0) {
    operator delete(v42);
  }
}

void sub_20F5E9D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)this + 96))(*(void *)this);
  v258 = 0;
  uint64_t v259 = 0;
  v257 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v257, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  uint64_t v3 = v258;
  if (v258 == v257)
  {
    uint64_t v6 = 1;
    unint64_t v5 = 1;
  }
  else
  {
    uint64_t v4 = (((char *)v258 - (unsigned char *)v257) >> 3) - 1;
    unint64_t v5 = 1;
    uint64_t v6 = 1;
    do
    {
      if (v4 == *((void *)this + 7)) {
        unint64_t v5 = v6;
      }
      uint64_t v7 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v257 + v4));
      v6 *= (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      --v4;
    }
    while (v4 != -1);
    uint64_t v3 = (MIL::IRDimension **)v257;
  }
  uint64_t v8 = MIL::IRDimension::AsConstant(v3[*((void *)this + 7)]);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  int v10 = (*(uint64_t (**)(void))(**(void **)this + 88))();
  int v11 = v10;
  if (v10 != 4)
  {
    if (v10 == 5)
    {
      uint64_t v12 = (uint64_t *)*((void *)this + 1);
      uint64_t v13 = *((void *)this + 2);
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = (uint64_t *)*((void *)this + 3);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 4);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v17 = (uint64_t *)*((void *)this + 5);
      long long v16 = (std::__shared_weak_count *)*((void *)this + 6);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (*(uint64_t (**)(uint64_t *))(*v12 + 32))(v12);
      int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 88))(v18);
      int v20 = v19;
      if (v19 == 9)
      {
        uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>(v12);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v93 = (*(uint64_t (**)(uint64_t *))(*v15 + 32))(v15);
        int v94 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 88))(v93);
        int v95 = v94;
        if (v94 != 5)
        {
          if (v94 == 4)
          {
            MIL::IRTensorValue::GetDataView<MIL::Fp16>(v15);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Constexpr-AffineDequantize: output and scale type must be same.");
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          char v230 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v95, &v260);
          uint64_t v231 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
          long long v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
          v261.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v232;
          v231->__r_.__value_.__l.__size_ = 0;
          v231->__r_.__value_.__r.__words[2] = 0;
          v231->__r_.__value_.__r.__words[0] = 0;
          v233 = std::string::append(&v261, ") for scale.");
          long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
          v262.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v234;
          v233->__r_.__value_.__l.__size_ = 0;
          v233->__r_.__value_.__r.__words[2] = 0;
          v233->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v230, &v262);
          __cxa_throw(v230, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v96 = MIL::IRTensorValue::GetDataView<float>(v15);
        std::string::size_type v98 = v97;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v99 = (*(uint64_t (**)(uint64_t *))(*v17 + 32))(v17);
        int v100 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 88))(v99);
        int v101 = v100;
        switch(v100)
        {
          case 5:
            uint64_t v175 = MIL::IRTensorValue::GetDataView<float>(v17);
            v262.__r_.__value_.__r.__words[0] = v96;
            v262.__r_.__value_.__l.__size_ = v98;
            v261.__r_.__value_.__r.__words[0] = v175;
            v261.__r_.__value_.__l.__size_ = v176;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v177 = 0;
              unint64_t v178 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v179 = 0;
                }
                else {
                  unint64_t v179 = v177 % v178 / v5;
                }
                float v180 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v261, v179);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v181 = 0;
                }
                else {
                  unint64_t v181 = v177 % v178 / v5;
                }
                std::string::size_type v182 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v181);
                float v183 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v182, (float)*(char *)(Data + v177), v180, *(float *)v182);
                v184 = __p;
                *((float *)__p + v177++) = v183;
              }
              while (v177 < (v256 - v184) >> 2);
            }
            break;
          case 9:
            uint64_t v133 = MIL::IRTensorValue::GetDataView<signed char>(v17);
            v262.__r_.__value_.__r.__words[0] = v96;
            v262.__r_.__value_.__l.__size_ = v98;
            v261.__r_.__value_.__r.__words[0] = v133;
            v261.__r_.__value_.__l.__size_ = v134;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v135 = 0;
              unint64_t v136 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v137 = 0;
                }
                else {
                  unint64_t v137 = v135 % v136 / v5;
                }
                char v138 = *(unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v261, v137);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v139 = 0;
                }
                else {
                  unint64_t v139 = v135 % v136 / v5;
                }
                long long v140 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v139);
                float v141 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v140, (float)*(char *)(Data + v135), (float)v138, *(float *)v140);
                long long v142 = __p;
                *((float *)__p + v135++) = v141;
              }
              while (v135 < (v256 - v142) >> 2);
            }
            break;
          case 14:
            uint64_t v102 = MIL::IRTensorValue::GetDataView<unsigned char>(v17);
            v262.__r_.__value_.__r.__words[0] = v96;
            v262.__r_.__value_.__l.__size_ = v98;
            v261.__r_.__value_.__r.__words[0] = v102;
            v261.__r_.__value_.__l.__size_ = v103;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v104 = 0;
              unint64_t v105 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v106 = 0;
                }
                else {
                  unint64_t v106 = v104 % v105 / v5;
                }
                unsigned int v107 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v261, v106);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v108 = 0;
                }
                else {
                  unint64_t v108 = v104 % v105 / v5;
                }
                uint64_t v109 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v108);
                float v110 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v109, (float)*(char *)(Data + v104), (float)v107, *(float *)v109);
                uint64_t v111 = __p;
                *((float *)__p + v104++) = v110;
              }
              while (v104 < (v256 - v111) >> 2);
            }
            break;
          default:
            unint64_t v250 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v101, &v260);
            unint64_t v251 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
            long long v252 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
            v261.__r_.__value_.__r.__words[2] = v251->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v252;
            v251->__r_.__value_.__l.__size_ = 0;
            v251->__r_.__value_.__r.__words[2] = 0;
            v251->__r_.__value_.__r.__words[0] = 0;
            v253 = std::string::append(&v261, ") for zeroPoint.");
            long long v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
            v262.__r_.__value_.__r.__words[2] = v253->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v254;
            v253->__r_.__value_.__l.__size_ = 0;
            v253->__r_.__value_.__r.__words[2] = 0;
            v253->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v250, &v262);
            __cxa_throw(v250, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      else
      {
        if (v19 != 14)
        {
          std::string v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v20, &v260);
          std::string v206 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
          long long v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
          v261.__r_.__value_.__r.__words[2] = v206->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v207;
          v206->__r_.__value_.__l.__size_ = 0;
          v206->__r_.__value_.__r.__words[2] = 0;
          v206->__r_.__value_.__r.__words[0] = 0;
          uint64_t v208 = std::string::append(&v261, ") for quantizedData.");
          long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
          v262.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v209;
          v208->__r_.__value_.__l.__size_ = 0;
          v208->__r_.__value_.__r.__words[2] = 0;
          v208->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v205, &v262);
          __cxa_throw(v205, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v21 = MIL::IRTensorValue::GetDataView<unsigned char>(v12);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*v15 + 32))(v15);
        int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 88))(v22);
        int v24 = v23;
        if (v23 != 5)
        {
          if (v23 == 4)
          {
            MIL::IRTensorValue::GetDataView<MIL::Fp16>(v15);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v201, "Constexpr-AffineDequantize: output and scale type must be same.");
            __cxa_throw(v201, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRDataTypeToString(v24, &v260);
          int64_t v216 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
          long long v217 = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
          v261.__r_.__value_.__r.__words[2] = v216->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v217;
          v216->__r_.__value_.__l.__size_ = 0;
          v216->__r_.__value_.__r.__words[2] = 0;
          v216->__r_.__value_.__r.__words[0] = 0;
          uint64_t v218 = std::string::append(&v261, ") for scale.");
          long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
          v262.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v219;
          v218->__r_.__value_.__l.__size_ = 0;
          v218->__r_.__value_.__r.__words[2] = 0;
          v218->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v215, &v262);
          __cxa_throw(v215, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v25 = MIL::IRTensorValue::GetDataView<float>(v15);
        std::string::size_type v27 = v26;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v28 = (*(uint64_t (**)(uint64_t *))(*v17 + 32))(v17);
        int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 88))(v28);
        int v30 = v29;
        switch(v29)
        {
          case 5:
            uint64_t v185 = MIL::IRTensorValue::GetDataView<float>(v17);
            v262.__r_.__value_.__r.__words[0] = v25;
            v262.__r_.__value_.__l.__size_ = v27;
            v261.__r_.__value_.__r.__words[0] = v185;
            v261.__r_.__value_.__l.__size_ = v186;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v187 = 0;
              unint64_t v188 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v189 = 0;
                }
                else {
                  unint64_t v189 = v187 % v188 / v5;
                }
                float v190 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v261, v189);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v191 = 0;
                }
                else {
                  unint64_t v191 = v187 % v188 / v5;
                }
                v192 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v191);
                LOBYTE(v193) = *(unsigned char *)(v21 + v187);
                float v194 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v192, (float)v193, v190, *(float *)v192);
                unint64_t v195 = __p;
                *((float *)__p + v187++) = v194;
              }
              while (v187 < (v256 - v195) >> 2);
            }
            break;
          case 9:
            uint64_t v143 = MIL::IRTensorValue::GetDataView<signed char>(v17);
            v262.__r_.__value_.__r.__words[0] = v25;
            v262.__r_.__value_.__l.__size_ = v27;
            v261.__r_.__value_.__r.__words[0] = v143;
            v261.__r_.__value_.__l.__size_ = v144;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v145 = 0;
              unint64_t v146 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v147 = 0;
                }
                else {
                  unint64_t v147 = v145 % v146 / v5;
                }
                char v148 = *(unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v261, v147);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v149 = 0;
                }
                else {
                  unint64_t v149 = v145 % v146 / v5;
                }
                std::string::size_type v150 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v149);
                LOBYTE(v151) = *(unsigned char *)(v21 + v145);
                float v152 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v150, (float)v151, (float)v148, *(float *)v150);
                uint64_t v153 = __p;
                *((float *)__p + v145++) = v152;
              }
              while (v145 < (v256 - v153) >> 2);
            }
            break;
          case 14:
            uint64_t v31 = MIL::IRTensorValue::GetDataView<unsigned char>(v17);
            v262.__r_.__value_.__r.__words[0] = v25;
            v262.__r_.__value_.__l.__size_ = v27;
            v261.__r_.__value_.__r.__words[0] = v31;
            v261.__r_.__value_.__l.__size_ = v32;
            std::vector<float>::vector(&__p, v6);
            if (v256 != __p)
            {
              unint64_t v33 = 0;
              unint64_t v34 = v9 * v5;
              do
              {
                if (v261.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v35 = 0;
                }
                else {
                  unint64_t v35 = v33 % v34 / v5;
                }
                unsigned int v36 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v261, v35);
                if (v262.__r_.__value_.__l.__size_ == 1) {
                  unint64_t v37 = 0;
                }
                else {
                  unint64_t v37 = v33 % v34 / v5;
                }
                std::string::size_type v38 = (MIL::Operators::Common::Shared::ConstExprs *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v262, v37);
                LOBYTE(v39) = *(unsigned char *)(v21 + v33);
                float v40 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(v38, (float)v39, (float)v36, *(float *)v38);
                char v41 = __p;
                *((float *)__p + v33++) = v40;
              }
              while (v33 < (v256 - v41) >> 2);
            }
            break;
          default:
            uint64_t v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRDataTypeToString(v30, &v260);
            v236 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
            long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
            v261.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v237;
            v236->__r_.__value_.__l.__size_ = 0;
            v236->__r_.__value_.__r.__words[2] = 0;
            v236->__r_.__value_.__r.__words[0] = 0;
            uint64_t v238 = std::string::append(&v261, ") for zeroPoint.");
            long long v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
            v262.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v239;
            v238->__r_.__value_.__l.__size_ = 0;
            v238->__r_.__value_.__r.__words[2] = 0;
            v238->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v235, &v262);
            __cxa_throw(v235, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      if (v16)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      MIL::IRTensorValueType::MakeFloat32Value();
    }
    uint64_t v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString(v11, &v260);
    char v197 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported ");
    long long v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
    v261.__r_.__value_.__r.__words[2] = v197->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v198;
    v197->__r_.__value_.__l.__size_ = 0;
    v197->__r_.__value_.__r.__words[2] = 0;
    v197->__r_.__value_.__r.__words[0] = 0;
    v199 = std::string::append(&v261, " output type");
    long long v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
    v262.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v200;
    v199->__r_.__value_.__l.__size_ = 0;
    v199->__r_.__value_.__r.__words[2] = 0;
    v199->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v196, &v262);
    __cxa_throw(v196, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v42 = (uint64_t *)*((void *)this + 1);
  uint64_t v43 = *((void *)this + 2);
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = (uint64_t *)*((void *)this + 3);
  uint64_t v44 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v47 = (uint64_t *)*((void *)this + 5);
  std::string v46 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = (*(uint64_t (**)(uint64_t *))(*v42 + 32))(v42);
  int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 88))(v48);
  int v50 = v49;
  if (v49 == 9)
  {
    uint64_t v72 = MIL::IRTensorValue::GetDataView<signed char>(v42);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v73 = (*(uint64_t (**)(uint64_t *))(*v45 + 32))(v45);
    int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 88))(v73);
    int v75 = v74;
    if (v74 != 4)
    {
      if (v74 == 5)
      {
        MIL::IRTensorValue::GetDataView<float>(v45);
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v203, "Constexpr-AffineDequantize: output and scale type must be same.");
        __cxa_throw(v203, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v225 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v75, &v260);
      v226 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      long long v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v227;
      v226->__r_.__value_.__l.__size_ = 0;
      v226->__r_.__value_.__r.__words[2] = 0;
      v226->__r_.__value_.__r.__words[0] = 0;
      uint64_t v228 = std::string::append(&v261, ") for scale.");
      long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
      v262.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v229;
      v228->__r_.__value_.__l.__size_ = 0;
      v228->__r_.__value_.__r.__words[2] = 0;
      v228->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v225, &v262);
      __cxa_throw(v225, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v76 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v45);
    std::string::size_type v78 = v77;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v79 = (*(uint64_t (**)(uint64_t *))(*v47 + 32))(v47);
    int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 88))(v79);
    int v81 = v80;
    switch(v80)
    {
      case 5:
        uint64_t v154 = MIL::IRTensorValue::GetDataView<float>(v47);
        v262.__r_.__value_.__r.__words[0] = v76;
        v262.__r_.__value_.__l.__size_ = v78;
        v261.__r_.__value_.__r.__words[0] = v154;
        v261.__r_.__value_.__l.__size_ = v155;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v156 = 0;
          unint64_t v157 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v158 = 0;
            }
            else {
              unint64_t v158 = v156 % v157 / v5;
            }
            float v159 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v261, v158);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v160 = 0;
            }
            else {
              unint64_t v160 = v156 % v157 / v5;
            }
            v161 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v160);
            __int16 v162 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v161, (float)*(char *)(v72 + v156), v159);
            unint64_t v163 = __p;
            *((_WORD *)__p + v156++) = v162;
          }
          while (v156 < (v256 - v163) >> 1);
        }
        break;
      case 9:
        uint64_t v112 = MIL::IRTensorValue::GetDataView<signed char>(v47);
        v262.__r_.__value_.__r.__words[0] = v76;
        v262.__r_.__value_.__l.__size_ = v78;
        v261.__r_.__value_.__r.__words[0] = v112;
        v261.__r_.__value_.__l.__size_ = v113;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v114 = 0;
          unint64_t v115 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v116 = 0;
            }
            else {
              unint64_t v116 = v114 % v115 / v5;
            }
            char v117 = *(unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v261, v116);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v118 = 0;
            }
            else {
              unint64_t v118 = v114 % v115 / v5;
            }
            uint64_t v119 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v118);
            __int16 v120 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v119, (float)*(char *)(v72 + v114), (float)v117);
            std::string::size_type v121 = __p;
            *((_WORD *)__p + v114++) = v120;
          }
          while (v114 < (v256 - v121) >> 1);
        }
        break;
      case 14:
        uint64_t v82 = MIL::IRTensorValue::GetDataView<unsigned char>(v47);
        v262.__r_.__value_.__r.__words[0] = v76;
        v262.__r_.__value_.__l.__size_ = v78;
        v261.__r_.__value_.__r.__words[0] = v82;
        v261.__r_.__value_.__l.__size_ = v83;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v84 = 0;
          unint64_t v85 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v86 = 0;
            }
            else {
              unint64_t v86 = v84 % v85 / v5;
            }
            unsigned int v87 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v261, v86);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v88 = 0;
            }
            else {
              unint64_t v88 = v84 % v85 / v5;
            }
            unint64_t v89 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v88);
            __int16 v90 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v89, (float)*(char *)(v72 + v84), (float)v87);
            uint64_t v91 = __p;
            *((_WORD *)__p + v84++) = v90;
          }
          while (v84 < (v256 - v91) >> 1);
        }
        break;
      default:
        uint64_t v245 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v81, &v260);
        uint64_t v246 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
        v261.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v247;
        v246->__r_.__value_.__l.__size_ = 0;
        v246->__r_.__value_.__r.__words[2] = 0;
        v246->__r_.__value_.__r.__words[0] = 0;
        uint64_t v248 = std::string::append(&v261, ") for zeroPoint.");
        long long v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
        v262.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v249;
        v248->__r_.__value_.__l.__size_ = 0;
        v248->__r_.__value_.__r.__words[2] = 0;
        v248->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v245, &v262);
        __cxa_throw(v245, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    if (v49 != 14)
    {
      uint64_t v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v50, &v260);
      v211 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      long long v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v212;
      v211->__r_.__value_.__l.__size_ = 0;
      v211->__r_.__value_.__r.__words[2] = 0;
      v211->__r_.__value_.__r.__words[0] = 0;
      uint64_t v213 = std::string::append(&v261, ") for quantizedData.");
      long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
      v262.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v214;
      v213->__r_.__value_.__l.__size_ = 0;
      v213->__r_.__value_.__r.__words[2] = 0;
      v213->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v210, &v262);
      __cxa_throw(v210, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v51 = MIL::IRTensorValue::GetDataView<unsigned char>(v42);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = (*(uint64_t (**)(uint64_t *))(*v45 + 32))(v45);
    int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 88))(v52);
    int v54 = v53;
    if (v53 != 4)
    {
      if (v53 == 5)
      {
        MIL::IRTensorValue::GetDataView<float>(v45);
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v202, "Constexpr-AffineDequantize: output and scale type must be same.");
        __cxa_throw(v202, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v220 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v54, &v260);
      uint64_t v221 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
      long long v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
      v261.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v222;
      v221->__r_.__value_.__l.__size_ = 0;
      v221->__r_.__value_.__r.__words[2] = 0;
      v221->__r_.__value_.__r.__words[0] = 0;
      uint64_t v223 = std::string::append(&v261, ") for scale.");
      long long v224 = *(_OWORD *)&v223->__r_.__value_.__l.__data_;
      v262.__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v224;
      v223->__r_.__value_.__l.__size_ = 0;
      v223->__r_.__value_.__r.__words[2] = 0;
      v223->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v220, &v262);
      __cxa_throw(v220, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v55 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(v45);
    std::string::size_type v57 = v56;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v58 = (*(uint64_t (**)(uint64_t *))(*v47 + 32))(v47);
    int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 88))(v58);
    int v60 = v59;
    switch(v59)
    {
      case 5:
        uint64_t v164 = MIL::IRTensorValue::GetDataView<float>(v47);
        v262.__r_.__value_.__r.__words[0] = v55;
        v262.__r_.__value_.__l.__size_ = v57;
        v261.__r_.__value_.__r.__words[0] = v164;
        v261.__r_.__value_.__l.__size_ = v165;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v166 = 0;
          unint64_t v167 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v168 = 0;
            }
            else {
              unint64_t v168 = v166 % v167 / v5;
            }
            float v169 = *(float *)MIL::Util::Span<float const,18446744073709551615ul>::At(&v261, v168);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v170 = 0;
            }
            else {
              unint64_t v170 = v166 % v167 / v5;
            }
            v171 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v170);
            LOBYTE(v172) = *(unsigned char *)(v51 + v166);
            __int16 v173 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v171, (float)v172, v169);
            v174 = __p;
            *((_WORD *)__p + v166++) = v173;
          }
          while (v166 < (v256 - v174) >> 1);
        }
        break;
      case 9:
        uint64_t v122 = MIL::IRTensorValue::GetDataView<signed char>(v47);
        v262.__r_.__value_.__r.__words[0] = v55;
        v262.__r_.__value_.__l.__size_ = v57;
        v261.__r_.__value_.__r.__words[0] = v122;
        v261.__r_.__value_.__l.__size_ = v123;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v124 = 0;
          unint64_t v125 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v126 = 0;
            }
            else {
              unint64_t v126 = v124 % v125 / v5;
            }
            char v127 = *(unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&v261, v126);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v128 = 0;
            }
            else {
              unint64_t v128 = v124 % v125 / v5;
            }
            std::string v129 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v128);
            LOBYTE(v130) = *(unsigned char *)(v51 + v124);
            __int16 v131 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v129, (float)v130, (float)v127);
            uint64_t v132 = __p;
            *((_WORD *)__p + v124++) = v131;
          }
          while (v124 < (v256 - v132) >> 1);
        }
        break;
      case 14:
        uint64_t v61 = MIL::IRTensorValue::GetDataView<unsigned char>(v47);
        v262.__r_.__value_.__r.__words[0] = v55;
        v262.__r_.__value_.__l.__size_ = v57;
        v261.__r_.__value_.__r.__words[0] = v61;
        v261.__r_.__value_.__l.__size_ = v62;
        std::vector<MIL::Fp16>::vector(&__p, v6);
        if (v256 != __p)
        {
          unint64_t v63 = 0;
          unint64_t v64 = v9 * v5;
          do
          {
            if (v261.__r_.__value_.__l.__size_ == 1) {
              unint64_t v65 = 0;
            }
            else {
              unint64_t v65 = v63 % v64 / v5;
            }
            unsigned int v66 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&v261, v65);
            if (v262.__r_.__value_.__l.__size_ == 1) {
              unint64_t v67 = 0;
            }
            else {
              unint64_t v67 = v63 % v64 / v5;
            }
            char v68 = (__int16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v262, v67);
            LOBYTE(v69) = *(unsigned char *)(v51 + v63);
            __int16 v70 = MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(*v68, (float)v69, (float)v66);
            uint64_t v71 = __p;
            *((_WORD *)__p + v63++) = v70;
          }
          while (v63 < (v256 - v71) >> 1);
        }
        break;
      default:
        v240 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v60, &v260);
        unint64_t v241 = std::string::insert(&v260, 0, "Constexpr-AffineDequantize: Unsupported dType (");
        long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
        v261.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v261.__r_.__value_.__l.__data_ = v242;
        v241->__r_.__value_.__l.__size_ = 0;
        v241->__r_.__value_.__r.__words[2] = 0;
        v241->__r_.__value_.__r.__words[0] = 0;
        v243 = std::string::append(&v261, ") for zeroPoint.");
        long long v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
        v262.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v244;
        v243->__r_.__value_.__l.__size_ = 0;
        v243->__r_.__value_.__r.__words[2] = 0;
        v243->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v240, &v262);
        __cxa_throw(v240, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  if (v46)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  MIL::IRTensorValueType::MakeFloat16Value();
}

void sub_20F5EB71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      if (v33)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (a11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a11);
      }
      if (a17) {
        operator delete(a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v34);
  goto LABEL_10;
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::~AffineDequantize(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);

  JUMPOUT(0x21056C700);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::AffineDequantize(void *a1)
{
  *MIL::AbstractConstExpr::AbstractConstExpr(a1) = &unk_26C25FB98;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>();
}

void sub_20F5EBC34(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>,unsigned long &>()
{
}

void sub_20F5EBD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::Impl(v12, v11);
  MEMORY[0x21056C700](v10, 0x1060C406C0A727ELL);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize *this, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v2 = (MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *)*((void *)this + 1);
    MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::ComputeOutput(v2);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "AffineDequantize has a single output.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5EBE0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_20F5EBE88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<float const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 4 * a2;
}

void sub_20F5EBF04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl>::reset[abi:ne180100](MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl **a1, MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::~Impl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl::~Impl(MIL::Operators::Common::ios16::ConstExprs::AffineDequantize::Impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *)a1);
  return a1;
}

void sub_20F5EBFE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-Cast");
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(v2, *(void *)this);
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_20F5EC07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v2);
  if (v3 == 4)
  {
    if ((*(unsigned int (**)(void))(**(void **)this + 88))() == 5)
    {
      char v4 = (MIL::Fp16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
      unint64_t v6 = v5;
      std::vector<float>::vector(&__p, v5);
      if (v6)
      {
        uint64_t v7 = (float *)__p.__r_.__value_.__r.__words[0];
        uint64_t v8 = 2 * v6;
        do
        {
          *v7++ = MIL::Fp16::GetFloat(v4);
          char v4 = (MIL::Fp16 *)((char *)v4 + 2);
          v8 -= 2;
        }
        while (v8);
      }
      MIL::IRTensorValueType::MakeFloat32Value();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid output dtype for Constexpr-Cast");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v9 = v3;
  uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  MIL::IRDataTypeToString(v9, &v16);
  int v11 = std::string::insert(&v16, 0, "Constexpr-Cast: Source type ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v17, " is not supported");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(v10, &__p);
  __cxa_throw(v10, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5EC2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::~Cast(MIL::Operators::Common::ios16::ConstExprs::Cast *this)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }

  MIL::AbstractConstExpr::~AbstractConstExpr(this);
}

{
  uint64_t vars8;

  MIL::Operators::Common::ios16::ConstExprs::Cast::~Cast(this);

  JUMPOUT(0x21056C700);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::Cast(void *a1)
{
  *MIL::AbstractConstExpr::AbstractConstExpr(a1) = &unk_26C25FBE8;
  operator new();
}

void sub_20F5EC4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v11, 0x60C40AA6EF139);
  MIL::AbstractConstExpr::~AbstractConstExpr(v10);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::Cast::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::Cast *this, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v2 = (MIL::Operators::Common::ios16::ConstExprs::Cast::Impl *)*((void *)this + 1);
    MIL::Operators::Common::ios16::ConstExprs::Cast::Impl::ComputeOutput(v2);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cast has a single output.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5EC584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Operators::Common::ios16::ConstExprs::Cast::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x21056C700);
  }
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v41, "Constexpr-LutToDense");
  uint64_t v2 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(__p, "lookupTable");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v2, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v3, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v4, *(void *)this);
  unint64_t v5 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant((uint64_t)v5, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  __val.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  *(_OWORD *)int v53 = xmmword_20F91CAC8;
  *(_OWORD *)&v53[16] = unk_20F91CAD8;
  uint64_t v54 = 256;
  std::unordered_set<unsigned long>::unordered_set((uint64_t)__p, (unint64_t *)v53, 5);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(__p, (unint64_t *)&__val))
  {
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v51, ", number of palettes should be one of  {2, 4, 16, 64, 256} but provided number of palettes = ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v50, __val.__r_.__value_.__r.__words[0]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v50;
    }
    else {
      uint64_t v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    std::string v17 = std::string::append(&v52, (const std::string::value_type *)v15, size);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&v53[16] = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)int v53 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)v53);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)__p);
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  double v9 = log2((double)v8);
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  unint64_t v12 = (*(uint64_t (**)(void))(**(void **)this + 16))();
  if (v11 != vcvtpd_u64_f64((double)v12 * 0.125 * (double)(int)v9))
  {
    std::operator+<char>();
    int v20 = std::string::append(&v47, " with nBits (=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, (int)v9);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v46;
    }
    else {
      uint64_t v22 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v46.__r_.__value_.__l.__size_;
    }
    int v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __val.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__val.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v26 = std::string::append(&__val, "), mismatch in indices size and the shape of output IRTensorValueType. Size of indices (=");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, v11);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v45;
    }
    else {
      uint64_t v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v45.__r_.__value_.__l.__size_;
    }
    int v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v32 = std::string::append(&v51, ") and the size of output IRTensorValueType (=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v44, v12);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v34 = &v44;
    }
    else {
      unint64_t v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v44.__r_.__value_.__l.__size_;
    }
    unsigned int v36 = std::string::append(&v52, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(void *)&v53[16] = *((void *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)int v53 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v38 = std::string::append((std::string *)v53, ") should follow the equation: indicesSize == ceil(nBits * outputSize / 8.0)");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((v53[23] & 0x80000000) != 0) {
      operator delete(*(void **)v53);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__val.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__val.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    float v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, __p);
    __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
}

void sub_20F5ECC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)this + 96))(*(void *)this);
  int v49 = 0;
  uint64_t v50 = 0;
  std::string v48 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v48, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  uint64_t v3 = (MIL::IRDimension **)v48;
  if (v49 == v48)
  {
    size_t v5 = 1;
  }
  else
  {
    unint64_t v4 = 0;
    size_t v5 = 1;
    do
    {
      uint64_t v6 = MIL::IRDimension::AsConstant(v3[v4]);
      v5 *= (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      ++v4;
      uint64_t v3 = (MIL::IRDimension **)v48;
    }
    while (v4 < (v49 - (unsigned char *)v48) >> 3);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  unint64_t v8 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  uint64_t v9 = MIL::IRDimension::AsConstant(**v8);
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  double v11 = log2((double)v10);
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
  unint64_t v14 = (unint64_t)v11;
  if (v13 > 8)
  {
    if (v13 == 9)
    {
      uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>(*((uint64_t **)this + 1));
      uint64_t v39 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<signed char>::vector(&__p, v5);
      float v40 = __p;
      if (v47 != __p)
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          if (v14)
          {
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            do
            {
              v44 += ((*(unsigned __int8 *)(v39 + ((unint64_t)(v41 + v43) >> 3)) >> ((v41 + v43) & 7)) & 1) << v43;
              ++v43;
            }
            while (v14 != v43);
          }
          else
          {
            uint64_t v44 = 0;
          }
          v40[v42++] = *(unsigned char *)(Data + v44);
          float v40 = __p;
          v41 += v14;
        }
        while (v42 < v47 - (unsigned char *)__p);
      }
      MIL::IRTensorValueType::MakeInt8Value();
    }
    if (v13 == 14)
    {
      uint64_t v23 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 1));
      uint64_t v24 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<unsigned char>::vector(&__p, v5);
      long long v25 = __p;
      if (v47 != __p)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          if (v14)
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            do
            {
              v29 += ((*(unsigned __int8 *)(v24 + ((unint64_t)(v26 + v28) >> 3)) >> ((v26 + v28) & 7)) & 1) << v28;
              ++v28;
            }
            while (v14 != v28);
          }
          else
          {
            uint64_t v29 = 0;
          }
          v25[v27++] = *(unsigned char *)(v23 + v29);
          long long v25 = __p;
          v26 += v14;
        }
        while (v27 < v47 - (unsigned char *)__p);
      }
      MIL::IRTensorValueType::MakeUInt8Value();
    }
  }
  else
  {
    if (v13 == 4)
    {
      uint64_t v30 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
      uint64_t v31 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<MIL::Fp16>::vector(&__p, v5);
      std::string::size_type v32 = __p;
      if (v47 != __p)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        unint64_t v35 = (v47 - (unsigned char *)__p) >> 1;
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        do
        {
          if (v14)
          {
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            do
            {
              v37 += ((*(unsigned __int8 *)(v31 + ((unint64_t)(v33 + v36) >> 3)) >> ((v33 + v36) & 7)) & 1) << v36;
              ++v36;
            }
            while (v14 != v36);
          }
          else
          {
            uint64_t v37 = 0;
          }
          v32[v34++] = *(_WORD *)(v30 + 2 * v37);
          v33 += v14;
        }
        while (v34 != v35);
      }
      MIL::IRTensorValueType::MakeFloat16Value();
    }
    if (v13 == 5)
    {
      uint64_t v15 = MIL::IRTensorValue::GetDataView<float>(*((uint64_t **)this + 1));
      uint64_t v16 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 3));
      std::vector<float>::vector(&__p, v5);
      std::string v17 = __p;
      if (v47 != __p)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        unint64_t v20 = (v47 - (unsigned char *)__p) >> 2;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        do
        {
          if (v14)
          {
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            do
            {
              v22 += ((*(unsigned __int8 *)(v16 + ((unint64_t)(v18 + v21) >> 3)) >> ((v18 + v21) & 7)) & 1) << v21;
              ++v21;
            }
            while (v14 != v21);
          }
          else
          {
            uint64_t v22 = 0;
          }
          v17[v19++] = *(_DWORD *)(v15 + 4 * v22);
          v18 += v14;
        }
        while (v19 != v20);
      }
      MIL::IRTensorValueType::MakeFloat32Value();
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid dtype for lookupTable");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5ED400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  __cxa_free_exception(v15);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::~LutToDense(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);

  JUMPOUT(0x21056C700);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::LutToDense(void *a1)
{
  *MIL::AbstractConstExpr::AbstractConstExpr(a1) = &unk_26C25FC38;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>();
}

void sub_20F5ED610(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>()
{
}

void sub_20F5ED6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x60C406B8A8D55);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::LutToDense *this, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v2 = (MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *)*((void *)this + 1);
    MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ComputeOutput(v2);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "LutToDense has a single output.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5ED780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **a1, MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::~Impl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::~Impl(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl *)a1);
  return a1;
}

void sub_20F5ED864(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "Constexpr-SparseToDense");
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v2);
  unint64_t v4 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  std::string::basic_string[abi:ne180100]<0>(&v37, "nonZeroData");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v4, (uint64_t)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v3 == 14)
  {
    size_t v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
    std::string::basic_string[abi:ne180100]<0>(&v37, "mask if packed");
    MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(v5, (uint64_t)&v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(v6, *(void *)this);
  uint64_t v7 = *(void **)this;
  std::string::basic_string[abi:ne180100]<0>(&v37, "output");
  MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant((uint64_t)v7, (uint64_t)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v3 == 14)
  {
    unint64_t v8 = (*(uint64_t (**)(void))(**(void **)this + 16))();
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
    unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (v10 != vcvtpd_u64_f64((double)v8 * 0.125))
    {
      std::operator+<char>();
      double v11 = std::string::append(&v32, ", mismatch in mask size and the shape of output IRTensorValueType. Size of mask (=");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v31, v10);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v31;
      }
      else {
        int v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v31.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = std::string::append(&v33, (const std::string::value_type *)v13, size);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::string v17 = std::string::append(&v34, ") and the size of IRTensorValueType (=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v30, v8);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v30;
      }
      else {
        uint64_t v19 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = v30.__r_.__value_.__l.__size_;
      }
      uint64_t v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      uint64_t v23 = std::string::append(&v36, ") should follow the equation: maskSize == ceil(outputSize / 8)");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v37);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else if (v3 == 21)
  {
    uint64_t v26 = *(void **)this;
    uint64_t v27 = (*(uint64_t (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
    std::string::basic_string[abi:ne180100]<0>(&v37, "output");
    std::string::basic_string[abi:ne180100]<0>(&v36, "mask");
    MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape((uint64_t)v26, v27, (uint64_t)&v37);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  if (v29 < 0) {
    operator delete(__p);
  }
}

void sub_20F5EDD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)this + 96))(*(void *)this);
  std::string::size_type v97 = 0;
  uint64_t v98 = 0;
  uint64_t v96 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v96, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
  int v3 = (MIL::IRDimension **)v96;
  if (v97 == v96)
  {
    unint64_t v5 = 1;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = 1;
    do
    {
      uint64_t v6 = MIL::IRDimension::AsConstant(v3[v4]);
      v5 *= (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      ++v4;
      int v3 = (MIL::IRDimension **)v96;
    }
    while (v4 < (v97 - (unsigned char *)v96) >> 3);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  switch(v8)
  {
    case 4:
      uint64_t v9 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(*((uint64_t **)this + 1));
      double v11 = (void *)*((void *)this + 3);
      uint64_t v10 = *((void *)this + 4);
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v11 + 32))(v11);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
      if (v13 == 21)
      {
        uint64_t v81 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v11);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>(v9, v81, v82, (uint64_t *)&__p);
      }
      else
      {
        if (v13 != 14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid dtype for mask");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>(v11);
        std::vector<MIL::Fp16>::vector(&__p, v5);
        uint64_t v15 = __p;
        if (v95 != __p)
        {
          unint64_t v16 = 0;
          uint64_t v17 = 0;
          unint64_t v18 = (v95 - (unsigned char *)__p) >> 1;
          if (v18 <= 1) {
            unint64_t v18 = 1;
          }
          do
          {
            if ((*(unsigned __int8 *)(Data + (v16 >> 3)) >> (v16 & 7))) {
              __int16 v19 = *(_WORD *)(v9 + 2 * v17++);
            }
            else {
              __int16 v19 = 0;
            }
            v15[v16++] = v19;
          }
          while (v18 != v16);
        }
      }
      MIL::IRTensorValueType::MakeFloat16Value();
    case 5:
      uint64_t v41 = MIL::IRTensorValue::GetDataView<float>(*((uint64_t **)this + 1));
      uint64_t v43 = (void *)*((void *)this + 3);
      uint64_t v42 = *((void *)this + 4);
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = (*(uint64_t (**)(void *))(*(void *)v43 + 32))(v43);
      int v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 88))(v44);
      if (v45 == 21)
      {
        uint64_t v75 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v43);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>(v41, v75, v76, (uint64_t *)&__p);
      }
      else
      {
        if (v45 != 14)
        {
          unsigned int v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v87, "Invalid dtype for mask");
          __cxa_throw(v87, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v46 = MIL::IRTensorValue::GetDataView<unsigned char>(v43);
        std::vector<float>::vector(&__p, v5);
        std::string v47 = __p;
        if (v95 != __p)
        {
          uint64_t v48 = 0;
          unint64_t v49 = 0;
          unint64_t v50 = (v95 - (unsigned char *)__p) >> 2;
          if (v50 <= 1) {
            unint64_t v50 = 1;
          }
          do
          {
            if ((*(unsigned __int8 *)(v46 + (v49 >> 3)) >> (v49 & 7))) {
              int v51 = *(_DWORD *)(v41 + 4 * v48++);
            }
            else {
              int v51 = 0;
            }
            v47[v49++] = v51;
          }
          while (v50 != v49);
        }
      }
      MIL::IRTensorValueType::MakeFloat32Value();
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
      break;
    case 9:
      uint64_t v63 = MIL::IRTensorValue::GetDataView<signed char>(*((uint64_t **)this + 1));
      unint64_t v65 = (void *)*((void *)this + 3);
      uint64_t v64 = *((void *)this + 4);
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v66 = (*(uint64_t (**)(void *))(*(void *)v65 + 32))(v65);
      int v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 88))(v66);
      if (v67 == 21)
      {
        uint64_t v79 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v65);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>(v63, v79, v80, &__p);
      }
      else
      {
        if (v67 != 14)
        {
          __int16 v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v90, "Invalid dtype for mask");
          __cxa_throw(v90, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v68 = MIL::IRTensorValue::GetDataView<unsigned char>(v65);
        std::vector<signed char>::vector(&__p, v5);
        unsigned int v69 = __p;
        if (v95 != __p)
        {
          uint64_t v70 = 0;
          unint64_t v71 = 0;
          do
          {
            if ((*(unsigned __int8 *)(v68 + (v71 >> 3)) >> (v71 & 7))) {
              char v72 = *(unsigned char *)(v63 + v70++);
            }
            else {
              char v72 = 0;
            }
            v69[v71++] = v72;
            unsigned int v69 = __p;
          }
          while (v71 < v95 - (unsigned char *)__p);
        }
      }
      MIL::IRTensorValueType::MakeInt8Value();
    case 13:
      uint64_t v52 = MIL::IRTensorValue::GetDataView<MIL::Int4>(*((const void **)this + 1));
      uint64_t v54 = v53;
      std::string::size_type v56 = (void *)*((void *)this + 3);
      uint64_t v55 = *((void *)this + 4);
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v57 = (*(uint64_t (**)(void *))(*(void *)v56 + 32))(v56);
      int v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 88))(v57);
      if (v58 == 21)
      {
        uint64_t v77 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v56);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>(v52, v54, v77, v78, &v92);
      }
      else
      {
        if (v58 != 14)
        {
          unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v88, "Invalid dtype for mask");
          __cxa_throw(v88, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v59 = MIL::IRTensorValue::GetDataView<unsigned char>(v56);
        uint64_t v100 = v52;
        uint64_t v101 = v54;
        std::vector<MIL::Int4>::vector(&v92, v5);
        if (v93 != v92)
        {
          unint64_t v60 = 0;
          unint64_t v61 = 0;
          do
          {
            if ((*(unsigned __int8 *)(v59 + (v61 >> 3)) >> (v61 & 7)))
            {
              char v62 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(&v100, v60++);
              *((unsigned char *)v92 + v61) = v62;
            }
            else
            {
              MIL::Int4::Int4((MIL::Int4 *)&v99, 0);
              *((unsigned char *)v92 + v61) = v99;
            }
            ++v61;
          }
          while (v61 < v93 - (unsigned char *)v92);
        }
      }
      MIL::PackSubByteVec((uint64_t *)&v92, &__p);
      MIL::IRTensorValueType::MakeInt4Value();
    case 14:
      uint64_t v31 = MIL::IRTensorValue::GetDataView<unsigned char>(*((void **)this + 1));
      std::string v33 = (void *)*((void *)this + 3);
      uint64_t v32 = *((void *)this + 4);
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v33 + 32))(v33);
      int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 88))(v34);
      if (v35 == 21)
      {
        uint64_t v73 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v33);
        MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>(v31, v73, v74, &__p);
      }
      else
      {
        if (v35 != 14)
        {
          unint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v86, "Invalid dtype for mask");
          __cxa_throw(v86, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v36 = MIL::IRTensorValue::GetDataView<unsigned char>(v33);
        std::vector<unsigned char>::vector(&__p, v5);
        std::string v37 = __p;
        if (v95 != __p)
        {
          uint64_t v38 = 0;
          unint64_t v39 = 0;
          do
          {
            if ((*(unsigned __int8 *)(v36 + (v39 >> 3)) >> (v39 & 7))) {
              char v40 = *(unsigned char *)(v31 + v38++);
            }
            else {
              char v40 = 0;
            }
            v37[v39++] = v40;
            std::string v37 = __p;
          }
          while (v39 < v95 - (unsigned char *)__p);
        }
      }
      MIL::IRTensorValueType::MakeUInt8Value();
    default:
      if (v8 == 20)
      {
        uint64_t v20 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(*((const void **)this + 1));
        uint64_t v22 = v21;
        long long v24 = (void *)*((void *)this + 3);
        uint64_t v23 = *((void *)this + 4);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v24 + 32))(v24);
        int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 88))(v25);
        if (v26 == 21)
        {
          uint64_t v83 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(v24);
          MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>(v20, v22, v83, v84, &v92);
        }
        else
        {
          if (v26 != 14)
          {
            uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v91, "Invalid dtype for mask");
            __cxa_throw(v91, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t v27 = MIL::IRTensorValue::GetDataView<unsigned char>(v24);
          uint64_t v100 = v20;
          uint64_t v101 = v22;
          std::vector<MIL::UInt4>::vector(&v92, v5);
          if (v93 != v92)
          {
            unint64_t v28 = 0;
            unint64_t v29 = 0;
            do
            {
              if ((*(unsigned __int8 *)(v27 + (v29 >> 3)) >> (v29 & 7)))
              {
                char v30 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(&v100, v28++);
                *((unsigned char *)v92 + v29) = v30;
              }
              else
              {
                MIL::UInt4::UInt4((MIL::UInt4 *)&v99, 0);
                *((unsigned char *)v92 + v29) = v99;
              }
              ++v29;
            }
            while (v29 < v93 - (unsigned char *)v92);
          }
        }
        MIL::PackSubByteVec((uint64_t *)&v92, &__p);
        MIL::IRTensorValueType::MakeUInt4Value();
      }
      return;
  }
  unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v85, "Invalid dtype for argument nonZeroData");
  __cxa_throw(v85, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5EE8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  __cxa_free_exception(v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::~SparseToDense(MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl **this)
{
  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);

  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);
}

{
  uint64_t vars8;

  std::unique_ptr<MIL::Operators::Common::ios16::ConstExprs::LutToDense::Impl>::reset[abi:ne180100](this + 1, 0);
  MIL::AbstractConstExpr::~AbstractConstExpr((MIL::AbstractConstExpr *)this);

  JUMPOUT(0x21056C700);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::SparseToDense(void *a1)
{
  *MIL::AbstractConstExpr::AbstractConstExpr(a1) = &unk_26C25FC88;
  std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>();
}

void sub_20F5EEB4C(_Unwind_Exception *a1)
{
  MIL::AbstractConstExpr::~AbstractConstExpr(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::IRTensorValue const>,std::shared_ptr<MIL::IRTensorValue const>>()
{
}

void sub_20F5EEC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x60C406B8A8D55);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ValidateArgsAndTypeConstraints(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this)
{
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this)
{
}

void sub_20F5EECD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::Proto::ParseValue(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ConstExprs::SparseToDense::ComputeOutput(MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl **this, uint64_t a2)
{
  if (!a2) {
    MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ComputeOutput(this[1]);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SparseToDense has a single output.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F5EEDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::UInt4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, void *a5@<X8>)
{
  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  uint64_t result = (uint64_t)std::vector<MIL::UInt4>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      char v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        uint64_t result = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(unsigned char *)(*a5 + v8) = result;
      }
      else
      {
        uint64_t result = MIL::UInt4::UInt4((MIL::UInt4 *)&v9, 0);
        *(unsigned char *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_20F5EEE98(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Int4>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t a4@<X3>, void *a5@<X8>)
{
  v11[0] = a1;
  v11[1] = a2;
  v10[0] = a3;
  v10[1] = a4;
  uint64_t result = (uint64_t)std::vector<MIL::Int4>::vector(a5, a4);
  if (a5[1] != *a5)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      char v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, v8);
      if (MIL::UInt1::GetInt((MIL::UInt1 *)&v9))
      {
        uint64_t result = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v11, v7++);
        *(unsigned char *)(*a5 + v8) = result;
      }
      else
      {
        uint64_t result = MIL::Int4::Int4((MIL::Int4 *)&v9, 0);
        *(unsigned char *)(*a5 + v8) = v9;
      }
      ++v8;
    }
    while (v8 < a5[1] - *a5);
  }
  return result;
}

void sub_20F5EEF78(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t result = std::vector<unsigned char>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      char v10 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v11, v7);
      uint64_t result = (void *)MIL::UInt1::GetInt((MIL::UInt1 *)&v10);
      if (result) {
        char v9 = *(unsigned char *)(a1 + v8++);
      }
      else {
        char v9 = 0;
      }
      *(unsigned char *)(*a4 + v7++) = v9;
    }
    while (v7 < a4[1] - *a4);
  }
  return result;
}

void sub_20F5EF03C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<signed char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  v11[0] = a2;
  v11[1] = a3;
  uint64_t result = std::vector<signed char>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      char v10 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v11, v7);
      uint64_t result = (void *)MIL::UInt1::GetInt((MIL::UInt1 *)&v10);
      if (result) {
        char v9 = *(unsigned char *)(a1 + v8++);
      }
      else {
        char v9 = 0;
      }
      *(unsigned char *)(*a4 + v7++) = v9;
    }
    while (v7 < a4[1] - *a4);
  }
  return result;
}

void sub_20F5EF0F8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t result = std::vector<MIL::Fp16>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      char v11 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v12, v8);
      uint64_t result = (void *)MIL::UInt1::GetInt((MIL::UInt1 *)&v11);
      if (result)
      {
        __int16 v9 = *(_WORD *)(a1 + 2 * v7++);
        uint64_t v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = v9;
      }
      else
      {
        uint64_t v10 = *a4;
        *(_WORD *)(*a4 + 2 * v8) = 0;
      }
      ++v8;
    }
    while (v8 < (a4[1] - v10) >> 1);
  }
  return result;
}

void sub_20F5EF1B8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Operators::Common::Shared::ConstExprs::EvaluateBitMask<float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t result = std::vector<float>::vector(a4, a3);
  if (a4[1] != *a4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      char v11 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v12, v7);
      uint64_t result = (void *)MIL::UInt1::GetInt((MIL::UInt1 *)&v11);
      if (result) {
        int v9 = *(_DWORD *)(a1 + 4 * v8++);
      }
      else {
        int v9 = 0;
      }
      uint64_t v10 = *a4;
      *(_DWORD *)(*a4 + 4 * v7++) = v9;
    }
    while (v7 < (a4[1] - v10) >> 2);
  }
  return result;
}

void sub_20F5EF274(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl::ValidateArgsAndTypeConstraints((MIL::Operators::Common::ios16::ConstExprs::SparseToDense::Impl *)a1);
  return a1;
}

void sub_20F5EF2D4(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateConvTranspose(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConv(MIL::IRConstantDimension **a1, long long *a2, void *a3)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConv(a1, (uint64_t)&v3, a3);
}

void sub_20F5EF34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceConvTranspose(MIL::IRConstantDimension **a1, long long *a2, void *a3)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConvTranspose(a1, (uint64_t)&v3, a3);
}

void sub_20F5EF3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::Conv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5F1690(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x468]);
  unint64_t v3 = STACK[0x408];
  STACK[0x408] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x388]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x388]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    STACK[0x4E8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x420], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x460], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ConvTranspose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5F4660(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x478]);
  unint64_t v3 = STACK[0x418];
  STACK[0x418] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x388]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x388]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x430], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x470], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, (uint64_t)v4, a3);
}

void sub_20F5F52D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAdd(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd(a1, v4, a3);
}

void sub_20F5F533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceEqual(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual(a1, (uint64_t)v4, a3);
}

void sub_20F5F53A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloorDiv(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv(a1, v4, a3);
}

void sub_20F5F540C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreater(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater(a1, (uint64_t)v4, a3);
}

void sub_20F5F5474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreaterEqual(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual(a1, (uint64_t)v4, a3);
}

void sub_20F5F54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLess(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess(a1, (uint64_t)v4, a3);
}

void sub_20F5F5544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLessEqual(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual(a1, (uint64_t)v4, a3);
}

void sub_20F5F55AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalAnd(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd(a1, (uint64_t)v4, a3);
}

void sub_20F5F5614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalOr(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr(a1, (uint64_t)v4, a3);
}

void sub_20F5F567C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalXor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor(a1, (uint64_t)v4, a3);
}

void sub_20F5F56E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMaximum(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum(a1, v4, a3);
}

void sub_20F5F574C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMinimum(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum(a1, v4, a3);
}

void sub_20F5F57B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMod(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod(a1, v4, a3);
}

void sub_20F5F581C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMul(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul(a1, v4, a3);
}

void sub_20F5F5884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceNotEqual(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual(a1, (uint64_t)v4, a3);
}

void sub_20F5F58EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferencePow(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow(a1, v4, a3);
}

void sub_20F5F5954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRealDiv(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv(a1, v4, a3);
}

void sub_20F5F59BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSub(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub(a1, v4, a3);
}

void sub_20F5F5A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::ElementwiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5F69F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Add::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5F7FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ElementwiseBinaryBoolOutput::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5F938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v61 = *(void **)(v59 - 232);
  if (v61)
  {
    *(void *)(v59 - 224) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ElementwiseBinaryLogical::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FA4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v56 = *(void **)(v54 - 240);
  if (v56)
  {
    *(void *)(v54 - 232) = v56;
    operator delete(v56);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v54 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LogicalAnd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FB648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LogicalOr::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LogicalXor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FD928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Equal::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FEBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Greater::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F5FFEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::GreaterEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6011AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Less::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6024A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LessEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F603794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::NotEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F604A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  unint64_t v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::FloorDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F605F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Maximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F607580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Minimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F608B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Mod::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F60A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Mul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F60B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Pow::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F60CDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::RealDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F60E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sub::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F60F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCast(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(a1, (uint64_t)v4, a3);
}

void sub_20F60FFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAbs(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAbs(a1, v4, a3);
}

void sub_20F610064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcos(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcos(a1, v4, a3);
}

void sub_20F6100CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcosh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcosh(a1, v4, a3);
}

void sub_20F610134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsin(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsin(a1, v4, a3);
}

void sub_20F61019C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsinh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsinh(a1, v4, a3);
}

void sub_20F610204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtan(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtan(a1, v4, a3);
}

void sub_20F61026C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtanh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtanh(a1, v4, a3);
}

void sub_20F6102D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCast(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(a1, (uint64_t)v4, a3);
}

void sub_20F61033C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCeil(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCeil(a1, v4, a3);
}

void sub_20F6103A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceClip(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceClip(a1, v4, a3);
}

void sub_20F61040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCos(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCos(a1, v4, a3);
}

void sub_20F610474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCosh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCosh(a1, v4, a3);
}

void sub_20F6104DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp(a1, v4, a3);
}

void sub_20F610544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp2(a1, v4, a3);
}

void sub_20F6105AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloor(a1, v4, a3);
}

void sub_20F610614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceInverse(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceInverse(a1, v4, a3);
}

void sub_20F61067C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLog(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLog(a1, v4, a3);
}

void sub_20F6106E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalNot(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalNot(a1, v4, a3);
}

void sub_20F61074C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRound(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRound(a1, v4, a3);
}

void sub_20F6107B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRsqrt(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRsqrt(a1, v4, a3);
}

void sub_20F61081C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSign(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSign(a1, v4, a3);
}

void sub_20F610884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSin(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSin(a1, v4, a3);
}

void sub_20F6108EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSinh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSinh(a1, v4, a3);
}

void sub_20F610954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSqrt(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSqrt(a1, v4, a3);
}

void sub_20F6109BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSquare(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSquare(a1, v4, a3);
}

void sub_20F610A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTan(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTan(a1, v4, a3);
}

void sub_20F610A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTanh(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTanh(a1, v4, a3);
}

void sub_20F610AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceThreshold(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceThreshold(a1, v4, a3);
}

void sub_20F610B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::Cast::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F611BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a70);
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ElementwiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F612DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Acos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F613F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Acosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Asin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F616188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Asinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6172C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Atan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F618400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Atanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Ceil::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Clip::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a69);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  unint64_t v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(void *)(v69 - 120) = v71;
    operator delete(v71);
  }
  char v72 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Cos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61CD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Cosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ElementwiseUnaryWithEpsilon::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F61F18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  unint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  char v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Inverse::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F620544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  unint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  char v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Log::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  unint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  char v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Rsqrt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F622CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  unint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  char v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ElementwiseUnaryWithInt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F623EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Abs::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6250F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Exp2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6262FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sign::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F627508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Square::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F628714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Threshold::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F629AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Exp::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Floor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Round::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62E0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F62F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Sqrt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F630328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Tan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F631464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Tanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6325A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  int v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LogicalNot::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F633370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a40);
  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8))(a36);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v59 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a39, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateGather(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::Operators::Common::Shared::ValidateBaseGatherWithAxis(this, (MIL::ValidationResult *)v23);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v23))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v21, (uint64_t)v23);
    v21[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v22 = v24;
    MIL::ValidationError::ValidationError(exception, v21);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  BOOL v6 = IsParameterSet;
  if ((v20 & 0x80000000) == 0)
  {
    if (IsParameterSet) {
      goto LABEL_4;
    }
LABEL_13:
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (!v6) {
    goto LABEL_13;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  int v11 = MIL::IRTensorValueType::Rank(v10);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v10 + 104))(v10)
    || v8 <= v11 && v8 >= -v11)
  {
    goto LABEL_13;
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v13 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v17 = *LocationPtr;
  unint64_t v18 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "'batch_dims' must be within range (-indices_rank - 1, indices_rank] (exclusive)");
  MIL::ValidationResult::ValidationResult(a2, &v17, 315, v15);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
LABEL_14:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v23);
}

void sub_20F6338EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v23 - 104));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateGatherNd(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v35, "batch_dims");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v35);
  BOOL v6 = IsParameterSet;
  if (v36 < 0)
  {
    operator delete((void *)v35[0]);
    if (!v6)
    {
LABEL_34:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "batch_dims");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  int v9 = v8;
  if (v36 < 0)
  {
    operator delete((void *)v35[0]);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v17 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v33 = *LocationPtr;
    uint64_t v34 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValidationResult::ValidationResult(a2, &v33, 315, v31);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    uint64_t v15 = v34;
    if (v34) {
      goto LABEL_33;
    }
    return;
  }
  if (v8 < 0) {
    goto LABEL_18;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v35, "indices");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v36 < 0) {
    operator delete((void *)v35[0]);
  }
  int v12 = MIL::IRTensorValueType::Rank(v11);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v11 + 104))(v11) && v9 >= v12)
  {
    int v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v14 = (std::__shared_weak_count *)v13[1];
    uint64_t v29 = *v13;
    char v30 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'batch_dims' must be smaller than indices_rank.");
    MIL::ValidationResult::ValidationResult(a2, &v29, 315, __p);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = v30;
    if (!v30) {
      return;
    }
LABEL_33:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "x");
  unint64_t v18 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  __int16 v19 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v18);
  if (v36 < 0) {
    operator delete((void *)v35[0]);
  }
  int v20 = MIL::IRTensorValueType::Rank(v19);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v19 + 104))(v19) || v9 <= v20) {
    goto LABEL_34;
  }
  uint64_t v21 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v22 = (std::__shared_weak_count *)v21[1];
  uint64_t v25 = *v21;
  int v26 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "'batch_dims' must be no larger than input_rank.");
  MIL::ValidationResult::ValidationResult(a2, &v25, 315, v23);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v15 = v26;
  if (v26) {
    goto LABEL_33;
  }
}

void sub_20F633C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::BaseGather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6349F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 128));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 224), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseGatherWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F635C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v65 - 128));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v65 - 224), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Gather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F637008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v67 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v67 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::GatherAlongAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F638340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v65 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v65 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::GatherNd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F639678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v65 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v65 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateUpsampleBilinear(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "half_pixel_centers");
  if (MIL::IROperation::IsParameterSet((uint64_t)this, v18))
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "half_pixel_centers");
    Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
    if (MIL::IRValue::GetScalar<BOOL>(ParameterValue))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "align_corners");
      BOOL v6 = (const void *)MIL::IROperation::GetParameterValue(this);
      int v7 = MIL::IRValue::GetScalar<BOOL>(v6);
      if (v15 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      int v7 = 0;
    }
    if (v17 < 0) {
      operator delete(v16);
    }
  }
  else
  {
    int v7 = 0;
  }
  if (v19 < 0)
  {
    operator delete((void *)v18[0]);
    if (v7) {
      goto LABEL_11;
    }
LABEL_18:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!v7) {
    goto LABEL_18;
  }
LABEL_11:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v9 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v12 = *LocationPtr;
  int v13 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "half_pixel_centers is not supported when align_corners is true.");
  MIL::ValidationResult::ValidationResult(a2, &v12, 315, v10);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_20F639CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCropResize(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCropResize(a1, (uint64_t)v4, a3);
}

void sub_20F639D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceAffine(MIL::IRConstantDimension **a1, long long *a2, void *a3)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceAffine(a1, (uint64_t)&v3, a3);
}

void sub_20F639DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::Affine::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F63C224(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x4B0]);
  unint64_t v3 = STACK[0x408];
  STACK[0x408] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x400]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x400]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x528];
  if (STACK[0x528])
  {
    STACK[0x530] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x410], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4A8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CropResize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F63EDBC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x3B8]);
  unint64_t v3 = STACK[0x398];
  STACK[0x398] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2F8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2F8]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x370], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Resample::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F64251C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x5D8]);
  unint64_t v3 = STACK[0x4E0];
  STACK[0x4E0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x4D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4D8]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x650];
  if (STACK[0x650])
  {
    STACK[0x658] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x5D0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ResizeBilinear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F644730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a71);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  uint64_t v73 = *(void **)(v71 - 128);
  if (v73)
  {
    *(void *)(v71 - 120) = v73;
    operator delete(v73);
  }
  size_t v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::UpsampleBilinear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F646798(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x330]);
  unint64_t v3 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2C0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2C0]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x328], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLinear(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear(a1, v4, a3);
}

void sub_20F64701C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceMatMul(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMatMul(a1, (uint64_t)v4, a3);
}

void sub_20F647084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceEinsum(MIL::IRConstantDimension **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  BOOL v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceEinsum(a1, &v5, a3, a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F6470EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::Einsum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F648060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a61);
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  uint64_t v63 = *(void **)(v61 - 128);
  if (v63)
  {
    *(void *)(v61 - 120) = v63;
    operator delete(v63);
  }
  uint64_t v64 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v64;
    operator delete(v64);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Linear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F649D88(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x338]);
  unint64_t v2 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x2B8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2B8]);
  }
  uint64_t v3 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x330], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::MatMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F64B9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x288]);
  unint64_t v73 = STACK[0x200];
  STACK[0x200] = 0;
  if (v73) {
    (*(void (**)(unint64_t))(*(void *)v73 + 8))(v73);
  }
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  if (__p) {
    operator delete(__p);
  }
  size_t v74 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x208], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateCall(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *, const MIL::IROperation *))(*(void *)this + 96))(this, a2);
  BOOL v6 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(v5 + 64) + 72))();
  if (!v6)
  {
LABEL_29:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v34 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v121 = *LocationPtr;
    uint64_t v122 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "The operation is not nested within a program.");
    MIL::ValidationResult::ValidationResult(a3, &v121, 400, v119);
    if (v120 < 0) {
      operator delete(v119[0]);
    }
    int v35 = v122;
    if (!v122) {
      return;
    }
LABEL_40:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    return;
  }
  int v7 = v6;
  uint64_t v8 = *v6;
  if (!v9)
  {
    while (1)
    {
      uint64_t v31 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v8 + 72))(v7);
      if (!v31) {
        goto LABEL_29;
      }
      int v7 = v31;
      uint64_t v8 = *v31;
      int v9 = v32;
      if (v10)
      {
        if (v32) {
          break;
        }
      }
      else
      {
        if (v9) {
          break;
        }
      }
    }
  }
  if (!v10)
  {
    char v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    std::string v37 = (std::__shared_weak_count *)v36[1];
    uint64_t v117 = *v36;
    unint64_t v118 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v115, "The operation is not nested within a function.");
    MIL::ValidationResult::ValidationResult(a3, &v117, 400, v115);
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    int v35 = v118;
    if (!v118) {
      return;
    }
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  uint64_t Attribute = (const void *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  MIL::IRValue::GetScalar<std::string>(Attribute, &v114);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (!(*(uint64_t (**)(void *, std::string *))(*(void *)v9 + 56))(v9, &v114))
  {
    uint64_t v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v39 = (std::__shared_weak_count *)v38[1];
    uint64_t v112 = *v38;
    std::string::size_type v113 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v110, "The called function does not exist.");
    MIL::ValidationResult::ValidationResult(a3, &v112, 209, v110);
    if (v111 < 0) {
      operator delete(v110[0]);
    }
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
    }
    goto LABEL_175;
  }
  uint64_t Function = MIL::IRProgram::GetFunction((uint64_t)v9);
  int v13 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
  uint64_t v14 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(void *)this + 160))(this);
  uint64_t v15 = v14;
  if (v13[2] != *(const void ***)(v14 + 16))
  {
    char v40 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    std::string::size_type v41 = v40[1];
    v130.__r_.__value_.__r.__words[0] = *v40;
    v130.__r_.__value_.__l.__size_ = v41;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    std::string::push_back(&v131, 46);
    __p[0] = v131;
    memset(&v131, 0, sizeof(v131));
    MIL::ValidationResult::ValidationResult(v108, &v130, 300, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v131.__r_.__value_.__l.__data_);
    }
    if (v130.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
    }
    goto LABEL_123;
  }
  unint64_t v18 = *v13;
  char v16 = v13 + 1;
  char v17 = v18;
  if (v18 == (const void **)v16)
  {
LABEL_22:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v108);
    goto LABEL_123;
  }
  uint64_t v19 = v14 + 8;
  while (1)
  {
    uint64_t v20 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v15, v17 + 4);
    if (v19 == v20)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v131.__r_.__value_.__s.__data_[0] = 34;
      uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)&v131, 1);
      int v43 = *((char *)v17 + 55);
      if (v43 >= 0) {
        uint64_t v44 = (uint64_t)(v17 + 4);
      }
      else {
        uint64_t v44 = (uint64_t)v17[4];
      }
      if (v43 >= 0) {
        uint64_t v45 = *((unsigned __int8 *)v17 + 55);
      }
      else {
        uint64_t v45 = (uint64_t)v17[5];
      }
      uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      std::string v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\" is a required argument to function ", 37);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v114;
      }
      else {
        uint64_t v48 = (std::string *)v114.__r_.__value_.__r.__words[0];
      }
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v114.__r_.__value_.__l.__size_;
      }
      unint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, size);
      v131.__r_.__value_.__s.__data_[0] = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)&v131, 1);
      int v51 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
      std::string::size_type v52 = v51[1];
      v130.__r_.__value_.__r.__words[0] = *v51;
      v130.__r_.__value_.__l.__size_ = v52;
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_69;
    }
    uint64_t v21 = *(MIL::IRArgument ***)(v20 + 56);
    if (*(void *)(v20 + 64) - (void)v21 != 16)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter \"", 11);
      int v54 = *((char *)v17 + 55);
      if (v54 >= 0) {
        uint64_t v55 = (uint64_t)(v17 + 4);
      }
      else {
        uint64_t v55 = (uint64_t)v17[4];
      }
      if (v54 >= 0) {
        uint64_t v56 = *((unsigned __int8 *)v17 + 55);
      }
      else {
        uint64_t v56 = (uint64_t)v17[5];
      }
      uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
      int v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"\" to function ", 14);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v59 = &v114;
      }
      else {
        uint64_t v59 = (std::string *)v114.__r_.__value_.__r.__words[0];
      }
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v60 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v60 = v114.__r_.__value_.__l.__size_;
      }
      uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" may not be variadic.", 21);
      char v62 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
      std::string::size_type v63 = v62[1];
      v130.__r_.__value_.__r.__words[0] = *v62;
      v130.__r_.__value_.__l.__size_ = v63;
      if (v63) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
      }
LABEL_69:
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v108, &v130, 300, &v131);
      goto LABEL_116;
    }
    int v22 = *v21;
    if ((*(unsigned int (**)(MIL::IRArgument *))(*(void *)*v21 + 24))(*v21))
    {
      uint64_t Value = MIL::IRArgument::GetValue(v22);
      char v24 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)Value + 32))(Value);
    }
    else
    {
      uint64_t Name = MIL::IRArgument::GetName(v22);
      char v24 = (const MIL::IRValueType *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 8) + 24))((char *)this + 64, Name, 1);
    }
    uint64_t v27 = v24;
    if ((MIL::IsEqualOrStrongerType((MIL *)v17[7], v24, v25) & 1) == 0) {
      break;
    }
    uint64_t v28 = (const void **)v17[1];
    if (v28)
    {
      do
      {
        uint64_t v29 = (const void ***)v28;
        uint64_t v28 = (const void **)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        uint64_t v29 = (const void ***)v17[2];
        BOOL v30 = *v29 == v17;
        char v17 = (const void **)v29;
      }
      while (!v30);
    }
    char v17 = (const void **)v29;
    if (v29 == v16) {
      goto LABEL_22;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter '", 11);
  int v65 = *((char *)v17 + 55);
  if (v65 >= 0) {
    uint64_t v66 = (uint64_t)(v17 + 4);
  }
  else {
    uint64_t v66 = (uint64_t)v17[4];
  }
  if (v65 >= 0) {
    uint64_t v67 = *((unsigned __int8 *)v17 + 55);
  }
  else {
    uint64_t v67 = (uint64_t)v17[5];
  }
  uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"' has incompatible type for function '", 38);
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v70 = &v114;
  }
  else {
    uint64_t v70 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v71 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v71 = v114.__r_.__value_.__l.__size_;
  }
  char v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
  unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"'. Expected ", 12);
  (*(void (**)(std::string *__return_ptr))(*(void *)v17[7] + 56))(&v131);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v74 = &v131;
  }
  else {
    size_t v74 = (std::string *)v131.__r_.__value_.__r.__words[0];
  }
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v75 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v75 = v131.__r_.__value_.__l.__size_;
  }
  unint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
  uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"; got ", 6);
  (*(void (**)(std::string *__return_ptr, const MIL::IRValueType *))(*(void *)v27 + 56))(&v130, v27);
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v78 = &v130;
  }
  else {
    size_t v78 = (std::string *)v130.__r_.__value_.__r.__words[0];
  }
  if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v79 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v79 = v130.__r_.__value_.__l.__size_;
  }
  size_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  LOBYTE(v123) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)&v123, 1);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  uint64_t v81 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
  std::string::size_type v82 = v81[1];
  v130.__r_.__value_.__r.__words[0] = *v81;
  v130.__r_.__value_.__l.__size_ = v82;
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(v108, &v130, 304, &v131);
LABEL_116:
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (v130.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
  }
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                 + 24);
  __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v128 < 0) {
    operator delete(v127);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](v129);
  if (((*(uint64_t (**)(void *))(v108[0] + 16))(v108) & 1) == 0) {
    goto LABEL_174;
  }
LABEL_123:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v108);
  uint64_t v83 = MIL::IRProgram::GetFunction((uint64_t)v9);
  (*(void (**)(std::string *__return_ptr))(*(void *)v83 + 160))(&v131);
  size_t v84 = (void *)(*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(void *)this + 176))(this);
  std::string::size_type v85 = v131.__r_.__value_.__r.__words[0];
  if ((uint64_t)(v131.__r_.__value_.__l.__size_ - v131.__r_.__value_.__r.__words[0]) >> 3 == (uint64_t)(v84[1] - *v84) >> 4)
  {
    if (v131.__r_.__value_.__l.__size_ == v131.__r_.__value_.__r.__words[0])
    {
LABEL_129:
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v108);
    }
    else
    {
      uint64_t v86 = 0;
      unint64_t v87 = 0;
      while (1)
      {
        unint64_t v88 = *(MIL **)(v85 + 8 * v87);
        uint64_t Type = (const MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v84 + v86));
        if ((MIL::IsEqualOrStrongerType(v88, Type, v90) & 1) == 0) {
          break;
        }
        ++v87;
        std::string::size_type v85 = v131.__r_.__value_.__r.__words[0];
        v86 += 16;
        if (v87 >= (uint64_t)(v131.__r_.__value_.__l.__size_ - v131.__r_.__value_.__r.__words[0]) >> 3) {
          goto LABEL_129;
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output at index ", 16);
      uint64_t v93 = (void *)std::ostream::operator<<();
      int v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" has incompatible type for function '", 37);
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v95 = &v114;
      }
      else {
        int v95 = (std::string *)v114.__r_.__value_.__r.__words[0];
      }
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v96 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v96 = v114.__r_.__value_.__l.__size_;
      }
      std::string::size_type v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
      uint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"'. Expected ", 12);
      (*(void (**)(std::string *__return_ptr, MIL *))(*(void *)v88 + 56))(&v130, v88);
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v99 = &v130;
      }
      else {
        char v99 = (std::string *)v130.__r_.__value_.__r.__words[0];
      }
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v100 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v100 = v130.__r_.__value_.__l.__size_;
      }
      uint64_t v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
      uint64_t v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"; got ", 6);
      (*(void (**)(void **__return_ptr, const MIL::IRValueType *))(*(void *)Type + 56))(&v123, Type);
      if ((v125 & 0x80u) == 0) {
        std::string::size_type v103 = &v123;
      }
      else {
        std::string::size_type v103 = v123;
      }
      if ((v125 & 0x80u) == 0) {
        uint64_t v104 = v125;
      }
      else {
        uint64_t v104 = (uint64_t)v124;
      }
      unint64_t v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)v103, v104);
      v132[0] = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v132, 1);
      if ((char)v125 < 0) {
        operator delete(v123);
      }
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      uint64_t v106 = MIL::IRObject::GetLocationPtr(this);
      unsigned int v107 = *(std::__shared_weak_count **)(v106 + 8);
      std::string::size_type v123 = *(void **)v106;
      unint64_t v124 = v107;
      if (v107) {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v108, &v123, 313, &v130);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v130.__r_.__value_.__l.__data_);
      }
      if (v124) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v124);
      }
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v128 < 0) {
        operator delete(v127);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x21056C620](v129);
    }
  }
  else
  {
    uint64_t v91 = MIL::IRObject::GetLocationPtr(this);
    std::vector<int>::pointer v92 = *(std::__shared_weak_count **)(v91 + 8);
    std::string::size_type v123 = *(void **)v91;
    unint64_t v124 = v92;
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    std::string::push_back(&v130, 46);
    __p[0] = v130;
    memset(&v130, 0, sizeof(v130));
    MIL::ValidationResult::ValidationResult(v108, &v123, 310, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    if (v124) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v124);
    }
  }
  if (v131.__r_.__value_.__r.__words[0])
  {
    v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(void *))(v108[0] + 16))(v108))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v108);
    MIL::ValidationResult::ValidationResult(a3);
  }
  else
  {
LABEL_174:
    MIL::MILResult::MILResult((std::string *)a3, (uint64_t)v108);
    *(void *)a3 = &unk_26C25DB50;
    *((_DWORD *)a3 + 12) = v109;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v108);
  }
LABEL_175:
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
}

void sub_20F64CF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,std::__shared_weak_count *a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (*(char *)(v57 - 121) < 0) {
    operator delete(*(void **)(v57 - 144));
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::ostringstream::~ostringstream((uint64_t)&a52);
  uint64_t v59 = *(void **)(v57 - 120);
  if (v59)
  {
    *(void *)(v57 - 112) = v59;
    operator delete(v59);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Call::Make(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v3[0] = 0;
  v3[1] = 0;
  v2[0] = 0;
  v2[1] = 0;
  uint64_t v7 = 0;
  v8[0] = &unk_26C25E4A8;
  v8[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateCall;
  void v8[3] = v8;
  MIL::IROperator::Make(__p, 0, -1, 1, -1, v3, v2, (uint64_t)v8, (uint64_t)v6);
}

void sub_20F64D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  std::__function::__value_func<std::string ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&a28);
  uint64_t v30 = *v28;
  *uint64_t v28 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C25FCD8;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FCD8;
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  uint64_t Attribute = (const void *)MIL::IRObject::GetAttribute(a1, (unsigned __int8 *)__p);
  MIL::IRValue::GetScalar<std::string>(Attribute, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F64D680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::target_type()
{
}

void MIL::Operators::Common::ios16::BatchNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F64F76C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x460]);
  unint64_t v2 = STACK[0x3E8];
  STACK[0x3E8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x3E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3E0]);
  }
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3F0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x458], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::InstanceNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F651C10(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x340]);
  unint64_t v2 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E0]);
  }
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2F0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x338], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::L2Norm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6536F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x220]);
  if (a70) {
    (*(void (**)(uint64_t))(*(void *)a70 + 8))(a70);
  }
  if (a69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a69);
  }
  unint64_t v73 = *(void **)(v71 - 128);
  if (v73)
  {
    *(void *)(v71 - 120) = v73;
    operator delete(v73);
  }
  size_t v74 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LayerNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F65536C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x290]);
  unint64_t v3 = STACK[0x228];
  STACK[0x228] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x220]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x220]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LocalResponseNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F657168(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2D0]);
  unint64_t v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x270], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBasePool(MIL::IRConstantDimension **a1, long long *a2, void *a3)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool(a1, (uint64_t)&v3, a3);
}

void sub_20F657988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::BasePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F659480(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x350]);
  unint64_t v2 = STACK[0x2D8];
  STACK[0x2D8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x2D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D0]);
  }
  long long v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F65B95C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x350]);
  unint64_t v3 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2C0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2C0]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::AvgPool::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseAvgPool::Make();
}

void sub_20F65C368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::L2Pool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C25E4A8;
  v2[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateL2Pool;
  v2[3] = v2;
  MIL::Operators::Common::ios16::BasePool::Make();
}

void sub_20F65C448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::MaxPool::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BasePool::Make();
}

void sub_20F65C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prob");
}

void sub_20F65C5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::anonymous namespace'::ValueTypeInferenceRandomOpHelper(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, a4);
  uint64_t v8 = MIL::IRValueType::AsTensorType(SingleValueType);
  (*(void (**)(uint64_t))(*(void *)v8 + 88))(v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  int v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  memset(v33, 0, sizeof(v33));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v33, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  char v32 = 0;
  if ((*(uint64_t (**)(void))(**(void **)v33[0] + 16))())
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "shape");
    Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v29);
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    int v13 = (std::__shared_weak_count *)a2[1];
    uint64_t v27 = *a2;
    uint64_t v28 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(SingleValue, a1, (MIL::IRDimension ***)v33, &v27, v29);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v29;
    char v32 = v30;
    v29[1] = 0;
    uint64_t v30 = 0;
    v29[0] = 0;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  else
  {
    uint64_t v14 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    uint64_t v15 = v14;
    char v16 = (char *)__p[1];
    if (__p[1] >= v32)
    {
      int64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = (v32 - (char *)__p[0]) >> 2;
      if (v19 <= v18 + 1) {
        unint64_t v19 = v18 + 1;
      }
      if ((unint64_t)(v32 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, v20);
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = (uint64_t *)&v21[8 * v18];
      uint64_t v23 = &v21[8 * v20];
      uint64_t *v22 = v15;
      char v17 = v22 + 1;
      uint64_t v25 = (char *)__p[0];
      char v24 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--int v22 = v26;
        }
        while (v24 != v25);
        char v24 = (char *)__p[0];
      }
      __p[0] = v22;
      __p[1] = v17;
      char v32 = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)__p[1] = v14;
      char v17 = v16 + 8;
    }
    __p[1] = v17;
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F65C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomCategorical(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  __p[1] = 0;
  uint64_t v17 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v14, "size");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v14);
  uint64_t v10 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t v11 = (MIL::MILContext *)MIL::IRValue::GetScalar<int>(v10);
  if (v15 < 0) {
    operator delete(v14);
  }
  uint64_t v12 = a2[1];
  v13[0] = *a2;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(v11, a1, v13, (uint64_t *)__p, &v14);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F65CAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomNormal(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
}

void sub_20F65CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomUniform(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "low");
}

void sub_20F65CCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::RandomBernoulli::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F65DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a63);
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  int v65 = *(void **)(v63 - 128);
  if (v65)
  {
    *(void *)(v63 - 120) = v65;
    operator delete(v65);
  }
  uint64_t v66 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v66;
    operator delete(v66);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::RandomCategorical::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F65EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a55);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  unint64_t v73 = *(void **)(v71 - 128);
  if (v73)
  {
    *(void *)(v71 - 120) = v73;
    operator delete(v73);
  }
  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::RandomNormal::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6605D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,void **a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x200]);
  if (a62) {
    (*(void (**)(uint64_t))(*(void *)a62 + 8))(a62);
  }
  if (a61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a61);
  }
  size_t v74 = *(void **)(v72 - 128);
  if (v74)
  {
    *(void *)(v72 - 120) = v74;
    operator delete(v74);
  }
  std::string::size_type v75 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::RandomUniform::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F661CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,void **a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x200]);
  if (a62) {
    (*(void (**)(uint64_t))(*(void *)a62 + 8))(a62);
  }
  if (a61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a61);
  }
  size_t v74 = *(void **)(v72 - 128);
  if (v74)
  {
    *(void *)(v72 - 120) = v74;
    operator delete(v74);
  }
  std::string::size_type v75 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRNN(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRnn(a1, v4, a3);
}

void sub_20F662340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLSTM(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLstm(a1, v4, a3);
}

void sub_20F6623A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceGRU(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGru(a1, v4, a3);
}

void sub_20F662410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::GRU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6652D8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x6B0]);
  unint64_t v3 = STACK[0x610];
  STACK[0x610] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x5F8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5F8]);
  }
  unint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6A8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::LSTM::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F66B200(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0xBE0]);
  unint64_t v3 = STACK[0xAC0];
  STACK[0xAC0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0xA98]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xA98]);
  }
  unint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xBD8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::RNN::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F66F8E8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x630]);
  unint64_t v3 = STACK[0x5A0];
  STACK[0x5A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x588]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x588]);
  }
  unint64_t v4 = *(void **)(v1 - 240);
  if (v4)
  {
    *(void *)(v1 - 232) = v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v1 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x628], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseReduction(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseReduction(a1, (uint64_t)v4, a3);
}

void sub_20F670834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(a1, v4, a3);
}

void sub_20F67089C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::BaseArgReduction::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F671818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a63);
  if (a54) {
    (*(void (**)(void *))(*(void *)a54 + 8))(a54);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  int v65 = *(void **)(v63 - 232);
  if (v65)
  {
    *(void *)(v63 - 224) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceArgmax::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseArgReduction::Make();
}

void sub_20F671DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceArgmin::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseArgReduction::Make();
}

void sub_20F671E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseReduction::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F67309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x220]);
  if (a65) {
    (*(void (**)(uint64_t))(*(void *)a65 + 8))(a65);
  }
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  size_t v74 = *(void **)(v72 - 112);
  if (v74)
  {
    *(void *)(v72 - 104) = v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceL1Norm::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F67376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceL2Norm::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceLogSum::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F6738D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceLogSumExp::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMax::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMean::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceMin::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceProd::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceSum::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReduceSumSquare::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseReduction::Make();
}

void sub_20F673DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseScatter::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F675510(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2E0]);
  unint64_t v3 = STACK[0x270];
  STACK[0x270] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x268]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x268]);
  }
  unint64_t v4 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v5;
    operator delete(v5);
  }
  char v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x278], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::BaseScatterWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6775AC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2F0]);
  unint64_t v3 = STACK[0x270];
  STACK[0x270] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x268]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x268]);
  }
  unint64_t v4 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v5;
    operator delete(v5);
  }
  char v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x278], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2E8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Scatter::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseScatterWithAxis::Make();
}

void sub_20F677ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScatterAlongAxis::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseScatterWithAxis::Make();
}

void sub_20F677F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ScatterNd::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios16::BaseScatter::Make();
}

void sub_20F67803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateTopk(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  char v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "k");
  uint64_t v9 = MIL::IROperation::GetParameterValue(this);
  int v10 = *(_DWORD *)MIL::IRValue::TryGetScalar<int>(v9);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v12 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v13 = *LocationPtr;
  uint64_t v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateTopkInputs(v6, v8, v10, &v13, a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_20F678188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceFillLike(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "ref_tensor");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  uint64_t v7 = MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 88))(v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  __p[1] = 0;
  uint64_t v11 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F67833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceTopk(MIL::IRConstantDimension **a1, long long *a2, void *a3)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::Operators::Common::Shared::ValueTypeInferenceTopkCommon(a1, (uint64_t *)&v3, a3);
}

void sub_20F6783B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::Cumsum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6794F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x208]);
  if (a57) {
    (*(void (**)(uint64_t))(*(void *)a57 + 8))(a57);
  }
  if (a56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a56);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::FillLike::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F67A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v56 - 112));
  if (a45) {
    (*(void (**)(uint64_t))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v56 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::NonMaximumSuppression::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F67CAC8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x3A0]);
  uint64_t v3 = *(void *)(v1 - 128);
  *(void *)(v1 - 128) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2F0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2F0]);
  }
  unint64_t v4 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x330], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x398], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Topk::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F67DE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  uint64_t v54 = *(void *)(v52 - 104);
  *(void *)(v52 - 104) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *v51;
  *int v51 = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v52 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v52 - 208), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateReshape(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v59, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  char v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "shape");
  uint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "shape");
  Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v59, 0);
  int v10 = (MIL::IRValue *)ParameterValue;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if (!v10)
    {
LABEL_34:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!ParameterValue)
  {
    goto LABEL_34;
  }
  uint64_t v11 = (uint64_t *)MIL::IRValue::AsTensor(v10);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>(v11);
  uint64_t v58 = v12;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) >= 6)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v55 = *LocationPtr;
    uint64_t v56 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v55, 315, v53);
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    char v15 = v56;
    if (!v56) {
      return;
    }
LABEL_59:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    return;
  }
  if (!v58) {
    goto LABEL_62;
  }
  unint64_t v16 = 0;
  uint64_t v17 = (int *)Data;
  uint64_t v18 = 4 * v58;
  do
  {
    int v19 = *v17++;
    if (v19 == -1) {
      ++v16;
    }
    v18 -= 4;
  }
  while (v18);
  if (v16 >= 2)
  {
    unint64_t v20 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v21 = (std::__shared_weak_count *)v20[1];
    uint64_t v51 = *v20;
    uint64_t v52 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Only 1 dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
    MIL::ValidationResult::ValidationResult(a2, &v51, 315, v49);
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    char v15 = v52;
    if (v52) {
      goto LABEL_59;
    }
  }
  else
  {
LABEL_62:
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6)
      || !MIL::Validation::IsZeroOutOfRangeForReshape(&Data, v6))
    {
      goto LABEL_34;
    }
    uint64_t v22 = 4 * v58;
    while (v22)
    {
      int v23 = *(_DWORD *)(Data - 4 + v22);
      v22 -= 4;
      if (!v23)
      {
        uint64_t v24 = Data + v22 + 4;
        goto LABEL_36;
      }
    }
    uint64_t v24 = Data;
LABEL_36:
    uint64_t v25 = (v24 - Data) >> 2;
    uint64_t v26 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v27 = (std::__shared_weak_count *)v26[1];
    uint64_t v47 = *v26;
    uint64_t v48 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v41, v25 + 1);
    uint64_t v28 = std::string::insert(&v41, 0, "Input shape must be at least rank ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v30 = std::string::append(&v42, " for target dim ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, v25);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v32 = &v40;
    }
    else {
      char v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    uint64_t v34 = std::string::append(&v43, (const std::string::value_type *)v32, size);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    char v36 = std::string::append(&v44, " to be set to 0 ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = std::string::append(&v59, "(copy the dim at the same index from x's shape).");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    std::string::size_type v46 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v47, 315, __p);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    char v15 = v48;
    if (v48) {
      goto LABEL_59;
    }
  }
}

void sub_20F67E574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v50 - 57) < 0) {
    operator delete(*(void **)(v50 - 80));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshape(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(a1, v4, a3);
}

void sub_20F67E6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios16::CustomValidators::ValidateReshapeLike@<X0>(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  MIL::Validation::OpToTypeInferenceParams(this, (uint64_t)v15, (MIL::ValidationResult *)v13);
  if ((*(uint64_t (**)(void *))(v13[0] + 16))(v13))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v13);
    std::string __p = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v6 = LocationPtr[1];
    *(void *)&long long v8 = *LocationPtr;
    *((void *)&v8 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
    if ((*(uint64_t (**)(void *))(v13[0] + 16))(v13))
    {
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v13);
      MIL::ValidationResult::ValidationResult(a2);
    }
    else
    {
      MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v13);
      *(void *)a2 = &unk_26C25DB50;
      *((_DWORD *)a2 + 12) = v14;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v13);
    }
    if (__p)
    {
      int v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v13);
    *(void *)a2 = &unk_26C25DB50;
    *((_DWORD *)a2 + 12) = v14;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v13);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v15);
}

void sub_20F67E8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v16 - 80);
  _Unwind_Resume(a1);
}

void anonymous namespace'::ValueTypeInferenceReshapeLike(long long *a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, void **a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  uint64_t v11 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  *a3 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "ref_tensors");
  int v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "begins");
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ends");
  int v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "end_masks");
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v134, "end_masks");
    char v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v134);
    if (!v15) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v16 = v15 + 40;
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v134.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v17 = *((void *)v12 + 5);
  uint64_t v18 = *((void *)v12 + 6);
  uint64_t v19 = (v18 - v17) >> 4;
  if (v19 != (uint64_t)(*((void *)v13 + 6) - *((void *)v13 + 5)) >> 4
    || v19 != (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 4
    || v16 && v19 != (uint64_t)(v16[1] - *v16) >> 4)
  {
    long long v133 = *a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    std::string::basic_string[abi:ne180100]<0>(v131, "ref_tensors must be the same length as begins, ends, and end_masks.");
    MIL::ValidationResult::ValidationResult(a5, &v133, 315, v131);
    if (v132 < 0) {
      operator delete(v131[0]);
    }
    uint64_t v56 = (std::__shared_weak_count *)*((void *)&v133 + 1);
    if (!*((void *)&v133 + 1)) {
      return;
    }
LABEL_79:
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    return;
  }
  uint64_t v93 = a1;
  int v94 = v16;
  std::vector<int>::pointer v92 = a5;
  if (v18 == v17)
  {
LABEL_70:
    uint64_t v50 = (char *)*a4;
    uint64_t v51 = (char *)a4[1];
    unint64_t v52 = 1;
    if (v50 == v51)
    {
      uint64_t v53 = v92;
      char v54 = v93;
    }
    else
    {
      uint64_t v53 = v92;
      char v54 = v93;
      do
      {
        uint64_t v55 = (*(uint64_t (**)(void))(**(void **)v50 + 16))();
        if (v55) {
          v52 *= (*(uint64_t (**)(uint64_t))(*(void *)v55 + 48))(v55);
        }
        v50 += 8;
      }
      while (v50 != v51);
    }
    uint64_t v57 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
    BOOL HasUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v57);
    uint64_t v59 = *(void *)v11;
    if (HasUnknownDims)
    {
      std::string::size_type v60 = (uint64_t *)(*(uint64_t (**)(uint64_t))(v59 + 96))(v11);
      uint64_t v61 = *v60;
      uint64_t v62 = v60[1];
      unint64_t v63 = 1;
      while (v61 != v62)
      {
        uint64_t v64 = (*(uint64_t (**)(void))(**(void **)v61 + 16))();
        if (v64) {
          v63 *= (*(uint64_t (**)(uint64_t))(*(void *)v64 + 48))(v64);
        }
        v61 += 8;
      }
      if (v52 < v63)
      {
        long long v98 = *v54;
        *(void *)char v54 = 0;
        *((void *)v54 + 1) = 0;
        std::string::basic_string[abi:ne180100]<0>(v96, "Input has a greater number of elements than the output tensor can have.");
        MIL::ValidationResult::ValidationResult(v53, &v98, 315, v96);
        if (v97 < 0) {
          operator delete(v96[0]);
        }
        uint64_t v56 = (std::__shared_weak_count *)*((void *)&v98 + 1);
        if (!*((void *)&v98 + 1)) {
          return;
        }
        goto LABEL_79;
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(v59 + 16))(v11) != v52)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
      int v65 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" into a shape of different size ", 32);
      std::ostream::operator<<();
      long long v101 = *v54;
      *(void *)char v54 = 0;
      *((void *)v54 + 1) = 0;
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v53, &v101, 315, &v99);
      if (v100 < 0) {
        operator delete(v99);
      }
      if (*((void *)&v101 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v101 + 1));
      }
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v104 < 0) {
        operator delete(v103);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x21056C620](&v105);
      return;
    }
    MIL::ValidationResult::ValidationResult(v53);
    return;
  }
  unint64_t v20 = 0;
  while (1)
  {
    uint64_t v21 = 16 * v20;
    uint64_t ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v17 + 16 * v20));
    int v23 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
    uint64_t v24 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v23 + 96))(v23);
    uint64_t v25 = *((void *)v13 + 5);
    if (v20 >= (*((void *)v13 + 6) - v25) >> 4) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v26 = (void *)v24;
    uint64_t Value = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v25 + 16 * v20));
    int v28 = MIL::IRValue::GetScalar<int>(Value);
    int v29 = v28;
    if (v28 < 0) {
      int v29 = v28 + ((v26[1] - *v26) >> 3);
    }
    uint64_t v30 = *((void *)v14 + 5);
    unint64_t __val = v20;
    if (v20 >= (*((void *)v14 + 6) - v30) >> 4) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    long long v31 = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v30 + 16 * v20));
    int v32 = MIL::IRValue::GetScalar<int>(v31);
    int v33 = v32;
    if (v32 < 0) {
      int v33 = v32 + ((v26[1] - *v26) >> 3);
    }
    if (v94)
    {
      if (__val >= (uint64_t)(v94[1] - *v94) >> 4) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v34 = (const void *)MIL::IRTypedArgument::GetValue(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(*v94 + v21));
      if (MIL::IRValue::GetScalar<BOOL>(v34))
      {
        if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v23 + 104))(v23) & 1) == 0)
        {
          long long v130 = *v93;
          *(void *)uint64_t v93 = 0;
          *((void *)v93 + 1) = 0;
          std::string::basic_string[abi:ne180100]<0>(v128, "If end_mask is true, the corresponding ref_tensor must have fixed rank.");
          MIL::ValidationResult::ValidationResult(v92, &v130, 315, v128);
          if (v129 < 0) {
            operator delete(v128[0]);
          }
          uint64_t v56 = (std::__shared_weak_count *)*((void *)&v130 + 1);
          if (*((void *)&v130 + 1)) {
            goto LABEL_79;
          }
          return;
        }
        int v33 = MIL::IRTensorValueType::Rank(v23);
      }
    }
    if (v29 < 0
      || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v23 + 104))(v23)
      && v29 >= (int)MIL::IRTensorValueType::Rank(v23))
    {
      long long v127 = *v93;
      *(void *)uint64_t v93 = 0;
      *((void *)v93 + 1) = 0;
      std::to_string(&v134, __val);
      uint64_t v66 = std::string::insert(&v134, 0, "begins[");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      uint64_t v68 = std::string::append(__p, "] is out of range");
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      std::string::size_type v126 = v68->__r_.__value_.__r.__words[2];
      long long v125 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v92, &v127, 315, &v125);
      if (SHIBYTE(v126) < 0) {
        operator delete((void *)v125);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v127 + 1);
      if (*((void *)&v127 + 1)) {
        goto LABEL_79;
      }
      return;
    }
    if (v33 < 0
      || (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v23 + 104))(v23)
      && v33 > (int)MIL::IRTensorValueType::Rank(v23))
    {
      long long v124 = *v93;
      *(void *)uint64_t v93 = 0;
      *((void *)v93 + 1) = 0;
      std::to_string(&v134, __val);
      uint64_t v70 = std::string::insert(&v134, 0, "ends[");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      uint64_t v72 = std::string::append(__p, "] is out of range");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      std::string::size_type v123 = v72->__r_.__value_.__r.__words[2];
      long long v122 = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v92, &v124, 315, &v122);
      if (SHIBYTE(v123) < 0) {
        operator delete((void *)v122);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v124 + 1);
      if (*((void *)&v124 + 1)) {
        goto LABEL_79;
      }
      return;
    }
    if (v29 > v33)
    {
      long long v121 = *v93;
      *(void *)uint64_t v93 = 0;
      *((void *)v93 + 1) = 0;
      std::to_string(&v114, __val);
      size_t v74 = std::string::insert(&v114, 0, "ends[");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      unint64_t v76 = std::string::append(&v115, "] is greater than begins[");
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v113, __val);
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v78 = &v113;
      }
      else {
        size_t v78 = (std::string *)v113.__r_.__value_.__r.__words[0];
      }
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v113.__r_.__value_.__l.__size_;
      }
      size_t v80 = std::string::append(&v116, (const std::string::value_type *)v78, size);
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v82 = std::string::append(&v117, "] ");
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      size_t v84 = std::string::append(&v118, "(or begin_masks[");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v134.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v112, __val);
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v86 = &v112;
      }
      else {
        uint64_t v86 = (std::string *)v112.__r_.__value_.__r.__words[0];
      }
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v87 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v87 = v112.__r_.__value_.__l.__size_;
      }
      unint64_t v88 = std::string::append(&v134, (const std::string::value_type *)v86, v87);
      long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      __int16 v90 = std::string::append(__p, "]).");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      std::string::size_type v120 = v90->__r_.__value_.__r.__words[2];
      long long v119 = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v92, &v121, 315, &v119);
      if (SHIBYTE(v120) < 0) {
        operator delete((void *)v119);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v112.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v116.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v115.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v121 + 1);
      if (*((void *)&v121 + 1)) {
        goto LABEL_79;
      }
      return;
    }
    if (v29) {
      break;
    }
LABEL_48:
    if (v29 < v33)
    {
      unint64_t v36 = v29;
      while (1)
      {
        if (v36 >= (uint64_t)(v26[1] - *v26) >> 3) {
          goto LABEL_164;
        }
        uint64_t v37 = *(void *)(*v26 + 8 * v36);
        if ((*(uint64_t (**)(uint64_t))(*(void *)v37 + 24))(v37)) {
          break;
        }
        long long v39 = a4[1];
        unint64_t v38 = (unint64_t)a4[2];
        if ((unint64_t)v39 >= v38)
        {
          uint64_t v41 = ((char *)v39 - (unsigned char *)*a4) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v38 - (void)*a4;
          uint64_t v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
            uint64_t v43 = v41 + 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v44);
          }
          else {
            uint64_t v45 = 0;
          }
          std::string::size_type v46 = &v45[8 * v41];
          *(void *)std::string::size_type v46 = v37;
          std::string v40 = v46 + 8;
          uint64_t v48 = (char *)*a4;
          uint64_t v47 = (char *)a4[1];
          if (v47 != *a4)
          {
            do
            {
              uint64_t v49 = *((void *)v47 - 1);
              v47 -= 8;
              *((void *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            uint64_t v47 = (char *)*a4;
          }
          *a4 = v46;
          a4[1] = v40;
          a4[2] = &v45[8 * v44];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *long long v39 = v37;
          std::string v40 = v39 + 1;
        }
        a4[1] = v40;
        if (v33 <= (int)++v36) {
          goto LABEL_69;
        }
      }
      long long v108 = *v93;
      *(void *)uint64_t v93 = 0;
      *((void *)v93 + 1) = 0;
      std::string::basic_string[abi:ne180100]<0>(v106, "The destination shape cannot have unknown dimensions.");
      MIL::ValidationResult::ValidationResult(v92, &v108, 315, v106);
      if (v107 < 0) {
        operator delete(v106[0]);
      }
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v108 + 1);
      if (*((void *)&v108 + 1)) {
        goto LABEL_79;
      }
      return;
    }
LABEL_69:
    unint64_t v20 = __val + 1;
    uint64_t v17 = *((void *)v12 + 5);
    if (__val + 1 >= (*((void *)v12 + 6) - v17) >> 4) {
      goto LABEL_70;
    }
  }
  unint64_t v35 = 0;
  while (1)
  {
    if (v35 >= (uint64_t)(v26[1] - *v26) >> 3) {
LABEL_164:
    }
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    if ((*(unsigned int (**)(void))(**(void **)(*v26 + 8 * v35) + 32))(*(void *)(*v26 + 8 * v35))) {
      break;
    }
    if (v29 == ++v35) {
      goto LABEL_48;
    }
  }
  long long v111 = *v93;
  *(void *)uint64_t v93 = 0;
  *((void *)v93 + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>(v109, "Variadic dimensions are not supported if they come before the selected dims in the shape of a ref_tensor.");
  MIL::ValidationResult::ValidationResult(v92, &v111, 315, v109);
  if (v110 < 0) {
    operator delete(v109[0]);
  }
  uint64_t v56 = (std::__shared_weak_count *)*((void *)&v111 + 1);
  if (*((void *)&v111 + 1)) {
    goto LABEL_79;
  }
}

void sub_20F67F700(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceReshapeLike(MIL::UnknownLocation *a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  MIL::UnknownLocation::Make(a1);
}

void sub_20F67FBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va1);
  unint64_t v4 = *(void **)(v2 - 64);
  if (v4)
  {
    *(void *)(v2 - 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidatePixelUnshuffle(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "downscale_factor");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  unsigned int v8 = MIL::IRValue::GetScalar<unsigned int>(ParameterValue);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v10 = (std::__shared_weak_count *)LocationPtr[1];
  v11[0] = *LocationPtr;
  v11[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_20F67FD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidatePixelUnshuffleInputs(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  if (a2)
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if (v7[1] - *v7 <= 0x18uLL
      || (uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*v7 + 24) + 16))(*(void *)(*v7 + 24)),
          v7[1] - *v7 <= 0x10uLL))
    {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v9 = v8;
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*v7 + 16) + 16))(*(void *)(*v7 + 16));
    if (v9 && (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9) % (unint64_t)a2)
    {
      uint64_t v11 = (std::__shared_weak_count *)a3[1];
      uint64_t v21 = *a3;
      uint64_t v22 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "width dimension is not divisible by downscale_factor.");
      MIL::ValidationResult::ValidationResult(a4, &v21, 315, __p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = v22;
      if (!v22) {
        return;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      return;
    }
    if (v10 && (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10) % (unint64_t)a2)
    {
      char v13 = (std::__shared_weak_count *)a3[1];
      uint64_t v17 = *a3;
      uint64_t v18 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v15, "height dimension is not divisible by downscale_factor.");
      MIL::ValidationResult::ValidationResult(a4, &v17, 315, v15);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      uint64_t v12 = v18;
      if (v18) {
        goto LABEL_25;
      }
    }
    else
    {
      MIL::ValidationResult::ValidationResult(a4);
    }
  }
  else
  {
    uint64_t v14 = (std::__shared_weak_count *)a3[1];
    uint64_t v25 = *a3;
    uint64_t v26 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "downscale_factor must be greater than or equal to 1.");
    MIL::ValidationResult::ValidationResult(a4, &v25, 315, v23);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    uint64_t v12 = v26;
    if (v26) {
      goto LABEL_25;
    }
  }
}

void sub_20F680024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferencePixelUnshuffle(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v5 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v9 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 96))(v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "downscale_factor");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  uint64_t v7 = (MIL::UnknownLocation *)MIL::IRValue::GetScalar<unsigned int>(SingleValue);
  if (v9 < 0) {
    operator delete(__p);
  }
  MIL::UnknownLocation::Make(v7);
}

void sub_20F680988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v38 - 216));
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v38 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::PixelUnshuffle::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F681C10(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x240]);
  unint64_t v3 = STACK[0x208];
  STACK[0x208] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x200]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x200]);
  }
  unint64_t v4 = *(void **)(v1 - 152);
  if (v4)
  {
    *(void *)(v1 - 144) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 112);
  if (v5)
  {
    *(void *)(v1 - 104) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F682D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v59 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  uint64_t v61 = *(void **)(v59 - 136);
  if (v61)
  {
    *(void *)(v59 - 128) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::ReshapeLike::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F684118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v62 - 112));
  if (a45) {
    (*(void (**)(uint64_t))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v62 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F685264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F686510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  uint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  uint64_t v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F687A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a69);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  long long v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(void *)(v69 - 120) = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ClampedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make();
}

void sub_20F6880B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LinearActivation::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make();
}

void sub_20F68816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScaledTanh::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make();
}

void sub_20F688220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SigmoidHard::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlphaBeta::Make();
}

void sub_20F6882D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ELU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make();
}

void sub_20F688388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LeakyReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make();
}

void sub_20F68843C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ThresholdedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseActivationWithAlpha::Make();
}

void sub_20F6884F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::PReLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F689558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a65);
  if (a58) {
    (*(void (**)(uint64_t))(*(void *)a58 + 8))(a58);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  uint64_t v68 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v68;
    operator delete(v68);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SoftplusParametric::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F68AE8C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x250]);
  unint64_t v3 = STACK[0x208];
  STACK[0x208] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x200]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x200]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2C8];
  if (STACK[0x2C8])
  {
    STACK[0x2D0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x210], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Conv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F68D814(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x468]);
  unint64_t v3 = STACK[0x408];
  STACK[0x408] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x388]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x388]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    STACK[0x4E8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x420], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x460], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ConvTranspose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6907E8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x478]);
  unint64_t v3 = STACK[0x418];
  STACK[0x418] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x388]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x388]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x430], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x470], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(MIL::IRUnknownDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v4, a3);
}

void sub_20F691460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::ElementwiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Add::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F693A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ElementwiseBinaryBoolOutput::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F694DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  uint64_t v61 = *(void **)(v59 - 232);
  if (v61)
  {
    *(void *)(v59 - 224) = v61;
    operator delete(v61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ElementwiseBinaryLogical::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F695F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  uint64_t v56 = *(void **)(v54 - 240);
  if (v56)
  {
    *(void *)(v54 - 232) = v56;
    operator delete(v56);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v54 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LogicalAnd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6970DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LogicalOr::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F698278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LogicalXor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F699414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a54);
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p)
  {
    a70 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v70 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Equal::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69A6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Greater::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::GreaterEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69CD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Less::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LessEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F69F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::NotEqual::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a59);
  if (a50) {
    (*(void (**)(void *))(*(void *)a50 + 8))(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  std::string::size_type v60 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::FloorDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A1B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Maximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A31CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Minimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Mod::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A5E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Mul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A7468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Pow::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6A8A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::RealDiv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6AA0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Sub::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6AB704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCast(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(a1, (uint64_t)v4, a3);
}

void sub_20F6ABD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceCast(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(a1, (uint64_t)v4, a3);
}

void sub_20F6ABDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateClip(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "alpha");
  Parameteruint64_t Value = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v25, 0);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "beta");
  uint64_t v6 = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v25, 0);
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if (!ParameterValue)
    {
LABEL_13:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!ParameterValue)
  {
    goto LABEL_13;
  }
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)ParameterValue + 32))(ParameterValue);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
  if (v9 == 4)
  {
    LOWORD(v25[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(ParameterValue);
    float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)v25);
    LOWORD(v25[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(v6);
    float v11 = MIL::Fp16::GetFloat((MIL::Fp16 *)v25);
LABEL_12:
    if (v11 > Float) {
      goto LABEL_13;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v16 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v19 = *LocationPtr;
    char v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid alpha, beta input values for clip");
    MIL::ValidationResult::ValidationResult(a2, &v19, 319, v17);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    uint64_t v14 = v20;
    if (v20) {
      goto LABEL_25;
    }
    return;
  }
  if (v9 == 5)
  {
    float Float = MIL::IRValue::GetScalar<float>(ParameterValue);
    float v11 = MIL::IRValue::GetScalar<float>(v6);
    goto LABEL_12;
  }
  uint64_t v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v13 = (std::__shared_weak_count *)v12[1];
  uint64_t v23 = *v12;
  char v24 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Unexpected dType for clip input alpha.");
  MIL::ValidationResult::ValidationResult(a2, &v23, 319, __p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = v24;
  if (v24) {
LABEL_25:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
}

void sub_20F6ABFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceClip(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceClip(a1, v4, a3);
}

void sub_20F6AC0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::Cast::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6AD3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,void **a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 128));
  if (a53) {
    (*(void (**)(uint64_t))(*(void *)a53 + 8))(a53);
  }
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  size_t v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x238], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ElementwiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6AE71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Acos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6AF874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Acosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Asin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B1B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Asinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B2CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Atan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B3E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Atanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Ceil::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B60E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Clip::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a69);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  long long v71 = *(void **)(v69 - 128);
  if (v71)
  {
    *(void *)(v69 - 120) = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Cos::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B8858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Cosh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6B99C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6BAC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a59);
  if (a52) {
    (*(void (**)(uint64_t))(*(void *)a52 + 8))(a52);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  uint64_t v61 = *(void **)(v59 - 128);
  if (v61)
  {
    *(void *)(v59 - 120) = v61;
    operator delete(v61);
  }
  uint64_t v62 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Inverse::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make();
}

void sub_20F6BB248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Log::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make();
}

void sub_20F6BB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Rsqrt::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::ElementwiseUnaryWithEpsilon::Make();
}

void sub_20F6BB3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ElementwiseUnaryWithInt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6BC0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Abs::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6BD2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Exp2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6BE508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Sign::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6BF740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Square::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C0978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Threshold::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C1D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a68);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Exp::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C2FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Floor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C4120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Round::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C5288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Sin::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C63F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Sinh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C7558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Sqrt::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Tan::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6C9828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Tanh::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6CA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a49);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  long long v67 = *(void **)(v65 - 128);
  if (v67)
  {
    *(void *)(v65 - 120) = v67;
    operator delete(v67);
  }
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LogicalNot::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6CB760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a40);
  if (a36) {
    (*(void (**)(uint64_t))(*(void *)a36 + 8))(a36);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v59 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a39, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseGather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6CCB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 128));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  long long v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  size_t v74 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseGatherWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6CE2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 128));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  size_t v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  unint64_t v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Gather::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6CFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  size_t v74 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v74;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v75;
    operator delete(v75);
  }
  unint64_t v76 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::GatherAlongAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6D147C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  size_t v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  unint64_t v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x250], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::GatherNd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6D2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  size_t v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  unint64_t v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x250], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateCropResize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v35, "normalized_coordinates");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (v36 < 0) {
    operator delete((void *)v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v36 < 0) {
    operator delete((void *)v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "boxes");
  int v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  if (v36 < 0) {
    operator delete((void *)v35[0]);
  }
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  if (!v6 || (v11 & 0xFFFFFFFE) == 4)
  {
    uint64_t v15 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)**v15 + 16))(**v15);
    uint64_t v17 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)**v17 + 16))(**v17);
    if (v16) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19) {
      goto LABEL_24;
    }
    uint64_t v20 = v18;
    unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
    unint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
    std::string::basic_string[abi:ne180100]<0>(v35, "box_indices");
    BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v35);
    char v24 = v22 <= v21 || IsParameterSet;
    if (v36 < 0)
    {
      operator delete((void *)v35[0]);
      if (v24) {
        goto LABEL_24;
      }
    }
    else if (v24)
    {
LABEL_24:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v26 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v29 = *LocationPtr;
    uint64_t v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "B dimension of \"x\" may not be greater than the N dimension of \"boxes\" when \"box_indices\" is set to default, otherwise \"box_indices\" would point outside of \"x\"s bounds.");
    MIL::ValidationResult::ValidationResult(a2, &v29, 315, v27);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    uint64_t v14 = v30;
    if (v30) {
      goto LABEL_14;
    }
    return;
  }
  uint64_t v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v13 = (std::__shared_weak_count *)v12[1];
  uint64_t v33 = *v12;
  uint64_t v34 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "If \"normalized_coordinates\" is set, then \"boxes\" must have fp16 or fp32 data type");
  MIL::ValidationResult::ValidationResult(a2, &v33, 315, __p);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = v34;
  if (v34) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
}

void sub_20F6D3660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCropResize(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "boxes");
  uint64_t v7 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "target_height");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  uint64_t v10 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  int v11 = MIL::IRValue::GetScalar<int>(v10);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "target_width");
  uint64_t v12 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  char v13 = (const void *)MIL::IRValue::AsTensor(v12);
  int v14 = MIL::IRValue::GetScalar<int>(v13);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
  uint64_t v16 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6) + 8);
  uint64_t v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v11);
  uint64_t v18 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v14);
  BOOL v19 = operator new(0x20uLL);
  __p[1] = v19 + 4;
  unint64_t v21 = v19 + 4;
  *BOOL v19 = v15;
  v19[1] = v16;
  uint64_t v19[2] = v17;
  void v19[3] = v18;
  __p[0] = v19;
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F6D3904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateResize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v53, "resized_dims");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  unsigned int v6 = MIL::IRValue::GetScalar<unsigned int>(ParameterValue);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "shape");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  unint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
  if (v9 < v6)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v11 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v51 = *LocationPtr;
    unint64_t v52 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "resized_dims must be <= the size of the input shape");
    MIL::ValidationResult::ValidationResult(a2, &v51, 315, v49);
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    uint64_t v12 = v52;
    if (!v52) {
      return;
    }
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    return;
  }
  unint64_t v13 = v9;
  std::string::basic_string[abi:ne180100]<0>(&v53, "x");
  int v14 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v15 = MIL::IRValueType::AsTensorType(v14);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 104))(v15))
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15);
    memset(&v53, 0, sizeof(v53));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v53, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3);
    if (v13 > (uint64_t)(v53.__r_.__value_.__l.__size_ - v53.__r_.__value_.__r.__words[0]) >> 3)
    {
      uint64_t v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v18 = (std::__shared_weak_count *)v17[1];
      uint64_t v47 = *v17;
      uint64_t v48 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "shape size must be <= the rank of the input shape");
      MIL::ValidationResult::ValidationResult(a2, &v47, 315, __p);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      BOOL v19 = (void *)v53.__r_.__value_.__r.__words[0];
      if (v53.__r_.__value_.__r.__words[0])
      {
        v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
LABEL_51:
        operator delete(v19);
        return;
      }
      return;
    }
    if (v53.__r_.__value_.__r.__words[0])
    {
      v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
      operator delete(v53.__r_.__value_.__l.__data_);
    }
  }
  if (v6 >= 3)
  {
    uint64_t v20 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v21 = (std::__shared_weak_count *)v20[1];
    uint64_t v43 = *v20;
    unint64_t v44 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "resized_dims is only supported for value <= 2");
    MIL::ValidationResult::ValidationResult(a2, &v43, 315, v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v12 = v44;
    if (v44) {
      goto LABEL_32;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "interpolation_mode");
  unint64_t v22 = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(v22, &v53);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v38, "sampling_mode");
  uint64_t v23 = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(v23, &v40);
  if (v39 < 0) {
    operator delete(v38);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v53.__r_.__value_.__l.__size_ != 16) {
      goto LABEL_46;
    }
    char v24 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) != 16) {
      goto LABEL_46;
    }
    char v24 = &v53;
  }
  std::string::size_type v26 = v24->__r_.__value_.__r.__words[0];
  std::string::size_type size = v24->__r_.__value_.__l.__size_;
  if (v26 != 0x5F5453455241454ELL || size != 0x524F42484749454ELL) {
    goto LABEL_46;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v40.__r_.__value_.__l.__size_ == 7)
    {
      char v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
LABEL_58:
      int data = (int)v28->__r_.__value_.__l.__data_;
      int v30 = *(_DWORD *)((char *)v28->__r_.__value_.__r.__words + 3);
      if (data != 1095124292 || v30 != 1414288705) {
        goto LABEL_62;
      }
LABEL_46:
      MIL::ValidationResult::ValidationResult(a2);
      goto LABEL_47;
    }
  }
  else if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) == 7)
  {
    char v28 = &v40;
    goto LABEL_58;
  }
LABEL_62:
  char v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v33 = (std::__shared_weak_count *)v32[1];
  uint64_t v36 = *v32;
  uint64_t v37 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v34, "non-default sampling_mode is unsupported with interpolation_mode == NEAREST_NEIGHBOR");
  MIL::ValidationResult::ValidationResult(a2, &v36, 315, v34);
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
LABEL_47:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v19 = (void *)v53.__r_.__value_.__r.__words[0];
    goto LABEL_51;
  }
}

void sub_20F6D3DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v43 - 49) < 0) {
    operator delete(*(void **)(v43 - 72));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceResize(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v152, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v152);
  unsigned int v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  (*(void (**)(MIL::IRTensorValueType *))(*(void *)v6 + 88))(v6);
  uint64_t v7 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
  unint64_t v145 = 0;
  unint64_t v146 = 0;
  unint64_t v147 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v152, "shape");
  uint64_t v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v152);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v152, "resized_dims");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v152);
  unsigned int v11 = MIL::IRValue::GetScalar<unsigned int>(SingleValue);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (v11 >= 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    uint64_t v115 = a2[1];
    *(void *)&long long v144 = *a2;
    *((void *)&v144 + 1) = v115;
    if (v115) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v143, "resized_dims is only supported for value <= 2");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v144, (uint64_t)v143, 315);
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 104))(v6) & 1) == 0)
  {
    if (&v145 != (void **)v7) {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v145, *(char **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
    }
    MIL::IRTensorValueType::MakeWithShape();
  }
  unint64_t v12 = MIL::IRTensorValueType::Rank(v6);
  unint64_t v13 = v12;
  if (HIDWORD(v12) || v12 < v11)
  {
    std::string v116 = __cxa_allocate_exception(0x48uLL);
    uint64_t v117 = a2[1];
    *(void *)&long long v142 = *a2;
    *((void *)&v142 + 1) = v117;
    if (v117) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v149, v11);
    std::string v118 = std::string::insert(&v149, 0, "resized_dims of size ");
    long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v120 = std::string::append(&v150, " and an input tensor x of rank ");
    long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v148, v13);
    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v122 = &v148;
    }
    else {
      long long v122 = (std::string *)v148.__r_.__value_.__r.__words[0];
    }
    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v148.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v148.__r_.__value_.__l.__size_;
    }
    long long v124 = std::string::append(&v151, (const std::string::value_type *)v122, size);
    long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v126 = std::string::append(&v152, " are incompatible.");
    long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    std::string::size_type v141 = v126->__r_.__value_.__r.__words[2];
    long long v140 = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v116, &v142, (uint64_t)&v140, 315);
  }
  std::string::basic_string[abi:ne180100]<0>(&v152, "shape");
  int v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v152);
  if (!v14) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v15 = v11;
  if (MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v14 + 5)))
  {
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&v152, "shape");
    BOOL v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v152);
    if (!v19) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    BOOL IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v19 + 5));
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (IsValue)
    {
      std::string::basic_string[abi:ne180100]<0>(&v152, "shape");
      unint64_t v21 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v152);
      uint64_t v22 = MIL::IRValue::AsTensor(v21);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      MIL::IRTensorValue::TryGetDataView<unsigned int>(&v152, v22);
      if (v152.__r_.__value_.__s.__data_[0])
      {
        memset(&v151, 0, sizeof(v151));
        std::vector<long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)&v151, (unsigned int *)v152.__r_.__value_.__l.__size_, (unsigned int *)(v152.__r_.__value_.__l.__size_ + 4 * v152.__r_.__value_.__r.__words[2]), v152.__r_.__value_.__r.__words[2]);
        long long v23 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      }
      else
      {
        long long v23 = 0uLL;
      }
      *(_OWORD *)std::string __p = v23;
      MIL::IRTensorValue::TryGetDataView<int>(&v151, v22);
      if (v151.__r_.__value_.__s.__data_[0])
      {
        memset(&v150, 0, sizeof(v150));
        std::vector<long long>::__init_with_size[abi:ne180100]<int const*,int const*>((char *)&v150, (int *)v151.__r_.__value_.__l.__size_, (int *)(v151.__r_.__value_.__l.__size_ + 4 * v151.__r_.__value_.__r.__words[2]), v151.__r_.__value_.__r.__words[2]);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
      }
      MIL::IRTensorValue::TryGetDataView<unsigned short>(&v150, v22);
      if (v150.__r_.__value_.__s.__data_[0])
      {
        memset(&v149, 0, sizeof(v149));
        std::vector<long long>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>((char *)&v149, (unsigned __int16 *)v150.__r_.__value_.__l.__size_, (unsigned __int16 *)(v150.__r_.__value_.__l.__size_ + 2 * v150.__r_.__value_.__r.__words[2]), v150.__r_.__value_.__r.__words[2]);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
      }
      MIL::IRTensorValue::TryGetDataView<short>(&v149, v22);
      if (v149.__r_.__value_.__s.__data_[0])
      {
        memset(&v148, 0, sizeof(v148));
        std::vector<long long>::__init_with_size[abi:ne180100]<short const*,short const*>((char *)&v148, (__int16 *)v149.__r_.__value_.__l.__size_, (__int16 *)(v149.__r_.__value_.__l.__size_ + 2 * v149.__r_.__value_.__r.__words[2]), v149.__r_.__value_.__r.__words[2]);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        long long v65 = *(_OWORD *)&v148.__r_.__value_.__l.__data_;
      }
      else
      {
        long long v65 = *(_OWORD *)__p;
      }
      long long v130 = a2;
      __pa = (void *)v65;
      unint64_t v131 = *((void *)&v65 + 1) - v65;
      if ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3 < (unint64_t)v11
        || ((uint64_t)(*((void *)&v65 + 1) - v65) >> 3) > v13)
      {
        char v128 = __cxa_allocate_exception(0x48uLL);
        uint64_t v129 = a2[1];
        *(void *)&long long v139 = *a2;
        *((void *)&v139 + 1) = v129;
        if (v129) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v129 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v138, "\"shape\" must be >= \"resized_dims\", and<= rank(\"x\").");
        MIL::ValidationError::ValidationError((uint64_t)v128, &v139, (uint64_t)v138, 315);
      }
      if ((uint64_t)(v13 - v11) >= 1)
      {
        uint64_t v66 = 0;
        unsigned int v67 = 0;
        uint64_t v68 = (char *)v146;
        do
        {
          uint64_t v69 = *(char **)v7;
          if (v68 >= v147)
          {
            uint64_t v70 = (v68 - (unsigned char *)v145) >> 3;
            if ((unint64_t)(v70 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v71 = (v147 - (unsigned char *)v145) >> 2;
            if (v71 <= v70 + 1) {
              unint64_t v71 = v70 + 1;
            }
            if ((unint64_t)(v147 - (unsigned char *)v145) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v71;
            }
            if (v72) {
              long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v147, v72);
            }
            else {
              long long v73 = 0;
            }
            size_t v74 = &v73[8 * v70];
            *(void *)size_t v74 = *(void *)&v69[8 * v66];
            uint64_t v68 = v74 + 8;
            unint64_t v76 = (char *)v145;
            long long v75 = (char *)v146;
            if (v146 != v145)
            {
              do
              {
                uint64_t v77 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v74 - 1) = v77;
                v74 -= 8;
              }
              while (v75 != v76);
              long long v75 = (char *)v145;
            }
            unint64_t v145 = v74;
            unint64_t v146 = (uint64_t *)v68;
            unint64_t v147 = &v73[8 * v72];
            if (v75) {
              operator delete(v75);
            }
          }
          else
          {
            *(void *)uint64_t v68 = *(void *)&v69[8 * v66];
            v68 += 8;
          }
          unint64_t v146 = (uint64_t *)v68;
          uint64_t v66 = ++v67;
        }
        while ((uint64_t)(v13 - v11) > v67);
      }
      if (v11)
      {
        uint64_t v78 = 0;
        int v79 = (v131 >> 3) - v11;
        int v80 = v13 - v11;
        do
        {
          long long v81 = (MIL::MILContext *)__pa[(v79 + v78)];
          if (v81)
          {
            if ((unint64_t)v81 >= 0x8000)
            {
              char v110 = __cxa_allocate_exception(0x48uLL);
              uint64_t v111 = v130[1];
              *(void *)&long long v137 = *v130;
              *((void *)&v137 + 1) = v111;
              if (v111) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v111 + 8), 1uLL, memory_order_relaxed);
              }
              std::to_string(&v152, (uint64_t)v81);
              std::string v112 = std::string::insert(&v152, 0, "Target shape value is out of bounds: ");
              long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
              std::string::size_type v136 = v112->__r_.__value_.__r.__words[2];
              long long v135 = v113;
              v112->__r_.__value_.__l.__size_ = 0;
              v112->__r_.__value_.__r.__words[2] = 0;
              v112->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationError::ValidationError((uint64_t)v110, &v137, (uint64_t)&v135, 315);
            }
            uint64_t v82 = MIL::IRConstantDimension::Make(*a1, v81);
            uint64_t v83 = v82;
            size_t v84 = v146;
            if (v146 >= (uint64_t *)v147)
            {
              uint64_t v89 = ((char *)v146 - (unsigned char *)v145) >> 3;
              if ((unint64_t)(v89 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v90 = (v147 - (unsigned char *)v145) >> 2;
              if (v90 <= v89 + 1) {
                unint64_t v90 = v89 + 1;
              }
              if ((unint64_t)(v147 - (unsigned char *)v145) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v90;
              }
              if (v91) {
                std::vector<int>::pointer v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v147, v91);
              }
              else {
                std::vector<int>::pointer v92 = 0;
              }
              int v95 = &v92[8 * v89];
              *(void *)int v95 = v83;
              long long v85 = (uint64_t *)(v95 + 8);
              char v97 = (char *)v145;
              std::string::size_type v96 = (char *)v146;
              if (v146 != v145)
              {
                do
                {
                  uint64_t v98 = *((void *)v96 - 1);
                  v96 -= 8;
                  *((void *)v95 - 1) = v98;
                  v95 -= 8;
                }
                while (v96 != v97);
                goto LABEL_155;
              }
              goto LABEL_156;
            }
            uint64_t *v146 = v82;
            long long v85 = v84 + 1;
          }
          else
          {
            uint64_t v86 = (v80 + v78);
            std::string::size_type v87 = *(char **)v7;
            unint64_t v88 = v146;
            if (v146 >= (uint64_t *)v147)
            {
              uint64_t v93 = ((char *)v146 - (unsigned char *)v145) >> 3;
              if ((unint64_t)(v93 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v94 = (v147 - (unsigned char *)v145) >> 2;
              if (v94 <= v93 + 1) {
                unint64_t v94 = v93 + 1;
              }
              if ((unint64_t)(v147 - (unsigned char *)v145) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v91 = v94;
              }
              if (v91) {
                std::vector<int>::pointer v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v147, v91);
              }
              else {
                std::vector<int>::pointer v92 = 0;
              }
              int v95 = &v92[8 * v93];
              *(void *)int v95 = *(void *)&v87[8 * v86];
              long long v85 = (uint64_t *)(v95 + 8);
              char v99 = (char *)v145;
              std::string::size_type v96 = (char *)v146;
              if (v146 != v145)
              {
                do
                {
                  uint64_t v100 = *((void *)v96 - 1);
                  v96 -= 8;
                  *((void *)v95 - 1) = v100;
                  v95 -= 8;
                }
                while (v96 != v99);
LABEL_155:
                std::string::size_type v96 = (char *)v145;
              }
LABEL_156:
              unint64_t v145 = v95;
              unint64_t v146 = v85;
              unint64_t v147 = &v92[8 * v91];
              if (v96) {
                operator delete(v96);
              }
              goto LABEL_158;
            }
            uint64_t *v146 = *(void *)&v87[8 * v86];
            long long v85 = v88 + 1;
          }
LABEL_158:
          unint64_t v146 = v85;
          ++v78;
        }
        while (v78 != v15);
      }
      if (__pa) {
        operator delete(__pa);
      }
    }
    else
    {
      for (unsigned int i = 0; MIL::IRTensorValueType::Rank(v6) - v11 > i; ++i)
      {
        uint64_t v25 = *(char **)v7;
        std::string::size_type v26 = v146;
        if (v146 >= (uint64_t *)v147)
        {
          uint64_t v28 = ((char *)v146 - (unsigned char *)v145) >> 3;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = (v147 - (unsigned char *)v145) >> 2;
          if (v29 <= v28 + 1) {
            unint64_t v29 = v28 + 1;
          }
          if ((unint64_t)(v147 - (unsigned char *)v145) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30) {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v147, v30);
          }
          else {
            long long v31 = 0;
          }
          char v32 = &v31[8 * v28];
          *(void *)char v32 = *(void *)&v25[8 * i];
          uint64_t v27 = (uint64_t *)(v32 + 8);
          uint64_t v34 = (char *)v145;
          uint64_t v33 = (char *)v146;
          if (v146 != v145)
          {
            do
            {
              uint64_t v35 = *((void *)v33 - 1);
              v33 -= 8;
              *((void *)v32 - 1) = v35;
              v32 -= 8;
            }
            while (v33 != v34);
            uint64_t v33 = (char *)v145;
          }
          unint64_t v145 = v32;
          unint64_t v146 = v27;
          unint64_t v147 = &v31[8 * v30];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          uint64_t *v146 = *(void *)&v25[8 * i];
          uint64_t v27 = v26 + 1;
        }
        unint64_t v146 = v27;
      }
      if (v11)
      {
        for (int j = 0; j != v11; ++j)
        {
          uint64_t v37 = MIL::IRUnknownDimension::Make(*a1, 0);
          uint64_t v38 = v37;
          char v39 = v146;
          if (v146 >= (uint64_t *)v147)
          {
            uint64_t v41 = ((char *)v146 - (unsigned char *)v145) >> 3;
            if ((unint64_t)(v41 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = (v147 - (unsigned char *)v145) >> 2;
            if (v42 <= v41 + 1) {
              unint64_t v42 = v41 + 1;
            }
            if ((unint64_t)(v147 - (unsigned char *)v145) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v43) {
              unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v147, v43);
            }
            else {
              unint64_t v44 = 0;
            }
            uint64_t v45 = (uint64_t *)&v44[8 * v41];
            *uint64_t v45 = v38;
            std::string v40 = v45 + 1;
            uint64_t v47 = (char *)v145;
            char v46 = (char *)v146;
            if (v146 != v145)
            {
              do
              {
                uint64_t v48 = *((void *)v46 - 1);
                v46 -= 8;
                *--uint64_t v45 = v48;
              }
              while (v46 != v47);
              char v46 = (char *)v145;
            }
            unint64_t v145 = v45;
            unint64_t v146 = v40;
            unint64_t v147 = &v44[8 * v43];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            uint64_t *v146 = v37;
            std::string v40 = v39 + 1;
          }
          unint64_t v146 = v40;
        }
      }
    }
    MIL::IRTensorValueType::MakeWithShape();
  }
  uint64_t v16 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  uint64_t v17 = (*(uint64_t (**)(void))(*(void *)**v16 + 16))(**v16);
  uint64_t v18 = v17;
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v152.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_20;
    }
  }
  else if (v17)
  {
    goto LABEL_20;
  }
  unsigned int v49 = 0;
  memset(&v152, 0, sizeof(v152));
  while (MIL::IRTensorValueType::Rank(v6) - v11 > v49)
  {
    char v50 = *(char **)v7;
    std::string::size_type v51 = v152.__r_.__value_.__l.__size_;
    if (v152.__r_.__value_.__l.__size_ >= v152.__r_.__value_.__r.__words[2])
    {
      uint64_t v53 = (uint64_t)(v152.__r_.__value_.__l.__size_ - v152.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v53 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = (uint64_t)(v152.__r_.__value_.__r.__words[2] - v152.__r_.__value_.__r.__words[0]) >> 2;
      if (v54 <= v53 + 1) {
        unint64_t v54 = v53 + 1;
      }
      if (v152.__r_.__value_.__r.__words[2] - v152.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v54;
      }
      if (v55) {
        uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v152.__r_.__value_.__r.__words[2], v55);
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = &v56[8 * v53];
      *(void *)uint64_t v57 = *(void *)&v50[8 * v49];
      std::string::size_type v52 = (std::string::size_type)(v57 + 8);
      uint64_t v58 = (char *)v152.__r_.__value_.__l.__size_;
      std::string::size_type v59 = v152.__r_.__value_.__r.__words[0];
      if (v152.__r_.__value_.__l.__size_ != v152.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v60 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v57 - 1) = v60;
          v57 -= 8;
        }
        while (v58 != (char *)v59);
        uint64_t v58 = (char *)v152.__r_.__value_.__r.__words[0];
      }
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      v152.__r_.__value_.__l.__size_ = v52;
      v152.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56[8 * v55];
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(void *)v152.__r_.__value_.__l.__size_ = *(void *)&v50[8 * v49];
      std::string::size_type v52 = v51 + 8;
    }
    v152.__r_.__value_.__l.__size_ = v52;
    ++v49;
  }
  uint64_t v61 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  uint64_t v62 = v61;
  std::string::size_type v63 = v152.__r_.__value_.__l.__size_;
  if (v152.__r_.__value_.__l.__size_ >= v152.__r_.__value_.__r.__words[2])
  {
    uint64_t v101 = (uint64_t)(v152.__r_.__value_.__l.__size_ - v152.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v101 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v102 = (uint64_t)(v152.__r_.__value_.__r.__words[2] - v152.__r_.__value_.__r.__words[0]) >> 2;
    if (v102 <= v101 + 1) {
      unint64_t v102 = v101 + 1;
    }
    if (v152.__r_.__value_.__r.__words[2] - v152.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103) {
      char v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v152.__r_.__value_.__r.__words[2], v103);
    }
    else {
      char v104 = 0;
    }
    uint64_t v105 = (uint64_t *)&v104[8 * v101];
    std::string::size_type v106 = (std::string::size_type)&v104[8 * v103];
    uint64_t *v105 = v62;
    std::string::size_type v64 = (std::string::size_type)(v105 + 1);
    char v107 = (char *)v152.__r_.__value_.__l.__size_;
    std::string::size_type v108 = v152.__r_.__value_.__r.__words[0];
    if (v152.__r_.__value_.__l.__size_ != v152.__r_.__value_.__r.__words[0])
    {
      do
      {
        uint64_t v109 = *((void *)v107 - 1);
        v107 -= 8;
        *--uint64_t v105 = v109;
      }
      while (v107 != (char *)v108);
      char v107 = (char *)v152.__r_.__value_.__r.__words[0];
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
    v152.__r_.__value_.__l.__size_ = v64;
    v152.__r_.__value_.__r.__words[2] = v106;
    if (v107) {
      operator delete(v107);
    }
  }
  else
  {
    *(void *)v152.__r_.__value_.__l.__size_ = v61;
    std::string::size_type v64 = v63 + 8;
  }
  v152.__r_.__value_.__l.__size_ = v64;
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F6D4D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (*(char *)(v52 - 217) < 0) {
    operator delete(*(void **)(v52 - 240));
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (*(char *)(v52 - 185) < 0) {
    operator delete(*(void **)(v52 - 208));
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (v51) {
    __cxa_free_exception(v50);
  }
  if (a49) {
    operator delete(a49);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unsigned int v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F6D4FF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<int const*,int const*>(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F6D5064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(char *result, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unsigned int v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F6D50D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__init_with_size[abi:ne180100]<short const*,short const*>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F6D514C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CropResize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6D7AB4(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x560]);
  unint64_t v3 = STACK[0x478];
  STACK[0x478] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x470]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x470]);
  }
  unint64_t v4 = (void *)STACK[0x450];
  if (STACK[0x450])
  {
    STACK[0x458] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x518];
  if (STACK[0x518])
  {
    STACK[0x520] = (unint64_t)v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)STACK[0x530];
  if (STACK[0x530])
  {
    STACK[0x538] = (unint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(v1 - 112);
  if (v7)
  {
    *(void *)(v1 - 104) = v7;
    operator delete(v7);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x480], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x558], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Resample::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6DB6FC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x628]);
  unint64_t v3 = STACK[0x5C8];
  STACK[0x5C8] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x4D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4D0]);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x6A0];
  if (STACK[0x6A0])
  {
    STACK[0x6A8] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x620], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Resize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6DDE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2A8]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  long long v73 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v73;
    operator delete(v73);
  }
  size_t v74 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v74;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x258], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2A0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateMatMul(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v35, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35);
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "y");
  uint64_t v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v9 = MIL::IRValueType::AsTensorType(v8);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 88))(v9);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v12 = MIL::IRValueType::AsTensorType(OutputType);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
  std::string::basic_string[abi:ne180100]<0>(&v35, "x");
  Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v35, 0);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35);
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "y");
  uint64_t v15 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v35, 0);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  if ((ParameterValue != 0) != (v15 == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "Input x");
    std::string::basic_string[abi:ne180100]<0>(__p, "input y");
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v35))
    {
      if (v7 == v13)
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
      }
      else
      {
        uint64_t v18 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v29 = *LocationPtr;
        unint64_t v30 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v27, "Output must have the same data type as the inputs x and y.");
        MIL::ValidationResult::ValidationResult(a2, &v29, 315, v27);
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
      }
    }
    else
    {
      *(_OWORD *)(a2 + 8) = v36;
      long long v36 = 0uLL;
      *(_OWORD *)(a2 + 24) = v37;
      *(void *)(a2 + 40) = v38;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(void *)a2 = &unk_26C25DB50;
      *(_DWORD *)(a2 + 48) = v39;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v35);
    return;
  }
  if (ParameterValue)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "Non-const input y");
    std::string::basic_string[abi:ne180100]<0>(v23, "output");
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0)
    {
      uint64_t v17 = (void *)v25[0];
LABEL_27:
      operator delete(v17);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "Non-const input x");
    std::string::basic_string[abi:ne180100]<0>(v19, "output");
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (v22 < 0)
    {
      uint64_t v17 = v21[0];
      goto LABEL_27;
    }
  }
}

void sub_20F6DEA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v52 - 136));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::anonymous namespace'::ValidateDtypesAreSame(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, const void **a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  if (a2 == a3)
  {
    MIL::ValidationResult::ValidationResult(a6);
  }
  else
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v24 = *a1;
    uint64_t v25 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a4 + 23) >= 0) {
      size_t v10 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v10 = (size_t)a4[1];
    }
    unsigned int v11 = &v20;
    std::string::basic_string[abi:ne180100]((uint64_t)&v20, v10 + 5);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (v10)
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = *a4;
      }
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, " and ");
    int v13 = *(char *)(a5 + 23);
    if (v13 >= 0) {
      int v14 = (const std::string::value_type *)a5;
    }
    else {
      int v14 = *(const std::string::value_type **)a5;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a5 + 8);
    }
    uint64_t v16 = std::string::append(&v20, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v21, " must have the same data type.");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, &v24, 315, __p);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
}

void sub_20F6DED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(v28 - 64);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceMatMul(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  std::string::size_type v23 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  int v7 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_x");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v10 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose_y");
  unsigned int v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v12 = MIL::IRValue::GetScalar<BOOL>(v11);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v13 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  uint64_t v14 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  char v22 = a2;
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  BOOL v15 = v14 == 0;
  int v16 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v23 + 88))(v23);
  int v17 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 88))(v8);
  if ((v13 != 0) == v15)
  {
    uint64_t v18 = a1;
    int v19 = v10;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "Input x");
    std::string::basic_string[abi:ne180100]<0>(v29, "input y");
    uint64_t v18 = a1;
    int v19 = v10;
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      long long v21 = v34;
      long long v34 = 0uLL;
      long long v25 = v21;
      long long v26 = v35;
      uint64_t v27 = v36;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      uint64_t v24 = &unk_26C25DB50;
      int v28 = v37;
      MIL::ValidationError::ValidationError(exception, &v24);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  }
  MIL::ValueTypeInferenceUtils::GetMatmulOutShape(v18, v23, v8, v19, v12, (unint64_t *)&__p);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F6DF0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void MIL::Operators::Common::ios17::Linear::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E0960(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x338]);
  unint64_t v2 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x2B8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2B8]);
  }
  unint64_t v3 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2C8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x330], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::MatMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x288]);
  unint64_t v73 = STACK[0x200];
  STACK[0x200] = 0;
  if (v73) {
    (*(void (**)(unint64_t))(*(void *)v73 + 8))(v73);
  }
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  if (__p) {
    operator delete(__p);
  }
  size_t v74 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v74;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x208], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(a1, (uint64_t)v4, a3);
}

void sub_20F6E2D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(MIL::IRUnknownProperty **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(a1, &v5, a3, a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F6E2DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(MIL::IRConstantDimension **a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(a1, v4, a3);
}

void sub_20F6E2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(MIL::IRConstantDimension **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(a1, &v5, a3, a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F6E2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateCircularBufferToTensor(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  int v7 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v6);
  if (v20 < 0) {
    operator delete(__p);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  uint64_t v9 = MIL::IRValueType::AsTensorType(OutputType);
  Sliceuint64_t Shape = MIL::IRCircularBufferValueType::GetSliceShape(v7);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  size_t v12 = *(void *)(SliceShape + 8) - *(void *)SliceShape;
  if (v12 == *(void *)(v11 + 8) - *(void *)v11 && !memcmp(*(const void **)SliceShape, *(const void **)v11, v12))
  {
    MIL::ValidationResult::ValidationResult(a2);
  }
  else
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v17 = *LocationPtr;
    uint64_t v18 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "Output shape must match the input shape.");
    MIL::ValidationResult::ValidationResult(a2, &v17, 313, v15);
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_20F6E2FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceCircularBufferToTensor(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  uint64_t v6 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  Sliceuint64_t Shape = MIL::IRCircularBufferValueType::GetSliceShape(v6);
  __p[1] = 0;
  uint64_t v9 = 0;
  __p[0] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)SliceShape, *(void *)(SliceShape + 8), (uint64_t)(*(void *)(SliceShape + 8) - *(void *)SliceShape) >> 3);
  MIL::IRCircularBufferValueType::GetDataType(v6);
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F6E3100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateTensorToCircularBuffer(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v53, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v54) < 0) {
    operator delete(v53);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "strides");
  int v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7);
  if (SHIBYTE(v54) < 0) {
    operator delete(v53);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "interleave_factors");
  uint64_t v9 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v54) < 0) {
    operator delete(v53);
  }
  Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  size_t v12 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  uint64_t v13 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v12);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  BOOL v15 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v51 = *LocationPtr;
  uint64_t v52 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v6, v8, v10, (uint64_t)&v51, (MIL::ValidationResult *)&v53);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v53)) {
    goto LABEL_37;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  Sliceuint64_t Shape = MIL::IRCircularBufferValueType::GetSliceShape(v13);
  size_t v18 = *(void *)(v16 + 8) - *(void *)v16;
  if (v18 == *(void *)(SliceShape + 8) - *(void *)SliceShape
    && !memcmp(*(const void **)v16, *(const void **)SliceShape, v18))
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "wrap_dim");
    Parameteruint64_t Value = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v42, 0);
    unint64_t v23 = MIL::IRValue::GetScalar<long long>(ParameterValue);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "slice_wrap_dim_size");
    uint64_t v24 = (const void *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v42, 0);
    uint64_t v25 = MIL::IRValue::GetScalar<long long>(v24);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "shape");
    long long v26 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v42, 0);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    uint64_t v27 = (uint64_t *)MIL::IRValue::AsTensor(v26);
    uint64_t Data = MIL::IRTensorValue::GetDataView<long long>(v27);
    unint64_t v46 = v28;
    uint64_t v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v30 = (std::__shared_weak_count *)v29[1];
    v41[0] = *v29;
    v41[1] = (uint64_t)v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::MILResult::operator=((uint64_t)&v53, (uint64_t)v42);
    int v57 = v44;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v42);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v53))
    {
      if (!v46)
      {
LABEL_36:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
        goto LABEL_38;
      }
      unint64_t v31 = 0;
      while (1)
      {
        unint64_t v32 = *(void *)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, v31);
        uint64_t v33 = (void *)MIL::IRCircularBufferValueType::GetSliceShape(v13);
        if (v31 >= (uint64_t)(v33[1] - *v33) >> 3) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(*v33 + 8 * v31) + 16))(*(void *)(*v33 + 8 * v31));
        if (v32 < (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34)) {
          break;
        }
        if (++v31 >= v46) {
          goto LABEL_36;
        }
      }
      long long v35 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v36 = (std::__shared_weak_count *)v35[1];
      uint64_t v39 = *v35;
      std::string v40 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v37, "Buffer shape is smaller than slice shape dimension.");
      MIL::ValidationResult::ValidationResult(a2, &v39, 315, v37);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      long long v21 = v40;
      if (v40) {
        goto LABEL_19;
      }
      goto LABEL_38;
    }
LABEL_37:
    *(_OWORD *)(a2 + 8) = v54;
    long long v54 = 0uLL;
    *(_OWORD *)(a2 + 24) = v55;
    *(void *)(a2 + 40) = v56;
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v57;
    goto LABEL_38;
  }
  int v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v49 = *v19;
  char v50 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Output shape must match the input shape.");
  MIL::ValidationResult::ValidationResult(a2, &v49, 313, __p);
  if (v48 < 0) {
    operator delete(__p[0]);
  }
  long long v21 = v50;
  if (v50) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_38:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v53);
}

void sub_20F6E35C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v38 - 120));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::anonymous namespace'::ValidateWrapDim(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  if ((a1 & 0x8000000000000000) != 0 || a3[1] <= a1)
  {
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    uint64_t v16 = *a4;
    uint64_t v17 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "Wrap dimension must be between 0 and num of dimensions - 1.");
    MIL::ValidationResult::ValidationResult(a5, &v16, 315, v14);
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    uint64_t v8 = v17;
    if (v17) {
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 < 0 || *(void *)MIL::Util::Span<long long const,18446744073709551615ul>::At(a3, a1) < a2)
    {
      int v7 = (std::__shared_weak_count *)a4[1];
      uint64_t v12 = *a4;
      uint64_t v13 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Buffer shape is smaller than slice shape dimension.");
      MIL::ValidationResult::ValidationResult(a5, &v12, 315, __p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = v13;
      if (!v13) {
        return;
      }
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      return;
    }
    MIL::ValidationResult::ValidationResult(a5);
  }
}

void sub_20F6E37E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceTensorToCircularBuffer(MIL::IRConstantProperty **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t **a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v87, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v87);
  uint64_t v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v87, "shape");
  int v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v87);
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v87, "strides");
  uint64_t v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v87);
  uint64_t v13 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v12);
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v87, "interleave_factors");
  uint64_t v14 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v87);
  char v15 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v14);
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  uint64_t v16 = (std::__shared_weak_count *)a2[1];
  uint64_t v85 = *a2;
  uint64_t v86 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v9, v13, v15, (uint64_t)&v85, (MIL::ValidationResult *)v87);
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v87))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v83, (uint64_t)v87);
    v83[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v84 = v89;
    MIL::ValidationError::ValidationError(exception, v83);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "wrap_dim");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  size_t v18 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<long long>(v18);
  size_t v74 = v19;
  char v20 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, 0);
  if (SBYTE7(v79) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_wrap_dim_size");
  long long v21 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  char v22 = (uint64_t *)MIL::IRValue::AsTensor(v21);
  uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<long long>(v22);
  size_t v74 = v23;
  uint64_t v24 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&Data, 0);
  if (SBYTE7(v79) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  uint64_t v25 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  long long v26 = (uint64_t *)MIL::IRValue::AsTensor(v25);
  v82[0] = MIL::IRTensorValue::GetDataView<long long>(v26);
  v82[1] = v27;
  if (SBYTE7(v79) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v28 = *v20;
  uint64_t v29 = *v24;
  uint64_t v30 = *a2;
  unint64_t v31 = (std::__shared_weak_count *)a2[1];
  v77[0] = v30;
  v77[1] = (uint64_t)v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::MILResult::operator=((uint64_t)v87, (uint64_t)__p);
  int v89 = v81;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v87))
  {
    uint64_t v66 = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v75, (uint64_t)v87);
    v75[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v76 = v89;
    MIL::ValidationError::ValidationError(v66, v75);
  }
  unint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
  if (v32[1] == *v32) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v33 = (*(uint64_t (**)(void))(**(void **)*v32 + 16))();
  unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 48))(v33);
  std::vector<MIL::IRDimension const*>::vector(&Data, v34);
  if (v74 != Data)
  {
    unint64_t v35 = 0;
    do
    {
      uint64_t v36 = *a1;
      int v37 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v82, v35);
      uint64_t v38 = MIL::IRConstantDimension::Make(v36, *v37);
      *((void *)Data + v35++) = v38;
    }
    while (v35 < (v74 - (unsigned char *)Data) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  uint64_t v39 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  std::string v40 = (uint64_t *)MIL::IRValue::AsTensor(v39);
  v72[0] = MIL::IRTensorValue::GetDataView<long long>(v40);
  v72[1] = v41;
  if (SBYTE7(v79) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "interleave_factors");
  unint64_t v42 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  char v43 = (void *)MIL::IRValue::AsTensor(v42);
  v71[0] = MIL::IRTensorValue::GetDataView<unsigned char>(v43);
  v71[1] = v44;
  if (SBYTE7(v79) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v45 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v13 + 96))(v13);
  if (*(void *)(v45 + 8) == *(void *)v45) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v46 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v45);
  unint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 48))(v46);
  std::vector<MIL::IRProperty const*>::vector(&v69, v47);
  if (v70 != v69)
  {
    unint64_t v48 = 0;
    do
    {
      uint64_t v49 = *a1;
      char v50 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v72, v48);
      uint64_t Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v49, *v50);
      *((void *)v69 + v48++) = Int64Scalar;
    }
    while (v48 < (v70 - (unsigned char *)v69) >> 3);
  }
  uint64_t v52 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v15 + 96))(v15);
  if (*(void *)(v52 + 8) == *(void *)v52) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v53 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v52);
  unint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
  std::vector<MIL::IRProperty const*>::vector(&v67, v54);
  if (v68 != v67)
  {
    unint64_t v55 = 0;
    do
    {
      uint64_t v56 = *a1;
      int v57 = (unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(v71, v55);
      uint64_t UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(v56, (MIL::MILContext *)*v57);
      *((void *)v67 + v55++) = UInt8Scalar;
    }
    while (v55 < (v68 - (unsigned char *)v67) >> 3);
  }
  std::string::size_type v59 = (void *)MIL::IRConstantProperty::MakeInt64Scalar(*a1, *v20);
  uint64_t v60 = (void (__cdecl *)(std::__shared_weak_count *__hidden))MIL::IRConstantDimension::Make(*a1, *v24);
  uint64_t v61 = *a1;
  int v62 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 88))(v9);
  *(_OWORD *)std::string __p = 0u;
  long long v79 = 0u;
  int v80 = 1065353216;
  uint64_t v63 = MIL::IRCircularBufferValueType::MakeWithShape(v61, v62, (uint64_t)&Data, (uint64_t)&v69, (uint64_t)&v67, v59, v60, (uint64_t *)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::string::size_type v64 = (uint64_t *)operator new(8uLL);
  *a4 = v64;
  *v64++ = v63;
  a4[1] = v64;
  a4[2] = v64;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (Data)
  {
    size_t v74 = Data;
    operator delete(Data);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v87);
}

void sub_20F6E3F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a22);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v36 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CircularBufferToTensor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E4FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x370]);
  unint64_t v64 = STACK[0x308];
  STACK[0x308] = 0;
  if (v64) {
    (*(void (**)(unint64_t))(*(void *)v64 + 8))(v64);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  long long v65 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v65;
    operator delete(v65);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a63) {
    operator delete(a63);
  }
  uint64_t v66 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v66;
    operator delete(v66);
  }
  unsigned int v67 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v67;
    operator delete(v67);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x320], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x368], 0);
  _Unwind_Resume(a1);
}

void sub_20F6E5570()
{
}

void sub_20F6E5578()
{
}

void sub_20F6E5580()
{
}

void sub_20F6E5588()
{
}

void sub_20F6E5590()
{
}

void MIL::Operators::Common::ios17::PixelBufferToTensor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E66D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 128));
  unint64_t v73 = STACK[0x218];
  STACK[0x218] = 0;
  if (v73) {
    (*(void (**)(unint64_t))(*(void *)v73 + 8))(v73);
  }
  if (STACK[0x210]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x210]);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59) {
    operator delete(a59);
  }
  if (a62) {
    operator delete(a62);
  }
  if (a65) {
    operator delete(a65);
  }
  if (a68) {
    operator delete(a68);
  }
  size_t v74 = *(void **)(v71 - 216);
  if (v74)
  {
    *(void *)(v71 - 208) = v74;
    operator delete(v74);
  }
  if (a71) {
    operator delete(a71);
  }
  long long v75 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x260], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::TensorBufferToTensor::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E79A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x250]);
  if (a49) {
    (*(void (**)(void *))(*(void *)a49 + 8))(a49);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (__p)
  {
    a56 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  unint64_t v72 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v72;
    operator delete(v72);
  }
  unint64_t v73 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v73;
    operator delete(v73);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::TensorToCircularBuffer::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6E922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v72 - 112));
  unint64_t v74 = STACK[0x348];
  STACK[0x348] = 0;
  if (v74) {
    (*(void (**)(unint64_t))(*(void *)v74 + 8))(v74);
  }
  if (STACK[0x340]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x340]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a33);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a47);
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a61);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  long long v75 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v75);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&STACK[0x210]);
  int v76 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v76;
    operator delete(v76);
  }
  uint64_t v77 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v77;
    operator delete(v77);
  }
  uint64_t v78 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v78;
    operator delete(v78);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  long long v79 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v79;
    operator delete(v79);
  }
  int v80 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v80;
    operator delete(v80);
  }
  int v81 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v81;
    operator delete(v81);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v72 - 208);
  uint64_t v82 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v82;
    operator delete(v82);
  }
  uint64_t v83 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v83;
    operator delete(v83);
  }
  int v84 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v84;
    operator delete(v84);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x350], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B8], 0);
  _Unwind_Resume(a1);
}

void sub_20F6E9860()
{
}

void sub_20F6E9868()
{
}

void sub_20F6E9870()
{
}

void sub_20F6E9878()
{
}

void sub_20F6E9880()
{
}

void sub_20F6E9888()
{
}

void sub_20F6E9894()
{
}

void MIL::Operators::Common::ios17::TensorToPixelBuffer::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6EAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v63 - 136));
  unint64_t v65 = STACK[0x208];
  STACK[0x208] = 0;
  if (v65) {
    (*(void (**)(unint64_t))(*(void *)v65 + 8))(v65);
  }
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v63 - 224);
  uint64_t v66 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v66;
    operator delete(v66);
  }
  unsigned int v67 = *(void **)(v63 - 160);
  if (v67)
  {
    *(void *)(v63 - 152) = v67;
    operator delete(v67);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x220], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::TensorToTensorBuffer::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6EC0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,void **a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x278]);
  if (a61) {
    (*(void (**)(uint64_t))(*(void *)a61 + 8))(a61);
  }
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a60);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a44) {
    operator delete(a44);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a53) {
    operator delete(a53);
  }
  if (a56) {
    operator delete(a56);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  unint64_t v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  unint64_t v74 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v74;
    operator delete(v74);
  }
  long long v75 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v75;
    operator delete(v75);
  }
  int v76 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v76;
    operator delete(v76);
  }
  uint64_t v77 = *(void **)(v71 - 160);
  if (v77)
  {
    *(void *)(v71 - 152) = v77;
    operator delete(v77);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x270], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BatchNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6EE724(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x460]);
  unint64_t v2 = STACK[0x3E8];
  STACK[0x3E8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x3E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3E0]);
  }
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x4D8];
  if (STACK[0x4D8])
  {
    STACK[0x4E0] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3F0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x458], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::InstanceNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6F0BCC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x340]);
  unint64_t v2 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x2E0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E0]);
  }
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2F0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x338], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::L2Norm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6F26B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x220]);
  if (a70) {
    (*(void (**)(uint64_t))(*(void *)a70 + 8))(a70);
  }
  if (a69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a69);
  }
  unint64_t v73 = *(void **)(v71 - 128);
  if (v73)
  {
    *(void *)(v71 - 120) = v73;
    operator delete(v73);
  }
  unint64_t v74 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LayerNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6F4328(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x290]);
  unint64_t v3 = STACK[0x228];
  STACK[0x228] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x220]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x220]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x288], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LocalResponseNorm::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F6F6124(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2D0]);
  unint64_t v3 = STACK[0x268];
  STACK[0x268] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x260]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x260]);
  }
  unint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x270], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDequantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  uint64_t v8 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  BOOL v10 = IsParameterSet;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (v10) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v12 = 0;
    unsigned __int8 v13 = 0;
    goto LABEL_12;
  }
  if (!IsParameterSet) {
    goto LABEL_11;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  uint64_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  unsigned __int8 v13 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  BOOL v14 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  BOOL v15 = v14;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (v15) {
      goto LABEL_14;
    }
LABEL_18:
    size_t v18 = 0;
    goto LABEL_19;
  }
  if (!v14) {
    goto LABEL_18;
  }
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  uint64_t v16 = (const void *)MIL::IROperation::GetParameterValue(this);
  unsigned int v17 = MIL::IRValue::GetScalar<int>(v16);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  size_t v18 = (MIL::Validation *)(v17 | 0x100000000);
LABEL_19:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v20 = (std::__shared_weak_count *)LocationPtr[1];
  v21[0] = *LocationPtr;
  v21[1] = (uint64_t)v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v23;
    long long v23 = 0uLL;
    *(_OWORD *)(a2 + 24) = v24;
    *(void *)(a2 + 40) = v25;
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v26;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
}

void sub_20F6F6B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateDequantizeInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "dequantize");
  uint64_t v14 = *a6;
  BOOL v15 = (std::__shared_weak_count *)a6[1];
  v16[0] = v14;
  v16[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F6F6C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicDequantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Operators::Common::ios17::CustomValidators::ValidateDequantize(this, (uint64_t)v4);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v4))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v5;
    long long v5 = 0uLL;
    *(_OWORD *)(a2 + 24) = v6;
    *(void *)(a2 + 40) = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v8;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v4);
}

void sub_20F6F6D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateDynamicQuantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v6 = MIL::IRValue::GetScalar<BOOL>(ParameterValue);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  if (v6) {
    uint64_t v7 = 3;
  }
  else {
    uint64_t v7 = 2;
  }
  int v8 = (void *)(*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(void *)this + 176))(this);
  if (v7 == (uint64_t)(v8[1] - *v8) >> 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    BOOL v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(v45) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
    BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
    BOOL v12 = IsParameterSet;
    if (SHIBYTE(v45) < 0)
    {
      operator delete(__p);
      if (v12) {
        goto LABEL_11;
      }
    }
    else if (IsParameterSet)
    {
LABEL_11:
      std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
      unsigned __int8 v13 = (const void *)MIL::IROperation::GetParameterValue(this);
      int v14 = MIL::IRValue::GetScalar<int>(v13);
      LOBYTE(v12) = v14;
      unsigned int v15 = v14 & 0xFFFFFF00;
      if (SHIBYTE(v45) < 0) {
        operator delete(__p);
      }
      uint64_t v16 = 0x100000000;
      goto LABEL_25;
    }
    uint64_t v16 = 0;
    unsigned int v15 = 0;
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
    long long v21 = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(v21, &v39);
    if (SHIBYTE(v45) < 0) {
      operator delete(__p);
    }
    if (v8[1] - *v8 <= 0x10uLL) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v8 + 16));
    long long v23 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
    if (v6)
    {
      if (v8[1] - *v8 <= 0x20uLL) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      long long v24 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v8 + 32));
      uint64_t v25 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v24);
      char v26 = 1;
    }
    else
    {
      uint64_t v25 = 0;
      char v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(void *)this + 56))(this);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v29 = (MIL::Validation *)(v16 | v15 | v12);
    uint64_t v30 = (std::__shared_weak_count *)LocationPtr[1];
    v38[0] = *LocationPtr;
    v38[1] = (uint64_t)v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p)) {
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(v34, "dynamic_quantize");
    unint64_t v31 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    unint64_t v32 = (std::__shared_weak_count *)v31[1];
    v33[0] = *v31;
    v33[1] = (uint64_t)v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::MILResult::operator=((uint64_t)&__p, (uint64_t)v36);
    int v48 = v37;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v36);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
    {
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
    }
    else
    {
LABEL_45:
      *(_OWORD *)(a2 + 8) = v45;
      long long v45 = 0uLL;
      *(_OWORD *)(a2 + 24) = v46;
      *(void *)(a2 + 40) = v47;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(void *)a2 = &unk_26C25DB50;
      *(_DWORD *)(a2 + 48) = v48;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The length of outputs(", 22);
  unsigned int v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") does not match the expected(", 30);
  char v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  int v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  char v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v42 = *v19;
  char v43 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a2, &v42, 310, &v40);
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::string __p = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&long long v45 = MEMORY[0x263F8C318] + 16;
  if (v50 < 0) {
    operator delete(v49);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](&v51);
}

void sub_20F6F7290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a40);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ValidateCommonInputTypes(MIL::IRTensorValueType *this@<X1>, MIL::IRTensorValueType *a2@<X0>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  int v15 = BYTE4(a5);
  uint64_t v16 = a4;
  if (MIL::IRTensorValueType::IsScalar(this))
  {
    if (!v16 || MIL::IRTensorValueType::IsScalar(a3))
    {
      if (v15)
      {
        unsigned int v17 = (std::__shared_weak_count *)a7[1];
        uint64_t v106 = *a7;
        char v107 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        std::string::size_type v105 = v18->__r_.__value_.__r.__words[2];
        long long v104 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a8, &v106, 315, &v104);
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        char v20 = v107;
        if (!v107) {
          return;
        }
LABEL_73:
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        return;
      }
      goto LABEL_107;
    }
    uint64_t v42 = (std::__shared_weak_count *)a7[1];
    uint64_t v110 = *a7;
    uint64_t v111 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    std::string::size_type v109 = v43->__r_.__value_.__r.__words[2];
    long long v108 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a8, &v110, 315, &v108);
    if (SHIBYTE(v109) < 0) {
      operator delete((void *)v108);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    char v20 = v111;
    if (v111) {
      goto LABEL_73;
    }
  }
  else if (v16 && MIL::IRTensorValueType::IsScalar(a3))
  {
    long long v21 = (std::__shared_weak_count *)a7[1];
    uint64_t v102 = *a7;
    unint64_t v103 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v101 = v22->__r_.__value_.__r.__words[2];
    long long v100 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a8, &v102, 315, &v100);
    if (SHIBYTE(v101) < 0) {
      operator delete((void *)v100);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    char v20 = v103;
    if (v103) {
      goto LABEL_73;
    }
  }
  else if (v15)
  {
    int v24 = MIL::IRTensorValueType::Rank(a2);
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a2 + 104))(a2)
      && !MIL::Validation::IsAxisValidForRank(a5, v24))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v92);
      unint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"For operator: ", 14);
      int v65 = *(char *)(a6 + 23);
      if (v65 >= 0) {
        uint64_t v66 = a6;
      }
      else {
        uint64_t v66 = *(void *)a6;
      }
      if (v65 >= 0) {
        uint64_t v67 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        uint64_t v67 = *(void *)(a6 + 8);
      }
      uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)", 'axis' must be within range (-data_rank - 1, data_rank) (exclusive). Provided axis: ", 86);
      uint64_t v69 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"for input 'data' with rank: ", 28);
      std::ostream::operator<<();
      uint64_t v70 = (std::__shared_weak_count *)a7[1];
      uint64_t v90 = *a7;
      unint64_t v91 = v70;
      if (v70) {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a8, &v90, 315, &v88);
      if (v89 < 0) {
        operator delete(v88);
      }
      if (v91) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v91);
      }
      v92.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words
                                + *(void *)(v92.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                  + 24);
      v92.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v94 < 0) {
        operator delete(v93);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x21056C620](&v95);
    }
    else
    {
      uint64_t v25 = **(MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
      if (!v16
        || (char v26 = **(MIL::IRDimension ***)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a3 + 96))(a3),
            v26 == v25))
      {
        if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)a2 + 104))(a2)
          || (int v48 = *(MIL::IRDimension **)(*(void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2)
                                         + 8 * ((v24 & ((int)a5 >> 31)) + (int)a5)),
              v48 == v25))
        {
LABEL_107:
          MIL::ValidationResult::ValidationResult(a8);
          return;
        }
        uint64_t v49 = (std::__shared_weak_count *)a7[1];
        uint64_t v73 = *a7;
        unint64_t v74 = v49;
        if (v49) {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = MIL::IRDimension::AsConstant(v25);
        (*(void (**)(void **__return_ptr))(*(void *)v52 + 40))(&v78);
        if ((v80 & 0x80u) == 0) {
          uint64_t v53 = (const std::string::value_type *)&v78;
        }
        else {
          uint64_t v53 = (const std::string::value_type *)v78;
        }
        if ((v80 & 0x80u) == 0) {
          std::string::size_type v54 = v80;
        }
        else {
          std::string::size_type v54 = v79;
        }
        unint64_t v55 = std::string::append(&v82, v53, v54);
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        uint64_t v59 = MIL::IRDimension::AsConstant(v48);
        (*(void (**)(void **__return_ptr))(*(void *)v59 + 40))(&v75);
        if ((v77 & 0x80u) == 0) {
          uint64_t v60 = (const std::string::value_type *)&v75;
        }
        else {
          uint64_t v60 = (const std::string::value_type *)v75;
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v61 = v77;
        }
        else {
          std::string::size_type v61 = v76;
        }
        int v62 = std::string::append(&v92, v60, v61);
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        std::string::size_type v72 = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v71 = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a8, &v73, 315, v71);
        if (SHIBYTE(v72) < 0) {
          operator delete(v71[0]);
        }
        if ((char)v77 < 0) {
          operator delete(v75);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if ((char)v80 < 0) {
          operator delete(v78);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        char v20 = v74;
        if (v74) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v27 = (std::__shared_weak_count *)a7[1];
        uint64_t v86 = *a7;
        std::string::size_type v87 = v27;
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        uint64_t v30 = MIL::IRDimension::AsConstant(v25);
        (*(void (**)(void **__return_ptr))(*(void *)v30 + 40))(&v78);
        if ((v80 & 0x80u) == 0) {
          unint64_t v31 = (const std::string::value_type *)&v78;
        }
        else {
          unint64_t v31 = (const std::string::value_type *)v78;
        }
        if ((v80 & 0x80u) == 0) {
          std::string::size_type v32 = v80;
        }
        else {
          std::string::size_type v32 = v79;
        }
        uint64_t v33 = std::string::append(&v82, v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        uint64_t v37 = MIL::IRDimension::AsConstant(v26);
        (*(void (**)(void **__return_ptr))(*(void *)v37 + 40))(&v75);
        if ((v77 & 0x80u) == 0) {
          uint64_t v38 = (const std::string::value_type *)&v75;
        }
        else {
          uint64_t v38 = (const std::string::value_type *)v75;
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v39 = v77;
        }
        else {
          std::string::size_type v39 = v76;
        }
        std::string v40 = std::string::append(&v92, v38, v39);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        std::string::size_type v85 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a8, &v86, 315, __p);
        if (SHIBYTE(v85) < 0) {
          operator delete(__p[0]);
        }
        if ((char)v77 < 0) {
          operator delete(v75);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if ((char)v80 < 0) {
          operator delete(v78);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        char v20 = v87;
        if (v87) {
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    long long v45 = (std::__shared_weak_count *)a7[1];
    uint64_t v98 = *a7;
    char v99 = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    std::string::size_type v97 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string::size_type v96 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a8, &v98, 315, v96);
    if (SHIBYTE(v97) < 0) {
      operator delete(v96[0]);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    char v20 = v99;
    if (v99) {
      goto LABEL_73;
    }
  }
}

void sub_20F6F7D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

MIL::MILResult *anonymous namespace'::ValidateOuputDtypeAndZeroPointTypes@<X0>(uint64_t a1@<X0>, char a2@<W1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  if (!a2) {
    return MIL::ValidationResult::ValidationResult(a6);
  }
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  MIL::IRDataTypeToString(v10, &__p);
  if ((v45 & 0x80u) == 0) {
    size_t v11 = v45;
  }
  else {
    size_t v11 = __n;
  }
  BOOL v12 = (const void *)*((unsigned __int8 *)a3 + 23);
  int v13 = (char)v12;
  if ((char)v12 < 0) {
    BOOL v12 = a3[1];
  }
  if ((const void *)v11 != v12)
  {
    if ((v45 & 0x80) != 0) {
      operator delete(__p);
    }
    goto LABEL_24;
  }
  if (v13 >= 0) {
    int v14 = (unsigned __int8 *)a3;
  }
  else {
    int v14 = (unsigned __int8 *)*a3;
  }
  if ((v45 & 0x80) != 0)
  {
    long long v19 = __p;
    int v20 = memcmp(__p, v14, __n);
    operator delete(v19);
    if (v20) {
      goto LABEL_24;
    }
    return MIL::ValidationResult::ValidationResult(a6);
  }
  if (!v45) {
    return MIL::ValidationResult::ValidationResult(a6);
  }
  uint64_t v15 = 0;
  do
  {
    int v16 = *((unsigned __int8 *)&__p + v15);
    int v17 = v14[v15];
  }
  while (v16 == v17 && v45 - 1 != v15++);
  if (v16 == v17) {
    return MIL::ValidationResult::ValidationResult(a6);
  }
LABEL_24:
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"For operator: ", 14);
  int v22 = *(char *)(a4 + 23);
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *(void *)a4;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v24 = *(void *)(a4 + 8);
  }
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
  char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", zero_point (", 14);
  MIL::IRDataTypeToString(v10, v41);
  if ((v42 & 0x80u) == 0) {
    uint64_t v27 = v41;
  }
  else {
    uint64_t v27 = (void **)v41[0];
  }
  if ((v42 & 0x80u) == 0) {
    uint64_t v28 = v42;
  }
  else {
    uint64_t v28 = (uint64_t)v41[1];
  }
  long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") and output_dtype (", 20);
  int v31 = *((char *)a3 + 23);
  if (v31 >= 0) {
    uint64_t v32 = (uint64_t)a3;
  }
  else {
    uint64_t v32 = (uint64_t)*a3;
  }
  if (v31 >= 0) {
    uint64_t v33 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v33 = (uint64_t)a3[1];
  }
  long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") do not have consistent data types.", 36);
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  char v35 = (std::__shared_weak_count *)a5[1];
  uint64_t v39 = *a5;
  std::string v40 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a6, &v39, 315, &v37);
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::string __p = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  size_t __n = MEMORY[0x263F8C318] + 16;
  if (v47 < 0) {
    operator delete(v46);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (MIL::MILResult *)MEMORY[0x21056C620](&v48);
}

void sub_20F6F82F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateQuantize(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  int v8 = (uint64_t *)MIL::IRValue::AsTensor(ParameterValue);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  BOOL v10 = IsParameterSet;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (v10) {
      goto LABEL_7;
    }
LABEL_11:
    BOOL v12 = 0;
    char v13 = 0;
    goto LABEL_12;
  }
  if (!IsParameterSet) {
    goto LABEL_11;
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&__p, "zero_point");
  size_t v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  BOOL v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  char v13 = 1;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  BOOL v14 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p);
  BOOL v15 = v14;
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (v15) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v21 = 0;
    int v20 = 0;
    unsigned int v19 = 0;
    goto LABEL_19;
  }
  if (!v14) {
    goto LABEL_18;
  }
LABEL_14:
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  int v16 = (const void *)MIL::IROperation::GetParameterValue(this);
  int v17 = MIL::IRValue::GetScalar<int>(v16);
  unsigned __int8 v18 = v17;
  unsigned int v19 = v17 & 0xFFFFFF00;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  int v20 = v18;
  uint64_t v21 = 0x100000000;
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
  int v22 = (const void *)MIL::IROperation::GetParameterValue(this);
  MIL::IRValue::GetScalar<std::string>(v22, &v31);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v24 = (std::__shared_weak_count *)LocationPtr[1];
  v25[0] = *LocationPtr;
  v25[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v27;
    long long v27 = 0uLL;
    *(_OWORD *)(a2 + 24) = v28;
    *(void *)(a2 + 40) = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    *(void *)a2 = &unk_26C25DB50;
    *(_DWORD *)(a2 + 48) = v30;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_20F6F8620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateQuantizeInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, char a4@<W3>, MIL::Validation *a5@<X4>, const void **a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "quantize");
  int v16 = (std::__shared_weak_count *)a7[1];
  v25[0] = *a7;
  v25[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v26)) {
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "quantize");
  uint64_t v17 = *a7;
  unsigned __int8 v18 = (std::__shared_weak_count *)a7[1];
  v19[0] = v17;
  v19[1] = (uint64_t)v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::MILResult::operator=((uint64_t)v26, (uint64_t)__p);
  int v30 = v24;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v26))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
  }
  else
  {
LABEL_16:
    *(_OWORD *)(a8 + 8) = v27;
    long long v27 = 0uLL;
    *(_OWORD *)(a8 + 24) = v28;
    *(void *)(a8 + 40) = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    *(void *)a8 = &unk_26C25DB50;
    *(_DWORD *)(a8 + 48) = v30;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v26);
}

void sub_20F6F884C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a27);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize(uint64_t a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  int v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  int v8 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  BOOL v10 = (MIL::IRTensorValueType *)v9;
  if (v30 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_7;
    }
  }
  else if (v9)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
    size_t v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
    BOOL v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    unsigned __int8 v12 = 1;
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    char v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    BOOL v14 = v13;
    if (v30 < 0)
    {
      operator delete(__p[0]);
      if (v14) {
        goto LABEL_14;
      }
    }
    else if (v13)
    {
LABEL_14:
      std::string::basic_string[abi:ne180100]<0>(__p, "axis");
      BOOL v15 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
      int v16 = MIL::IRValue::GetScalar<int>(v15);
      unsigned __int8 v17 = v16;
      LODWORD(v14) = v16 & 0xFFFFFF00;
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v18 = 0x100000000;
LABEL_19:
      unsigned int v19 = (MIL::Validation *)(v18 | v14 | v17);
      uint64_t v20 = *a2;
      char v21 = (std::__shared_weak_count *)a2[1];
      v28[0] = v20;
      v28[1] = (uint64_t)v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
      {
        uint64_t v22 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
        memset(v25, 0, sizeof(v25));
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v25, *(const void **)v22, *(void *)(v22 + 8), (uint64_t)(*(void *)(v22 + 8) - *(void *)v22) >> 3);
        uint64_t v23 = (*(uint64_t (**)(uint64_t *))(*v8 + 32))(v8);
        (*(void (**)(uint64_t))(*(void *)v23 + 88))(v23);
        MIL::IRTensorValueType::MakeWithShape();
      }
      exception = __cxa_allocate_exception(0x48uLL);
      MIL::MILResult::MILResult(v26, (uint64_t)__p);
      v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
      int v27 = v31;
      MIL::ValidationError::ValidationError(exception, v26);
    }
    uint64_t v18 = 0;
    unsigned __int8 v17 = 0;
    goto LABEL_19;
  }
  unsigned __int8 v12 = 0;
  goto LABEL_12;
}

void sub_20F6F8BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicDequantize(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDequantize(a1, v4, a3);
}

void sub_20F6F8D0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceDynamicQuantize(uint64_t a1, void *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v6 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  char v8 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  BOOL v10 = v9;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(__p);
    if (v10)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
      size_t v11 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
      unsigned __int8 v12 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v11);
      if (SHIBYTE(v39) < 0) {
        operator delete(__p);
      }
LABEL_11:
      std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
      char v13 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
      MIL::IRValue::GetScalar<std::string>(v13, &v40);
      if (SHIBYTE(v39) < 0)
      {
        operator delete(__p);
        if (!v10) {
          goto LABEL_16;
        }
      }
      else if (!v10)
      {
        goto LABEL_16;
      }
      BOOL v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
      if (!MIL::Validation::IsAxisValidForRank(v12, (v14[1] - *v14) >> 3))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
        int v27 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" for input_ndim: ", 17);
        (*(void (**)(uint64_t))(*(void *)v6 + 96))(v6);
        std::ostream::operator<<();
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::logic_error::logic_error(exception, &v36);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
LABEL_16:
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
      std::string __p = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&__p))
      {
        memset(&v36, 0, sizeof(v36));
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v36, __p, v38, (v38 - (uint64_t)__p) >> 3);
        char v30 = 0;
        int v31 = 0;
        uint64_t v32 = 0;
        if (v10)
        {
          int v16 = __p;
          uint64_t v17 = v38;
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v32, 1uLL);
          uint64_t v20 = &v18[8 * v19];
          *(void *)uint64_t v18 = v16[(int)(v12 + (((unint64_t)(v17 - (void)v16) >> 3) & ((int)v12 >> 31)))];
          char v21 = v18 + 8;
          uint64_t v23 = (char *)v30;
          uint64_t v22 = v31;
          if (v31 != v30)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v18 - 1) = v24;
              v18 -= 8;
            }
            while (v22 != v23);
            uint64_t v22 = (char *)v30;
          }
          char v30 = v18;
          int v31 = v21;
          uint64_t v32 = v20;
          if (v22) {
            operator delete(v22);
          }
          int v31 = v21;
        }
        MIL::StringToIRDataType((const void **)&v40.__r_.__value_.__l.__data_, 0);
        (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
        if (v8)
        {
          memset(v29, 0, sizeof(v29));
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v29, v30, (uint64_t)v31, (v31 - (unsigned char *)v30) >> 3);
          MIL::IRTensorValueType::MakeWithShape();
        }
        MIL::IRTensorValueType::MakeWithShape();
      }
      uint64_t v25 = __cxa_allocate_exception(0x48uLL);
      uint64_t v26 = a2[1];
      v34[0] = *a2;
      v34[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v33, "Variadic shape is not supported for dynamic_quantization type inference.");
      MIL::ValidationResult::ValidationResult(v35, v34, 315, v33);
      MIL::ValidationError::ValidationError(v25, v35);
    }
  }
  else if (v9)
  {
    goto LABEL_7;
  }
  unsigned __int8 v12 = 0;
  goto LABEL_11;
}

void sub_20F6F926C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a37);
      if (*(char *)(v44 - 81) < 0) {
        operator delete(*(void **)(v44 - 104));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceQuantize(uint64_t a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  uint64_t v6 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  uint64_t v8 = MIL::IRValue::AsTensor(SingleValue);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  BOOL v10 = v9;
  if (v30 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_7;
    }
  }
  else if (v9)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
    size_t v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
    unsigned __int8 v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    LOBYTE(v10) = 1;
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    char v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    char v24 = (char)v10;
    if (v13)
    {
      BOOL v14 = (uint64_t *)v8;
      std::string::basic_string[abi:ne180100]<0>(__p, "axis");
      uint64_t v15 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
      int v16 = MIL::IRValue::GetScalar<int>(v15);
      LOBYTE(v13) = v16;
      unsigned int v17 = v16 & 0xFFFFFF00;
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v18 = 0x100000000;
    }
    else
    {
      BOOL v14 = (uint64_t *)v8;
      uint64_t v18 = 0;
      unsigned int v17 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
    uint64_t v19 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    MIL::IRValue::GetScalar<std::string>(v19, &v32);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v20 = *a2;
    char v21 = (std::__shared_weak_count *)a2[1];
    v28[0] = v20;
    v28[1] = (uint64_t)v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
    {
      uint64_t v22 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
      memset(v25, 0, sizeof(v25));
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v25, *(const void **)v22, *(void *)(v22 + 8), (uint64_t)(*(void *)(v22 + 8) - *(void *)v22) >> 3);
      MIL::StringToIRDataType((const void **)&v32.__r_.__value_.__l.__data_, 0);
      MIL::IRTensorValueType::MakeWithShape();
    }
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v26, (uint64_t)__p);
    v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v27 = v31;
    MIL::ValidationError::ValidationError(exception, v26);
  }
  unsigned __int8 v12 = 0;
  goto LABEL_12;
}

void sub_20F6F9728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a13);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a22);
  if (*(char *)(v27 - 89) < 0) {
    operator delete(*(void **)(v27 - 112));
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDequantize(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  long long v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v5 + 5));
  uint64_t v7 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if (v121 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = (uint64_t *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v8 + 5));
  if (v121 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  BOOL v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  size_t v11 = v10;
  if (v121 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_9;
    }
  }
  else if (v10)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
    unsigned __int8 v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v13 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v12 + 5));
    BOOL v14 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
    if (v121 < 0) {
      operator delete(__p[0]);
    }
    unsigned __int8 v15 = 1;
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    unsigned int v17 = v16;
    if (v121 < 0)
    {
      operator delete(__p[0]);
      if (v17) {
        goto LABEL_17;
      }
    }
    else if (v16)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(__p, "axis");
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v18) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v19 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v18 + 5));
      int v20 = MIL::IRValue::GetScalar<int>(v19);
      unsigned __int8 v21 = v20;
      unsigned int v22 = v20 & 0xFFFFFF00;
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v23 = 0x100000000;
LABEL_23:
      uint64_t v24 = v22 | v21;
      uint64_t v25 = (MIL::Validation *)(v23 | v24);
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      v128[0] = v26;
      v128[1] = (uint64_t)v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v129))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v126, (uint64_t)v129);
        v126[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
        int v127 = v130;
        MIL::ValidationError::ValidationError(exception, v126);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      long long v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v28) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v29 = (uint64_t *)*((void *)v28 + 5);
      uint64_t v31 = *v29;
      char v30 = (std::__shared_weak_count *)v29[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "scale");
      std::string v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v32) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v33 = (uint64_t *)*((void *)v32 + 5);
      uint64_t v35 = *v33;
      long long v34 = (std::__shared_weak_count *)v33[1];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
      std::string v36 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      uint64_t v37 = v36;
      if (v121 < 0)
      {
        operator delete(__p[0]);
        if (v37) {
          goto LABEL_40;
        }
      }
      else if (v36)
      {
LABEL_40:
        std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
        uint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
        if (!v38) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v39 = (uint64_t *)*((void *)v38 + 5);
        uint64_t v41 = *v39;
        std::string v40 = (std::__shared_weak_count *)v39[1];
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v121 < 0) {
          operator delete(__p[0]);
        }
LABEL_47:
        unsigned __int8 v42 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 32))(v31);
        uint64_t v43 = MIL::IRValueType::AsTensorType(v42);
        int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 88))(v43);
        if (v44 != 9)
        {
          if (v44 == 14)
          {
            uint64_t v106 = v31;
            char v107 = v30;
            if (v30) {
              atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v106, (uint64_t)v125);
            if (v107) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v107);
            }
            LOBYTE(__p[0]) = 0;
            char v122 = 0;
            if (v41)
            {
              uint64_t v104 = v41;
              std::string::size_type v105 = v40;
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v104, (uint64_t)&v137);
              std::optional<MIL::ValueInference::Tensor<unsigned char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<unsigned char>,void>((uint64_t)__p, (uint64_t)&v137);
              MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v137);
              if (v105) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v105);
              }
            }
            unsigned __int8 v45 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 32))(v35);
            uint64_t v46 = MIL::IRValueType::AsTensorType(v45);
            int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 88))(v46);
            if (v47 != 4)
            {
              if (v47 == 5)
              {
                uint64_t v102 = v35;
                unint64_t v103 = v34;
                if (v34) {
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v102, (uint64_t)v117);
                if (v103) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                }
                std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](v100, (uint64_t)__p);
                if (v17)
                {
                  ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v125);
                  uint64_t v49 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
                  if ((int)v24 < 0) {
                    int v50 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
                  }
                  else {
                    int v50 = 0;
                  }
                  uint64_t v137 = 1;
                  std::vector<unsigned long long>::vector(&v143, v49 - (v50 + (int)v24), &v137);
                  long long v51 = (void **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v117);
                  *(void *)uint64_t v143 = **v51;
                  MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v125, (uint64_t)&v137);
                  if (v101)
                  {
                    MIL::ValueInference::Tensor<unsigned char>::Reshape(v100, (uint64_t *)&v143, (uint64_t)v149);
                    MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v149, (uint64_t)&v154);
                    MIL::ValueInference::Tensor<unsigned char>::~Tensor(v149);
                    unint64_t v146 = &unk_26C259F58;
                    unint64_t v147 = MIL::MathOps::SubOp<float>;
                    std::string v148 = &v146;
                    uint64_t v52 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                    long long v135 = 0;
                    std::string v134 = 0;
                    uint64_t v136 = 0;
                    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v134, *(const void **)v52, *(void *)(v52 + 8), (uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 3);
                    MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)&v146, &v134, (uint64_t)v149);
                    if ((void)v138)
                    {
                      *((void *)&v138 + 1) = v138;
                      operator delete((void *)v138);
                    }
                    long long v138 = *(_OWORD *)&v149[8];
                    long long v139 = v150;
                    *(void *)&v149[16] = 0;
                    std::string v150 = 0;
                    *(void *)&v149[8] = 0;
                    if ((void)v140)
                    {
                      *((void *)&v140 + 1) = v140;
                      operator delete((void *)v140);
                    }
                    long long v140 = v151;
                    uint64_t v53 = v152;
                    uint64_t v152 = 0;
                    long long v151 = 0uLL;
                    uint64_t v141 = v53;
                    uint64_t v142 = v153;
                    MIL::ValueInference::Tensor<float>::~Tensor(v149);
                    if (v134)
                    {
                      long long v135 = v134;
                      operator delete(v134);
                    }
                    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v146);
                    MIL::ValueInference::Tensor<float>::~Tensor(&v154);
                  }
                  MIL::ValueInference::Tensor<float>::Reshape(v117, (uint64_t *)&v143, (uint64_t)&v154);
                  *(void *)std::string v149 = &unk_26C259F58;
                  *(void *)&v149[8] = MIL::MathOps::MulOp<float>;
                  std::string v150 = v149;
                  uint64_t v54 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                  char v132 = 0;
                  unint64_t v131 = 0;
                  uint64_t v133 = 0;
                  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, *(const void **)v54, *(void *)(v54 + 8), (uint64_t)(*(void *)(v54 + 8) - *(void *)v54) >> 3);
                  MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)v149, &v131, (uint64_t)v114);
                  if (v131)
                  {
                    char v132 = v131;
                    operator delete(v131);
                  }
                  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v149);
                  MIL::ValueInference::Tensor<float>::~Tensor(&v154);
                  MIL::ValueInference::Tensor<float>::~Tensor(&v137);
                  if (v143)
                  {
                    long long v144 = v143;
                    operator delete(v143);
                  }
                }
                else
                {
                  MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v125, (uint64_t)&v137);
                  if (v101)
                  {
                    MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v100, (uint64_t)&v154);
                    unint64_t v146 = &unk_26C259F58;
                    unint64_t v147 = MIL::MathOps::SubOp<float>;
                    std::string v148 = &v146;
                    uint64_t v88 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                    long long v144 = 0;
                    uint64_t v143 = 0;
                    uint64_t v145 = 0;
                    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v143, *(const void **)v88, *(void *)(v88 + 8), (uint64_t)(*(void *)(v88 + 8) - *(void *)v88) >> 3);
                    MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)&v146, &v143, (uint64_t)v149);
                    if ((void)v138)
                    {
                      *((void *)&v138 + 1) = v138;
                      operator delete((void *)v138);
                    }
                    long long v138 = *(_OWORD *)&v149[8];
                    long long v139 = v150;
                    *(void *)&v149[16] = 0;
                    std::string v150 = 0;
                    *(void *)&v149[8] = 0;
                    if ((void)v140)
                    {
                      *((void *)&v140 + 1) = v140;
                      operator delete((void *)v140);
                    }
                    long long v140 = v151;
                    uint64_t v89 = v152;
                    uint64_t v152 = 0;
                    long long v151 = 0uLL;
                    uint64_t v141 = v89;
                    uint64_t v142 = v153;
                    MIL::ValueInference::Tensor<float>::~Tensor(v149);
                    if (v143)
                    {
                      long long v144 = v143;
                      operator delete(v143);
                    }
                    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v146);
                    MIL::ValueInference::Tensor<float>::~Tensor(&v154);
                  }
                  uint64_t v154 = &unk_26C259F58;
                  std::string::size_type v155 = MIL::MathOps::MulOp<float>;
                  unint64_t v156 = &v154;
                  uint64_t v90 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                  memset(v149, 0, sizeof(v149));
                  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v149, *(const void **)v90, *(void *)(v90 + 8), (uint64_t)(*(void *)(v90 + 8) - *(void *)v90) >> 3);
                  MIL::ValueInference::BinaryOp<float,float>(&v137, v117, (uint64_t)&v154, v149, (uint64_t)v114);
                  if (*(void *)v149)
                  {
                    *(void *)&v149[8] = *(void *)v149;
                    operator delete(*(void **)v149);
                  }
                  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v154);
                  MIL::ValueInference::Tensor<float>::~Tensor(&v137);
                }
                if (v101) {
                  MIL::ValueInference::Tensor<unsigned char>::~Tensor(v100);
                }
                MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v114, *a1);
              }
              uint64_t v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v93, "Unsupported Datatype for the scale IRTensor.");
              v93->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v93, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            uint64_t v98 = v35;
            char v99 = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v98, (uint64_t)v117);
            if (v99) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v99);
            }
            std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](v96, (uint64_t)__p);
            if (v17)
            {
              std::string::size_type v72 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v125);
              uint64_t v73 = (uint64_t)(v72[1] - *v72) >> 3;
              if ((int)v24 < 0) {
                int v74 = (uint64_t)(v72[1] - *v72) >> 3;
              }
              else {
                int v74 = 0;
              }
              uint64_t v137 = 1;
              std::vector<unsigned long long>::vector(&v143, v73 - (v74 + (int)v24), &v137);
              long long v75 = (void **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v117);
              *(void *)uint64_t v143 = **v75;
              MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v125, (uint64_t)&v137);
              if (v97)
              {
                MIL::ValueInference::Tensor<unsigned char>::Reshape(v96, (uint64_t *)&v143, (uint64_t)v149);
                MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v149, (uint64_t)&v154);
                MIL::ValueInference::Tensor<unsigned char>::~Tensor(v149);
                unint64_t v146 = &unk_26C25E6B8;
                unint64_t v147 = MIL::MathOps::SubOp<MIL::Fp16>;
                std::string v148 = &v146;
                uint64_t v76 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                long long v135 = 0;
                std::string v134 = 0;
                uint64_t v136 = 0;
                std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v134, *(const void **)v76, *(void *)(v76 + 8), (uint64_t)(*(void *)(v76 + 8) - *(void *)v76) >> 3);
                MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)&v146, &v134, (uint64_t)v149);
                if ((void)v138)
                {
                  *((void *)&v138 + 1) = v138;
                  operator delete((void *)v138);
                }
                long long v138 = *(_OWORD *)&v149[8];
                long long v139 = v150;
                *(void *)&v149[16] = 0;
                std::string v150 = 0;
                *(void *)&v149[8] = 0;
                if ((void)v140)
                {
                  *((void *)&v140 + 1) = v140;
                  operator delete((void *)v140);
                }
                long long v140 = v151;
                uint64_t v77 = v152;
                uint64_t v152 = 0;
                long long v151 = 0uLL;
                uint64_t v141 = v77;
                uint64_t v142 = v153;
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v149);
                if (v134)
                {
                  long long v135 = v134;
                  operator delete(v134);
                }
                std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v146);
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
              }
              MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(v117, (uint64_t *)&v143, (uint64_t)&v154);
              *(void *)std::string v149 = &unk_26C25E6B8;
              *(void *)&v149[8] = MIL::MathOps::MulOp<MIL::Fp16>;
              std::string v150 = v149;
              uint64_t v78 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
              char v132 = 0;
              unint64_t v131 = 0;
              uint64_t v133 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, *(const void **)v78, *(void *)(v78 + 8), (uint64_t)(*(void *)(v78 + 8) - *(void *)v78) >> 3);
              MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)v149, &v131, (uint64_t)v114);
              if (v131)
              {
                char v132 = v131;
                operator delete(v131);
              }
              std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v149);
              MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
              MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v137);
              if (v143)
              {
                long long v144 = v143;
                operator delete(v143);
              }
            }
            else
            {
              MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v125, (uint64_t)&v137);
              if (v97)
              {
                MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v96, (uint64_t)&v154);
                unint64_t v146 = &unk_26C25E6B8;
                unint64_t v147 = MIL::MathOps::SubOp<MIL::Fp16>;
                std::string v148 = &v146;
                uint64_t v85 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                long long v144 = 0;
                uint64_t v143 = 0;
                uint64_t v145 = 0;
                std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v143, *(const void **)v85, *(void *)(v85 + 8), (uint64_t)(*(void *)(v85 + 8) - *(void *)v85) >> 3);
                MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)&v146, &v143, (uint64_t)v149);
                if ((void)v138)
                {
                  *((void *)&v138 + 1) = v138;
                  operator delete((void *)v138);
                }
                long long v138 = *(_OWORD *)&v149[8];
                long long v139 = v150;
                *(void *)&v149[16] = 0;
                std::string v150 = 0;
                *(void *)&v149[8] = 0;
                if ((void)v140)
                {
                  *((void *)&v140 + 1) = v140;
                  operator delete((void *)v140);
                }
                long long v140 = v151;
                uint64_t v86 = v152;
                uint64_t v152 = 0;
                long long v151 = 0uLL;
                uint64_t v141 = v86;
                uint64_t v142 = v153;
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v149);
                if (v143)
                {
                  long long v144 = v143;
                  operator delete(v143);
                }
                std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v146);
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
              }
              uint64_t v154 = &unk_26C25E6B8;
              std::string::size_type v155 = MIL::MathOps::MulOp<MIL::Fp16>;
              unint64_t v156 = &v154;
              uint64_t v87 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
              memset(v149, 0, sizeof(v149));
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v149, *(const void **)v87, *(void *)(v87 + 8), (uint64_t)(*(void *)(v87 + 8) - *(void *)v87) >> 3);
              MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, v117, (uint64_t)&v154, v149, (uint64_t)v114);
              if (*(void *)v149)
              {
                *(void *)&v149[8] = *(void *)v149;
                operator delete(*(void **)v149);
              }
              std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v154);
              MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v137);
            }
            if (v97) {
              MIL::ValueInference::Tensor<unsigned char>::~Tensor(v96);
            }
            MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v114, *a1);
          }
          std::string v92 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v92, "Unsupported Datatype for the input IRTensor.");
          v92->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(v92, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        uint64_t v123 = v31;
        long long v124 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v123, (uint64_t)v125);
        if (v124) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v124);
        }
        LOBYTE(__p[0]) = 0;
        char v122 = 0;
        if (v41)
        {
          uint64_t v118 = v41;
          long long v119 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v118, (uint64_t)&v137);
          std::optional<MIL::ValueInference::Tensor<signed char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<signed char>,void>((uint64_t)__p, (uint64_t)&v137);
          MIL::ValueInference::Tensor<signed char>::~Tensor(&v137);
          if (v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v119);
          }
        }
        unint64_t v55 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 32))(v35);
        uint64_t v56 = MIL::IRValueType::AsTensorType(v55);
        int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 88))(v56);
        if (v57 != 4)
        {
          if (v57 == 5)
          {
            uint64_t v115 = v35;
            std::string v116 = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v115, (uint64_t)v117);
            if (v116) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v116);
            }
            std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](v112, (uint64_t)__p);
            if (v17)
            {
              long long v58 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v125);
              uint64_t v59 = (uint64_t)(v58[1] - *v58) >> 3;
              if ((int)v24 < 0) {
                int v60 = (uint64_t)(v58[1] - *v58) >> 3;
              }
              else {
                int v60 = 0;
              }
              uint64_t v137 = 1;
              std::vector<unsigned long long>::vector(&v143, v59 - (v60 + (int)v24), &v137);
              std::string::size_type v61 = (void **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v117);
              *(void *)uint64_t v143 = **v61;
              MIL::ValueInference::Tensor<signed char>::Cast<float>(v125, (uint64_t)&v137);
              if (v113)
              {
                MIL::ValueInference::Tensor<signed char>::Reshape(v112, (uint64_t *)&v143, (uint64_t)v149);
                MIL::ValueInference::Tensor<signed char>::Cast<float>(v149, (uint64_t)&v154);
                MIL::ValueInference::Tensor<signed char>::~Tensor(v149);
                unint64_t v146 = &unk_26C259F58;
                unint64_t v147 = MIL::MathOps::SubOp<float>;
                std::string v148 = &v146;
                uint64_t v62 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                long long v135 = 0;
                std::string v134 = 0;
                uint64_t v136 = 0;
                std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v134, *(const void **)v62, *(void *)(v62 + 8), (uint64_t)(*(void *)(v62 + 8) - *(void *)v62) >> 3);
                MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)&v146, &v134, (uint64_t)v149);
                if ((void)v138)
                {
                  *((void *)&v138 + 1) = v138;
                  operator delete((void *)v138);
                }
                long long v138 = *(_OWORD *)&v149[8];
                long long v139 = v150;
                *(void *)&v149[16] = 0;
                std::string v150 = 0;
                *(void *)&v149[8] = 0;
                if ((void)v140)
                {
                  *((void *)&v140 + 1) = v140;
                  operator delete((void *)v140);
                }
                long long v140 = v151;
                uint64_t v63 = v152;
                uint64_t v152 = 0;
                long long v151 = 0uLL;
                uint64_t v141 = v63;
                uint64_t v142 = v153;
                MIL::ValueInference::Tensor<float>::~Tensor(v149);
                if (v134)
                {
                  long long v135 = v134;
                  operator delete(v134);
                }
                std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v146);
                MIL::ValueInference::Tensor<float>::~Tensor(&v154);
              }
              MIL::ValueInference::Tensor<float>::Reshape(v117, (uint64_t *)&v143, (uint64_t)&v154);
              *(void *)std::string v149 = &unk_26C259F58;
              *(void *)&v149[8] = MIL::MathOps::MulOp<float>;
              std::string v150 = v149;
              uint64_t v64 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
              char v132 = 0;
              unint64_t v131 = 0;
              uint64_t v133 = 0;
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, *(const void **)v64, *(void *)(v64 + 8), (uint64_t)(*(void *)(v64 + 8) - *(void *)v64) >> 3);
              MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)v149, &v131, (uint64_t)v114);
              if (v131)
              {
                char v132 = v131;
                operator delete(v131);
              }
              std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v149);
              MIL::ValueInference::Tensor<float>::~Tensor(&v154);
              MIL::ValueInference::Tensor<float>::~Tensor(&v137);
              if (v143)
              {
                long long v144 = v143;
                operator delete(v143);
              }
            }
            else
            {
              MIL::ValueInference::Tensor<signed char>::Cast<float>(v125, (uint64_t)&v137);
              if (v113)
              {
                MIL::ValueInference::Tensor<signed char>::Cast<float>(v112, (uint64_t)&v154);
                unint64_t v146 = &unk_26C259F58;
                unint64_t v147 = MIL::MathOps::SubOp<float>;
                std::string v148 = &v146;
                uint64_t v82 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
                long long v144 = 0;
                uint64_t v143 = 0;
                uint64_t v145 = 0;
                std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v143, *(const void **)v82, *(void *)(v82 + 8), (uint64_t)(*(void *)(v82 + 8) - *(void *)v82) >> 3);
                MIL::ValueInference::BinaryOp<float,float>(&v137, &v154, (uint64_t)&v146, &v143, (uint64_t)v149);
                if ((void)v138)
                {
                  *((void *)&v138 + 1) = v138;
                  operator delete((void *)v138);
                }
                long long v138 = *(_OWORD *)&v149[8];
                long long v139 = v150;
                *(void *)&v149[16] = 0;
                std::string v150 = 0;
                *(void *)&v149[8] = 0;
                if ((void)v140)
                {
                  *((void *)&v140 + 1) = v140;
                  operator delete((void *)v140);
                }
                long long v140 = v151;
                uint64_t v83 = v152;
                uint64_t v152 = 0;
                long long v151 = 0uLL;
                uint64_t v141 = v83;
                uint64_t v142 = v153;
                MIL::ValueInference::Tensor<float>::~Tensor(v149);
                if (v143)
                {
                  long long v144 = v143;
                  operator delete(v143);
                }
                std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v146);
                MIL::ValueInference::Tensor<float>::~Tensor(&v154);
              }
              uint64_t v154 = &unk_26C259F58;
              std::string::size_type v155 = MIL::MathOps::MulOp<float>;
              unint64_t v156 = &v154;
              uint64_t v84 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
              memset(v149, 0, sizeof(v149));
              std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v149, *(const void **)v84, *(void *)(v84 + 8), (uint64_t)(*(void *)(v84 + 8) - *(void *)v84) >> 3);
              MIL::ValueInference::BinaryOp<float,float>(&v137, v117, (uint64_t)&v154, v149, (uint64_t)v114);
              if (*(void *)v149)
              {
                *(void *)&v149[8] = *(void *)v149;
                operator delete(*(void **)v149);
              }
              std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&v154);
              MIL::ValueInference::Tensor<float>::~Tensor(&v137);
            }
            if (v113) {
              MIL::ValueInference::Tensor<signed char>::~Tensor(v112);
            }
            MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v114, *a1);
          }
          char v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v94, "Unsupported Datatype for the scale IRTensor.");
          v94->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(v94, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        uint64_t v110 = v35;
        uint64_t v111 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v110, (uint64_t)v117);
        if (v111) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v111);
        }
        std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](v108, (uint64_t)__p);
        if (v17)
        {
          int v65 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v125);
          uint64_t v66 = (uint64_t)(v65[1] - *v65) >> 3;
          if ((int)v24 < 0) {
            int v67 = (uint64_t)(v65[1] - *v65) >> 3;
          }
          else {
            int v67 = 0;
          }
          uint64_t v137 = 1;
          std::vector<unsigned long long>::vector(&v143, v66 - (v67 + (int)v24), &v137);
          uint64_t v68 = (void **)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v117);
          *(void *)uint64_t v143 = **v68;
          MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v125, (uint64_t)&v137);
          if (v109)
          {
            MIL::ValueInference::Tensor<signed char>::Reshape(v108, (uint64_t *)&v143, (uint64_t)v149);
            MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v149, (uint64_t)&v154);
            MIL::ValueInference::Tensor<signed char>::~Tensor(v149);
            unint64_t v146 = &unk_26C25E6B8;
            unint64_t v147 = MIL::MathOps::SubOp<MIL::Fp16>;
            std::string v148 = &v146;
            uint64_t v69 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
            long long v135 = 0;
            std::string v134 = 0;
            uint64_t v136 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v134, *(const void **)v69, *(void *)(v69 + 8), (uint64_t)(*(void *)(v69 + 8) - *(void *)v69) >> 3);
            MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)&v146, &v134, (uint64_t)v149);
            if ((void)v138)
            {
              *((void *)&v138 + 1) = v138;
              operator delete((void *)v138);
            }
            long long v138 = *(_OWORD *)&v149[8];
            long long v139 = v150;
            *(void *)&v149[16] = 0;
            std::string v150 = 0;
            *(void *)&v149[8] = 0;
            if ((void)v140)
            {
              *((void *)&v140 + 1) = v140;
              operator delete((void *)v140);
            }
            long long v140 = v151;
            uint64_t v70 = v152;
            uint64_t v152 = 0;
            long long v151 = 0uLL;
            uint64_t v141 = v70;
            uint64_t v142 = v153;
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v149);
            if (v134)
            {
              long long v135 = v134;
              operator delete(v134);
            }
            std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v146);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
          }
          MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(v117, (uint64_t *)&v143, (uint64_t)&v154);
          *(void *)std::string v149 = &unk_26C25E6B8;
          *(void *)&v149[8] = MIL::MathOps::MulOp<MIL::Fp16>;
          std::string v150 = v149;
          uint64_t v71 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
          char v132 = 0;
          unint64_t v131 = 0;
          uint64_t v133 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, *(const void **)v71, *(void *)(v71 + 8), (uint64_t)(*(void *)(v71 + 8) - *(void *)v71) >> 3);
          MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)v149, &v131, (uint64_t)v114);
          if (v131)
          {
            char v132 = v131;
            operator delete(v131);
          }
          std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v149);
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v137);
          if (v143)
          {
            long long v144 = v143;
            operator delete(v143);
          }
        }
        else
        {
          MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v125, (uint64_t)&v137);
          if (v109)
          {
            MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v108, (uint64_t)&v154);
            unint64_t v146 = &unk_26C25E6B8;
            unint64_t v147 = MIL::MathOps::SubOp<MIL::Fp16>;
            std::string v148 = &v146;
            uint64_t v79 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
            long long v144 = 0;
            uint64_t v143 = 0;
            uint64_t v145 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v143, *(const void **)v79, *(void *)(v79 + 8), (uint64_t)(*(void *)(v79 + 8) - *(void *)v79) >> 3);
            MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, &v154, (uint64_t)&v146, &v143, (uint64_t)v149);
            if ((void)v138)
            {
              *((void *)&v138 + 1) = v138;
              operator delete((void *)v138);
            }
            long long v138 = *(_OWORD *)&v149[8];
            long long v139 = v150;
            *(void *)&v149[16] = 0;
            std::string v150 = 0;
            *(void *)&v149[8] = 0;
            if ((void)v140)
            {
              *((void *)&v140 + 1) = v140;
              operator delete((void *)v140);
            }
            long long v140 = v151;
            uint64_t v80 = v152;
            uint64_t v152 = 0;
            long long v151 = 0uLL;
            uint64_t v141 = v80;
            uint64_t v142 = v153;
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v149);
            if (v143)
            {
              long long v144 = v143;
              operator delete(v143);
            }
            std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v146);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v154);
          }
          uint64_t v154 = &unk_26C25E6B8;
          std::string::size_type v155 = MIL::MathOps::MulOp<MIL::Fp16>;
          unint64_t v156 = &v154;
          uint64_t v81 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v137);
          memset(v149, 0, sizeof(v149));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v149, *(const void **)v81, *(void *)(v81 + 8), (uint64_t)(*(void *)(v81 + 8) - *(void *)v81) >> 3);
          MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v137, v117, (uint64_t)&v154, v149, (uint64_t)v114);
          if (*(void *)v149)
          {
            *(void *)&v149[8] = *(void *)v149;
            operator delete(*(void **)v149);
          }
          std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&v154);
          MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v137);
        }
        if (v109) {
          MIL::ValueInference::Tensor<signed char>::~Tensor(v108);
        }
        MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v114, *a1);
      }
      uint64_t v41 = 0;
      std::string v40 = 0;
      goto LABEL_47;
    }
    uint64_t v23 = 0;
    unsigned __int8 v21 = 0;
    unsigned int v22 = 0;
    goto LABEL_23;
  }
  BOOL v14 = 0;
  unsigned __int8 v15 = 0;
  goto LABEL_15;
}

void sub_20F6FB36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::string::size_type v72 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v72;
    operator delete(v72);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&STACK[0x3C0]);
  MIL::ValueInference::Tensor<float>::~Tensor((void *)(v70 - 176));
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x368]);
  if (a30) {
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a22);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a67);
  if (LOBYTE(STACK[0x260])) {
    MIL::ValueInference::Tensor<unsigned char>::~Tensor(&STACK[0x220]);
  }
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&STACK[0x278]);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&STACK[0x300]);
  _Unwind_Resume(a1);
}

void sub_20F6FBB1C()
{
}

uint64_t std::optional<MIL::ValueInference::Tensor<signed char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<signed char>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    std::vector<float>::__move_assign(a1 + 8, (__n128 *)(a2 + 8));
    std::vector<float>::__move_assign(a1 + 32, (__n128 *)(a2 + 32));
    uint64_t v4 = *(void *)(a2 + 56);
  }
  else
  {
    *(void *)a1 = &unk_26C259EA8;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 56) = v4;
  return a1;
}

uint64_t std::optional<MIL::ValueInference::Tensor<unsigned char>>::operator=[abi:ne180100]<MIL::ValueInference::Tensor<unsigned char>,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    std::vector<float>::__move_assign(a1 + 8, (__n128 *)(a2 + 8));
    std::vector<float>::__move_assign(a1 + 32, (__n128 *)(a2 + 32));
    uint64_t v4 = *(void *)(a2 + 56);
  }
  else
  {
    *(void *)a1 = &unk_26C259E78;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(void *)(a1 + 56) = v4;
  return a1;
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicDequantize(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDequantize(a1, v4, a3);
}

void sub_20F6FBCF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceDynamicQuantize(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v7 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v6 + 5));
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  if (v39 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "has_zero_point");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v10 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v9 + 5));
  int v11 = MIL::IRValue::GetScalar<BOOL>(v10);
  if (v39 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
  unsigned __int8 v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  uint64_t v13 = v12;
  if (v39 < 0)
  {
    operator delete(__p);
    if (v13) {
      goto LABEL_9;
    }
  }
  else if (v12)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
    BOOL v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
    if (!v14) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned __int8 v15 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v14 + 5));
    unsigned int v16 = MIL::IRValue::GetScalar<int>(v15);
    if (v39 < 0) {
      operator delete(__p);
    }
    unsigned int v3 = v16 >> 8;
    uint64_t v17 = 0x100000000;
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&__p, "output_dtype");
    uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v19 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v18 + 5));
    MIL::IRValue::GetScalar<std::string>(v19, &v36);
    if (v39 < 0)
    {
      operator delete(__p);
      if (!v13) {
        goto LABEL_21;
      }
    }
    else if (!v13)
    {
      goto LABEL_21;
    }
    int v20 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)(v16 | (v3 << 8)), (v20[1] - *v20) >> 3))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
      char v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" for input_ndim: ", 17);
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
      std::ostream::operator<<();
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v37);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    unsigned __int8 v21 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
    if (!v21) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned int v22 = (uint64_t *)*((void *)v21 + 5);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    if (v39 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v36.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_32;
      }
      uint64_t v25 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) != 4) {
        goto LABEL_32;
      }
      uint64_t v25 = &v36;
    }
    if (LODWORD(v25->__r_.__value_.__l.__data_) == 947154537)
    {
      if (v11)
      {
        long long v28 = *a1;
        v35[0] = v24;
        v35[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        MIL::Passes::QuantizeValueAsymmetricInt8(v28, v35, v16 | ((*(void *)&v3 & 0xFFFFFFLL) << 8) | v17);
      }
      uint64_t v29 = *a1;
      v34[0] = v24;
      v34[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Passes::QuantizeValueSymmetricInt8(v29, v34, v16 | ((*(void *)&v3 & 0xFFFFFFLL) << 8) | v17);
    }
LABEL_32:
    if (v11)
    {
      uint64_t v26 = *a1;
      v33[0] = v24;
      v33[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Passes::QuantizeValueAsymmetricUInt8(v26, v33, v16 | ((*(void *)&v3 & 0xFFFFFFLL) << 8) | v17);
    }
    uint64_t v27 = *a1;
    v32[0] = v24;
    v32[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Passes::QuantizeValueNoZeroPointUInt8(v27, v32, v16 | ((*(void *)&v3 & 0xFFFFFFLL) << 8) | v17);
  }
  uint64_t v17 = 0;
  LOBYTE(v16) = 0;
  goto LABEL_15;
}

void sub_20F6FC718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a49 < 0)
  {
    operator delete(__p);
    if ((v58 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a52);
      if (a40 < 0) {
        operator delete(a35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v58)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v57);
  goto LABEL_6;
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceQuantize(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  long long v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v5 + 5));
  uint64_t v7 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  if (v121 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = (uint64_t *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v8 + 5));
  if (v121 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  BOOL v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  int v11 = v10;
  if (v121 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_9;
    }
  }
  else if (v10)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
    unsigned __int8 v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v13 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v12 + 5));
    BOOL v14 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
    if (v121 < 0) {
      operator delete(__p[0]);
    }
    char v15 = 1;
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    unsigned int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    uint64_t v17 = v16;
    if (v121 < 0)
    {
      operator delete(__p[0]);
      if (v17) {
        goto LABEL_17;
      }
    }
    else if (v16)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(__p, "axis");
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v18) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v19 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v18 + 5));
      int v20 = MIL::IRValue::GetScalar<int>(v19);
      LOBYTE(v17) = v20;
      unsigned int v21 = v20 & 0xFFFFFF00;
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v22 = 0x100000000;
LABEL_23:
      std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
      uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v23) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v24 = (const void *)MIL::IRValue::AsTensor(**((MIL::IRValue ***)v23 + 5));
      MIL::IRValue::GetScalar<std::string>(v24, &v127);
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v25 = (MIL::Validation *)(v22 | v21 | v17);
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      v124[0] = v26;
      v124[1] = (uint64_t)v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v125))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v122, (uint64_t)v125);
        v122[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
        int v123 = v126;
        MIL::ValidationError::ValidationError(exception, v122);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      long long v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v28) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v29 = (uint64_t *)*((void *)v28 + 5);
      uint64_t v31 = *v29;
      char v30 = (std::__shared_weak_count *)v29[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "scale");
      std::string v32 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      if (!v32) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v33 = (uint64_t *)*((void *)v32 + 5);
      uint64_t v35 = *v33;
      long long v34 = (std::__shared_weak_count *)v33[1];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v121 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
      std::string v36 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
      std::string v37 = v36;
      if (v121 < 0)
      {
        operator delete(__p[0]);
        if (v37) {
          goto LABEL_43;
        }
      }
      else if (v36)
      {
LABEL_43:
        std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
        uint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
        if (!v38) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        char v39 = (unsigned __int8 **)*((void *)v38 + 5);
        std::string v37 = *v39;
        uint64_t v40 = (std::__shared_weak_count *)v39[1];
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v121 < 0) {
          operator delete(__p[0]);
        }
LABEL_50:
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 32))(v31);
        int v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 88))(v41);
        if (v42 != 4)
        {
          if (v42 != 5)
          {
            uint64_t v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v56, "Unsupported Datatype for the input IRTensor.");
            v56->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v56, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          uint64_t v118 = v31;
          long long v119 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v118, (uint64_t)__p);
          if (v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v119);
          }
          uint64_t v115 = v35;
          std::string v116 = v34;
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v115, (uint64_t)v117);
          if (v116) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v116);
          }
          if (v37)
          {
            uint64_t v43 = (MIL::IRValueType *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v37 + 32))(v37);
            uint64_t v44 = MIL::IRValueType::AsTensorType(v43);
            int v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 88))(v44);
            if (v45 != 9)
            {
              if (v45 == 14)
              {
                char v97 = v37;
                uint64_t v98 = v40;
                if (v40) {
                  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v97, (uint64_t)v109);
                if (v98) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v98);
                }
                long long v91 = v110;
                uint64_t v90 = &unk_26C259E78;
                uint64_t v92 = v111;
                long long v110 = 0uLL;
                long long v93 = v112;
                uint64_t v111 = 0;
                long long v112 = 0uLL;
                uint64_t v46 = v113;
                uint64_t v113 = 0;
                uint64_t v94 = v46;
                uint64_t v95 = v114;
                char v96 = 1;
                if (v96) {
                  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v90);
                }
                MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v106, *a1);
              }
              int v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v57, "Unsupported Datatype for the zeroPoint IRTensor.");
              v57->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v57, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            char v107 = v37;
            long long v108 = v40;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v107, (uint64_t)v109);
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            long long v100 = v110;
            char v99 = &unk_26C259EA8;
            uint64_t v101 = v111;
            long long v110 = 0uLL;
            long long v102 = v112;
            uint64_t v111 = 0;
            long long v112 = 0uLL;
            uint64_t v54 = v113;
            uint64_t v113 = 0;
            uint64_t v103 = v54;
            uint64_t v104 = v114;
            char v105 = 1;
            if (v105) {
              MIL::ValueInference::Tensor<signed char>::~Tensor(&v99);
            }
            MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v106, *a1);
          }
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v127.__r_.__value_.__l.__size_ != 4) {
              goto LABEL_117;
            }
            uint64_t v52 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) != 4) {
              goto LABEL_117;
            }
            uint64_t v52 = &v127;
          }
          if (LODWORD(v52->__r_.__value_.__l.__data_) == 947154537)
          {
            LOBYTE(v88[0]) = 0;
            char v89 = 0;
            if (v89) {
              MIL::ValueInference::Tensor<signed char>::~Tensor(v88);
            }
            MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)v109, *a1);
          }
LABEL_117:
          LOBYTE(v86[0]) = 0;
          char v87 = 0;
          if (v87) {
            MIL::ValueInference::Tensor<unsigned char>::~Tensor(v86);
          }
          MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)v109, *a1);
        }
        uint64_t v84 = v31;
        uint64_t v85 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v84, (uint64_t)__p);
        if (v85) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v85);
        }
        uint64_t v82 = v35;
        uint64_t v83 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v82, (uint64_t)v117);
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        if (v37)
        {
          int v47 = (MIL::IRValueType *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v37 + 32))(v37);
          uint64_t v48 = MIL::IRValueType::AsTensorType(v47);
          int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 88))(v48);
          if (v49 != 9)
          {
            if (v49 == 14)
            {
              uint64_t v71 = v37;
              std::string::size_type v72 = v40;
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v71, (uint64_t)v109);
              if (v72) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v72);
              }
              long long v65 = v110;
              uint64_t v64 = &unk_26C259E78;
              uint64_t v66 = v111;
              long long v110 = 0uLL;
              long long v67 = v112;
              uint64_t v111 = 0;
              long long v112 = 0uLL;
              uint64_t v50 = v113;
              uint64_t v113 = 0;
              uint64_t v68 = v50;
              uint64_t v69 = v114;
              char v70 = 1;
              if (v70) {
                MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v64);
              }
              MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&v106, *a1);
            }
            int v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v58, "Unsupported Datatype for the zeroPoint IRTensor.");
            v58->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v58, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          uint64_t v80 = v37;
          uint64_t v81 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v80, (uint64_t)v109);
          if (v81) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
          long long v74 = v110;
          uint64_t v73 = &unk_26C259EA8;
          uint64_t v75 = v111;
          long long v110 = 0uLL;
          long long v76 = v112;
          uint64_t v111 = 0;
          long long v112 = 0uLL;
          uint64_t v53 = v113;
          uint64_t v113 = 0;
          uint64_t v77 = v53;
          uint64_t v78 = v114;
          char v79 = 1;
          if (v79) {
            MIL::ValueInference::Tensor<signed char>::~Tensor(&v73);
          }
          MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)&v106, *a1);
        }
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v127.__r_.__value_.__l.__size_ != 4) {
            goto LABEL_111;
          }
          long long v51 = (std::string *)v127.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) != 4) {
            goto LABEL_111;
          }
          long long v51 = &v127;
        }
        if (LODWORD(v51->__r_.__value_.__l.__data_) == 947154537)
        {
          LOBYTE(v62[0]) = 0;
          char v63 = 0;
          if (v63) {
            MIL::ValueInference::Tensor<signed char>::~Tensor(v62);
          }
          MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)v109, *a1);
        }
LABEL_111:
        LOBYTE(v60[0]) = 0;
        char v61 = 0;
        if (v61) {
          MIL::ValueInference::Tensor<unsigned char>::~Tensor(v60);
        }
        MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)v109, *a1);
      }
      uint64_t v40 = 0;
      goto LABEL_50;
    }
    uint64_t v22 = 0;
    unsigned int v21 = 0;
    goto LABEL_23;
  }
  BOOL v14 = 0;
  char v15 = 0;
  goto LABEL_15;
}

void sub_20F6FDC78(_Unwind_Exception *a1)
{
  *(void *)(v4 + 8) = v5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 120);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v6 - 136);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  MIL::ValueInference::Tensor<signed char>::~Tensor(&STACK[0x2F8]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x348]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x398]);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v6 - 224));
  if (*(char *)(v6 - 145) < 0) {
    operator delete(*(void **)(v6 - 168));
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v67[4] = *MEMORY[0x263EF8340];
  if ((a4 & 0xFF00000000) != 0)
  {
    int v9 = a4;
    ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v11 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    if (v9 < 0) {
      int v12 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    }
    else {
      int v12 = 0;
    }
    v58[0] = 1;
    std::vector<unsigned long long>::vector(v59, v11 - (v12 + v9), v58);
    uint64_t v13 = (void **)MIL::ParserContext::GetProgramFirstSet(a2);
    *(void *)v59[0] = **v13;
    MIL::ValueInference::Tensor<float>::Reshape(a2, (uint64_t *)v59, (uint64_t)v58);
    v67[0] = &unk_26C259F58;
    v67[1] = MIL::MathOps::RealDivOp<float>;
    void v67[3] = v67;
    uint64_t v14 = MIL::ParserContext::GetProgramFirstSet(this);
    std::string __p = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, v58, (uint64_t)v67, &__p, (uint64_t)&v52);
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v67);
    v66[0] = &unk_26C25A008;
    v66[1] = MIL::MathOps::RoundOp<float>;
    v66[3] = v66;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v52, (uint64_t)v66, (uint64_t)&v43);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v66);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<signed char>::Reshape((void *)a3, (uint64_t *)v59, (uint64_t)&v31);
      MIL::ValueInference::Tensor<signed char>::Cast<float>(&v31, (uint64_t)&v37);
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v31);
      v65[0] = &unk_26C259F58;
      v65[1] = MIL::MathOps::AddOp<float>;
      v65[3] = v65;
      uint64_t v15 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
      long long v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v43, &v37, (uint64_t)v65, &v28, (uint64_t)&v31);
      if ((void)v44)
      {
        *((void *)&v44 + 1) = v44;
        operator delete((void *)v44);
      }
      long long v44 = v32;
      uint64_t v45 = v33;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      if ((void)v46)
      {
        *((void *)&v46 + 1) = v46;
        operator delete((void *)v46);
      }
      long long v46 = v34;
      uint64_t v16 = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      uint64_t v47 = v16;
      uint64_t v48 = v36;
      MIL::ValueInference::Tensor<float>::~Tensor(&v31);
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v65);
      MIL::ValueInference::Tensor<float>::~Tensor(&v37);
    }
    v64[0] = &unk_26C25FD68;
    v64[3] = v64;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v43, (uint64_t)v64, (uint64_t)&v37);
    if ((void)v44)
    {
      *((void *)&v44 + 1) = v44;
      operator delete((void *)v44);
    }
    long long v44 = v38;
    uint64_t v45 = v39;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
    long long v46 = v40;
    uint64_t v17 = v41;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    uint64_t v47 = v17;
    uint64_t v48 = v42;
    MIL::ValueInference::Tensor<float>::~Tensor(&v37);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v64);
    MIL::ValueInference::Tensor<float>::Cast<signed char>(&v43, a5);
    MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    MIL::ValueInference::Tensor<float>::~Tensor(&v52);
    MIL::ValueInference::Tensor<float>::~Tensor(v58);
    if (v59[0])
    {
      v59[1] = v59[0];
      operator delete(v59[0]);
    }
  }
  else
  {
    v63[0] = &unk_26C259F58;
    v63[1] = MIL::MathOps::RealDivOp<float>;
    v63[3] = v63;
    uint64_t v18 = MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v25, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v63, &v25, (uint64_t)v58);
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v63);
    v62[0] = &unk_26C25A008;
    v62[1] = MIL::MathOps::RoundOp<float>;
    v62[3] = v62;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v58, (uint64_t)v62, (uint64_t)&v52);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v62);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<signed char>::Cast<float>((void *)a3, (uint64_t)&v43);
      v61[0] = &unk_26C259F58;
      v61[1] = MIL::MathOps::AddOp<float>;
      v61[3] = v61;
      uint64_t v19 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v52);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v52, &v43, (uint64_t)v61, &v22, (uint64_t)&v37);
      if ((void)v53)
      {
        *((void *)&v53 + 1) = v53;
        operator delete((void *)v53);
      }
      long long v53 = v38;
      uint64_t v54 = v39;
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      *(_OWORD *)unint64_t v55 = v40;
      uint64_t v20 = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      uint64_t v56 = v20;
      uint64_t v57 = v42;
      MIL::ValueInference::Tensor<float>::~Tensor(&v37);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v61);
      MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    }
    v60[0] = &unk_26C25FDE8;
    v60[3] = v60;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v52, (uint64_t)v60, (uint64_t)&v43);
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
    long long v53 = v44;
    uint64_t v54 = v45;
    uint64_t v45 = 0;
    long long v44 = 0uLL;
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    *(_OWORD *)unint64_t v55 = v46;
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    long long v46 = 0uLL;
    uint64_t v56 = v21;
    uint64_t v57 = v48;
    MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v60);
    MIL::ValueInference::Tensor<float>::Cast<signed char>(&v52, a5);
    MIL::ValueInference::Tensor<float>::~Tensor(&v52);
    MIL::ValueInference::Tensor<float>::~Tensor(v58);
  }
}

void sub_20F6FE7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&a68);
  MIL::ValueInference::Tensor<float>::~Tensor(&a34);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v67[4] = *MEMORY[0x263EF8340];
  if ((a4 & 0xFF00000000) != 0)
  {
    int v9 = a4;
    ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v11 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    if (v9 < 0) {
      int v12 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    }
    else {
      int v12 = 0;
    }
    v58[0] = 1;
    std::vector<unsigned long long>::vector(v59, v11 - (v12 + v9), v58);
    uint64_t v13 = (void **)MIL::ParserContext::GetProgramFirstSet(a2);
    *(void *)v59[0] = **v13;
    MIL::ValueInference::Tensor<float>::Reshape(a2, (uint64_t *)v59, (uint64_t)v58);
    v67[0] = &unk_26C259F58;
    v67[1] = MIL::MathOps::RealDivOp<float>;
    void v67[3] = v67;
    uint64_t v14 = MIL::ParserContext::GetProgramFirstSet(this);
    std::string __p = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, v58, (uint64_t)v67, &__p, (uint64_t)&v52);
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v67);
    v66[0] = &unk_26C25A008;
    v66[1] = MIL::MathOps::RoundOp<float>;
    v66[3] = v66;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v52, (uint64_t)v66, (uint64_t)&v43);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v66);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<unsigned char>::Reshape((void *)a3, (uint64_t *)v59, (uint64_t)&v31);
      MIL::ValueInference::Tensor<unsigned char>::Cast<float>(&v31, (uint64_t)&v37);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v31);
      v65[0] = &unk_26C259F58;
      v65[1] = MIL::MathOps::AddOp<float>;
      v65[3] = v65;
      uint64_t v15 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
      long long v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v43, &v37, (uint64_t)v65, &v28, (uint64_t)&v31);
      if ((void)v44)
      {
        *((void *)&v44 + 1) = v44;
        operator delete((void *)v44);
      }
      long long v44 = v32;
      uint64_t v45 = v33;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      if ((void)v46)
      {
        *((void *)&v46 + 1) = v46;
        operator delete((void *)v46);
      }
      long long v46 = v34;
      uint64_t v16 = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      uint64_t v47 = v16;
      uint64_t v48 = v36;
      MIL::ValueInference::Tensor<float>::~Tensor(&v31);
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v65);
      MIL::ValueInference::Tensor<float>::~Tensor(&v37);
    }
    v64[0] = &unk_26C25FE68;
    v64[3] = v64;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v43, (uint64_t)v64, (uint64_t)&v37);
    if ((void)v44)
    {
      *((void *)&v44 + 1) = v44;
      operator delete((void *)v44);
    }
    long long v44 = v38;
    uint64_t v45 = v39;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
    long long v46 = v40;
    uint64_t v17 = v41;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    uint64_t v47 = v17;
    uint64_t v48 = v42;
    MIL::ValueInference::Tensor<float>::~Tensor(&v37);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v64);
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(&v43, a5);
    MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    MIL::ValueInference::Tensor<float>::~Tensor(&v52);
    MIL::ValueInference::Tensor<float>::~Tensor(v58);
    if (v59[0])
    {
      v59[1] = v59[0];
      operator delete(v59[0]);
    }
  }
  else
  {
    v63[0] = &unk_26C259F58;
    v63[1] = MIL::MathOps::RealDivOp<float>;
    v63[3] = v63;
    uint64_t v18 = MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v25, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
    MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v63, &v25, (uint64_t)v58);
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v63);
    v62[0] = &unk_26C25A008;
    v62[1] = MIL::MathOps::RoundOp<float>;
    v62[3] = v62;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v58, (uint64_t)v62, (uint64_t)&v52);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v62);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<unsigned char>::Cast<float>((void *)a3, (uint64_t)&v43);
      v61[0] = &unk_26C259F58;
      v61[1] = MIL::MathOps::AddOp<float>;
      v61[3] = v61;
      uint64_t v19 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v52);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
      MIL::ValueInference::BinaryOp<float,float>(&v52, &v43, (uint64_t)v61, &v22, (uint64_t)&v37);
      if ((void)v53)
      {
        *((void *)&v53 + 1) = v53;
        operator delete((void *)v53);
      }
      long long v53 = v38;
      uint64_t v54 = v39;
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      *(_OWORD *)unint64_t v55 = v40;
      uint64_t v20 = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      uint64_t v56 = v20;
      uint64_t v57 = v42;
      MIL::ValueInference::Tensor<float>::~Tensor(&v37);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v61);
      MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    }
    v60[0] = &unk_26C25FEE8;
    v60[3] = v60;
    MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v52, (uint64_t)v60, (uint64_t)&v43);
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
    long long v53 = v44;
    uint64_t v54 = v45;
    uint64_t v45 = 0;
    long long v44 = 0uLL;
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    *(_OWORD *)unint64_t v55 = v46;
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    long long v46 = 0uLL;
    uint64_t v56 = v21;
    uint64_t v57 = v48;
    MIL::ValueInference::Tensor<float>::~Tensor(&v43);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v60);
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(&v52, a5);
    MIL::ValueInference::Tensor<float>::~Tensor(&v52);
    MIL::ValueInference::Tensor<float>::~Tensor(v58);
  }
}

void sub_20F6FEF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&a68);
  MIL::ValueInference::Tensor<float>::~Tensor(&a34);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v67[4] = *MEMORY[0x263EF8340];
  if ((a4 & 0xFF00000000) != 0)
  {
    int v9 = a4;
    ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v11 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    if (v9 < 0) {
      int v12 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    }
    else {
      int v12 = 0;
    }
    v58[0] = 1;
    std::vector<unsigned long long>::vector(v59, v11 - (v12 + v9), v58);
    uint64_t v13 = (void **)MIL::ParserContext::GetProgramFirstSet(a2);
    *(void *)v59[0] = **v13;
    MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(a2, (uint64_t *)v59, (uint64_t)v58);
    v67[0] = &unk_26C25E6B8;
    v67[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    void v67[3] = v67;
    uint64_t v14 = MIL::ParserContext::GetProgramFirstSet(this);
    std::string __p = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, v58, (uint64_t)v67, &__p, (uint64_t)&v52);
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v67);
    v66[0] = &unk_26C25EE08;
    v66[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v66[3] = v66;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v52, (uint64_t)v66, (uint64_t)&v43);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v66);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<signed char>::Reshape((void *)a3, (uint64_t *)v59, (uint64_t)&v31);
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(&v31, (uint64_t)&v37);
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v31);
      v65[0] = &unk_26C25E6B8;
      v65[1] = MIL::MathOps::AddOp<MIL::Fp16>;
      v65[3] = v65;
      uint64_t v15 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
      long long v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v43, &v37, (uint64_t)v65, &v28, (uint64_t)&v31);
      if ((void)v44)
      {
        *((void *)&v44 + 1) = v44;
        operator delete((void *)v44);
      }
      long long v44 = v32;
      uint64_t v45 = v33;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      if ((void)v46)
      {
        *((void *)&v46 + 1) = v46;
        operator delete((void *)v46);
      }
      long long v46 = v34;
      uint64_t v16 = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      uint64_t v47 = v16;
      uint64_t v48 = v36;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v31);
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v65);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
    }
    v64[0] = &unk_26C25FF68;
    v64[3] = v64;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v43, (uint64_t)v64, (uint64_t)&v37);
    if ((void)v44)
    {
      *((void *)&v44 + 1) = v44;
      operator delete((void *)v44);
    }
    long long v44 = v38;
    uint64_t v45 = v39;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
    long long v46 = v40;
    uint64_t v17 = v41;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    uint64_t v47 = v17;
    uint64_t v48 = v42;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v64);
    MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(&v43, a5);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v52);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v58);
    if (v59[0])
    {
      v59[1] = v59[0];
      operator delete(v59[0]);
    }
  }
  else
  {
    v63[0] = &unk_26C25E6B8;
    v63[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    v63[3] = v63;
    uint64_t v18 = MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v25, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, a2, (uint64_t)v63, &v25, (uint64_t)v58);
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v63);
    v62[0] = &unk_26C25EE08;
    v62[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v62[3] = v62;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)v58, (uint64_t)v62, (uint64_t)&v52);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v62);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>((void *)a3, (uint64_t)&v43);
      v61[0] = &unk_26C25E6B8;
      v61[1] = MIL::MathOps::AddOp<MIL::Fp16>;
      v61[3] = v61;
      uint64_t v19 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v52);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v52, &v43, (uint64_t)v61, &v22, (uint64_t)&v37);
      if ((void)v53)
      {
        *((void *)&v53 + 1) = v53;
        operator delete((void *)v53);
      }
      long long v53 = v38;
      uint64_t v54 = v39;
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      *(_OWORD *)unint64_t v55 = v40;
      uint64_t v20 = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      uint64_t v56 = v20;
      uint64_t v57 = v42;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v61);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    }
    v60[0] = &unk_26C25FFE8;
    v60[3] = v60;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v52, (uint64_t)v60, (uint64_t)&v43);
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
    long long v53 = v44;
    uint64_t v54 = v45;
    uint64_t v45 = 0;
    long long v44 = 0uLL;
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    *(_OWORD *)unint64_t v55 = v46;
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    long long v46 = 0uLL;
    uint64_t v56 = v21;
    uint64_t v57 = v48;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v60);
    MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(&v52, a5);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v52);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v58);
  }
}

void sub_20F6FF73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&a68);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a34);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a45);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ParserContext *this@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v67[4] = *MEMORY[0x263EF8340];
  if ((a4 & 0xFF00000000) != 0)
  {
    int v9 = a4;
    ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v11 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    if (v9 < 0) {
      int v12 = (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3;
    }
    else {
      int v12 = 0;
    }
    v58[0] = 1;
    std::vector<unsigned long long>::vector(v59, v11 - (v12 + v9), v58);
    uint64_t v13 = (void **)MIL::ParserContext::GetProgramFirstSet(a2);
    *(void *)v59[0] = **v13;
    MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(a2, (uint64_t *)v59, (uint64_t)v58);
    v67[0] = &unk_26C25E6B8;
    v67[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    void v67[3] = v67;
    uint64_t v14 = MIL::ParserContext::GetProgramFirstSet(this);
    std::string __p = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, v58, (uint64_t)v67, &__p, (uint64_t)&v52);
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
    }
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v67);
    v66[0] = &unk_26C25EE08;
    v66[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v66[3] = v66;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v52, (uint64_t)v66, (uint64_t)&v43);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v66);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<unsigned char>::Reshape((void *)a3, (uint64_t *)v59, (uint64_t)&v31);
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(&v31, (uint64_t)&v37);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v31);
      v65[0] = &unk_26C25E6B8;
      v65[1] = MIL::MathOps::AddOp<MIL::Fp16>;
      v65[3] = v65;
      uint64_t v15 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
      long long v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v43, &v37, (uint64_t)v65, &v28, (uint64_t)&v31);
      if ((void)v44)
      {
        *((void *)&v44 + 1) = v44;
        operator delete((void *)v44);
      }
      long long v44 = v32;
      uint64_t v45 = v33;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      if ((void)v46)
      {
        *((void *)&v46 + 1) = v46;
        operator delete((void *)v46);
      }
      long long v46 = v34;
      uint64_t v16 = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      uint64_t v47 = v16;
      uint64_t v48 = v36;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v31);
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v65);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
    }
    v64[0] = &unk_26C260068;
    v64[3] = v64;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v43, (uint64_t)v64, (uint64_t)&v37);
    if ((void)v44)
    {
      *((void *)&v44 + 1) = v44;
      operator delete((void *)v44);
    }
    long long v44 = v38;
    uint64_t v45 = v39;
    uint64_t v39 = 0;
    long long v38 = 0uLL;
    if ((void)v46)
    {
      *((void *)&v46 + 1) = v46;
      operator delete((void *)v46);
    }
    long long v46 = v40;
    uint64_t v17 = v41;
    uint64_t v41 = 0;
    long long v40 = 0uLL;
    uint64_t v47 = v17;
    uint64_t v48 = v42;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v64);
    MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(&v43, a5);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v52);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v58);
    if (v59[0])
    {
      v59[1] = v59[0];
      operator delete(v59[0]);
    }
  }
  else
  {
    v63[0] = &unk_26C25E6B8;
    v63[1] = MIL::MathOps::RealDivOp<MIL::Fp16>;
    v63[3] = v63;
    uint64_t v18 = MIL::ParserContext::GetProgramFirstSet(this);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v25, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
    MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(this, a2, (uint64_t)v63, &v25, (uint64_t)v58);
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v63);
    v62[0] = &unk_26C25EE08;
    v62[1] = MIL::MathOps::RoundOp<MIL::Fp16>;
    v62[3] = v62;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)v58, (uint64_t)v62, (uint64_t)&v52);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v62);
    if (*(unsigned char *)(a3 + 64))
    {
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>((void *)a3, (uint64_t)&v43);
      v61[0] = &unk_26C25E6B8;
      v61[1] = MIL::MathOps::AddOp<MIL::Fp16>;
      v61[3] = v61;
      uint64_t v19 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v52);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(&v52, &v43, (uint64_t)v61, &v22, (uint64_t)&v37);
      if ((void)v53)
      {
        *((void *)&v53 + 1) = v53;
        operator delete((void *)v53);
      }
      long long v53 = v38;
      uint64_t v54 = v39;
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      if (v55[0])
      {
        v55[1] = v55[0];
        operator delete(v55[0]);
      }
      *(_OWORD *)unint64_t v55 = v40;
      uint64_t v20 = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      uint64_t v56 = v20;
      uint64_t v57 = v42;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v37);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](v61);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    }
    v60[0] = &unk_26C2600E8;
    v60[3] = v60;
    MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)&v52, (uint64_t)v60, (uint64_t)&v43);
    if ((void)v53)
    {
      *((void *)&v53 + 1) = v53;
      operator delete((void *)v53);
    }
    long long v53 = v44;
    uint64_t v54 = v45;
    uint64_t v45 = 0;
    long long v44 = 0uLL;
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    *(_OWORD *)unint64_t v55 = v46;
    uint64_t v21 = v47;
    uint64_t v47 = 0;
    long long v46 = 0uLL;
    uint64_t v56 = v21;
    uint64_t v57 = v48;
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v43);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v60);
    MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(&v52, a5);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v52);
    MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v58);
  }
}

void sub_20F6FFF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__value_func[abi:ne180100](&a68);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a34);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a45);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a53);
  _Unwind_Resume(a1);
}

void anonymous namespace'::ValidateCommonInputs(MIL::IRTensorValueType *a1@<X0>, uint64_t *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, unsigned __int8 a4@<W3>, MIL::Validation *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  uint64_t v17 = (std::__shared_weak_count *)a7[1];
  v63[0] = *a7;
  v63[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v64))
  {
    *(_OWORD *)(a8 + 8) = v65;
    long long v65 = 0uLL;
    *(_OWORD *)(a8 + 24) = v66;
    *(void *)(a8 + 40) = v67;
    long long v66 = 0uLL;
    uint64_t v67 = 0;
    *(void *)a8 = &unk_26C25DB50;
    *(_DWORD *)(a8 + 48) = v68;
    goto LABEL_34;
  }
  uint64_t v18 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
  uint64_t v19 = MIL::IRValueType::AsTensorType(v18);
  int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
  if (v20 != 4)
  {
    if (v20 != 5)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v42 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t *))(*a2 + 32))(a2);
      uint64_t v43 = MIL::IRValueType::AsTensorType(v42);
      int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 88))(v43);
      MIL::IRDataTypeToString(v44, &v49);
      uint64_t v45 = std::string::insert(&v49, 0, "Unsupported Datatype for the scale ");
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      uint64_t v47 = std::string::append(&v50, " , must be fp32 or fp16");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v59);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    uint64_t Data = (float *)MIL::IRTensorValue::GetDataView<float>(a2);
    if (v22)
    {
      uint64_t v23 = 4 * v22;
      while (*Data > 0.0)
      {
        ++Data;
        v23 -= 4;
        if (!v23) {
          goto LABEL_18;
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"For operator: ", 14);
      int v29 = *(char *)(a6 + 23);
      if (v29 >= 0) {
        uint64_t v30 = a6;
      }
      else {
        uint64_t v30 = *(void *)a6;
      }
      if (v29 >= 0) {
        uint64_t v31 = *(unsigned __int8 *)(a6 + 23);
      }
      else {
        uint64_t v31 = *(void *)(a6 + 8);
      }
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", scale must be positive, but get ", 34);
      std::ostream::operator<<();
      uint64_t v33 = a7[1];
      uint64_t v57 = *a7;
      int v58 = (std::__shared_weak_count *)v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a8, &v57, 315, &__p);
      if (v56 < 0) {
        operator delete(__p);
      }
      long long v34 = v58;
      if (!v58) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_18:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
    goto LABEL_34;
  }
  uint64_t v24 = MIL::IRTensorValue::GetDataView<MIL::Fp16>(a2);
  if (!v25) {
    goto LABEL_18;
  }
  uint64_t v26 = (_WORD *)v24;
  uint64_t v27 = 2 * v25;
  while (1)
  {
    LOWORD(v50.__r_.__value_.__l.__data_) = *v26;
    if (MIL::Fp16::GetFloat((MIL::Fp16 *)&v50) <= 0.0) {
      break;
    }
    ++v26;
    v27 -= 2;
    if (!v27) {
      goto LABEL_18;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v59);
  uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"For operator: ", 14);
  int v36 = *(char *)(a6 + 23);
  if (v36 >= 0) {
    uint64_t v37 = a6;
  }
  else {
    uint64_t v37 = *(void *)a6;
  }
  if (v36 >= 0) {
    uint64_t v38 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    uint64_t v38 = *(void *)(a6 + 8);
  }
  uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", scale must be positive, but get ", 34);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v50);
  std::ostream::operator<<();
  uint64_t v40 = a7[1];
  uint64_t v53 = *a7;
  uint64_t v54 = (std::__shared_weak_count *)v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a8, &v53, 315, &v51);
  if (v52 < 0) {
    operator delete(v51);
  }
  long long v34 = v54;
  if (!v54) {
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_31:
  v59.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + *(void *)(v59.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v59.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v61 < 0) {
    operator delete(v60);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](&v62);
LABEL_34:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v64);
}

void sub_20F7005C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v45 & 1) == 0)
    {
LABEL_10:
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v46 - 152));
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v44);
  goto LABEL_10;
}

unsigned char *std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>::__optional_move_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<MIL::ValueInference::Tensor<signed char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<MIL::ValueInference::Tensor<signed char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<signed char>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)a1 = &unk_26C259EA8;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a1 + 32) = result;
    uint64_t v3 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

unsigned char *std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>::__optional_move_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[64] = 0;
  std::__optional_storage_base<MIL::ValueInference::Tensor<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>>((uint64_t)a1, a2);
  return a1;
}

__n128 std::__optional_storage_base<MIL::ValueInference::Tensor<unsigned char>,false>::__construct_from[abi:ne180100]<std::__optional_move_base<MIL::ValueInference::Tensor<unsigned char>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)a1 = &unk_26C259E78;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    __n128 result = *(__n128 *)(a2 + 32);
    *(__n128 *)(a1 + 32) = result;
    uint64_t v3 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a1 + 56) = v3;
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FD68;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FD68;
}

float std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if (*a2 > 127.0) {
    float v2 = 127.0;
  }
  return fmaxf(v2, -128.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FDE8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FDE8;
}

float std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if (*a2 > 127.0) {
    float v2 = 127.0;
  }
  return fmaxf(v2, -128.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FE68;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FE68;
}

float std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if (*a2 > 255.0) {
    float v2 = 255.0;
  }
  return fmaxf(v2, 0.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FEE8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FEE8;
}

float std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  if (*a2 > 255.0) {
    float v2 = 255.0;
  }
  return fmaxf(v2, 0.0);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,float>(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FF68;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FF68;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2 = *a2;
  uint64_t v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, -128.0);
  __int16 v11 = v2;
  __int16 v10 = (__int16)v3;
  __int16 v9 = MIL::Fp16::FromFloat(v3, 127.0);
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  float v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5) {
    float v7 = v5;
  }
  if (Float >= v7) {
    float v7 = Float;
  }
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C25FFE8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C25FFE8;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2 = *a2;
  uint64_t v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, -128.0);
  __int16 v11 = v2;
  __int16 v10 = (__int16)v3;
  __int16 v9 = MIL::Fp16::FromFloat(v3, 127.0);
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  float v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5) {
    float v7 = v5;
  }
  if (Float >= v7) {
    float v7 = Float;
  }
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<signed char> anonymous namespace'::QuantizeTensor<signed char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<signed char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C260068;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C260068;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2 = *a2;
  uint64_t v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, 0.0);
  __int16 v11 = v2;
  __int16 v10 = (__int16)v3;
  __int16 v9 = MIL::Fp16::FromFloat(v3, 255.0);
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  float v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5) {
    float v7 = v5;
  }
  if (Float >= v7) {
    float v7 = Float;
  }
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C2600E8;
  return result;
}

void std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C2600E8;
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(MIL::Fp16 *a1, __int16 *a2)
{
  __int16 v2 = *a2;
  uint64_t v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(a1, 0.0);
  __int16 v11 = v2;
  __int16 v10 = (__int16)v3;
  __int16 v9 = MIL::Fp16::FromFloat(v3, 255.0);
  float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  float v5 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v11);
  float v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v9);
  if (v7 >= v5) {
    float v7 = v5;
  }
  if (Float >= v7) {
    float v7 = Float;
  }
  return MIL::Fp16::FromFloat(v6, v7);
}

uint64_t std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2},std::allocator<MIL::ValueInference::Tensor<unsigned char> anonymous namespace'::QuantizeTensor<unsigned char,MIL::Fp16>(MIL::ValueInference::Tensor<MIL::Fp16> const&,MIL::ValueInference::Tensor<MIL::Fp16> const&,std::optional<MIL::ValueInference::Tensor<unsigned char>>,std::optional<int>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void MIL::Operators::Common::ios17::Dequantize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7023E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x230]);
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  uint64_t v71 = *(void **)(v69 - 136);
  if (v71)
  {
    *(void *)(v69 - 128) = v71;
    operator delete(v71);
  }
  std::string::size_type v72 = *(void **)(v69 - 96);
  if (v72)
  {
    *(void *)(v69 - 88) = v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::DynamicDequantize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F703CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x230]);
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  uint64_t v71 = *(void **)(v69 - 136);
  if (v71)
  {
    *(void *)(v69 - 128) = v71;
    operator delete(v71);
  }
  std::string::size_type v72 = *(void **)(v69 - 96);
  if (v72)
  {
    *(void *)(v69 - 88) = v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void sub_20F7042C0()
{
}

void sub_20F7042CC()
{
}

void MIL::Operators::Common::ios17::DynamicQuantize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F704ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  uint64_t v55 = *v52;
  *char v52 = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v53 - 72), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Quantize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7068BC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x288]);
  unint64_t v3 = STACK[0x220];
  STACK[0x220] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x218]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x218]);
  }
  uint64_t v4 = *(void **)(v1 - 112);
  if (v4)
  {
    *(void *)(v1 - 104) = v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x228], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::GRU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F70A178(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x6A8]);
  unint64_t v3 = STACK[0x600];
  STACK[0x600] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x5E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5E8]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0x738];
  if (STACK[0x738])
  {
    STACK[0x740] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x608], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6A0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::LSTM::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F710648(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0xBD8]);
  unint64_t v3 = STACK[0xAB0];
  STACK[0xAB0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0xA88]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0xA88]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0xC68];
  if (STACK[0xC68])
  {
    STACK[0xC70] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0xAB8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xBD0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::RNN::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7150B8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x638]);
  unint64_t v3 = STACK[0x5A0];
  STACK[0x5A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x588]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x588]);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0x6C8];
  if (STACK[0x6C8])
  {
    STACK[0x6D0] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x5A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x630], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceBaseArgReduction(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  float v7 = v6;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      goto LABEL_9;
    }
  }
  else if (!v6)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  __int16 v9 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  MIL::IRValue::GetScalar<std::string>(v9, &v23);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if ((MIL::StringToIRDataType((const void **)&v23.__r_.__value_.__l.__data_, 0) & 0xFFFFFFFB) != 0xB)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "output_dtype must be either int32 or uint16");
    __int16 v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string v16 = v22;
    }
    MIL::ValidationResult::ValidationResult(__p, &v17, 315, &v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v14, (uint64_t)__p);
    v14[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
    int v15 = v21;
    MIL::ValidationError::ValidationError(exception, v14);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
LABEL_9:
  uint64_t v10 = a2[1];
  v13[0] = *a2;
  v13[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(a1, (uint64_t)v13, a3);
}

void sub_20F71625C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a12);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a27);
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseArgReduction::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F717610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x208]);
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (__p) {
    operator delete(__p);
  }
  long long v74 = *(void **)(v72 - 248);
  if (v74)
  {
    *(void *)(v72 - 240) = v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a72, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x200], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReduceArgmax::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseArgReduction::Make();
}

void sub_20F717D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReduceArgmin::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseArgReduction::Make();
}

void sub_20F717DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseScatter::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F719CC0(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2B0];
  STACK[0x2B0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A8]);
  }
  uint64_t v4 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v6;
    operator delete(v6);
  }
  float v7 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v8;
    operator delete(v8);
  }
  __int16 v9 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v10;
    operator delete(v10);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3A0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::BaseScatterWithAxis::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F71C6E0(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2B0];
  STACK[0x2B0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x2A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A8]);
  }
  uint64_t v4 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v4;
    operator delete(v4);
  }
  float v5 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v6;
    operator delete(v6);
  }
  float v7 = (void *)STACK[0x340];
  if (STACK[0x340])
  {
    STACK[0x348] = (unint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v8;
    operator delete(v8);
  }
  __int16 v9 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2B8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B0], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Scatter::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseScatterWithAxis::Make();
}

void sub_20F71D204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScatterAlongAxis::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseScatterWithAxis::Make();
}

void sub_20F71D2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ScatterNd::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios17::BaseScatter::Make();
}

void sub_20F71D36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateNonMaximumSuppression(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v24, "boxes");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "scores");
  float v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 104))(v6)
    || ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8) & 1) == 0)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    int v12 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v22 = *LocationPtr;
    std::string v23 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Non-fixed rank not supported");
    MIL::ValidationResult::ValidationResult(a2, &v22, 315, __p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = v23;
    if (!v23) {
      return;
    }
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "max_boxes");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  int v10 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v10 > 0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  uint64_t v14 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v18 = *v14;
  uint64_t v19 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "Max boxes must be positive");
  MIL::ValidationResult::ValidationResult(a2, &v18, 315, v16);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  uint64_t v13 = v19;
  if (v19) {
    goto LABEL_16;
  }
}

void sub_20F71D598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceNonMaximumSuppression(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_boxes");
  Singleuint64_t Value = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&__p);
  int v6 = MIL::IRValue::GetScalar<int>(SingleValue);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  uint64_t v7 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v6);
  std::string::basic_string[abi:ne180100]<0>(&__p, "boxes");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scores");
  int v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  if (SHIBYTE(v45) < 0) {
    operator delete(__p);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  int v44 = 0;
  unint64_t v45 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  uint64_t v13 = v44;
  uint64_t v14 = v44 - 1;
  int v44 = v14;
  if ((unint64_t)v14 >= v45)
  {
    uint64_t v15 = ((char *)v14 - (unsigned char *)__p) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v45 - (void)__p;
    if ((uint64_t)(v45 - (void)__p) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    char v20 = (uint64_t *)&v19[8 * v15];
    char v21 = &v19[8 * v18];
    uint64_t *v20 = v7;
    uint64_t v13 = v20 + 1;
    std::string v23 = (char *)__p;
    uint64_t v22 = (char *)v44;
    if (v44 != __p)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *--char v20 = v24;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)__p;
    }
    std::string __p = v20;
    int v44 = v13;
    unint64_t v45 = (unint64_t)v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    uint64_t *v14 = v7;
  }
  int v44 = v13;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v40, *(const void **)v25, *(void *)(v25 + 8), (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3);
  uint64_t v26 = v41;
  uint64_t v27 = v41 - 1;
  uint64_t v41 = v27;
  if ((unint64_t)v27 >= v42)
  {
    uint64_t v28 = ((char *)v27 - (unsigned char *)v40) >> 3;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = v42 - (void)v40;
    if ((uint64_t)(v42 - (void)v40) >> 2 > v29) {
      unint64_t v29 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31) {
      uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v42, v31);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v33 = (uint64_t *)&v32[8 * v28];
    long long v34 = &v32[8 * v31];
    uint64_t *v33 = v7;
    uint64_t v26 = v33 + 1;
    int v36 = (char *)v40;
    uint64_t v35 = (char *)v41;
    if (v41 != v40)
    {
      do
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        *--uint64_t v33 = v37;
      }
      while (v35 != v36);
      uint64_t v35 = (char *)v40;
    }
    uint64_t v40 = v33;
    uint64_t v41 = v26;
    unint64_t v42 = (unint64_t)v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v27 = v7;
  }
  uint64_t v41 = v26;
  if (v44 != __p)
  {
    uint64_t v38 = *(void *)__p;
    uint64_t v39 = operator new(0x10uLL);
    *uint64_t v39 = v38;
    v39[1] = v7;
    (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
    MIL::IRTensorValueType::MakeWithShape();
  }
  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
}

void sub_20F71DA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValueInference::ValueInferenceNonMaximumSuppression(MIL::IRConstantDimension **a1, uint64_t a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v38, "max_boxes");
  float v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
  if (v5)
  {
    int v6 = MIL::IRValue::GetScalar<int>(**((const void ***)v5 + 5));
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "per_class_suppression");
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
    if (v7)
    {
      int v8 = MIL::IRValue::GetScalar<BOOL>(**((const void ***)v7 + 5));
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v38, "boxes");
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
      if (v9)
      {
        int v10 = (uint64_t *)*((void *)v9 + 5);
        uint64_t v12 = *v10;
        uint64_t v11 = (std::__shared_weak_count *)v10[1];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(v38, "scores");
        uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
        if (v13)
        {
          uint64_t v14 = (uint64_t *)*((void *)v13 + 5);
          uint64_t v16 = *v14;
          uint64_t v15 = (std::__shared_weak_count *)v14[1];
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v39 < 0) {
            operator delete(v38[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(v38, "boxes");
          uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
          if (v17)
          {
            uint64_t v18 = MIL::IRValue::AsTensor(**((MIL::IRValue ***)v17 + 5));
            uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
            if (v39 < 0) {
              operator delete(v38[0]);
            }
            int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
            if (v20 != 4)
            {
              if (v20 == 5)
              {
                std::string::basic_string[abi:ne180100]<0>(v38, "iou_threshold");
                char v21 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
                if (v21)
                {
                  float v22 = MIL::IRValue::GetScalar<float>(**((const void ***)v21 + 5));
                  if (v39 < 0) {
                    operator delete(v38[0]);
                  }
                  uint64_t v36 = v12;
                  uint64_t v37 = v11;
                  if (v11) {
                    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v36, (uint64_t)v38);
                  if (v37) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
                  }
                  uint64_t v33 = v16;
                  long long v34 = v15;
                  if (v15) {
                    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v33, (uint64_t)v35);
                  if (v34) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                  }
                  MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v31, *a1);
                }
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Unsupported Datatype for the input boxes IRTensor - must be fp16, fp32.");
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
            std::string::basic_string[abi:ne180100]<0>(v38, "iou_threshold");
            std::string v23 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v38);
            if (v23)
            {
              LOWORD(v35[0]) = MIL::IRValue::GetScalar<MIL::Fp16>(**((const void ***)v23 + 5));
              float Float = MIL::Fp16::GetFloat((MIL::Fp16 *)v35);
              if (v39 < 0) {
                operator delete(v38[0]);
              }
              uint64_t v28 = v12;
              unint64_t v29 = v11;
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::ValueInferenceUtils::GetCastedTensor<float>(&v28, v38);
              if (v29) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              }
              uint64_t v26 = v16;
              uint64_t v27 = v15;
              if (v15) {
                atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::ValueInferenceUtils::GetCastedTensor<float>(&v26, v35);
              if (v27) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v27);
              }
              MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(v30, (uint64_t)v31);
              MIL::ValueInference::Tensor<float>::~Tensor(v30);
              MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(&v40, (uint64_t)v30);
              MIL::ValueInference::Tensor<float>::~Tensor(&v40);
              MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v31, *a1);
            }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_20F71E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  __cxa_free_exception(v56);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::SelectBoxIndices(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  v89[4] = *MEMORY[0x263EF8340];
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet(a1);
  unint64_t v10 = (*ProgramFirstSet)[1];
  uint64_t v66 = **ProgramFirstSet;
  unint64_t v11 = (*ProgramFirstSet)[2];
  uint64_t v12 = (unint64_t **)MIL::ParserContext::GetProgramFirstSet(a2);
  unint64_t v14 = **v12;
  unint64_t v13 = (*v12)[1];
  unint64_t v15 = (*v12)[2];
  std::vector<unsigned long>::vector(&__p, v15);
  std::vector<std::vector<unsigned long>>::vector(v88, v14, (uint64_t)&__p);
  unint64_t v71 = v11;
  if (__p)
  {
    uint64_t v86 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (v15)
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          uint64_t v18 = operator new(0x18uLL);
          uint64_t v86 = v18 + 3;
          char v87 = v18 + 3;
          *uint64_t v18 = i;
          v18[1] = 0;
          uint64_t v18[2] = j;
          std::string __p = v18;
          float v19 = *(float *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&__p);
          if (__p)
          {
            uint64_t v86 = __p;
            operator delete(__p);
          }
          if (v13 < 2)
          {
            uint64_t v20 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            for (uint64_t k = 1; k != v13; ++k)
            {
              float v22 = operator new(0x18uLL);
              uint64_t v86 = v22 + 3;
              char v87 = v22 + 3;
              void *v22 = i;
              v22[1] = k;
              void v22[2] = j;
              std::string __p = v22;
              float v23 = *(float *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&__p);
              if (__p)
              {
                uint64_t v86 = __p;
                operator delete(__p);
              }
              if (v23 > v19)
              {
                float v19 = v23;
                uint64_t v20 = k;
              }
            }
          }
          *(void *)(*(void *)(v88[0] + 24 * i) + 8 * j) = v20;
        }
      }
    }
  }
  uint64_t v24 = operator new(0x10uLL);
  v83.n128_u64[1] = (unint64_t)(v24 + 2);
  uint64_t v84 = v24 + 2;
  *uint64_t v24 = v66;
  v24[1] = a3;
  v83.n128_u64[0] = (unint64_t)v24;
  MIL::ValueInference::Tensor<int>::Zeros(&v83, (uint64_t)&__p);
  v89[0] = &unk_26C260168;
  v89[3] = v89;
  MIL::ValueInference::Tensor<int>::ForEach((uint64_t)&__p, (uint64_t)v89, a5);
  std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100](v89);
  MIL::ValueInference::Tensor<int>::~Tensor(&__p);
  if (v83.n128_u64[0])
  {
    v83.n128_u64[1] = v83.n128_u64[0];
    operator delete((void *)v83.n128_u64[0]);
  }
  if (v66)
  {
    uint64_t v25 = 0;
    while (1)
    {
      std::vector<float>::vector(&__p, v71);
      if (v71)
      {
        for (uint64_t m = 0; m != v71; ++m)
        {
          uint64_t v27 = *(void *)(*(void *)(v88[0] + 24 * v25) + 8 * m);
          uint64_t v28 = (uint64_t *)operator new(0x18uLL);
          uint64_t v81 = v28 + 3;
          uint64_t v82 = v28 + 3;
          *uint64_t v28 = v25;
          v28[1] = v27;
          uint64_t v28[2] = m;
          uint64_t v80 = v28;
          int v29 = *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&v80);
          if (v80)
          {
            uint64_t v81 = (uint64_t *)v80;
            operator delete(v80);
          }
          *((_DWORD *)__p + m) = v29;
        }
      }
      std::vector<unsigned long>::vector(&v80, (v86 - (unsigned char *)__p) >> 2);
      uint64_t v30 = (uint64_t *)v80;
      unint64_t v31 = v81;
      if (v80 != v81)
      {
        uint64_t v32 = 0;
        uint64_t v33 = (uint64_t *)v80;
        do
          *v33++ = v32++;
        while (v33 != v31);
      }
      v79[0] = &__p;
      if ((char *)v31 - (char *)v30 < 1025)
      {
        long long v34 = 0;
        uint64_t v36 = 0;
      }
      else
      {
        long long v34 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<unsigned long>(v31 - v30);
        uint64_t v36 = v35;
      }
      if (v34) {
        operator delete(v34);
      }
      LOBYTE(v77[0]) = 0;
      std::vector<BOOL>::vector(v79, v71, (unsigned __int8 *)v77);
      uint64_t v38 = v80;
      uint64_t v37 = v81;
      if (v81 != v80)
      {
        unint64_t v39 = 0;
        uint64_t v40 = 0;
        while (1)
        {
          unint64_t v41 = v38[v39];
          if (((*(void *)((char *)v79[0] + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
            break;
          }
          ++v39;
LABEL_88:
          if (v39 >= v37 - v38) {
            goto LABEL_89;
          }
        }
        unint64_t v42 = operator new(0x10uLL);
        v77[1] = v42 + 2;
        uint64_t v78 = v42 + 2;
        *unint64_t v42 = v25;
        v42[1] = v40;
        v77[0] = v42;
        *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[](a5, (uint64_t *)v77) = v41;
        if (v77[0])
        {
          v77[1] = v77[0];
          operator delete(v77[0]);
        }
        uint64_t v43 = v40 + 1;
        if (v43 != a3) {
          break;
        }
      }
LABEL_89:
      if (v79[0]) {
        operator delete(v79[0]);
      }
      if (v80)
      {
        uint64_t v81 = (uint64_t *)v80;
        operator delete(v80);
      }
      if (__p)
      {
        uint64_t v86 = __p;
        operator delete(__p);
      }
      if (++v25 == v66) {
        goto LABEL_96;
      }
    }
    std::vector<float>::vector(v77, v10);
    if (v10)
    {
      for (uint64_t n = 0; n != v10; ++n)
      {
        unint64_t v45 = operator new(0x18uLL);
        v75[1] = v45 + 3;
        long long v76 = v45 + 3;
        *unint64_t v45 = v25;
        v45[1] = n;
        v45[2] = v41;
        v75[0] = v45;
        uint64_t v46 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)v75);
        *((_DWORD *)v77[0] + n) = *v46;
        if (v75[0])
        {
          v75[1] = v75[0];
          operator delete(v75[0]);
        }
      }
    }
    uint64_t v69 = v43;
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v75;
    uint64_t v78 = v76;
    unint64_t v47 = v39 + 1;
    uint64_t v38 = v80;
    uint64_t v37 = v81;
    long long v48 = v75[0];
    unint64_t v70 = v47;
    if (v47 >= ((char *)v81 - (unsigned char *)v80) >> 3)
    {
LABEL_85:
      if (v48)
      {
        v77[1] = v48;
        operator delete(v48);
        uint64_t v38 = v80;
        uint64_t v37 = v81;
      }
      uint64_t v40 = v69;
      unint64_t v39 = v70;
      goto LABEL_88;
    }
    while (1)
    {
      unint64_t v49 = v38[v47];
      if (((1 << v49) & *((void *)v79[0] + (v49 >> 6))) == 0) {
        break;
      }
LABEL_83:
      if (++v47 >= v37 - v38)
      {
        long long v48 = v77[0];
        goto LABEL_85;
      }
    }
    std::vector<float>::vector(v75, v10);
    if (v10)
    {
      for (iuint64_t i = 0; ii != v10; ++ii)
      {
        uint64_t v51 = operator new(0x18uLL);
        v73[1] = v51 + 3;
        long long v74 = v51 + 3;
        *uint64_t v51 = v25;
        v51[1] = ii;
        _DWORD v51[2] = v49;
        v73[0] = v51;
        char v52 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)v73);
        *((_DWORD *)v75[0] + ii) = *v52;
        if (v73[0])
        {
          v73[1] = v73[0];
          operator delete(v73[0]);
        }
      }
    }
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    uint64_t v53 = v73[0];
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v73;
    long long v76 = v74;
    if (a4
      && *(void *)(*(void *)(v88[0] + 24 * v25) + 8 * v41) != *(void *)(*(void *)(v88[0] + 24 * v25) + 8 * v49))
    {
      if (!v73[0])
      {
LABEL_82:
        uint64_t v38 = v80;
        uint64_t v37 = v81;
        goto LABEL_83;
      }
    }
    else
    {
      float v54 = *((float *)v73[0] + 2);
      float v55 = *((float *)v73[0] + 3);
      float v56 = *((float *)v77[0] + 2);
      float v57 = *((float *)v77[0] + 3);
      if (v54 >= v56) {
        float v58 = *((float *)v77[0] + 2);
      }
      else {
        float v58 = *((float *)v73[0] + 2);
      }
      float v59 = *((float *)v77[0] + 1);
      float v60 = *((float *)v73[0] + 1);
      if (*(float *)v77[0] >= *(float *)v73[0]) {
        float v61 = *(float *)v77[0];
      }
      else {
        float v61 = *(float *)v73[0];
      }
      float v62 = v58 - v61;
      if (v55 >= v57) {
        float v63 = *((float *)v77[0] + 3);
      }
      else {
        float v63 = *((float *)v73[0] + 3);
      }
      if (v59 >= v60) {
        float v64 = *((float *)v77[0] + 1);
      }
      else {
        float v64 = *((float *)v73[0] + 1);
      }
      float v65 = v63 - v64;
      if (v62 < 0.0) {
        float v62 = 0.0;
      }
      if (v65 < 0.0) {
        float v65 = 0.0;
      }
      if ((float)((float)(v62 * v65)
                 / (float)((float)((float)((float)((float)(v56 - *(float *)v77[0]) * (float)(v57 - v59))
                                         + (float)((float)(v54 - *(float *)v73[0]) * (float)(v55 - v60)))
                                 - (float)(v62 * v65))
                         + 0.0000001)) > a6)
        *((void *)v79[0] + (v49 >> 6)) |= 1 << v49;
    }
    v75[1] = v53;
    operator delete(v53);
    goto LABEL_82;
  }
LABEL_96:
  std::string __p = v88;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20F71EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  std::__function::__value_func<int ()(int)>::~__value_func[abi:ne180100]((void *)(v39 - 160));
  MIL::ValueInference::Tensor<int>::~Tensor(&a38);
  if (__p) {
    operator delete(__p);
  }
  a38 = (void *)(v39 - 184);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void anonymous namespace'::SelectByIndices(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, uint64_t a3@<X8>)
{
  ProgramFirstSet = (uint64_t **)MIL::ParserContext::GetProgramFirstSet(a1);
  uint64_t v7 = *(void *)(*(void *)MIL::ParserContext::GetProgramFirstSet(a2) + 8);
  uint64_t v8 = **ProgramFirstSet;
  uint64_t v9 = (*ProgramFirstSet)[1];
  unint64_t v10 = operator new(0x18uLL);
  __p.n128_u64[1] = (unint64_t)(v10 + 3);
  uint64_t v26 = v10 + 3;
  void *v10 = v8;
  v10[1] = v9;
  void v10[2] = v7;
  __p.n128_u64[0] = (unint64_t)v10;
  MIL::ValueInference::Tensor<float>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (v7)
      {
        for (uint64_t j = 0; j != v7; ++j)
        {
          unint64_t v13 = operator new(0x10uLL);
          float v23 = v13 + 2;
          uint64_t v24 = v13 + 2;
          *unint64_t v13 = i;
          v13[1] = j;
          float v22 = v13;
          uint64_t v14 = *(int *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a2, (uint64_t *)&v22);
          if (v22)
          {
            float v23 = v22;
            operator delete(v22);
          }
          if (v14 == -1) {
            break;
          }
          if ((*ProgramFirstSet)[1])
          {
            unint64_t v15 = 0;
            do
            {
              uint64_t v16 = operator new(0x18uLL);
              float v23 = v16 + 3;
              uint64_t v24 = v16 + 3;
              *uint64_t v16 = i;
              v16[1] = v15;
              uint64_t v16[2] = v14;
              float v22 = v16;
              int v17 = *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)a1, (uint64_t *)&v22);
              uint64_t v18 = operator new(0x18uLL);
              uint64_t v20 = v18 + 3;
              char v21 = v18 + 3;
              *uint64_t v18 = i;
              v18[1] = v15;
              uint64_t v18[2] = j;
              float v19 = v18;
              *(_DWORD *)MIL::ValueInference::Tensor<float>::operator[](a3, (uint64_t *)&v19) = v17;
              if (v19)
              {
                uint64_t v20 = v19;
                operator delete(v19);
              }
              if (v22)
              {
                float v23 = v22;
                operator delete(v22);
              }
              ++v15;
            }
            while (v15 < (*ProgramFirstSet)[1]);
          }
        }
      }
    }
  }
}

void sub_20F71EE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateTopk(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  float v5 = (void *)(*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *, const MIL::IROperation *))(*(void *)this + 176))(this, a2);
  std::string::basic_string[abi:ne180100]<0>(&v50, "output_indices_dtype");
  BOOL IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (v5[1] - *v5 < 0x11uLL)
  {
    if (IsParameterSet)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v38 = *LocationPtr;
      uint64_t v39 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v36, "output_indices_dtype is set but op only has one output");
      MIL::ValidationResult::ValidationResult(a3, &v38, 315, v36);
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      unint64_t v15 = v39;
      if (v39) {
        goto LABEL_49;
      }
      return;
    }
  }
  else
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v5 + 16));
    uint64_t v8 = MIL::IRValueType::AsTensorType(Type);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
    if ((v9 & 0xFFFFFFFB) != 0xB)
    {
      uint64_t v24 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      uint64_t v25 = (std::__shared_weak_count *)v24[1];
      uint64_t v48 = *v24;
      unint64_t v49 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v46, "Unsupported dtype for indices output");
      MIL::ValidationResult::ValidationResult(a3, &v48, 315, v46);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      unint64_t v15 = v49;
      if (v49) {
        goto LABEL_49;
      }
      return;
    }
    if (IsParameterSet)
    {
      int v10 = v9;
      std::string::basic_string[abi:ne180100]<0>(&__p, "output_indices_dtype");
      Parameteruint64_t Value = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
      uint64_t v12 = (const void *)MIL::IRValue::AsTensor(ParameterValue);
      MIL::IRValue::GetScalar<std::string>(v12, &v50);
      if (v45 < 0) {
        operator delete(__p);
      }
      if (MIL::StringToIRDataType((const void **)&v50.__r_.__value_.__l.__data_, 0) != v10)
      {
        int v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v30 = (std::__shared_weak_count *)v29[1];
        uint64_t v42 = *v29;
        uint64_t v43 = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v40, "output_indices_dtype, if set, must match the datatype of the indices output");
        MIL::ValidationResult::ValidationResult(a3, &v42, 315, v40);
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        return;
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  int v17 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "axis");
  uint64_t v18 = (const void *)MIL::IROperation::GetParameterValue(this);
  int v19 = MIL::IRValue::GetScalar<int>(v18);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "k");
  uint64_t v20 = MIL::IROperation::GetParameterValue(this);
  uint64_t v21 = MIL::IRValue::TryGetScalar<int>(v20);
  float v22 = (int *)v21;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_24;
    }
  }
  else if (v21)
  {
LABEL_24:
    int v23 = *v22;
    goto LABEL_46;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "k");
  uint64_t v26 = MIL::IROperation::GetParameterValue(this);
  uint64_t v27 = MIL::IRValue::TryGetScalar<short>(v26);
  uint64_t v28 = (__int16 *)v27;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v50.__r_.__value_.__l.__data_);
    if (v28) {
      goto LABEL_34;
    }
  }
  else if (v27)
  {
LABEL_34:
    int v23 = *v28;
    goto LABEL_46;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "k");
  uint64_t v31 = MIL::IROperation::GetParameterValue(this);
  int v23 = *(char *)MIL::IRValue::TryGetScalar<signed char>(v31);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_46:
  uint64_t v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v33 = v32[1];
  uint64_t v34 = *v32;
  uint64_t v35 = (std::__shared_weak_count *)v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::Shared::ValidateTopkInputs(v17, v19, v23, &v34, a3);
  unint64_t v15 = v35;
  if (v35) {
LABEL_49:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
}

void sub_20F71F288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  _Unwind_Resume(exception_object);
}

_OWORD *anonymous namespace'::StandardizeCoordinates@<X0>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4.i64[0] = *v3;
  float32x2_t v5 = (float32x2_t)v3[1];
  v4.i64[1] = *v3;
  float32x4_t v10 = v4;
  int v6 = operator new(0x10uLL);
  *(int8x8_t *)v7.f32 = vbic_s8((int8x8_t)vmul_f32(v5, (float32x2_t)0x3F0000003F000000), (int8x8_t)vcltz_f32(v5));
  v7.i64[1] = v7.i64[0];
  *(void *)&long long v8 = vsubq_f32(v10, v7).u64[0];
  *((void *)&v8 + 1) = vaddq_f32(v10, v7).i64[1];
  *a2 = v6;
  _OWORD *v6 = v8;
  __n128 result = v6 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    long long v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20F71F47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C260168;
  return result;
}

void std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C260168;
}

uint64_t std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::operator()(uint64_t a1, _DWORD *a2)
{
  return (*a2 - 1);
}

uint64_t std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0,std::allocator<anonymous namespace'::SelectBoxIndices(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,float,unsigned long long,BOOL)::$_0>,int ()(int)>::target_type()
{
}

void *std::get_temporary_buffer[abi:ne180100]<unsigned long>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  __int16 v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    __n128 result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    long long v8 = (char *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * *result))
      {
        *__n128 result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      float v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &result[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        uint64_t v26 = (uint64_t *)&v22[8 * v23];
        uint64_t v27 = &v22[8 * a4];
        uint64_t v28 = *a3;
        int v29 = v26;
        while (v29 != (uint64_t *)v27)
        {
          uint64_t v30 = v29;
          uint64_t v31 = *v29;
          float v32 = *(float *)(*v28 + 4 * v31);
          uint64_t v33 = *(void *)v22;
          float v34 = *(float *)(*v28 + 4 * *(void *)v22);
          if (v32 > v34) {
            uint64_t v33 = v31;
          }
          v22 += 8 * (v32 <= v34);
          int v29 = &v30[v32 > v34];
          *(void *)long long v8 = v33;
          v8 += 8;
          if (v22 == (char *)v26)
          {
            if (v29 != (uint64_t *)v27)
            {
              uint64_t v35 = 0;
              if (v32 > v34) {
                char v36 = 1;
              }
              else {
                char v36 = 2;
              }
              char v37 = &v30[v36 & 1];
              do
              {
                *(void *)&v8[v35 * 8] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          uint64_t v38 = 0;
          do
          {
            *(void *)&v8[v38] = *(void *)&v22[v38];
            v38 += 8;
          }
          while (&v22[v38] != (char *)v26);
        }
      }
      else
      {
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        unint64_t v15 = result;
        do
        {
          uint64_t v16 = *v15;
          unint64_t v15 = v12;
          uint64_t v17 = *v12;
          float v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            uint64_t v19 = v13;
            while (1)
            {
              *(uint64_t *)((char *)result + v19 + 8) = v16;
              if (!v19) {
                break;
              }
              uint64_t v16 = *(uint64_t *)((char *)result + v19 - 8);
              v19 -= 8;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                uint64_t v20 = (uint64_t *)((char *)result + v19 + 8);
                goto LABEL_15;
              }
            }
            uint64_t v20 = result;
LABEL_15:
            uint64_t *v20 = v17;
          }
          uint64_t v12 = v15 + 1;
          v13 += 8;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t *result, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    float32x2_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *float32x2_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13) {
        uint64_t v10 = *result;
      }
      *a5 = v10;
      float32x2_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v24 = &result[a4 >> 1];
      unint64_t v25 = *a3;
      uint64_t v26 = &v7[a4 >> 1];
      while (v26 != a2)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *v26;
        float v29 = *(float *)(*v25 + 4 * v28);
        uint64_t v30 = *v7;
        float v31 = *(float *)(*v25 + 4 * *v7);
        if (v29 > v31) {
          uint64_t v30 = v28;
        }
        uint64_t v26 = &v27[v29 > v31];
        v7 += v29 <= v31;
        *v5++ = v30;
        if (v7 == v24)
        {
          if (v26 != a2)
          {
            uint64_t v32 = 0;
            uint64_t v33 = &v27[v29 > v31];
            do
            {
              v5[v32] = v33[v32];
              ++v32;
            }
            while (&v33[v32] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        uint64_t v34 = 0;
        do
        {
          v5[v34] = v7[v34];
          ++v34;
        }
        while (&v7[v34] != v24);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **a3;
        uint64_t v17 = a5;
        float v18 = a5;
        do
        {
          uint64_t v20 = *v18++;
          uint64_t v19 = v20;
          if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v20))
          {
            *float v18 = *v14;
          }
          else
          {
            v17[1] = v19;
            uint64_t v21 = a5;
            if (v17 != a5)
            {
              uint64_t v22 = v15;
              while (1)
              {
                uint64_t v21 = (uint64_t *)((char *)a5 + v22);
                uint64_t v23 = *(uint64_t *)((char *)a5 + v22 - 8);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v23)) {
                  break;
                }
                uint64_t *v21 = v23;
                v22 -= 8;
                if (!v22)
                {
                  uint64_t v21 = a5;
                  break;
                }
              }
            }
            uint64_t *v21 = *v14;
          }
          ++v14;
          v15 += 8;
          uint64_t v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,anonymous namespace'::ArgsortDesc(std::vector<float> const&)::$_0 &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    float v13 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v14 = 0;
      uint64_t v15 = **a4;
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t v17 = *(void *)&v13[v14];
        if (*(float *)(v15 + 4 * *(void *)a2) > *(float *)(v15 + 4 * v17)) {
          break;
        }
        v14 += 8;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      float v58 = a4;
      __src = a7;
      uint64_t v56 = a8;
      float v57 = a3;
      float v55 = &v13[v14];
      if (-v16 >= v10)
      {
        if (v16 == -1)
        {
          *(void *)&v13[v14] = *(void *)a2;
          *(void *)a2 = v17;
          return result;
        }
        if (v16 <= 0) {
          uint64_t v29 = -v16;
        }
        else {
          uint64_t v29 = 1 - v16;
        }
        uint64_t v28 = v29 >> 1;
        uint64_t v22 = &v13[8 * (v29 >> 1) + v14];
        uint64_t v21 = a2;
        if (a2 != a3)
        {
          unint64_t v30 = (a3 - a2) >> 3;
          uint64_t v21 = a2;
          do
          {
            unint64_t v31 = v30 >> 1;
            uint64_t v32 = &v21[8 * (v30 >> 1)];
            uint64_t v34 = *(void *)v32;
            uint64_t v33 = v32 + 8;
            v30 += ~(v30 >> 1);
            if (*(float *)(v15 + 4 * v34) > *(float *)(v15 + 4 * *(void *)v22)) {
              uint64_t v21 = v33;
            }
            else {
              unint64_t v30 = v31;
            }
          }
          while (v30);
        }
        uint64_t v20 = (v21 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v19 = v10;
        }
        else {
          uint64_t v19 = v10 + 1;
        }
        uint64_t v20 = v19 >> 1;
        uint64_t v21 = &a2[8 * (v19 >> 1)];
        uint64_t v22 = a2;
        if (a2 - v13 != v14)
        {
          unint64_t v23 = (a2 - v13 - v14) >> 3;
          uint64_t v22 = &v13[v14];
          do
          {
            unint64_t v24 = v23 >> 1;
            unint64_t v25 = &v22[8 * (v23 >> 1)];
            uint64_t v27 = *(void *)v25;
            uint64_t v26 = v25 + 8;
            v23 += ~(v23 >> 1);
            if (*(float *)(v15 + 4 * *(void *)v21) > *(float *)(v15 + 4 * v27)) {
              unint64_t v23 = v24;
            }
            else {
              uint64_t v22 = v26;
            }
          }
          while (v23);
        }
        uint64_t v28 = (v22 - v13 - v14) >> 3;
      }
      a5 = -(v28 + v16);
      uint64_t v35 = v10 - v20;
      uint64_t v36 = v28;
      char v37 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v22, a2, v21);
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      if (v38 + v20 >= v10 - (v38 + v20) - v16)
      {
        uint64_t v42 = v21;
        uint64_t v43 = v38;
        a8 = v56;
        a2 = v22;
        a4 = v58;
        uint64_t v35 = v20;
        a7 = __src;
        a5 = v43;
        a3 = v39;
        float v13 = v55;
      }
      else
      {
        uint64_t v40 = v22;
        a4 = v58;
        uint64_t v41 = v20;
        a7 = __src;
        float v13 = v39;
        a2 = v21;
        a8 = v56;
        a3 = v57;
      }
      uint64_t v10 = v35;
      if (!v35) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        uint64_t v48 = 0;
        do
        {
          *(void *)&a7[v48] = *(void *)&v13[v48];
          v48 += 8;
        }
        while (&v13[v48] != a2);
        if (v48)
        {
          unint64_t v49 = *a4;
          std::string v50 = a7;
          while (a2 != a3)
          {
            uint64_t v51 = *(void *)a2;
            float v52 = *(float *)(*v49 + 4 * *(void *)a2);
            float v53 = *(float *)(*v49 + 4 * *(void *)v50);
            if (v52 <= v53) {
              uint64_t v51 = *(void *)v50;
            }
            a2 += 8 * (v52 > v53);
            v50 += 8 * (v52 <= v53);
            *(void *)float v13 = v51;
            v13 += 8;
            if (&a7[v48] == v50) {
              return result;
            }
          }
          return (char *)memmove(v13, v50, a7 - v50 + v48);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v44 = 0;
      do
      {
        *(void *)&a7[v44] = *(void *)&a2[v44];
        v44 += 8;
      }
      while (&a2[v44] != a3);
      if (v44)
      {
        char v45 = &a7[v44];
        uint64_t v46 = a3 - 8;
        while (a2 != v13)
        {
          uint64_t v47 = *((void *)v45 - 1);
          if (*(float *)(**a4 + 4 * v47) <= *(float *)(**a4 + 4 * *((void *)a2 - 1)))
          {
            v45 -= 8;
          }
          else
          {
            uint64_t v47 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)uint64_t v46 = v47;
          v46 -= 8;
          if (v45 == a7) {
            return result;
          }
        }
        uint64_t v54 = 0;
        do
        {
          *(void *)&v46[v54] = *(void *)&v45[v54 - 8];
          v54 -= 8;
        }
        while (&v45[v54] != a7);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  BOOL v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      BOOL v4 = &__src[v7];
      *(void *)BOOL v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      BOOL v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 1;
      float32x2_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = v14;
          void *v15 = *v14;
          uint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        *uint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void MIL::Operators::Common::ios17::NonMaximumSuppression::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7226C4(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x4E0]);
  unint64_t v3 = STACK[0x478];
  STACK[0x478] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x450]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x450]);
  }
  BOOL v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  float32x2_t v5 = (void *)STACK[0x558];
  if (STACK[0x558])
  {
    STACK[0x560] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x480], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4D8], 0);
  _Unwind_Resume(a1);
}

void sub_20F7231AC()
{
  uint64_t v0 = (void *)STACK[0x4E0];
  if (STACK[0x4E0])
  {
    STACK[0x4E8] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x20F72318CLL);
}

void sub_20F7231C4()
{
}

void sub_20F7231CC()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x4E0]) {
      JUMPOUT(0x20F7231F0);
    }
  }
}

void MIL::Operators::Common::ios17::Topk::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7240B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a66) {
    (*(void (**)(void *))(*(void *)a66 + 8))(a66);
  }
  uint64_t v72 = *v69;
  *uint64_t v69 = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v70 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateReshape(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "x");
  Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v6 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v43 < 0) {
    operator delete(v41);
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "shape");
  int64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  if (v43 < 0) {
    operator delete(v41);
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "shape");
  Parameteruint64_t Value = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&v41, 0);
  uint64_t v10 = (MIL::IRValue *)ParameterValue;
  if ((v43 & 0x80000000) == 0)
  {
    if (ParameterValue) {
      goto LABEL_7;
    }
LABEL_15:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  operator delete(v41);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v11 = (MIL::Validation *)MIL::IRValue::AsTensor(v10);
  MIL::Validation::GetIntTensorValueCasted(v11, v12, &v41);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) >= 6)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v14 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v39 = *LocationPtr;
    uint64_t v40 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v37, "Rank of the shape parameter must be between 0 and 5 (inclusive) in reshape");
    MIL::ValidationResult::ValidationResult(a2, &v39, 315, v37);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
    uint64_t v15 = v40;
    if (!v40) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  uint64_t v16 = v41;
  if (v41 == v42) {
    goto LABEL_46;
  }
  unint64_t v17 = 0;
  do
  {
    int v18 = *(_DWORD *)v16;
    v16 += 4;
    if (v18 == -1) {
      ++v17;
    }
  }
  while (v16 != v42);
  if (v17 < 2)
  {
LABEL_46:
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 104))(v6)
      && (uint64_t v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6),
          !MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v21)))
    {
      memset(v32, 0, sizeof(v32));
      uint64_t v22 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      unint64_t v23 = (std::__shared_weak_count *)v22[1];
      v31[0] = *v22;
      v31[1] = (uint64_t)v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v29, "x");
      unint64_t v24 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      uint64_t v25 = MIL::IRValueType::AsTensorType(v24);
      std::string::basic_string[abi:ne180100]<0>(v27, "shape");
      uint64_t v26 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v27, 0);
      MIL::Operators::Common::ios17::ComputeTargetShapeForReshape(v26, v31, v25, (uint64_t)v32, a2);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(v29);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (v32[0]) {
        operator delete(v32[0]);
      }
    }
    else
    {
      MIL::ValidationResult::ValidationResult(a2);
    }
    goto LABEL_31;
  }
  char v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v35 = *v19;
  uint64_t v36 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Only 1 dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
  MIL::ValidationResult::ValidationResult(a2, &v35, 315, __p);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = v36;
  if (v36) {
LABEL_27:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_31:
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
}

void sub_20F724938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a23) {
    operator delete(a23);
  }
  uint64_t v36 = *(void **)(v34 - 72);
  if (v36)
  {
    *(void *)(v34 - 64) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

MIL::MILResult *MIL::Operators::Common::ios17::ComputeTargetShapeForReshape@<X0>(MIL::IRValue *this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10 = (MIL::Validation *)MIL::IRValue::AsTensor(this);
  MIL::Validation::GetIntTensorValueCasted(v10, v11, (char **)&__p);
  uint64_t v12 = *(int **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v12;
    operator delete(v12);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  uint64_t v13 = __p;
  *(void *)a4 = __p;
  uint64_t v14 = (unsigned char *)v62;
  *(_OWORD *)(a4 + 8) = v62;
  if (v14 == (unsigned char *)v13)
  {
    uint64_t v17 = 0;
    int v16 = 0;
LABEL_12:
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 104))(a3))
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
      long long v62 = 0uLL;
      __n128 __p = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
      uint64_t v20 = *(int **)a4;
      uint64_t v21 = *(void *)(a4 + 8);
      if (v21 != *(void *)a4)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        unint64_t v24 = (v21 - *(void *)a4) >> 2;
        do
        {
          if (!v20[v23])
          {
            if (v24 + v22 <= (uint64_t)(v62 - (void)__p) >> 3)
            {
              uint64_t v25 = *((void *)__p + v23 + ((uint64_t)(v62 - (void)__p) >> 3) - v24);
              uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
              if (v26) {
                LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
              }
              uint64_t v20 = *(int **)a4;
              *(_DWORD *)(*(void *)a4 + 4 * v23) = v26;
              uint64_t v21 = *(void *)(a4 + 8);
            }
            else
            {
              v20[v23] = 1;
            }
          }
          ++v23;
          unint64_t v24 = (v21 - (uint64_t)v20) >> 2;
          --v22;
        }
        while (v23 < v24);
      }
      if (__p)
      {
        *(void *)&long long v62 = __p;
        operator delete(__p);
      }
    }
    uint64_t v27 = *(int **)a4;
    int v28 = 1;
    while (v27 != *(int **)(a4 + 8))
    {
      int v29 = *v27++;
      v28 *= v29;
    }
    char v30 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 96))(a3);
    if (MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(v30))
    {
      if (!v16) {
        return MIL::ValidationResult::ValidationResult(a5);
      }
      int v31 = 0;
    }
    else
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
      if (!v16)
      {
        if (v32 != v28)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot reshape tensor of size ", 30);
          (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
          uint64_t v41 = (void *)std::ostream::operator<<();
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" into shape ", 12);
          (*(void (**)(void **__return_ptr, MIL::IRValue *))(*(void *)this + 72))(&v54, this);
          if ((v56 & 0x80u) == 0) {
            char v43 = &v54;
          }
          else {
            char v43 = v54;
          }
          if ((v56 & 0x80u) == 0) {
            uint64_t v44 = v56;
          }
          else {
            uint64_t v44 = v55;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
          if ((char)v56 < 0) {
            operator delete(v54);
          }
          char v45 = (std::__shared_weak_count *)a2[1];
          uint64_t v48 = *a2;
          unint64_t v49 = v45;
          if (v45) {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(a5, &v48, 315, &v46);
          if (v47 < 0) {
            operator delete(v46);
          }
          char v38 = v49;
          if (v49) {
            goto LABEL_51;
          }
          goto LABEL_52;
        }
        return MIL::ValidationResult::ValidationResult(a5);
      }
      if ((int)v32 % v28)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot reshape tensor of size ", 30);
        (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
        uint64_t v33 = (void *)std::ostream::operator<<();
        uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" into shape ", 12);
        (*(void (**)(void **__return_ptr, MIL::IRValue *))(*(void *)this + 72))(&v54, this);
        if ((v56 & 0x80u) == 0) {
          uint64_t v35 = &v54;
        }
        else {
          uint64_t v35 = v54;
        }
        if ((v56 & 0x80u) == 0) {
          uint64_t v36 = v56;
        }
        else {
          uint64_t v36 = v55;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        if ((char)v56 < 0) {
          operator delete(v54);
        }
        char v37 = (std::__shared_weak_count *)a2[1];
        uint64_t v52 = *a2;
        float v53 = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::stringbuf::str();
        MIL::ValidationResult::ValidationResult(a5, &v52, 315, &v50);
        if (v51 < 0) {
          operator delete(v50);
        }
        char v38 = v53;
        if (v53) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
      int v31 = (*(int (**)(uint64_t))(*(void *)a3 + 16))(a3) / v28;
      if (v31 < 0) {
        int v31 = -v31;
      }
    }
    *(_DWORD *)(*(void *)a4 + 4 * v17) = v31;
    return MIL::ValidationResult::ValidationResult(a5);
  }
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = (v14 - (unsigned char *)v13) >> 2;
  if (v18 <= 1) {
    unint64_t v18 = 1;
  }
  while (v13[v15] != -1)
  {
LABEL_9:
    if (v18 == ++v15) {
      goto LABEL_12;
    }
  }
  if (!v16)
  {
    int v16 = 1;
    uint64_t v17 = v15;
    goto LABEL_9;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Only 1 dimension can be set to -1", 33);
  uint64_t v39 = (std::__shared_weak_count *)a2[1];
  uint64_t v59 = *a2;
  float v60 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a5, &v59, 315, &v57);
  if (v58 < 0) {
    operator delete(v57);
  }
  char v38 = v60;
  if (v60) {
LABEL_51:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
LABEL_52:
  __n128 __p = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&long long v62 = MEMORY[0x263F8C318] + 16;
  if (v64 < 0) {
    operator delete(v63);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (MIL::MILResult *)MEMORY[0x21056C620](&v65);
}

void sub_20F7250B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValidators::ValidateConcat(MIL::Operators::Common::ios17::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  BOOL v5 = MIL::Validation::VariadicTensorsDTypesMatch(this, (uint64_t)__p);
  BOOL v6 = v5;
  if ((v91 & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v15 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v100 = *LocationPtr;
    uint64_t v101 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v98, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a2, &v100, 319, v98);
    if (v99 < 0) {
      operator delete(v98[0]);
    }
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
    }
    return;
  }
  operator delete(__p[0]);
  if (!v6) {
    goto LABEL_14;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  unsigned int v7 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *, void **))(*(void *)this + 152))(this, __p);
  if (v91 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  Parameteruint64_t Value = (const void *)MIL::IROperation::GetParameterValue(this);
  uint64_t v9 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v91 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v95 = 0;
  char v96 = 0;
  char v97 = 0;
  unsigned int v10 = 0;
  if (!v7)
  {
    uint64_t v13 = -1;
    goto LABEL_71;
  }
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "values");
    Parameteruint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    uint64_t v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (v91 < 0) {
      operator delete(__p[0]);
    }
    if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v12 + 104))(v12))
    {
      uint64_t v73 = a2;
      uint64_t v13 = MIL::IRTensorValueType::Rank(v12);
      if (v13 < 1)
      {
LABEL_56:
        if (!v13 && v9)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis (", 6);
          char v37 = (void *)std::ostream::operator<<();
          char v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") must be 0 when inputs are scalars for ", 40);
          uint64_t v39 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(void *)this + 56))(this);
          int v40 = *(char *)(v39 + 23);
          if (v40 >= 0) {
            uint64_t v41 = v39;
          }
          else {
            uint64_t v41 = *(void *)v39;
          }
          if (v40 >= 0) {
            uint64_t v42 = *(unsigned __int8 *)(v39 + 23);
          }
          else {
            uint64_t v42 = *(void *)(v39 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v41, v42);
          char v43 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          uint64_t v44 = (std::__shared_weak_count *)v43[1];
          uint64_t v88 = *v43;
          char v89 = v44;
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(v73, &v88, 315, &v86);
          if (v87 < 0) {
            operator delete(v86);
          }
          char v45 = v89;
          if (v89) {
            goto LABEL_99;
          }
          goto LABEL_100;
        }
        a2 = v73;
        if (v13) {
          goto LABEL_71;
        }
        goto LABEL_72;
      }
      uint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v12 + 96))(v12);
        uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(*v17 + 8 * v16) + 16))(*(void *)(*v17 + 8 * v16));
        if (v18)
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
          uint64_t v20 = v19;
          uint64_t v21 = v96;
          if (v96 >= v97)
          {
            uint64_t v25 = v95;
            uint64_t v26 = v96 - v95;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = (char *)v97 - (char *)v95;
            if (((char *)v97 - (char *)v95) >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              char v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v97, v29);
              uint64_t v25 = v95;
              uint64_t v21 = v96;
            }
            else
            {
              char v30 = 0;
            }
            uint64_t v34 = &v30[8 * v26];
            *(void *)uint64_t v34 = v20;
            unint64_t v24 = (uint64_t *)(v34 + 8);
            while (v21 != v25)
            {
              uint64_t v35 = *--v21;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
LABEL_53:
            uint64_t v95 = (uint64_t *)v34;
            char v96 = v24;
            char v97 = (uint64_t *)&v30[8 * v29];
            if (v25) {
              operator delete(v25);
            }
            goto LABEL_55;
          }
          *char v96 = v19;
          uint64_t v22 = v21 + 1;
        }
        else
        {
          unint64_t v23 = v96;
          if (v96 >= v97)
          {
            uint64_t v25 = v95;
            uint64_t v31 = v96 - v95;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = (char *)v97 - (char *)v95;
            if (((char *)v97 - (char *)v95) >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v32;
            }
            if (v29)
            {
              char v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v97, v29);
              uint64_t v25 = v95;
              unint64_t v23 = v96;
            }
            else
            {
              char v30 = 0;
            }
            uint64_t v34 = &v30[8 * v31];
            *(void *)uint64_t v34 = -1;
            unint64_t v24 = (uint64_t *)(v34 + 8);
            while (v23 != v25)
            {
              uint64_t v36 = *--v23;
              *((void *)v34 - 1) = v36;
              v34 -= 8;
            }
            goto LABEL_53;
          }
          *char v96 = -1;
          uint64_t v22 = v23 + 1;
        }
        unint64_t v24 = v22;
LABEL_55:
        char v96 = v24;
        if (++v16 == v13) {
          goto LABEL_56;
        }
      }
    }
    ++v10;
  }
  while (v7 != v10);
  uint64_t v13 = -1;
  unsigned int v10 = v7;
LABEL_71:
  if (!MIL::Validation::IsAxisValidForRank(v9, v13))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis (", 6);
    uint64_t v55 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") must be within range [-", 25);
    unsigned __int8 v56 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
    float v57 = (void *)std::ostream::operator<<();
    char v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") for ", 6);
    uint64_t v59 = (*(uint64_t (**)(MIL::Operators::Common::ios17::CustomValidators *))(*(void *)this + 56))(this);
    int v60 = *(char *)(v59 + 23);
    if (v60 >= 0) {
      uint64_t v61 = v59;
    }
    else {
      uint64_t v61 = *(void *)v59;
    }
    if (v60 >= 0) {
      uint64_t v62 = *(unsigned __int8 *)(v59 + 23);
    }
    else {
      uint64_t v62 = *(void *)(v59 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v61, v62);
    float v63 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    char v64 = (std::__shared_weak_count *)v63[1];
    uint64_t v84 = *v63;
    uint64_t v85 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    MIL::ValidationResult::ValidationResult(a2, &v84, 315, &v82);
    if (v83 < 0) {
      operator delete(v82);
    }
    char v45 = v85;
    if (v85) {
      goto LABEL_99;
    }
    goto LABEL_100;
  }
LABEL_72:
  if (v10 >= v7)
  {
LABEL_87:
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_103;
  }
  while (2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "values");
    uint64_t v46 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    char v47 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v46);
    if (v91 < 0) {
      operator delete(__p[0]);
    }
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v47 + 104))(v47))
    {
LABEL_86:
      if (++v10 == v7) {
        goto LABEL_87;
      }
      continue;
    }
    break;
  }
  if (MIL::IRTensorValueType::Rank(v47) == v13)
  {
    if (v13 >= 1)
    {
      uint64_t v48 = 0;
      while (1)
      {
        if ((v13 & ((int)v9 >> 31)) + v9 != v48)
        {
          unint64_t v49 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v47 + 96))(v47);
          uint64_t v50 = (*(uint64_t (**)(void))(**(void **)(*v49 + 8 * v48) + 16))(*(void *)(*v49 + 8 * v48));
          uint64_t v51 = v50;
          if (v50)
          {
            uint64_t v52 = *(uint64_t (**)(uint64_t))(*(void *)v50 + 48);
            if (v95[v48] == -1)
            {
              uint64_t v54 = v52(v50);
              v95[v48] = v54;
            }
            else
            {
              uint64_t v53 = v52(v50);
              if (v53 != v95[v48])
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shape of tensor has a mismatch with the expected shape. Dimension is ", 69);
                (*(void (**)(uint64_t))(*(void *)v51 + 48))(v51);
                uint64_t v65 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"while expecting ", 16);
                std::ostream::operator<<();
                uint64_t v66 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
                uint64_t v67 = (std::__shared_weak_count *)v66[1];
                uint64_t v76 = *v66;
                uint64_t v77 = v67;
                if (v67) {
                  atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::stringbuf::str();
                MIL::ValidationResult::ValidationResult(a2, &v76, 315, &v74);
                if (v75 < 0) {
                  operator delete(v74);
                }
                char v45 = v77;
                if (!v77) {
                  goto LABEL_100;
                }
LABEL_99:
                std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                goto LABEL_100;
              }
            }
          }
        }
        if (v13 == ++v48) {
          goto LABEL_86;
        }
      }
    }
    goto LABEL_86;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Rank of tensor ", 15);
  MIL::IRTensorValueType::Rank(v47);
  int v68 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" has a mismatch with the expected rank ", 39);
  uint64_t v69 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in the ", 8);
  uint64_t v70 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"th tensor.", 10);
  unint64_t v71 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v72 = (std::__shared_weak_count *)v71[1];
  uint64_t v80 = *v71;
  uint64_t v81 = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a2, &v80, 315, &v78);
  if (v79 < 0) {
    operator delete(v78);
  }
  char v45 = v81;
  if (v81) {
    goto LABEL_99;
  }
LABEL_100:
  __p[0] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (v93 < 0) {
    operator delete(v92);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](&v94);
LABEL_103:
  if (v95)
  {
    char v96 = v95;
    operator delete(v95);
  }
}

void sub_20F725BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::ostringstream::~ostringstream((uint64_t)&a43);
  uint64_t v50 = *(void **)(v48 - 152);
  if (v50)
  {
    *(void *)(v48 - 144) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceReshape(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Singleuint64_t ValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  uint64_t v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (v40 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  Singleuint64_t Value = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  if (v40 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v9 + 5));
  BOOL v11 = IsValue;
  if (v40 < 0)
  {
    operator delete(__p);
    if (v11)
    {
LABEL_8:
      char v45 = 0;
      uint64_t v46 = 0;
      v47[0] = 0;
      uint64_t v42 = 0;
      char v43 = 0;
      uint64_t v44 = 0;
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      v38[0] = *a2;
      v38[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Operators::Common::ios17::ComputeTargetShapeForReshape(SingleValue, v38, v7, (uint64_t)&v42, (MIL::ValidationResult *)&__p);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x48uLL);
        MIL::MILResult::MILResult(v36, (uint64_t)&__p);
        v36[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25DB50;
        int v37 = v41;
        MIL::ValidationError::ValidationError(exception, v36);
      }
      uint64_t v13 = (int *)v42;
      uint64_t v14 = v43;
      if (v42 == v43) {
LABEL_45:
      }
        MIL::IRTensorValueType::MakeWithShape();
      while (1)
      {
        uint64_t v15 = (MIL::MILContext *)*v13;
        uint64_t v16 = *a1;
        if (v15)
        {
          uint64_t v17 = MIL::IRConstantDimension::Make(v16, v15);
          uint64_t v18 = v46;
          if ((unint64_t)v46 >= v47[0])
          {
            uint64_t v19 = v46 - v45;
            if ((unint64_t)(v19 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = (uint64_t)(v47[0] - (void)v45) >> 2;
            if (v20 <= v19 + 1) {
              unint64_t v20 = v19 + 1;
            }
            if (v47[0] - (void)v45 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v47, v21);
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v26 = (uint64_t *)&v22[8 * v19];
            *uint64_t v26 = v17;
            unint64_t v23 = v26 + 1;
            uint64_t v28 = (char *)v45;
            unint64_t v27 = (char *)v46;
            if (v46 != v45)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *--uint64_t v26 = v29;
              }
              while (v27 != v28);
              goto LABEL_41;
            }
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v17 = MIL::IRUnknownDimension::Make(v16, v15);
          uint64_t v18 = v46;
          if ((unint64_t)v46 >= v47[0])
          {
            uint64_t v24 = v46 - v45;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v25 = (uint64_t)(v47[0] - (void)v45) >> 2;
            if (v25 <= v24 + 1) {
              unint64_t v25 = v24 + 1;
            }
            if (v47[0] - (void)v45 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v25;
            }
            if (v21) {
              uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v47, v21);
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v26 = (uint64_t *)&v22[8 * v24];
            *uint64_t v26 = v17;
            unint64_t v23 = v26 + 1;
            char v30 = (char *)v45;
            unint64_t v27 = (char *)v46;
            if (v46 != v45)
            {
              do
              {
                uint64_t v31 = *((void *)v27 - 1);
                v27 -= 8;
                *--uint64_t v26 = v31;
              }
              while (v27 != v30);
LABEL_41:
              unint64_t v27 = (char *)v45;
            }
LABEL_42:
            char v45 = v26;
            uint64_t v46 = v23;
            v47[0] = &v22[8 * v21];
            if (v27) {
              operator delete(v27);
            }
            goto LABEL_44;
          }
        }
        *uint64_t v18 = v17;
        unint64_t v23 = v18 + 1;
LABEL_44:
        uint64_t v46 = v23;
        if (++v13 == v14) {
          goto LABEL_45;
        }
      }
    }
  }
  else if (IsValue)
  {
    goto LABEL_8;
  }
  unint64_t v32 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v45, "shape");
  uint64_t v33 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v45);
  uint64_t v34 = (MIL::MILContext *)MIL::IRValueType::AsTensorType(v33);
  MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(v32, v34, (char **)&__p);
  if (SHIBYTE(v47[0]) < 0) {
    operator delete(v45);
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F726190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a10);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 112);
  if (v31)
  {
    *(void *)(v29 - 104) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::CustomValueTypeInference::ValueTypeInferenceConcat(MIL::IRConstantDimension **a1, uint64_t *a2, void *a3)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  BOOL v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConcat(a1, (uint64_t)&v4, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F7262B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios17::Concat::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F726DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,void **a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v50 - 112));
  if (a37) {
    (*(void (**)(uint64_t))(*(void *)a37 + 8))(a37);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a38, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v50 - 248), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ExpandDims::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F728068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&a72);
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  long long v74 = *(void **)(v72 - 160);
  if (v74)
  {
    *(void *)(v72 - 152) = v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F729610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x250]);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  uint64_t v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  long long v74 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v74;
    operator delete(v74);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x248], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReshapeLike::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F72AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 112));
  if (a45) {
    (*(void (**)(uint64_t))(*(void *)a45 + 8))(a45);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  uint64_t v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Reverse::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F72C6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,void **a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x258]);
  if (a59) {
    (*(void (**)(uint64_t))(*(void *)a59 + 8))(a59);
  }
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a58);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  long long v74 = a72;
  if (a72)
  {
    STACK[0x200] = (unint64_t)a72;
    operator delete(v74);
  }
  char v75 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v76;
    operator delete(v76);
  }
  uint64_t v77 = *(void **)(v72 - 160);
  if (v77)
  {
    *(void *)(v72 - 152) = v77;
    operator delete(v77);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x250], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::ReverseSequence::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F72E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v73;
    operator delete(v73);
  }
  long long v74 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v74;
    operator delete(v74);
  }
  char v75 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v76;
    operator delete(v76);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2C8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SliceByIndex::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F730898(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x488]);
  unint64_t v3 = STACK[0x370];
  STACK[0x370] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x368]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x368]);
  }
  uint64_t v4 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)STACK[0x440];
  if (STACK[0x440])
  {
    STACK[0x448] = (unint64_t)v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)STACK[0x458];
  if (STACK[0x458])
  {
    STACK[0x460] = (unint64_t)v10;
    operator delete(v10);
  }
  BOOL v11 = *(void **)(v1 - 160);
  if (v11)
  {
    *(void *)(v1 - 152) = v11;
    operator delete(v11);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x378], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x480], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SliceBySize::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F732930(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x320]);
  unint64_t v2 = STACK[0x230];
  STACK[0x230] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x228]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x228]);
  }
  unint64_t v3 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v10;
    operator delete(v10);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x238], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x318], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::SlidingWindows::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F734140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v71 - 112));
  if (a47) {
    (*(void (**)(uint64_t))(*(void *)a47 + 8))(a47);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  uint64_t v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Squeeze::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x238]);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  long long v74 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v74;
    operator delete(v74);
  }
  char v75 = *(void **)(v72 - 160);
  if (v75)
  {
    *(void *)(v72 - 152) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x230], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios17::Transpose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F736DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x238]);
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  long long v74 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v74;
    operator delete(v74);
  }
  char v75 = *(void **)(v72 - 160);
  if (v75)
  {
    *(void *)(v72 - 152) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x230], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F7380C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (a48) {
    (*(void (**)(uint64_t))(*(void *)a48 + 8))(a48);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73945C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a69);
  if (a56) {
    (*(void (**)(uint64_t))(*(void *)a56 + 8))(a56);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a55);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x230]);
  if (a64) {
    (*(void (**)(uint64_t))(*(void *)a64 + 8))(a64);
  }
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  uint64_t v72 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ClampedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make();
}

void sub_20F73B14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::LinearActivation::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make();
}

void sub_20F73B200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ScaledTanh::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make();
}

void sub_20F73B2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::SigmoidHard::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlphaBeta::Make();
}

void sub_20F73B368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ELU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make();
}

void sub_20F73B41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::LeakyReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make();
}

void sub_20F73B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ThresholdedReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivationWithAlpha::Make();
}

void sub_20F73B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ERF::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::GeLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a67);
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  if (a53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a53);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::ReLU6::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Sigmoid::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::SiLU::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Softplus::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Softsign::Make(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MIL::Operators::Common::ios18::BaseActivation::Make();
}

void sub_20F73CF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::PReLU::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,void **a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x210]);
  if (a62) {
    (*(void (**)(uint64_t))(*(void *)a62 + 8))(a62);
  }
  if (a61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a61);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x208], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::Softmax::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F73F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,void **a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a71);
  if (a58) {
    (*(void (**)(uint64_t))(*(void *)a58 + 8))(a58);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::SoftplusParametric::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_20F741128(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x2A0]);
  unint64_t v2 = STACK[0x228];
  STACK[0x228] = 0;
  if (v2) {
    (*(void (**)(unint64_t))(*(void *)v2 + 8))(v2);
  }
  if (STACK[0x220]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x220]);
  }
  unint64_t v3 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v5;
    operator delete(v5);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x230], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios18::CustomValidators::ValidateConstexprLutToDense(MIL::Operators::Common::ios18::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  Parameteruint64_t Value = MIL::IROperation::GetParameterValue(this);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  uint64_t v7 = MIL::IROperation::GetParameterValue(this);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  BOOL v11 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  uint64_t v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_axis");
  uint64_t v13 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)__p, 0);
  uint64_t v14 = (const void *)v13;
  if (v29 < 0)
  {
    operator delete(__p[0]);
    if (v14) {
      goto LABEL_7;
    }
  }
  else if (v13)
  {
LABEL_7:
    int v15 = MIL::IRValue::GetScalar<int>(v14);
    unsigned int v16 = v15 & 0xFFFFFF00;
    int v17 = v15;
    uint64_t v18 = 0x100000000;
    goto LABEL_10;
  }
  uint64_t v18 = 0;
  int v17 = 0;
  unsigned int v16 = 0;
LABEL_10:
  uint64_t v19 = (*(uint64_t (**)(MIL::Operators::Common::ios18::CustomValidators *))(*(void *)this + 176))(this);
  if (*(void *)(v19 + 8) == *(void *)v19) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v19);
  uint64_t v21 = MIL::IRValueType::AsTensorType(Type);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  uint64_t v24 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  unint64_t v25 = (MIL::Validation *)(v18 | v16 | v17);
  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 88))(v21);
  unint64_t v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 96))(v21);
}

void sub_20F741B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateCommonConstexprFromLut(MIL::IRTensorValueType *this@<X3>, uint64_t *a2@<X0>, int a3@<W1>, uint64_t *a4@<X2>, MIL::Validation *a5@<X4>, int a6@<W5>, void *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  uint64_t v60 = v16 - *a4;
  unint64_t v17 = v60 >> 3;
  if (MIL::IRTensorValueType::Rank(this) != (v60 >> 3) + 2)
  {
    int v37 = (std::__shared_weak_count *)a2[1];
    uint64_t v97 = *a2;
    uint64_t v98 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v95, "Input lut should have rank=K+2 where K is the rank of indices");
    MIL::ValidationResult::ValidationResult(a8, &v97, 315, v95);
    if (v96 < 0) {
      operator delete(v95[0]);
    }
    uint64_t v36 = v98;
    if (!v98) {
      return;
    }
    goto LABEL_46;
  }
  if (v16 != v15)
  {
    int v56 = a3;
    float v57 = a7;
    uint64_t v59 = a8;
    uint64_t v18 = 0;
    if (v17 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v60 >> 3;
    }
    while (1)
    {
      uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(*a4 + 8 * v18) + 16))(*(void *)(*a4 + 8 * v18));
      unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
      uint64_t v22 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
      uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(*v22 + 8 * v18) + 16))(*(void *)(*v22 + 8 * v18));
      if (v21 % (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23)) {
        break;
      }
      if (v19 == ++v18)
      {
        a8 = v59;
        a7 = v57;
        a3 = v56;
        goto LABEL_9;
      }
    }
    char v38 = (std::__shared_weak_count *)a2[1];
    uint64_t v93 = *a2;
    uint64_t v94 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v91, "The first K dimensions of lut must be factors of indices dimensions");
    MIL::ValidationResult::ValidationResult(v59, &v93, 315, v91);
    if (v92 < 0) {
      operator delete(v91[0]);
    }
    uint64_t v36 = v94;
    if (!v94) {
      return;
    }
LABEL_46:
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    return;
  }
LABEL_9:
  uint64_t v24 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(*v24 + 8 * v17) + 16))(*(void *)(*v24 + 8 * v17));
  unint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25);
  if (a3 == 14 && v26 != 256
    || a3 == 23 && v26 != 64
    || a3 == 20 && v26 != 16
    || a3 == 22 && v26 != 8
    || a3 == 19 && v26 != 4
    || a3 == 21 && v26 != 2)
  {
    unint64_t v27 = (std::__shared_weak_count *)a2[1];
    uint64_t v89 = *a2;
    uint64_t v90 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v84, v26);
    uint64_t v28 = std::string::insert(&v84, 0, "Provided NUM_PALETTES ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    char v30 = std::string::append(&v85, " does not match the indices dtype ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    MIL::IRDataTypeToString(a3, __p);
    if ((v83 & 0x80u) == 0) {
      unint64_t v32 = __p;
    }
    else {
      unint64_t v32 = (void **)__p[0];
    }
    if ((v83 & 0x80u) == 0) {
      std::string::size_type v33 = v83;
    }
    else {
      std::string::size_type v33 = (std::string::size_type)__p[1];
    }
    uint64_t v34 = std::string::append(&v86, (const std::string::value_type *)v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    std::string::size_type v88 = v34->__r_.__value_.__r.__words[2];
    long long v87 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a8, &v89, 315, &v87);
    if (SHIBYTE(v88) < 0) {
      operator delete((void *)v87);
    }
    if ((char)v83 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    uint64_t v36 = v90;
    if (!v90) {
      return;
    }
    goto LABEL_46;
  }
  char v58 = a7;
  uint64_t v39 = *(void *)(*(void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this)
                  + 8 * v17
                  + 8);
  uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
  unint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
  if (v41 >= 2 && BYTE4(a5) == 0)
  {
    char v45 = (std::__shared_weak_count *)a2[1];
    uint64_t v80 = *a2;
    uint64_t v81 = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v78, "vector_axis must be provided if vector_size specified in lut > 1");
    MIL::ValidationResult::ValidationResult(a8, &v80, 315, v78);
    if (v79 < 0) {
      operator delete(v78[0]);
    }
    uint64_t v36 = v81;
    if (!v81) {
      return;
    }
    goto LABEL_46;
  }
  uint64_t v43 = v41;
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)this + 88))(this) != a6)
  {
    uint64_t v46 = (std::__shared_weak_count *)a2[1];
    uint64_t v76 = *a2;
    uint64_t v77 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "Input lut and output should have same dtype");
    MIL::ValidationResult::ValidationResult(a8, &v76, 304, v74);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v36 = v77;
    if (!v77) {
      return;
    }
    goto LABEL_46;
  }
  if (BYTE4(a5))
  {
    if (!MIL::Validation::IsAxisValidForRank(a5, (unint64_t)v60 >> 3))
    {
      uint64_t v54 = (std::__shared_weak_count *)a2[1];
      uint64_t v72 = *a2;
      uint64_t v73 = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v70, "'vector_axis' must be within range (-indices_rank - 1, indices_rank) (exclusive)");
      MIL::ValidationResult::ValidationResult(a8, &v72, 315, v70);
      if (v71 < 0) {
        operator delete(v70[0]);
      }
      uint64_t v36 = v73;
      if (!v73) {
        return;
      }
      goto LABEL_46;
    }
    uint64_t v44 = (int)((v17 & ((int)a5 >> 31)) + a5);
  }
  else
  {
    uint64_t v44 = 0;
  }
  if (v17 != (uint64_t)(v58[1] - *v58) >> 3)
  {
    uint64_t v53 = (std::__shared_weak_count *)a2[1];
    uint64_t v68 = *a2;
    uint64_t v69 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "output must have the same rank as the input indices");
    MIL::ValidationResult::ValidationResult(a8, &v68, 315, v66);
    if (v67 < 0) {
      operator delete(v66[0]);
    }
    uint64_t v36 = v69;
    if (!v69) {
      return;
    }
    goto LABEL_46;
  }
  if (v16 == v15)
  {
LABEL_85:
    MIL::ValidationResult::ValidationResult(a8);
    return;
  }
  uint64_t v47 = 0;
  if (v17 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v60 >> 3;
  }
  while (1)
  {
    uint64_t v49 = v44 == v47 ? v43 : 1;
    uint64_t v50 = (*(uint64_t (**)(void))(**(void **)(*a4 + 8 * v47) + 16))(*(void *)(*a4 + 8 * v47));
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 48))(v50) * v49;
    uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(*v58 + 8 * v47) + 16))(*(void *)(*v58 + 8 * v47));
    if (v51 != (*(uint64_t (**)(uint64_t))(*(void *)v52 + 48))(v52)) {
      break;
    }
    if (v48 == ++v47) {
      goto LABEL_85;
    }
  }
  uint64_t v55 = (std::__shared_weak_count *)a2[1];
  uint64_t v64 = *a2;
  uint64_t v65 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "The output dimension does not match the indices' dimension with vector size over vector_axis");
  MIL::ValidationResult::ValidationResult(a8, &v64, 315, v62);
  if (v63 < 0) {
    operator delete(v62[0]);
  }
  uint64_t v36 = v65;
  if (v65) {
    goto LABEL_46;
  }
}