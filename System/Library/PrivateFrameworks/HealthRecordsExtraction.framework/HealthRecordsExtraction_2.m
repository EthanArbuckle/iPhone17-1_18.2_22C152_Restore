unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  if (a3 + 8 >= 0xFFFF00) {
    v3 = 4;
  }
  else {
    v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    v4 = 1;
  }
  else {
    v4 = v3;
  }
  if (a3 >= 0xF8) {
    v5 = v4;
  }
  else {
    v5 = 0;
  }
  if (a2 > 0xF7)
  {
    v6 = ((a2 - 248) >> 8) + 1;
    *result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD542CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.DiagnosticReport.CodingKeys()
{
  return &type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Condition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.Condition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD55C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Condition.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Condition.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.Bundle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD56C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Bundle.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.ResourceProxy.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *result = a2;
        return result;
      case 2:
        *(_WORD *)result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *result = 0;
      break;
    case 2:
      *(_WORD *)result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x232FD5798);
    case 4:
      *(_DWORD *)result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ResourceProxy.CodingKeys()
{
  return &type metadata for ModelsDSTU2.ResourceProxy.CodingKeys;
}

unint64_t sub_232FD57D4()
{
  unint64_t result = qword_268757B40;
  if (!qword_268757B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B40);
  }
  return result;
}

unint64_t sub_232FD582C()
{
  unint64_t result = qword_268757B48;
  if (!qword_268757B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B48);
  }
  return result;
}

unint64_t sub_232FD5884()
{
  unint64_t result = qword_268757B50;
  if (!qword_268757B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B50);
  }
  return result;
}

unint64_t sub_232FD58DC()
{
  unint64_t result = qword_268757B58;
  if (!qword_268757B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B58);
  }
  return result;
}

unint64_t sub_232FD5934()
{
  unint64_t result = qword_268757B60;
  if (!qword_268757B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B60);
  }
  return result;
}

unint64_t sub_232FD598C()
{
  unint64_t result = qword_268757B68;
  if (!qword_268757B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B68);
  }
  return result;
}

unint64_t sub_232FD59E4()
{
  unint64_t result = qword_268757B70;
  if (!qword_268757B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B70);
  }
  return result;
}

unint64_t sub_232FD5A3C()
{
  unint64_t result = qword_268757B78;
  if (!qword_268757B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B78);
  }
  return result;
}

unint64_t sub_232FD5A94()
{
  unint64_t result = qword_268757B80;
  if (!qword_268757B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B80);
  }
  return result;
}

unint64_t sub_232FD5AEC()
{
  unint64_t result = qword_268757B88;
  if (!qword_268757B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B88);
  }
  return result;
}

unint64_t sub_232FD5B44()
{
  unint64_t result = qword_268757B90;
  if (!qword_268757B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B90);
  }
  return result;
}

unint64_t sub_232FD5B9C()
{
  unint64_t result = qword_268757B98;
  if (!qword_268757B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757B98);
  }
  return result;
}

unint64_t sub_232FD5BF4()
{
  unint64_t result = qword_268757BA0;
  if (!qword_268757BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BA0);
  }
  return result;
}

unint64_t sub_232FD5C4C()
{
  unint64_t result = qword_268757BA8;
  if (!qword_268757BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BA8);
  }
  return result;
}

unint64_t sub_232FD5CA4()
{
  unint64_t result = qword_268757BB0;
  if (!qword_268757BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BB0);
  }
  return result;
}

unint64_t sub_232FD5CFC()
{
  unint64_t result = qword_268757BB8;
  if (!qword_268757BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BB8);
  }
  return result;
}

unint64_t sub_232FD5D54()
{
  unint64_t result = qword_268757BC0;
  if (!qword_268757BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BC0);
  }
  return result;
}

unint64_t sub_232FD5DAC()
{
  unint64_t result = qword_268757BC8;
  if (!qword_268757BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BC8);
  }
  return result;
}

unint64_t sub_232FD5E04()
{
  unint64_t result = qword_268757BD0;
  if (!qword_268757BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BD0);
  }
  return result;
}

unint64_t sub_232FD5E5C()
{
  unint64_t result = qword_268757BD8;
  if (!qword_268757BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BD8);
  }
  return result;
}

unint64_t sub_232FD5EB4()
{
  unint64_t result = qword_268757BE0;
  if (!qword_268757BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BE0);
  }
  return result;
}

unint64_t sub_232FD5F0C()
{
  unint64_t result = qword_268757BE8;
  if (!qword_268757BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BE8);
  }
  return result;
}

unint64_t sub_232FD5F64()
{
  unint64_t result = qword_268757BF0;
  if (!qword_268757BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BF0);
  }
  return result;
}

unint64_t sub_232FD5FBC()
{
  unint64_t result = qword_268757BF8;
  if (!qword_268757BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757BF8);
  }
  return result;
}

unint64_t sub_232FD6014()
{
  unint64_t result = qword_268757C00;
  if (!qword_268757C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C00);
  }
  return result;
}

unint64_t sub_232FD606C()
{
  unint64_t result = qword_268757C08;
  if (!qword_268757C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C08);
  }
  return result;
}

unint64_t sub_232FD60C4()
{
  unint64_t result = qword_268757C10;
  if (!qword_268757C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C10);
  }
  return result;
}

unint64_t sub_232FD611C()
{
  unint64_t result = qword_268757C18;
  if (!qword_268757C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C18);
  }
  return result;
}

unint64_t sub_232FD6174()
{
  unint64_t result = qword_268757C20;
  if (!qword_268757C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C20);
  }
  return result;
}

unint64_t sub_232FD61CC()
{
  unint64_t result = qword_268757C28;
  if (!qword_268757C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C28);
  }
  return result;
}

uint64_t sub_232FD6220(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265747265737361 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F63655265746164 && a2 == 0xEC00000064656472 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6163696E696C63 && a2 == 0xEE00737574617453 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002330B4F80 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7974697265766573 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6574695379646F62 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7461447465736E6FLL && a2 == 0xED0000656D695465 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7265507465736E6FLL && a2 == 0xEB00000000646F69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x7274537465736E6FLL && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FA0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF646F6972655074 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF676E6972745374 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 17;
    }
    else {
      return 18;
    }
  }
}

uint64_t sub_232FD6A00(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6973756C636E6F63 && a2 == 0xEA00000000006E6FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FC0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_232FD6DB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x646574726F706572 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002330B5AB0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x43656E6963636176 && a2 == 0xEB0000000065646FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6947746F4E736177 && a2 == 0xEB000000006E6576 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEB00000000657275 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65626D754E746F6CLL && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t sub_232FD73DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7571655365736F64 && a2 == 0xEC00000065636E65;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F44736569726573 && a2 == 0xEB00000000736573)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232FD7500(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73746E656D6D6F63 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FC0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002330B5020 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x61755165756C6176 && a2 == 0xED0000797469746ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEE0065676E615265 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

uint64_t sub_232FD7BC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461446874726962 && a2 == 0xE900000000000065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265646E6567 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F63656C6574 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x536C61746972616DLL && a2 == 0xED00007375746174 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_232FD8060(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232FD8124(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_232FD80BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_232FD8124(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_232F7CA40(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_232FD819C()
{
  if (!qword_268757C30)
  {
    type metadata accessor for ModelsDSTU2.ResourceProxy(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268757C30);
    }
  }
}

id sub_232FD822C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v32 = a3;
  uint64_t v6 = sub_23309B300();
  MEMORY[0x270FA5388](v6 - 8);
  v33 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_23309B190();
  uint64_t v8 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  v30 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_23309B1F0();
  MEMORY[0x270FA5388](v10 - 8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_232FDBC18(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v14 - 8);
  v16 = (char *)&v28 - v15;
  uint64_t v17 = v3[11];
  uint64_t v29 = v3[10];
  uint64_t v18 = v3[18];
  v19 = (int *)type metadata accessor for ExtractionContext();
  sub_232FDBAE4(a1 + v19[8], (uint64_t)v16, (unint64_t *)&qword_268756520, v13);
  unint64_t v20 = v32;
  sub_232E9A9F4(a2, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23309B1E0();
  uint64_t v21 = *(void *)(a1 + v19[10]);
  uint64_t v22 = a1 + v19[7];
  uint64_t v23 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v30, v22, v31);
  swift_bridgeObjectRetain();
  uint64_t v24 = (uint64_t)v33;
  sub_23309B2F0();
  id v25 = objc_allocWithZone(MEMORY[0x263F45C28]);
  id v26 = sub_233098B78(a2, v20, 1, (uint64_t)v16, v29, v17, v18, (uint64_t)v12, v21, v23, v24, 0);
  sub_232E9AA4C(a2, v20);
  return v26;
}

uint64_t sub_232FD84D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 464) = a1;
  *(void *)(v3 + 472) = a2;
  *(void *)(v3 + 480) = type metadata accessor for RecordExtractionContext();
  *(void *)(v3 + 488) = swift_task_alloc();
  uint64_t v4 = sub_23309B1F0();
  *(void *)(v3 + 496) = v4;
  *(void *)(v3 + 504) = *(void *)(v4 - 8);
  *(void *)(v3 + 512) = swift_task_alloc();
  long long v5 = v2[11];
  *(_OWORD *)(v3 + 176) = v2[10];
  *(_OWORD *)(v3 + 192) = v5;
  long long v6 = v2[13];
  *(_OWORD *)(v3 + 208) = v2[12];
  *(_OWORD *)(v3 + 224) = v6;
  long long v7 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v7;
  long long v8 = v2[9];
  *(_OWORD *)(v3 + 144) = v2[8];
  *(_OWORD *)(v3 + 160) = v8;
  long long v9 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v9;
  long long v10 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v10;
  long long v11 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v11;
  return MEMORY[0x270FA2498](sub_232FD8600, 0, 0);
}

uint64_t sub_232FD8600()
{
  id v1 = objc_msgSend(*(id *)(v0 + 464), sel_credentialTypes);
  uint64_t v2 = sub_23309B9A0();

  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 512);
    long long v7 = *(void **)(v0 + 488);
    uint64_t v6 = *(void *)(v0 + 496);
    uint64_t v9 = *(void *)(v0 + 472);
    uint64_t v8 = *(void *)(v0 + 480);
    id v10 = objc_msgSend(*(id *)(v0 + 464), sel_syncIdentifier);
    sub_23309B1D0();

    id v11 = objc_allocWithZone(MEMORY[0x263F0A4D8]);
    v12 = (void *)sub_23309B1C0();
    id v13 = objc_msgSend(v11, sel_initWithSignedClinicalDataRecordIdentifier_, v12);
    *(void *)(v0 + 520) = v13;

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_232FDB7A0(v9, (uint64_t)v7 + *(int *)(v8 + 20), (uint64_t (*)(void))type metadata accessor for ExtractionContext);
    *long long v7 = v13;
    long long v14 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 256) = v14;
    long long v15 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 288) = v15;
    long long v16 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 320) = v16;
    long long v17 = *(_OWORD *)(v0 + 128);
    *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 352) = v17;
    long long v18 = *(_OWORD *)(v0 + 160);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 144);
    *(_OWORD *)(v0 + 384) = v18;
    long long v19 = *(_OWORD *)(v0 + 192);
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 176);
    *(_OWORD *)(v0 + 416) = v19;
    long long v20 = *(_OWORD *)(v0 + 224);
    *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 208);
    *(_OWORD *)(v0 + 448) = v20;
    id v21 = v13;
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_232FD8874;
    uint64_t v23 = *(void *)(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 464);
    return sub_232FD8AD0(v23, v24);
  }
  else
  {
    sub_232FDB618();
    swift_allocError();
    *id v26 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
}

uint64_t sub_232FD8874(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 536) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_232FD8A38;
  }
  else
  {
    *(void *)(v4 + 544) = a1;
    uint64_t v5 = sub_232FD899C;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_232FD899C()
{
  uint64_t v1 = *(void *)(v0 + 488);

  sub_232FDBB50(v1, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 544);
  return v2(v3);
}

uint64_t sub_232FD8A38()
{
  uint64_t v1 = *(void *)(v0 + 488);

  sub_232FDBB50(v1, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_232FD8AD0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 736) = a2;
  *(void *)(v3 + 728) = a1;
  type metadata accessor for RecordExtractionContext();
  *(void *)(v3 + 744) = swift_task_alloc();
  long long v4 = v2[11];
  *(_OWORD *)(v3 + 176) = v2[10];
  *(_OWORD *)(v3 + 192) = v4;
  long long v5 = v2[13];
  *(_OWORD *)(v3 + 208) = v2[12];
  *(_OWORD *)(v3 + 224) = v5;
  long long v6 = v2[7];
  *(_OWORD *)(v3 + 112) = v2[6];
  *(_OWORD *)(v3 + 128) = v6;
  long long v7 = v2[9];
  *(_OWORD *)(v3 + 144) = v2[8];
  *(_OWORD *)(v3 + 160) = v7;
  long long v8 = v2[3];
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 64) = v8;
  long long v9 = v2[5];
  *(_OWORD *)(v3 + 80) = v2[4];
  *(_OWORD *)(v3 + 96) = v9;
  long long v10 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v10;
  return MEMORY[0x270FA2498](sub_232FD8B9C, 0, 0);
}

uint64_t sub_232FD8B9C()
{
  uint64_t v1 = (_OWORD *)(v0 + 488);
  long long v3 = *(_OWORD *)(v0 + 176);
  long long v2 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 320) = v3;
  *(_OWORD *)(v0 + 336) = v2;
  *(_OWORD *)(v0 + 345) = *(_OWORD *)(v0 + 201);
  long long v4 = *(_OWORD *)(v0 + 160);
  long long v5 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 256) = v5;
  long long v6 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 288) = v6;
  *(_OWORD *)(v0 + 304) = v4;
  long long v7 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 409) = *(_OWORD *)(v0 + 345);
  *(_OWORD *)(v0 + 384) = v3;
  *(_OWORD *)(v0 + 400) = v7;
  *(_OWORD *)(v0 + 368) = v4;
  long long v8 = *(_OWORD *)(v0 + 376);
  long long v9 = *(_OWORD *)(v0 + 392);
  long long v10 = *(_OWORD *)(v0 + 408);
  *(unsigned char *)(v0 + 480) = *(unsigned char *)(v0 + 424);
  *(_OWORD *)(v0 + 448) = v9;
  *(_OWORD *)(v0 + 464) = v10;
  *(_OWORD *)(v0 + 432) = v8;
  sub_232FDB66C(v0 + 440, v0 + 536);
  sub_232FDB6C8((id *)(v0 + 432));
  sub_232FDB66C(v0 + 536, v0 + 488);
  if (*(unsigned char *)(v0 + 528))
  {
    long long v11 = *(_OWORD *)(v0 + 504);
    *(_OWORD *)(v0 + 584) = *v1;
    *(_OWORD *)(v0 + 600) = v11;
    *(void *)(v0 + 616) = *(void *)(v0 + 520);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 768) = v12;
    void *v12 = v0;
    v12[1] = sub_232FD8E8C;
    uint64_t v13 = *(void *)(v0 + 728);
    return sub_23303EEEC(v13);
  }
  else
  {
    long long v15 = *(_OWORD *)(v0 + 504);
    *(_OWORD *)(v0 + 624) = *v1;
    *(_OWORD *)(v0 + 640) = v15;
    *(void *)(v0 + 656) = *(void *)(v0 + 520);
    long long v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 752) = v16;
    void *v16 = v0;
    v16[1] = sub_232FD8D68;
    uint64_t v17 = *(void *)(v0 + 728);
    return sub_2330743A0(v17);
  }
}

uint64_t sub_232FD8D68(uint64_t a1, uint64_t a2)
{
  long long v4 = (void *)*v3;
  v4[83] = v3;
  v4[84] = a1;
  v4[85] = a2;
  v4[86] = v2;
  v4[95] = v2;
  swift_task_dealloc();
  if (v2) {
    long long v5 = sub_232FD98FC;
  }
  else {
    long long v5 = sub_232FD8FB0;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_232FD8E8C(uint64_t a1, uint64_t a2)
{
  long long v4 = (void *)*v3;
  v4[87] = v3;
  v4[88] = a1;
  v4[89] = a2;
  v4[90] = v2;
  v4[97] = v2;
  swift_task_dealloc();
  if (v2) {
    long long v5 = sub_232FDA2B4;
  }
  else {
    long long v5 = sub_232FD9968;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_232FD8FB0()
{
  uint64_t v71 = *(void *)(v0 + 760);
  unint64_t v1 = *(void *)(v0 + 672);
  sub_232FDB734((id *)(v0 + 432));
  unint64_t v78 = MEMORY[0x263F8EE78];
  if (v1 >> 62)
  {
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_23309BF80();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_83;
    }
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x237DB5EA0](i, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * i + 32);
      }
      long long v6 = v5;
      if (objc_msgSend(v5, sel_enteredInError, v70))
      {
      }
      else
      {
        MEMORY[0x237DB59C0]();
        if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_23309B9D0();
        }
        sub_23309B9E0();
        sub_23309B9C0();
      }
    }
    unint64_t v7 = v78;
  }
  else
  {
    unint64_t v7 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease_n();
  if (!(v7 >> 62))
  {
    int64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
      unint64_t v79 = v3;
      sub_23309BF20();
      goto LABEL_20;
    }
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  uint64_t v67 = sub_23309BF80();
  swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_78:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232FDB618();
    swift_allocError();
    unsigned char *v68 = 1;
    swift_willThrow();
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  int64_t v8 = sub_23309BF80();
  swift_bridgeObjectRelease();
  unint64_t v1 = MEMORY[0x263F8EE78];
  if (v8)
  {
    unint64_t v79 = MEMORY[0x263F8EE78];
    sub_23309BF20();
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_20:
      uint64_t v9 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x237DB5EA0](v9, v7);
        }
        else {
          id v10 = *(id *)(v7 + 8 * v9 + 32);
        }
        long long v11 = v10;
        ++v9;
        id v12 = objc_msgSend(v10, sel_asSignedClinicalDataItem, v70);

        sub_23309BF00();
        sub_23309BF30();
        sub_23309BF40();
        sub_23309BF10();
      }
      while (v8 != v9);
      unint64_t v70 = v79;
      unint64_t v78 = v3;
      sub_232F39748(0, v8, 0);
      uint64_t v13 = 0;
      unint64_t v1 = v3;
      int64_t v75 = v8;
      while (1)
      {
        if (v13 == v8)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        uint64_t v76 = v13;
        if ((v7 & 0xC000000000000001) != 0) {
          id v14 = (id)MEMORY[0x237DB5EA0]();
        }
        else {
          id v14 = *(id *)(v7 + 32 + 8 * v13);
        }
        long long v15 = v14;
        id v16 = objc_msgSend(v14, sel_primaryConcept, v70);
        id v17 = objc_msgSend(v16, sel_localizedPreferredName);

        if (v17)
        {
          uint64_t v18 = sub_23309B710();
          unint64_t v20 = v19;

          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (v21) {
            goto LABEL_62;
          }
          swift_bridgeObjectRelease();
        }
        id v22 = objc_msgSend(v15, sel_medicalRecordCodings);
        sub_232F3A800(0, (unint64_t *)&qword_268757138);
        unint64_t v23 = sub_23309B9A0();

        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = sub_23309BF80();
          if (v24)
          {
LABEL_37:
            v73 = v15;
            unint64_t v74 = v1;
            id v77 = self;
            uint64_t v25 = 0;
            while (1)
            {
              id v26 = (v23 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x237DB5EA0](v25, v23)
                  : *(id *)(v23 + 8 * v25 + 32);
              v27 = v26;
              uint64_t v28 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              id v29 = objc_msgSend(v26, sel_codingSystem);
              unint64_t v1 = (unint64_t)objc_msgSend(v77, sel_textSystem);
              if (v29)
              {
                sub_232F3A800(0, &qword_268757C68);
                id v30 = v29;
                char v31 = sub_23309BBF0();

                if (v31)
                {
                  swift_bridgeObjectRelease_n();
                  id v32 = objc_msgSend(v27, sel_displayString);

                  if (v32)
                  {
                    uint64_t v18 = sub_23309B710();
                    unint64_t v20 = v33;

                    goto LABEL_51;
                  }
LABEL_48:
                  uint64_t v18 = 0;
                  unint64_t v20 = 0xE000000000000000;
LABEL_51:
                  long long v15 = v73;
                  unint64_t v1 = v74;
                  goto LABEL_54;
                }
                unint64_t v1 = (unint64_t)v27;
              }
              else
              {
              }
              ++v25;
              if (v28 == v24)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v24) {
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v18 = 0;
        unint64_t v20 = 0xE000000000000000;
LABEL_54:
        uint64_t v34 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0) {
          uint64_t v34 = v18 & 0xFFFFFFFFFFFFLL;
        }
        if (!v34)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = sub_233086744();
          unint64_t v20 = v36;
          uint64_t v37 = HIBYTE(v36) & 0xF;
          if ((v36 & 0x2000000000000000) == 0) {
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
          }
          if (v37)
          {
            uint64_t v18 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v38 = objc_msgSend(v15, sel_fallbackDisplayString);
            uint64_t v18 = sub_23309B710();
            unint64_t v20 = v39;
          }
        }
LABEL_62:

        unint64_t v78 = v1;
        unint64_t v41 = *(void *)(v1 + 16);
        unint64_t v40 = *(void *)(v1 + 24);
        uint64_t v42 = v76;
        if (v41 >= v40 >> 1)
        {
          sub_232F39748(v40 > 1, v41 + 1, 1);
          uint64_t v42 = v76;
        }
        uint64_t v13 = v42 + 1;
        *(void *)(v1 + 16) = v41 + 1;
        unint64_t v43 = v1 + 16 * v41;
        *(void *)(v43 + 32) = v18;
        *(void *)(v43 + 40) = v20;
        int64_t v8 = v75;
        if (v13 == v75)
        {
          uint64_t v44 = v72;
          unint64_t v45 = v70;
          goto LABEL_66;
        }
      }
    }
    __break(1u);
    goto LABEL_78;
  }
LABEL_83:
  unint64_t v45 = v1;
  uint64_t v44 = v72;
LABEL_66:
  v46 = (void *)v44;
  v47 = sub_232FDA320(*(void *)(v44 + 728), *(void **)(v44 + 736), v45);
  if (v71)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_79:
    swift_task_dealloc();
    v69 = *(uint64_t (**)(void))(v72 + 8);
    return v69();
  }
  v48 = v47;
  uint64_t v49 = v46[93];
  uint64_t v50 = v46[91];
  swift_bridgeObjectRelease();
  sub_232FDB7A0(v50, v49, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v51 = sub_232F410E8();
  v52 = (id *)v46[93];
  v53 = (void *)v51;
  v55 = v54;
  v56 = v46;
  v57 = (void *)v46[92];
  sub_232F3A800(0, &qword_268757C58);
  v58 = v48;
  v59 = (void *)sub_233021124(v52, v58, v1, v53, v55);
  sub_232E9AA4C((uint64_t)v53, (unint64_t)v55);

  id v60 = objc_allocWithZone(MEMORY[0x263F45D10]);
  sub_232F3A800(0, &qword_268757008);
  id v61 = v57;
  v62 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  sub_232F3A800(0, &qword_268757C60);
  v63 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v64 = objc_msgSend(v60, sel_initWithOriginalRecord_mainRecord_verifiableClinicalRecord_medicalRecords_clinicalRecords_, v61, v58, v59, v62, v63);

  swift_task_dealloc();
  v65 = (uint64_t (*)(id))v56[1];
  return v65(v64);
}

uint64_t sub_232FD98FC()
{
  sub_232FDB734((id *)(v0 + 432));
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_232FD9968()
{
  uint64_t v71 = *(void *)(v0 + 776);
  unint64_t v1 = *(void *)(v0 + 704);
  sub_232FDB734((id *)(v0 + 432));
  unint64_t v78 = MEMORY[0x263F8EE78];
  if (v1 >> 62)
  {
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_23309BF80();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_83;
    }
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x237DB5EA0](i, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * i + 32);
      }
      long long v6 = v5;
      if (objc_msgSend(v5, sel_enteredInError, v70))
      {
      }
      else
      {
        MEMORY[0x237DB59C0]();
        if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_23309B9D0();
        }
        sub_23309B9E0();
        sub_23309B9C0();
      }
    }
    unint64_t v7 = v78;
  }
  else
  {
    unint64_t v7 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease_n();
  if (!(v7 >> 62))
  {
    int64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
      unint64_t v79 = v3;
      sub_23309BF20();
      goto LABEL_20;
    }
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  uint64_t v67 = sub_23309BF80();
  swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_78:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232FDB618();
    swift_allocError();
    unsigned char *v68 = 1;
    swift_willThrow();
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  int64_t v8 = sub_23309BF80();
  swift_bridgeObjectRelease();
  unint64_t v1 = MEMORY[0x263F8EE78];
  if (v8)
  {
    unint64_t v79 = MEMORY[0x263F8EE78];
    sub_23309BF20();
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_20:
      uint64_t v9 = 0;
      do
      {
        if ((v7 & 0xC000000000000001) != 0) {
          id v10 = (id)MEMORY[0x237DB5EA0](v9, v7);
        }
        else {
          id v10 = *(id *)(v7 + 8 * v9 + 32);
        }
        long long v11 = v10;
        ++v9;
        id v12 = objc_msgSend(v10, sel_asSignedClinicalDataItem, v70);

        sub_23309BF00();
        sub_23309BF30();
        sub_23309BF40();
        sub_23309BF10();
      }
      while (v8 != v9);
      unint64_t v70 = v79;
      unint64_t v78 = v3;
      sub_232F39748(0, v8, 0);
      uint64_t v13 = 0;
      unint64_t v1 = v3;
      int64_t v75 = v8;
      while (1)
      {
        if (v13 == v8)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        uint64_t v76 = v13;
        if ((v7 & 0xC000000000000001) != 0) {
          id v14 = (id)MEMORY[0x237DB5EA0]();
        }
        else {
          id v14 = *(id *)(v7 + 32 + 8 * v13);
        }
        long long v15 = v14;
        id v16 = objc_msgSend(v14, sel_primaryConcept, v70);
        id v17 = objc_msgSend(v16, sel_localizedPreferredName);

        if (v17)
        {
          uint64_t v18 = sub_23309B710();
          unint64_t v20 = v19;

          uint64_t v21 = HIBYTE(v20) & 0xF;
          if ((v20 & 0x2000000000000000) == 0) {
            uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
          }
          if (v21) {
            goto LABEL_62;
          }
          swift_bridgeObjectRelease();
        }
        id v22 = objc_msgSend(v15, sel_medicalRecordCodings);
        sub_232F3A800(0, (unint64_t *)&qword_268757138);
        unint64_t v23 = sub_23309B9A0();

        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = sub_23309BF80();
          if (v24)
          {
LABEL_37:
            v73 = v15;
            unint64_t v74 = v1;
            id v77 = self;
            uint64_t v25 = 0;
            while (1)
            {
              id v26 = (v23 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x237DB5EA0](v25, v23)
                  : *(id *)(v23 + 8 * v25 + 32);
              v27 = v26;
              uint64_t v28 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              id v29 = objc_msgSend(v26, sel_codingSystem);
              unint64_t v1 = (unint64_t)objc_msgSend(v77, sel_textSystem);
              if (v29)
              {
                sub_232F3A800(0, &qword_268757C68);
                id v30 = v29;
                char v31 = sub_23309BBF0();

                if (v31)
                {
                  swift_bridgeObjectRelease_n();
                  id v32 = objc_msgSend(v27, sel_displayString);

                  if (v32)
                  {
                    uint64_t v18 = sub_23309B710();
                    unint64_t v20 = v33;

                    goto LABEL_51;
                  }
LABEL_48:
                  uint64_t v18 = 0;
                  unint64_t v20 = 0xE000000000000000;
LABEL_51:
                  long long v15 = v73;
                  unint64_t v1 = v74;
                  goto LABEL_54;
                }
                unint64_t v1 = (unint64_t)v27;
              }
              else
              {
              }
              ++v25;
              if (v28 == v24)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_48;
              }
            }
            __break(1u);
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v24) {
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v18 = 0;
        unint64_t v20 = 0xE000000000000000;
LABEL_54:
        uint64_t v34 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0) {
          uint64_t v34 = v18 & 0xFFFFFFFFFFFFLL;
        }
        if (!v34)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = sub_233086744();
          unint64_t v20 = v36;
          uint64_t v37 = HIBYTE(v36) & 0xF;
          if ((v36 & 0x2000000000000000) == 0) {
            uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
          }
          if (v37)
          {
            uint64_t v18 = v35;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v38 = objc_msgSend(v15, sel_fallbackDisplayString);
            uint64_t v18 = sub_23309B710();
            unint64_t v20 = v39;
          }
        }
LABEL_62:

        unint64_t v78 = v1;
        unint64_t v41 = *(void *)(v1 + 16);
        unint64_t v40 = *(void *)(v1 + 24);
        uint64_t v42 = v76;
        if (v41 >= v40 >> 1)
        {
          sub_232F39748(v40 > 1, v41 + 1, 1);
          uint64_t v42 = v76;
        }
        uint64_t v13 = v42 + 1;
        *(void *)(v1 + 16) = v41 + 1;
        unint64_t v43 = v1 + 16 * v41;
        *(void *)(v43 + 32) = v18;
        *(void *)(v43 + 40) = v20;
        int64_t v8 = v75;
        if (v13 == v75)
        {
          uint64_t v44 = v72;
          unint64_t v45 = v70;
          goto LABEL_66;
        }
      }
    }
    __break(1u);
    goto LABEL_78;
  }
LABEL_83:
  unint64_t v45 = v1;
  uint64_t v44 = v72;
LABEL_66:
  v46 = (void *)v44;
  v47 = sub_232FDA320(*(void *)(v44 + 728), *(void **)(v44 + 736), v45);
  if (v71)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_79:
    swift_task_dealloc();
    v69 = *(uint64_t (**)(void))(v72 + 8);
    return v69();
  }
  v48 = v47;
  uint64_t v49 = v46[93];
  uint64_t v50 = v46[91];
  swift_bridgeObjectRelease();
  sub_232FDB7A0(v50, v49, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v51 = sub_232F410E8();
  v52 = (id *)v46[93];
  v53 = (void *)v51;
  v55 = v54;
  v56 = v46;
  v57 = (void *)v46[92];
  sub_232F3A800(0, &qword_268757C58);
  v58 = v48;
  v59 = (void *)sub_233021124(v52, v58, v1, v53, v55);
  sub_232E9AA4C((uint64_t)v53, (unint64_t)v55);

  id v60 = objc_allocWithZone(MEMORY[0x263F45D10]);
  sub_232F3A800(0, &qword_268757008);
  id v61 = v57;
  v62 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  sub_232F3A800(0, &qword_268757C60);
  v63 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v64 = objc_msgSend(v60, sel_initWithOriginalRecord_mainRecord_verifiableClinicalRecord_medicalRecords_clinicalRecords_, v61, v58, v59, v62, v63);

  swift_task_dealloc();
  v65 = (uint64_t (*)(id))v56[1];
  return v65(v64);
}

uint64_t sub_232FDA2B4()
{
  sub_232FDB734((id *)(v0 + 432));
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

long long *sub_232FDA320(uint64_t a1, void *a2, unint64_t a3)
{
  id v70 = a2;
  sub_232FDBC18(0, &qword_268757C70, MEMORY[0x263F07490]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char **)((char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v76 = (char *)&v67 - v10;
  sub_232FDBC18(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v74 = (uint64_t)&v67 - v12;
  uint64_t v13 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x270FA5388](v13 - 8);
  v73 = (id *)((char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_23309B190();
  uint64_t v79 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v72 = (uint64_t)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v71 = (uint64_t)&v67 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v86 = (uint64_t)&v67 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v85 = (char *)&v67 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t)&v67 - v25;
  long long v27 = v3[11];
  long long v113 = v3[10];
  long long v114 = v27;
  long long v28 = v3[13];
  long long v115 = v3[12];
  long long v116 = v28;
  long long v29 = v3[7];
  long long v109 = v3[6];
  long long v110 = v29;
  long long v30 = v3[9];
  long long v111 = v3[8];
  long long v112 = v30;
  long long v31 = v3[3];
  long long v105 = v3[2];
  long long v106 = v31;
  long long v32 = v3[5];
  long long v107 = v3[4];
  long long v108 = v32;
  long long v33 = v3[1];
  long long v103 = *v3;
  long long v104 = v33;
  uint64_t v88 = v34;
  sub_23309B090();
  if (a3 >> 62) {
    goto LABEL_33;
  }
  uint64_t v35 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v69 = v9;
    uint64_t v77 = v26;
    if (!v35) {
      break;
    }
    uint64_t v68 = a1;
    uint64_t v83 = v35;
    unint64_t v84 = a3 & 0xC000000000000001;
    unint64_t v36 = (void (**)(uint64_t, uint64_t))(v79 + 8);
    uint64_t v26 = 4;
    uint64_t v9 = &selRef_setMedicalRecordMetadata_;
    unint64_t v81 = a3;
    v82 = (void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
    uint64_t v78 = (v79 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v80 = (void (**)(uint64_t, uint64_t))(v79 + 8);
    while (1)
    {
      id v37 = v84 ? (id)MEMORY[0x237DB5EA0](v26 - 4, a3) : *(id *)(a3 + 8 * v26);
      id v38 = v37;
      a1 = v26 - 3;
      if (__OFADD__(v26 - 4, 1)) {
        break;
      }
      uint64_t v87 = v26;
      id v39 = objc_msgSend(v37, sel_relevantDate);
      unint64_t v40 = v36;
      uint64_t v41 = v86;
      sub_23309B160();

      LOBYTE(v39) = sub_23309B140();
      uint64_t v42 = *v40;
      (*v40)(v41, v15);
      uint64_t v43 = v15;
      if (v39)
      {
        uint64_t v44 = *v82;
        uint64_t v45 = (uint64_t)v85;
        uint64_t v46 = v88;
        (*v82)((uint64_t)v85, v88, v43);
        v44(v46, v45, v43);
      }
      else
      {
        uint64_t v47 = v88;
        v42(v88, v43);
        id v48 = objc_msgSend(v38, sel_relevantDate);
        uint64_t v49 = (uint64_t)v85;
        sub_23309B160();

        uint64_t v44 = *v82;
        (*v82)(v47, v49, v43);
      }

      uint64_t v15 = v43;
      if (a1 == v83)
      {
        a3 = v81;
        swift_bridgeObjectRelease();
        uint64_t v50 = v78;
        uint64_t v51 = v79;
        uint64_t v26 = v77;
        a1 = v68;
        goto LABEL_16;
      }
      uint64_t v26 = v87 + 1;
      unint64_t v36 = v80;
      a3 = v81;
    }
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_23309BF80();
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = v79;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 32);
  uint64_t v50 = (v79 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
LABEL_16:
  uint64_t v52 = v15;
  uint64_t v78 = v50;
  v44(v26, v88, v15);
  long long v89 = v113;
  long long v90 = v114;
  *(void *)&long long v91 = v115;
  v53 = &v89;
  uint64_t v54 = v75;
  if (BYTE8(v115)) {
    v55 = (char *)sub_23303E440();
  }
  else {
    v55 = (char *)sub_233073A58();
  }
  uint64_t v56 = (uint64_t)v76;
  if (v54)
  {
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v26, v52);
  }
  else
  {
    v85 = v55;
    sub_232FDB7A0(a1, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    uint64_t v57 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v74, 1, 1, v57);
    long long v99 = v113;
    long long v100 = v114;
    long long v101 = v115;
    long long v102 = v116;
    long long v95 = v109;
    long long v96 = v110;
    long long v97 = v111;
    long long v98 = v112;
    long long v91 = v105;
    long long v92 = v106;
    long long v93 = v107;
    long long v94 = v108;
    long long v89 = v103;
    long long v90 = v104;
    uint64_t v87 = sub_232FDABD0();
    uint64_t v88 = *((void *)&v108 + 1);
    uint64_t v86 = v108;
    if (BYTE8(v109))
    {
      v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
      v58(v56, 1, 1, v52);
      uint64_t v56 = (uint64_t)v76;
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_232FDB864((uint64_t)&v108);
      sub_23309B150();
      v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
      v58(v56, 0, 1, v52);
      sub_232FDB8EC((uint64_t)&v108);
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v56, 1, v52) == 1)
    {
      sub_23309B180();
      sub_232FDB808(v56, &qword_268757C70, MEMORY[0x263F07490]);
    }
    else
    {
      v44(v71, v56, v52);
    }
    uint64_t v59 = (uint64_t)v69;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v72, v77, v52);
    uint64_t v60 = v51;
    if (BYTE8(v111))
    {
      v58(v59, 1, 1, v52);
    }
    else
    {
      sub_232FDB864((uint64_t)&v108);
      sub_23309B150();
      v58(v59, 0, 1, v52);
      sub_232FDB8EC((uint64_t)&v108);
    }
    uint64_t v61 = v59;
    sub_232F3A800(0, &qword_268757C78);
    id v62 = v70;
    id v63 = objc_msgSend(v70, sel_signatureStatus);
    swift_bridgeObjectRetain();
    id v64 = objc_msgSend(v62, sel_sourceType);
    v65 = v85;
    v53 = (long long *)sub_23301FB04(v73, v74, 0, 0, v87, v86, v88, v71, v72, v61, (uint64_t)v63, (uint64_t)v85, a3, 0, 0xF000000000000000, (uint64_t)v64);

    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v77, v52);
  }
  return v53;
}

uint64_t sub_232FDABD0()
{
  sub_232FDBC18(0, &qword_2687565A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v48 - v2;
  uint64_t v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v48 - v8;
  sub_232FDBC18(0, &qword_268756558, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v20 = *(void **)(v0 + 144);
  uint64_t v21 = *(void *)(v0 + 176);
  if (*(unsigned char *)(v0 + 200))
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 16);
      if (v22)
      {
        uint64_t v23 = *(void *)(v0 + 176);
        uint64_t v24 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
        uint64_t v25 = v23
            + ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80));
        uint64_t v55 = *(void *)(*(void *)(v24 - 8) + 72);
        uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
        uint64_t v51 = *MEMORY[0x263F0A040];
        uint64_t v50 = *MEMORY[0x263F0A038];
        swift_bridgeObjectRetain();
        uint64_t v49 = v23;
        swift_bridgeObjectRetain();
        uint64_t v53 = v24;
        do
        {
          sub_232FDBAE4(v25 + *(int *)(v24 + 20), (uint64_t)v3, &qword_2687565A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
          if ((*v26)(v3, 1, v4) == 1)
          {
            sub_232FDB808((uint64_t)v3, &qword_2687565A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
          }
          else
          {
            sub_232FDBBB0((uint64_t)v3, (uint64_t)v9, type metadata accessor for ModelsR4.ResourceProxy);
            sub_232FDB7A0((uint64_t)v9, (uint64_t)v7, type metadata accessor for ModelsR4.ResourceProxy);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload == 5 || EnumCaseMultiPayload == 6)
            {
              uint64_t v52 = sub_23309B710();
              uint64_t v54 = v28;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v20 = sub_232F3CCE0(0, v20[2] + 1, 1, v20);
              }
              unint64_t v30 = v20[2];
              unint64_t v29 = v20[3];
              if (v30 >= v29 >> 1) {
                uint64_t v20 = sub_232F3CCE0((void *)(v29 > 1), v30 + 1, 1, v20);
              }
              v20[2] = v30 + 1;
              long long v31 = &v20[2 * v30];
              uint64_t v24 = v53;
              uint64_t v32 = v54;
              v31[4] = v52;
              v31[5] = v32;
            }
            sub_232FDBB50((uint64_t)v9, type metadata accessor for ModelsR4.ResourceProxy);
            sub_232FDBB50((uint64_t)v7, type metadata accessor for ModelsR4.ResourceProxy);
          }
          v25 += v55;
          --v22;
        }
        while (v22);
LABEL_31:
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
  }
  else if (v21)
  {
    uint64_t v33 = *(void *)(v21 + 16);
    if (v33)
    {
      uint64_t v34 = *(void *)(v0 + 176);
      uint64_t v35 = v17;
      uint64_t v36 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
      uint64_t v37 = v34
          + ((*(unsigned __int8 *)(*(void *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v36 - 8) + 80));
      uint64_t v55 = *(void *)(*(void *)(v36 - 8) + 72);
      id v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      uint64_t v51 = *MEMORY[0x263F0A040];
      uint64_t v50 = *MEMORY[0x263F0A038];
      swift_bridgeObjectRetain();
      uint64_t v49 = v34;
      swift_bridgeObjectRetain();
      uint64_t v53 = v36;
      do
      {
        sub_232FDBAE4(v37 + *(int *)(v36 + 20), (uint64_t)v12, &qword_268756558, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
        if ((*v38)(v12, 1, v13) == 1)
        {
          sub_232FDB808((uint64_t)v12, &qword_268756558, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
        }
        else
        {
          sub_232FDBBB0((uint64_t)v12, (uint64_t)v19, type metadata accessor for ModelsDSTU2.ResourceProxy);
          sub_232FDB7A0((uint64_t)v19, (uint64_t)v16, type metadata accessor for ModelsDSTU2.ResourceProxy);
          int v39 = swift_getEnumCaseMultiPayload();
          if (v39 == 3 || v39 == 4)
          {
            uint64_t v52 = sub_23309B710();
            uint64_t v54 = v40;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v20 = sub_232F3CCE0(0, v20[2] + 1, 1, v20);
            }
            unint64_t v42 = v20[2];
            unint64_t v41 = v20[3];
            if (v42 >= v41 >> 1) {
              uint64_t v20 = sub_232F3CCE0((void *)(v41 > 1), v42 + 1, 1, v20);
            }
            v20[2] = v42 + 1;
            uint64_t v43 = &v20[2 * v42];
            uint64_t v36 = v53;
            uint64_t v44 = v54;
            v43[4] = v52;
            v43[5] = v44;
          }
          sub_232FDBB50((uint64_t)v19, type metadata accessor for ModelsDSTU2.ResourceProxy);
          sub_232FDBB50((uint64_t)v16, type metadata accessor for ModelsDSTU2.ResourceProxy);
        }
        v37 += v55;
        --v33;
      }
      while (v33);
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v56 = sub_23309BB20();
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = sub_232FDB978(v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v46;
}

id sub_232FDB334(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_232FDBC18(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void *)(v4 + 80);
  uint64_t v14 = *(void *)(v4 + 88);
  sub_232FDBAE4(a3, (uint64_t)&v16 - v11, (unint64_t *)&qword_268756520, v9);
  objc_allocWithZone(MEMORY[0x263F45C30]);
  sub_232E9A9F4(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_232F412FC(a1, a2, 1, (uint64_t)v12, v13, v14, 0, 0, 0, 0xF000000000000000, 0, a4);
}

uint64_t sub_232FDB474(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_232FDB518;
  return sub_232FD84D8(a1, a2);
}

uint64_t sub_232FDB518(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

unint64_t sub_232FDB618()
{
  unint64_t result = qword_268757C50;
  if (!qword_268757C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757C50);
  }
  return result;
}

uint64_t sub_232FDB66C(uint64_t a1, uint64_t a2)
{
  return a2;
}

id *sub_232FDB6C8(id *a1)
{
  id v2 = *a1;
  sub_232F41ADC();
  return a1;
}

id *sub_232FDB734(id *a1)
{
  sub_232F41E4C();
  return a1;
}

uint64_t sub_232FDB7A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_232FDB808(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_232FDBC18(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232FDB864(uint64_t a1)
{
  id v2 = *(void **)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  sub_232F41ADC();
  return a1;
}

uint64_t sub_232FDB8EC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232F41E4C();
  return a1;
}

uint64_t sub_232FDB978(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 40;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v15 = result + 40;
  unint64_t v16 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (uint64_t i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(i - 1);
      uint64_t v9 = *i;
      swift_bridgeObjectRetain_n();
      char v11 = sub_23303850C(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if (v11) {
        break;
      }
      unint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1) {
        return v5;
      }
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = v5;
    if ((result & 1) == 0)
    {
      unint64_t result = sub_232F39748(0, *(void *)(v5 + 16) + 1, 1);
      uint64_t v5 = v18;
    }
    unint64_t v13 = *(void *)(v5 + 16);
    unint64_t v12 = *(void *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t result = sub_232F39748(v12 > 1, v13 + 1, 1);
      uint64_t v5 = v18;
    }
    *(void *)(v5 + 16) = v13 + 1;
    uint64_t v14 = v5 + 16 * v13;
    *(void *)(v14 + 32) = v10;
    *(void *)(v14 + 40) = v9;
    uint64_t v3 = v15;
    unint64_t v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t sub_232FDBAE4(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_232FDBC18(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_232FDBB50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_232FDBBB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_232FDBC18(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_232FDBC6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for Attachment() - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v23 - v9;
  unint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v26 = MEMORY[0x263F8EE78];
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12)
  {
    unint64_t v16 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62)) {
      goto LABEL_13;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (v22) {
      return v16;
    }
    goto LABEL_14;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = a3 + v13;
  uint64_t v15 = *(void *)(v8 + 72);
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  unint64_t v16 = MEMORY[0x263F8EE78];
  do
  {
    sub_232FDDB14(v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Attachment);
    id v17 = sub_232FDBF30(v24, v25);
    if (v17)
    {
      id v18 = v17;
      MEMORY[0x237DB59C0]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_23309B9D0();
      }
      sub_23309B9E0();
      sub_23309B9C0();
    }
    sub_232FDDB14((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Attachment);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v16 = sub_232F3D5C8(0, *(void *)(v16 + 16) + 1, 1, v16);
    }
    unint64_t v20 = *(void *)(v16 + 16);
    unint64_t v19 = *(void *)(v16 + 24);
    if (v20 >= v19 >> 1) {
      unint64_t v16 = sub_232F3D5C8(v19 > 1, v20 + 1, 1, v16);
    }
    *(void *)(v16 + 16) = v20 + 1;
    sub_232FDDA40((uint64_t)v7, v16 + v13 + v20 * v15);
    sub_232FDDBD0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Attachment);
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  unint64_t v11 = v26;
  if (v26 >> 62) {
    goto LABEL_17;
  }
LABEL_13:
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
LABEL_14:
  }
    swift_bridgeObjectRelease();
  return v16;
}

id sub_232FDBF30(uint64_t a1, void *a2)
{
  uint64_t v211 = a1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232FDDC6C(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v178 - v6;
  uint64_t v8 = type metadata accessor for PostExtractionContext();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v204 = (uint64_t)&v178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v192 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v184 = (uint64_t)&v178 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FDDC6C(0, &qword_268757C70, MEMORY[0x263F07490], v4);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  v195 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v194 = (uint64_t)&v178 - v15;
  uint64_t v201 = sub_23309B190();
  uint64_t v200 = *(void *)(v201 - 8);
  MEMORY[0x270FA5388](v201);
  id v17 = (char *)&v178 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = sub_23309AF80();
  v213 = *(void **)(v210 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v210);
  v186 = (char *)&v178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v185 = (char *)&v178 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v183 = (char *)&v178 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v188 = (char *)&v178 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v178 - v27;
  MEMORY[0x270FA5388](v26);
  v208 = (char *)&v178 - v29;
  sub_232FDDC6C(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v4);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v33 = (char *)&v178 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v205 = (uint64_t)&v178 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  v203 = (char *)&v178 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  v191 = (char *)&v178 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  v197 = (char *)&v178 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v44 = (char *)&v178 - v43;
  MEMORY[0x270FA5388](v42);
  uint64_t v46 = (char *)&v178 - v45;
  uint64_t v47 = *(void *)(v2 + 24);
  v196 = v7;
  unint64_t v202 = (unint64_t)v28;
  v182 = v17;
  uint64_t v193 = v10;
  if (v47)
  {
    uint64_t v48 = (void *)(v2 + 16);
    swift_bridgeObjectRetain();
    uint64_t v49 = v2;
    uint64_t v50 = sub_23309AFC0();
    unint64_t v52 = v51;
    swift_bridgeObjectRelease();
    if (v52 >> 60 == 15)
    {
      if (qword_2687563A0 != -1) {
        swift_once();
      }
      uint64_t v53 = sub_23309B4B0();
      __swift_project_value_buffer(v53, (uint64_t)qword_268770F68);
      uint64_t v54 = sub_23309B4A0();
      os_log_type_t v55 = sub_23309BB80();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v215 = v57;
        *(_DWORD *)uint64_t v56 = 136315138;
        uint64_t v214 = type metadata accessor for Attachment();
        sub_232FDDC30();
        uint64_t v58 = sub_23309B770();
        uint64_t v214 = sub_232F62B64(v58, v59, &v215);
        sub_23309BD10();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_232E63000, v54, v55, "%s: Failed to base64 decode inline data for attachment.", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x237DB6EC0](v57, -1, -1);
        MEMORY[0x237DB6EC0](v56, -1, -1);
      }

      return 0;
    }
    v187 = v33;
    v180 = a2;
    v209 = v46;
    sub_232E9A9F4(v50, v52);
    uint64_t v62 = sub_23306E650(v50, v52);
    unint64_t v64 = v63;
    v212 = (int *)type metadata accessor for Attachment();
    uint64_t v65 = v212[8];
    v206 = (uint64_t *)v49;
    v66 = (uint64_t *)(v49 + v65);
    uint64_t v67 = *(void *)(v49 + v65 + 8);
    uint64_t v199 = v62;
    unint64_t v198 = v64;
    uint64_t v189 = v50;
    unint64_t v207 = v52;
    if (v67)
    {
      uint64_t v68 = *v66;
      sub_232F3F15C(v50, v52);
    }
    else
    {
      sub_232E9A9F4(v62, v64);
      uint64_t v68 = sub_23309B020();
      uint64_t v67 = v71;
      sub_232F3F15C(v50, v52);
      sub_232E9AA4C(v62, v64);
    }
    swift_bridgeObjectRelease();
    uint64_t *v66 = v68;
    v66[1] = v67;
    void *v48 = 0;
    v48[1] = 0;
    uint64_t v46 = v209;
    uint64_t v70 = v210;
    uint64_t v2 = (uint64_t)v206;
    uint64_t v60 = (uint64_t)v212;
    v69 = v213;
  }
  else
  {
    v187 = v33;
    v180 = a2;
    uint64_t v60 = type metadata accessor for Attachment();
    if (*(void *)(v2 + *(int *)(v60 + 32) + 8))
    {
      swift_bridgeObjectRetain();
      uint64_t v199 = sub_23309AFC0();
      unint64_t v198 = v61;
      swift_bridgeObjectRelease();
      uint64_t v189 = 0;
      unint64_t v207 = 0xF000000000000000;
    }
    else
    {
      uint64_t v189 = 0;
      uint64_t v199 = 0;
      unint64_t v207 = 0xF000000000000000;
      unint64_t v198 = 0xF000000000000000;
    }
    v69 = v213;
    uint64_t v70 = v210;
  }
  uint64_t v72 = v69 + 7;
  v190 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v69[7];
  v190(v46, 1, 1, v70);
  type metadata accessor for Attachment();
  v212 = (int *)v60;
  sub_232F41E94(v2 + *(int *)(v60 + 24), (uint64_t)v44);
  v73 = (unsigned int (*)(char *, uint64_t, uint64_t))v69[6];
  if (v73(v44, 1, v70) == 1)
  {
    v206 = (uint64_t *)v2;
    sub_232FDDAA4((uint64_t)v44, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    int v74 = 0;
  }
  else
  {
    v181 = v69 + 7;
    v209 = v46;
    uint64_t v92 = v70;
    long long v93 = v69;
    long long v94 = (void (*)(uint64_t, char *, uint64_t))v69[4];
    uint64_t v95 = (uint64_t)v208;
    v94((uint64_t)v208, v44, v70);
    uint64_t v96 = v211 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    uint64_t v97 = v96 + *(int *)(type metadata accessor for ExtractionContext() + 32);
    long long v98 = v197;
    sub_232F41E94(v97, (uint64_t)v197);
    if (v73(v98, 1, v70) == 1)
    {
      unint64_t v99 = v207;
      sub_232FDDAA4((uint64_t)v98, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if (qword_2687563A0 != -1) {
        swift_once();
      }
      uint64_t v100 = sub_23309B4B0();
      __swift_project_value_buffer(v100, (uint64_t)qword_268770F68);
      long long v101 = sub_23309B4A0();
      os_log_type_t v102 = sub_23309BB80();
      if (os_log_type_enabled(v101, v102))
      {
        long long v103 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        *(_DWORD *)long long v103 = 136315138;
        uint64_t v214 = (uint64_t)v212;
        uint64_t v215 = v104;
        sub_232FDDC30();
        uint64_t v105 = sub_23309B770();
        uint64_t v214 = sub_232F62B64(v105, v106, &v215);
        sub_23309BD10();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_232E63000, v101, v102, "%s: sourceURL is nil in ExtractionContext for attachment.", v103, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x237DB6EC0](v104, -1, -1);
        MEMORY[0x237DB6EC0](v103, -1, -1);
      }

      sub_232F3F15C(v189, v99);
      ((void (*)(char *, uint64_t))v213[1])(v208, v70);
      uint64_t v91 = (uint64_t)v209;
      uint64_t v88 = v199;
      unint64_t v89 = v198;
      long long v90 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
      goto LABEL_57;
    }
    v206 = (uint64_t *)v2;
    unint64_t v118 = v202;
    v179 = (void (*)(char *, char *, uint64_t))v94;
    v94(v202, v98, v70);
    uint64_t v119 = (uint64_t)v203;
    v197 = (char *)v93[2];
    ((void (*)(char *, unint64_t, uint64_t))v197)(v203, v118, v70);
    uint64_t v72 = v181;
    v190((char *)v119, 0, 1, v70);
    v120 = v191;
    sub_233011E38(v119, v191);
    sub_232FDDAA4(v119, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    if (v73(v120, 1, v70) == 1)
    {
      v121 = (void (*)(char *, unint64_t, uint64_t))v197;
      uint64_t v122 = v70;
      sub_232FDDAA4((uint64_t)v120, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if (qword_2687563A0 != -1) {
        swift_once();
      }
      uint64_t v123 = sub_23309B4B0();
      __swift_project_value_buffer(v123, (uint64_t)qword_268770F68);
      v124 = v185;
      unint64_t v125 = v202;
      v121(v185, v202, v122);
      v126 = v186;
      v121(v186, v95, v122);
      v127 = sub_23309B4A0();
      os_log_type_t v128 = sub_23309BB80();
      if (os_log_type_enabled(v127, v128))
      {
        uint64_t v129 = swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        uint64_t v211 = v130;
        *(_DWORD *)uint64_t v129 = 136315650;
        uint64_t v214 = (uint64_t)v212;
        uint64_t v215 = v130;
        sub_232FDDC30();
        uint64_t v131 = sub_23309B770();
        uint64_t v214 = sub_232F62B64(v131, v132, &v215);
        sub_23309BD10();
        swift_bridgeObjectRelease();
        *(_WORD *)(v129 + 12) = 2080;
        uint64_t v133 = sub_23309AEE0();
        uint64_t v214 = sub_232F62B64(v133, v134, &v215);
        sub_23309BD10();
        swift_bridgeObjectRelease();
        v135 = (void (*)(char *, uint64_t))v213[1];
        v135(v124, v122);
        *(_WORD *)(v129 + 22) = 2080;
        uint64_t v136 = sub_23309AEE0();
        uint64_t v214 = sub_232F62B64(v136, v137, &v215);
        sub_23309BD10();
        swift_bridgeObjectRelease();
        v135(v126, v122);
        _os_log_impl(&dword_232E63000, v127, v128, "%s: Failed to create fully qualified url for attachment with sourceURL: %s reference URL: %s", (uint8_t *)v129, 0x20u);
        uint64_t v138 = v211;
        swift_arrayDestroy();
        MEMORY[0x237DB6EC0](v138, -1, -1);
        MEMORY[0x237DB6EC0](v129, -1, -1);

        sub_232F3F15C(v189, v207);
        v135((char *)v202, v122);
        v135(v208, v122);
      }
      else
      {

        v162 = (void (*)(char *, uint64_t))v213[1];
        v162(v126, v122);
        v162(v124, v122);
        sub_232F3F15C(v189, v207);
        v162((char *)v125, v122);
        v162((char *)v95, v122);
      }
      uint64_t v88 = v199;
      unint64_t v89 = v198;
      long long v90 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
      uint64_t v91 = (uint64_t)v209;
      goto LABEL_57;
    }
    v144 = v188;
    v179(v188, v120, v70);
    v145 = v144;
    uint64_t v46 = v209;
    sub_232FDDAA4((uint64_t)v209, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    ((void (*)(char *, char *, uint64_t))v197)(v46, v144, v92);
    v146 = v190;
    v190(v46, 0, 1, v92);
    if (v73(v46, 1, v92))
    {
      v147 = (void (*)(char *, uint64_t))v213[1];
      v147(v145, v92);
      v147((char *)v202, v92);
      v147((char *)v95, v92);
      int v74 = 0;
    }
    else
    {
      v164 = v183;
      v165 = (void (*)(char *, unint64_t, uint64_t))v197;
      ((void (*)(char *, char *, uint64_t))v197)(v183, v46, v92);
      uint64_t v166 = (uint64_t)v203;
      v165(v203, v202, v92);
      v146((char *)v166, 0, 1, v92);
      int v74 = sub_233012274(0x7972616E6942, 0xE600000000000000, v166);
      sub_232FDDAA4(v166, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      v167 = (void (*)(char *, uint64_t))v213[1];
      v167(v164, v92);
      v167(v188, v92);
      v167((char *)v202, v92);
      v167(v208, v92);
    }
    uint64_t v70 = v92;
  }
  uint64_t v75 = v205;
  sub_232F41E94((uint64_t)v46, v205);
  unsigned int v76 = v73((char *)v75, 1, v70);
  sub_232FDDAA4(v75, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  unint64_t v77 = v207 >> 60;
  if (v76 == 1 && v207 >> 60 == 15)
  {
    uint64_t v78 = (uint64_t)v212;
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v79 = sub_23309B4B0();
    __swift_project_value_buffer(v79, (uint64_t)qword_268770F68);
    uint64_t v80 = sub_23309B4A0();
    os_log_type_t v81 = sub_23309BB60();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = v46;
      uint64_t v84 = swift_slowAlloc();
      uint64_t v214 = v78;
      uint64_t v215 = v84;
      *(_DWORD *)v82 = 136315138;
      sub_232FDDC30();
      uint64_t v85 = sub_23309B770();
      uint64_t v214 = sub_232F62B64(v85, v86, &v215);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v80, v81, "%s: Attachment has neither a 'url' nor 'data'. ", v82, 0xCu);
      swift_arrayDestroy();
      uint64_t v87 = v84;
      uint64_t v46 = v83;
      MEMORY[0x237DB6EC0](v87, -1, -1);
      MEMORY[0x237DB6EC0](v82, -1, -1);
    }

    uint64_t v88 = v199;
    unint64_t v89 = v198;
    long long v90 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    uint64_t v91 = (uint64_t)v46;
LABEL_57:
    sub_232FDDAA4(v91, (unint64_t *)&qword_268756520, v90);
    sub_232F3F15C(v88, v89);
    return 0;
  }
  v181 = v72;
  long long v107 = v212;
  long long v108 = v206;
  uint64_t v109 = (uint64_t)v206 + v212[10];
  int v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v109, 1, v193);
  LODWORD(v205) = v74;
  if (v110)
  {
    uint64_t v111 = v194;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v200 + 56))(v194, 1, 1, v201);
    uint64_t v112 = (uint64_t)v196;
  }
  else
  {
    v148 = v196;
    uint64_t v149 = v184;
    sub_232FDDB14(v109, v184, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    uint64_t v111 = v194;
    FHIRDateTime.asNSDate()(v194);
    sub_232FDDBD0(v149, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    uint64_t v168 = v200;
    uint64_t v169 = v201;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v200 + 56))(v111, 0, 1, v201);
    int v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v111, 1, v169);
    uint64_t v70 = v210;
    long long v108 = v206;
    uint64_t v112 = (uint64_t)v148;
    if (v170 != 1)
    {
      uint64_t v171 = v200;
      uint64_t v172 = v111;
      uint64_t v173 = v201;
      (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v182, v172, v201);
      sub_232FDDC6C(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2330A1880;
      *(void *)(inited + 32) = sub_23309B710();
      *(void *)(inited + 40) = v175;
      *(void *)(inited + 72) = v173;
      long long v108 = v206;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
      v177 = v182;
      (*(void (**)(uint64_t *, char *, uint64_t))(v171 + 16))(boxed_opaque_existential_1, v182, v173);
      unint64_t v202 = sub_232F37A50(inited);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v177, v173);
      goto LABEL_34;
    }
  }
  sub_232FDDAA4(v111, &qword_268757C70, MEMORY[0x263F07490]);
  unint64_t v202 = 0;
LABEL_34:
  sub_232FDDB14(v211, v204, (uint64_t (*)(void))type metadata accessor for PostExtractionContext);
  if (v77 <= 0xE) {
    uint64_t v113 = 7;
  }
  else {
    uint64_t v113 = 0;
  }
  long long v114 = (uint64_t *)((char *)v108 + v107[9]);
  uint64_t v115 = v114[1];
  v212 = (int *)*v114;
  v213 = (void *)v113;
  sub_232F41E94((uint64_t)v46, (uint64_t)v187);
  uint64_t v116 = v112;
  if (*((unsigned char *)v108 + v107[7] + 4))
  {
    swift_bridgeObjectRetain();
    v117 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v117 = (void *)sub_23309C430();
  }
  uint64_t v139 = v70;
  v209 = v46;
  if (v205)
  {
    v206 = (uint64_t *)sub_23309B710();
    uint64_t v141 = v140;
  }
  else
  {
    uint64_t v141 = v108[1];
    v206 = (uint64_t *)*v108;
    swift_bridgeObjectRetain();
  }
  uint64_t v142 = *(uint64_t *)((char *)v108 + v107[11] + 8);
  v208 = (char *)v115;
  if (v142)
  {
    swift_bridgeObjectRetain_n();
    sub_23309B200();
    uint64_t v143 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v116, 0, 1, v143);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v150 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v116, 1, 1, v150);
  }
  sub_232FDDB7C();
  uint64_t v151 = v211 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v152 = v151 + *(int *)(type metadata accessor for ExtractionContext() + 28);
  uint64_t v153 = v200;
  uint64_t v154 = (uint64_t)v195;
  uint64_t v155 = v201;
  (*(void (**)(char *, uint64_t, uint64_t))(v200 + 16))(v195, v152, v201);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v153 + 56))(v154, 0, 1, v155);
  uint64_t v156 = (uint64_t)v203;
  v190(v203, 1, 1, v139);
  uint64_t v157 = v199;
  unint64_t v158 = v198;
  sub_232FDDBBC(v199, v198);
  unint64_t v159 = v207;
  uint64_t v160 = v189;
  id v161 = sub_23304A0F4(v204, v180, v213, (uint64_t)v212, (uint64_t)v208, (uint64_t)v187, (uint64_t)v117, (uint64_t)v206, v141, v116, 0, 0xF000000000000000, v154, v156, v189, v207, v157, v158, v202);
  sub_232F3F15C(v157, v158);
  sub_232F3F15C(v160, v159);

  sub_232FDDAA4((uint64_t)v209, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  sub_232F3F15C(v157, v158);
  return v161;
}

uint64_t sub_232FDDA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Attachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_232FDDAA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_232FDDC6C(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232FDDB14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_232FDDB7C()
{
  unint64_t result = qword_268757C80;
  if (!qword_268757C80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268757C80);
  }
  return result;
}

uint64_t sub_232FDDBBC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_232E9A9F4(a1, a2);
  }
  return a1;
}

uint64_t sub_232FDDBD0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_232FDDC30()
{
  unint64_t result = qword_268757C88;
  if (!qword_268757C88)
  {
    type metadata accessor for Attachment();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757C88);
  }
  return result;
}

void sub_232FDDC6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_232FDDCD0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_232FDDCF4, 0, 0);
}

uint64_t sub_232FDDCF4()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
  *(void *)(v0 + 40) = sub_232F3A800(0, (unint64_t *)&qword_268757138);
  unint64_t v2 = sub_23309B9A0();

  if (v2 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_23309BF80())
  {
    uint64_t v4 = 0;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      id v5 = (id)MEMORY[0x237DB5EA0](v4, v2);
      goto LABEL_6;
    }
    while (1)
    {
      id v5 = *(id *)(v2 + 8 * v4 + 32);
LABEL_6:
      uint64_t v6 = v5;
      if (__OFADD__(v4, 1)) {
        break;
      }
      id v7 = objc_msgSend(v5, sel_displayString);
      if (v7)
      {
        unint64_t v8 = v7;
        uint64_t v9 = sub_23309B710();
        unint64_t v11 = v10;

        swift_bridgeObjectRelease();
        uint64_t v12 = HIBYTE(v11) & 0xF;
        if ((v11 & 0x2000000000000000) == 0) {
          uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
        }
        if (v12)
        {
          uint64_t v13 = *(void **)(v0 + 16);
          swift_bridgeObjectRelease_n();

LABEL_50:
          id v39 = v13;
          uint64_t v40 = *(void *)(v0 + 16);
          uint64_t v41 = *(uint64_t (**)(uint64_t))(v0 + 8);
          return v41(v40);
        }
      }

      if (v4 + 1 == v3) {
        goto LABEL_17;
      }
      ++v4;
      if ((v2 & 0xC000000000000001) != 0) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  unint64_t v14 = (unint64_t)sub_232FDE6F4();
  *(void *)(v0 + 48) = v14;
  if (v14 >> 62) {
    goto LABEL_48;
  }
  uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  *(void *)(v0 + 56) = v16;
  if (!v16)
  {
LABEL_49:
    uint64_t v13 = *(void **)(v0 + 16);
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
LABEL_19:
  for (unint64_t i = 0; ; unint64_t i = *(void *)(v0 + 72))
  {
    uint64_t v18 = *(void *)(v0 + 48);
    if ((v18 & 0xC000000000000001) != 0)
    {
      id v19 = (id)MEMORY[0x237DB5EA0](i);
    }
    else
    {
      if (i >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return MEMORY[0x270FA2498](v16, v18, v15);
      }
      id v19 = *(id *)(v18 + 8 * i + 32);
    }
    *(void *)(v0 + 64) = v19;
    *(void *)(v0 + 72) = i + 1;
    if (__OFADD__(i, 1)) {
      goto LABEL_47;
    }
    id v20 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
    unint64_t v21 = sub_23309B9A0();

    if (!(v21 >> 62))
    {
      uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_23309BF80();
    swift_bridgeObjectRelease_n();
    if (v22 < 0) {
      break;
    }
LABEL_27:
    *(void *)(v0 + 80) = v22;
    if (v22)
    {
      unint64_t v23 = 0;
      *(void *)(v0 + 88) = 0;
      while (1)
      {
        id v24 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
        uint64_t v25 = sub_23309B9A0();

        if ((v25 & 0xC000000000000001) != 0)
        {
          id v26 = (id)MEMORY[0x237DB5EA0](v23, v25);
        }
        else
        {
          if (v23 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            uint64_t v16 = sub_23309BF80();
            *(void *)(v0 + 56) = v16;
            if (!v16) {
              goto LABEL_49;
            }
            goto LABEL_19;
          }
          id v26 = *(id *)(v25 + 8 * v23 + 32);
        }
        uint64_t v22 = (uint64_t)v26;
        *(void *)(v0 + 96) = v26;
        swift_bridgeObjectRelease();
        id v27 = objc_msgSend((id)v22, sel_codingSystem);
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void **)(v0 + 64);
          sub_232F3A800(0, &qword_268757C68);
          id v30 = v29;
          id v31 = v28;
          LOBYTE(v28) = sub_23309BBF0();

          if (v28) {
            goto LABEL_42;
          }
        }
        uint64_t v32 = *(void *)(v0 + 88);
        uint64_t v33 = *(void *)(v0 + 80);

        if (v32 + 1 == v33) {
          break;
        }
        uint64_t v34 = *(void *)(v0 + 80);
        unint64_t v23 = *(void *)(v0 + 88) + 1;
        *(void *)(v0 + 88) = v23;
        if (v23 == v34) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v35 = *(void *)(v0 + 72);
    uint64_t v36 = *(void *)(v0 + 56);

    if (v35 == v36) {
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_42:
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_232FDE1B8;
  uint64_t v38 = *(void *)(v0 + 32);
  v37[19] = v22;
  v37[20] = v38;
  uint64_t v16 = (uint64_t)sub_232FDEA8C;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  return MEMORY[0x270FA2498](v16, v18, v15);
}

uint64_t sub_232FDE1B8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FDE2B8, 0, 0);
}

uint64_t sub_232FDE2B8()
{
  uint64_t v1 = *(void **)(v0 + 112);
  if (!v1)
  {
    while (1)
    {
      uint64_t v17 = *(void *)(v0 + 88);
      uint64_t v18 = *(void *)(v0 + 80);

      if (v17 + 1 == v18)
      {
        while (1)
        {
          uint64_t v19 = *(void *)(v0 + 72);
          uint64_t v20 = *(void *)(v0 + 56);

          if (v19 == v20)
          {
            uint64_t v35 = *(void **)(v0 + 16);
            swift_bridgeObjectRelease();
            id v36 = v35;
            id v16 = *(id *)(v0 + 16);
            goto LABEL_31;
          }
          unint64_t v21 = *(void *)(v0 + 72);
          uint64_t v7 = *(void *)(v0 + 48);
          if ((v7 & 0xC000000000000001) != 0)
          {
            id isUniquelyReferenced_nonNull_bridgeObject = (id)MEMORY[0x237DB5EA0](*(void *)(v0 + 72));
          }
          else
          {
            if (v21 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_39;
            }
            id isUniquelyReferenced_nonNull_bridgeObject = *(id *)(v7 + 8 * v21 + 32);
          }
          *(void *)(v0 + 64) = isUniquelyReferenced_nonNull_bridgeObject;
          *(void *)(v0 + 72) = v21 + 1;
          if (__OFADD__(v21, 1)) {
            break;
          }
          id v22 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
          unint64_t v23 = sub_23309B9A0();

          if (v23 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v24 = sub_23309BF80();
            id isUniquelyReferenced_nonNull_bridgeObject = (id)swift_bridgeObjectRelease_n();
            if (v24 < 0) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
            id isUniquelyReferenced_nonNull_bridgeObject = (id)swift_bridgeObjectRelease();
          }
          *(void *)(v0 + 80) = v24;
          if (v24)
          {
            unint64_t v25 = 0;
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v24 = *(void *)(v0 + 80);
      unint64_t v25 = *(void *)(v0 + 88) + 1;
LABEL_22:
      *(void *)(v0 + 88) = v25;
      if (v25 == v24) {
        goto LABEL_40;
      }
      id v26 = objc_msgSend(*(id *)(v0 + 16), sel_codings);
      uint64_t v27 = sub_23309B9A0();

      if ((v27 & 0xC000000000000001) != 0)
      {
        id v28 = (id)MEMORY[0x237DB5EA0](v25, v27);
      }
      else
      {
        if (v25 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_41;
        }
        id v28 = *(id *)(v27 + 8 * v25 + 32);
      }
      uint64_t v29 = v28;
      *(void *)(v0 + 96) = v28;
      swift_bridgeObjectRelease();
      id v30 = objc_msgSend(v29, sel_codingSystem);
      if (v30)
      {
        id v31 = v30;
        uint64_t v32 = *(void **)(v0 + 64);
        sub_232F3A800(0, &qword_268757C68);
        id v33 = v32;
        id v34 = v31;
        LOBYTE(v31) = sub_23309BBF0();

        if (v31) {
          break;
        }
      }
    }
    id v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v39;
    *id v39 = v0;
    v39[1] = sub_232FDE1B8;
    uint64_t v40 = *(void *)(v0 + 32);
    v39[19] = v29;
    v39[20] = v40;
    id isUniquelyReferenced_nonNull_bridgeObject = sub_232FDEA8C;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    return MEMORY[0x270FA2498](isUniquelyReferenced_nonNull_bridgeObject, v7, v8);
  }
  unint64_t v2 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v2, sel_codings);
  unint64_t v4 = sub_23309B9A0();

  id v5 = v1;
  id isUniquelyReferenced_nonNull_bridgeObject = (id)swift_isUniquelyReferenced_nonNull_bridgeObject();
  id v41 = (id)v4;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v4 & 0x8000000000000000) != 0
    || (v4 & 0x4000000000000000) != 0)
  {
    sub_232FE483C(v4);
    unint64_t v4 = (unint64_t)isUniquelyReferenced_nonNull_bridgeObject;
    id v41 = isUniquelyReferenced_nonNull_bridgeObject;
  }
  unint64_t v9 = *(void *)(v0 + 88);
  if (v9 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_42:
    __break(1u);
    return MEMORY[0x270FA2498](isUniquelyReferenced_nonNull_bridgeObject, v7, v8);
  }
  unint64_t v10 = *(void **)(v0 + 96);
  unint64_t v11 = *(void **)(v0 + 64);
  uint64_t v12 = (v4 & 0xFFFFFFFFFFFFFF8) + 8 * v9;
  uint64_t v13 = *(void **)(v12 + 32);
  *(void *)(v12 + 32) = v5;

  sub_23309B9C0();
  id v14 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
  uint64_t v15 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v14, sel_initWithCodings_, v15, v41);

LABEL_31:
  uint64_t v37 = *(uint64_t (**)(id))(v0 + 8);
  return v37(v16);
}

id sub_232FDE6F4()
{
  sub_232F3A800(0, &qword_268757D30);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x263F094B0]);
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v1 = result;
  sub_232F3A800(0, (unint64_t *)&qword_268757560);
  char v2 = sub_23309BBF0();

  if ((v2 & 1) == 0)
  {
    sub_232F3A800(0, &qword_268757808);
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x263F0A028]);
    if (result)
    {
      unint64_t v4 = result;
      char v5 = sub_23309BBF0();

      if (v5)
      {
        sub_232FE5AB4(0, (unint64_t *)&qword_268757D40, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
        uint64_t v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_2330A4FA0;
        uint64_t v6 = self;
        *(void *)(v3 + 32) = objc_msgSend(v6, sel_CVXSystem);
        id v7 = objc_msgSend(v6, sel_SNOMEDCodeSystem);
LABEL_12:
        *(void *)(v3 + 40) = v7;
        goto LABEL_13;
      }
      sub_232F3A800(0, &qword_268757D38);
      id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x263F09518]);
      if (result)
      {
        uint64_t v8 = result;
        char v9 = sub_23309BBF0();

        if (v9)
        {
LABEL_11:
          sub_232FE5AB4(0, (unint64_t *)&qword_268757D40, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
          uint64_t v3 = swift_allocObject();
          *(_OWORD *)(v3 + 16) = xmmword_2330A4FA0;
          uint64_t v12 = self;
          *(void *)(v3 + 32) = objc_msgSend(v12, sel_LOINCCodeSystem);
          id v7 = objc_msgSend(v12, sel_SNOMEDCodeSystem);
          goto LABEL_12;
        }
        sub_232F3A800(0, (unint64_t *)&qword_2687576B0);
        id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x263F09500]);
        if (result)
        {
          unint64_t v10 = result;
          char v11 = sub_23309BBF0();

          if ((v11 & 1) == 0) {
            return (id)MEMORY[0x263F8EE78];
          }
          goto LABEL_11;
        }
LABEL_19:
        __break(1u);
        return result;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_232FE5AB4(0, (unint64_t *)&qword_268757D40, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2330A4FB0;
  *(void *)(v3 + 32) = objc_msgSend(self, sel_SNOMEDCodeSystem);
LABEL_13:
  sub_23309B9C0();
  return (id)v3;
}

uint64_t sub_232FDEA6C(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = v1;
  return MEMORY[0x270FA2498](sub_232FDEA8C, 0, 0);
}

uint64_t sub_232FDEA8C()
{
  uint64_t v36 = v0;
  id v1 = objc_msgSend(*(id *)(v0 + 152), sel_displayString);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_23309B710();
    unint64_t v5 = v4;

    swift_bridgeObjectRelease();
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      id v7 = *(void **)(v0 + 152);
      id v8 = v7;
LABEL_16:
      id v33 = *(uint64_t (**)(void *))(v0 + 8);
      return v33(v7);
    }
  }
  id v9 = objc_msgSend(*(id *)(v0 + 152), sel_code);
  if (!v9)
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    unint64_t v21 = *(void **)(v0 + 152);
    uint64_t v22 = sub_23309B4B0();
    __swift_project_value_buffer(v22, (uint64_t)qword_268770F68);
    id v23 = v21;
    uint64_t v24 = sub_23309B4A0();
    os_log_type_t v25 = sub_23309BB70();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = *(void **)(v0 + 152);
    if (v26)
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v35 = v29;
      *(_DWORD *)id v28 = 136315138;
      id v30 = (id)HKSensitiveLogItem();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v31 = sub_23309B770();
      *(void *)(v0 + 136) = sub_232F62B64(v31, v32, &v35);
      sub_23309BD10();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_232E63000, v24, v25, "CodeableConceptLookupService.codingWithAddedDisplayString() cannot look up display strings without a code for %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v29, -1, -1);
      MEMORY[0x237DB6EC0](v28, -1, -1);
    }
    else
    {
    }
    id v7 = 0;
    goto LABEL_16;
  }
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = sub_23309B710();
  uint64_t v15 = v14;

  *(void *)(v0 + 168) = v13;
  *(void *)(v0 + 176) = v15;
  id v16 = objc_msgSend(self, sel_selectionForNodesWithCoding_, v11);
  *(void *)(v0 + 184) = v16;
  uint64_t v17 = *(void *)(v12 + 16);
  uint64_t v18 = swift_task_alloc();
  *(void *)(v0 + 192) = v18;
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = v17;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v19;
  sub_232FE5AB4(0, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  void *v19 = v0;
  v19[1] = sub_232FDEE60;
  return MEMORY[0x270FA2318](v0 + 112, 0, 0, 0xD000000000000013, 0x80000002330B5B20, sub_232FE5CA8, v18, v20);
}

uint64_t sub_232FDEE60()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FDEF78, 0, 0);
}

uint64_t sub_232FDEF78()
{
  uint64_t v107 = v0;
  uint64_t v1 = (void *)v0;

  uint64_t v2 = &off_264BDA000;
  if (*(void *)(v0 + 120))
  {
    uint64_t v3 = *(void **)(v0 + 152);
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(v3, sel_codingSystem);
    id v5 = objc_msgSend(v3, sel_codingVersion);
    if (v5)
    {
      uint64_t v6 = v5;
      sub_23309B710();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = 0;
    }
    id v23 = objc_msgSend(*(id *)(v0 + 152), sel_code);
    if (v23)
    {
      uint64_t v24 = v23;
      sub_23309B710();
      uint64_t v26 = v25;

      if (v8) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v26 = 0;
      if (v8)
      {
LABEL_11:
        uint64_t v27 = (void *)sub_23309B6E0();
        swift_bridgeObjectRelease();
        if (v26)
        {
LABEL_12:
          id v28 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
LABEL_16:
          uint64_t v29 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          id v30 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, v27, v28, v29);

          goto LABEL_97;
        }
LABEL_15:
        id v28 = 0;
        goto LABEL_16;
      }
    }
    uint64_t v27 = 0;
    if (v26) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  unint64_t v10 = (id *)(v0 + 152);
  id v9 = *(void **)(v0 + 152);
  uint64_t v11 = sub_23309B4B0();
  __swift_project_value_buffer(v11, (uint64_t)qword_268770F68);
  id v12 = v9;
  uint64_t v13 = sub_23309B4A0();
  os_log_type_t v14 = sub_23309BB70();
  BOOL v15 = os_log_type_enabled(v13, v14);
  id v16 = *(void **)(v0 + 152);
  if (v15)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v106 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    id v19 = (id)HKSensitiveLogItem();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v20 = sub_23309B770();
    *(void *)(v0 + 144) = sub_232F62B64(v20, v21, &v106);
    sub_23309BD10();
    uint64_t v1 = (void *)v0;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v13, v14, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string for %s in ontology, falling back to hardcoding", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v18;
    uint64_t v2 = &off_264BDA000;
    MEMORY[0x237DB6EC0](v22, -1, -1);
    MEMORY[0x237DB6EC0](v17, -1, -1);
  }
  else
  {
  }
  id v31 = [*v10 (SEL)v2[133]];
  unint64_t v32 = self;
  id v33 = objc_msgSend(v32, sel_CVXSystem);
  id v34 = v33;
  if (v31)
  {
    if (!v33)
    {

      goto LABEL_34;
    }
    sub_232F3A800(0, &qword_268757C68);
    id v35 = v31;
    char v36 = sub_23309BBF0();

    if ((v36 & 1) == 0)
    {
LABEL_34:
      id v49 = [*v10 (SEL)v2[133]];
      id v50 = objc_msgSend(v32, sel_LOINCCodeSystem);
      unint64_t v51 = v50;
      if (v49)
      {
        if (!v50)
        {

          goto LABEL_50;
        }
        sub_232F3A800(0, &qword_268757C68);
        id v52 = v49;
        char v53 = sub_23309BBF0();

        if ((v53 & 1) == 0)
        {
LABEL_50:
          id v65 = [*v10 (SEL)v2[133]];
          id v66 = objc_msgSend(v32, sel_SNOMEDCodeSystem);
          uint64_t v67 = v66;
          if (v65)
          {
            if (v66)
            {
              sub_232F3A800(0, &qword_268757C68);
              id v68 = v65;
              char v69 = sub_23309BBF0();

              if ((v69 & 1) == 0) {
                goto LABEL_65;
              }
LABEL_56:
              if (qword_2687563B8 != -1) {
                swift_once();
              }
              if (!*((void *)off_268757CA0 + 2)) {
                goto LABEL_65;
              }
              sub_232F393E0(v1[21], v1[22]);
              if ((v70 & 1) == 0) {
                goto LABEL_65;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v71 = sub_23309B4A0();
              os_log_type_t v72 = sub_23309BB90();
              if (os_log_type_enabled(v71, v72))
              {
                v73 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v73 = 0;
                _os_log_impl(&dword_232E63000, v71, v72, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: SNOMED", v73, 2u);
                MEMORY[0x237DB6EC0](v73, -1, -1);
              }
              id v74 = *v10;

              id v44 = [v74 (SEL)v2[133]];
              id v75 = objc_msgSend(v74, sel_codingVersion);
              if (v75)
              {
                unsigned int v76 = v75;
                sub_23309B710();
                uint64_t v78 = v77;
              }
              else
              {
                uint64_t v78 = 0;
              }
              id v99 = objc_msgSend(*v10, sel_code);
              if (v99)
              {
                uint64_t v100 = v99;
                sub_23309B710();
                uint64_t v102 = v101;
              }
              else
              {
                uint64_t v102 = 0;
              }
              if (v78)
              {
                long long v93 = (void *)sub_23309B6E0();
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v93 = 0;
              }
              if (!v102)
              {
                long long v94 = 0;
                goto LABEL_96;
              }
              goto LABEL_85;
            }
          }
          else
          {
            if (!v66) {
              goto LABEL_56;
            }
          }
LABEL_65:
          swift_bridgeObjectRelease();
          id v79 = *v10;
          uint64_t v80 = sub_23309B4A0();
          os_log_type_t v81 = sub_23309BB70();
          BOOL v82 = os_log_type_enabled(v80, v81);
          id v83 = *v10;
          if (v82)
          {
            uint64_t v84 = (uint8_t *)swift_slowAlloc();
            uint64_t v85 = swift_slowAlloc();
            uint64_t v106 = v85;
            *(_DWORD *)uint64_t v84 = 136315138;
            id v86 = (id)HKSensitiveLogItem();
            sub_23309BDB0();
            swift_unknownObjectRelease();
            uint64_t v87 = sub_23309B770();
            v1[16] = sub_232F62B64(v87, v88, &v106);
            sub_23309BD10();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_232E63000, v80, v81, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string for %s", v84, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x237DB6EC0](v85, -1, -1);
            MEMORY[0x237DB6EC0](v84, -1, -1);
          }
          else
          {
          }
          id v30 = 0;
          goto LABEL_97;
        }
      }
      else if (v50)
      {

        goto LABEL_50;
      }
      if (qword_2687563B0 != -1) {
        swift_once();
      }
      if (*((void *)off_268757C98 + 2))
      {
        uint64_t v54 = v1[21];
        uint64_t v55 = v1[22];
        swift_bridgeObjectRetain();
        sub_232F393E0(v54, v55);
        if (v56)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          uint64_t v57 = sub_23309B4A0();
          os_log_type_t v58 = sub_23309BB90();
          if (os_log_type_enabled(v57, v58))
          {
            unint64_t v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v59 = 0;
            _os_log_impl(&dword_232E63000, v57, v58, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: LOINC", v59, 2u);
            MEMORY[0x237DB6EC0](v59, -1, -1);
          }
          id v60 = *v10;

          id v44 = [v60 (SEL)v2[133]];
          id v61 = objc_msgSend(v60, sel_codingVersion);
          if (v61)
          {
            uint64_t v62 = v61;
            sub_23309B710();
            uint64_t v64 = v63;
          }
          else
          {
            uint64_t v64 = 0;
          }
          id v95 = objc_msgSend(*v10, sel_code);
          if (v95)
          {
            uint64_t v96 = v95;
            sub_23309B710();
            uint64_t v98 = v97;
          }
          else
          {
            uint64_t v98 = 0;
          }
          if (v64)
          {
            long long v93 = (void *)sub_23309B6E0();
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v93 = 0;
          }
          if (!v98)
          {
            long long v94 = 0;
            goto LABEL_96;
          }
          goto LABEL_85;
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_50;
    }
  }
  else if (v33)
  {

    goto LABEL_34;
  }
  if (qword_2687563A8 != -1) {
    swift_once();
  }
  if (!*((void *)off_268757C90 + 2)) {
    goto LABEL_34;
  }
  uint64_t v37 = v1[21];
  uint64_t v38 = v1[22];
  swift_bridgeObjectRetain();
  sub_232F393E0(v37, v38);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  uint64_t v40 = sub_23309B4A0();
  os_log_type_t v41 = sub_23309BB90();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_232E63000, v40, v41, "CodeableConceptLookupService.codingWithAddedDisplayString() unable to find display string in ontology, but found in hardcoded data. System: CVX", v42, 2u);
    MEMORY[0x237DB6EC0](v42, -1, -1);
  }
  id v43 = *v10;

  id v44 = [v43 (SEL)v2[133]];
  id v45 = objc_msgSend(v43, sel_codingVersion);
  if (v45)
  {
    uint64_t v46 = v45;
    sub_23309B710();
    uint64_t v48 = v47;
  }
  else
  {
    uint64_t v48 = 0;
  }
  id v89 = objc_msgSend(*v10, sel_code);
  if (v89)
  {
    long long v90 = v89;
    sub_23309B710();
    uint64_t v92 = v91;

    if (v48) {
      goto LABEL_72;
    }
LABEL_75:
    long long v93 = 0;
    if (v92) {
      goto LABEL_85;
    }
    goto LABEL_76;
  }
  uint64_t v92 = 0;
  if (!v48) {
    goto LABEL_75;
  }
LABEL_72:
  long long v93 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  if (v92)
  {
LABEL_85:
    long long v94 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
LABEL_76:
  long long v94 = 0;
LABEL_96:
  long long v103 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v30 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v44, v93, v94, v103);

LABEL_97:
  uint64_t v104 = (uint64_t (*)(id))v1[1];
  return v104(v30);
}

void sub_232FDFCA4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_232FE51E4();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  id v12 = objc_allocWithZone(MEMORY[0x263F0A200]);
  aBlock[4] = sub_232FE533C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_232FE4780;
  aBlock[3] = &block_descriptor;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = a3;
  id v15 = objc_msgSend(v12, sel_initWithConceptSelection_resultsHandler_, a2, v13);
  _Block_release(v13);
  swift_release();
  objc_msgSend(v14, sel_executeQuery_, v15);
}

void sub_232FDFE88(uint64_t a1, void *a2, int a3, void *a4, id a5)
{
  objc_msgSend(a5, sel_stopQuery_, a1);
  if (a4)
  {
    id v7 = a4;
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_23309B4B0();
    __swift_project_value_buffer(v8, (uint64_t)qword_268770F68);
    id v9 = a4;
    id v10 = a4;
    uint64_t v11 = sub_23309B4A0();
    os_log_type_t v12 = sub_23309BB80();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v23 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      id v15 = a4;
      id v16 = a4;
      sub_232F3DAA0();
      sub_23309C320();
      id v17 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v18 = sub_23309B770();
      unint64_t v20 = v19;

      sub_232F62B64(v18, v20, &v23);
      sub_23309BD10();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_232E63000, v11, v12, "CodeableConceptLookupService.cvxDisplayString(for:) failed: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v14, -1, -1);
      MEMORY[0x237DB6EC0](v13, -1, -1);
    }
    else
    {
    }
    sub_232FE51E4();
    sub_23309BA40();
  }
  else
  {
    if (a2)
    {
      id v21 = objc_msgSend(a2, sel_localizedPreferredName);
      if (v21)
      {
        uint64_t v22 = v21;
        sub_23309B710();
      }
    }
    sub_232FE51E4();
    sub_23309BA40();
  }
}

uint64_t sub_232FE0168(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 232) = a6;
  *(void *)(v7 + 240) = v6;
  *(void *)(v7 + 216) = a4;
  *(void *)(v7 + 224) = a5;
  *(void *)(v7 + 200) = a2;
  *(void *)(v7 + 208) = a3;
  *(unsigned char *)(v7 + 321) = a1;
  uint64_t v12 = swift_task_alloc();
  *(void *)(v7 + 248) = v12;
  *(void *)uint64_t v12 = v7;
  *(void *)(v12 + 8) = sub_232FE0248;
  *(void *)(v12 + 48) = a6;
  *(void *)(v12 + 56) = v6;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(unsigned char *)(v12 + 168) = a1;
  return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
}

uint64_t sub_232FE0248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = (void *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[32] = a1;
  v5[33] = a2;
  v5[34] = a3;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE0358, 0, 0);
}

uint64_t sub_232FE0358()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    *(void *)(v0 + 280) = *(void *)(v0 + 48);
    *(void *)(v0 + 176) = MEMORY[0x263F8EE78];
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = swift_task_alloc();
      *(void *)(v0 + 288) = v3;
      *(void *)uint64_t v3 = v0;
      *(void *)(v3 + 8) = sub_232FE0A44;
      uint64_t v4 = *(void *)(v0 + 240);
      uint64_t v5 = *(void *)(v0 + 216);
      *(void *)(v3 + 48) = *(void *)(v0 + 232);
      *(void *)(v3 + 56) = v4;
      *(void *)(v3 + 32) = v5;
      *(void *)(v3 + 40) = v2;
      *(unsigned char *)(v3 + 168) = 0;
      return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
    }
    id v19 = sub_232FE53F0(*(void *)(v0 + 256), v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v20 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v21 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v22 = self;
    id v23 = objc_msgSend(v22, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v19, 0, v20, v21);

    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_23309B9D0();
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 208);
    char v26 = *(unsigned char *)(v0 + 321);
    sub_23309B9E0();
    sub_23309B9C0();
    id v27 = sub_232FE556C(v26, v25, v24);
    if (v27)
    {
      id v28 = v27;
      id v29 = objc_msgSend(self, sel_textSystem);
      swift_bridgeObjectRetain();
      id v30 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v31 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v32 = objc_msgSend(v22, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v29, 0, v30, v31);

      MEMORY[0x237DB59C0]();
      if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_23309B9D0();
      sub_23309B9E0();
      sub_23309B9C0();
      id v33 = v28;
      MEMORY[0x237DB59C0]();
      if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        sub_23309B9D0();
      sub_23309B9E0();
      sub_23309B9C0();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    id v37 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
    sub_232F3A800(0, (unint64_t *)&qword_268757138);
    id v35 = (id)sub_23309B990();
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v37, sel_initWithCodings_, v35);
  }
  else
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_23309B4B0();
    __swift_project_value_buffer(v6, (uint64_t)qword_268770F68);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_23309B4A0();
    os_log_type_t v8 = sub_23309BB60();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 208);
    if (v9)
    {
      uint64_t v11 = *(void *)(v0 + 200);
      char v41 = *(unsigned char *)(v0 + 321);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = v42;
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v0 + 160) = v11;
      *(void *)(v0 + 168) = v10;
      swift_bridgeObjectRetain();
      sub_23309C320();
      id v13 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v14 = sub_23309B770();
      *(void *)(v0 + 184) = sub_232F62B64(v14, v15, &v43);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      *(unsigned char *)(v0 + 320) = v41;
      sub_23309C320();
      id v16 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v17 = sub_23309B770();
      *(void *)(v0 + 192) = sub_232F62B64(v17, v18, &v43);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v7, v8, "medicalCodingForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v42, -1, -1);
      MEMORY[0x237DB6EC0](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRetain();
    id v34 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v35 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, 0, 0, v34, 0);

    id v36 = objc_msgSend(self, sel_collectionWithCoding_, v35);
  }
  id v38 = v36;

  char v39 = *(uint64_t (**)(id))(v0 + 8);
  return v39(v38);
}

uint64_t sub_232FE0A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)*v4;
  v5[7] = v4;
  v5[8] = a1;
  v5[9] = a2;
  v5[10] = a3;
  v5[11] = a4;
  v5[37] = a1;
  v5[38] = a2;
  v5[39] = a3;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE0B54, 0, 0);
}

uint64_t sub_232FE0B54()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23309B880();
    sub_23309B880();
    id v2 = objc_msgSend(self, sel_textSystem);
    uint64_t v3 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v30 = self;
    id v4 = objc_msgSend(v30, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v2, 0, 0, v3);

    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_23309B9D0();
    uint64_t v5 = *(void *)(v0 + 296);
    sub_23309B9E0();
    sub_23309B9C0();
    id v6 = sub_232FE53F0(v5, v1);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    os_log_type_t v8 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v30, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v6, 0, v7, v8);

    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_23309B9D0();
    sub_23309B9E0();
    sub_23309B9C0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v10 = sub_232FE53F0(*(void *)(v0 + 256), *(void *)(v0 + 264));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v13 = self;
  id v14 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v10, 0, v11, v12);

  MEMORY[0x237DB59C0]();
  if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    sub_23309B9D0();
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 208);
  char v17 = *(unsigned char *)(v0 + 321);
  sub_23309B9E0();
  sub_23309B9C0();
  id v18 = sub_232FE556C(v17, v16, v15);
  if (v18)
  {
    id v19 = v18;
    id v20 = objc_msgSend(self, sel_textSystem);
    swift_bridgeObjectRetain();
    id v21 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v22 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v23 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v20, 0, v21, v22);

    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_23309B9D0();
    sub_23309B9E0();
    sub_23309B9C0();
    id v24 = v19;
    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_23309B9D0();
    sub_23309B9E0();
    sub_23309B9C0();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v25 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
  sub_232F3A800(0, (unint64_t *)&qword_268757138);
  char v26 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v25, sel_initWithCodings_, v26);

  id v28 = *(uint64_t (**)(id))(v0 + 8);
  return v28(v27);
}

uint64_t sub_232FE1080(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 48) = a4;
  *(void *)(v5 + 56) = v4;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  *(unsigned char *)(v5 + 168) = a1;
  return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
}

uint64_t sub_232FE10A8()
{
  if ((*(unsigned char *)(v0 + 48) & 4) != 0)
  {
    uint64_t v21 = *(void *)(v0 + 32);
    uint64_t v22 = *(void *)(v0 + 40);
    char v23 = *(unsigned char *)(v0 + 168);
  }
  else
  {
    uint64_t v1 = *(char *)(v0 + 168);
    uint64_t v2 = (uint64_t)*(&off_264BD9D50 + v1);
    *(void *)(v0 + 64) = v2;
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 72) = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 56);
      *(void *)(v0 + 80) = self;
      *(void *)(v0 + 88) = self;
      *(void *)(v0 + 96) = *(void *)(v4 + 16);
      *(void *)(v0 + 104) = 0;
      uint64_t v5 = *(void *)(v0 + 64);
      uint64_t v6 = *(void *)(v5 + 32);
      *(void *)(v0 + 112) = v6;
      uint64_t v7 = *(void *)(v5 + 40);
      *(void *)(v0 + 120) = v7;
      swift_bridgeObjectRetain();
      if (v6 == 0xD000000000000016 && v7 == 0x80000002330B2CE0 || (sub_23309C220() & 1) != 0)
      {
        os_log_type_t v8 = self;
        swift_bridgeObjectRetain();
        id v9 = objc_msgSend(v8, sel_SNOMEDCodeSystem);
      }
      else
      {
        if ((v6 != 0xD000000000000010 || v7 != 0x80000002330B2D40) && (sub_23309C220() & 1) == 0)
        {
          id v27 = objc_allocWithZone(MEMORY[0x263F0A4B0]);
          swift_bridgeObjectRetain_n();
          id v28 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          id v10 = objc_msgSend(v27, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v28, 0, 0, 1, 0, 0);

          goto LABEL_8;
        }
        char v26 = self;
        swift_bridgeObjectRetain();
        id v9 = objc_msgSend(v26, sel_LOINCCodeSystem);
      }
      id v10 = v9;
LABEL_8:
      *(void *)(v0 + 128) = v10;
      uint64_t v11 = *(void **)(v0 + 88);
      uint64_t v12 = *(void *)(v0 + 96);
      id v13 = *(void **)(v0 + 80);
      id v14 = v10;
      swift_bridgeObjectRetain();
      uint64_t v15 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v16 = objc_msgSend(v13, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v14, 0, v15, 0);
      *(void *)(v0 + 136) = v16;

      id v17 = objc_msgSend(v11, sel_selectionForNodesWithCoding_, v16);
      *(void *)(v0 + 144) = v17;
      uint64_t v18 = swift_task_alloc();
      *(void *)(v0 + 152) = v18;
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v12;
      id v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v19;
      sub_232FE5AB4(0, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
      void *v19 = v0;
      v19[1] = sub_232FE1488;
      return MEMORY[0x270FA2318](v0 + 16, 0, 0, 0xD000000000000013, 0x80000002330B5B20, sub_232FE4830, v18, v20);
    }
    char v23 = v1;
    uint64_t v21 = *(void *)(v0 + 32);
    uint64_t v22 = *(void *)(v0 + 40);
  }
  uint64_t v24 = sub_232FE48B8(v23, v21, v22);
  id v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v25(v24);
}

uint64_t sub_232FE1488()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE15A0, 0, 0);
}

uint64_t sub_232FE15A0()
{
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 128);

  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);

  uint64_t v5 = *(void *)(v0 + 120);
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 112);
LABEL_5:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
    return v12(v6, v5, v3, v4);
  }
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease();
  if (v7 + 1 == v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_232FE48B8(*(unsigned char *)(v0 + 168), *(void *)(v0 + 32), *(void *)(v0 + 40));
    uint64_t v5 = v9;
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)(v0 + 104) + 1;
  *(void *)(v0 + 104) = v14;
  uint64_t v15 = *(void *)(v0 + 64) + 16 * v14;
  uint64_t v16 = *(void *)(v15 + 32);
  *(void *)(v0 + 112) = v16;
  uint64_t v17 = *(void *)(v15 + 40);
  *(void *)(v0 + 120) = v17;
  if (v16 == 0xD000000000000016 && v17 == 0x80000002330B2CE0 || (sub_23309C220() & 1) != 0)
  {
    uint64_t v18 = self;
    swift_bridgeObjectRetain();
    id v19 = objc_msgSend(v18, sel_SNOMEDCodeSystem);
  }
  else
  {
    if ((v16 != 0xD000000000000010 || v17 != 0x80000002330B2D40) && (sub_23309C220() & 1) == 0)
    {
      id v32 = objc_allocWithZone(MEMORY[0x263F0A4B0]);
      swift_bridgeObjectRetain_n();
      id v33 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v20 = objc_msgSend(v32, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v33, 0, 0, 1, 0, 0);

      goto LABEL_13;
    }
    uint64_t v31 = self;
    swift_bridgeObjectRetain();
    id v19 = objc_msgSend(v31, sel_LOINCCodeSystem);
  }
  id v20 = v19;
LABEL_13:
  *(void *)(v0 + 128) = v20;
  uint64_t v21 = *(void **)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  char v23 = *(void **)(v0 + 80);
  id v24 = v20;
  swift_bridgeObjectRetain();
  id v25 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v23, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v24, 0, v25, 0);
  *(void *)(v0 + 136) = v26;

  id v27 = objc_msgSend(v21, sel_selectionForNodesWithCoding_, v26);
  *(void *)(v0 + 144) = v27;
  uint64_t v28 = swift_task_alloc();
  *(void *)(v0 + 152) = v28;
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v22;
  id v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v29;
  sub_232FE5AB4(0, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  *id v29 = v0;
  v29[1] = sub_232FE1488;
  return MEMORY[0x270FA2318](v0 + 16, 0, 0, 0xD000000000000013, 0x80000002330B5B20, sub_232FE4830, v28, v30);
}

uint64_t sub_232FE1994(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 192) = a7;
  *(void *)(v8 + 200) = v7;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 160) = a3;
  *(void *)(v8 + 168) = a4;
  *(unsigned char *)(v8 + 341) = a2;
  *(void *)(v8 + 152) = a1;
  uint64_t v13 = type metadata accessor for Coding();
  *(void *)(v8 + 208) = v13;
  *(void *)(v8 + 216) = *(void *)(v13 - 8);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v14 = swift_task_alloc();
  *(void *)(v8 + 248) = v14;
  *(void *)uint64_t v14 = v8;
  *(void *)(v14 + 8) = sub_232FE1AF0;
  *(void *)(v14 + 48) = a7;
  *(void *)(v14 + 56) = v7;
  *(void *)(v14 + 32) = a3;
  *(void *)(v14 + 40) = a4;
  *(unsigned char *)(v14 + 168) = a2;
  return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
}

uint64_t sub_232FE1AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[32] = a2;
  v5[33] = a3;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE1BFC, 0, 0);
}

uint64_t sub_232FE1BFC()
{
  uint64_t v53 = v0;
  if (*(void *)(v0 + 256))
  {
    uint64_t v1 = *(void *)(v0 + 264);
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v4 = *(int **)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 168);
    *(void *)(v0 + 272) = v2;
    sub_23309AF50();
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)(v3 + v4[5]);
    *uint64_t v7 = v6;
    v7[1] = v5;
    uint64_t v8 = (void *)(v3 + v4[6]);
    *uint64_t v8 = v1;
    v8[1] = v2;
    uint64_t v9 = (void *)(v3 + v4[7]);
    *uint64_t v9 = 0;
    v9[1] = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_232F3D600(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v12 = *(void *)(v10 + 16);
    unint64_t v11 = *(void *)(v10 + 24);
    if (v12 >= v11 >> 1) {
      unint64_t v10 = sub_232F3D600(v11 > 1, v12 + 1, 1, v10);
    }
    *(void *)(v0 + 280) = v10;
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 184);
    *(void *)(v10 + 16) = v12 + 1;
    int v16 = *(_DWORD *)(v14 + 80);
    *(_DWORD *)(v0 + 336) = v16;
    uint64_t v17 = *(void *)(v14 + 72);
    *(void *)(v0 + 288) = v17;
    sub_232F65DAC(v13, v10 + ((v16 + 32) & ~(unint64_t)v16) + v17 * v12);
    if (v15)
    {
      uint64_t v18 = *(void *)(v0 + 184);
      swift_bridgeObjectRetain();
      uint64_t v19 = swift_task_alloc();
      *(void *)(v0 + 296) = v19;
      *(void *)uint64_t v19 = v0;
      *(void *)(v19 + 8) = sub_232FE2198;
      uint64_t v20 = *(void *)(v0 + 200);
      uint64_t v21 = *(void *)(v0 + 176);
      *(void *)(v19 + 48) = *(void *)(v0 + 192);
      *(void *)(v19 + 56) = v20;
      *(void *)(v19 + 32) = v21;
      *(void *)(v19 + 40) = v18;
      *(unsigned char *)(v19 + 168) = 0;
      return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
    }
    swift_bridgeObjectRelease();
    id v35 = *(void **)(v0 + 152);
    *id v35 = 0;
    v35[1] = 0;
    v35[2] = v10;
  }
  else
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_23309B4B0();
    __swift_project_value_buffer(v22, (uint64_t)qword_268770F68);
    swift_bridgeObjectRetain_n();
    char v23 = sub_23309B4A0();
    os_log_type_t v24 = sub_23309BB60();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 168);
    if (v25)
    {
      uint64_t v27 = *(void *)(v0 + 160);
      char v50 = *(unsigned char *)(v0 + 341);
      uint64_t v28 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v52 = v51;
      *(_DWORD *)uint64_t v28 = 136315394;
      *(void *)(v0 + 120) = v27;
      *(void *)(v0 + 128) = v26;
      swift_bridgeObjectRetain();
      sub_23309C320();
      id v29 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v30 = sub_23309B770();
      *(void *)(v0 + 136) = sub_232F62B64(v30, v31, &v52);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      *(unsigned char *)(v0 + 340) = v50;
      sub_23309C320();
      id v32 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v33 = sub_23309B770();
      *(void *)(v0 + 144) = sub_232F62B64(v33, v34, &v52);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v23, v24, "codeableConceptForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v51, -1, -1);
      MEMORY[0x237DB6EC0](v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v37 = *(int **)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v39 = *(void *)(v0 + 160);
    uint64_t v38 = *(void *)(v0 + 168);
    uint64_t v40 = *(void **)(v0 + 152);
    sub_232FE50C4(0, &qword_2687570A0, (void (*)(uint64_t))type metadata accessor for Coding);
    unint64_t v41 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_2330A1880;
    unint64_t v43 = v42 + v41;
    uint64_t v44 = sub_23309AF80();
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    uint64_t v45 = (void *)(v43 + v37[5]);
    *uint64_t v45 = v39;
    v45[1] = v38;
    uint64_t v46 = (void *)(v43 + v37[6]);
    void *v46 = 0;
    v46[1] = 0;
    uint64_t v47 = (void *)(v43 + v37[7]);
    void *v47 = 0;
    v47[1] = 0;
    *uint64_t v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
  return v48();
}

uint64_t sub_232FE2198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)*v4;
  v5[38] = a1;
  v5[39] = a2;
  v5[40] = a3;
  v5[41] = a4;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE229C, 0, 0);
}

uint64_t sub_232FE229C()
{
  if (*(void *)(v0 + 312))
  {
    uint64_t v1 = *(void *)(v0 + 280);
    uint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(int **)(v0 + 208);
    uint64_t v32 = *(void *)(v0 + 320);
    uint64_t v33 = *(void *)(v0 + 328);
    swift_bridgeObjectRetain();
    sub_23309B880();
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B710();
    sub_23309AF50();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)(v2 + v3[5]);
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v5 = (void *)(v2 + v3[6]);
    *uint64_t v5 = v32;
    v5[1] = v33;
    uint64_t v6 = (void *)(v2 + v3[7]);
    *uint64_t v6 = 0;
    v6[1] = 0;
    unint64_t v8 = *(void *)(v1 + 16);
    unint64_t v7 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    unint64_t v9 = *(void *)(v0 + 280);
    if (v8 >= v7 >> 1) {
      unint64_t v9 = sub_232F3D600(v7 > 1, v8 + 1, 1, *(void *)(v0 + 280));
    }
    uint64_t v30 = *(void *)(v0 + 320);
    uint64_t v31 = *(void *)(v0 + 328);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = *(unsigned __int8 *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v14 = *(int **)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 184);
    *(void *)(v9 + 16) = v8 + 1;
    sub_232F65DAC(v12, v9 + ((v11 + 32) & ~v11) + v10 * v8);
    sub_23309AF50();
    swift_bridgeObjectRelease();
    uint64_t v17 = (void *)(v13 + v14[5]);
    *uint64_t v17 = v16;
    v17[1] = v15;
    uint64_t v18 = (void *)(v13 + v14[6]);
    *uint64_t v18 = v30;
    v18[1] = v31;
    uint64_t v19 = (void *)(v13 + v14[7]);
    void *v19 = 0;
    v19[1] = 0;
    unint64_t v21 = *(void *)(v9 + 16);
    unint64_t v20 = *(void *)(v9 + 24);
    if (v21 >= v20 >> 1) {
      unint64_t v9 = sub_232F3D600(v20 > 1, v21 + 1, 1, v9);
    }
    uint64_t v22 = *(void *)(v0 + 288);
    uint64_t v23 = *(unsigned __int8 *)(v0 + 336);
    uint64_t v24 = *(void *)(v0 + 224);
    *(void *)(v9 + 16) = v21 + 1;
    sub_232F65DAC(v24, v9 + ((v23 + 32) & ~v23) + v22 * v21);
    uint64_t v26 = v33;
    uint64_t v25 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v9 = *(void *)(v0 + 280);
  }
  uint64_t v27 = *(void **)(v0 + 152);
  void *v27 = v25;
  v27[1] = v26;
  v27[2] = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_232FE2518(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 160) = a3;
  *(void *)(v6 + 168) = a4;
  *(unsigned char *)(v6 + 193) = a2;
  *(void *)(v6 + 152) = a1;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v6 + 176) = v11;
  *(void *)uint64_t v11 = v6;
  *(void *)(v11 + 8) = sub_232FE25F4;
  *(void *)(v11 + 48) = a5;
  *(void *)(v11 + 56) = v5;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  *(unsigned char *)(v11 + 168) = a2;
  return MEMORY[0x270FA2498](sub_232FE10A8, 0, 0);
}

uint64_t sub_232FE25F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[23] = a2;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE2700, 0, 0);
}

uint64_t sub_232FE2700()
{
  uint64_t v31 = v0;
  if (*(void *)(v0 + 184))
  {
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = v5 + *(int *)(type metadata accessor for Reference() + 24);
    uint64_t v7 = type metadata accessor for Identifier();
    sub_23309AF50();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 24) = xmmword_2330A4FC0;
    unint64_t v8 = (void *)(v6 + *(int *)(v7 + 28));
    *unint64_t v8 = v4;
    v8[1] = v3;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  }
  else
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_23309B4B0();
    __swift_project_value_buffer(v9, (uint64_t)qword_268770F68);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = sub_23309B4A0();
    os_log_type_t v11 = sub_23309BB60();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 168);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 160);
      char v27 = *(unsigned char *)(v0 + 193);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v30 = v28;
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)(v0 + 120) = v14;
      *(void *)(v0 + 128) = v13;
      swift_bridgeObjectRetain();
      sub_23309C320();
      id v16 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v17 = sub_23309B770();
      *(void *)(v0 + 136) = sub_232F62B64(v17, v18, &v30);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      *(unsigned char *)(v0 + 192) = v27;
      sub_23309C320();
      id v19 = (id)HKSensitiveLogItem();
      swift_unknownObjectRelease();
      sub_23309BDB0();
      swift_unknownObjectRelease();
      uint64_t v20 = sub_23309B770();
      *(void *)(v0 + 144) = sub_232F62B64(v20, v21, &v30);
      sub_23309BD10();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v10, v11, "referenceForEUDCC(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v28, -1, -1);
      MEMORY[0x237DB6EC0](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v1 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v23 = v22 + *(int *)(type metadata accessor for Reference() + 24);
    uint64_t v24 = type metadata accessor for Identifier();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
    uint64_t v2 = *(void *)(v0 + 160);
  }
  uint64_t v25 = *(void **)(v0 + 152);
  *uint64_t v25 = v2;
  v25[1] = v1;
  v25[2] = 0;
  v25[3] = 0;
  id v29 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  return v29();
}

uint64_t sub_232FE2B10()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CodeableConceptLookupService()
{
  return self;
}

void *sub_232FE2B6C()
{
  id result = (void *)sub_232F37BB4((uint64_t)&unk_26E69DD00);
  off_268757C90 = result;
  return result;
}

void *sub_232FE2B94()
{
  id result = (void *)sub_232F37BB4((uint64_t)&unk_26E69E220);
  off_268757C98 = result;
  return result;
}

void *sub_232FE2BBC()
{
  id result = (void *)sub_232F37BB4((uint64_t)&unk_26E69F740);
  off_268757CA0 = result;
  return result;
}

unint64_t sub_232FE2BE4(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0x65545F4343445545;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232FE2CD0(char *a1, char *a2)
{
  return sub_233034E20(*a1, *a2);
}

uint64_t sub_232FE2CDC()
{
  return sub_233036E2C();
}

uint64_t sub_232FE2CE8()
{
  return sub_233036D0C();
}

uint64_t sub_232FE2CF0()
{
  return sub_233036E2C();
}

uint64_t sub_232FE2CF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232FE5C5C();
  *a1 = result;
  return result;
}

unint64_t sub_232FE2D28@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_232FE2BE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void *sub_232FE2D54()
{
  unint64_t result = (void *)sub_232F37BB4((uint64_t)&unk_26E6A4600);
  off_268757CA8 = result;
  return result;
}

void *sub_232FE2D7C()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = 0x3030393335303438;
  *(void *)(inited + 40) = 0xE900000000000036;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A0820);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CB0 = result;
  return result;
}

void *sub_232FE2E18()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2330A4FD0;
  *(void *)(v0 + 32) = 3682355;
  *(void *)(v0 + 40) = 0xE300000000000000;
  *(void *)(v0 + 48) = sub_232F37BB4((uint64_t)&unk_26E6A0880);
  *(void *)(v0 + 56) = 3421235;
  *(void *)(v0 + 64) = 0xE300000000000000;
  *(void *)(v0 + 72) = sub_232F37BB4((uint64_t)&unk_26E6A08E0);
  *(void *)(v0 + 80) = 3486771;
  *(void *)(v0 + 88) = 0xE300000000000000;
  *(void *)(v0 + 96) = sub_232F37BB4((uint64_t)&unk_26E6A0940);
  *(void *)(v0 + 104) = 3683895;
  *(void *)(v0 + 112) = 0xE300000000000000;
  *(void *)(v0 + 120) = sub_232F37BB4((uint64_t)&unk_26E6A09A0);
  *(void *)(v0 + 128) = 892743729;
  *(void *)(v0 + 136) = 0xE400000000000000;
  *(void *)(v0 + 144) = sub_232F37BB4((uint64_t)&unk_26E6A0A00);
  *(void *)(v0 + 152) = 926494769;
  *(void *)(v0 + 160) = 0xE400000000000000;
  *(void *)(v0 + 168) = sub_232F37BB4((uint64_t)&unk_26E6A0A60);
  *(void *)(v0 + 176) = 875639089;
  *(void *)(v0 + 184) = 0xE400000000000000;
  *(void *)(v0 + 192) = sub_232F37BB4((uint64_t)&unk_26E6A0AC0);
  *(void *)(v0 + 200) = 875835697;
  *(void *)(v0 + 208) = 0xE400000000000000;
  *(void *)(v0 + 216) = sub_232F37BB4((uint64_t)&unk_26E6A0B20);
  *(void *)(v0 + 224) = 842412337;
  *(void *)(v0 + 232) = 0xE400000000000000;
  *(void *)(v0 + 240) = sub_232F37BB4((uint64_t)&unk_26E6A0B80);
  *(void *)(v0 + 248) = 859255089;
  *(void *)(v0 + 256) = 0xE400000000000000;
  *(void *)(v0 + 264) = sub_232F37BB4((uint64_t)&unk_26E6A0BE0);
  *(void *)(v0 + 272) = 808988977;
  *(void *)(v0 + 280) = 0xE400000000000000;
  *(void *)(v0 + 288) = sub_232F37BB4((uint64_t)&unk_26E6A0C40);
  *(void *)(v0 + 296) = 809054513;
  *(void *)(v0 + 304) = 0xE400000000000000;
  *(void *)(v0 + 312) = sub_232F37BB4((uint64_t)&unk_26E6A0CA0);
  *(void *)(v0 + 320) = 960049457;
  *(void *)(v0 + 328) = 0xE400000000000000;
  *(void *)(v0 + 336) = sub_232F37BB4((uint64_t)&unk_26E6A0D00);
  *(void *)(v0 + 344) = 825242161;
  *(void *)(v0 + 352) = 0xE400000000000000;
  *(void *)(v0 + 360) = sub_232F37BB4((uint64_t)&unk_26E6A0D60);
  *(void *)(v0 + 368) = 892416561;
  *(void *)(v0 + 376) = 0xE400000000000000;
  *(void *)(v0 + 384) = sub_232F37BB4((uint64_t)&unk_26E6A0DC0);
  *(void *)(v0 + 392) = 942748209;
  *(void *)(v0 + 400) = 0xE400000000000000;
  *(void *)(v0 + 408) = sub_232F37BB4((uint64_t)&unk_26E6A0E20);
  *(void *)(v0 + 416) = 858927665;
  *(void *)(v0 + 424) = 0xE400000000000000;
  *(void *)(v0 + 432) = sub_232F37BB4((uint64_t)&unk_26E6A0E80);
  *(void *)(v0 + 440) = 892482097;
  *(void *)(v0 + 448) = 0xE400000000000000;
  *(void *)(v0 + 456) = sub_232F37BB4((uint64_t)&unk_26E6A0EE0);
  *(void *)(v0 + 464) = 842215985;
  *(void *)(v0 + 472) = 0xE400000000000000;
  *(void *)(v0 + 480) = sub_232F37BB4((uint64_t)&unk_26E6A0F40);
  *(void *)(v0 + 488) = 909324849;
  *(void *)(v0 + 496) = 0xE400000000000000;
  *(void *)(v0 + 504) = sub_232F37BB4((uint64_t)&unk_26E6A0FA0);
  *(void *)(v0 + 512) = 842281521;
  *(void *)(v0 + 520) = 0xE400000000000000;
  *(void *)(v0 + 528) = sub_232F37BB4((uint64_t)&unk_26E6A1000);
  *(void *)(v0 + 536) = 875835953;
  *(void *)(v0 + 544) = 0xE400000000000000;
  *(void *)(v0 + 552) = sub_232F37BB4((uint64_t)&unk_26E6A1060);
  *(void *)(v0 + 560) = 859124273;
  *(void *)(v0 + 568) = 0xE400000000000000;
  *(void *)(v0 + 576) = sub_232F37BB4((uint64_t)&unk_26E6A10C0);
  *(void *)(v0 + 584) = 926233137;
  *(void *)(v0 + 592) = 0xE400000000000000;
  *(void *)(v0 + 600) = sub_232F37BB4((uint64_t)&unk_26E6A1120);
  *(void *)(v0 + 608) = 859189809;
  *(void *)(v0 + 616) = 0xE400000000000000;
  *(void *)(v0 + 624) = sub_232F37BB4((uint64_t)&unk_26E6A1180);
  *(void *)(v0 + 632) = 909521457;
  *(void *)(v0 + 640) = 0xE400000000000000;
  *(void *)(v0 + 648) = sub_232F37BB4((uint64_t)&unk_26E6A11E0);
  *(void *)(v0 + 656) = 926298673;
  *(void *)(v0 + 664) = 0xE400000000000000;
  *(void *)(v0 + 672) = sub_232F37BB4((uint64_t)&unk_26E6A1240);
  *(void *)(v0 + 680) = 943075889;
  *(void *)(v0 + 688) = 0xE400000000000000;
  *(void *)(v0 + 696) = sub_232F37BB4((uint64_t)&unk_26E6A12A0);
  *(void *)(v0 + 704) = 825700913;
  *(void *)(v0 + 712) = 0xE400000000000000;
  *(void *)(v0 + 720) = sub_232F37BB4((uint64_t)&unk_26E6A1300);
  *(void *)(v0 + 728) = 943141425;
  *(void *)(v0 + 736) = 0xE400000000000000;
  *(void *)(v0 + 744) = sub_232F37BB4((uint64_t)&unk_26E6A1360);
  *(void *)(v0 + 752) = 892940849;
  *(void *)(v0 + 760) = 0xE400000000000000;
  *(void *)(v0 + 768) = sub_232F37BB4((uint64_t)&unk_26E6A13C0);
  *(void *)(v0 + 776) = 909718065;
  *(void *)(v0 + 784) = 0xE400000000000000;
  *(void *)(v0 + 792) = sub_232F37BB4((uint64_t)&unk_26E6A1420);
  *(void *)(v0 + 800) = 875574065;
  *(void *)(v0 + 808) = 0xE400000000000000;
  *(void *)(v0 + 816) = sub_232F37BB4((uint64_t)&unk_26E6A1480);
  *(void *)(v0 + 824) = 959525681;
  *(void *)(v0 + 832) = 0xE400000000000000;
  *(void *)(v0 + 840) = sub_232F37BB4((uint64_t)&unk_26E6A14E0);
  *(void *)(v0 + 848) = 825439025;
  *(void *)(v0 + 856) = 0xE400000000000000;
  *(void *)(v0 + 864) = sub_232F37BB4((uint64_t)&unk_26E6A1540);
  *(void *)(v0 + 872) = 858993457;
  *(void *)(v0 + 880) = 0xE400000000000000;
  *(void *)(v0 + 888) = sub_232F37BB4((uint64_t)&unk_26E6A15A0);
  *(void *)(v0 + 896) = 825504561;
  *(void *)(v0 + 904) = 0xE400000000000000;
  *(void *)(v0 + 912) = sub_232F37BB4((uint64_t)&unk_26E6A1600);
  *(void *)(v0 + 920) = 859058993;
  *(void *)(v0 + 928) = 0xE400000000000000;
  *(void *)(v0 + 936) = sub_232F37BB4((uint64_t)&unk_26E6A1660);
  *(void *)(v0 + 944) = 808858417;
  *(void *)(v0 + 952) = 0xE400000000000000;
  *(void *)(v0 + 960) = sub_232F37BB4((uint64_t)&unk_26E6A16C0);
  *(void *)(v0 + 968) = 859190065;
  *(void *)(v0 + 976) = 0xE400000000000000;
  *(void *)(v0 + 984) = sub_232F37BB4((uint64_t)&unk_26E6A1720);
  *(void *)(v0 + 992) = 892744497;
  *(void *)(v0 + 1000) = 0xE400000000000000;
  *(void *)(v0 + 1008) = sub_232F37BB4((uint64_t)&unk_26E6A1780);
  *(void *)(v0 + 1016) = 892810033;
  *(void *)(v0 + 1024) = 0xE400000000000000;
  *(void *)(v0 + 1032) = sub_232F37BB4((uint64_t)&unk_26E6A17E0);
  *(void *)(v0 + 1040) = 842609457;
  *(void *)(v0 + 1048) = 0xE400000000000000;
  *(void *)(v0 + 1056) = sub_232F37BB4((uint64_t)&unk_26E6A1840);
  *(void *)(v0 + 1064) = 808596529;
  *(void *)(v0 + 1072) = 0xE400000000000000;
  *(void *)(v0 + 1080) = sub_232F37BB4((uint64_t)&unk_26E6A18A0);
  *(void *)(v0 + 1088) = 926102577;
  *(void *)(v0 + 1096) = 0xE400000000000000;
  *(void *)(v0 + 1104) = sub_232F37BB4((uint64_t)&unk_26E6A1900);
  *(void *)(v0 + 1112) = 859059249;
  *(void *)(v0 + 1120) = 0xE400000000000000;
  *(void *)(v0 + 1128) = sub_232F37BB4((uint64_t)&unk_26E6A1960);
  *(void *)(v0 + 1136) = 909456433;
  *(void *)(v0 + 1144) = 0xE400000000000000;
  *(void *)(v0 + 1152) = sub_232F37BB4((uint64_t)&unk_26E6A19C0);
  *(void *)(v0 + 1160) = 909521969;
  *(void *)(v0 + 1168) = 0xE400000000000000;
  *(void *)(v0 + 1176) = sub_232F37BB4((uint64_t)&unk_26E6A1A20);
  *(void *)(v0 + 1184) = 943076401;
  *(void *)(v0 + 1192) = 0xE400000000000000;
  *(void *)(v0 + 1200) = sub_232F37BB4((uint64_t)&unk_26E6A1A80);
  *(void *)(v0 + 1208) = 825766961;
  *(void *)(v0 + 1216) = 0xE400000000000000;
  *(void *)(v0 + 1224) = sub_232F37BB4((uint64_t)&unk_26E6A1AE0);
  *(void *)(v0 + 1232) = 876098609;
  *(void *)(v0 + 1240) = 0xE400000000000000;
  *(void *)(v0 + 1248) = sub_232F37BB4((uint64_t)&unk_26E6A1B40);
  *(void *)(v0 + 1256) = 959984689;
  *(void *)(v0 + 1264) = 0xE400000000000000;
  *(void *)(v0 + 1272) = sub_232F37BB4((uint64_t)&unk_26E6A1BA0);
  *(void *)(v0 + 1280) = 809055281;
  *(void *)(v0 + 1288) = 0xE400000000000000;
  *(void *)(v0 + 1296) = sub_232F37BB4((uint64_t)&unk_26E6A1C00);
  *(void *)(v0 + 1304) = 825242929;
  *(void *)(v0 + 1312) = 0xE400000000000000;
  *(void *)(v0 + 1320) = sub_232F37BB4((uint64_t)&unk_26E6A1C60);
  *(void *)(v0 + 1328) = 876033329;
  *(void *)(v0 + 1336) = 0xE400000000000000;
  *(void *)(v0 + 1344) = sub_232F37BB4((uint64_t)&unk_26E6A1CC0);
  *(void *)(v0 + 1352) = 875574833;
  *(void *)(v0 + 1360) = 0xE400000000000000;
  *(void *)(v0 + 1368) = sub_232F37BB4((uint64_t)&unk_26E6A1D20);
  *(void *)(v0 + 1376) = 909129265;
  *(void *)(v0 + 1384) = 0xE400000000000000;
  *(void *)(v0 + 1392) = sub_232F37BB4((uint64_t)&unk_26E6A1D80);
  *(void *)(v0 + 1400) = 875902513;
  *(void *)(v0 + 1408) = 0xE400000000000000;
  *(void *)(v0 + 1416) = sub_232F37BB4((uint64_t)&unk_26E6A1DE0);
  *(void *)(v0 + 1424) = 909326129;
  *(void *)(v0 + 1432) = 0xE400000000000000;
  *(void *)(v0 + 1440) = sub_232F37BB4((uint64_t)&unk_26E6A1E40);
  *(void *)(v0 + 1448) = 926168881;
  *(void *)(v0 + 1456) = 0xE400000000000000;
  *(void *)(v0 + 1464) = sub_232F37BB4((uint64_t)&unk_26E6A1EA0);
  *(void *)(v0 + 1472) = 859191089;
  *(void *)(v0 + 1480) = 0xE400000000000000;
  *(void *)(v0 + 1488) = sub_232F37BB4((uint64_t)&unk_26E6A1F00);
  *(void *)(v0 + 1496) = 875968305;
  *(void *)(v0 + 1504) = 0xE400000000000000;
  *(void *)(v0 + 1512) = sub_232F37BB4((uint64_t)&unk_26E6A1F60);
  *(void *)(v0 + 1520) = 926299953;
  *(void *)(v0 + 1528) = 0xE400000000000000;
  *(void *)(v0 + 1536) = sub_232F37BB4((uint64_t)&unk_26E6A1FC0);
  *(void *)(v0 + 1544) = 959854385;
  *(void *)(v0 + 1552) = 0xE400000000000000;
  *(void *)(v0 + 1560) = sub_232F37BB4((uint64_t)&unk_26E6A2020);
  *(void *)(v0 + 1568) = 892418097;
  *(void *)(v0 + 1576) = 0xE400000000000000;
  *(void *)(v0 + 1584) = sub_232F37BB4((uint64_t)&unk_26E6A2080);
  *(void *)(v0 + 1592) = 842151985;
  *(void *)(v0 + 1600) = 0xE400000000000000;
  *(void *)(v0 + 1608) = sub_232F37BB4((uint64_t)&unk_26E6A20E0);
  *(void *)(v0 + 1616) = 858994737;
  *(void *)(v0 + 1624) = 0xE400000000000000;
  *(void *)(v0 + 1632) = sub_232F37BB4((uint64_t)&unk_26E6A2140);
  *(void *)(v0 + 1640) = 875837489;
  *(void *)(v0 + 1648) = 0xE400000000000000;
  *(void *)(v0 + 1656) = sub_232F37BB4((uint64_t)&unk_26E6A21A0);
  *(void *)(v0 + 1664) = 808925233;
  *(void *)(v0 + 1672) = 0xE400000000000000;
  *(void *)(v0 + 1680) = sub_232F37BB4((uint64_t)&unk_26E6A2200);
  *(void *)(v0 + 1688) = 876099633;
  *(void *)(v0 + 1696) = 0xE400000000000000;
  *(void *)(v0 + 1704) = sub_232F37BB4((uint64_t)&unk_26E6A2260);
  *(void *)(v0 + 1712) = 909130033;
  *(void *)(v0 + 1720) = 0xE400000000000000;
  *(void *)(v0 + 1728) = sub_232F37BB4((uint64_t)&unk_26E6A22C0);
  *(void *)(v0 + 1736) = 959527217;
  *(void *)(v0 + 1744) = 0xE400000000000000;
  *(void *)(v0 + 1752) = sub_232F37BB4((uint64_t)&unk_26E6A2320);
  *(void *)(v0 + 1760) = 875772209;
  *(void *)(v0 + 1768) = 0xE400000000000000;
  *(void *)(v0 + 1776) = sub_232F37BB4((uint64_t)&unk_26E6A2380);
  *(void *)(v0 + 1784) = 808529970;
  *(void *)(v0 + 1792) = 0xE400000000000000;
  *(void *)(v0 + 1800) = sub_232F37BB4((uint64_t)&unk_26E6A23E0);
  *(void *)(v0 + 1808) = 925970482;
  *(void *)(v0 + 1816) = 0xE400000000000000;
  *(void *)(v0 + 1824) = sub_232F37BB4((uint64_t)&unk_26E6A2440);
  *(void *)(v0 + 1832) = 959590450;
  *(void *)(v0 + 1840) = 0xE400000000000000;
  *(void *)(v0 + 1848) = sub_232F37BB4((uint64_t)&unk_26E6A24A0);
  *(void *)(v0 + 1856) = 876032050;
  *(void *)(v0 + 1864) = 0xE400000000000000;
  *(void *)(v0 + 1872) = sub_232F37BB4((uint64_t)&unk_26E6A2500);
  *(void *)(v0 + 1880) = 943271986;
  *(void *)(v0 + 1888) = 0xE400000000000000;
  *(void *)(v0 + 1896) = sub_232F37BB4((uint64_t)&unk_26E6A2560);
  *(void *)(v0 + 1904) = 825241906;
  *(void *)(v0 + 1912) = 0xE400000000000000;
  *(void *)(v0 + 1920) = sub_232F37BB4((uint64_t)&unk_26E6A25C0);
  *(void *)(v0 + 1928) = 858796338;
  *(void *)(v0 + 1936) = 0xE400000000000000;
  *(void *)(v0 + 1944) = sub_232F37BB4((uint64_t)&unk_26E6A2620);
  *(void *)(v0 + 1952) = 875573554;
  *(void *)(v0 + 1960) = 0xE400000000000000;
  *(void *)(v0 + 1968) = sub_232F37BB4((uint64_t)&unk_26E6A2680);
  *(void *)(v0 + 1976) = 942682418;
  *(void *)(v0 + 1984) = 0xE400000000000000;
  *(void *)(v0 + 1992) = sub_232F37BB4((uint64_t)&unk_26E6A26E0);
  *(void *)(v0 + 2000) = 959459634;
  *(void *)(v0 + 2008) = 0xE400000000000000;
  *(void *)(v0 + 2016) = sub_232F37BB4((uint64_t)&unk_26E6A2740);
  *(void *)(v0 + 2024) = 909193522;
  *(void *)(v0 + 2032) = 0xE400000000000000;
  *(void *)(v0 + 2040) = sub_232F37BB4((uint64_t)&unk_26E6A27A0);
  *(void *)(v0 + 2048) = 942813490;
  *(void *)(v0 + 2056) = 0xE400000000000000;
  *(void *)(v0 + 2064) = sub_232F37BB4((uint64_t)&unk_26E6A2800);
  *(void *)(v0 + 2072) = 808661298;
  *(void *)(v0 + 2080) = 0xE400000000000000;
  *(void *)(v0 + 2088) = sub_232F37BB4((uint64_t)&unk_26E6A2860);
  *(void *)(v0 + 2096) = 959656242;
  *(void *)(v0 + 2104) = 0xE400000000000000;
  *(void *)(v0 + 2112) = sub_232F37BB4((uint64_t)&unk_26E6A28C0);
  *(void *)(v0 + 2120) = 859320626;
  *(void *)(v0 + 2128) = 0xE400000000000000;
  *(void *)(v0 + 2136) = sub_232F37BB4((uint64_t)&unk_26E6A2920);
  unint64_t result = (void *)sub_232F37CF8(v0);
  off_268757CB8 = result;
  return result;
}

void *sub_232FE3918()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1EB0;
  *(void *)(inited + 32) = 0x3030353134303632;
  *(void *)(inited + 40) = 0xE900000000000030;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A2980);
  *(void *)(inited + 56) = 0x3030333733303632;
  *(void *)(inited + 64) = 0xE900000000000031;
  *(void *)(inited + 72) = sub_232F37BB4((uint64_t)&unk_26E6A29E0);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CC0 = result;
  return result;
}

void *sub_232FE39DC()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1EB0;
  *(void *)(inited + 32) = 0x342D34363436504CLL;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A2A40);
  *(void *)(inited + 56) = 0x383931373132504CLL;
  *(void *)(inited + 64) = 0xEA0000000000332DLL;
  *(void *)(inited + 72) = sub_232F37BB4((uint64_t)&unk_26E6A2AA0);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CC8 = result;
  return result;
}

void *sub_232FE3AA0()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A4FE0;
  strcpy((char *)(inited + 32), "Bharat-Biotech");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A2B00);
  *(void *)(inited + 56) = 0xD000000000000022;
  *(void *)(inited + 64) = 0x80000002330B5B40;
  *(void *)(inited + 72) = sub_232F37BB4((uint64_t)&unk_26E6A2B60);
  *(void *)(inited + 80) = 1111968067;
  *(void *)(inited + 88) = 0xE400000000000000;
  *(void *)(inited + 96) = sub_232F37BB4((uint64_t)&unk_26E6A2BC0);
  *(void *)(inited + 104) = 0xD000000000000010;
  *(void *)(inited + 112) = 0x80000002330B5B70;
  *(void *)(inited + 120) = sub_232F37BB4((uint64_t)&unk_26E6A2C20);
  *(void *)(inited + 128) = 0x7A7572636F6946;
  *(void *)(inited + 136) = 0xE700000000000000;
  *(void *)(inited + 144) = sub_232F37BB4((uint64_t)&unk_26E6A2C80);
  *(void *)(inited + 152) = 0xD00000000000001BLL;
  *(void *)(inited + 160) = 0x80000002330B5B90;
  *(void *)(inited + 168) = sub_232F37BB4((uint64_t)&unk_26E6A2CE0);
  *(void *)(inited + 176) = 0xD000000000000012;
  *(void *)(inited + 184) = 0x80000002330B5BB0;
  *(void *)(inited + 192) = sub_232F37BB4((uint64_t)&unk_26E6A2D40);
  *(void *)(inited + 200) = 1230198350;
  *(void *)(inited + 208) = 0xE400000000000000;
  *(void *)(inited + 216) = sub_232F37BB4((uint64_t)&unk_26E6A2DA0);
  strcpy((char *)(inited + 224), "ORG-100000788");
  *(_WORD *)(inited + 238) = -4864;
  *(void *)(inited + 240) = sub_232F37BB4((uint64_t)&unk_26E6A2E00);
  strcpy((char *)(inited + 248), "ORG-100001417");
  *(_WORD *)(inited + 262) = -4864;
  *(void *)(inited + 264) = sub_232F37BB4((uint64_t)&unk_26E6A2E60);
  strcpy((char *)(inited + 272), "ORG-100001699");
  *(_WORD *)(inited + 286) = -4864;
  *(void *)(inited + 288) = sub_232F37BB4((uint64_t)&unk_26E6A2EC0);
  strcpy((char *)(inited + 296), "ORG-100001981");
  *(_WORD *)(inited + 310) = -4864;
  *(void *)(inited + 312) = sub_232F37BB4((uint64_t)&unk_26E6A2F20);
  strcpy((char *)(inited + 320), "ORG-100006270");
  *(_WORD *)(inited + 334) = -4864;
  *(void *)(inited + 336) = sub_232F37BB4((uint64_t)&unk_26E6A2F80);
  strcpy((char *)(inited + 344), "ORG-100007893");
  *(_WORD *)(inited + 358) = -4864;
  *(void *)(inited + 360) = sub_232F37BB4((uint64_t)&unk_26E6A2FE0);
  strcpy((char *)(inited + 368), "ORG-100008549");
  *(_WORD *)(inited + 382) = -4864;
  *(void *)(inited + 384) = sub_232F37BB4((uint64_t)&unk_26E6A3040);
  strcpy((char *)(inited + 392), "ORG-100010771");
  *(_WORD *)(inited + 406) = -4864;
  *(void *)(inited + 408) = sub_232F37BB4((uint64_t)&unk_26E6A30A0);
  strcpy((char *)(inited + 416), "ORG-100013793");
  *(_WORD *)(inited + 430) = -4864;
  *(void *)(inited + 432) = sub_232F37BB4((uint64_t)&unk_26E6A3100);
  strcpy((char *)(inited + 440), "ORG-100020693");
  *(_WORD *)(inited + 454) = -4864;
  *(void *)(inited + 456) = sub_232F37BB4((uint64_t)&unk_26E6A3160);
  strcpy((char *)(inited + 464), "ORG-100023050");
  *(_WORD *)(inited + 478) = -4864;
  *(void *)(inited + 480) = sub_232F37BB4((uint64_t)&unk_26E6A31C0);
  strcpy((char *)(inited + 488), "ORG-100024420");
  *(_WORD *)(inited + 502) = -4864;
  *(void *)(inited + 504) = sub_232F37BB4((uint64_t)&unk_26E6A3220);
  strcpy((char *)(inited + 512), "ORG-100026614");
  *(_WORD *)(inited + 526) = -4864;
  *(void *)(inited + 528) = sub_232F37BB4((uint64_t)&unk_26E6A3280);
  strcpy((char *)(inited + 536), "ORG-100030215");
  *(_WORD *)(inited + 550) = -4864;
  *(void *)(inited + 552) = sub_232F37BB4((uint64_t)&unk_26E6A32E0);
  strcpy((char *)(inited + 560), "ORG-100031184");
  *(_WORD *)(inited + 574) = -4864;
  *(void *)(inited + 576) = sub_232F37BB4((uint64_t)&unk_26E6A3340);
  strcpy((char *)(inited + 584), "ORG-100032020");
  *(_WORD *)(inited + 598) = -4864;
  *(void *)(inited + 600) = sub_232F37BB4((uint64_t)&unk_26E6A33A0);
  strcpy((char *)(inited + 608), "ORG-100033914");
  *(_WORD *)(inited + 622) = -4864;
  *(void *)(inited + 624) = sub_232F37BB4((uint64_t)&unk_26E6A3400);
  strcpy((char *)(inited + 632), "ORG-100036422");
  *(_WORD *)(inited + 646) = -4864;
  *(void *)(inited + 648) = sub_232F37BB4((uint64_t)&unk_26E6A3460);
  strcpy((char *)(inited + 656), "Sinopharm-WIBP");
  *(unsigned char *)(inited + 671) = -18;
  *(void *)(inited + 672) = sub_232F37BB4((uint64_t)&unk_26E6A34C0);
  *(void *)(inited + 680) = 0x2D6361766F6E6953;
  *(void *)(inited + 688) = 0xEF686365746F6942;
  *(void *)(inited + 696) = sub_232F37BB4((uint64_t)&unk_26E6A3520);
  *(void *)(inited + 704) = 0xD000000000000010;
  *(void *)(inited + 712) = 0x80000002330B5BD0;
  *(void *)(inited + 720) = sub_232F37BB4((uint64_t)&unk_26E6A3580);
  *(void *)(inited + 728) = 0xD000000000000011;
  *(void *)(inited + 736) = 0x80000002330B5BF0;
  *(void *)(inited + 744) = sub_232F37BB4((uint64_t)&unk_26E6A35E0);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CD0 = result;
  return result;
}

void *sub_232FE3FC8()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A4FF0;
  *(void *)(inited + 32) = 0x616C61646241;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A3640);
  *(void *)(inited + 56) = 0x36313832445A41;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = sub_232F37BB4((uint64_t)&unk_26E6A36A0);
  *(void *)(inited + 80) = 0x6F432D5042494242;
  *(void *)(inited + 88) = 0xEA00000000005672;
  *(void *)(inited + 96) = sub_232F37BB4((uint64_t)&unk_26E6A3700);
  *(void *)(inited + 104) = 0x63656469766E6F43;
  *(void *)(inited + 112) = 0xEA00000000006169;
  *(void *)(inited + 120) = sub_232F37BB4((uint64_t)&unk_26E6A3760);
  *(void *)(inited + 128) = 0x6156616E6F726F43;
  *(void *)(inited + 136) = 0xE900000000000063;
  *(void *)(inited + 144) = sub_232F37BB4((uint64_t)&unk_26E6A37C0);
  *(void *)(inited + 152) = 0x6E697861766F43;
  *(void *)(inited + 160) = 0xE700000000000000;
  *(void *)(inited + 168) = sub_232F37BB4((uint64_t)&unk_26E6A3820);
  *(void *)(inited + 176) = 0xD00000000000001CLL;
  *(void *)(inited + 184) = 0x80000002330B5C10;
  *(void *)(inited + 192) = sub_232F37BB4((uint64_t)&unk_26E6A3880);
  *(void *)(inited + 200) = 0xD000000000000014;
  *(void *)(inited + 208) = 0x80000002330B4D20;
  *(void *)(inited + 216) = sub_232F37BB4((uint64_t)&unk_26E6A38E0);
  *(void *)(inited + 224) = 0x7A6E656669766F43;
  *(void *)(inited + 232) = 0xE800000000000000;
  *(void *)(inited + 240) = sub_232F37BB4((uint64_t)&unk_26E6A3940);
  *(void *)(inited + 248) = 0x6569687369766F43;
  *(void *)(inited + 256) = 0xEA0000000000646CLL;
  *(void *)(inited + 264) = sub_232F37BB4((uint64_t)&unk_26E6A39A0);
  *(void *)(inited + 272) = 0x63615669766F43;
  *(void *)(inited + 280) = 0xE700000000000000;
  *(void *)(inited + 288) = sub_232F37BB4((uint64_t)&unk_26E6A3A00);
  *(void *)(inited + 296) = 0x7861766F766F43;
  *(void *)(inited + 304) = 0xE700000000000000;
  *(void *)(inited + 312) = sub_232F37BB4((uint64_t)&unk_26E6A3A60);
  *(void *)(inited + 320) = 0x566F436E5643;
  *(void *)(inited + 328) = 0xE600000000000000;
  *(void *)(inited + 336) = sub_232F37BB4((uint64_t)&unk_26E6A3AC0);
  strcpy((char *)(inited + 344), "EpiVacCorona");
  *(unsigned char *)(inited + 357) = 0;
  *(_WORD *)(inited + 358) = -5120;
  *(void *)(inited + 360) = sub_232F37BB4((uint64_t)&unk_26E6A3B20);
  strcpy((char *)(inited + 368), "EpiVacCorona-N");
  *(unsigned char *)(inited + 383) = -18;
  *(void *)(inited + 384) = sub_232F37BB4((uint64_t)&unk_26E6A3B80);
  strcpy((char *)(inited + 392), "EU/1/20/1507");
  *(unsigned char *)(inited + 405) = 0;
  *(_WORD *)(inited + 406) = -5120;
  *(void *)(inited + 408) = sub_232F37BB4((uint64_t)&unk_26E6A3BE0);
  strcpy((char *)(inited + 416), "EU/1/20/1525");
  *(unsigned char *)(inited + 429) = 0;
  *(_WORD *)(inited + 430) = -5120;
  *(void *)(inited + 432) = sub_232F37BB4((uint64_t)&unk_26E6A3C40);
  strcpy((char *)(inited + 440), "EU/1/20/1528");
  *(unsigned char *)(inited + 453) = 0;
  *(_WORD *)(inited + 454) = -5120;
  *(void *)(inited + 456) = sub_232F37BB4((uint64_t)&unk_26E6A3CA0);
  strcpy((char *)(inited + 464), "EU/1/21/1529");
  *(unsigned char *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  *(void *)(inited + 480) = sub_232F37BB4((uint64_t)&unk_26E6A3D00);
  strcpy((char *)(inited + 488), "EU/1/21/1618");
  *(unsigned char *)(inited + 501) = 0;
  *(_WORD *)(inited + 502) = -5120;
  *(void *)(inited + 504) = sub_232F37BB4((uint64_t)&unk_26E6A3D60);
  *(void *)(inited + 512) = 0x61562D7461796148;
  *(void *)(inited + 520) = 0xE900000000000078;
  *(void *)(inited + 528) = sub_232F37BB4((uint64_t)&unk_26E6A3DC0);
  *(void *)(inited + 536) = 0xD000000000000020;
  *(void *)(inited + 544) = 0x80000002330B5C30;
  *(void *)(inited + 552) = sub_232F37BB4((uint64_t)&unk_26E6A3E20);
  *(void *)(inited + 560) = 0x31564F432D43564DLL;
  *(void *)(inited + 568) = 0xEB00000000313039;
  *(void *)(inited + 576) = sub_232F37BB4((uint64_t)&unk_26E6A3E80);
  *(void *)(inited + 584) = 0x2D36302D4953564ELL;
  *(void *)(inited + 592) = 0xEA00000000003830;
  *(void *)(inited + 600) = sub_232F37BB4((uint64_t)&unk_26E6A3EE0);
  *(void *)(inited + 608) = 0x32566F432D58564ELL;
  *(void *)(inited + 616) = 0xEB00000000333733;
  *(void *)(inited + 624) = sub_232F37BB4((uint64_t)&unk_26E6A3F40);
  *(void *)(inited + 632) = 0x49564F432D52;
  *(void *)(inited + 640) = 0xE600000000000000;
  *(void *)(inited + 648) = sub_232F37BB4((uint64_t)&unk_26E6A3FA0);
  *(void *)(inited + 656) = 0x43313056544353;
  *(void *)(inited + 664) = 0xE700000000000000;
  *(void *)(inited + 672) = sub_232F37BB4((uint64_t)&unk_26E6A4000);
  *(void *)(inited + 680) = 0x616E617265626F53;
  *(void *)(inited + 688) = 0xEB0000000032302DLL;
  *(void *)(inited + 696) = sub_232F37BB4((uint64_t)&unk_26E6A4060);
  strcpy((char *)(inited + 704), "Soberana-Plus");
  *(_WORD *)(inited + 718) = -4864;
  *(void *)(inited + 720) = sub_232F37BB4((uint64_t)&unk_26E6A40C0);
  strcpy((char *)(inited + 728), "Sputnik-Light");
  *(_WORD *)(inited + 742) = -4864;
  *(void *)(inited + 744) = sub_232F37BB4((uint64_t)&unk_26E6A4120);
  *(void *)(inited + 752) = 0x2D6B696E74757053;
  *(void *)(inited + 760) = 0xE90000000000004DLL;
  *(void *)(inited + 768) = sub_232F37BB4((uint64_t)&unk_26E6A4180);
  *(void *)(inited + 776) = 0x2D6B696E74757053;
  *(void *)(inited + 784) = 0xE900000000000056;
  *(void *)(inited + 792) = sub_232F37BB4((uint64_t)&unk_26E6A41E0);
  *(void *)(inited + 800) = 0x7476657270646956;
  *(void *)(inited + 808) = 0xEA00000000006E79;
  *(void *)(inited + 816) = sub_232F37BB4((uint64_t)&unk_26E6A4240);
  *(void *)(inited + 824) = 0x31303032414C56;
  *(void *)(inited + 832) = 0xE700000000000000;
  *(void *)(inited + 840) = sub_232F37BB4((uint64_t)&unk_26E6A42A0);
  *(void *)(inited + 848) = 0x726F432D50424957;
  *(void *)(inited + 856) = 0xE900000000000056;
  *(void *)(inited + 864) = sub_232F37BB4((uint64_t)&unk_26E6A4300);
  *(void *)(inited + 872) = 0x302D3243532D5359;
  *(void *)(inited + 880) = 0xEA00000000003031;
  *(void *)(inited + 888) = sub_232F37BB4((uint64_t)&unk_26E6A4360);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CD8 = result;
  return result;
}

void *sub_232FE4610()
{
  sub_232FE50C4(0, &qword_268757CF8, (void (*)(uint64_t))sub_232FE5118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A5000;
  *(void *)(inited + 32) = 0x3035303339313131;
  *(void *)(inited + 40) = 0xEA00000000003530;
  *(void *)(inited + 48) = sub_232F37BB4((uint64_t)&unk_26E6A43C0);
  *(void *)(inited + 56) = 0x3039343339313131;
  *(void *)(inited + 64) = 0xEA00000000003730;
  *(void *)(inited + 72) = sub_232F37BB4((uint64_t)&unk_26E6A4420);
  *(void *)(inited + 80) = 0x3034323037353131;
  *(void *)(inited + 88) = 0xEA00000000003630;
  *(void *)(inited + 96) = sub_232F37BB4((uint64_t)&unk_26E6A4480);
  *(void *)(inited + 104) = 0x3033343632363131;
  *(void *)(inited + 112) = 0xEA00000000003130;
  *(void *)(inited + 120) = sub_232F37BB4((uint64_t)&unk_26E6A44E0);
  strcpy((char *)(inited + 128), "29061000087103");
  *(unsigned char *)(inited + 143) = -18;
  *(void *)(inited + 144) = sub_232F37BB4((uint64_t)&unk_26E6A4540);
  *(void *)(inited + 152) = 0x3330584237304ALL;
  *(void *)(inited + 160) = 0xE700000000000000;
  *(void *)(inited + 168) = sub_232F37BB4((uint64_t)&unk_26E6A45A0);
  unint64_t result = (void *)sub_232F37CF8(inited);
  off_268757CE0 = result;
  return result;
}

void sub_232FE4780(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v12 = a2;
  id v10 = a3;
  id v11 = a5;
  v9(v12, a3, a4, a5);
  swift_release();
}

void sub_232FE4830(uint64_t a1)
{
  sub_232FDFCA4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_232FE483C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23309BF80();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x237DB5EB0);
}

uint64_t sub_232FE48B8(char a1, uint64_t a2, uint64_t a3)
{
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_23309B4B0();
  __swift_project_value_buffer(v6, (uint64_t)qword_268770F68);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = sub_23309B4A0();
  os_log_type_t v8 = sub_23309BB70();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v39 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_23309C320();
    id v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_23309B770();
    sub_232F62B64(v12, v13, &v39);
    sub_23309BD10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_23309C320();
    id v14 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v15 = sub_23309B770();
    sub_232F62B64(v15, v16, &v39);
    sub_23309BD10();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_232E63000, v7, v8, "CodeableConceptLookupService entering fallback_eudccValueSetEntry() for %s and code %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v10, -1, -1);
    MEMORY[0x237DB6EC0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  switch(a1)
  {
    case 1:
      if (qword_2687563D0 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CB8;
      if (*((void *)off_268757CB8 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_45;
    case 2:
      if (qword_2687563D8 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CC0;
      if (!*((void *)off_268757CC0 + 2)) {
        goto LABEL_45;
      }
      goto LABEL_34;
    case 3:
      if (qword_2687563E0 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CC8;
      if (!*((void *)off_268757CC8 + 2)) {
        goto LABEL_45;
      }
      goto LABEL_34;
    case 4:
      if (qword_2687563E8 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CD0;
      if (!*((void *)off_268757CD0 + 2)) {
        goto LABEL_45;
      }
      goto LABEL_34;
    case 5:
      if (qword_2687563F0 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CD8;
      if (!*((void *)off_268757CD8 + 2)) {
        goto LABEL_45;
      }
      goto LABEL_34;
    case 6:
      if (qword_2687563F8 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CE0;
      if (*((void *)off_268757CE0 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_45;
    default:
      if (qword_2687563C8 != -1) {
        swift_once();
      }
      uint64_t v17 = off_268757CB0;
      if (!*((void *)off_268757CB0 + 2)) {
        goto LABEL_45;
      }
LABEL_34:
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_232F393E0(a2, a3);
      if ((v19 & 1) == 0) {
        goto LABEL_44;
      }
      uint64_t v20 = *(void *)(v17[7] + 8 * v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!*(void *)(v20 + 16)) {
        goto LABEL_44;
      }
      unint64_t v21 = sub_232F393E0(0x6D6574737973, 0xE600000000000000);
      if ((v22 & 1) == 0 || !*(void *)(v20 + 16)) {
        goto LABEL_44;
      }
      uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 16 * v21);
      swift_bridgeObjectRetain();
      sub_232F393E0(0x79616C70736964, 0xE700000000000000);
      if (v24)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v25 = sub_23309B4A0();
        os_log_type_t v26 = sub_23309BB90();
        if (os_log_type_enabled(v25, v26))
        {
          char v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v27 = 0;
          _os_log_impl(&dword_232E63000, v25, v26, "CodeableConceptLookupService.fallback_eudccValueSetEntry() unable to find display string in ontology, but found in hardcoded EU DCC data.", v27, 2u);
          MEMORY[0x237DB6EC0](v27, -1, -1);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_44:
        swift_bridgeObjectRelease();
LABEL_45:
        swift_bridgeObjectRetain_n();
        uint64_t v28 = sub_23309B4A0();
        os_log_type_t v29 = sub_23309BB70();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v31 = swift_slowAlloc();
          uint64_t v39 = v31;
          *(_DWORD *)uint64_t v30 = 136315394;
          sub_23309C320();
          id v32 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_23309BDB0();
          swift_unknownObjectRelease();
          uint64_t v33 = sub_23309B770();
          sub_232F62B64(v33, v34, &v39);
          sub_23309BD10();
          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_23309C320();
          id v35 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_23309BDB0();
          swift_unknownObjectRelease();
          uint64_t v36 = sub_23309B770();
          sub_232F62B64(v36, v37, &v39);
          sub_23309BD10();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_232E63000, v28, v29, "CodeableConceptLookupService.fallback_eudccValueSetEntry() unable to find display string for %s and code %s", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x237DB6EC0](v31, -1, -1);
          MEMORY[0x237DB6EC0](v30, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return 0;
      }
      return v23;
  }
}

void sub_232FE50C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309C1F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_232FE5118()
{
  if (!qword_268757D00)
  {
    sub_232FE5180();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268757D00);
    }
  }
}

void sub_232FE5180()
{
  if (!qword_268756FE0)
  {
    unint64_t v0 = sub_23309B660();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756FE0);
    }
  }
}

void sub_232FE51E4()
{
  if (!qword_268757D08)
  {
    sub_232FE5AB4(255, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_23309BA50();
    if (!v1) {
      atomic_store(v0, &qword_268757D08);
    }
  }
}

uint64_t sub_232FE5270()
{
  sub_232FE51E4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  return MEMORY[0x270FA0238](v0, v6, v7);
}

void sub_232FE533C(uint64_t a1, void *a2, int a3, void *a4)
{
  sub_232FE51E4();
  uint64_t v9 = *(void **)(v4 + 16);
  sub_232FDFE88(a1, a2, a3, a4, v9);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id sub_232FE53F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000002330B2CE0 || (sub_23309C220() & 1) != 0)
  {
    id v4 = objc_msgSend(self, sel_SNOMEDCodeSystem);
  }
  else
  {
    if ((a1 != 0xD000000000000010 || a2 != 0x80000002330B2D40) && (sub_23309C220() & 1) == 0)
    {
      id v6 = objc_allocWithZone(MEMORY[0x263F0A4B0]);
      swift_bridgeObjectRetain();
      uint64_t v7 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v8 = objc_msgSend(v6, sel_initWithIdentifier_name_OID_type_synonyms_hasDisplayStrings_, v7, 0, 0, 1, 0, 0);

      return v8;
    }
    id v4 = objc_msgSend(self, sel_LOINCCodeSystem);
  }
  return v4;
}

id sub_232FE556C(char a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 5:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    default:
      char v5 = sub_23309C220();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0) {
        return 0;
      }
LABEL_4:
      if (qword_2687563C0 != -1) {
        swift_once();
      }
      id v6 = off_268757CA8;
      if (!*((void *)off_268757CA8 + 2)) {
        goto LABEL_15;
      }
      swift_bridgeObjectRetain();
      unint64_t v7 = sub_232F393E0(a2, a3);
      if ((v8 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v9 = (uint64_t *)(v6[7] + 16 * v7);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_2687563A8 != -1) {
        swift_once();
      }
      if (!*((void *)off_268757C90 + 2)) {
        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      sub_232F393E0(v11, v10);
      if (v12)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_CVXSystem);
        id v14 = (void *)sub_23309B6E0();
        swift_bridgeObjectRelease();
        uint64_t v15 = (void *)sub_23309B6E0();
        swift_bridgeObjectRelease();
        id v16 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v13, 0, v14, v15);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
LABEL_15:
        if (qword_2687563A0 != -1) {
          swift_once();
        }
        uint64_t v17 = sub_23309B4B0();
        __swift_project_value_buffer(v17, (uint64_t)qword_268770F68);
        swift_bridgeObjectRetain_n();
        unint64_t v18 = sub_23309B4A0();
        os_log_type_t v19 = sub_23309BB60();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          uint64_t v29 = v21;
          *(_DWORD *)uint64_t v20 = 136315394;
          swift_bridgeObjectRetain();
          sub_23309C320();
          id v22 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_23309BDB0();
          swift_unknownObjectRelease();
          uint64_t v23 = sub_23309B770();
          sub_232F62B64(v23, v24, &v29);
          sub_23309BD10();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;
          sub_23309C320();
          id v25 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_23309BDB0();
          swift_unknownObjectRelease();
          uint64_t v26 = sub_23309B770();
          sub_232F62B64(v26, v27, &v29);
          sub_23309BD10();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_232E63000, v18, v19, "medicalCodingAlias(valueSet:code:) code \"%s\" not found in valueSet: %s", (uint8_t *)v20, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x237DB6EC0](v21, -1, -1);
          MEMORY[0x237DB6EC0](v20, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return 0;
      }
      return v16;
  }
}

void sub_232FE5AB4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for EUDCCValueSet(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FE5BCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EUDCCValueSet()
{
  return &type metadata for EUDCCValueSet;
}

unint64_t sub_232FE5C08()
{
  unint64_t result = qword_268757D48;
  if (!qword_268757D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757D48);
  }
  return result;
}

uint64_t sub_232FE5C5C()
{
  unint64_t v0 = sub_23309C010();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

id sub_232FE5CAC()
{
  uint64_t v1 = v0;
  sub_232F41D18();
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41E94(v1, (uint64_t)v4);
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_232F571C0((uint64_t)v4);
    id v7 = 0;
  }
  else
  {
    char v8 = self;
    sub_23309AEE0();
    uint64_t v9 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v8, sel_codeSystemWithIdentifier_, v9);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_232F40368();
  uint64_t v10 = (int *)type metadata accessor for Coding();
  uint64_t v11 = (uint64_t *)(v1 + v10[7]);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  id v14 = (uint64_t *)(v1 + v10[5]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (uint64_t *)(v1 + v10[6]);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_233067100(v7, v12, v13, v15, v16, v18, v19);
}

uint64_t sub_232FE5E78@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1;
  sub_232F41D18();
  MEMORY[0x270FA5388](v5 - 8);
  id v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309AF80();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41E94(v3, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_232F571C0((uint64_t)v7);
    sub_232F6210C();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_2330A5110;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    *(unsigned char *)(v12 + 32) = 0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v14 = type metadata accessor for Coding();
    uint64_t v15 = (uint64_t *)(v3 + *(int *)(v14 + 20));
    uint64_t v16 = v15[1];
    if (v16)
    {
      uint64_t v17 = v14;
      uint64_t v37 = *v15;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_23309AEE0();
      uint64_t v38 = v2;
      uint64_t v19 = (uint64_t *)(v3 + *(int *)(v17 + 28));
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      id v22 = (uint64_t *)(v3 + *(int *)(v17 + 24));
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      uint64_t v35 = v20;
      uint64_t v36 = v23;
      v33[1] = v18;
      uint64_t v34 = v24;
      id v25 = self;
      swift_bridgeObjectRetain();
      uint64_t v26 = v21;
      swift_bridgeObjectRetain();
      unint64_t v27 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v28 = objc_msgSend(v25, sel_codeSystemWithIdentifier_, v27);

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v29 = v37;
      *a1 = v28;
      a1[1] = v29;
      uint64_t v30 = v35;
      a1[2] = v16;
      a1[3] = v30;
      uint64_t v31 = v36;
      a1[4] = v26;
      a1[5] = v31;
      a1[6] = v34;
    }
    else
    {
      sub_232F6210C();
      swift_allocError();
      *(_OWORD *)uint64_t v32 = xmmword_2330A5100;
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = 0;
      *(unsigned char *)(v32 + 32) = 0;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_232FE61B4(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_232FE61B4(uint64_t a1, char a2)
{
  if (!a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CompressionAlgorithmError(uint64_t a1)
{
  return sub_232FE61D4(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_232FE61D4(uint64_t a1, char a2)
{
  if (!a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_232FE61B4(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_232FE61D4(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for CompressionAlgorithmError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_232FE61D4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompressionAlgorithmError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompressionAlgorithmError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_232FE6318(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_232FE6330(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompressionAlgorithmError()
{
  return &type metadata for CompressionAlgorithmError;
}

unint64_t sub_232FE6358(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000010;
  if (!a2)
  {
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000015;
    MEMORY[0x237DB59F0](a1, MEMORY[0x263F8E778]);
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000023;
    sub_23309C1E0();
LABEL_5:
    sub_23309B880();
    swift_bridgeObjectRelease();
    return v5;
  }
  return v3;
}

unint64_t sub_232FE6468()
{
  return sub_232FE6358(*(void *)v0, *(unsigned char *)(v0 + 8));
}

BOOL sub_232FE6474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if (v5)
  {
    BOOL v9 = v7 == 1 && v4 == v6;
    BOOL v11 = v7 == 2 && v6 == 0;
    if (v5 == 1) {
      return v9;
    }
    else {
      return v11;
    }
  }
  else
  {
    return !v7 && sub_232E942A4(v4, v6);
  }
}

unint64_t sub_232FE64C8()
{
  unint64_t result = qword_268757D50;
  if (!qword_268757D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757D50);
  }
  return result;
}

uint64_t sub_232FE6520(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_232F69858();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_23309B230();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_23309AE30();
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[8])
  {
    uint64_t v15 = v2[7];
  }
  else
  {
    uint64_t v22 = a1;
    uint64_t v23 = v12;
    sub_23309AE20();
    if (v2[2])
    {
      uint64_t v24 = v2[2];
      sub_232F51B70();
      sub_232F65EE4();
      sub_23309B6C0();
      sub_23309ADF0();
    }
    if (v2[5])
    {
      uint64_t v24 = v2[5];
      sub_232F51B70();
      sub_232F65EE4();
      sub_23309B6C0();
      sub_23309ADD0();
    }
    if (v2[4])
    {
      swift_bridgeObjectRetain();
      sub_23309ADE0();
    }
    if (v2[6])
    {
      uint64_t v24 = v2[6];
      sub_232F51B70();
      sub_232F65EE4();
      sub_23309B6C0();
      sub_23309AE00();
    }
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A78]), sel_init);
    objc_msgSend(v16, sel_setStyle_, 3);
    sub_232F698B0(v22, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_232FE68D4((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      uint64_t v17 = (void *)sub_23309B210();
      objc_msgSend(v16, sel_setLocale_, v17);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v18 = (void *)sub_23309AE10();
    id v19 = objc_msgSend(v16, sel_stringFromPersonNameComponents_, v18);

    uint64_t v15 = sub_23309B710();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v11);
  }
  swift_bridgeObjectRetain();
  return v15;
}

uint64_t sub_232FE68D4(uint64_t a1)
{
  sub_232F69858();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **sub_232FE6930(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
    *((void *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
    uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
    uint64_t v10 = v9[7];
    uint64_t v11 = &v7[v10];
    uint64_t v12 = &v8[v10];
    uint64_t v13 = sub_23309B190();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    uint64_t v15 = v4;
    v14(v11, v12, v13);
    uint64_t v16 = v9[8];
    uint64_t v17 = &v7[v16];
    uint64_t v18 = &v8[v16];
    uint64_t v19 = sub_23309AF80();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_232FE7EAC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = v9[9];
    uint64_t v23 = &v7[v22];
    uint64_t v24 = &v8[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
    *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v5;
}

uint64_t sub_232FE6B7C(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ExtractionContext();
  uint64_t v6 = &v4[*(int *)(v5 + 28)];
  uint64_t v7 = sub_23309B190();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = &v4[*(int *)(v5 + 32)];
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void **sub_232FE6CBC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)((char *)a2 + v5);
  *((void *)v6 + 2) = *(void **)((char *)a2 + v5 + 16);
  uint64_t v8 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v9 = v8[7];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_23309B190();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  id v14 = v4;
  v13(v10, v11, v12);
  uint64_t v15 = v8[8];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = &v7[v15];
  uint64_t v18 = sub_23309AF80();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_232FE7EAC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = v8[9];
  uint64_t v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  uint64_t v24 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  *(void *)&v6[v8[10]] = *(void *)&v7[v8[10]];
  *(void *)&v6[v8[11]] = *(void *)&v7[v8[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void **sub_232FE6EC4(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v30 = a1;
  uint64_t v10 = (void **)((char *)a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  *uint64_t v10 = *(void **)((char *)a2 + v9);
  v10[1] = *(void **)((char *)a2 + v9 + 8);
  v10[2] = *(void **)((char *)a2 + v9 + 16);
  uint64_t v12 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v13 = v12[7];
  id v14 = (char *)v10 + v13;
  uint64_t v15 = &v11[v13];
  uint64_t v16 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = v12[8];
  uint64_t v18 = (char *)v10 + v17;
  uint64_t v19 = &v11[v17];
  uint64_t v20 = sub_23309AF80();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_232FE7EAC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  uint64_t v26 = v12[9];
  unint64_t v27 = (void *)((char *)v10 + v26);
  id v28 = &v11[v26];
  void *v27 = *(void *)v28;
  v27[1] = *((void *)v28 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v10 + v12[10]) = *(void *)&v11[v12[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v10 + v12[11]) = *(void *)&v11[v12[11]];
  swift_retain();
  swift_release();
  return v30;
}

void *sub_232FE716C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)((char *)a2 + v4);
  *((void *)v5 + 2) = *(void *)((char *)a2 + v4 + 16);
  uint64_t v7 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v8 = v7[7];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[8];
  uint64_t v13 = &v5[v12];
  id v14 = &v6[v12];
  uint64_t v15 = sub_23309AF80();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_232FE7EAC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&v5[v7[9]] = *(_OWORD *)&v6[v7[9]];
  *(void *)&v5[v7[10]] = *(void *)&v6[v7[10]];
  *(void *)&v5[v7[11]] = *(void *)&v6[v7[11]];
  return a1;
}

void **sub_232FE7348(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v30 = a1;
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)((char *)a2 + v7);
  *((void *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
  uint64_t v10 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v11 = v10[7];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = v10[8];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = sub_23309AF80();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    sub_232FE7EAC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  uint64_t v24 = v10[9];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
  swift_bridgeObjectRelease();
  *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
  swift_release();
  return v30;
}

uint64_t sub_232FE75C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FE75D8);
}

uint64_t sub_232FE75D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ExtractionContext();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_232FE7688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FE769C);
}

void *sub_232FE769C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ExtractionContext();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for RecordExtractionContext()
{
  uint64_t result = qword_268757D58;
  if (!qword_268757D58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_232FE7790()
{
  uint64_t result = type metadata accessor for ExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_232FE782C(void *a1)
{
  sub_232FE7EAC(0, &qword_268757D68, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v46 - v7;
  uint64_t v9 = sub_23309B1F0();
  uint64_t v10 = *(void **)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*((unsigned char *)v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20) + 8) & 4) != 0)
  {
    sub_232F6210C();
    swift_allocError();
    *(void *)uint64_t v13 = 1;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    goto LABEL_5;
  }
  if (objc_msgSend(a1, sel_enteredInError))
  {
    sub_232F6210C();
    swift_allocError();
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
LABEL_5:
    *(unsigned char *)(v13 + 32) = 7;
    return swift_willThrow();
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v15 = objc_msgSend(self, sel_conditionRecordType);
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v15 = objc_msgSend(self, sel_labResultRecordType);
    }
    else
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        id v15 = objc_msgSend(self, sel_immunizationRecordType);
      }
      else
      {
        self;
        uint64_t v40 = swift_dynamicCastObjCClass();
        if (v40)
        {
          unint64_t v41 = (void *)v40;
          char v50 = v1;
          id v49 = a1;
          id v42 = objc_msgSend(v41, sel_category);
          if (!v42)
          {
            sub_23309B710();
            id v42 = (id)sub_23309B6E0();
            swift_bridgeObjectRelease();
          }
          id v43 = (id)HKClinicalTypeForDiagnosticTestResultCategory();

          id v16 = v43;
          unint64_t v1 = v50;
          if (v16) {
            goto LABEL_14;
          }
LABEL_28:
          sub_232F6210C();
          swift_allocError();
          *(void *)uint64_t v44 = a1;
          *(void *)(v44 + 8) = 0;
          *(void *)(v44 + 16) = 0;
          *(void *)(v44 + 24) = 0;
          *(unsigned char *)(v44 + 32) = 5;
          id v45 = a1;
          return swift_willThrow();
        }
        self;
        if (!swift_dynamicCastObjCClass()) {
          goto LABEL_28;
        }
        id v15 = objc_msgSend(self, sel_clinicalNoteRecordType);
      }
    }
  }
  id v16 = v15;
  if (!v16) {
    goto LABEL_28;
  }
LABEL_14:
  id v48 = v16;
  sub_232FE7EAC(0, &qword_268757D70, (uint64_t (*)(uint64_t))sub_232F3A618, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  char v50 = v1;
  uint64_t v18 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = sub_23309B710();
  v18[5] = v19;
  id v20 = objc_msgSend(a1, sel_UUID);
  sub_23309B1D0();

  uint64_t v21 = sub_23309B1B0();
  uint64_t v23 = v22;
  id v49 = v10;
  uint64_t v47 = (void (*)(char *, uint64_t))v10[1];
  v47(v12, v9);
  v18[9] = MEMORY[0x263F8D310];
  v18[6] = v21;
  v18[7] = v23;
  unint64_t v24 = sub_232F37E10((uint64_t)v18);
  id v25 = objc_msgSend(*v50, sel_signedClinicalDataRecordIdentifier);
  if (v25)
  {
    uint64_t v26 = v25;
    sub_23309B1D0();

    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }
  uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))v49;
  (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v49 + 7))(v6, v27, 1, v9);
  sub_232FE7F10((uint64_t)v6, (uint64_t)v8);
  if (v28[6](v8, 1, v9) == 1)
  {
    sub_232FE7FA4((uint64_t)v8);
  }
  else
  {
    uint64_t v29 = sub_23309B1B0();
    uint64_t v31 = v30;
    v47(v8, v9);
    uint64_t v32 = sub_23309B710();
    uint64_t v34 = v33;
    uint64_t v54 = MEMORY[0x263F8D310];
    *(void *)&long long v53 = v29;
    *((void *)&v53 + 1) = v31;
    sub_232F3A680(&v53, &v51);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v55 = v24;
    uint64_t v36 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v51, v52);
    MEMORY[0x270FA5388](v36);
    uint64_t v38 = (uint64_t *)((char *)&v46 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v39 + 16))(v38);
    sub_23301B4D0(*v38, v38[1], v32, v34, isUniquelyReferenced_nonNull_native, &v55);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v48;
}

void sub_232FE7EAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_232FE7F10(uint64_t a1, uint64_t a2)
{
  sub_232FE7EAC(0, &qword_268757D68, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_232FE7FA4(uint64_t a1)
{
  sub_232FE7EAC(0, &qword_268757D68, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_232FE8030(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_232FE8050, 0, 0);
}

id sub_232FE8050()
{
  if (*(void *)(v0[3] + 128) == 1)
  {
    if ((sub_232FE8494() & 1) == 0)
    {
      id v10 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
      sub_232F3A800(0, (unint64_t *)&qword_268757138);
      uint64_t v3 = (void *)sub_23309B990();
      id v1 = objc_msgSend(v10, sel_initWithCodings_, v3);
      goto LABEL_13;
    }
    id v1 = (id)sub_233001A34();
    v0[8] = v1;
    sub_232F3A800(0, &qword_268757D30);
    id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x263F094B0]);
    v0[9] = result;
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = v0[2];
      uint64_t v5 = v4 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
      if ((*(unsigned char *)(v5 + 16) & 4) == 0)
      {
        v0[10] = *(void *)(v5 + *(int *)(type metadata accessor for ExtractionContext() + 44));
        swift_retain();
        uint64_t v6 = (void *)swift_task_alloc();
        v0[11] = v6;
        *uint64_t v6 = v0;
        uint64_t v7 = sub_232FE8344;
LABEL_9:
        v6[1] = v7;
        return (id)sub_232FDDCD0((uint64_t)v1, (uint64_t)v3);
      }
      goto LABEL_13;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  id v1 = (id)sub_233001A34();
  v0[4] = v1;
  sub_232F3A800(0, &qword_268757D30);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x263F094B0]);
  v0[5] = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v3 = result;
  uint64_t v8 = v0[2];
  uint64_t v9 = v8 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  if ((*(unsigned char *)(v9 + 16) & 4) == 0)
  {
    v0[6] = *(void *)(v9 + *(int *)(type metadata accessor for ExtractionContext() + 44));
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[7] = v6;
    *uint64_t v6 = v0;
    uint64_t v7 = sub_232F5E978;
    goto LABEL_9;
  }
LABEL_13:

  uint64_t v11 = (uint64_t (*)(id))v0[1];
  return (id)v11(v1);
}

uint64_t sub_232FE8344(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 72);
  uint64_t v4 = *(void **)(*v1 + 64);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();

  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  return v5(a1);
}

uint64_t sub_232FE8494()
{
  uint64_t v1 = type metadata accessor for Coding();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v25 - v6;
  sub_232FEA258(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)v25 - v9;
  if (*(void *)(v0 + 128) != 1) {
    return 0;
  }
  uint64_t result = *(void *)(v0 + 88);
  if (!result) {
    return result;
  }
  uint64_t v30 = *(void *)(result + 16);
  if (!v30) {
    return 0;
  }
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  uint64_t v29 = result + 32;
  uint64_t v26 = v2;
  uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  v25[1] = result;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = 0;
  uint64_t v34 = "vaccine-exemption";
  unint64_t v31 = 0x80000002330B5D50;
  uint64_t v35 = "Vaccination Exemption";
  unint64_t v33 = 0x80000002330B5D30;
  while (2)
  {
    uint64_t v13 = v29 + 24 * v12;
    uint64_t v14 = *(void *)(v13 + 16);
    if (!v14)
    {
      (*v28)(v10, 1, 1, v1);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    uint64_t v15 = *(void *)(v14 + 16);
    uint64_t v32 = *(void *)(v13 + 8);
    if (!v15)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
LABEL_24:
      (*v28)(v10, 1, 1, v1);
      goto LABEL_28;
    }
    uint64_t v16 = v26;
    uint64_t v17 = v14 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v18 = *(void *)(v16 + 72);
    while (1)
    {
      sub_232FEA2AC(v17, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Coding);
      id v20 = &v7[*(int *)(v1 + 20)];
      uint64_t v21 = *((void *)v20 + 1);
      if (!v21)
      {
        sub_232FEA2AC((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
        goto LABEL_18;
      }
      if (*(void *)v20 == 0xD000000000000011 && v21 == v33) {
        break;
      }
      char v22 = sub_23309C220();
      sub_232FEA2AC((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
      if (v22) {
        goto LABEL_26;
      }
LABEL_18:
      uint64_t v23 = &v5[*(int *)(v1 + 20)];
      uint64_t v24 = *((void *)v23 + 1);
      if (v24)
      {
        if (*(void *)v23 == 0xD000000000000019 && v24 == v31) {
          goto LABEL_26;
        }
        char v19 = sub_23309C220();
        sub_232FEA1F8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
        if (v19) {
          goto LABEL_27;
        }
      }
      else
      {
        sub_232FEA1F8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
      }
      sub_232FEA1F8((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Coding);
      v17 += v18;
      if (!--v15) {
        goto LABEL_24;
      }
    }
    sub_232FEA2AC((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
LABEL_26:
    sub_232FEA1F8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
LABEL_27:
    sub_232FEA43C((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Coding);
    (*v28)(v10, 0, 1, v1);
LABEL_28:
    swift_bridgeObjectRelease();
    if ((*v27)(v10, 1, v1) != 1)
    {
      sub_232FEA380((uint64_t)v10, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_6:
    ++v12;
    sub_232FEA380((uint64_t)v10, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12 != v30) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_232FE89A0(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  sub_232FEA258(0, &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  sub_232FEA258(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  v2[23] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[24] = swift_task_alloc();
  sub_232FEA258(0, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Period();
  v2[27] = v3;
  v2[28] = *(void *)(v3 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  sub_23309AD60();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  sub_232FEA258(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  v2[37] = v4;
  v2[38] = *(void *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = *(void *)(type metadata accessor for Annotation() - 8);
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for ModelsR4.Condition(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_232FE8D44, 0, 0);
}

uint64_t sub_232FE8D44()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[20];
  uint64_t v4 = *(void *)(v3 + 128);
  sub_232FEA2AC(v3, v2, type metadata accessor for ModelsR4.Condition);
  uint64_t v5 = v1[45];
  if (v4 == 1)
  {
    char v6 = sub_232FE8494();
    sub_232FEA1F8(v5, type metadata accessor for ModelsR4.Condition);
    if ((v6 & 1) == 0)
    {
      sub_232F6210C();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_2330A5100;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(unsigned char *)(v7 + 32) = 1;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v108 = (uint64_t (*)(void))v1[1];
      return v108();
    }
  }
  else
  {
    sub_232FEA1F8(v1[45], type metadata accessor for ModelsR4.Condition);
  }
  uint64_t v8 = (int *)v1[43];
  uint64_t v9 = v1[20];
  uint64_t v10 = *(void *)(v9 + v8[22]);
  uint64_t v116 = v1;
  if (v10)
  {
    int64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = MEMORY[0x263F8EE78];
    if (v11)
    {
      uint64_t v13 = v1[41];
      uint64_t v14 = v1[42];
      uint64_t v117 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_232F39748(0, v11, 0);
      uint64_t v15 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v16 = *(void *)(v13 + 72);
      uint64_t v12 = v117;
      do
      {
        uint64_t v17 = (uint64_t *)v1[42];
        sub_232FEA2AC(v15, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Annotation);
        uint64_t v18 = *v17;
        uint64_t v19 = *(void *)(v14 + 8);
        swift_bridgeObjectRetain();
        sub_232FEA1F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_232F39748(0, *(void *)(v12 + 16) + 1, 1);
          uint64_t v12 = v117;
        }
        unint64_t v21 = *(void *)(v12 + 16);
        unint64_t v20 = *(void *)(v12 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_232F39748(v20 > 1, v21 + 1, 1);
          uint64_t v12 = v117;
        }
        *(void *)(v12 + 16) = v21 + 1;
        uint64_t v22 = v12 + 16 * v21;
        *(void *)(v22 + 32) = v18;
        *(void *)(v22 + 40) = v19;
        v15 += v16;
        --v11;
        uint64_t v1 = v116;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    v1[18] = v12;
    sub_232F51B70();
    sub_232F65EE4();
    uint64_t v23 = sub_23309B6C0();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v8 = (int *)v1[43];
    uint64_t v9 = v1[20];
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  v1[46] = v23;
  v1[47] = v25;
  if (*(void *)(v9 + v8[15] + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(self, sel_inspectableValueWithString_, v26);
  }
  else
  {
    uint64_t v38 = v1[37];
    uint64_t v39 = v1[38];
    uint64_t v40 = v1[36];
    sub_232FEA314(v9 + v8[13], v40, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v38) == 1)
    {
      uint64_t v41 = v1[43];
      uint64_t v42 = v1[27];
      uint64_t v43 = v1[28];
      uint64_t v44 = v1[26];
      uint64_t v45 = v1[20];
      sub_232FEA380(v1[36], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232FEA314(v45 + *(int *)(v41 + 56), v44, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v42) == 1)
      {
        sub_232FEA380(v1[26], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      }
      else
      {
        sub_232FEA43C(v1[26], v1[30], (uint64_t (*)(void))type metadata accessor for Period);
        id v63 = Period.asMedicalDateInterval()();
        int v110 = v63;
        uint64_t v111 = v1[30];
        if (v63)
        {
          id v27 = objc_msgSend(self, sel_inspectableValueWithMedicalDateInterval_, v63);

          sub_232FEA1F8(v111, (uint64_t (*)(void))type metadata accessor for Period);
          goto LABEL_18;
        }
        sub_232FEA1F8(v1[30], (uint64_t (*)(void))type metadata accessor for Period);
      }
      id v27 = 0;
    }
    else
    {
      uint64_t v55 = v1[40];
      sub_232FEA43C(v1[36], v55, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v56 = *(void *)(v55 + 56);
      uint64_t v57 = v1[40];
      if (v56 == 1)
      {
        if (*(unsigned char *)(v57 + 19))
        {
          if (*(unsigned char *)(v57 + 17)) {
            uint64_t v58 = 3;
          }
          else {
            uint64_t v58 = 2;
          }
        }
        else
        {
          uint64_t v58 = 1;
        }
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v93 = v1[37];
      uint64_t v94 = v1[33];
      sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
      FHIRDateTime.asDateComponents()();
      id v95 = (uint64_t *)(v57 + *(int *)(v93 + 32));
      uint64_t v96 = *v95;
      uint64_t v97 = v95[1];
      swift_bridgeObjectRetain();
      id v98 = sub_233017340(v94, v96, v97, v58);
      uint64_t v99 = v1[40];
      uint64_t v100 = v98;
      id v27 = objc_msgSend(self, sel_inspectableValueWithMedicalDate_, v98);

      sub_232FEA1F8(v99, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
  }
LABEL_18:
  v1[48] = v27;
  uint64_t v28 = v1[43];
  uint64_t v29 = v1[20];
  if (*(void *)(v29 + *(int *)(v28 + 72) + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(self, sel_inspectableValueWithString_, v30);
  }
  else
  {
    uint64_t v47 = v1[37];
    uint64_t v48 = v1[38];
    uint64_t v49 = v1[35];
    sub_232FEA314(v29 + *(int *)(v28 + 64), v49, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47) == 1)
    {
      uint64_t v50 = v1[43];
      uint64_t v51 = v1[27];
      uint64_t v52 = v1[28];
      uint64_t v53 = v1[25];
      uint64_t v54 = v1[20];
      sub_232FEA380(v1[35], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232FEA314(v54 + *(int *)(v50 + 68), v53, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v51) == 1)
      {
        sub_232FEA380(v1[25], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
        id v31 = 0;
      }
      else
      {
        sub_232FEA43C(v1[25], v1[29], (uint64_t (*)(void))type metadata accessor for Period);
        id v92 = Period.asMedicalDateInterval()();
        uint64_t v112 = v92;
        uint64_t v113 = v1[29];
        if (v92)
        {
          id v31 = objc_msgSend(self, sel_inspectableValueWithMedicalDateInterval_, v92);

          sub_232FEA1F8(v113, (uint64_t (*)(void))type metadata accessor for Period);
        }
        else
        {
          sub_232FEA1F8(v1[29], (uint64_t (*)(void))type metadata accessor for Period);
          id v31 = 0;
        }
      }
    }
    else
    {
      uint64_t v59 = v1[39];
      sub_232FEA43C(v1[35], v59, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v60 = *(void *)(v59 + 56);
      uint64_t v61 = v1[39];
      if (v60 == 1)
      {
        if (*(unsigned char *)(v61 + 19))
        {
          if (*(unsigned char *)(v61 + 17)) {
            uint64_t v62 = 3;
          }
          else {
            uint64_t v62 = 2;
          }
        }
        else
        {
          uint64_t v62 = 1;
        }
      }
      else
      {
        uint64_t v62 = 0;
      }
      uint64_t v101 = v1[37];
      uint64_t v102 = v1[32];
      sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
      FHIRDateTime.asDateComponents()();
      long long v103 = (uint64_t *)(v61 + *(int *)(v101 + 32));
      uint64_t v104 = *v103;
      uint64_t v105 = v103[1];
      swift_bridgeObjectRetain();
      id v106 = sub_233017340(v102, v104, v105, v62);
      uint64_t v107 = v1[39];
      uint64_t v109 = v106;
      id v31 = objc_msgSend(self, sel_inspectableValueWithMedicalDate_, v106);

      sub_232FEA1F8(v107, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
  }
  v1[49] = v31;
  uint64_t v32 = v1[37];
  uint64_t v33 = v1[38];
  uint64_t v34 = v1[34];
  sub_232FEA314(v1[20] + *(int *)(v1[43] + 76), v34, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32);
  uint64_t v36 = v1[34];
  if (v35 == 1)
  {
    sub_232FEA380(v1[34], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    id v37 = 0;
  }
  else
  {
    if (*(void *)(v36 + 56) == 1)
    {
      if (*(unsigned char *)(v36 + 19))
      {
        if (*(unsigned char *)(v36 + 17)) {
          uint64_t v46 = 3;
        }
        else {
          uint64_t v46 = 2;
        }
      }
      else
      {
        uint64_t v46 = 1;
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    uint64_t v64 = v1[37];
    uint64_t v65 = v1[31];
    sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
    FHIRDateTime.asDateComponents()();
    id v66 = (uint64_t *)(v36 + *(int *)(v64 + 32));
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    swift_bridgeObjectRetain();
    id v37 = sub_233017340(v65, v67, v68, v46);
    sub_232FEA1F8(v1[34], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  }
  v1[50] = v37;
  char v69 = (void *)v1[20];
  uint64_t v70 = v69[6];
  if (v70 == 1)
  {
    id v71 = 0;
  }
  else
  {
    uint64_t v72 = v69[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v71 = sub_233001FB0(0xD000000000000038, 0x80000002330B5DB0);
    sub_232E96840(v72, v70);
    char v69 = (void *)v1[20];
  }
  v1[51] = v71;
  uint64_t v73 = v69[9];
  if (v73 == 1)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
  }
  else
  {
    uint64_t v115 = v69[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_233042DBC(0xD00000000000003ALL, 0x80000002330B5D70, (uint64_t)(v1 + 9));
    uint64_t v74 = v1[9];
    uint64_t v75 = v1[10];
    uint64_t v76 = v1[11];
    uint64_t v77 = v1[12];
    os_log_type_t v81 = v1;
    uint64_t v78 = v1[13];
    uint64_t v79 = v1[14];
    uint64_t v80 = v81[15];
    sub_232E96840(v115, v73);
    char v69 = (void *)v81[20];
  }
  v116[57] = v79;
  v116[58] = v80;
  v116[55] = v77;
  v116[56] = v78;
  v116[53] = v75;
  v116[54] = v76;
  v116[52] = v74;
  v116[2] = v74;
  v116[3] = v75;
  v116[4] = v76;
  v116[5] = v77;
  v116[6] = v78;
  v116[7] = v79;
  v116[8] = v80;
  uint64_t v82 = v69[11];
  if (v82)
  {
    uint64_t v83 = Array<A>.asCodingCollectionArray()(v82);
    char v69 = (void *)v116[20];
  }
  else
  {
    uint64_t v83 = MEMORY[0x263F8EE78];
  }
  v116[59] = v83;
  if (v69[13] == 1)
  {
    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = sub_233001A34();
    char v69 = (void *)v116[20];
  }
  v116[60] = v84;
  uint64_t v85 = v69[18];
  if (v85)
  {
    uint64_t v85 = Array<A>.asCodingCollectionArray()(v85);
    char v69 = (void *)v116[20];
  }
  v116[61] = v85;
  uint64_t v86 = v116[43];
  sub_232FEA2AC(v116[19], v116[24], (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v87 = *(void *)((char *)v69 + *(int *)(v86 + 92) + 8);
  uint64_t v88 = v116[23];
  if (v87)
  {
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v89 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 0, 1, v89);
  }
  else
  {
    uint64_t v90 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v88, 1, 1, v90);
  }
  uint64_t v91 = swift_task_alloc();
  v116[62] = v91;
  *(void *)uint64_t v91 = v116;
  *(void *)(v91 + 8) = sub_232FE9C94;
  *(_OWORD *)(v91 + 16) = *(_OWORD *)(v116 + 19);
  return MEMORY[0x270FA2498](sub_232FE8050, 0, 0);
}

uint64_t sub_232FE9C94(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v1;
  *(void *)(v2 + 136) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232FE9D94, 0, 0);
}

uint64_t sub_232FE9D94()
{
  uint64_t v1 = *(void *)(v0 + 176);
  sub_232FEA314(*(void *)(v0 + 160) + *(int *)(*(void *)(v0 + 344) + 84), v1, &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v2 = type metadata accessor for Reference();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  int v4 = v3(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 352);
  char v6 = *(uint64_t **)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  if (v4 == 1)
  {
    sub_232FEA380(*(void *)(v0 + 176), &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_232FEA2AC(v7, v5, type metadata accessor for ModelsR4.Condition);
  }
  else
  {
    uint64_t v8 = *v6;
    uint64_t v9 = v6[1];
    swift_bridgeObjectRetain();
    sub_232FEA1F8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Reference);
    sub_232FEA2AC(v7, v5, type metadata accessor for ModelsR4.Condition);
    if (v9)
    {
      sub_232FEA1F8(*(void *)(v0 + 352), type metadata accessor for ModelsR4.Condition);
      uint64_t v26 = v9;
      uint64_t v27 = v8;
      goto LABEL_8;
    }
  }
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 168);
  sub_232FEA314(v10 + *(int *)(*(void *)(v0 + 344) + 80), v11, &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
  sub_232FEA1F8(v10, type metadata accessor for ModelsR4.Condition);
  int v12 = v3(v11, 1, v2);
  uint64_t v13 = *(uint64_t **)(v0 + 168);
  if (v12 == 1)
  {
    sub_232FEA380(*(void *)(v0 + 168), &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v26 = v13[1];
    uint64_t v27 = *v13;
    swift_bridgeObjectRetain();
    sub_232FEA1F8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Reference);
  }
LABEL_8:
  uint64_t v14 = *(void **)(v0 + 480);
  uint64_t v28 = *(void *)(v0 + 488);
  uint64_t v29 = *(void *)(v0 + 472);
  uint64_t v30 = *(void **)(v0 + 136);
  uint64_t v15 = *(void **)(v0 + 408);
  id v31 = *(void **)(v0 + 416);
  uint64_t v17 = *(void **)(v0 + 392);
  uint64_t v16 = *(void **)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v18 = *(void **)(v0 + 384);
  uint64_t v20 = *(void *)(v0 + 368);
  unint64_t v21 = *(uint64_t **)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 184);
  sub_232F3A800(0, &qword_268757D88);
  id v23 = sub_23305122C(v21, v22, v20, v19, v30, v29, v27, v26, (uint64_t)v17, (uint64_t)v18, (uint64_t)v16, (uint64_t)v15, (void **)(v0 + 16), (uint64_t)v14, v28);

  sub_232FEA3DC(v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(id))(v0 + 8);
  return v24(v23);
}

uint64_t sub_232FEA1F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_232FEA258(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_232FEA2AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_232FEA314(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_232FEA258(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_232FEA380(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_232FEA258(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void *sub_232FEA3DC(void *result)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_232FEA43C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SignedClinicalDataEUDCC.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_23309B360();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309B390();
  swift_allocObject();
  uint64_t v11 = sub_23309B380();
  sub_232FEA96C();
  sub_23309B370();
  if (v3)
  {
    sub_232E9AA4C(a1, a2);
    return swift_release();
  }
  uint64_t v52 = v11;
  uint64_t v74 = v7;
  uint64_t v49 = a3;
  unint64_t v50 = a2;
  uint64_t v51 = v8;
  uint64_t v13 = sub_23309B310();
  uint64_t v15 = v10;
  if (v14 >> 60 == 15)
  {
    sub_232FEA9C4();
    swift_allocError();
    *(void *)uint64_t v16 = 0;
    *(unsigned char *)(v16 + 8) = 1;
    swift_willThrow();
    swift_release();
    sub_232E9AA4C(a1, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v15, v74);
  }
  unint64_t v17 = v14;
  uint64_t v48 = v13;
  uint64_t v18 = MEMORY[0x237DB5370]();
  unint64_t v20 = v19;
  uint64_t v21 = sub_23309B340();
  if (v22 >> 60 == 15)
  {
    sub_232FEA9C4();
    swift_allocError();
    *(void *)uint64_t v23 = 1;
    *(unsigned char *)(v23 + 8) = 1;
    swift_willThrow();
    swift_release();
    sub_232E9AA4C(v18, v20);
    sub_232E9AA4C(a1, v50);
    sub_232F3F15C(v48, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v15, v74);
  }
  unint64_t v24 = v22;
  uint64_t v45 = a1;
  uint64_t v46 = v18;
  unint64_t v47 = v20;
  uint64_t v25 = v21;
  sub_232FEAA18();
  sub_23309B370();
  uint64_t v26 = v74;
  unint64_t v43 = v24;
  uint64_t v44 = v25;
  long long v60 = v70;
  long long v61 = v71;
  long long v62 = v72;
  uint64_t v63 = v73;
  long long v56 = v66;
  long long v57 = v67;
  long long v58 = v68;
  long long v59 = v69;
  long long v54 = v64;
  long long v55 = v65;
  uint64_t v27 = sub_23309B320();
  if (v27 == -37)
  {
    HIDWORD(v42) = 3;
    uint64_t v30 = v48;
    uint64_t v29 = v45;
    goto LABEL_12;
  }
  uint64_t v28 = v27;
  uint64_t v29 = v45;
  if (v27 == -7)
  {
    HIDWORD(v42) = 1;
    uint64_t v30 = v48;
LABEL_12:
    sub_232E9A9F4(v30, v17);
    sub_232E9A9F4(v30, v17);
    uint64_t v31 = sub_23309B350();
    uint64_t v48 = v32;
    swift_release();
    sub_232E9AA4C(v29, v50);
    sub_232F3F15C(v30, v17);
    sub_232F3F15C(v30, v17);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v15, v26);
    long long v33 = v61;
    uint64_t v34 = v49;
    *(_OWORD *)(v49 + 152) = v60;
    *(_OWORD *)(v34 + 168) = v33;
    *(_OWORD *)(v34 + 184) = v62;
    long long v35 = v57;
    *(_OWORD *)(v34 + 88) = v56;
    *(_OWORD *)(v34 + 104) = v35;
    long long v36 = v59;
    *(_OWORD *)(v34 + 120) = v58;
    *(_OWORD *)(v34 + 136) = v36;
    long long v37 = v55;
    *(_OWORD *)(v34 + 56) = v54;
    uint64_t v38 = v63;
    *(_OWORD *)(v34 + 72) = v37;
    unint64_t v39 = v47;
    *(void *)uint64_t v34 = v46;
    *(void *)(v34 + 8) = v39;
    *(unsigned char *)(v34 + 16) = BYTE4(v42);
    *(_DWORD *)(v34 + 17) = *(_DWORD *)v53;
    *(_DWORD *)(v34 + 20) = *(_DWORD *)&v53[3];
    *(void *)(v34 + 24) = v30;
    *(void *)(v34 + 32) = v17;
    unint64_t v40 = v43;
    *(void *)(v34 + 40) = v44;
    *(void *)(v34 + 48) = v40;
    *(void *)(v34 + 200) = v38;
    *(void *)(v34 + 208) = v31;
    *(void *)(v34 + 216) = v48;
    return result;
  }
  sub_232FEB410((uint64_t)&v54);
  sub_232FEA9C4();
  swift_allocError();
  *(void *)uint64_t v41 = v28;
  *(unsigned char *)(v41 + 8) = 0;
  swift_willThrow();
  swift_release();
  sub_232E9AA4C(v46, v47);
  sub_232F3F15C(v44, v43);
  sub_232E9AA4C(v29, v50);
  sub_232F3F15C(v48, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v15, v26);
}

unint64_t sub_232FEA96C()
{
  unint64_t result = qword_268757D90;
  if (!qword_268757D90)
  {
    sub_23309B360();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757D90);
  }
  return result;
}

unint64_t sub_232FEA9C4()
{
  unint64_t result = qword_268757D98;
  if (!qword_268757D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757D98);
  }
  return result;
}

unint64_t sub_232FEAA18()
{
  unint64_t result = qword_268757DA0;
  if (!qword_268757DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DA0);
  }
  return result;
}

uint64_t sub_232FEAA6C(uint64_t a1)
{
  uint64_t v29 = sub_23309BEB0();
  uint64_t v3 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_23309BEC0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char **)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v34 = a1;
  sub_232FF2C48(0, &qword_268757E18, (uint64_t (*)(void))sub_232FED640, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_23309C0D0();
  if (!v1) {
    return v12;
  }
  id v32 = v1;
  id v13 = v1;
  sub_232F3DAA0();
  if (swift_dynamicCast())
  {
    unsigned int v14 = (*(uint64_t (**)(char **, uint64_t))(v7 + 88))(v9, v6);
    if (v14 == *MEMORY[0x263F8DCB0])
    {
      unsigned int v33 = v14;

      (*(void (**)(char **, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v28 = *v9;
      sub_232F5A658();
      uint64_t v16 = v15;
      unint64_t v17 = (char *)v9 + *(int *)(v15 + 48);
      uint64_t v18 = v3;
      unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      uint64_t v20 = v29;
      v19(v5, v17, v29);
      sub_23309C0C0();
      if (v21 > -9.22337204e18 && v21 < 9.22337204e18 && v21 == trunc(v21))
      {
        a1 = (uint64_t)v21;
        (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v20);

        return a1;
      }
      swift_allocError();
      uint64_t v23 = v18;
      uint64_t v25 = v24;
      uint64_t v28 = (char *)v24 + *(int *)(v16 + 48);
      *unint64_t v24 = v11;
      sub_23309BE90();
      uint64_t v30 = 0;
      unint64_t v31 = 0xE000000000000000;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BEA0();
      a1 = v26;
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309BE80();
      (*(void (**)(void *, void, uint64_t))(v7 + 104))(v25, v33, v6);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v29);
    }
    else
    {
      (*(void (**)(char **, uint64_t))(v7 + 8))(v9, v6);
    }
  }

  return a1;
}

double sub_232FEAEEC(char a1)
{
  uint64_t v4 = sub_23309BEB0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309BEC0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v21 = a1;
  sub_232FF2C48(0, &qword_268757DF0, (uint64_t (*)(void))sub_232FEC670, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, MEMORY[0x263F8E040]);
  sub_23309C0C0();
  if (!v1) {
    return v12;
  }
  id v20 = v1;
  id v13 = v1;
  sub_232F3DAA0();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:

    return v2;
  }
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  if (v14 != *MEMORY[0x263F8DCB0])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_7;
  }
  int v19 = v14;

  (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
  v18[2] = *(void *)v11;
  sub_232F5A658();
  v18[1] = v15;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v11[*(int *)(v15 + 48)], v4);
  uint64_t v17 = sub_23309C0D0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  double v2 = (double)v17;

  return v2;
}

uint64_t SignedClinicalDataEUDCC.protectedHeaderData.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_232E9A9F4(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.header.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  unint64_t v3 = *(void *)(v1 + 32);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  return sub_232E9A9F4(v2, v3);
}

uint64_t SignedClinicalDataEUDCC.payloadData.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_232E9A9F4(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.payload.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 168);
  v11[6] = *(_OWORD *)(v1 + 152);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(v1 + 184);
  uint64_t v12 = *(void *)(v1 + 200);
  long long v3 = *(_OWORD *)(v1 + 104);
  v11[2] = *(_OWORD *)(v1 + 88);
  v11[3] = v3;
  long long v4 = *(_OWORD *)(v1 + 136);
  v11[4] = *(_OWORD *)(v1 + 120);
  v11[5] = v4;
  long long v5 = *(_OWORD *)(v1 + 72);
  v11[0] = *(_OWORD *)(v1 + 56);
  v11[1] = v5;
  long long v6 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 184);
  *(void *)(a1 + 144) = *(void *)(v1 + 200);
  long long v7 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v9;
  return sub_232FEB4C4((uint64_t)v11);
}

uint64_t SignedClinicalDataEUDCC.signatureData.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_232E9A9F4(v1, *(void *)(v0 + 216));
  return v1;
}

__n128 SignedClinicalDataEUDCC.init(header:protectedHeaderData:payload:payloadData:signatureData:)@<Q0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  long long v9 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a9 + 152) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a9 + 168) = v9;
  *(_OWORD *)(a9 + 184) = *(_OWORD *)(a4 + 128);
  long long v10 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a9 + 88) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a9 + 104) = v10;
  long long v11 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a9 + 120) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a9 + 136) = v11;
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a4;
  char v13 = *a1;
  uint64_t v14 = *(void *)(a4 + 144);
  *(_OWORD *)(a9 + 72) = v12;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(unsigned char *)(a9 + 16) = v13;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a9 + 24) = result;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 200) = v14;
  *(void *)(a9 + 208) = a7;
  *(void *)(a9 + 216) = a8;
  return result;
}

uint64_t sub_232FEB410(uint64_t a1)
{
  return a1;
}

unsigned char *SignedClinicalDataEUDCCHeader.init(alg:kid:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = *result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_232FEB4C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_232FEB568()
{
  return sub_23309C420();
}

uint64_t sub_232FEB5B8()
{
  return sub_23309C3E0();
}

uint64_t sub_232FEB5F0()
{
  return sub_23309C420();
}

void *sub_232FEB63C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 4) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_232FEB65C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 4;
  if (!*v1) {
    uint64_t v2 = 1;
  }
  *a1 = v2;
}

uint64_t sub_232FEB674()
{
  if (*v0) {
    return 6580587;
  }
  else {
    return 6777953;
  }
}

uint64_t sub_232FEB698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF5A68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FEB6C0()
{
  if (*v0) {
    return 4;
  }
  else {
    return 1;
  }
}

uint64_t sub_232FEB6D8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 4) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (result == 1) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_232FEB6F4(uint64_t a1)
{
  unint64_t v2 = sub_232FEB980();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEB730(uint64_t a1)
{
  unint64_t v2 = sub_232FEB980();
  return MEMORY[0x270FA00B8](a1, v2);
}

void SignedClinicalDataEUDCCHeader.alg.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SignedClinicalDataEUDCCHeader.kid.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_232E9A9F4(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t SignedClinicalDataEUDCCHeader.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757DA8, (uint64_t (*)(void))sub_232FEB980, (uint64_t)&type metadata for SignedClinicalDataEUDCCHeader.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v7 = (char *)&v12 - v6;
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v13 = *((void *)v1 + 2);
  uint64_t v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FEB980();
  sub_23309C480();
  LOBYTE(v16) = v8;
  char v18 = 0;
  sub_232FEB9D4();
  uint64_t v10 = v15;
  sub_23309C1B0();
  if (!v10)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v13;
    char v18 = 1;
    sub_232FEBA28();
    sub_23309C1B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_232FEB980()
{
  unint64_t result = qword_268757DB0;
  if (!qword_268757DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DB0);
  }
  return result;
}

unint64_t sub_232FEB9D4()
{
  unint64_t result = qword_268757DB8;
  if (!qword_268757DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DB8);
  }
  return result;
}

unint64_t sub_232FEBA28()
{
  unint64_t result = qword_268757DC0;
  if (!qword_268757DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DC0);
  }
  return result;
}

uint64_t SignedClinicalDataEUDCCHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  sub_232FF2C48(0, &qword_268757DC8, (uint64_t (*)(void))sub_232FEB980, (uint64_t)&type metadata for SignedClinicalDataEUDCCHeader.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FEB980();
  sub_23309C460();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v15;
    char v17 = 0;
    sub_232FEBC8C();
    sub_23309C0E0();
    char v11 = v16;
    char v17 = 1;
    sub_232FEBCE0();
    sub_23309C0E0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    long long v13 = v16;
    *(unsigned char *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 8) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_232FEBC8C()
{
  unint64_t result = qword_268757DD0;
  if (!qword_268757DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DD0);
  }
  return result;
}

unint64_t sub_232FEBCE0()
{
  unint64_t result = qword_268757DD8;
  if (!qword_268757DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DD8);
  }
  return result;
}

uint64_t sub_232FEBD34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataEUDCCHeader.init(from:)(a1, a2);
}

uint64_t sub_232FEBD4C(void *a1)
{
  return SignedClinicalDataEUDCCHeader.encode(to:)(a1);
}

BOOL sub_232FEBD64(char *a1, char *a2)
{
  return qword_2330A6148[*a1] == qword_2330A6148[*a2];
}

uint64_t sub_232FEBD88()
{
  return sub_23309C420();
}

uint64_t sub_232FEBDD8()
{
  return sub_23309C3E0();
}

uint64_t sub_232FEBE10()
{
  return sub_23309C420();
}

uint64_t sub_232FEBE5C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_232FF5B3C(*a1);
  *a2 = result;
  return result;
}

void sub_232FEBE88(void *a1@<X8>)
{
  *a1 = qword_2330A6148[*v1];
}

uint64_t sub_232FEBEA0()
{
  uint64_t result = 7566185;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7627113;
      break;
    case 2:
      uint64_t result = 7370853;
      break;
    case 3:
      uint64_t result = 0x7472656368;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232FEBF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF5B8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FEBF34()
{
  return qword_2330A6148[*v0];
}

uint64_t sub_232FEBF4C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_232FF5D10(a1);
  *a2 = result;
  return result;
}

uint64_t sub_232FEBF74(uint64_t a1)
{
  unint64_t v2 = sub_232FEC670();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEBFB0(uint64_t a1)
{
  unint64_t v2 = sub_232FEC670();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCPayload.iss.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double SignedClinicalDataEUDCCPayload.iat.getter()
{
  return *(double *)(v0 + 16);
}

double SignedClinicalDataEUDCCPayload.exp.getter()
{
  return *(double *)(v0 + 24);
}

uint64_t SignedClinicalDataEUDCCPayload.hcert.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  char v3 = *(unsigned char *)(v1 + 41);
  char v4 = *(unsigned char *)(v1 + 42);
  char v5 = *(unsigned char *)(v1 + 43);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 72);
  uint64_t v7 = *(void *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 104);
  uint64_t v10 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 120);
  uint64_t v12 = *(void *)(v1 + 144);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(unsigned char *)(a1 + 11) = v5;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 128);
  *(void *)(a1 + 112) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCPayload.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  char v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_232FF2C48(0, &qword_268757DE0, (uint64_t (*)(void))sub_232FEC61C, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v45 = v4;
  uint64_t v43 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v31 - v5;
  sub_232FF2C48(0, &qword_268757DF0, (uint64_t (*)(void))sub_232FEC670, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, v3);
  uint64_t v8 = v7;
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v31 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FEC670();
  uint64_t v11 = (uint64_t)v46;
  sub_23309C460();
  if (v11) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v12 = v6;
  uint64_t v46 = a1;
  uint64_t v13 = v44;
  uint64_t v14 = v45;
  LOBYTE(v57[0]) = 0;
  uint64_t v15 = sub_23309C0A0();
  uint64_t v17 = v16;
  uint64_t v41 = v15;
  swift_bridgeObjectRetain();
  double v18 = sub_232FEAEEC(1);
  double v19 = sub_232FEAEEC(2);
  LOBYTE(v57[0]) = 3;
  sub_232FEC61C();
  sub_23309C030();
  uint64_t v40 = v8;
  sub_232FEC6C4();
  sub_23309C0E0();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v14);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v40);
  uint64_t v20 = v75;
  uint64_t v21 = v17;
  LOBYTE(v14) = v76;
  char v22 = BYTE2(v76);
  uint64_t v23 = v77;
  uint64_t v44 = v78;
  uint64_t v45 = *((void *)&v77 + 1);
  uint64_t v43 = *((void *)&v78 + 1);
  uint64_t v39 = *((void *)&v79 + 1);
  uint64_t v40 = v79;
  uint64_t v37 = *((void *)&v80 + 1);
  uint64_t v38 = v80;
  uint64_t v35 = *((void *)&v81 + 1);
  uint64_t v36 = v81;
  uint64_t v33 = *((void *)&v82 + 1);
  uint64_t v34 = v82;
  uint64_t v32 = v83;
  char v85 = BYTE1(v76);
  char v84 = HIBYTE(v76);
  uint64_t v24 = v41;
  *(void *)&long long v47 = v41;
  *((void *)&v47 + 1) = v21;
  *(double *)&long long v48 = v18;
  *((double *)&v48 + 1) = v19;
  *(void *)&long long v49 = v75;
  DWORD2(v49) = v76;
  long long v50 = v77;
  long long v51 = v78;
  long long v52 = v79;
  long long v53 = v80;
  long long v54 = v81;
  long long v55 = v82;
  uint64_t v56 = v83;
  sub_232FEB4C4((uint64_t)&v47);
  swift_bridgeObjectRelease();
  long long v25 = v54;
  uint64_t v26 = v42;
  *(_OWORD *)(v42 + 96) = v53;
  *(_OWORD *)(v26 + 112) = v25;
  *(_OWORD *)(v26 + 128) = v55;
  *(void *)(v26 + 144) = v56;
  long long v27 = v50;
  *(_OWORD *)(v26 + 32) = v49;
  *(_OWORD *)(v26 + 48) = v27;
  long long v28 = v52;
  *(_OWORD *)(v26 + 64) = v51;
  *(_OWORD *)(v26 + 80) = v28;
  long long v29 = v48;
  *(_OWORD *)uint64_t v26 = v47;
  *(_OWORD *)(v26 + 16) = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v57[0] = v24;
  v57[1] = v21;
  *(double *)&v57[2] = v18;
  *(double *)&v57[3] = v19;
  v57[4] = v20;
  char v58 = v14;
  char v59 = v85;
  char v60 = v22;
  char v61 = v84;
  uint64_t v62 = v23;
  uint64_t v63 = v45;
  uint64_t v64 = v44;
  uint64_t v65 = v43;
  uint64_t v66 = v40;
  uint64_t v67 = v39;
  uint64_t v68 = v38;
  uint64_t v69 = v37;
  uint64_t v70 = v36;
  uint64_t v71 = v35;
  uint64_t v72 = v34;
  uint64_t v73 = v33;
  uint64_t v74 = v32;
  return sub_232FEB410((uint64_t)v57);
}

unint64_t sub_232FEC61C()
{
  unint64_t result = qword_268757DE8;
  if (!qword_268757DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DE8);
  }
  return result;
}

unint64_t sub_232FEC670()
{
  unint64_t result = qword_268757DF8;
  if (!qword_268757DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757DF8);
  }
  return result;
}

unint64_t sub_232FEC6C4()
{
  unint64_t result = qword_268757E00;
  if (!qword_268757E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E00);
  }
  return result;
}

__n128 SignedClinicalDataEUDCCPayload.init(iss:iat:exp:hcert:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  unint64_t v6 = a3->n128_u64[0];
  char v7 = a3->n128_i8[8];
  char v9 = a3->n128_i8[10];
  uint64_t v10 = a3[2].n128_i64[0];
  uint64_t v11 = a3[2].n128_i64[1];
  uint64_t v12 = a3[7].n128_i64[0];
  char v8 = a3->n128_i8[9];
  char v16 = a3->n128_i8[11];
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  a4[1].n128_f64[0] = a5;
  a4[1].n128_f64[1] = a6;
  a4[2].n128_u64[0] = v6;
  a4[2].n128_u8[8] = v7;
  a4[2].n128_u8[9] = v8;
  a4[2].n128_u8[10] = v9;
  a4[2].n128_u8[11] = v16;
  a4[3] = a3[1];
  a4[4].n128_u64[0] = v10;
  a4[4].n128_u64[1] = v11;
  __n128 v13 = a3[4];
  a4[5] = a3[3];
  a4[6] = v13;
  __n128 result = a3[5];
  __n128 v15 = a3[6];
  a4[7] = result;
  a4[8] = v15;
  a4[9].n128_u64[0] = v12;
  return result;
}

uint64_t SignedClinicalDataEUDCCPayload.debugDescription.getter()
{
  return 0;
}

uint64_t SignedClinicalDataEUDCCPayload.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757E08, (uint64_t (*)(void))sub_232FEC670, (uint64_t)&type metadata for SignedClinicalDataEUDCCPayload.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)&v15 - v6;
  uint64_t v32 = *(void *)(v1 + 32);
  int v52 = *(unsigned __int8 *)(v1 + 40);
  int v8 = *(unsigned __int8 *)(v1 + 41);
  int v30 = *(unsigned __int8 *)(v1 + 42);
  int v31 = v8;
  int v29 = *(unsigned __int8 *)(v1 + 43);
  uint64_t v28 = *(void *)(v1 + 48);
  uint64_t v27 = *(void *)(v1 + 56);
  uint64_t v26 = *(void *)(v1 + 64);
  uint64_t v25 = *(void *)(v1 + 72);
  uint64_t v24 = *(void *)(v1 + 80);
  uint64_t v23 = *(void *)(v1 + 88);
  uint64_t v22 = *(void *)(v1 + 96);
  uint64_t v21 = *(void *)(v1 + 104);
  uint64_t v20 = *(void *)(v1 + 112);
  uint64_t v19 = *(void *)(v1 + 120);
  uint64_t v18 = *(void *)(v1 + 128);
  uint64_t v17 = *(void *)(v1 + 136);
  uint64_t v16 = *(void *)(v1 + 144);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FEC670();
  sub_23309C480();
  LOBYTE(v34) = 0;
  uint64_t v9 = v33;
  sub_23309C170();
  if (!v9)
  {
    char v11 = v30;
    char v10 = v31;
    char v12 = v52;
    uint64_t v13 = v32;
    LOBYTE(v34) = 1;
    sub_23309C190();
    LOBYTE(v34) = 2;
    sub_23309C190();
    uint64_t v34 = v13;
    char v35 = v12;
    char v36 = v10;
    char v37 = v11;
    char v38 = v29;
    uint64_t v39 = v28;
    uint64_t v40 = v27;
    uint64_t v41 = v26;
    uint64_t v42 = v25;
    uint64_t v43 = v24;
    uint64_t v44 = v23;
    uint64_t v45 = v22;
    uint64_t v46 = v21;
    uint64_t v47 = v20;
    uint64_t v48 = v19;
    uint64_t v49 = v18;
    uint64_t v50 = v17;
    uint64_t v51 = v16;
    char v53 = 3;
    sub_232FECC08();
    sub_23309C1B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_232FECC08()
{
  unint64_t result = qword_268757E10;
  if (!qword_268757E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E10);
  }
  return result;
}

uint64_t sub_232FECC5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataEUDCCPayload.init(from:)(a1, a2);
}

uint64_t sub_232FECC74(void *a1)
{
  return SignedClinicalDataEUDCCPayload.encode(to:)(a1);
}

uint64_t SignedClinicalDataEUDCCPayload.expDate.getter()
{
  return sub_23309B150();
}

uint64_t SignedClinicalDataEUDCCPayload.iatDate.getter()
{
  return sub_23309B150();
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.ci.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.co.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.dn.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.dt.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.is.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.ma.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.mp.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.sd.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.tg.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.vp.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v57 = a2;
  sub_232FF2C48(0, &qword_268757E18, (uint64_t (*)(void))sub_232FED640, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v8 = (char *)&v38 - v7;
  uint64_t v9 = a1[3];
  uint64_t v69 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_232FED640();
  char v58 = v8;
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  }
  uint64_t v10 = v6;
  LOBYTE(v68[0]) = 0;
  uint64_t v11 = sub_23309C0A0();
  uint64_t v13 = v12;
  LOBYTE(v68[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v54 = sub_23309C0A0();
  LOBYTE(v68[0]) = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_23309C0A0();
  uint64_t v16 = v15;
  LOBYTE(v68[0]) = 4;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23309C0A0();
  uint64_t v56 = v18;
  uint64_t v52 = v19;
  LOBYTE(v68[0]) = 5;
  uint64_t v55 = v20;
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_23309C0A0();
  LOBYTE(v68[0]) = 6;
  uint64_t v51 = v21;
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_23309C0A0();
  LOBYTE(v68[0]) = 8;
  uint64_t v50 = v22;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_23309C0A0();
  uint64_t v47 = v24;
  uint64_t v48 = v16;
  uint64_t v44 = v23;
  LOBYTE(v68[0]) = 9;
  swift_bridgeObjectRetain();
  uint64_t v45 = 0;
  uint64_t v42 = sub_23309C0A0();
  uint64_t v43 = v25;
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_232FEAA6C(2);
  uint64_t v26 = v43;
  uint64_t v27 = sub_232FEAA6C(7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v58, v5);
  uint64_t v39 = v11;
  *(void *)&long long v59 = v11;
  *((void *)&v59 + 1) = v13;
  *(void *)&long long v60 = v54;
  *((void *)&v60 + 1) = v16;
  *(void *)&long long v61 = v41;
  *((void *)&v61 + 1) = v53;
  uint64_t v28 = v56;
  uint64_t v29 = v51;
  *(void *)&long long v62 = v56;
  *((void *)&v62 + 1) = v52;
  uint64_t v30 = v50;
  *(void *)&long long v63 = v55;
  *((void *)&v63 + 1) = v49;
  *(void *)&long long v64 = v51;
  *((void *)&v64 + 1) = v46;
  *(void *)&long long v65 = v50;
  *((void *)&v65 + 1) = v27;
  uint64_t v40 = v27;
  uint64_t v31 = v47;
  *(void *)&long long v66 = v44;
  *((void *)&v66 + 1) = v47;
  *(void *)&long long v67 = v42;
  *((void *)&v67 + 1) = v26;
  sub_232FED694((uint64_t)&v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v32 = v66;
  uint64_t v33 = v57;
  v57[6] = v65;
  v33[7] = v32;
  v33[8] = v67;
  long long v34 = v62;
  void v33[2] = v61;
  v33[3] = v34;
  long long v35 = v64;
  v33[4] = v63;
  v33[5] = v35;
  long long v36 = v60;
  _OWORD *v33 = v59;
  v33[1] = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  v68[0] = v39;
  v68[1] = v13;
  v68[2] = v54;
  v68[3] = v48;
  v68[4] = v41;
  v68[5] = v53;
  v68[6] = v28;
  v68[7] = v52;
  v68[8] = v55;
  v68[9] = v49;
  v68[10] = v29;
  v68[11] = v46;
  v68[12] = v30;
  v68[13] = v40;
  v68[14] = v44;
  v68[15] = v31;
  v68[16] = v42;
  v68[17] = v26;
  return sub_232FED72C((uint64_t)v68);
}

unint64_t sub_232FED640()
{
  unint64_t result = qword_268757E20;
  if (!qword_268757E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E20);
  }
  return result;
}

uint64_t sub_232FED694(uint64_t a1)
{
  return a1;
}

uint64_t sub_232FED72C(uint64_t a1)
{
  return a1;
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3E0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3E0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FED97C(char a1)
{
  return qword_2330A6168[a1];
}

uint64_t sub_232FED994()
{
  return sub_232FED97C(*v0);
}

uint64_t sub_232FED99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF5D60(a1, a2);
  *a3 = result;
  return result;
}

void sub_232FED9C4(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_232FED9D0(uint64_t a1)
{
  unint64_t v2 = sub_232FED640();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEDA0C(uint64_t a1)
{
  unint64_t v2 = sub_232FED640();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757E28, (uint64_t (*)(void))sub_232FED640, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = v1[2];
  v18[14] = v1[3];
  v18[15] = v8;
  uint64_t v9 = v1[4];
  v18[12] = v1[5];
  v18[13] = v9;
  uint64_t v10 = v1[6];
  v18[10] = v1[7];
  v18[11] = v10;
  uint64_t v11 = v1[8];
  uint64_t v12 = v1[9];
  v18[8] = v1[10];
  v18[9] = v11;
  uint64_t v13 = v1[11];
  v18[6] = v1[12];
  v18[7] = v12;
  v18[4] = v1[13];
  v18[5] = v13;
  uint64_t v14 = v1[15];
  v18[2] = v1[14];
  void v18[3] = v14;
  uint64_t v15 = v1[16];
  v18[0] = v1[17];
  v18[1] = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FED640();
  sub_23309C480();
  char v28 = 0;
  uint64_t v16 = v18[16];
  sub_23309C170();
  if (!v16)
  {
    char v27 = 1;
    sub_23309C170();
    char v26 = 2;
    sub_23309C1A0();
    char v25 = 3;
    sub_23309C170();
    char v24 = 4;
    sub_23309C170();
    char v23 = 5;
    sub_23309C170();
    char v22 = 6;
    sub_23309C170();
    char v21 = 7;
    sub_23309C1A0();
    char v20 = 8;
    sub_23309C170();
    char v19 = 9;
    sub_23309C170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Vaccination.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t sub_232FEDDDC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Vaccination.init(from:)(a1, a2);
}

uint64_t sub_232FEDDF4(void *a1)
{
  return SignedClinicalDataEUDCCEntry.Vaccination.encode(to:)(a1);
}

uint64_t sub_232FEDE0C()
{
  return sub_23309C420();
}

uint64_t sub_232FEDE50()
{
  return sub_23309C420();
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.ci.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.co.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.is.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.nm.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.ma.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.sc.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tc.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tg.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tr.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.tt.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.hash(into:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[13];
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v3 = v5;
    if (v2)
    {
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23309C3F0();
    uint64_t v3 = v5;
    if (v2) {
      goto LABEL_3;
    }
  }
  sub_23309C3F0();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3F0();
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FEE2D4(char a1)
{
  return qword_2330A61B8[a1];
}

uint64_t sub_232FEE2EC()
{
  return sub_232FEE2D4(*v0);
}

uint64_t sub_232FEE2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF6084(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FEE31C(uint64_t a1)
{
  unint64_t v2 = sub_232FF1D58();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEE358(uint64_t a1)
{
  unint64_t v2 = sub_232FF1D58();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757E30, (uint64_t (*)(void))sub_232FF1D58, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v19 - v6;
  uint64_t v8 = v1[2];
  v19[17] = v1[3];
  v19[18] = v8;
  uint64_t v9 = v1[4];
  v19[15] = v1[5];
  v19[16] = v9;
  uint64_t v10 = v1[6];
  v19[13] = v1[7];
  v19[14] = v10;
  uint64_t v11 = v1[8];
  v19[11] = v1[9];
  v19[12] = v11;
  uint64_t v12 = v1[11];
  v19[9] = v1[10];
  v19[10] = v12;
  uint64_t v13 = v1[13];
  v19[7] = v1[12];
  v19[8] = v13;
  uint64_t v14 = v1[15];
  v19[5] = v1[14];
  v19[6] = v14;
  uint64_t v15 = v1[17];
  v19[3] = v1[16];
  v19[4] = v15;
  uint64_t v16 = v1[18];
  v19[1] = v1[19];
  v19[2] = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF1D58();
  sub_23309C480();
  char v29 = 0;
  uint64_t v17 = v19[19];
  sub_23309C170();
  if (!v17)
  {
    char v28 = 1;
    sub_23309C170();
    char v27 = 2;
    sub_23309C170();
    char v26 = 3;
    sub_23309C110();
    char v25 = 4;
    sub_23309C110();
    char v24 = 5;
    sub_23309C170();
    char v23 = 6;
    sub_23309C110();
    char v22 = 7;
    sub_23309C170();
    char v21 = 8;
    sub_23309C170();
    char v20 = 9;
    sub_23309C170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t SignedClinicalDataEUDCCEntry.Laboratory.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_232FF2C48(0, &qword_268757E40, (uint64_t (*)(void))sub_232FF1D58, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v66 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = a1[3];
  long long v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_232FF1D58();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  }
  uint64_t v10 = v6;
  long long v63 = a2;
  LOBYTE(v78[0]) = 0;
  uint64_t v11 = sub_23309C0A0();
  uint64_t v13 = v12;
  LOBYTE(v78[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v61 = sub_23309C0A0();
  uint64_t v62 = v11;
  LOBYTE(v78[0]) = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_23309C0A0();
  uint64_t v16 = v15;
  LOBYTE(v78[0]) = 3;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23309C040();
  uint64_t v65 = v18;
  uint64_t v59 = v19;
  LOBYTE(v78[0]) = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_23309C040();
  uint64_t v64 = v21;
  uint64_t v56 = v22;
  LOBYTE(v78[0]) = 5;
  uint64_t v58 = v23;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_23309C0A0();
  LOBYTE(v78[0]) = 6;
  uint64_t v57 = v24;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_23309C040();
  uint64_t v54 = v26;
  uint64_t v55 = v16;
  uint64_t v50 = v25;
  LOBYTE(v78[0]) = 7;
  swift_bridgeObjectRetain();
  uint64_t v52 = 0;
  uint64_t v49 = sub_23309C0A0();
  LOBYTE(v78[0]) = 8;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_23309C0A0();
  uint64_t v51 = v28;
  char v79 = 9;
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_23309C0A0();
  uint64_t v33 = v32;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v66);
  *(void *)&long long v68 = v62;
  *((void *)&v68 + 1) = v13;
  *(void *)&long long v69 = v61;
  *((void *)&v69 + 1) = v16;
  *(void *)&long long v70 = v60;
  *((void *)&v70 + 1) = v65;
  *(void *)&long long v71 = v59;
  *((void *)&v71 + 1) = v64;
  *(void *)&long long v72 = v56;
  *((void *)&v72 + 1) = v58;
  *(void *)&long long v73 = v53;
  *((void *)&v73 + 1) = v57;
  *(void *)&long long v74 = v50;
  *((void *)&v74 + 1) = v54;
  *(void *)&long long v75 = v49;
  *((void *)&v75 + 1) = v51;
  *(void *)&long long v76 = v48;
  *((void *)&v76 + 1) = v30;
  uint64_t v46 = v30;
  uint64_t v47 = v31;
  *(void *)&long long v77 = v31;
  *((void *)&v77 + 1) = v33;
  sub_232FF1DAC((uint64_t)&v68);
  swift_bridgeObjectRelease();
  uint64_t v34 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v54;
  swift_bridgeObjectRelease();
  uint64_t v36 = v51;
  swift_bridgeObjectRelease();
  uint64_t v37 = v46;
  swift_bridgeObjectRelease();
  long long v38 = v75;
  uint64_t v39 = v63;
  v63[6] = v74;
  v39[7] = v38;
  long long v40 = v77;
  v39[8] = v76;
  v39[9] = v40;
  long long v41 = v71;
  v39[2] = v70;
  v39[3] = v41;
  long long v42 = v73;
  v39[4] = v72;
  v39[5] = v42;
  long long v43 = v69;
  *uint64_t v39 = v68;
  v39[1] = v43;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  v78[0] = v62;
  v78[1] = v13;
  v78[2] = v61;
  v78[3] = v34;
  v78[4] = v60;
  v78[5] = v65;
  v78[6] = v59;
  v78[7] = v64;
  v78[8] = v56;
  v78[9] = v58;
  v78[10] = v53;
  v78[11] = v57;
  v78[12] = v50;
  v78[13] = v35;
  v78[14] = v49;
  v78[15] = v36;
  v78[16] = v48;
  v78[17] = v37;
  v78[18] = v47;
  v78[19] = v33;
  return sub_232FF1E64((uint64_t)v78);
}

uint64_t sub_232FEEFF4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Laboratory.init(from:)(a1, a2);
}

uint64_t sub_232FEF00C(void *a1)
{
  return SignedClinicalDataEUDCCEntry.Laboratory.encode(to:)(a1);
}

uint64_t sub_232FEF024()
{
  return sub_23309C420();
}

uint64_t sub_232FEF068()
{
  return sub_23309C420();
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.ci.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.co.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.df.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.du.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.fr.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.is.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.tg.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FEF354()
{
  return qword_2330A6208[*v0];
}

uint64_t sub_232FEF36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF63A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FEF394(uint64_t a1)
{
  unint64_t v2 = sub_232FF215C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEF3D0(uint64_t a1)
{
  unint64_t v2 = sub_232FF215C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757E48, (uint64_t (*)(void))sub_232FF215C, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v16 - v6;
  uint64_t v8 = v1[2];
  v16[11] = v1[3];
  v16[12] = v8;
  uint64_t v9 = v1[4];
  v16[9] = v1[5];
  v16[10] = v9;
  uint64_t v10 = v1[6];
  v16[7] = v1[7];
  v16[8] = v10;
  uint64_t v11 = v1[8];
  v16[5] = v1[9];
  v16[6] = v11;
  uint64_t v12 = v1[11];
  v16[3] = v1[10];
  v16[4] = v12;
  uint64_t v13 = v1[12];
  v16[1] = v1[13];
  v16[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF215C();
  sub_23309C480();
  char v23 = 0;
  uint64_t v14 = v16[13];
  sub_23309C170();
  if (!v14)
  {
    char v22 = 1;
    sub_23309C170();
    char v21 = 2;
    sub_23309C170();
    char v20 = 3;
    sub_23309C170();
    char v19 = 4;
    sub_23309C170();
    char v18 = 5;
    sub_23309C170();
    char v17 = 6;
    sub_23309C170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t SignedClinicalDataEUDCCEntry.Recovery.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v46 = a2;
  sub_232FF2C48(0, &qword_268757E58, (uint64_t (*)(void))sub_232FF215C, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v47 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF215C();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v45 = a1;
  uint64_t v8 = v5;
  char v54 = 0;
  uint64_t v9 = v47;
  uint64_t v10 = v7;
  uint64_t v11 = sub_23309C0A0();
  uint64_t v13 = v12;
  char v53 = 1;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_23309C0A0();
  uint64_t v16 = v15;
  uint64_t v17 = v14;
  char v52 = 2;
  swift_bridgeObjectRetain();
  uint64_t v42 = sub_23309C0A0();
  uint64_t v43 = v17;
  char v51 = 3;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_23309C0A0();
  uint64_t v44 = v22;
  uint64_t v40 = v21;
  char v50 = 4;
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_23309C0A0();
  char v49 = 5;
  uint64_t v41 = v23;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_23309C0A0();
  uint64_t v38 = v11;
  char v48 = 6;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_23309C0A0();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v36 = v26;
  uint64_t v28 = v10;
  uint64_t v30 = v29;
  v27(v28, v9);
  swift_bridgeObjectRetain();
  uint64_t v31 = v16;
  swift_bridgeObjectRetain();
  uint64_t v32 = v20;
  swift_bridgeObjectRetain();
  uint64_t v33 = v44;
  swift_bridgeObjectRetain();
  uint64_t v34 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v46;
  uint64_t *v46 = v38;
  v35[1] = v13;
  v35[2] = v43;
  v35[3] = v31;
  v35[4] = v42;
  v35[5] = v32;
  v35[6] = v40;
  v35[7] = v33;
  v35[8] = v39;
  v35[9] = v34;
  v35[10] = v37;
  v35[11] = v25;
  v35[12] = v36;
  v35[13] = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FEFCE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.Recovery.init(from:)(a1, a2);
}

uint64_t sub_232FEFCF8(void *a1)
{
  return SignedClinicalDataEUDCCEntry.Recovery.encode(to:)(a1);
}

uint64_t sub_232FEFD10()
{
  return sub_23309C420();
}

uint64_t sub_232FEFD7C()
{
  return sub_23309C420();
}

void SignedClinicalDataEUDCCEntry.dob.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  char v4 = *(unsigned char *)(v1 + 10);
  char v5 = *(unsigned char *)(v1 + 11);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(unsigned char *)(a1 + 11) = v5;
}

uint64_t SignedClinicalDataEUDCCEntry.nam.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.r.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.t.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.v.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataEUDCCEntry.ver.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232FEFED8()
{
  uint64_t result = 6451044;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7168366;
      break;
    case 2:
      uint64_t result = 114;
      break;
    case 3:
      uint64_t result = 116;
      break;
    case 4:
      uint64_t result = 118;
      break;
    case 5:
      uint64_t result = 7497078;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232FEFF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF65E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_232FEFF84(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_232FEFF90(uint64_t a1)
{
  unint64_t v2 = sub_232FF253C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FEFFCC(uint64_t a1)
{
  unint64_t v2 = sub_232FF253C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCEntry.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757E60, (uint64_t (*)(void))sub_232FF253C, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v33 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v21 - v5;
  uint64_t v34 = *v1;
  char v7 = *((unsigned char *)v1 + 8);
  char v8 = *((unsigned char *)v1 + 9);
  int v44 = *((unsigned __int8 *)v1 + 10);
  char v9 = *((unsigned char *)v1 + 11);
  uint64_t v10 = v1[2];
  uint64_t v31 = v1[3];
  uint64_t v32 = v10;
  uint64_t v11 = v1[4];
  uint64_t v29 = v1[5];
  uint64_t v30 = v11;
  uint64_t v12 = v1[6];
  uint64_t v27 = v1[7];
  uint64_t v28 = v12;
  uint64_t v13 = v1[8];
  uint64_t v25 = v1[9];
  uint64_t v26 = v13;
  uint64_t v14 = v1[10];
  uint64_t v23 = v1[11];
  uint64_t v24 = v14;
  uint64_t v22 = v1[12];
  v21[1] = v1[13];
  v21[2] = v1[14];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF253C();
  sub_23309C480();
  uint64_t v36 = v34;
  LOBYTE(v37) = v7;
  BYTE1(v37) = v8;
  BYTE2(v37) = v44;
  BYTE3(v37) = v9;
  char v45 = 0;
  sub_232EBD66C();
  uint64_t v15 = v35;
  sub_23309C1B0();
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v6, v4);
  }
  uint64_t v18 = v23;
  uint64_t v17 = v24;
  uint64_t v19 = v22;
  uint64_t v20 = v33;
  uint64_t v36 = v32;
  uint64_t v37 = v31;
  uint64_t v38 = v30;
  uint64_t v39 = v29;
  uint64_t v40 = v28;
  uint64_t v41 = v27;
  uint64_t v42 = v26;
  uint64_t v43 = v25;
  char v45 = 1;
  sub_232FF2590();
  sub_23309C1B0();
  uint64_t v36 = v17;
  char v45 = 2;
  sub_232FF2BA8(0, &qword_268757E78, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, MEMORY[0x263F8D488]);
  sub_232FF25E4();
  sub_23309C150();
  uint64_t v36 = v18;
  char v45 = 3;
  sub_232FF2BA8(0, &qword_268757E90, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, MEMORY[0x263F8D488]);
  sub_232FF26CC();
  sub_23309C150();
  uint64_t v36 = v19;
  char v45 = 4;
  sub_232FF2BA8(0, &qword_268757EA8, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, MEMORY[0x263F8D488]);
  sub_232FF27B4();
  sub_23309C150();
  LOBYTE(v36) = 5;
  sub_23309C170();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v6, v4);
}

uint64_t SignedClinicalDataEUDCCEntry.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_232FF2C48(0, &qword_268757EC0, (uint64_t (*)(void))sub_232FF253C, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v38 - v8;
  uint64_t v10 = a1[3];
  char v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_232FF253C();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  uint64_t v52 = v7;
  char v49 = a2;
  char v63 = 0;
  sub_232EA4058();
  sub_23309C0E0();
  uint64_t v11 = v54;
  int v12 = v55;
  int v13 = BYTE1(v55);
  int v14 = BYTE2(v55);
  int v15 = BYTE3(v55);
  char v63 = 1;
  sub_232FF289C();
  sub_23309C0E0();
  int v44 = v15;
  uint64_t v45 = v11;
  int v46 = v14;
  int v47 = v13;
  int v62 = v12;
  uint64_t v17 = v55;
  uint64_t v18 = v57;
  uint64_t v41 = v56;
  uint64_t v42 = v54;
  uint64_t v19 = v59;
  uint64_t v40 = v58;
  uint64_t v20 = v61;
  uint64_t v43 = v60;
  sub_232FF2BA8(0, &qword_268757E78, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, MEMORY[0x263F8D488]);
  char v63 = 2;
  sub_232FF28F0();
  uint64_t v48 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v50 = v20;
  uint64_t v51 = v19;
  uint64_t v39 = v18;
  uint64_t v21 = v54;
  sub_232FF2BA8(0, &qword_268757E90, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, MEMORY[0x263F8D488]);
  char v63 = 3;
  sub_232FF29D8();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v22 = v54;
  sub_232FF2BA8(0, &qword_268757EA8, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, MEMORY[0x263F8D488]);
  char v63 = 4;
  sub_232FF2AC0();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v23 = v22;
  uint64_t v24 = v21;
  uint64_t v25 = v54;
  LOBYTE(v54) = 5;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_23309C0A0();
  uint64_t v28 = v27;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v52 = v26;
  v29(v9, v6);
  uint64_t v30 = v48;
  swift_bridgeObjectRetain();
  uint64_t v31 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = v49;
  *char v49 = v45;
  *((unsigned char *)v34 + 8) = v62;
  *((unsigned char *)v34 + 9) = v47;
  *((unsigned char *)v34 + 10) = v46;
  *((unsigned char *)v34 + 11) = v44;
  v34[2] = v42;
  v34[3] = v30;
  v34[4] = v41;
  v34[5] = v33;
  uint64_t v35 = v51;
  v34[6] = v40;
  v34[7] = v35;
  v34[8] = v43;
  v34[9] = v32;
  v34[10] = v24;
  v34[11] = v23;
  uint64_t v37 = v52;
  uint64_t v36 = (uint64_t)v53;
  v34[12] = v25;
  v34[13] = v37;
  v34[14] = v28;
  __swift_destroy_boxed_opaque_existential_1(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FF0B54@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntry.init(from:)(a1, a2);
}

uint64_t sub_232FF0B6C(void *a1)
{
  return SignedClinicalDataEUDCCEntry.encode(to:)(a1);
}

uint64_t SignedClinicalDataEUDCCEntryName.fn.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.fnt.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.gn.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.gnt.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataEUDCCEntryName.debugDescription.getter()
{
  return 0;
}

uint64_t sub_232FF0E0C()
{
  uint64_t result = 28262;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7630438;
      break;
    case 2:
      uint64_t result = 28263;
      break;
    case 3:
      uint64_t result = 7630439;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232FF0E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF67E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FF0E9C(uint64_t a1)
{
  unint64_t v2 = sub_232FF2BF4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FF0ED8(uint64_t a1)
{
  unint64_t v2 = sub_232FF2BF4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataEUDCCEntryName.encode(to:)(void *a1)
{
  sub_232FF2C48(0, &qword_268757F00, (uint64_t (*)(void))sub_232FF2BF4, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v13 - v6;
  uint64_t v8 = v1[2];
  v13[5] = v1[3];
  v13[6] = v8;
  uint64_t v9 = v1[4];
  v13[3] = v1[5];
  v13[4] = v9;
  uint64_t v10 = v1[6];
  v13[1] = v1[7];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF2BF4();
  sub_23309C480();
  char v17 = 0;
  uint64_t v11 = v13[7];
  sub_23309C110();
  if (!v11)
  {
    char v16 = 1;
    sub_23309C170();
    char v15 = 2;
    sub_23309C110();
    char v14 = 3;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataEUDCCEntryName.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v30 = a2;
  sub_232FF2C48(0, &qword_268757F10, (uint64_t (*)(void))sub_232FF2BF4, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v25 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF2BF4();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  char v34 = 0;
  uint64_t v10 = v5;
  uint64_t v11 = sub_23309C040();
  uint64_t v13 = v12;
  char v33 = 1;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_23309C0A0();
  uint64_t v29 = v15;
  uint64_t v27 = v14;
  uint64_t v28 = v11;
  char v32 = 2;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_23309C040();
  char v31 = 3;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_23309C040();
  uint64_t v21 = v20;
  uint64_t v22 = v18;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  swift_bridgeObjectRetain();
  uint64_t v24 = v29;
  uint64_t v23 = v30;
  uint64_t *v30 = v28;
  v23[1] = v13;
  v23[2] = v27;
  v23[3] = v24;
  v23[4] = v26;
  v23[5] = v17;
  v23[6] = v22;
  v23[7] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232FF1494@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return SignedClinicalDataEUDCCEntryName.init(from:)(a1, a2);
}

uint64_t sub_232FF14AC(void *a1)
{
  return SignedClinicalDataEUDCCEntryName.encode(to:)(a1);
}

uint64_t sub_232FF14C8()
{
  return sub_23309C420();
}

uint64_t sub_232FF150C()
{
  return sub_23309C3E0();
}

uint64_t sub_232FF1534()
{
  return sub_23309C420();
}

void *sub_232FF1574@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_232FF1588(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_232FF1594()
{
  return 0x765F6363645F7565;
}

uint64_t sub_232FF15B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x765F6363645F7565 && a2 == 0xE900000000000031)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_23309C220();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_232FF1654()
{
  return 1;
}

uint64_t sub_232FF1660@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 1;
  return result;
}

uint64_t sub_232FF1670(uint64_t a1)
{
  unint64_t v2 = sub_232FEC61C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FF16AC(uint64_t a1)
{
  unint64_t v2 = sub_232FEC61C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v45 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v41 = a1[8];
  uint64_t v47 = a1[9];
  uint64_t v43 = a1[10];
  uint64_t v39 = a1[11];
  uint64_t v33 = a1[12];
  uint64_t v37 = a1[13];
  uint64_t v35 = a1[14];
  uint64_t v31 = a1[15];
  uint64_t v29 = a1[16];
  uint64_t v27 = a1[17];
  uint64_t v24 = a1[19];
  uint64_t v25 = a1[18];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[7];
  uint64_t v44 = a2[6];
  uint64_t v40 = a2[8];
  uint64_t v46 = a2[9];
  uint64_t v42 = a2[10];
  uint64_t v38 = a2[11];
  uint64_t v32 = a2[12];
  uint64_t v36 = a2[13];
  uint64_t v34 = a2[14];
  uint64_t v30 = a2[15];
  uint64_t v28 = a2[16];
  uint64_t v26 = a2[17];
  uint64_t v22 = a2[19];
  uint64_t v23 = a2[18];
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v12 = sub_23309C220();
    uint64_t result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
  }
  if (v2 != v7 || v3 != v8)
  {
    char v14 = sub_23309C220();
    uint64_t result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  if (v4 != v9 || v5 != v10)
  {
    char v15 = sub_23309C220();
    uint64_t result = 0;
    if ((v15 & 1) == 0) {
      return result;
    }
  }
  if (v6)
  {
    if (!v11) {
      return 0;
    }
    if (v45 != v44 || v6 != v11)
    {
      char v16 = sub_23309C220();
      uint64_t result = 0;
      if ((v16 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (v47)
  {
    if (!v46) {
      return 0;
    }
    if (v41 != v40 || v47 != v46)
    {
      char v17 = sub_23309C220();
      uint64_t result = 0;
      if ((v17 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v46)
  {
    return 0;
  }
  if (v43 != v42 || v39 != v38)
  {
    char v18 = sub_23309C220();
    uint64_t result = 0;
    if ((v18 & 1) == 0) {
      return result;
    }
  }
  if (v37)
  {
    if (v36)
    {
      if (v33 != v32 || v37 != v36)
      {
        char v19 = sub_23309C220();
        uint64_t result = 0;
        if ((v19 & 1) == 0) {
          return result;
        }
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (v36) {
    return 0;
  }
LABEL_36:
  if (v35 == v34 && v31 == v30 || (v20 = sub_23309C220(), uint64_t result = 0, (v20 & 1) != 0))
  {
    if (v29 == v28 && v27 == v26 || (v21 = sub_23309C220(), uint64_t result = 0, (v21 & 1) != 0))
    {
      if (v25 == v23 && v24 == v22)
      {
        return 1;
      }
      else
      {
        return sub_23309C220();
      }
    }
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV11VaccinationV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v41 = a1[7];
  uint64_t v39 = a1[8];
  uint64_t v37 = a1[9];
  uint64_t v35 = a1[10];
  uint64_t v32 = a1[12];
  uint64_t v33 = a1[11];
  uint64_t v29 = a1[13];
  uint64_t v27 = a1[14];
  uint64_t v25 = a1[15];
  uint64_t v22 = a1[17];
  uint64_t v23 = a1[16];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v40 = a2[7];
  uint64_t v38 = a2[8];
  uint64_t v36 = a2[9];
  uint64_t v34 = a2[10];
  uint64_t v30 = a2[12];
  uint64_t v31 = a2[11];
  uint64_t v28 = a2[13];
  uint64_t v26 = a2[14];
  uint64_t v24 = a2[15];
  uint64_t v20 = a2[17];
  uint64_t v21 = a2[16];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_23309C220(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      if (v4 != v10) {
        return 0;
      }
    }
    else
    {
      char v14 = sub_23309C220();
      uint64_t result = 0;
      if ((v14 & 1) == 0 || v4 != v10) {
        return result;
      }
    }
    if (v5 == v9 && v6 == v11 || (v15 = sub_23309C220(), uint64_t result = 0, (v15 & 1) != 0))
    {
      if (v41 == v40 && v39 == v38 || (v16 = sub_23309C220(), uint64_t result = 0, (v16 & 1) != 0))
      {
        if (v37 == v36 && v35 == v34 || (v17 = sub_23309C220(), uint64_t result = 0, (v17 & 1) != 0))
        {
          if (v33 == v31 && v32 == v30)
          {
            if (v29 != v28) {
              return 0;
            }
          }
          else
          {
            char v18 = sub_23309C220();
            uint64_t result = 0;
            if ((v18 & 1) == 0 || v29 != v28) {
              return result;
            }
          }
          if (v27 == v26 && v25 == v24 || (v19 = sub_23309C220(), uint64_t result = 0, (v19 & 1) != 0))
          {
            if (v23 == v21 && v22 == v20)
            {
              return 1;
            }
            else
            {
              return sub_23309C220();
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_232FF1D58()
{
  unint64_t result = qword_268757E38;
  if (!qword_268757E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E38);
  }
  return result;
}

uint64_t sub_232FF1DAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_232FF1E64(uint64_t a1)
{
  return a1;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV8RecoveryV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v32 = a1[6];
  uint64_t v30 = a1[8];
  uint64_t v31 = a1[7];
  uint64_t v26 = a1[10];
  uint64_t v24 = a1[11];
  uint64_t v21 = a1[13];
  uint64_t v22 = a1[12];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v28 = a1[9];
  uint64_t v29 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v25 = a2[10];
  uint64_t v23 = a2[11];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[12];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_23309C220(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v2 == v6 && v3 == v7 || (v14 = sub_23309C220(), uint64_t result = 0, (v14 & 1) != 0))
    {
      if (v4 == v9 && v5 == v8 || (v15 = sub_23309C220(), uint64_t result = 0, (v15 & 1) != 0))
      {
        if (v32 == v11 && v31 == v10 || (v16 = sub_23309C220(), uint64_t result = 0, (v16 & 1) != 0))
        {
          if (v30 == v29 && v28 == v27 || (v17 = sub_23309C220(), uint64_t result = 0, (v17 & 1) != 0))
          {
            if (v26 == v25 && v24 == v23 || (v18 = sub_23309C220(), uint64_t result = 0, (v18 & 1) != 0))
            {
              if (v22 == v20 && v21 == v19)
              {
                return 1;
              }
              else
              {
                return sub_23309C220();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_232FF215C()
{
  unint64_t result = qword_268757E50;
  if (!qword_268757E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E50);
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v14 = a2[7];
  if (!v3)
  {
    uint64_t v19 = a2[6];
    uint64_t v20 = a1[6];
    if (v9) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v9) {
    return 0;
  }
  uint64_t v19 = a2[6];
  uint64_t v20 = a1[6];
  if (*a1 == *a2 && v3 == v9 || (v15 = sub_23309C220(), uint64_t result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    if (v4 != v10 || v6 != v11)
    {
      char v17 = sub_23309C220();
      uint64_t result = 0;
      if ((v17 & 1) == 0) {
        return result;
      }
    }
    if (v7)
    {
      if (!v13) {
        return 0;
      }
      if (v5 != v12 || v7 != v13)
      {
        char v18 = sub_23309C220();
        uint64_t result = 0;
        if ((v18 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v8)
    {
      if (v14 && (v20 == v19 && v8 == v14 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v14)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  char v3 = *((unsigned char *)a1 + 9);
  char v4 = *((unsigned char *)a1 + 10);
  char v5 = *((unsigned char *)a1 + 11);
  uint64_t v36 = a1[3];
  uint64_t v37 = a1[2];
  uint64_t v34 = a1[5];
  uint64_t v35 = a1[4];
  uint64_t v6 = a1[8];
  uint64_t v32 = a1[7];
  uint64_t v33 = a1[6];
  uint64_t v7 = a1[9];
  uint64_t v31 = a1[10];
  uint64_t v29 = a1[11];
  uint64_t v27 = a1[12];
  uint64_t v24 = a1[14];
  uint64_t v25 = a1[13];
  uint64_t v8 = *a2;
  char v9 = *((unsigned char *)a2 + 8);
  char v10 = *((unsigned char *)a2 + 9);
  char v11 = *((unsigned char *)a2 + 10);
  char v12 = *((unsigned char *)a2 + 11);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[3];
  uint64_t v46 = *a1;
  LOBYTE(v47) = v2;
  uint64_t v16 = a2[4];
  uint64_t v15 = a2[5];
  BYTE1(v47) = v3;
  BYTE2(v47) = v4;
  uint64_t v18 = a2[6];
  uint64_t v17 = a2[7];
  BYTE3(v47) = v5;
  uint64_t v38 = v8;
  uint64_t v20 = a2[8];
  uint64_t v19 = a2[9];
  LOBYTE(v39) = v9;
  BYTE1(v39) = v10;
  uint64_t v30 = a2[10];
  uint64_t v28 = a2[11];
  BYTE2(v39) = v11;
  BYTE3(v39) = v12;
  uint64_t v26 = a2[12];
  uint64_t v22 = a2[13];
  uint64_t v23 = a2[14];
  if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v46, (uint64_t)&v38) & 1) == 0) {
    return 0;
  }
  uint64_t v46 = v37;
  uint64_t v47 = v36;
  uint64_t v48 = v35;
  uint64_t v49 = v34;
  uint64_t v50 = v33;
  uint64_t v51 = v32;
  uint64_t v52 = v6;
  uint64_t v53 = v7;
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  uint64_t v40 = v16;
  uint64_t v41 = v15;
  uint64_t v42 = v18;
  uint64_t v43 = v17;
  uint64_t v44 = v20;
  uint64_t v45 = v19;
  if ((_s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV2eeoiySbAC_ACtFZ_0(&v46, &v38) & 1) == 0) {
    return 0;
  }
  if (v31)
  {
    if (!v30 || (sub_232E93458(v31, v30) & 1) == 0) {
      return 0;
    }
  }
  else if (v30)
  {
    return 0;
  }
  if (v29)
  {
    if (!v28 || (sub_232E9366C(v29, v28) & 1) == 0) {
      return 0;
    }
  }
  else if (v28)
  {
    return 0;
  }
  if (!v27)
  {
    if (!v26) {
      goto LABEL_16;
    }
    return 0;
  }
  if (!v26 || (sub_232E93748(v27, v26) & 1) == 0) {
    return 0;
  }
LABEL_16:
  if (v25 == v22 && v24 == v23) {
    return 1;
  }
  return sub_23309C220();
}

unint64_t sub_232FF253C()
{
  unint64_t result = qword_268757E68;
  if (!qword_268757E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E68);
  }
  return result;
}

unint64_t sub_232FF2590()
{
  unint64_t result = qword_268757E70;
  if (!qword_268757E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E70);
  }
  return result;
}

unint64_t sub_232FF25E4()
{
  unint64_t result = qword_268757E80;
  if (!qword_268757E80)
  {
    sub_232FF2BA8(255, &qword_268757E78, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, MEMORY[0x263F8D488]);
    sub_232FF2678();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E80);
  }
  return result;
}

unint64_t sub_232FF2678()
{
  unint64_t result = qword_268757E88;
  if (!qword_268757E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E88);
  }
  return result;
}

unint64_t sub_232FF26CC()
{
  unint64_t result = qword_268757E98;
  if (!qword_268757E98)
  {
    sub_232FF2BA8(255, &qword_268757E90, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, MEMORY[0x263F8D488]);
    sub_232FF2760();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757E98);
  }
  return result;
}

unint64_t sub_232FF2760()
{
  unint64_t result = qword_268757EA0;
  if (!qword_268757EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EA0);
  }
  return result;
}

unint64_t sub_232FF27B4()
{
  unint64_t result = qword_268757EB0;
  if (!qword_268757EB0)
  {
    sub_232FF2BA8(255, &qword_268757EA8, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, MEMORY[0x263F8D488]);
    sub_232FF2848();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EB0);
  }
  return result;
}

unint64_t sub_232FF2848()
{
  unint64_t result = qword_268757EB8;
  if (!qword_268757EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EB8);
  }
  return result;
}

unint64_t sub_232FF289C()
{
  unint64_t result = qword_268757EC8;
  if (!qword_268757EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EC8);
  }
  return result;
}

unint64_t sub_232FF28F0()
{
  unint64_t result = qword_268757ED0;
  if (!qword_268757ED0)
  {
    sub_232FF2BA8(255, &qword_268757E78, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Recovery, MEMORY[0x263F8D488]);
    sub_232FF2984();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757ED0);
  }
  return result;
}

unint64_t sub_232FF2984()
{
  unint64_t result = qword_268757ED8;
  if (!qword_268757ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757ED8);
  }
  return result;
}

unint64_t sub_232FF29D8()
{
  unint64_t result = qword_268757EE0;
  if (!qword_268757EE0)
  {
    sub_232FF2BA8(255, &qword_268757E90, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Laboratory, MEMORY[0x263F8D488]);
    sub_232FF2A6C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EE0);
  }
  return result;
}

unint64_t sub_232FF2A6C()
{
  unint64_t result = qword_268757EE8;
  if (!qword_268757EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EE8);
  }
  return result;
}

unint64_t sub_232FF2AC0()
{
  unint64_t result = qword_268757EF0;
  if (!qword_268757EF0)
  {
    sub_232FF2BA8(255, &qword_268757EA8, (uint64_t)&type metadata for SignedClinicalDataEUDCCEntry.Vaccination, MEMORY[0x263F8D488]);
    sub_232FF2B54();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EF0);
  }
  return result;
}

unint64_t sub_232FF2B54()
{
  unint64_t result = qword_268757EF8;
  if (!qword_268757EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757EF8);
  }
  return result;
}

void sub_232FF2BA8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_232FF2BF4()
{
  unint64_t result = qword_268757F08;
  if (!qword_268757F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F08);
  }
  return result;
}

void sub_232FF2C48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_232FF2CB0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232FF2EC8(a1, a2, a3, (uint64_t (*)(void))sub_232FF2B54, (uint64_t (*)(void))sub_232FF2848, (uint64_t (*)(void))sub_232FF2CF0);
}

unint64_t sub_232FF2CF0()
{
  unint64_t result = qword_268757F18;
  if (!qword_268757F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F18);
  }
  return result;
}

unint64_t sub_232FF2D48()
{
  unint64_t result = qword_268757F20;
  if (!qword_268757F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F20);
  }
  return result;
}

uint64_t sub_232FF2D9C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232FF2EC8(a1, a2, a3, (uint64_t (*)(void))sub_232FF2A6C, (uint64_t (*)(void))sub_232FF2760, (uint64_t (*)(void))sub_232FF2DDC);
}

unint64_t sub_232FF2DDC()
{
  unint64_t result = qword_268757F28;
  if (!qword_268757F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F28);
  }
  return result;
}

unint64_t sub_232FF2E34()
{
  unint64_t result = qword_268757F30;
  if (!qword_268757F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F30);
  }
  return result;
}

uint64_t sub_232FF2E88(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232FF2EC8(a1, a2, a3, (uint64_t (*)(void))sub_232FF2984, (uint64_t (*)(void))sub_232FF2678, (uint64_t (*)(void))sub_232FF2F1C);
}

uint64_t sub_232FF2EC8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_232FF2F1C()
{
  unint64_t result = qword_268757F38;
  if (!qword_268757F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F38);
  }
  return result;
}

unint64_t sub_232FF2F74()
{
  unint64_t result = qword_268757F40;
  if (!qword_268757F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F40);
  }
  return result;
}

uint64_t destroy for SignedClinicalDataEUDCC(uint64_t *a1)
{
  sub_232E9AA4C(*a1, a1[1]);
  sub_232E9AA4C(a1[3], a1[4]);
  sub_232E9AA4C(a1[5], a1[6]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1[26];
  unint64_t v3 = a1[27];
  return sub_232E9AA4C(v2, v3);
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_232E9A9F4(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_232E9A9F4(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_232E9A9F4(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v14;
  uint64_t v15 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v15;
  uint64_t v16 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v16;
  uint64_t v19 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  unint64_t v17 = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_232E9A9F4(v19, v17);
  *(void *)(a1 + 208) = v19;
  *(void *)(a1 + 216) = v17;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_232E9A9F4(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_232E9AA4C(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_232E9A9F4(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_232E9AA4C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  sub_232E9A9F4(v12, v13);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  sub_232E9AA4C(v14, v15);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 208);
  unint64_t v16 = *(void *)(a2 + 216);
  sub_232E9A9F4(v17, v16);
  uint64_t v18 = *(void *)(a1 + 208);
  unint64_t v19 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = v17;
  *(void *)(a1 + 216) = v16;
  sub_232E9AA4C(v18, v19);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_232E9AA4C(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_232E9AA4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_232E9AA4C(v8, v9);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a1 + 208);
  unint64_t v16 = *(void *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_232E9AA4C(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCC()
{
  return &type metadata for SignedClinicalDataEUDCC;
}

uint64_t destroy for SignedClinicalDataEUDCCHeader(uint64_t a1)
{
  return sub_232E9AA4C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s23HealthRecordsExtraction29SignedClinicalDataEUDCCHeaderVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_232E9A9F4(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCHeader(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_232E9A9F4(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_232E9AA4C(v5, v6);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCHeader(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_232E9AA4C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCHeader(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[24]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCHeader()
{
  return &type metadata for SignedClinicalDataEUDCCHeader;
}

uint64_t destroy for SignedClinicalDataEUDCCPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload()
{
  return &type metadata for SignedClinicalDataEUDCCPayload;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry()
{
  return &type metadata for SignedClinicalDataEUDCCEntry;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Vaccination()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataEUDCCEntry.Vaccination(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SignedClinicalDataEUDCCEntry.Vaccination(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataEUDCCEntry.Vaccination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Vaccination()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Vaccination;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Laboratory()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SignedClinicalDataEUDCCEntry.Laboratory(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  uint64_t v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  uint64_t v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SignedClinicalDataEUDCCEntry.Laboratory(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

void *assignWithTake for SignedClinicalDataEUDCCEntry.Laboratory(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Laboratory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Laboratory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Laboratory()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Laboratory;
}

uint64_t destroy for SignedClinicalDataEUDCCEntry.Recovery()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SignedClinicalDataEUDCCEntry.Recovery(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SignedClinicalDataEUDCCEntry.Recovery(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

void *assignWithTake for SignedClinicalDataEUDCCEntry.Recovery(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Recovery()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Recovery;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntryName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntryName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntryName()
{
  return &type metadata for SignedClinicalDataEUDCCEntryName;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataEUDCCError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_232FF4AA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_232FF4AC0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCError()
{
  return &type metadata for SignedClinicalDataEUDCCError;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntryName.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntryName.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FF4C64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FF4D68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Recovery.CodingKeys;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Laboratory.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FF4F14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCEntry.Vaccination.CodingKeys;
}

unsigned char *_s23HealthRecordsExtraction32SignedClinicalDataEUDCCEntryNameV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FF5018);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCPayload.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataEUDCCPayload.CertCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x232FF50ECLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCPayload.CertCodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCPayload.CertCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataEUDCCHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FF51F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataEUDCCHeader.CodingKeys()
{
  return &type metadata for SignedClinicalDataEUDCCHeader.CodingKeys;
}

unint64_t sub_232FF522C()
{
  unint64_t result = qword_268757F48;
  if (!qword_268757F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F48);
  }
  return result;
}

unint64_t sub_232FF5284()
{
  unint64_t result = qword_268757F50;
  if (!qword_268757F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F50);
  }
  return result;
}

unint64_t sub_232FF52DC()
{
  unint64_t result = qword_268757F58;
  if (!qword_268757F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F58);
  }
  return result;
}

unint64_t sub_232FF5334()
{
  unint64_t result = qword_268757F60;
  if (!qword_268757F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F60);
  }
  return result;
}

unint64_t sub_232FF538C()
{
  unint64_t result = qword_268757F68;
  if (!qword_268757F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F68);
  }
  return result;
}

unint64_t sub_232FF53E4()
{
  unint64_t result = qword_268757F70;
  if (!qword_268757F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F70);
  }
  return result;
}

unint64_t sub_232FF543C()
{
  unint64_t result = qword_268757F78;
  if (!qword_268757F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F78);
  }
  return result;
}

unint64_t sub_232FF5494()
{
  unint64_t result = qword_268757F80;
  if (!qword_268757F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F80);
  }
  return result;
}

unint64_t sub_232FF54EC()
{
  unint64_t result = qword_268757F88;
  if (!qword_268757F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F88);
  }
  return result;
}

unint64_t sub_232FF5544()
{
  unint64_t result = qword_268757F90;
  if (!qword_268757F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F90);
  }
  return result;
}

unint64_t sub_232FF559C()
{
  unint64_t result = qword_268757F98;
  if (!qword_268757F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757F98);
  }
  return result;
}

unint64_t sub_232FF55F4()
{
  unint64_t result = qword_268757FA0;
  if (!qword_268757FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FA0);
  }
  return result;
}

unint64_t sub_232FF564C()
{
  unint64_t result = qword_268757FA8;
  if (!qword_268757FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FA8);
  }
  return result;
}

unint64_t sub_232FF56A4()
{
  unint64_t result = qword_268757FB0;
  if (!qword_268757FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FB0);
  }
  return result;
}

unint64_t sub_232FF56FC()
{
  unint64_t result = qword_268757FB8;
  if (!qword_268757FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FB8);
  }
  return result;
}

unint64_t sub_232FF5754()
{
  unint64_t result = qword_268757FC0;
  if (!qword_268757FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FC0);
  }
  return result;
}

unint64_t sub_232FF57AC()
{
  unint64_t result = qword_268757FC8;
  if (!qword_268757FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FC8);
  }
  return result;
}

unint64_t sub_232FF5804()
{
  unint64_t result = qword_268757FD0;
  if (!qword_268757FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FD0);
  }
  return result;
}

unint64_t sub_232FF585C()
{
  unint64_t result = qword_268757FD8;
  if (!qword_268757FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FD8);
  }
  return result;
}

unint64_t sub_232FF58B4()
{
  unint64_t result = qword_268757FE0;
  if (!qword_268757FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FE0);
  }
  return result;
}

unint64_t sub_232FF590C()
{
  unint64_t result = qword_268757FE8;
  if (!qword_268757FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FE8);
  }
  return result;
}

unint64_t sub_232FF5964()
{
  unint64_t result = qword_268757FF0;
  if (!qword_268757FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FF0);
  }
  return result;
}

unint64_t sub_232FF59BC()
{
  unint64_t result = qword_268757FF8;
  if (!qword_268757FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757FF8);
  }
  return result;
}

unint64_t sub_232FF5A14()
{
  unint64_t result = qword_268758000;
  if (!qword_268758000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758000);
  }
  return result;
}

uint64_t sub_232FF5A68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6580587 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232FF5B3C(uint64_t a1)
{
  if (a1 > 3)
  {
    if (a1 != 6)
    {
      if (a1 == 4) {
        return 2;
      }
      return 4;
    }
    return 1;
  }
  else
  {
    if (a1 != -260)
    {
      if (a1 == 1) {
        return 0;
      }
      return 4;
    }
    return 3;
  }
}

uint64_t sub_232FF5B8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7566185 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7627113 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7370853 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7472656368 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_232FF5D10(uint64_t a1)
{
  if (a1 > 3)
  {
    if (a1 != 4)
    {
      if (a1 == 6) {
        return 1;
      }
      return 4;
    }
    return 2;
  }
  else
  {
    if (a1 != -260)
    {
      if (a1 == 1) {
        return 0;
      }
      return 4;
    }
    return 3;
  }
}

uint64_t sub_232FF5D60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 28260 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 29796 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 24941 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 28781 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 25715 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 28790 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_232FF6084(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 28014 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 24941 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 25459 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 25460 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 29300 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 29812 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_232FF63A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 26979 && a2 == 0xE200000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28515 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 26212 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 30052 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 29286 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 29545 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 26484 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_232FF65E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6451044 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7168366 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 114 && a2 == 0xE100000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 116 && a2 == 0xE100000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 118 && a2 == 0xE100000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7497078 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_232FF67E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 28262 && a2 == 0xE200000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7630438 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 28263 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7630439 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t VCJWT<>.debugDescription.getter()
{
  long long v1 = v0[10];
  v5[4] = v0[9];
  v5[5] = v1;
  v6[0] = v0[11];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v0 + 185);
  long long v2 = v0[6];
  v5[0] = v0[5];
  v5[1] = v2;
  long long v3 = v0[8];
  v5[2] = v0[7];
  v5[3] = v3;
  sub_23309BE40();
  swift_bridgeObjectRelease();
  sub_232FDB864((uint64_t)v5);
  sub_232FF8EA0(0, (unint64_t *)&qword_268757110, (uint64_t (*)(void))sub_232F3F1CC, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
  sub_23309B780();
  sub_23309B880();
  swift_bridgeObjectRelease();
  return 0xD000000000000021;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload()
{
  return __swift_instantiateGenericMetadata();
}

void SignedClinicalDataJWTHeader.alg.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SignedClinicalDataJWTHeader.kid.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataJWTHeader.typ.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void SignedClinicalDataJWTHeader.zip.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

double SignedClinicalDataJWTHeader.init(kid:zip:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  *(unsigned char *)a4 = 1;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 16) = a2;
  *(void *)&double result = 5527370;
  *(_OWORD *)(a4 + 24) = xmmword_2330A6240;
  *(unsigned char *)(a4 + 40) = v4;
  return result;
}

unsigned char *SignedClinicalDataJWTHeader.init(alg:kid:typ:zip:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = *a6;
  *(unsigned char *)a7 = *result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 40) = v7;
  return result;
}

uint64_t sub_232FF6B4C()
{
  return qword_2330A6918[*v0];
}

uint64_t sub_232FF6B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FFAD10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FF6B8C(uint64_t a1)
{
  unint64_t v2 = sub_232FF8DF8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232FF6BC8(uint64_t a1)
{
  unint64_t v2 = sub_232FF8DF8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataJWTHeader.encode(to:)(void *a1)
{
  sub_232FF8EA0(0, &qword_268758008, (uint64_t (*)(void))sub_232FF8DF8, (uint64_t)&type metadata for SignedClinicalDataJWTHeader.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)&v14 - v6;
  char v8 = *v1;
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v17 = *((void *)v1 + 2);
  uint64_t v18 = v9;
  uint64_t v10 = *((void *)v1 + 3);
  uint64_t v15 = *((void *)v1 + 4);
  uint64_t v16 = v10;
  HIDWORD(v14) = v1[40];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF8DF8();
  sub_23309C480();
  char v25 = v8;
  char v24 = 0;
  sub_232FEB9D4();
  uint64_t v11 = v19;
  sub_23309C1B0();
  if (!v11)
  {
    char v12 = BYTE4(v14);
    char v23 = 1;
    sub_23309C170();
    char v22 = 2;
    sub_23309C110();
    char v21 = v12;
    char v20 = 3;
    sub_232FF8E4C();
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataJWTHeader.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_232FF8EA0(0, &qword_268758020, (uint64_t (*)(void))sub_232FF8DF8, (uint64_t)&type metadata for SignedClinicalDataJWTHeader.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v20 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232FF8DF8();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  char v28 = 0;
  sub_232FEBC8C();
  uint64_t v10 = v23;
  sub_23309C0E0();
  int v11 = v29;
  char v27 = 1;
  uint64_t v12 = sub_23309C0A0();
  uint64_t v14 = v13;
  uint64_t v21 = v12;
  int v22 = v11;
  char v26 = 2;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_23309C040();
  uint64_t v17 = v16;
  uint64_t v20 = v15;
  char v24 = 3;
  sub_232FF8F08();
  swift_bridgeObjectRetain();
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  char v18 = v25;
  *(unsigned char *)a2 = v22;
  *(void *)(a2 + 8) = v21;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v17;
  *(unsigned char *)(a2 + 40) = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_232FF7144(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_232FF7150()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_232FF7180(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t sub_232FF718C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataJWTHeader.init(from:)(a1, a2);
}

uint64_t sub_232FF71A4(void *a1)
{
  return SignedClinicalDataJWTHeader.encode(to:)(a1);
}

uint64_t SignedClinicalDataJWTPayload.VC.type.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SignedClinicalDataJWTPayload.VC.credentialSubject.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t static SignedClinicalDataJWTPayload.VC.== infix(_:_:)(void **a1, void **a2)
{
  if ((sub_232E90100(*a1, *a2) & 1) == 0) {
    return 0;
  }
  type metadata accessor for SignedClinicalDataJWTPayload.VC();
  return sub_23309B6D0() & 1;
}

uint64_t SignedClinicalDataJWTPayload.VC.hash(into:)()
{
  uint64_t v1 = *v0;
  sub_23309C3E0();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_23309B690();
}

BOOL sub_232FF7330(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_232FF7340()
{
  return sub_23309C3E0();
}

uint64_t sub_232FF7368(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B5EB0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232FF7448()
{
  return sub_23309C420();
}

uint64_t sub_232FF7490(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 1701869940;
  }
}

BOOL sub_232FF74C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_232FF7330(*a1, *a2);
}

uint64_t sub_232FF74D8()
{
  return sub_232FF7448();
}

uint64_t sub_232FF74E8()
{
  return sub_232FF7340();
}

uint64_t sub_232FF74F8()
{
  return sub_23309C420();
}

uint64_t sub_232FF7540()
{
  return sub_232FF7490(*v0);
}

uint64_t sub_232FF7550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF7368(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FF7580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232FFAE88();
  *a1 = result;
  return result;
}

uint64_t sub_232FF75AC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_232FF7600(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t SignedClinicalDataJWTPayload.VC.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  v12[1] = *(void *)(a2 + 24);
  v12[2] = v4;
  type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = sub_23309C1D0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)v12 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v9 = (uint64_t *)v12[3];
  sub_23309C480();
  uint64_t v15 = *v9;
  char v14 = 0;
  sub_232F42B08(0, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_232FF8F8C(&qword_268756B08);
  uint64_t v10 = v12[4];
  sub_23309C1B0();
  if (!v10)
  {
    char v13 = 1;
    sub_23309C1B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SignedClinicalDataJWTPayload.VC.hashValue.getter(uint64_t a1)
{
  return sub_232FF87B4(a1, (void (*)(unsigned char *, uint64_t))SignedClinicalDataJWTPayload.VC.hash(into:));
}

uint64_t SignedClinicalDataJWTPayload.VC.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v25 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  char v28 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys();
  swift_getWitnessTable();
  uint64_t v31 = sub_23309C100();
  uint64_t v27 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v29 = a3;
  uint64_t v10 = type metadata accessor for SignedClinicalDataJWTPayload.VC();
  uint64_t v24 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v22 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v30 = v9;
  uint64_t v13 = v32;
  sub_23309C460();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v32 = a2;
  uint64_t v23 = v10;
  uint64_t v14 = v27;
  uint64_t v15 = v28;
  sub_232F42B08(0, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  char v34 = 0;
  sub_232FF8F8C(&qword_268756B18);
  uint64_t v16 = v30;
  sub_23309C0E0();
  *(void *)uint64_t v12 = v35;
  char v33 = 1;
  uint64_t v17 = v32;
  sub_23309C0E0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v31);
  uint64_t v18 = v17;
  uint64_t v19 = v23;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v12[*(int *)(v23 + 36)], v15, v18);
  uint64_t v20 = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v26, v12, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v12, v19);
}

uint64_t sub_232FF7C5C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SignedClinicalDataJWTPayload.VC.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_232FF7C7C(void *a1, uint64_t a2)
{
  return SignedClinicalDataJWTPayload.VC.encode(to:)(a1, a2);
}

uint64_t sub_232FF7C94(void **a1, void **a2)
{
  return static SignedClinicalDataJWTPayload.VC.== infix(_:_:)(a1, a2);
}

uint64_t sub_232FF7CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232FF8C68(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SignedClinicalDataJWTPayload.VC.hash(into:));
}

uint64_t SignedClinicalDataJWTPayload.iss.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignedClinicalDataJWTPayload.nbf.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SignedClinicalDataJWTPayload.iat.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SignedClinicalDataJWTPayload.exp.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t SignedClinicalDataJWTPayload.vc.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for SignedClinicalDataJWTPayload.VC();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t SignedClinicalDataJWTPayload.debugDescription.getter()
{
  return 0;
}

uint64_t SignedClinicalDataJWTPayload.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v0[24] == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C410();
  }
  if (v0[40] == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C410();
  }
  if (v0[56] == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C410();
  }
  type metadata accessor for SignedClinicalDataJWTPayload.VC();
  return SignedClinicalDataJWTPayload.VC.hash(into:)();
}

uint64_t static SignedClinicalDataJWTPayload.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v4 && (sub_23309C220() & 1) == 0) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  char v6 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  char v7 = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  uint64_t v9 = *(int *)(type metadata accessor for SignedClinicalDataJWTPayload() + 48);
  return static SignedClinicalDataJWTPayload.VC.== infix(_:_:)((void **)(a1 + v9), (void **)(a2 + v9));
}

uint64_t sub_232FF8158(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7566185 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6709870 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7627113 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7370853 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25462 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_232FF8320(char a1)
{
  uint64_t result = 7566185;
  switch(a1)
  {
    case 1:
      uint64_t result = 6709870;
      break;
    case 2:
      uint64_t result = 7627113;
      break;
    case 3:
      uint64_t result = 7370853;
      break;
    case 4:
      uint64_t result = 25462;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_232FF8398(char *a1, char *a2)
{
  return sub_232F4602C(*a1, *a2);
}

uint64_t sub_232FF83AC()
{
  return sub_232F462DC();
}

uint64_t sub_232FF83B8()
{
  return sub_232F4603C();
}

uint64_t sub_232FF83C4()
{
  return sub_23309C420();
}

uint64_t sub_232FF840C()
{
  return sub_232FF8320(*v0);
}

uint64_t sub_232FF8418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FF8158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232FF8448@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232F47E48();
  *a1 = result;
  return result;
}

uint64_t sub_232FF8474(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_232FF84C8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t SignedClinicalDataJWTPayload.encode(to:)(void *a1, uint64_t a2)
{
  v10[2] = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  v10[0] = *(void *)(a2 + 24);
  v10[1] = v3;
  type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_23309C1D0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v10 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C480();
  char v15 = 0;
  uint64_t v8 = v10[3];
  sub_23309C170();
  if (!v8)
  {
    char v14 = 1;
    sub_23309C130();
    char v13 = 2;
    sub_23309C130();
    char v12 = 3;
    sub_23309C130();
    char v11 = 4;
    type metadata accessor for SignedClinicalDataJWTPayload.VC();
    swift_getWitnessTable();
    sub_23309C1B0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataJWTPayload.hashValue.getter(uint64_t a1)
{
  return sub_232FF87B4(a1, (void (*)(unsigned char *, uint64_t))SignedClinicalDataJWTPayload.hash(into:));
}

uint64_t sub_232FF87B4(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  sub_23309C3D0();
  a2(v5, a1);
  return sub_23309C420();
}

uint64_t SignedClinicalDataJWTPayload.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for SignedClinicalDataJWTPayload.VC();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  MEMORY[0x270FA5388](v3);
  char v28 = (char *)&v24 - v4;
  type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys();
  swift_getWitnessTable();
  uint64_t v32 = sub_23309C100();
  uint64_t v27 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for SignedClinicalDataJWTPayload();
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v31 = v6;
  uint64_t v10 = v33;
  sub_23309C460();
  if (v10) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v33 = v7;
  uint64_t v12 = v27;
  char v11 = v28;
  uint64_t v13 = (uint64_t)a1;
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  char v38 = 0;
  uint64_t v16 = v9;
  *(void *)uint64_t v9 = sub_23309C0A0();
  *((void *)v9 + 1) = v17;
  char v37 = 1;
  *((void *)v9 + 2) = sub_23309C060();
  v9[24] = v18 & 1;
  char v36 = 2;
  *((void *)v9 + 4) = sub_23309C060();
  v9[40] = v19 & 1;
  char v35 = 3;
  *((void *)v9 + 6) = sub_23309C060();
  v9[56] = v20 & 1;
  char v34 = 4;
  swift_getWitnessTable();
  sub_23309C0E0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  uint64_t v21 = v33;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v9[*(int *)(v33 + 48)], v11, v14);
  uint64_t v22 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v26, v16, v21);
  __swift_destroy_boxed_opaque_existential_1(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v16, v21);
}

uint64_t sub_232FF8C10()
{
  return SignedClinicalDataJWTPayload.nbf.getter();
}

uint64_t sub_232FF8C2C()
{
  return SignedClinicalDataJWTPayload.exp.getter();
}

uint64_t sub_232FF8C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232FF8C68(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SignedClinicalDataJWTPayload.hash(into:));
}

uint64_t sub_232FF8C68(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  sub_23309C3D0();
  a4(v7, a2);
  return sub_23309C420();
}

uint64_t sub_232FF8CC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SignedClinicalDataJWTPayload.init(from:)(a1, a2);
}

uint64_t sub_232FF8CE0(void *a1, uint64_t a2)
{
  return SignedClinicalDataJWTPayload.encode(to:)(a1, a2);
}

uint64_t sub_232FF8CF8(uint64_t a1, uint64_t a2)
{
  return static SignedClinicalDataJWTPayload.== infix(_:_:)(a1, a2);
}

uint64_t _s23HealthRecordsExtraction27SignedClinicalDataJWTHeaderV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  if ((sub_233034A38(*(unsigned char *)a1, *(unsigned char *)a2) & 1) == 0) {
    return 0;
  }
  if (v2 == v7 && v3 == v8 || (v12 = sub_23309C220(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (v9)
      {
        if (v5 != v10 || v4 != v9)
        {
          char v14 = sub_23309C220();
          uint64_t result = 0;
          if ((v14 & 1) == 0) {
            return result;
          }
        }
LABEL_12:
        if (v6)
        {
          if ((v11 & 1) == 0) {
            return 0;
          }
        }
        else if (v11)
        {
          return 0;
        }
        return 1;
      }
    }
    else if (!v9)
    {
      goto LABEL_12;
    }
    return 0;
  }
  return result;
}

unint64_t sub_232FF8DF8()
{
  unint64_t result = qword_268758010;
  if (!qword_268758010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758010);
  }
  return result;
}

unint64_t sub_232FF8E4C()
{
  unint64_t result = qword_268758018;
  if (!qword_268758018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758018);
  }
  return result;
}

void sub_232FF8EA0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_232FF8F08()
{
  unint64_t result = qword_268758028;
  if (!qword_268758028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758028);
  }
  return result;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.VC()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.VC.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_232FF8F8C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F42B08(255, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SignedClinicalDataJWTPayload.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_232FF9028(void *a1)
{
  a1[1] = sub_232F3F108();
  a1[2] = sub_232FF9060();
  unint64_t result = sub_232FF90B4();
  a1[3] = result;
  return result;
}

unint64_t sub_232FF9060()
{
  unint64_t result = qword_268758038;
  if (!qword_268758038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758038);
  }
  return result;
}

unint64_t sub_232FF90B4()
{
  unint64_t result = qword_268758040[0];
  if (!qword_268758040[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268758040);
  }
  return result;
}

uint64_t sub_232FF9108()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FF9124(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t sub_232FF91A4()
{
  return swift_getWitnessTable();
}

uint64_t destroy for SignedClinicalDataJWTHeader()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataJWTHeader(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataJWTHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataJWTHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataJWTHeader()
{
  return &type metadata for SignedClinicalDataJWTHeader;
}

uint64_t sub_232FF93C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_232FF93D0()
{
  uint64_t result = type metadata accessor for SignedClinicalDataJWTPayload.VC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_232FF9478(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ~(v6 | 7);
  uint64_t v8 = v6 + 8;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8) & ~v6) + *(void *)(v5 + 64) + (((v6 | 7) + 57) & ~(v6 | 7uLL)) > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v6;
    uint64_t v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    unint64_t v14 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = *(void *)v15;
    *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
    *(void *)unint64_t v14 = v16;
    unint64_t v17 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
    *(void *)unint64_t v17 = v19;
    unint64_t v20 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
    *(void *)unint64_t v20 = v22;
    uint64_t v23 = (void *)(((unint64_t)a1 + 71) & v7);
    uint64_t v24 = (void *)(((unint64_t)a2 + 71) & v7);
    *uint64_t v23 = *v24;
    unint64_t v25 = ((unint64_t)v23 + v8) & v12;
    unint64_t v26 = ((unint64_t)v24 + v8) & v12;
    uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v25, v26, v4);
  }
  return a1;
}

uint64_t sub_232FF9610(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v7 = (v4 + (v6 | 7) + 9) & ~(v6 | 7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  return v8((v6 + v7 + 8) & ~v6, v5);
}

void *sub_232FF96D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  unint64_t v5 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  *(void *)unint64_t v5 = v7;
  unint64_t v8 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + 9;
  unint64_t v18 = (void *)((v17 + v11) & ~(v16 | 7));
  uint64_t v19 = (void *)((v17 + v12) & ~(v16 | 7));
  *unint64_t v18 = *v19;
  uint64_t v20 = ((unint64_t)v18 + v16 + 8) & ~v16;
  uint64_t v21 = ((unint64_t)v19 + v16 + 8) & ~v16;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v20, v21, v14);
  return a1;
}

void *sub_232FF9804(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v6 = v8;
  unint64_t v9 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  unint64_t v12 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = v14;
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 | 7) + 9;
  uint64_t v19 = (void *)((v18 + v12) & ~(v17 | 7));
  uint64_t v20 = (void *)((v18 + v13) & ~(v17 | 7));
  void *v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))(((unint64_t)v19 + v17 + 8) & ~v17, ((unint64_t)v20 + v17 + 8) & ~v17, v15);
  return a1;
}

_OWORD *sub_232FF9954(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 | 7) + 9;
  uint64_t v16 = (void *)((v15 + v10) & ~(v14 | 7));
  uint64_t v17 = (void *)((v15 + v11) & ~(v14 | 7));
  void *v16 = *v17;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(((unint64_t)v16 + v14 + 8) & ~v14, ((unint64_t)v17 + v14 + 8) & ~v14);
  return a1;
}

void *sub_232FF9A58(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 | 7) + 9;
  uint64_t v20 = (void *)((v19 + v13) & ~(v18 | 7));
  uint64_t v21 = (void *)((v19 + v14) & ~(v18 | 7));
  *uint64_t v20 = *v21;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40))(((unint64_t)v20 + v18 + 8) & ~v18, ((unint64_t)v21 + v18 + 8) & ~v18, v16);
  return a1;
}

uint64_t sub_232FF9B88(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (v5 >= 0) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v6;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = v7 | 7;
  uint64_t v10 = v7 + 8;
  int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v12 = (v10 & ~v7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 57) & ~v9);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_26:
      if (v8 != 0x7FFFFFFF) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
      }
                                                                      + (((((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                        + v9
                                                                        + 9) & ~v9)) & ~v7);
      unint64_t v18 = *((void *)a1 + 1);
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      return (v18 + 1);
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_26;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v12 | v17) + 1;
}

void sub_232FF9D5C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 8) & ~v10)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
      + (((v10 | 7) + 57) & ~(v10 | 7));
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x232FF9FF0);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v9 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)a1 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            *((void *)a1 + 1) = a2 - 1;
          }
        }
        else
        {
          unint64_t v19 = (v10 + 8 + ((((unint64_t)(a1 + 55) & 0xFFFFFFFFFFFFFFF8) + (v10 | 7) + 9) & ~(v10 | 7))) & ~v10;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
      }
      return;
  }
}

uint64_t sub_232FFA018()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_232FFA0B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_232FFA1BC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return v5(v6);
}

void *sub_232FFA230(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_bridgeObjectRetain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_232FFA2C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_232FFA350(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_232FFA3C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_232FFA448(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_232FFA5E8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x232FFA844);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_232FFA86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

unsigned char *sub_232FFA874(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FFA940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *sub_232FFA968(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FFAA34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataJWTHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FFAB28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataJWTHeader.CodingKeys()
{
  return &type metadata for SignedClinicalDataJWTHeader.CodingKeys;
}

unint64_t sub_232FFAB64()
{
  unint64_t result = qword_268758248;
  if (!qword_268758248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758248);
  }
  return result;
}

uint64_t sub_232FFABB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FFABD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FFABF0()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FFAC0C()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FFAC28()
{
  return swift_getWitnessTable();
}

uint64_t sub_232FFAC44()
{
  return swift_getWitnessTable();
}

unint64_t sub_232FFAC64()
{
  unint64_t result = qword_268758250;
  if (!qword_268758250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758250);
  }
  return result;
}

unint64_t sub_232FFACBC()
{
  unint64_t result = qword_268758258;
  if (!qword_268758258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758258);
  }
  return result;
}

uint64_t sub_232FFAD10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6580587 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7371124 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7367034 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_232FFAE88()
{
  return 2;
}

id sub_232FFAE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v34 = a3;
  sub_232FFB1D0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v11 - 8);
  int v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_23309B190();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *MEMORY[0x263F45D60];
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  sub_232F41E94(a2, (uint64_t)v13);
  if (!a5)
  {
    long long v37 = 0u;
    long long v38 = 0u;
LABEL_10:
    sub_232FFB158((uint64_t)&v37);
    goto LABEL_11;
  }
  uint64_t v19 = sub_23309B710();
  if (*(void *)(a5 + 16) && (unint64_t v21 = sub_232F393E0(v19, v20), (v22 & 1) != 0))
  {
    sub_232F397F8(*(void *)(a5 + 56) + 32 * v21, (uint64_t)&v37);
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v38 + 1)) {
    goto LABEL_10;
  }
  sub_232F3A564();
  if (swift_dynamicCast())
  {
    uint64_t v23 = v35;
    uint64_t v24 = v36;
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v23 = sub_23309B710();
  uint64_t v24 = v25;
LABEL_12:
  uint64_t v26 = v34;
  if (a4) {
    uint64_t v26 = 0;
  }
  *(void *)a6 = v18;
  *((void *)a6 + 1) = 0;
  *((void *)a6 + 2) = v26;
  uint64_t v27 = (int *)type metadata accessor for ExtractionContext();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&a6[v27[7]], v17, v14);
  sub_232F63BA8((uint64_t)v13, (uint64_t)&a6[v27[8]]);
  char v28 = (uint64_t *)&a6[v27[9]];
  *char v28 = v23;
  v28[1] = v24;
  *(void *)&a6[v27[10]] = a5;
  uint64_t v29 = v27[11];
  type metadata accessor for CodeableConceptLookupService();
  uint64_t v30 = swift_allocObject();
  id v31 = objc_allocWithZone(MEMORY[0x263F0A410]);
  swift_bridgeObjectRetain();
  id result = objc_msgSend(v31, sel_init);
  *(void *)(v30 + 16) = result;
  *(void *)&a6[v29] = v30;
  return result;
}

uint64_t sub_232FFB158(uint64_t a1)
{
  sub_232FFB1D0(0, &qword_268758260, (void (*)(uint64_t))sub_232F3A564);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_232FFB1D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t static Base45.decode(_:)(unint64_t a1, unint64_t a2)
{
  return sub_232FFB588(a1, a2);
}

void sub_232FFB23C()
{
  off_268758268 = &unk_26E6A4908;
}

void sub_232FFB250()
{
  off_268758270 = &unk_26E69D730;
}

uint64_t static Base45.encode(_:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_233082194(v0);
  unint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v4 = _s23HealthRecordsExtraction6Base45V6encodeySS10Foundation4DataVFZ_0(v1, v3);
  sub_232E9AA4C(v1, v3);
  return v4;
}

unint64_t Base45Error.errorDescription.getter()
{
  if (!*(unsigned char *)(v0 + 16))
  {
    unint64_t v2 = 0;
    sub_23309BE40();
    sub_23309B880();
    sub_23309B6A0();
    sub_23309B880();
    return v2;
  }
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD00000000000002BLL;
    sub_23309C1E0();
    sub_23309B880();
    swift_bridgeObjectRelease();
    return v2;
  }
  return 0xD00000000000002DLL;
}

uint64_t _s23HealthRecordsExtraction11Base45ErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        sub_232FFC30C(*(void *)a1, v3, 1);
        sub_232FFC30C(v5, v6, 1);
        char v8 = v2 == v5;
        return v8 & 1;
      }
    }
    else if (v7 == 2 && (v6 | v5) == 0)
    {
      sub_232FFC30C(*(void *)a1, v3, 2);
      sub_232FFC30C(0, 0, 2);
      char v8 = 1;
      return v8 & 1;
    }
LABEL_11:
    sub_232FFC2E8(v5, v6, v7);
    sub_232FFC30C(v2, v3, v4);
    sub_232FFC30C(v5, v6, v7);
    char v8 = 0;
    return v8 & 1;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v2 == v5 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_23309C220();
  }
  sub_232FFC2E8(v5, v6, 0);
  sub_232FFC2E8(v2, v3, 0);
  sub_232FFC30C(v2, v3, 0);
  sub_232FFC30C(v5, v6, 0);
  return v8 & 1;
}

uint64_t sub_232FFB588(unint64_t a1, unint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  long long v46 = xmmword_2330A6940;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v5) = 1;
    }
    uint64_t v6 = 4 << v5;
    int v7 = (void *)MEMORY[0x263F8EE78];
    unint64_t v8 = 15;
    while (1)
    {
      unint64_t v9 = v8 & 0xC;
      unint64_t v10 = v8;
      if (v9 == v6) {
        unint64_t v10 = sub_232F3D9B8(v8, a1, a2);
      }
      unint64_t v11 = v10 >> 16;
      if (v10 >> 16 >= v4)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        unsigned __int8 v13 = sub_23309B8E0();
        if (v9 != v6) {
          goto LABEL_18;
        }
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v43[0] = a1;
        v43[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        unsigned __int8 v13 = *((unsigned char *)v43 + v11);
        if (v9 != v6) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v12 = sub_23309BEE0();
        }
        unsigned __int8 v13 = *(unsigned char *)(v12 + v11);
        if (v9 != v6)
        {
LABEL_18:
          if ((a2 & 0x1000000000000000) != 0) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
      }
      unint64_t v8 = sub_232F3D9B8(v8, a1, a2);
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_22:
        if (v4 <= v8 >> 16) {
          goto LABEL_68;
        }
        unint64_t v8 = sub_23309B8B0();
        goto LABEL_24;
      }
LABEL_19:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_24:
      if (qword_268756408 != -1) {
        swift_once();
      }
      if (*((void *)off_268758270 + 2) <= (unint64_t)v13
        || (uint64_t v14 = *((void *)off_268758270 + v13 + 4), v14 == -1))
      {
        unsigned int v17 = (((v13 & 0x3F) << 8) | (v13 >> 6)) + 33217;
        if ((v13 & 0x80) == 0) {
          unsigned int v17 = (v13 + 1);
        }
        v43[0] = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v17) >> 3)) & 7)));
        uint64_t v18 = MEMORY[0x237DB5830](v43);
        uint64_t v20 = v19;
        sub_232FFC280();
        swift_allocError();
        *(void *)uint64_t v21 = v18;
        *(void *)(v21 + 8) = v20;
        *(unsigned char *)(v21 + 16) = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v7 = sub_232F3D354(0, v7[2] + 1, 1, v7);
      }
      unint64_t v16 = v7[2];
      unint64_t v15 = v7[3];
      if (v16 >= v15 >> 1) {
        int v7 = sub_232F3D354((void *)(v15 > 1), v16 + 1, 1, v7);
      }
      v7[2] = v16 + 1;
      v7[v16 + 4] = v14;
      if (4 * v4 == v8 >> 14) {
        goto LABEL_38;
      }
    }
  }
  int v7 = (void *)MEMORY[0x263F8EE78];
LABEL_38:
  swift_bridgeObjectRelease();
  int64_t v22 = v7[2];
  if (!v22)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    return v46;
  }
  unint64_t v23 = 0;
  uint64_t v24 = v7 + 6;
  int64_t v42 = v7[2];
  while (1)
  {
    int64_t v27 = v23 + 3;
    int v28 = __OFADD__(v23, 3);
    if (v23 + 1 >= v22)
    {
      sub_232FFC280();
      swift_allocError();
      *(void *)uint64_t v40 = v22;
      *(void *)(v40 + 8) = 0;
      char v41 = 1;
      goto LABEL_61;
    }
    unint64_t v29 = v7[2];
    if (v23 >= v29) {
      goto LABEL_64;
    }
    if (v23 + 1 >= v29) {
      goto LABEL_65;
    }
    uint64_t v30 = *(v24 - 1);
    uint64_t v31 = 45 * v30;
    if ((unsigned __int128)(v30 * (__int128)45) >> 64 != (45 * v30) >> 63) {
      goto LABEL_66;
    }
    uint64_t v32 = *(v24 - 2);
    uint64_t v33 = v32 + v31;
    if (__OFADD__(v32, v31)) {
      goto LABEL_67;
    }
    if ((uint64_t)(v23 + 2) < v22) {
      break;
    }
LABEL_40:
    sub_232FFC4D8();
    uint64_t v26 = v25;
    uint64_t v44 = v25;
    unint64_t v45 = sub_232FFC530();
    LOBYTE(v43[0]) = v33;
    __swift_project_boxed_opaque_existential_1(v43, v26);
    sub_23309AFE0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    v23 += 3;
    v24 += 3;
    if (((v27 < v22) & ~v28) == 0) {
      goto LABEL_58;
    }
  }
  if (v23 + 2 >= v29) {
    goto LABEL_69;
  }
  uint64_t v34 = 45 * *v24;
  if ((unsigned __int128)(*v24 * (__int128)45) >> 64 != v34 >> 63) {
    goto LABEL_70;
  }
  uint64_t v35 = 2025 * *v24;
  if ((unsigned __int128)(v34 * (__int128)45) >> 64 != v35 >> 63) {
    goto LABEL_71;
  }
  BOOL v36 = __OFADD__(v33, v35);
  v33 += v35;
  if (v36) {
    goto LABEL_72;
  }
  if (v33 < 0x10000)
  {
    if (v33 < 0)
    {
      sub_23309BF60();
      __break(1u);
      JUMPOUT(0x232FFBBB0);
    }
    sub_232FFC4D8();
    uint64_t v38 = v37;
    uint64_t v44 = v37;
    unint64_t v45 = sub_232FFC530();
    LOBYTE(v43[0]) = BYTE1(v33);
    __swift_project_boxed_opaque_existential_1(v43, v38);
    sub_23309AFE0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    int64_t v22 = v42;
    goto LABEL_40;
  }
  sub_232FFC280();
  swift_allocError();
  *(void *)uint64_t v40 = 0;
  *(void *)(v40 + 8) = 0;
  char v41 = 2;
LABEL_61:
  *(unsigned char *)(v40 + 16) = v41;
  swift_willThrow();
LABEL_62:
  sub_232E9AA4C(v46, *((unint64_t *)&v46 + 1));
  return swift_bridgeObjectRelease();
}

uint64_t _s23HealthRecordsExtraction6Base45V6encodeySS10Foundation4DataVFZ_0(uint64_t a1, unint64_t a2)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2;
  uint64_t v78 = 0;
  unint64_t v79 = 0xE000000000000000;
  unint64_t v3 = a2 >> 62;
  uint64_t result = 0;
  unint64_t v6 = HIDWORD(a1);
  char v62 = a2;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_88;
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_7:
      unint64_t v2 = a2;
      if (v7 < 1) {
        return 0;
      }
LABEL_8:
      uint64_t v10 = 0;
      uint64_t v64 = a1 >> 32;
      uint64_t v61 = BYTE6(v2);
      unint64_t v59 = v2 >> 16;
      unint64_t v60 = v2 >> 8;
      unint64_t v57 = HIDWORD(v2);
      unint64_t v58 = v2 >> 24;
      unint64_t v56 = v2 >> 40;
      unint64_t v63 = a2 >> 62;
      do
      {
        if (__OFADD__(v10, 2)) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v10 + 2;
        }
        uint64_t v15 = v10 + 1;
        if (v10 + 1 >= v7)
        {
          if (v3)
          {
            if (v3 == 1)
            {
              if (v10 < (int)a1 || v10 >= v64) {
                goto LABEL_71;
              }
              uint64_t v24 = sub_23309ACB0();
              if (!v24) {
                goto LABEL_92;
              }
              uint64_t v25 = v24;
              uint64_t v26 = sub_23309ACD0();
              uint64_t v27 = v10 - v26;
              if (__OFSUB__(v10, v26)) {
                goto LABEL_77;
              }
            }
            else
            {
              if (v10 < *(void *)(a1 + 16)) {
                goto LABEL_75;
              }
              if (v10 >= *(void *)(a1 + 24)) {
                goto LABEL_80;
              }
              uint64_t v46 = sub_23309ACB0();
              if (!v46) {
                goto LABEL_95;
              }
              uint64_t v25 = v46;
              uint64_t v47 = sub_23309ACD0();
              uint64_t v27 = v10 - v47;
              if (__OFSUB__(v10, v47)) {
                goto LABEL_83;
              }
            }
            int v45 = *(unsigned __int8 *)(v25 + v27);
          }
          else
          {
            if (v10 >= v61) {
              goto LABEL_74;
            }
            __int16 v65 = a1;
            char v66 = BYTE2(a1);
            char v67 = BYTE3(a1);
            char v68 = v6;
            char v69 = BYTE5(a1);
            char v70 = BYTE6(a1);
            char v71 = HIBYTE(a1);
            char v72 = v62;
            char v73 = v60;
            char v74 = v59;
            char v75 = v58;
            char v76 = v57;
            char v77 = v56;
            int v45 = *((unsigned __int8 *)&v65 + v10);
          }
          if (qword_268756400 != -1) {
            swift_once();
          }
          unint64_t v48 = (((109 * v45) >> 8)
               + (((v45 - ((unsigned __int16)(109 * v45) >> 8)) & 0xFE) >> 1)) >> 5;
          unint64_t v49 = (v45 - 45 * v48);
          if (*((void *)off_268758268 + 2) <= v49)
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
          }
          uint64_t v50 = (char *)off_268758268 + 16 * v49;
          uint64_t v51 = *((void *)v50 + 4);
          uint64_t v52 = *((void *)v50 + 5);
          swift_bridgeObjectRetain();
          MEMORY[0x237DB58B0](v51, v52);
          swift_bridgeObjectRelease();
          if (*((void *)off_268758268 + 2) <= v48) {
            goto LABEL_66;
          }
          uint64_t v53 = (char *)off_268758268 + 16 * v48;
          uint64_t v55 = *((void *)v53 + 4);
          uint64_t v54 = *((void *)v53 + 5);
          swift_bridgeObjectRetain();
          MEMORY[0x237DB58B0](v55, v54);
        }
        else
        {
          if (v3)
          {
            if (v3 == 1)
            {
              if (v10 < (int)a1 || v10 >= v64) {
                goto LABEL_70;
              }
              uint64_t v16 = sub_23309ACB0();
              if (!v16) {
                goto LABEL_90;
              }
              uint64_t v17 = v16;
              uint64_t v18 = sub_23309ACD0();
              if (__OFSUB__(v10, v18)) {
                goto LABEL_76;
              }
              if (v15 >= v64) {
                goto LABEL_81;
              }
              __int16 v19 = *(unsigned __int8 *)(v17 + v10 - v18);
              uint64_t v20 = sub_23309ACB0();
              if (!v20) {
                goto LABEL_91;
              }
              uint64_t v21 = v20;
              uint64_t v22 = sub_23309ACD0();
              uint64_t v23 = v15 - v22;
              if (__OFSUB__(v15, v22)) {
                goto LABEL_84;
              }
            }
            else
            {
              if (v10 < *(void *)(a1 + 16)) {
                goto LABEL_73;
              }
              if (v10 >= *(void *)(a1 + 24)) {
                goto LABEL_79;
              }
              uint64_t v29 = sub_23309ACB0();
              if (!v29) {
                goto LABEL_93;
              }
              uint64_t v30 = v29;
              uint64_t v31 = sub_23309ACD0();
              if (__OFSUB__(v10, v31)) {
                goto LABEL_82;
              }
              if (v15 < *(void *)(a1 + 16)) {
                goto LABEL_85;
              }
              if (v15 >= *(void *)(a1 + 24)) {
                goto LABEL_86;
              }
              __int16 v19 = *(unsigned __int8 *)(v30 + v10 - v31);
              uint64_t v32 = sub_23309ACB0();
              if (!v32) {
                goto LABEL_94;
              }
              uint64_t v21 = v32;
              uint64_t v33 = sub_23309ACD0();
              uint64_t v23 = v15 - v33;
              if (__OFSUB__(v15, v33)) {
                goto LABEL_87;
              }
            }
            __int16 v28 = *(unsigned __int8 *)(v21 + v23);
          }
          else
          {
            if (v10 >= v61) {
              goto LABEL_72;
            }
            __int16 v65 = a1;
            char v66 = BYTE2(a1);
            char v67 = BYTE3(a1);
            char v68 = v6;
            char v69 = BYTE5(a1);
            char v70 = BYTE6(a1);
            char v71 = HIBYTE(a1);
            char v72 = v62;
            char v73 = v60;
            char v74 = v59;
            char v75 = v58;
            char v76 = v57;
            char v77 = v56;
            if (v15 >= v61) {
              goto LABEL_78;
            }
            __int16 v19 = *((unsigned __int8 *)&v65 + v10);
            __int16 v65 = a1;
            char v66 = BYTE2(a1);
            char v67 = BYTE3(a1);
            char v68 = v6;
            char v69 = BYTE5(a1);
            char v70 = BYTE6(a1);
            char v71 = HIBYTE(a1);
            char v72 = v62;
            char v73 = v60;
            char v74 = v59;
            char v75 = v58;
            char v76 = v57;
            char v77 = v56;
            __int16 v28 = *((unsigned __int8 *)&v65 + v15);
          }
          unint64_t v3 = v6;
          if (qword_268756400 != -1) {
            swift_once();
          }
          unsigned __int16 v34 = v28 | (v19 << 8);
          unint64_t v35 = (((745 * v34) >> 16)
               + ((unsigned __int16)((v34 - ((745 * v34) >> 16)) & 0xFFFE) >> 1)) >> 10;
          unsigned __int16 v36 = v34 - 2025 * v35;
          unint64_t v37 = v36 / 0x2Du;
          unint64_t v38 = v36 % 0x2Du;
          if (*((void *)off_268758268 + 2) <= v38) {
            goto LABEL_67;
          }
          uint64_t v39 = (char *)off_268758268 + 16 * v38;
          uint64_t v40 = *((void *)v39 + 4);
          uint64_t v41 = *((void *)v39 + 5);
          swift_bridgeObjectRetain();
          MEMORY[0x237DB58B0](v40, v41);
          swift_bridgeObjectRelease();
          if (*((void *)off_268758268 + 2) <= v37) {
            goto LABEL_68;
          }
          int64_t v42 = (char *)off_268758268 + 16 * v37;
          uint64_t v43 = *((void *)v42 + 4);
          uint64_t v44 = *((void *)v42 + 5);
          swift_bridgeObjectRetain();
          MEMORY[0x237DB58B0](v43, v44);
          swift_bridgeObjectRelease();
          if (*((void *)off_268758268 + 2) <= v35) {
            goto LABEL_69;
          }
          unint64_t v11 = (char *)off_268758268 + 16 * v35;
          uint64_t v13 = *((void *)v11 + 4);
          uint64_t v12 = *((void *)v11 + 5);
          swift_bridgeObjectRetain();
          MEMORY[0x237DB58B0](v13, v12);
          unint64_t v6 = v3;
          LODWORD(v3) = v63;
        }
        swift_bridgeObjectRelease();
        uint64_t v10 = v14;
      }
      while (v14 < v7);
      return v78;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_7;
      }
      goto LABEL_89;
    case 3uLL:
      return result;
    default:
      uint64_t v7 = BYTE6(a2);
      if (!BYTE6(a2)) {
        return 0;
      }
      goto LABEL_8;
  }
}

unint64_t sub_232FFC280()
{
  unint64_t result = qword_268758278;
  if (!qword_268758278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758278);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base45()
{
  return &type metadata for Base45;
}

uint64_t sub_232FFC2E8(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Base45Error(uint64_t a1)
{
  return sub_232FFC30C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_232FFC30C(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11Base45ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_232FFC2E8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Base45Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_232FFC2E8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_232FFC30C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Base45Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_232FFC30C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Base45Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Base45Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_232FFC498(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_232FFC4B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Base45Error()
{
  return &type metadata for Base45Error;
}

void sub_232FFC4D8()
{
  if (!qword_268758280)
  {
    unint64_t v0 = sub_23309BEF0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758280);
    }
  }
}

unint64_t sub_232FFC530()
{
  unint64_t result = qword_268758288;
  if (!qword_268758288)
  {
    sub_232FFC4D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758288);
  }
  return result;
}

id sub_232FFC588(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  uint64_t v8 = sub_23309C210();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a1);
  }
  else
  {
    uint64_t v9 = (void *)swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v10, v7, a1);
  }
  unint64_t v11 = (void *)sub_23309AEB0();

  id v12 = objc_msgSend(v11, sel_domain);
  sub_23309B710();

  id v13 = objc_msgSend(v11, sel_code);
  sub_232FFC7F4();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = sub_23309B710();
  *(void *)(inited + 40) = v15;
  uint64_t v16 = Error.hdhr_friendlyDescription.getter(a1, a2);
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v17;
  sub_232F37A50(inited);
  id v18 = objc_allocWithZone(MEMORY[0x263F087E8]);
  __int16 v19 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)sub_23309B640();
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v13, v20);

  return v21;
}

void sub_232FFC7F4()
{
  if (!qword_268756F90)
  {
    sub_232F39768();
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756F90);
    }
  }
}

double sub_232FFC84C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FFD040(v2, (uint64_t)v6, type metadata accessor for ModelsDSTU2.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      __int16 v28 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Condition(0);
      unint64_t v11 = &qword_268757838;
      id v12 = (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition;
      goto LABEL_7;
    case 2u:
      __int16 v28 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      unint64_t v11 = &qword_268757830;
      id v12 = (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport;
      goto LABEL_7;
    case 3u:
      __int16 v28 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Immunization(0);
      unint64_t v11 = &qword_268757828;
      id v12 = (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization;
      goto LABEL_7;
    case 4u:
      __int16 v28 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Observation(0);
      unint64_t v11 = &qword_268757820;
      id v12 = (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation;
LABEL_7:
      unint64_t v29 = sub_232FFD180(v11, v12);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
      sub_232FFD1C8((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))v12);
      break;
    case 5u:
      __int16 v28 = &type metadata for ModelsDSTU2.Patient;
      unint64_t v29 = sub_232F7C624();
      uint64_t v14 = (_OWORD *)swift_allocObject();
      v27[0] = (uint64_t)v14;
      long long v15 = *((_OWORD *)v6 + 7);
      v14[7] = *((_OWORD *)v6 + 6);
      v14[8] = v15;
      v14[9] = *((_OWORD *)v6 + 8);
      long long v16 = *((_OWORD *)v6 + 3);
      v14[3] = *((_OWORD *)v6 + 2);
      v14[4] = v16;
      long long v17 = *((_OWORD *)v6 + 5);
      v14[5] = *((_OWORD *)v6 + 4);
      v14[6] = v17;
      long long v18 = *((_OWORD *)v6 + 1);
      v14[1] = *(_OWORD *)v6;
      v14[2] = v18;
      break;
    case 6u:
      long long v19 = *(_OWORD *)v6;
      long long v25 = *((_OWORD *)v6 + 1);
      long long v26 = v19;
      uint64_t v21 = *((void *)v6 + 4);
      uint64_t v20 = *((void *)v6 + 5);
      __int16 v28 = &type metadata for UnknownResource;
      unint64_t v29 = sub_232E9B608();
      uint64_t v22 = swift_allocObject();
      v27[0] = v22;
      long long v23 = v25;
      *(_OWORD *)(v22 + 16) = v26;
      *(_OWORD *)(v22 + 32) = v23;
      *(void *)(v22 + 48) = v21;
      *(void *)(v22 + 56) = v20;
      break;
    default:
      long long v7 = *(_OWORD *)v6;
      long long v25 = *((_OWORD *)v6 + 1);
      long long v26 = v7;
      uint64_t v8 = *((void *)v6 + 4);
      __int16 v28 = &type metadata for ModelsDSTU2.Bundle;
      unint64_t v29 = sub_232F7C7D0();
      uint64_t v9 = swift_allocObject();
      v27[0] = v9;
      long long v10 = v25;
      *(_OWORD *)(v9 + 16) = v26;
      *(_OWORD *)(v9 + 32) = v10;
      *(void *)(v9 + 48) = v8;
      break;
  }
  sub_232F3FD80(0, (unint64_t *)&qword_2687566D0);
  sub_232F3FD80(0, (unint64_t *)&qword_268757698);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_232FFCBA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_232FFC84C((uint64_t)&v15);
  if (v16)
  {
    sub_232F3FDD0(&v15, (uint64_t)v17);
    uint64_t v4 = v18;
    uint64_t v5 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    if (v6)
    {
      uint64_t v8 = v18;
      uint64_t v7 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 24))(v8);
      uint64_t v9 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      long long v10 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v11 = objc_msgSend(self, sel_originIdentifierWithFHIRResourceType_identifier_, v9, v10);

      uint64_t v12 = type metadata accessor for RecordExtractionContext();
      sub_232FFD040(a1, (uint64_t)a2 + *(int *)(v12 + 20), (uint64_t (*)(void))type metadata accessor for ExtractionContext);
      *a2 = v11;
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 1, v12);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    sub_232FFCFE4((uint64_t)&v15);
  }
  uint64_t v14 = type metadata accessor for RecordExtractionContext();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
}

uint64_t sub_232FFCD90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ModelsR4.ResourceProxy.get()(v15);
  sub_232F3FD80(0, (unint64_t *)&qword_2687566D0);
  sub_232F3FD80(0, (unint64_t *)&qword_268757698);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_6;
  }
  if (!*((void *)&v17 + 1))
  {
LABEL_6:
    sub_232FFCFE4((uint64_t)&v16);
    goto LABEL_7;
  }
  sub_232F3FDD0(&v16, (uint64_t)v19);
  uint64_t v4 = v20;
  uint64_t v5 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (v6)
  {
    uint64_t v8 = v20;
    uint64_t v7 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 24))(v8);
    uint64_t v9 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    long long v10 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v11 = objc_msgSend(self, sel_originIdentifierWithFHIRResourceType_identifier_, v9, v10);

    uint64_t v12 = type metadata accessor for RecordExtractionContext();
    sub_232FFD040(a1, (uint64_t)a2 + *(int *)(v12 + 20), (uint64_t (*)(void))type metadata accessor for ExtractionContext);
    *a2 = v11;
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 1, v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
LABEL_7:
  uint64_t v14 = type metadata accessor for RecordExtractionContext();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
}

uint64_t sub_232FFCFE4(uint64_t a1)
{
  sub_232F61E60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_232FFD040(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_232FFD0A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_232FFD0F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 160, 7);
}

uint64_t sub_232FFD180(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232FFD1C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_232FFD230()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

unint64_t ExtractionRulesKeyPathParserError.description.getter(uint64_t a1)
{
  unint64_t result = 0x6F63207974706D65;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      sub_23309C310();
      __break(1u);
      JUMPOUT(0x232FFD344);
  }
  return result;
}

void __swiftcall ExtractionRulesKeyPathParserError.asNSError(using:)(NSError *__return_ptr retstr, NSScanner using)
{
  uint64_t v3 = v2;
  id v5 = [(objc_class *)using.super.isa string];
  sub_23309B710();

  sub_23309BCC0();
  sub_23309B8F0();
  swift_bridgeObjectRelease();
  sub_23309BE40();
  swift_bridgeObjectRelease();
  sub_23309C1E0();
  sub_23309B880();
  swift_bridgeObjectRelease();
  sub_23309B880();
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_232FFC7F4();
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2330A1880;
      *(void *)(inited + 32) = sub_23309B710();
      *(void *)(inited + 40) = v7;
      *(void *)(inited + 72) = MEMORY[0x263F8D310];
      *(void *)(inited + 48) = 0xD000000000000016;
      *(void *)(inited + 56) = 0x80000002330B6010;
      sub_232F37A50(inited);
      id v8 = objc_allocWithZone(MEMORY[0x263F087E8]);
      uint64_t v9 = (void *)sub_23309B6E0();
      long long v10 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
      objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, v3, v10);

      return;
    default:
      sub_23309C310();
      __break(1u);
      JUMPOUT(0x232FFD608);
  }
}

unint64_t ExtractionRulesKeyPathParserError.init(rawValue:)(unint64_t a1)
{
  return sub_232FFD8E4(a1);
}

uint64_t sub_232FFD638()
{
  return sub_23309C420();
}

uint64_t sub_232FFD680()
{
  return sub_23309C3E0();
}

uint64_t sub_232FFD6AC()
{
  return sub_23309C420();
}

unint64_t sub_232FFD6F0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_232FFD8E4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

unint64_t sub_232FFD724()
{
  return ExtractionRulesKeyPathParserError.description.getter(*v0);
}

void static ExtractionRulesKeyPathParser.components(from:)()
{
}

id ExtractionRulesKeyPathParser.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ExtractionRulesKeyPathParser.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathParser();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ExtractionRulesKeyPathParser.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathParser();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_232FFD8E4(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

void sub_232FFD8F4()
{
  uint64_t v1 = sub_23309AC20();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  char v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_allocWithZone(MEMORY[0x263F08B08]);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithString_, v6);

  if (objc_msgSend(v7, sel_isAtEnd))
  {
    ExtractionRulesKeyPathParserError.asNSError(using:)(v8, (NSScanner)v7);
    swift_willThrow();

    return;
  }
  v30[1] = v0;
  sub_23309ABB0();
  uint64_t v34 = MEMORY[0x263F8EE78];
  if (objc_msgSend(v7, sel_isAtEnd))
  {
LABEL_4:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);

    return;
  }
  while (1)
  {
    uint64_t v9 = sub_23309BCF0();
    if (!v10)
    {
      swift_bridgeObjectRelease();
      v29.super.isa = (Class)v7;
      goto LABEL_22;
    }
    uint64_t v32 = v9;
    uint64_t v33 = v10;
    sub_23309BCB0();
    uint64_t v12 = v11;
    if (v11) {
      break;
    }
    uint64_t v15 = 0;
LABEL_14:
    sub_23309BCB0();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v18 && objc_msgSend(v7, sel_isAtEnd)) {
      goto LABEL_21;
    }
    uint64_t v19 = v1;
    uint64_t v20 = v2;
    uint64_t v22 = v32;
    uint64_t v21 = v33;
    long long v23 = (objc_class *)type metadata accessor for ExtractionRulesKeyPathComponent();
    uint64_t v24 = (char *)objc_allocWithZone(v23);
    long long v25 = &v24[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
    *(void *)long long v25 = v22;
    *((void *)v25 + 1) = v21;
    long long v26 = &v24[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
    *(void *)long long v26 = v15;
    *((void *)v26 + 1) = v12;
    v31.receiver = v24;
    v31.super_class = v23;
    id v27 = objc_msgSendSuper2(&v31, sel_init);
    MEMORY[0x237DB59C0]();
    if (*(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_23309B9D0();
    }
    sub_23309B9E0();
    sub_23309B9C0();

    uint64_t v2 = v20;
    uint64_t v1 = v19;
    if (objc_msgSend(v7, sel_isAtEnd)) {
      goto LABEL_4;
    }
  }
  sub_23309B880();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_23309BCE0();
  uint64_t v12 = v14;
  if (v14)
  {
    uint64_t v15 = v13;
    v30[4] = v13;
    v30[5] = v14;
    v30[2] = 40;
    v30[3] = 0xE100000000000000;
    sub_232F379FC();
    if (sub_23309BD80()) {
      goto LABEL_21;
    }
    sub_23309B880();
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_23309BCB0();
  if (v16)
  {
    sub_23309B880();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29.super.isa = (Class)v7;
LABEL_22:
  ExtractionRulesKeyPathParserError.asNSError(using:)(v28, v29);
  swift_willThrow();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t type metadata accessor for ExtractionRulesKeyPathParser()
{
  return self;
}

unint64_t sub_232FFDD48()
{
  unint64_t result = qword_268758290;
  if (!qword_268758290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758290);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtractionRulesKeyPathParserError()
{
  return &type metadata for ExtractionRulesKeyPathParserError;
}

uint64_t sub_232FFDDAC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PatientResourceComparator()
{
  return self;
}

uint64_t sub_232FFDDE0@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_232E9A9F4(a2, a3);
      uint64_t v10 = (char *)sub_23309ACB0();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_23309ACD0();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_23309ACC0();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x232FFE044);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_232E9AA4C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_23309ACB0();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_23309ACD0();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_23309ACC0();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_232FFE054(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_232FFDDE0((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_232FFE12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_23309ACB0();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_23309ACD0();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_23309ACC0();
  sub_232FFDDE0(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_232FFE1E4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x232FFE44CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_232E9A9F4(a3, a4);
                  sub_232E9A9F4(a1, a2);
                  char v17 = sub_232FFE12C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_232E9AA4C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_232E9A9F4(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_232FFE12C(v21, v22, v20, a3, a4);
                  sub_232E9AA4C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_232E9A9F4(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_232E9A9F4(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_232FFE054(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_232E9AA4C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

id sub_232FFE47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.PatientLink(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v51 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v53 = v14;
  uint64_t v54 = v18;
  uint64_t v52 = v17;
  if (v17)
  {
    uint64_t v51 = v7;
    uint64_t v19 = *(void *)(v17 + 16);
    if (v19)
    {
      uint64_t v20 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v21 = *(void *)(v14 + 72);
      swift_bridgeObjectRetain();
      uint64_t v22 = v19 - 1;
      while (1)
      {
        uint64_t v23 = v22;
        sub_232FFEEA0(v20, (uint64_t)v16);
        char v24 = &v16[*(int *)(v4 + 20)];
        if (*(void *)v24 == 0x736563616C706572 && *((void *)v24 + 1) == 0xE800000000000000) {
          break;
        }
        char v26 = sub_23309C220();
        sub_232FFEF04((uint64_t)v16);
        if ((v26 & 1) == 0)
        {
          uint64_t v22 = v23 - 1;
          v20 += v21;
          if (v23) {
            continue;
          }
        }
        goto LABEL_37;
      }
      sub_232FFEF04((uint64_t)v16);
      char v26 = 1;
LABEL_37:
      uint64_t v43 = v52;
      swift_bridgeObjectRelease();
      uint64_t v17 = v43;
      char v7 = v51;
      uint64_t v14 = v53;
      uint64_t v18 = v54;
      if (!v54)
      {
LABEL_38:
        if ((v26 & 1) == 0)
        {
LABEL_39:
          uint64_t v33 = 0;
          if (!v17) {
            goto LABEL_40;
          }
          goto LABEL_23;
        }
LABEL_22:
        uint64_t v33 = 8;
        if (!v17) {
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    else
    {
      char v26 = 0;
      char v7 = v51;
      if (!v18) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    char v26 = 0;
    if (!v18) {
      goto LABEL_38;
    }
  }
  uint64_t v27 = *(void *)(v18 + 16);
  if (!v27)
  {
LABEL_21:
    if ((v26 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  uint64_t v28 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v29 = *(void *)(v14 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_232FFEEA0(v28, (uint64_t)v13);
    char v30 = &v13[*(int *)(v4 + 20)];
    if (*(void *)v30 == 0x736563616C706572 && *((void *)v30 + 1) == 0xE800000000000000) {
      break;
    }
    char v32 = sub_23309C220();
    sub_232FFEF04((uint64_t)v13);
    if (v32) {
      goto LABEL_56;
    }
    v28 += v29;
    if (!--v27)
    {
      uint64_t v18 = v54;
      swift_bridgeObjectRelease();
      uint64_t v17 = v52;
      uint64_t v14 = v53;
      goto LABEL_21;
    }
  }
  sub_232FFEF04((uint64_t)v13);
LABEL_56:
  uint64_t v18 = v54;
  swift_bridgeObjectRelease();
  if (v26) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = 4;
  }
  uint64_t v17 = v52;
  uint64_t v14 = v53;
  if (!v52)
  {
LABEL_40:
    char v42 = 0;
    if (!v18) {
      goto LABEL_53;
    }
    goto LABEL_44;
  }
LABEL_23:
  uint64_t v34 = v7;
  uint64_t v35 = *(void *)(v17 + 16);
  if (v35)
  {
    uint64_t v36 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v37 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    uint64_t v38 = v35 - 1;
    while (1)
    {
      uint64_t v39 = v38;
      sub_232FFEEA0(v36, (uint64_t)v10);
      uint64_t v40 = &v10[*(int *)(v4 + 20)];
      if (*(void *)v40 == 0x646563616C706572 && *((void *)v40 + 1) == 0xEB0000000079622DLL) {
        break;
      }
      char v42 = sub_23309C220();
      sub_232FFEF04((uint64_t)v10);
      if ((v42 & 1) == 0)
      {
        uint64_t v38 = v39 - 1;
        v36 += v37;
        if (v39) {
          continue;
        }
      }
      goto LABEL_43;
    }
    sub_232FFEF04((uint64_t)v10);
    char v42 = 1;
LABEL_43:
    swift_bridgeObjectRelease();
    char v7 = v34;
    uint64_t v14 = v53;
    uint64_t v18 = v54;
    if (!v54) {
      goto LABEL_53;
    }
  }
  else
  {
    char v42 = 0;
    char v7 = v34;
    if (!v18) {
      goto LABEL_53;
    }
  }
LABEL_44:
  uint64_t v44 = *(void *)(v18 + 16);
  if (v44)
  {
    uint64_t v45 = v18 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v46 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_232FFEEA0(v45, (uint64_t)v7);
      uint64_t v47 = &v7[*(int *)(v4 + 20)];
      if (*(void *)v47 == 0x646563616C706572 && *((void *)v47 + 1) == 0xEB0000000079622DLL) {
        break;
      }
      char v49 = sub_23309C220();
      sub_232FFEF04((uint64_t)v7);
      if (v49) {
        goto LABEL_62;
      }
      v45 += v46;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
    }
    sub_232FFEF04((uint64_t)v7);
LABEL_62:
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
      v33 |= 2uLL;
      return objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CE8]), sel_initWithOutcome_, v33);
    }
    goto LABEL_63;
  }
LABEL_53:
  if (v42)
  {
    v33 |= 8uLL;
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CE8]), sel_initWithOutcome_, v33);
  }
LABEL_63:
  if (!v33) {
    return 0;
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CE8]), sel_initWithOutcome_, v33);
}

id sub_232FFE960(void *a1, id a2)
{
  id v5 = objc_msgSend(a1, sel_FHIRVersion);
  id v6 = objc_msgSend(v5, sel_FHIRRelease);

  uint64_t v7 = sub_23309B710();
  uint64_t v9 = v8;
  if (v7 == sub_23309B710() && v9 == v10)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_23309C220();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      a2 = objc_msgSend(a1, sel_FHIRVersion);
      sub_232F6210C();
      swift_allocError();
      *(void *)uint64_t v13 = a2;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      char v14 = 6;
LABEL_17:
      *(unsigned char *)(v13 + 32) = v14;
      swift_willThrow();
      return a2;
    }
  }
  id v15 = objc_msgSend(a1, sel_FHIRVersion);
  id v16 = objc_msgSend(v15, sel_FHIRRelease);

  id v17 = objc_msgSend(a2, sel_FHIRVersion);
  id v18 = objc_msgSend(v17, sel_FHIRRelease);

  uint64_t v19 = sub_23309B710();
  uint64_t v21 = v20;
  if (v19 == sub_23309B710() && v21 == v22)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = sub_23309C220();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_232F6210C();
      swift_allocError();
      *(void *)uint64_t v13 = 2;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      char v14 = 7;
      goto LABEL_17;
    }
  }
  id v24 = objc_msgSend(a1, sel_data);
  uint64_t v25 = sub_23309B030();
  unint64_t v27 = v26;

  id v28 = objc_msgSend(a2, sel_data);
  uint64_t v29 = sub_23309B030();
  unint64_t v31 = v30;

  LOBYTE(v28) = sub_232FFE1E4(v25, v27, v29, v31);
  sub_232E9AA4C(v29, v31);
  sub_232E9AA4C(v25, v27);
  if (v28) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CE8]), sel_initWithOutcome_, 0);
  }
  sub_23309AB30();
  swift_allocObject();
  sub_23309AB20();
  id v33 = objc_msgSend(a1, sel_data);
  uint64_t v34 = sub_23309B030();
  unint64_t v36 = v35;

  sub_232EBF59C();
  sub_23309AB10();
  if (v2)
  {
    swift_release();
    sub_232E9AA4C(v34, v36);
  }
  else
  {
    sub_232E9AA4C(v34, v36);
    v57[6] = v65;
    v57[7] = v66;
    v57[8] = v67;
    uint64_t v58 = v68;
    v57[2] = v61;
    v57[3] = v62;
    v57[4] = v63;
    void v57[5] = v64;
    v57[0] = v59;
    v57[1] = v60;
    id v37 = objc_msgSend(a2, sel_data);
    uint64_t v38 = sub_23309B030();
    unint64_t v40 = v39;

    sub_23309AB10();
    sub_232E9AA4C(v38, v40);
    v45[6] = v53;
    v45[7] = v54;
    v45[8] = v55;
    v45[2] = v49;
    v45[3] = v50;
    v45[4] = v51;
    v45[5] = v52;
    v45[0] = v47;
    v45[1] = v48;
    v43[6] = v65;
    v43[7] = v66;
    v43[8] = v67;
    v43[2] = v61;
    void v43[3] = v62;
    v43[4] = v63;
    v43[5] = v64;
    v43[0] = v59;
    v43[1] = v60;
    v41[6] = v53;
    v41[7] = v54;
    v41[8] = v55;
    v41[2] = v49;
    v41[3] = v50;
    v41[4] = v51;
    v41[5] = v52;
    uint64_t v46 = v56;
    uint64_t v44 = v68;
    uint64_t v42 = v56;
    v41[0] = v47;
    v41[1] = v48;
    a2 = sub_232FFE47C((uint64_t)v43, (uint64_t)v41);
    sub_232EA49DC((uint64_t)v45);
    sub_232EA49DC((uint64_t)v57);
    if (!a2) {
      a2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CE8]), sel_initWithOutcome_, 1);
    }
    swift_release();
  }
  return a2;
}

uint64_t sub_232FFEEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.PatientLink(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_232FFEF04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelsR4.PatientLink(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_232FFEF60(int a1, int a2, int a3, int a4, SecKeyRef key)
{
  v21[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  CFStringRef v6 = (const __CFString *)*MEMORY[0x263F173B8];
  if (!SecKeyIsAlgorithmSupported(key, kSecKeyOperationTypeVerify, (SecKeyAlgorithm)*MEMORY[0x263F173B8]))
  {
    sub_232F632CC();
    swift_allocError();
    *(void *)uint64_t v19 = 3;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(unsigned char *)(v19 + 32) = 1;
LABEL_7:
    swift_willThrow();
    return;
  }
  v21[0] = 0;
  CFDataRef v7 = (const __CFData *)sub_23309B010();
  CFDataRef v8 = (const __CFData *)sub_23309B010();
  int v9 = SecKeyVerifySignature(key, v6, v7, v8, v21);

  if (v9) {
    return;
  }
  CFErrorRef v10 = v21[0];
  if (!v21[0])
  {
    sub_232F632CC();
    swift_allocError();
    *(void *)uint64_t v20 = 2;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    *(unsigned char *)(v20 + 32) = 4;
    goto LABEL_7;
  }
  type metadata accessor for CFError(0);
  sub_232FFF178();
  uint64_t v11 = v10;
  char v12 = (void *)swift_allocError();
  *uint64_t v13 = v11;
  char v14 = v11;
  id v15 = (void *)sub_23309AEB0();

  sub_232F632CC();
  swift_allocError();
  *(void *)uint64_t v16 = v15;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(unsigned char *)(v16 + 32) = 2;
  id v17 = v15;
  swift_willThrow();
  CFErrorRef v18 = v21[0];

  if (v18) {
}
  }

unint64_t sub_232FFF178()
{
  unint64_t result = qword_268758298;
  if (!qword_268758298)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_268758298);
  }
  return result;
}

uint64_t sub_232FFF1D0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_232FFF1F0, 0, 0);
}

id sub_232FFF1F0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (long long *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 52));
  long long v10 = *v2;
  uint64_t v11 = *((void *)v2 + 2);
  uint64_t v3 = sub_233001A34();
  v0[4] = v3;
  sub_232F3A800(0, &qword_268757808);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x263F0A028], v10, v11);
  v0[5] = result;
  if (result)
  {
    id v5 = result;
    uint64_t v6 = v0[2];
    uint64_t v7 = v6 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(unsigned char *)(v7 + 16) & 4) != 0)
    {

      int v9 = (uint64_t (*)(uint64_t))v0[1];
      return (id)v9(v3);
    }
    else
    {
      v0[6] = *(void *)(v7 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      CFDataRef v8 = (void *)swift_task_alloc();
      v0[7] = v8;
      *CFDataRef v8 = v0;
      v8[1] = sub_232F5E978;
      return (id)sub_232FDDCD0(v3, (uint64_t)v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_232FFF394(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  sub_23309AD60();
  v2[15] = swift_task_alloc();
  sub_233000760(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  v2[16] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[17] = swift_task_alloc();
  sub_233000760(0, &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
  v2[18] = swift_task_alloc();
  v2[19] = *(void *)(type metadata accessor for ModelsR4.ImmunizationPerformer(0) - 8);
  v2[20] = swift_task_alloc();
  v2[21] = *(void *)(type metadata accessor for Annotation() - 8);
  v2[22] = swift_task_alloc();
  sub_233000760(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[23] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FHIRDateTime();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_232FFF634, 0, 0);
}

uint64_t sub_232FFF634()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[14];
  uint64_t v5 = (int *)type metadata accessor for ModelsR4.Immunization(0);
  v0[27] = v5;
  sub_23300093C(v4 + v5[10], v3, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_233000880(v0[23], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F6210C();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000012;
    *(void *)(v6 + 8) = 0x80000002330B4FE0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(unsigned char *)(v6 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  int v9 = (void *)v0[14];
  sub_2330007B4(v0[23], v0[26]);
  id v10 = objc_msgSend(self, sel_FHIRImmunizationStatus);
  v0[28] = v10;
  uint64_t v11 = v9[5];
  uint64_t v12 = v9[6];
  v0[29] = v12;
  uint64_t v13 = sub_23309B710();
  v0[30] = v14;
  v0[2] = v10;
  v0[3] = v11;
  v0[4] = v12;
  v0[5] = v13;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v14;
  uint64_t v15 = v9[9];
  char v75 = v5;
  if (v15)
  {
    uint64_t v16 = v0 + 12;
    int64_t v17 = *(void *)(v15 + 16);
    if (v17)
    {
      uint64_t v18 = v0[21];
      uint64_t v76 = v0[22];
      uint64_t v79 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_232F39748(0, v17, 0);
      uint64_t v19 = v15 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v20 = *(void *)(v18 + 72);
      uint64_t v21 = v79;
      do
      {
        uint64_t v22 = (uint64_t *)v0[22];
        sub_233000818(v19, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Annotation);
        uint64_t v23 = *v22;
        uint64_t v24 = *(void *)(v76 + 8);
        swift_bridgeObjectRetain();
        sub_2330008DC((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_232F39748(0, *(void *)(v21 + 16) + 1, 1);
          uint64_t v21 = v79;
        }
        unint64_t v26 = *(void *)(v21 + 16);
        unint64_t v25 = *(void *)(v21 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_232F39748(v25 > 1, v26 + 1, 1);
          uint64_t v21 = v79;
        }
        *(void *)(v21 + 16) = v26 + 1;
        uint64_t v27 = v21 + 16 * v26;
        *(void *)(v27 + 32) = v23;
        *(void *)(v27 + 40) = v24;
        v19 += v20;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      uint64_t v16 = v0 + 12;
      uint64_t v5 = v75;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = MEMORY[0x263F8EE78];
    }
    void *v16 = v21;
    sub_232F51B70();
    sub_232F65EE4();
    uint64_t v28 = sub_23309B6C0();
    uint64_t v15 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = 0;
  }
  v0[31] = v28;
  v0[32] = v15;
  uint64_t v30 = *(void *)(v0[14] + v5[11]);
  if (v30)
  {
    unint64_t v31 = *(void *)(v30 + 16);
    if (v31 >= 2)
    {
      uint64_t v32 = v30 + 56;
      while (1)
      {
        uint64_t v33 = *(void *)(v32 + 32);
        unsigned int v34 = *(unsigned __int8 *)(v32 + 16);
        uint64_t v35 = *(void *)v32;
        unsigned int v36 = *(unsigned __int8 *)(v32 - 16);
        char v37 = *(void *)v32 ? 0 : *(unsigned char *)(v32 - 16);
        int v38 = v33 ? 0 : *(unsigned __int8 *)(v32 + 16);
        if ((v37 & 1) == 0 && !v38) {
          break;
        }
        v32 += 88;
        if (!--v31) {
          goto LABEL_41;
        }
      }
      uint64_t v72 = *(void *)(v32 - 8);
      uint64_t v77 = *(void *)(v32 + 8);
      uint64_t v73 = *(void *)(v32 + 24);
      uint64_t v74 = *(void *)(v32 - 24);
      uint64_t v39 = *(void *)(v32 + 40);
      uint64_t v40 = *(void *)(v32 + 48);
      goto LABEL_33;
    }
    if (v31)
    {
      unsigned int v36 = *(unsigned __int8 *)(v30 + 40);
      uint64_t v35 = *(void *)(v30 + 56);
      uint64_t v72 = *(void *)(v30 + 48);
      uint64_t v77 = *(void *)(v30 + 64);
      unsigned int v34 = *(unsigned __int8 *)(v30 + 72);
      uint64_t v33 = *(void *)(v30 + 88);
      uint64_t v73 = *(void *)(v30 + 80);
      uint64_t v74 = *(void *)(v30 + 32);
      uint64_t v39 = *(void *)(v30 + 96);
      uint64_t v40 = *(void *)(v30 + 104);
LABEL_33:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_232E967F8(v39, v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_232E967F8(v39, v40);
      swift_bridgeObjectRelease();
      sub_232E96840(v39, v40);
      if (v35) {
        uint64_t v42 = v72;
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = v35;
      if (!v35 && (v36 & 1) == 0)
      {
        v0[11] = v74;
        sub_233000A78();
        uint64_t v42 = sub_23309BDA0();
      }
      unint64_t v70 = v43;
      uint64_t v71 = v42;
      swift_bridgeObjectRetain();
      uint64_t v41 = v73;
      sub_2330009A8(v74, v36, v72, v35, v77, v34, v73, v33, v39, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_232E96840(v39, v40);
      if (v33)
      {
        sub_233000A10(v74, v36, v72, v35, v77, v34, v73, v33, v39, v40);
      }
      else
      {
        sub_233000A10(v74, v36, v72, v35, v77, v34, v73, 0, v39, v40);
        if (v34)
        {
          uint64_t v41 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          v0[10] = v77;
          sub_233000A78();
          uint64_t v41 = sub_23309BDA0();
          uint64_t v33 = v44;
        }
      }
      uint64_t v5 = v75;
      unint64_t v31 = v70;
      uint64_t v30 = v71;
      goto LABEL_46;
    }
LABEL_41:
    uint64_t v41 = 0;
    uint64_t v33 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v33 = 0;
    unint64_t v31 = 0;
  }
LABEL_46:
  v0[35] = v30;
  v0[36] = v31;
  v0[33] = v41;
  v0[34] = v33;
  uint64_t v45 = v0[14];
  uint64_t v46 = *(void *)(v45 + v5[17]);
  if (v46)
  {
    uint64_t v47 = *(void *)(v46 + 16);
    if (v47)
    {
      uint64_t v48 = v0[19];
      uint64_t v78 = v0[18];
      uint64_t v49 = v46 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      uint64_t v50 = *(void *)(v48 + 72);
      swift_bridgeObjectRetain_n();
      long long v51 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v52 = v0[20];
        uint64_t v53 = v0[18];
        sub_233000818(v49, v52, type metadata accessor for ModelsR4.ImmunizationPerformer);
        sub_23300093C(v52, v53, &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
        uint64_t v54 = type metadata accessor for Reference();
        int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v53, 1, v54);
        uint64_t v56 = v0[20];
        unint64_t v57 = (uint64_t *)v0[18];
        if (v55 == 1)
        {
          sub_233000880(v0[18], &qword_268756580, (void (*)(uint64_t))type metadata accessor for Reference);
          sub_2330008DC(v56, type metadata accessor for ModelsR4.ImmunizationPerformer);
        }
        else
        {
          uint64_t v58 = *v57;
          uint64_t v59 = *(void *)(v78 + 8);
          swift_bridgeObjectRetain();
          sub_2330008DC((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for Reference);
          sub_2330008DC(v56, type metadata accessor for ModelsR4.ImmunizationPerformer);
          if (v59)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v51 = sub_232F3CCE0(0, v51[2] + 1, 1, v51);
            }
            unint64_t v61 = v51[2];
            unint64_t v60 = v51[3];
            if (v61 >= v60 >> 1) {
              long long v51 = sub_232F3CCE0((void *)(v60 > 1), v61 + 1, 1, v51);
            }
            v51[2] = v61 + 1;
            long long v62 = &v51[2 * v61];
            v62[4] = v58;
            v62[5] = v59;
          }
        }
        v49 += v50;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease_n();
      uint64_t v5 = v75;
    }
    else
    {
      long long v51 = (void *)MEMORY[0x263F8EE78];
    }
    v0[9] = v51;
    sub_232F51B70();
    sub_232F65EE4();
    uint64_t v63 = sub_23309B6C0();
    uint64_t v64 = v65;
    swift_bridgeObjectRelease();
    uint64_t v45 = v0[14];
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
  }
  v0[37] = v63;
  v0[38] = v64;
  sub_233000818(v0[13], v0[17], (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v66 = v0[16];
  if (*(void *)(v45 + v5[20] + 8))
  {
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v67 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v66, 0, 1, v67);
  }
  else
  {
    uint64_t v68 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v66, 1, 1, v68);
  }
  uint64_t v69 = swift_task_alloc();
  v0[39] = v69;
  *(void *)uint64_t v69 = v0;
  *(void *)(v69 + 8) = sub_23300002C;
  *(_OWORD *)(v69 + 16) = *(_OWORD *)(v0 + 13);
  return MEMORY[0x270FA2498](sub_232FFF1F0, 0, 0);
}

uint64_t sub_23300002C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23300012C, 0, 0);
}

uint64_t sub_23300012C()
{
  uint64_t v1 = (void *)v0[40];
  uint64_t v2 = v0[26];
  id v3 = objc_msgSend(v1, sel_codings);

  sub_232F3A800(0, (unint64_t *)&qword_268757138);
  uint64_t v4 = sub_23309B9A0();

  uint64_t v5 = 0;
  uint64_t v6 = v0[26];
  if (*(void *)(v2 + 56) == 1)
  {
    if (*(unsigned char *)(v6 + 19))
    {
      if (*(unsigned char *)(v6 + 17)) {
        uint64_t v5 = 3;
      }
      else {
        uint64_t v5 = 2;
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
  }
  uint64_t v7 = v0[24];
  uint64_t v8 = v0[15];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  int v9 = (uint64_t *)(v6 + *(int *)(v7 + 32));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  id v37 = sub_233017340(v8, v10, v11, v5);
  if (*(unsigned char *)(v0[14] + 68)) {
    id v29 = 0;
  }
  else {
    id v29 = FHIRDate.asMedicalDate()();
  }
  unint64_t v12 = v0[36];
  uint64_t v35 = v4;
  if (v12)
  {
    uint64_t v13 = v0[35];
    uint64_t v14 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = 0;
      unint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  unint64_t v15 = v0[34];
  uint64_t v36 = v13;
  if (v15)
  {
    uint64_t v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0) {
      uint64_t v16 = v0[33] & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      uint64_t v28 = v0[33];
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = 0;
      unint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v17 = v0[14];
  uint64_t v18 = (uint64_t *)(v17 + *(int *)(v0[27] + 64));
  uint64_t v19 = v18[1];
  uint64_t v33 = *v18;
  if (*(void *)(v17 + 40) == 0x656E6F642D746F6ELL && *(void *)(v17 + 48) == 0xE800000000000000) {
    char v20 = 1;
  }
  else {
    char v20 = sub_23309C220();
  }
  uint64_t v21 = v0[37];
  uint64_t v22 = v0[38];
  uint64_t v30 = v0[31];
  uint64_t v31 = v0[32];
  uint64_t v32 = (void *)v0[28];
  uint64_t v34 = v0[26];
  uint64_t v23 = (uint64_t *)v0[17];
  uint64_t v24 = v0[16];
  sub_232F3A800(0, &qword_2687582B0);
  swift_bridgeObjectRetain();
  id v25 = sub_232F691A0(v23, v24, v30, v31, v35, (uint64_t)v37, v29, v0 + 2, v36, v12, v28, v15, v33, v19, v21, v22, 0, 0, 0,
          v20 & 1,
          0,
          0,
          0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_2330008DC(v34, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v26 = (uint64_t (*)(id))v0[1];
  return v26(v25);
}

void sub_233000760(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2330007B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_233000818(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233000880(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233000760(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2330008DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23300093C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233000760(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_2330009A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_232E967F8(a9, a10);
  }
}

void sub_233000A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(a9, a10);
  }
}

unint64_t sub_233000A78()
{
  unint64_t result = qword_2687582B8;
  if (!qword_2687582B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687582B8);
  }
  return result;
}

uint64_t *sub_233000ACC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = a3[7];
    uint64_t v8 = (char *)a1 + v7;
    int v9 = (char *)a2 + v7;
    uint64_t v10 = sub_23309B190();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[8];
    unint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_23309AF80();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_232F41D18();
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    char v20 = (uint64_t *)((char *)v4 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *char v20 = *v21;
    v20[1] = v22;
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_233000CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = sub_23309AF80();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_233000DE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  unint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = sub_23309AF80();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_232F41D18();
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_233000F94(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  unint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_23309AF80();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_232F41D18();
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_2330011D4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  unint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = sub_23309AF80();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_232F41D18();
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_233001364(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  unint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = sub_23309AF80();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_232F41D18();
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  return a1;
}

uint64_t sub_23300157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233001590);
}

uint64_t sub_233001590(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_23309B190();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[7];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  sub_232F41D18();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[9] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_2330016A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2330016B8);
}

void sub_2330016B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_23309B190();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
  }
  else
  {
    sub_232F41D18();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[9] + 8) = (a2 - 1);
      return;
    }
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
  }
  unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for ExtractionContext()
{
  uint64_t result = qword_2687582C0;
  if (!qword_2687582C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_233001814()
{
  sub_23309B190();
  if (v0 <= 0x3F)
  {
    sub_232F41D18();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

id DomainResource.originIdentifier()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a2 + 8) + 24))();
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v4 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(self, sel_originIdentifierWithFHIRResourceType_identifier_, v4, v5);

  return v6;
}

uint64_t dispatch thunk of FHIRResource.resourceType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FHIRResource.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DomainResource.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_233001A34()
{
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v40 = (char *)v35 - v2;
  uint64_t v39 = (int *)type metadata accessor for Coding();
  uint64_t v3 = *((void *)v39 - 1);
  MEMORY[0x270FA5388](v39);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[1];
  if (v0[2]) {
    uint64_t v7 = v0[2];
  }
  else {
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v24 = MEMORY[0x263F8EE78];
    unint64_t v41 = MEMORY[0x263F8EE78];
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v35[1] = *v0;
  uint64_t v36 = v6;
  unint64_t v41 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  sub_23309BF20();
  uint64_t v9 = self;
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  v35[0] = v7;
  uint64_t v11 = v7 + ((v10 + 32) & ~v10);
  uint64_t v37 = *(void *)(v3 + 72);
  id v38 = v9;
  uint64_t v12 = (uint64_t)v40;
  do
  {
    sub_232F65C38(v11, (uint64_t)v5);
    sub_232F41E94((uint64_t)v5, v12);
    uint64_t v15 = sub_23309AF80();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) == 1)
    {
      sub_232F65D50(v12, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      id v17 = 0;
    }
    else
    {
      uint64_t v18 = self;
      sub_23309AEE0();
      uint64_t v19 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v18, sel_codeSystemWithIdentifier_, v19, v35[0]);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v12, v15);
    }
    uint64_t v20 = *(void *)&v5[v39[5] + 8];
    uint64_t v21 = *(void *)&v5[v39[6] + 8];
    if (*(void *)&v5[v39[7] + 8])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = 0;
      if (v20)
      {
LABEL_13:
        uint64_t v23 = (void *)sub_23309B6E0();
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_6;
        }
        goto LABEL_17;
      }
    }
    uint64_t v23 = 0;
    if (v21)
    {
LABEL_6:
      unint64_t v13 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
LABEL_17:
    unint64_t v13 = 0;
LABEL_7:
    uint64_t v12 = (uint64_t)v40;
    id v14 = objc_msgSend(v38, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v17, v22, v23, v13, v35[0]);

    sub_2330024D0((uint64_t)v5);
    sub_23309BF00();
    sub_23309BF30();
    sub_23309BF40();
    sub_23309BF10();
    v11 += v37;
    --v8;
  }
  while (v8);
  unint64_t v24 = v41;
  swift_bridgeObjectRelease();
  unint64_t v41 = v24;
  if (!v36)
  {
LABEL_23:
    id v30 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
    sub_232F40368();
    uint64_t v31 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v30, sel_initWithCodings_, v31);

    return (uint64_t)v32;
  }
LABEL_21:
  id v25 = objc_msgSend(self, sel_textSystem);
  sub_23309B710();
  swift_bridgeObjectRetain_n();
  unint64_t v26 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v27 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v25, v26, v27, v28);

  if (!(v24 >> 62)
    || (swift_bridgeObjectRetain(),
        uint64_t v34 = sub_23309BF80(),
        uint64_t result = swift_bridgeObjectRelease(),
        (v34 & 0x8000000000000000) == 0))
  {
    sub_23303AACC(0, 0, (uint64_t)v29);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

id sub_233001FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v37 - v4;
  sub_232F65CFC(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v37 - v7;
  uint64_t v9 = type metadata accessor for Coding();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v37 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = *(void *)(v2 + 16);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    sub_232F65D50((uint64_t)v8, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
    return 0;
  }
  uint64_t v42 = (uint64_t)&v37 - v20;
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22)
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  uint64_t v39 = v13;
  uint64_t v40 = v10;
  unint64_t v41 = v8;
  uint64_t v23 = v21;
  uint64_t v24 = v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v43 = v16 + 8;
  uint64_t v44 = v9;
  uint64_t v25 = *(void *)(v10 + 72);
  uint64_t v38 = v23;
  swift_bridgeObjectRetain_n();
  do
  {
    sub_232F65C38(v24, (uint64_t)v19);
    sub_232F41E94((uint64_t)v19, (uint64_t)v5);
    uint64_t v26 = sub_23309AF80();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v5, 1, v26) == 1)
    {
      sub_232F65D50((uint64_t)v5, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      sub_232F65C38((uint64_t)v19, (uint64_t)v16);
LABEL_5:
      sub_2330024D0((uint64_t)v16);
      goto LABEL_6;
    }
    uint64_t v28 = sub_23309AEE0();
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v26);
    uint64_t v49 = v28;
    uint64_t v50 = v30;
    uint64_t v47 = v45;
    uint64_t v48 = v46;
    sub_232F379FC();
    uint64_t v31 = sub_23309BD60();
    swift_bridgeObjectRelease();
    sub_232F65C38((uint64_t)v19, (uint64_t)v16);
    if (v31) {
      goto LABEL_5;
    }
    uint64_t v32 = *(void *)&v43[*(int *)(v44 + 20)];
    swift_bridgeObjectRetain();
    sub_2330024D0((uint64_t)v16);
    if (v32)
    {
      uint64_t v21 = v38;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v41;
      sub_232F65DAC((uint64_t)v19, (uint64_t)v41);
      uint64_t v10 = v40;
      uint64_t v9 = v44;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v8, 0, 1, v44);
      unint64_t v13 = v39;
      goto LABEL_15;
    }
LABEL_6:
    sub_2330024D0((uint64_t)v19);
    v24 += v25;
    --v22;
  }
  while (v22);
  uint64_t v21 = v38;
  swift_bridgeObjectRelease();
  uint64_t v10 = v40;
  uint64_t v8 = v41;
  unint64_t v13 = v39;
  uint64_t v9 = v44;
LABEL_14:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_15:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_232F65D50((uint64_t)v8, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
    if (*(void *)(v21 + 16))
    {
      sub_232F65C38(v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v13);
      id v33 = sub_232FE5CAC();
      uint64_t v34 = (uint64_t)v13;
      goto LABEL_19;
    }
    return 0;
  }
  else
  {
    uint64_t v35 = v42;
    sub_232F65DAC((uint64_t)v8, v42);
    id v33 = sub_232FE5CAC();
    uint64_t v34 = v35;
LABEL_19:
    sub_2330024D0(v34);
  }
  return v33;
}

uint64_t sub_2330024D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23300252C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)v2;
  *(void *)(v3 + 48) = *(void *)(v2 + 16);
  return MEMORY[0x270FA2498](sub_23300255C, 0, 0);
}

uint64_t sub_23300255C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)sub_233001A34();
  v0[7] = v2;
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v4 = *(void *)(v3 + 16);
  id v5 = v2;
  uint64_t v6 = (uint64_t)v5;
  if ((v4 & 4) != 0)
  {
    v0[10] = v5;
    return MEMORY[0x270FA2498](sub_2330027E0, 0, 0);
  }
  else
  {
    v0[8] = *(void *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[9] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_2330026A0;
    uint64_t v8 = v0[3];
    return sub_232FDDCD0(v6, v8);
  }
}

uint64_t sub_2330026A0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 56);
  swift_task_dealloc();
  swift_release();

  *(void *)(v3 + 80) = a1;
  return MEMORY[0x270FA2498](sub_2330027E0, 0, 0);
}

uint64_t sub_2330027E0()
{
  uint64_t v1 = *(void **)(v0 + 80);

  id v2 = objc_msgSend(v1, sel_codings);
  sub_232F40368();
  sub_23309B9A0();

  uint64_t v3 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(self, sel_inspectableValueWithMedicalCodings_, v3);

  id v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

unsigned char *storeEnumTagSinglePayload for BinaryDataError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2330029A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryDataError()
{
  return &type metadata for BinaryDataError;
}

unint64_t sub_2330029DC()
{
  unint64_t result = qword_2687582D8;
  if (!qword_2687582D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_2687582D8);
  }
  return result;
}

uint64_t sub_233002A30(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  sub_233005438(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  *(void *)(v2 + 80) = swift_task_alloc();
  *(void *)(v2 + 88) = type metadata accessor for RecordExtractionContext();
  *(void *)(v2 + 96) = swift_task_alloc();
  sub_23309AD60();
  *(void *)(v2 + 104) = swift_task_alloc();
  *(void *)(v2 + 112) = swift_task_alloc();
  *(void *)(v2 + 120) = type metadata accessor for FHIRDateTime();
  *(void *)(v2 + 128) = swift_task_alloc();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  *(void *)(v2 + 136) = v3;
  *(void *)(v2 + 144) = v4;
  *(void *)(v2 + 152) = v5;
  *(_OWORD *)(v2 + 160) = *(_OWORD *)(v1 + 64);
  *(void *)(v2 + 176) = *(void *)(v1 + 80);
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(v1 + 88);
  *(void *)(v2 + 200) = *(void *)(v1 + 104);
  return MEMORY[0x270FA2498](sub_233002BC4, 0, 0);
}

uint64_t sub_233002BC4()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = self;
  uint64_t v3 = (void *)sub_23309B6E0();
  id v4 = objc_msgSend(v2, sel_codeSystemWithIdentifier_, v3);

  sub_23309B710();
  uint64_t v5 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  unsigned int v6 = (void *)sub_23309B6E0();
  uint64_t v7 = (void *)sub_23309B6E0();
  v0[26] = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, v5, v6, v7);

  uint64_t v8 = sub_23309B710();
  v0[27] = v9;
  uint64_t v10 = (void *)sub_23309B6E0();
  v0[28] = objc_msgSend(v2, sel_codeSystemWithIdentifier_, v10);

  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  uint64_t v11 = v0[17];
  uint64_t v43 = v8;
  if (*(void *)(v11 + 56) == 1)
  {
    if (*(unsigned char *)(v11 + 19))
    {
      uint64_t v12 = 2;
      if (*(unsigned char *)(v11 + 17)) {
        uint64_t v12 = 3;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
    uint64_t v44 = v12;
  }
  else
  {
    uint64_t v44 = 0;
  }
  uint64_t v13 = v0[14];
  uint64_t v14 = v0[15];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v15 = (uint64_t *)(v11 + *(int *)(v14 + 32));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  id v18 = sub_233017340(v13, v16, v17, v44);
  v0[29] = v18;
  sub_2330053D8(v11, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v19 = v14;
  uint64_t v20 = v0[16];
  uint64_t v21 = self;
  v0[30] = objc_msgSend(v21, sel_inspectableValueWithMedicalDate_, v18);
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v20);
  uint64_t v22 = v0[16];
  if (*(void *)(v22 + 56) == 1)
  {
    if (*(unsigned char *)(v22 + 19))
    {
      uint64_t v23 = 2;
      if (*(unsigned char *)(v22 + 17)) {
        uint64_t v23 = 3;
      }
    }
    else
    {
      uint64_t v23 = 1;
    }
    uint64_t v42 = v23;
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v24 = v0[13];
  FHIRDateTime.asDateComponents()();
  uint64_t v25 = (uint64_t *)(v22 + *(int *)(v19 + 32));
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  swift_bridgeObjectRetain();
  id v28 = sub_233017340(v24, v26, v27, v42);
  v0[31] = v28;
  id v29 = v28;
  uint64_t v30 = v0[16];
  uint64_t v32 = v0[11];
  uint64_t v31 = v0[12];
  uint64_t v33 = v0[9];
  uint64_t v34 = v0[10];
  v0[32] = v43;
  sub_2330053D8(v30, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  v0[33] = objc_msgSend(v21, sel_inspectableValueWithMedicalDate_, v29);
  v0[34] = sub_232F3A800(0, &qword_268757D88);
  sub_233005334(v33, v31, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v35 = sub_23309B230();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
  uint64_t v36 = v33 + *(int *)(v32 + 20);
  v0[35] = *(void *)(v36 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  uint64_t v37 = *(void *)(v36 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v38 = (void *)swift_task_alloc();
  v0[36] = v38;
  *uint64_t v38 = v0;
  v38[1] = sub_2330031F8;
  uint64_t v39 = v0[24];
  uint64_t v40 = v0[25];
  return sub_232FE0168(0, v39, v40, 0, 0, v37);
}

uint64_t sub_2330031F8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 296) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_233003318, 0, 0);
}

uint64_t sub_233003318()
{
  uint64_t v1 = *(void **)(v0 + 264);
  id v18 = *(void **)(v0 + 296);
  uint64_t v3 = *(void **)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  id v4 = *(void **)(v0 + 240);
  uint64_t v21 = *(void **)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 216);
  unsigned int v6 = *(void **)(v0 + 224);
  uint64_t v7 = *(void **)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v14 = *(uint64_t **)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v6;
  *(_OWORD *)(v0 + 24) = xmmword_2330A6D10;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v5;
  *(_OWORD *)(v0 + 56) = xmmword_2330A6D20;
  id v20 = v1;
  id v19 = v4;
  id v8 = v3;
  id v9 = v7;
  id v10 = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  id v11 = sub_23305122C(v14, v15, 0, 0, v18, MEMORY[0x263F8EE78], v16, v17, (uint64_t)v1, (uint64_t)v4, (uint64_t)v3, (uint64_t)v7, (void **)(v0 + 16), 0, 0);

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(id))(v0 + 8);
  return v12(v11);
}

uint64_t sub_233003518(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = a2;
  *(void *)(v3 + 256) = type metadata accessor for FHIRExtractionContext();
  *(void *)(v3 + 264) = swift_task_alloc();
  *(void *)(v3 + 272) = type metadata accessor for ModelsR4.Condition(0);
  *(void *)(v3 + 280) = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  *(void *)(v3 + 288) = v4;
  *(void *)(v3 + 296) = v5;
  *(void *)(v3 + 304) = v6;
  *(_OWORD *)(v3 + 312) = *((_OWORD *)v2 + 1);
  *(void *)(v3 + 328) = v2[4];
  long long v7 = *(_OWORD *)(v2 + 7);
  *(_OWORD *)(v3 + 336) = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(v3 + 352) = v7;
  uint64_t v8 = v2[10];
  *(void *)(v3 + 368) = v2[9];
  *(void *)(v3 + 376) = v8;
  uint64_t v9 = v2[12];
  *(void *)(v3 + 384) = v2[11];
  *(void *)(v3 + 392) = v9;
  *(void *)(v3 + 400) = v2[13];
  return MEMORY[0x270FA2498](sub_23300362C, 0, 0);
}

uint64_t sub_23300362C()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  long long v3 = *(_OWORD *)(v0 + 376);
  long long v4 = *(_OWORD *)(v0 + 360);
  long long v5 = *(_OWORD *)(v0 + 344);
  long long v6 = *(_OWORD *)(v0 + 328);
  long long v7 = *(_OWORD *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 240);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 80) = v4;
  *(_OWORD *)(v0 + 96) = v3;
  *(void *)(v0 + 112) = v2;
  *(void *)(v0 + 120) = v1;
  uint64_t v9 = v8 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v10 = *(void *)(v9 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  *(void *)(v0 + 408) = v10;
  uint64_t v11 = *(void *)(v9 + 16);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v12;
  void *v12 = v0;
  v12[1] = sub_233003754;
  uint64_t v13 = *(void *)(v0 + 280);
  return sub_2330044AC(v13, v10, v11);
}

uint64_t sub_233003754()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_2330041D8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_233003870;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_233003870()
{
  uint64_t v50 = v0;
  uint64_t v1 = (void *)v0[53];
  sub_2330051F8(v0[35], v0[36]);
  sub_23309ABA0();
  swift_allocObject();
  sub_23309AB90();
  sub_23300525C();
  uint64_t v2 = sub_23309AB80();
  if (!v1)
  {
    uint64_t v17 = v2;
    unint64_t v18 = v3;
    id v19 = (void *)v0[31];
    swift_release();
    sub_232E9A9F4(v17, v18);
    id v20 = (void *)sub_232FE782C(v19);
    uint64_t v46 = v17;
    uint64_t v42 = v0[38];
    uint64_t v21 = (uint64_t *)v0[36];
    unint64_t v47 = v18;
    uint64_t v48 = v0[37];
    uint64_t v22 = (int *)v0[32];
    uint64_t v23 = v0[33];
    uint64_t v24 = v0[30];
    unint64_t v44 = sub_233020734(v25);
    swift_bridgeObjectRelease();
    id v26 = v20;
    uint64_t v45 = sub_233086410();
    uint64_t type = v27;
    sub_233005334(v24, v23, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    uint64_t v29 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v30 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = (void *)v30;
    uint64_t v32 = v26;
    id v33 = objc_msgSend(v31, sel_primaryR4Version);
    uint64_t v34 = (void *)(v23 + v22[5]);
    *uint64_t v34 = v29;
    v34[1] = v28;
    uint64_t v35 = (void *)(v23 + v22[6]);
    *uint64_t v35 = v48;
    v35[1] = v42;
    *(void *)(v23 + v22[7]) = v33;
    uint64_t v36 = (uint64_t *)(v23 + v22[8]);
    *uint64_t v36 = v46;
    v36[1] = v47;
    id v37 = sub_23300549C(v23, v26, v44, v45, type);
    uint64_t v38 = v0[36];
    uint64_t v39 = v0[33];

    sub_232E9AA4C(v46, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_2330053D8(v39, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
    sub_2330053D8(v38, type metadata accessor for ModelsR4.Condition);
    goto LABEL_11;
  }
  swift_release();
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_23309B4B0();
  __swift_project_value_buffer(v4, (uint64_t)qword_268770F68);
  id v5 = v1;
  id v6 = v1;
  long long v7 = sub_23309B4A0();
  os_log_type_t v8 = sub_23309BB80();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v49 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[28] = v1;
    id v11 = v1;
    id v12 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v13 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v14 = sub_23309B770();
    unint64_t v16 = v15;

    v0[24] = sub_232F62B64(v14, v16, &v49);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v10, -1, -1);
    MEMORY[0x237DB6EC0](v9, -1, -1);

    if (!v0[53]) {
      goto LABEL_9;
    }
  }
  else
  {

    if (!v0[53]) {
LABEL_9:
    }
      sub_2330053D8(v0[36], type metadata accessor for ModelsR4.Condition);
  }
  id v37 = 0;
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = (uint64_t (*)(id))v0[1];
  return v40(v37);
}

uint64_t sub_2330041D8()
{
  unint64_t v18 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[53];
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_23309B4B0();
  __swift_project_value_buffer(v2, (uint64_t)qword_268770F68);
  id v3 = v1;
  id v4 = v1;
  id v5 = sub_23309B4A0();
  os_log_type_t v6 = sub_23309BB80();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)long long v7 = 136315138;
    v0[28] = v1;
    id v9 = v1;
    id v10 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_23309B770();
    unint64_t v14 = v13;

    v0[24] = sub_232F62B64(v12, v14, &v17);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v8, -1, -1);
    MEMORY[0x237DB6EC0](v7, -1, -1);

    if (v0[53]) {
      goto LABEL_8;
    }
  }
  else
  {

    if (v0[53]) {
      goto LABEL_8;
    }
  }
  sub_2330053D8(v0[36], type metadata accessor for ModelsR4.Condition);
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_2330044AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 48) = a1;
  id v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233005438(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  sub_233005438(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v5);
  *(void *)(v4 + 88) = swift_task_alloc();
  *(void *)(v4 + 96) = swift_task_alloc();
  sub_233005438(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Reference();
  *(void *)(v4 + 128) = v6;
  *(void *)(v4 + 136) = *(void *)(v6 - 8);
  *(void *)(v4 + 144) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for FHIRDateTime();
  *(void *)(v4 + 152) = v7;
  *(void *)(v4 + 160) = *(void *)(v7 - 8);
  *(void *)(v4 + 168) = swift_task_alloc();
  *(void *)(v4 + 176) = swift_task_alloc();
  sub_233005438(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v5);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 40);
  *(void *)(v4 + 184) = v8;
  *(void *)(v4 + 192) = v9;
  *(void *)(v4 + 200) = v10;
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(v3 + 64);
  *(void *)(v4 + 224) = *(void *)(v3 + 80);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(v3 + 88);
  *(void *)(v4 + 248) = *(void *)(v3 + 104);
  return MEMORY[0x270FA2498](sub_23300478C, 0, 0);
}

uint64_t sub_23300478C()
{
  uint64_t v1 = v0[23];
  uint64_t v17 = v0[22];
  sub_233005438(0, &qword_2687570A0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8E0F8]);
  uint64_t v2 = (int *)(type metadata accessor for Coding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = swift_allocObject();
  v0[32] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_2330A1880;
  uint64_t v5 = v4 + v3;
  sub_23309AF50();
  uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_2330052B4(v1, v5, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  *(_OWORD *)(v5 + v2[7]) = xmmword_2330A6D30;
  *(_OWORD *)(v5 + v2[8]) = xmmword_2330A6D40;
  uint64_t v7 = (void *)(v5 + v2[9]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = swift_allocObject();
  v0[33] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_2330A1880;
  uint64_t v9 = v8 + v3;
  sub_23309AF50();
  sub_2330052B4(v1, v9, (unint64_t *)&qword_268756520, v6);
  *(_OWORD *)(v9 + v2[7]) = xmmword_2330A6D10;
  *(_OWORD *)(v9 + v2[8]) = xmmword_2330A6D20;
  uint64_t v10 = (void *)(v9 + v2[9]);
  *uint64_t v10 = 0;
  v10[1] = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v17);
  uint64_t v11 = v0[21];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v11);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[34] = v12;
  void *v12 = v0;
  v12[1] = sub_233004BAC;
  uint64_t v13 = v0[30];
  uint64_t v14 = v0[31];
  uint64_t v15 = v0[8];
  return sub_232FE1994((uint64_t)(v0 + 2), 0, v13, v14, 0, 0, v15);
}

uint64_t sub_233004BAC()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233004CA8, 0, 0);
}

uint64_t sub_233004CA8()
{
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void **)(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 152);
  uint64_t v32 = *(void *)(v0 + 168);
  uint64_t v25 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v35 = *(void *)(v0 + 112);
  uint64_t v36 = *(void *)(v0 + 104);
  uint64_t v38 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 80);
  uint64_t v34 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 48);
  long long v28 = *(_OWORD *)(v0 + 16);
  uint64_t v9 = (char *)v5 + *(int *)(v25 + 24);
  uint64_t v27 = *(void *)(v0 + 32);
  uint64_t v10 = type metadata accessor for Identifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v33 = (uint64_t)v5;
  *uint64_t v5 = v1;
  v5[1] = v2;
  v5[2] = 0;
  v5[3] = 0;
  uint64_t v37 = v6;
  sub_233005334(v3, v6, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  v11(v6, 0, 1, v31);
  uint64_t v12 = type metadata accessor for Period();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v7, 1, 1, v12);
  sub_233005334(v32, v35, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  v11(v35, 0, 1, v31);
  v13(v38, 1, 1, v12);
  sub_233005334(v32, v36, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  v11(v36, 0, 1, v31);
  sub_233005334(v33, v24, (uint64_t (*)(void))type metadata accessor for Reference);
  uint64_t v14 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56);
  v14(v24, 0, 1, v25);
  sub_233005334(v33, v34, (uint64_t (*)(void))type metadata accessor for Reference);
  v14(v34, 0, 1, v25);
  uint64_t v15 = (int *)type metadata accessor for ModelsR4.Condition(0);
  *(void *)(v0 + 40) = v15;
  sub_23300539C();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_23309B770();
  uint64_t v18 = v17;
  sub_2330053D8(v33, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_2330053D8(v32, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_2330053D8(v3, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  *(void *)uint64_t v8 = v16;
  *(void *)(v8 + 8) = v18;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(_OWORD *)(v8 + 32) = xmmword_2330A6D50;
  *(void *)(v8 + 48) = 0xE800000000000000;
  *(void *)(v8 + 56) = v29;
  *(_OWORD *)(v8 + 64) = xmmword_2330A6D20;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 80) = v30;
  *(_OWORD *)(v8 + 104) = xmmword_2330A4FC0;
  *(_OWORD *)(v8 + 120) = v28;
  *(void *)(v8 + 136) = v27;
  *(void *)(v8 + 144) = 0;
  sub_2330052B4(v37, v8 + v15[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_2330052B4(v7, v8 + v15[14], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v19 = (void *)(v8 + v15[15]);
  void *v19 = 0;
  v19[1] = 0;
  sub_2330052B4(v35, v8 + v15[16], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_2330052B4(v38, v8 + v15[17], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  id v20 = (void *)(v8 + v15[18]);
  *id v20 = 0;
  v20[1] = 0;
  sub_2330052B4(v36, v8 + v15[19], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_2330052B4(v24, v8 + v15[20], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_2330052B4(v34, v8 + v15[21], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  *(void *)(v8 + v15[22]) = 0;
  uint64_t v21 = (void *)(v8 + v15[23]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_2330051F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.Condition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23300525C()
{
  unint64_t result = qword_268756BF8;
  if (!qword_268756BF8)
  {
    type metadata accessor for ModelsR4.Condition(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BF8);
  }
  return result;
}

uint64_t sub_2330052B4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_233005438(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_233005334(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_23300539C()
{
  unint64_t result = qword_268756748;
  if (!qword_268756748)
  {
    type metadata accessor for ModelsR4.Condition(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268756748);
  }
  return result;
}

uint64_t sub_2330053D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_233005438(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

id sub_23300549C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2330054B4(a1, a2, a3, a4, a5);
}

id sub_2330054B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  id v44 = a2;
  uint64_t v45 = a3;
  uint64_t v43 = sub_23309B190();
  uint64_t v6 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233008498(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = (int *)type metadata accessor for FHIRExtractionContext();
  uint64_t v13 = v12[6];
  uint64_t v14 = (uint64_t *)(a1 + v12[5]);
  uint64_t v15 = v14[1];
  uint64_t v42 = *v14;
  if (*(void *)(a1 + v13 + 8))
  {
    uint64_t v16 = *(void *)(a1 + v13);
    uint64_t v40 = *(void *)(a1 + v13 + 8);
    uint64_t v41 = v16;
  }
  else
  {
    uint64_t v40 = 0xE700000000000000;
    uint64_t v41 = 0x2964692D6F6E28;
  }
  uint64_t v17 = v12[8];
  uint64_t v18 = *(void **)(a1 + v12[7]);
  uint64_t v20 = *(void *)(a1 + v17);
  unint64_t v19 = *(void *)(a1 + v17 + 8);
  swift_bridgeObjectRetain();
  id v21 = v18;
  swift_bridgeObjectRetain();
  sub_232E9A9F4(v20, v19);
  sub_232F56F08((uint64_t)v11);
  uint64_t v22 = sub_23309AF80();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 0, 1, v22);
  uint64_t v23 = a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v24 = type metadata accessor for ExtractionContext();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v23 + *(int *)(v24 + 28), v43);
  id v25 = objc_allocWithZone(MEMORY[0x263F0A370]);
  id v26 = sub_233008170(v42, v15, v41, v40, (uint64_t)v21, v20, v19, (uint64_t)v11, (uint64_t)v8);
  sub_232E9AA4C(v20, v19);

  uint64_t v27 = self;
  id v28 = v44;
  id v29 = objc_msgSend(v27, sel_localDevice);
  uint64_t v30 = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v31 = v26;
  uint64_t v32 = (void *)sub_23309B130();
  uint64_t v33 = (void *)sub_23309B130();
  if (v30)
  {
    uint64_t v34 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = 0;
  }
  uint64_t v35 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v36 = objc_msgSend(self, sel_clinicalRecordWithType_startDate_endDate_device_metadata_displayName_FHIRResource_, v28, v32, v33, v29, v34, v35, v31);

  id v37 = v36;
  uint64_t v38 = (void *)sub_23309B130();
  objc_msgSend(v37, sel__setCreationDate_, v38);

  return v37;
}

uint64_t sub_233005898(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  sub_233008498(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  *(void *)(v2 + 80) = swift_task_alloc();
  *(void *)(v2 + 88) = type metadata accessor for RecordExtractionContext();
  *(void *)(v2 + 96) = swift_task_alloc();
  sub_23309AD60();
  *(void *)(v2 + 104) = swift_task_alloc();
  *(void *)(v2 + 112) = type metadata accessor for FHIRDateTime();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  *(void *)(v2 + 120) = v3;
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = v5;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(v1 + 96);
  uint64_t v6 = *(void *)(v1 + 120);
  *(void *)(v2 + 160) = *(void *)(v1 + 112);
  *(void *)(v2 + 168) = v6;
  *(_OWORD *)(v2 + 176) = *(_OWORD *)(v1 + 128);
  uint64_t v7 = *(void *)(v1 + 152);
  *(void *)(v2 + 192) = *(void *)(v1 + 144);
  *(void *)(v2 + 200) = v7;
  return MEMORY[0x270FA2498](sub_233005A0C, 0, 0);
}

uint64_t sub_233005A0C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_FHIRObservationStatus);
  *(void *)(v0 + 208) = v3;
  uint64_t v4 = sub_23309B710();
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 216) = v5;
  *(void *)(v0 + 24) = 0x6C616E6966;
  *(void *)(v0 + 32) = 0xE500000000000000;
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = v5;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  uint64_t v6 = *(void *)(v0 + 120);
  id v37 = v2;
  if (*(void *)(v6 + 56) == 1)
  {
    if (*(unsigned char *)(v6 + 19))
    {
      if (*(unsigned char *)(v6 + 17)) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = 2;
      }
    }
    else
    {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 112);
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v10 = (uint64_t *)(v6 + *(int *)(v8 + 32));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  swift_bridgeObjectRetain();
  *(void *)(v0 + 224) = sub_233017340(v9, v12, v11, v7);
  sub_233008438(v6, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v13 = *(void *)(v0 + 152);
  if (v13)
  {
    uint64_t v14 = *(void *)(v0 + 144);
    sub_2330084FC(0, &qword_268757058);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_2330A1880;
    *(void *)(v15 + 32) = v14;
    *(void *)(v15 + 40) = v13;
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 232) = v15;
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 72);
  sub_2330084FC(0, (unint64_t *)&qword_268757D40);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2330A4FB0;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2330A4FB0;
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)sub_23309B6E0();
  id v21 = objc_msgSend(v37, sel_codeSystemWithIdentifier_, v20);

  id v22 = objc_allocWithZone(MEMORY[0x263F0A4A0]);
  uint64_t v23 = (void *)sub_23309B6E0();
  uint64_t v24 = (void *)sub_23309B6E0();
  id v25 = objc_msgSend(v22, sel_initWithCodingSystem_codingVersion_code_displayString_, v21, 0, v23, v24);

  *(void *)(v19 + 32) = v25;
  sub_23309B9C0();
  id v26 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
  *(void *)(v0 + 240) = sub_232F3A800(0, (unint64_t *)&qword_268757138);
  uint64_t v27 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithCodings_, v27);

  *(void *)(v18 + 32) = v28;
  sub_23309B9C0();
  *(void *)(v0 + 248) = v18;
  uint64_t v29 = *(int *)(v16 + 20);
  *(_DWORD *)(v0 + 320) = v29;
  uint64_t v30 = v17 + v29;
  uint64_t v31 = *(int *)(type metadata accessor for ExtractionContext() + 44);
  *(_DWORD *)(v0 + 324) = v31;
  *(void *)(v0 + 256) = *(void *)(v30 + v31);
  uint64_t v32 = *(void *)(v30 + 16);
  swift_retain();
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v33;
  void *v33 = v0;
  v33[1] = sub_233005EE8;
  uint64_t v34 = *(void *)(v0 + 176);
  uint64_t v35 = *(void *)(v0 + 184);
  return sub_232FE0168(2, v34, v35, 0, 0, v32);
}

uint64_t sub_233005EE8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_233006008, 0, 0);
}

uint64_t sub_233006008()
{
  uint64_t v1 = *(int *)(v0 + 324);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = v5 + *(int *)(v0 + 320);
  id v7 = objc_msgSend(*(id *)(v0 + 272), sel_codings);
  sub_23309B9A0();

  uint64_t v8 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 280) = objc_msgSend(self, sel_inspectableValueWithMedicalCodings_, v8);

  *(void *)(v0 + 288) = sub_232F3A800(0, &qword_268758320);
  sub_233008394(v5, v3, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v9 = sub_23309B230();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  *(void *)(v0 + 296) = *(void *)(v6 + v1);
  uint64_t v10 = *(void *)(v6 + 16);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_2330061EC;
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v14 = *(void *)(v0 + 160);
  return sub_232FE0168(3, v12, v13, v14, v2, v10);
}

uint64_t sub_2330061EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_23300630C, 0, 0);
}

uint64_t sub_23300630C()
{
  uint64_t v13 = (void *)v0[39];
  uint64_t v16 = (void *)v0[34];
  uint64_t v1 = v0[31];
  uint64_t v2 = (void *)v0[28];
  uint64_t v3 = v0[29];
  uint64_t v15 = (void *)v0[35];
  uint64_t v14 = (void *)v0[26];
  uint64_t v4 = (uint64_t *)v0[12];
  uint64_t v5 = v0[10];
  id v6 = objc_msgSend(self, sel_inspectableValueCollectionSingleWithValue_, v15);
  id v7 = (void *)*MEMORY[0x263F09508];
  id v8 = v2;
  id v9 = v7;
  id v10 = sub_23303673C(v4, v5, 0, 0, v13, (uint64_t)v6, 0, (uint64_t)v2, (uint64_t)v2, (uint64_t)v9, v1, (uint64_t)(v0 + 2), 0, 0, 0, 0, 0, 0, v3,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(id))v0[1];
  return v11(v10);
}

uint64_t sub_2330064C8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = a2;
  *(void *)(v3 + 304) = type metadata accessor for FHIRExtractionContext();
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = type metadata accessor for ModelsR4.Observation(0);
  *(void *)(v3 + 328) = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  *(void *)(v3 + 336) = v4;
  *(void *)(v3 + 344) = v5;
  *(void *)(v3 + 352) = v6;
  long long v7 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(v3 + 128) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(v3 + 144) = v7;
  *(_OWORD *)(v3 + 160) = *((_OWORD *)v2 + 9);
  long long v8 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(v3 + 64) = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v3 + 80) = v8;
  long long v9 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(v3 + 112) = v9;
  long long v10 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v3 + 32) = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v3 + 48) = v10;
  return MEMORY[0x270FA2498](sub_2330065CC, 0, 0);
}

uint64_t sub_2330065CC()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[36];
  v0[2] = v0[43];
  v0[3] = v1;
  uint64_t v3 = v2 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v4 = *(void *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v0[45] = v4;
  uint64_t v5 = *(void *)(v3 + 16);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[46] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_2330066B8;
  uint64_t v7 = v0[41];
  return sub_2330073F8(v7, v4, v5);
}

uint64_t sub_2330066B8()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_233007124;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_2330067D4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2330067D4()
{
  uint64_t v51 = v0;
  uint64_t v1 = (void *)v0[47];
  sub_2330080B4(v0[41], v0[42]);
  sub_23309ABA0();
  swift_allocObject();
  sub_23309AB90();
  sub_233008118();
  uint64_t v2 = sub_23309AB80();
  if (!v1)
  {
    uint64_t v17 = v2;
    unint64_t v18 = v3;
    uint64_t v19 = (void *)v0[37];
    swift_release();
    sub_232E9A9F4(v17, v18);
    uint64_t v20 = (void *)sub_232FE782C(v19);
    uint64_t v45 = v0[44];
    unint64_t v48 = v18;
    uint64_t v49 = v0[43];
    uint64_t v21 = v17;
    id v22 = (uint64_t *)v0[42];
    uint64_t v23 = (int *)v0[38];
    uint64_t v24 = v0[39];
    uint64_t v25 = v0[36];
    unint64_t v46 = sub_233020734(v26);
    swift_bridgeObjectRelease();
    id v27 = v20;
    uint64_t v47 = sub_233086410();
    uint64_t v29 = v28;
    sub_233008394(v25, v24, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    uint64_t v30 = *v22;
    uint64_t v31 = v22[1];
    uint64_t v32 = v21;
    uint64_t v33 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v34 = objc_msgSend(v33, sel_primaryR4Version);
    uint64_t v35 = (void *)(v24 + v23[5]);
    *uint64_t v35 = v30;
    v35[1] = v31;
    id v36 = (void *)(v24 + v23[6]);
    *id v36 = v49;
    v36[1] = v45;
    *(void *)(v24 + v23[7]) = v34;
    uint64_t v37 = v23[8];
    uint64_t v38 = v27;
    uint64_t v39 = (uint64_t *)(v24 + v37);
    *uint64_t v39 = v21;
    v39[1] = v48;
    id v40 = sub_2330054B4(v24, v27, v46, v47, v29);
    uint64_t v41 = v0[42];
    uint64_t v42 = v0[39];

    sub_232E9AA4C(v32, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_233008438(v42, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
    sub_233008438(v41, type metadata accessor for ModelsR4.Observation);
    goto LABEL_11;
  }
  swift_release();
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_23309B4B0();
  __swift_project_value_buffer(v4, (uint64_t)qword_268770F68);
  id v5 = v1;
  id v6 = v1;
  uint64_t v7 = sub_23309B4A0();
  os_log_type_t v8 = sub_23309BB80();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v50 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[34] = v1;
    id v11 = v1;
    id v12 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v13 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v14 = sub_23309B770();
    unint64_t v16 = v15;

    v0[30] = sub_232F62B64(v14, v16, &v50);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Observation. Error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v10, -1, -1);
    MEMORY[0x237DB6EC0](v9, -1, -1);

    if (!v0[47]) {
      goto LABEL_9;
    }
  }
  else
  {

    if (!v0[47]) {
LABEL_9:
    }
      sub_233008438(v0[42], type metadata accessor for ModelsR4.Observation);
  }
  id v40 = 0;
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(id))v0[1];
  return v43(v40);
}

uint64_t sub_233007124()
{
  unint64_t v18 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[47];
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_23309B4B0();
  __swift_project_value_buffer(v2, (uint64_t)qword_268770F68);
  id v3 = v1;
  id v4 = v1;
  id v5 = sub_23309B4A0();
  os_log_type_t v6 = sub_23309BB80();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[34] = v1;
    id v9 = v1;
    id v10 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_23309B770();
    unint64_t v14 = v13;

    v0[30] = sub_232F62B64(v12, v14, &v17);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Observation. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v8, -1, -1);
    MEMORY[0x237DB6EC0](v7, -1, -1);

    if (v0[47]) {
      goto LABEL_8;
    }
  }
  else
  {

    if (v0[47]) {
      goto LABEL_8;
    }
  }
  sub_233008438(v0[42], type metadata accessor for ModelsR4.Observation);
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_2330073F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 80) = a2;
  *(void *)(v4 + 88) = a3;
  *(void *)(v4 + 72) = a1;
  id v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233008498(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  *(void *)(v4 + 96) = swift_task_alloc();
  sub_233008498(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v5);
  *(void *)(v4 + 104) = swift_task_alloc();
  sub_233008498(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  sub_233008498(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v5);
  *(void *)(v4 + 136) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FHIRDateTime();
  *(void *)(v4 + 144) = v6;
  *(void *)(v4 + 152) = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = *(void *)(v3 + 80);
  uint64_t v9 = *(void *)(v3 + 88);
  *(void *)(v4 + 160) = v7;
  *(void *)(v4 + 168) = v8;
  *(void *)(v4 + 176) = v9;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(v3 + 96);
  uint64_t v10 = *(void *)(v3 + 120);
  *(void *)(v4 + 200) = *(void *)(v3 + 112);
  *(void *)(v4 + 208) = v10;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(v3 + 128);
  uint64_t v11 = *(void *)(v3 + 152);
  *(void *)(v4 + 232) = *(void *)(v3 + 144);
  *(void *)(v4 + 240) = v11;
  return MEMORY[0x270FA2498](sub_23300764C, 0, 0);
}

uint64_t sub_23300764C()
{
  uint64_t v1 = v0[20];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  uint64_t v2 = v0[24];
  if (v2)
  {
    uint64_t v3 = v0[23];
    sub_233008498(0, &qword_268758310, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8E0F8]);
    uint64_t v4 = (int *)(type metadata accessor for Reference() - 8);
    unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2330A1880;
    uint64_t v7 = (void *)(v6 + v5);
    uint64_t v8 = (char *)v7 + v4[8];
    uint64_t v9 = type metadata accessor for Identifier();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    *uint64_t v7 = v3;
    v7[1] = v2;
    v7[2] = 0;
    v7[3] = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  v0[31] = v6;
  uint64_t v10 = v0[17];
  sub_233008498(0, &qword_2687570A0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8E0F8]);
  uint64_t v11 = (int *)(type metadata accessor for Coding() - 8);
  unint64_t v12 = (*(unsigned __int8 *)(*(void *)v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v11 + 80);
  uint64_t v13 = swift_allocObject();
  v0[32] = v13;
  *(_OWORD *)(v13 + 16) = xmmword_2330A1880;
  uint64_t v14 = v13 + v12;
  swift_bridgeObjectRetain();
  sub_23309AF50();
  sub_233008314(v10, v14, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  *(_OWORD *)(v14 + v11[7]) = xmmword_2330A6D70;
  *(_OWORD *)(v14 + v11[8]) = xmmword_2330A6D80;
  unint64_t v15 = (void *)(v14 + v11[9]);
  *unint64_t v15 = 0;
  v15[1] = 0;
  unint64_t v16 = (void *)swift_task_alloc();
  v0[33] = v16;
  void *v16 = v0;
  v16[1] = sub_233007A14;
  uint64_t v17 = v0[27];
  uint64_t v18 = v0[28];
  uint64_t v19 = v0[11];
  return sub_232FE1994((uint64_t)(v0 + 2), 2, v17, v18, 0, 0, v19);
}

uint64_t sub_233007A14()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233007B10, 0, 0);
}

uint64_t sub_233007B10()
{
  uint64_t v1 = *(void *)(v0 + 208);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 16);
  *(void *)(v0 + 288) = *(void *)(v0 + 32);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_233007BD8;
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 88);
  return sub_232FE1994(v0 + 40, 3, v3, v4, v5, v1, v6);
}

uint64_t sub_233007BD8()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233007CD4, 0, 0);
}

uint64_t sub_233007CD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 288);
  long long v27 = *(_OWORD *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v1 + 248);
  uint64_t v4 = *(void *)(v1 + 152);
  uint64_t v5 = *(void *)(v1 + 160);
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v28 = v2;
  uint64_t v8 = *(void *)(v1 + 120);
  uint64_t v7 = *(void *)(v1 + 128);
  uint64_t v9 = *(void *)(v1 + 104);
  uint64_t v29 = *(void *)(v1 + 112);
  uint64_t v30 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 72);
  long long v25 = *(_OWORD *)(v1 + 40);
  uint64_t v24 = *(void *)(v1 + 56);
  sub_2330084FC(0, &qword_268758308);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2330A1880;
  *(_OWORD *)(v11 + 32) = xmmword_2330A6D80;
  *(void *)(v11 + 48) = v3;
  sub_233008394(v5, v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v12(v7, 0, 1, v6);
  v12(v8, 1, 1, v6);
  uint64_t v13 = type metadata accessor for Period();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  v12(v29, 1, 1, v6);
  uint64_t v14 = type metadata accessor for Quantity();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v30, 1, 1, v14);
  unint64_t v15 = (int *)type metadata accessor for ModelsR4.Observation(0);
  *(void *)(v1 + 64) = v15;
  sub_2330083FC();
  uint64_t v16 = sub_23309B770();
  uint64_t v18 = v17;
  sub_233008438(v5, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  *(void *)uint64_t v10 = v16;
  *(void *)(v10 + 8) = v18;
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(_OWORD *)(v10 + 32) = xmmword_2330A6D90;
  *(void *)(v10 + 48) = 0xE500000000000000;
  *(void *)(v10 + 56) = v11;
  *(_OWORD *)(v10 + 64) = v25;
  *(void *)(v10 + 80) = v24;
  sub_233008314(v7, v10 + v15[10], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_233008314(v8, v10 + v15[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_233008314(v9, v10 + v15[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_233008314(v29, v10 + v15[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  *(void *)(v10 + v15[14]) = 0;
  *(void *)(v10 + v15[15]) = v26;
  uint64_t v19 = (void *)(v10 + v15[16]);
  void *v19 = 0;
  v19[1] = 0;
  uint64_t v20 = v10 + v15[17];
  *(_OWORD *)uint64_t v20 = v27;
  *(void *)(v20 + 16) = v28;
  sub_233008314(v30, v10 + v15[18], &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  *(void *)(v10 + v15[19]) = 0;
  uint64_t v21 = (void *)(v10 + v15[20]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = *(uint64_t (**)(void))(v1 + 8);
  return v22();
}

uint64_t sub_2330080B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.Observation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_233008118()
{
  unint64_t result = qword_268756CB8;
  if (!qword_268756CB8)
  {
    type metadata accessor for ModelsR4.Observation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756CB8);
  }
  return result;
}

id sub_233008170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v13 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  unint64_t v15 = (void *)sub_23309B010();
  uint64_t v16 = sub_23309AF80();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a8, 1, v16) != 1)
  {
    uint64_t v18 = (void *)sub_23309AF10();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a8, v16);
  }
  uint64_t v19 = (void *)sub_23309B130();
  id v20 = objc_msgSend(v10, sel_initWithResourceType_identifier_FHIRVersion_data_sourceURL_lastUpdatedDate_, v13, v14, a5, v15, v18, v19);

  uint64_t v21 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a9, v21);
  return v20;
}

uint64_t sub_233008314(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_233008498(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_233008394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_2330083FC()
{
  unint64_t result = qword_268756898;
  if (!qword_268756898)
  {
    type metadata accessor for ModelsR4.Observation(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268756898);
  }
  return result;
}

uint64_t sub_233008438(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_233008498(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_2330084FC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_23309C1F0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t ContactPoint.system.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ContactPoint.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ContactPoint.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!*(void *)(v0 + 8))
  {
    sub_23309C3F0();
    if (v1) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233008680()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 0x6D6574737973;
  }
}

uint64_t sub_2330086B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2330093F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2330086DC(uint64_t a1)
{
  unint64_t v2 = sub_233008E50();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233008718(uint64_t a1)
{
  unint64_t v2 = sub_233008E50();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ContactPoint.encode(to:)(void *a1)
{
  sub_233008EA4(0, &qword_268758328, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = *(void *)(v1 + 16);
  v11[1] = *(void *)(v1 + 24);
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233008E50();
  sub_23309C480();
  char v13 = 0;
  uint64_t v9 = v11[3];
  sub_23309C110();
  if (!v9)
  {
    char v12 = 1;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ContactPoint.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  sub_23309C3D0();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t ContactPoint.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_233008EA4(0, &qword_268758338, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233008E50();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v21 = 0;
  uint64_t v10 = sub_23309C040();
  uint64_t v12 = v11;
  char v20 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_23309C040();
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v19 = v13;
  v16(v9, v6);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v19;
  a2[3] = v15;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233008BC4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ContactPoint.init(from:)(a1, a2);
}

uint64_t sub_233008BDC(void *a1)
{
  return ContactPoint.encode(to:)(a1);
}

uint64_t sub_233008BF8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (!*(void *)(v0 + 8))
  {
    sub_23309C3F0();
    if (v1) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233008CD0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  sub_23309C3D0();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t _s23HealthRecordsExtraction12ContactPointV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  if (!v3)
  {
    if (v6) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v6) {
    return 0;
  }
  BOOL v9 = *a1 == *a2 && v3 == v6;
  if (v9 || (v10 = sub_23309C220(), uint64_t result = 0, (v10 & 1) != 0))
  {
LABEL_10:
    if (v5)
    {
      if (v8 && (v4 == v7 && v5 == v8 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_233008E50()
{
  unint64_t result = qword_268758330;
  if (!qword_268758330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758330);
  }
  return result;
}

void sub_233008EA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233008E50();
    unint64_t v7 = a3(a1, &type metadata for ContactPoint.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_233008F08(void *a1)
{
  a1[1] = sub_232EA45E8();
  a1[2] = sub_232EBDE18();
  unint64_t result = sub_233008F40();
  a1[3] = result;
  return result;
}

unint64_t sub_233008F40()
{
  unint64_t result = qword_268758340;
  if (!qword_268758340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758340);
  }
  return result;
}

unint64_t sub_233008F98()
{
  unint64_t result = qword_268758348;
  if (!qword_268758348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758348);
  }
  return result;
}

uint64_t destroy for ContactPoint()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ContactPoint(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ContactPoint(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ContactPoint(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactPoint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactPoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactPoint()
{
  return &type metadata for ContactPoint;
}

unsigned char *storeEnumTagSinglePayload for ContactPoint.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2330092B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactPoint.CodingKeys()
{
  return &type metadata for ContactPoint.CodingKeys;
}

unint64_t sub_2330092F4()
{
  unint64_t result = qword_268758350;
  if (!qword_268758350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758350);
  }
  return result;
}

unint64_t sub_23300934C()
{
  unint64_t result = qword_268758358;
  if (!qword_268758358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758358);
  }
  return result;
}

unint64_t sub_2330093A4()
{
  unint64_t result = qword_268758360;
  if (!qword_268758360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758360);
  }
  return result;
}

uint64_t sub_2330093F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D6574737973 && a2 == 0xE600000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void TimeZone.init(_:)(uint64_t a1@<X8>)
{
  sub_23300ABAC(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - v4;
  id v6 = objc_allocWithZone(MEMORY[0x263F08B08]);
  unint64_t v7 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithString_, v7);

  sub_233009918(v8);
  if (v1)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_23309B2C0();
    uint64_t v9 = sub_23309B300();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
    {
      __break(1u);
    }
    else
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
    }
  }
}

uint64_t static TimeZone.hs_parseComponents(from:expectAtEnd:)(void *a1)
{
  uint64_t result = sub_233009918(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t TimeZone.fhirDescription.getter()
{
  uint64_t v0 = sub_23309B190();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309B180();
  uint64_t v4 = sub_23309B2B0();
  uint64_t v5 = *(void (**)(char *, uint64_t))(v1 + 8);
  v5(v3, v0);
  if (!v4) {
    return 90;
  }
  sub_23309B180();
  uint64_t v6 = sub_23309B2B0();
  v5(v3, v0);
  sub_23309B180();
  uint64_t v7 = sub_23309B2B0();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v5)(v3, v0);
  if ((v7 & 0x8000000000000000) == 0 || (v9 = __OFSUB__(0, v7), uint64_t v7 = -v7, !v9))
  {
    if (!__OFSUB__(v7, 3600 * (v7 / 3600)))
    {
      uint64_t v10 = 45;
      if (v6 > 0) {
        uint64_t v10 = 43;
      }
      v15[0] = v10;
      v15[1] = 0xE100000000000000;
      sub_23309B880();
      sub_23300ABAC(0, &qword_2687572E8, (uint64_t (*)(uint64_t))sub_232F4970C, MEMORY[0x263F8E0F8]);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_2330A1EB0;
      uint64_t v12 = MEMORY[0x263F8D6C8];
      uint64_t v13 = MEMORY[0x263F8D750];
      *(void *)(v11 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v11 + 64) = v13;
      *(void *)(v11 + 32) = v7 / 3600;
      *(void *)(v11 + 96) = v12;
      *(void *)(v11 + 104) = v13;
      *(void *)(v11 + 72) = v7 % 3600 / 60;
      uint64_t v14 = sub_23309B740();
      swift_bridgeObjectRelease();
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_233009918(void *a1)
{
  uint64_t v2 = sub_23309AC20();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v192 = (char *)&v177 - v7;
  sub_23300ABAC(0, &qword_268757310, MEMORY[0x263F06278], MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v188 = (uint64_t)&v177 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v186 = (char *)&v177 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v185 = (uint64_t)&v177 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v184 = (uint64_t)&v177 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v183 = (char *)&v177 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  v182 = (char *)&v177 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v181 = (uint64_t)&v177 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v180 = (char *)&v177 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v179 = (char *)&v177 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)&v177 - v31;
  MEMORY[0x270FA5388](v30);
  id v34 = (char *)&v177 - v33;
  id v35 = objc_msgSend(a1, sel_charactersToBeSkipped);
  uint64_t v189 = v3;
  if (v35)
  {
    id v36 = v35;
    sub_23309ABF0();

    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v38 = v32;
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v38 = v32;
    uint64_t v39 = 1;
  }
  uint64_t v40 = v2;
  v37(v38, v39, 1, v2);
  sub_232F499EC((uint64_t)v32, (uint64_t)v34);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  uint64_t v41 = (uint64_t)v192;
  sub_23309ABB0();
  uint64_t v42 = sub_23309BCC0();
  uint64_t v43 = sub_23309BCD0();
  v190 = v34;
  if (!v44)
  {
    id v53 = objc_msgSend(a1, sel_string);
    uint64_t v54 = sub_23309B710();
    uint64_t v56 = v55;

    sub_232F49A80();
    uint64_t v57 = swift_allocError();
    *(void *)uint64_t v58 = v54;
    *(void *)(v58 + 8) = v56;
    *(void *)(v58 + 16) = v42;
    *(unsigned char *)(v58 + 24) = 7;
    uint64_t v191 = v57;
    swift_willThrow();
    uint64_t v59 = v189;
    unint64_t v60 = *(void (**)(uint64_t, uint64_t))(v189 + 8);
    uint64_t v61 = v40;
    v60(v41, v40);
    sub_232F49AD4((uint64_t)v34, (uint64_t)v11);
    id v62 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v11, 1, v40) == 1)
    {
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v63 = (void *)sub_23309ABD0();
      v60((uint64_t)v11, v61);
    }
    uint64_t v64 = &selRef_setMedicalRecordMetadata_;
    goto LABEL_17;
  }
  uint64_t v45 = v43;
  uint64_t v46 = v44;
  id v187 = a1;
  if (v43 == 90 && v44 == 0xE100000000000000 || (sub_23309C220() & 1) != 0)
  {
    uint64_t v47 = v189;
    unint64_t v48 = *(void (**)(char *, uint64_t))(v189 + 8);
    uint64_t v49 = (char *)v40;
    v48(v192, v40);
    uint64_t v41 = 0;
    uint64_t v50 = (uint64_t)v190;
LABEL_9:
    uint64_t v51 = v188;
    sub_232F49AD4(v50, v188);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v47 + 48))(v51, 1, v49) == 1)
    {
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v52 = (void *)sub_23309ABD0();
      v48((char *)v51, (uint64_t)v49);
    }
    objc_msgSend(v187, sel_setCharactersToBeSkipped_, v52);

    sub_232F49B68(v50);
    return v41;
  }
  uint64_t v177 = v45;
  uint64_t v41 = (uint64_t)v6;
  sub_23309ABC0();
  id v62 = v187;
  uint64_t v66 = sub_23309BCC0();
  uint64_t v67 = sub_23309BCD0();
  uint64_t v69 = (char *)v40;
  if (!v68)
  {
    swift_bridgeObjectRelease();
    id v81 = objc_msgSend(v62, sel_string);
    uint64_t v82 = sub_23309B710();
    uint64_t v84 = v83;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v85 = v82;
    *(void *)(v85 + 8) = v84;
    *(void *)(v85 + 16) = v66;
    *(unsigned char *)(v85 + 24) = 8;
    swift_willThrow();
    uint64_t v86 = v189;
    uint64_t v87 = *(void (**)(char *, char *))(v189 + 8);
    v87(v6, v69);
    v87(v192, v69);
    uint64_t v88 = (uint64_t)v186;
    sub_232F49AD4((uint64_t)v190, (uint64_t)v186);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v86 + 48))(v88, 1, v69) != 1)
    {
      uint64_t v63 = (void *)sub_23309ABD0();
      v87((char *)v88, v69);
      uint64_t v64 = &selRef_setMedicalRecordMetadata_;
LABEL_17:
      objc_msgSend(v62, v64[120], v63);

      sub_232F49B68((uint64_t)v190);
      return v41;
    }
LABEL_70:
    uint64_t v63 = 0;
    uint64_t v64 = &selRef_setMedicalRecordMetadata_;
    goto LABEL_17;
  }
  uint64_t v70 = v67;
  unint64_t v71 = v68;
  uint64_t v178 = v66;
  v186 = (char *)v41;
  uint64_t result = sub_23309B810();
  if (result != 2)
  {
    swift_bridgeObjectRelease();
    id v62 = v187;
    id v89 = objc_msgSend(v187, sel_string);
    uint64_t v90 = sub_23309B710();
    uint64_t v92 = v91;

    id v93 = objc_msgSend(v62, sel_string);
    sub_23309B710();

    sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v94 = sub_23309B850();
    uint64_t v95 = v40;
    swift_bridgeObjectRelease();
    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v96 = v90;
    *(void *)(v96 + 8) = v92;
    *(void *)(v96 + 16) = v94;
    *(unsigned char *)(v96 + 24) = 0;
    swift_willThrow();
    uint64_t v97 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(char *, uint64_t))v41)(v186, v95);
    ((void (*)(char *, uint64_t))v41)(v192, v95);
    uint64_t v98 = v185;
    sub_232F49AD4((uint64_t)v190, v185);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v98, 1, v95) != 1)
    {
      uint64_t v63 = (void *)sub_23309ABD0();
      uint64_t v99 = v98;
      uint64_t v100 = (char *)v95;
LABEL_81:
      ((void (*)(uint64_t, char *))v41)(v99, v100);
      uint64_t v64 = &selRef_setMedicalRecordMetadata_;
      goto LABEL_17;
    }
    goto LABEL_70;
  }
  uint64_t v72 = HIBYTE(v71) & 0xF;
  uint64_t v73 = v70 & 0xFFFFFFFFFFFFLL;
  if ((v71 & 0x2000000000000000) != 0) {
    uint64_t v74 = HIBYTE(v71) & 0xF;
  }
  else {
    uint64_t v74 = v70 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v75 = v189;
  uint64_t v76 = v191;
  if (!v74)
  {
LABEL_65:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v62 = v187;
    id v126 = objc_msgSend(v187, sel_string);
    uint64_t v127 = sub_23309B710();
    uint64_t v129 = v128;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v130 = v127;
    *(void *)(v130 + 8) = v129;
    *(void *)(v130 + 16) = v178;
    *(unsigned char *)(v130 + 24) = 8;
    swift_willThrow();
    uint64_t v41 = *(void *)(v75 + 8);
    ((void (*)(char *, char *))v41)(v186, v69);
    ((void (*)(char *, char *))v41)(v192, v69);
    uint64_t v131 = v184;
    sub_232F49AD4((uint64_t)v190, v184);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v75 + 48))(v131, 1, v69) != 1)
    {
      uint64_t v63 = (void *)sub_23309ABD0();
      uint64_t v99 = v131;
LABEL_80:
      uint64_t v100 = v69;
      goto LABEL_81;
    }
    goto LABEL_70;
  }
  if ((v71 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = (uint64_t)sub_232F3DAF8(v70, v71, 10);
    char v80 = v176;
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  if ((v71 & 0x2000000000000000) != 0)
  {
    uint64_t v193 = v70;
    uint64_t v194 = v71 & 0xFFFFFFFFFFFFFFLL;
    if (v70 == 43)
    {
      if (v72)
      {
        if (v72 != 1 && (BYTE1(v70) - 48) <= 9u)
        {
          uint64_t v78 = (BYTE1(v70) - 48);
          if (v72 == 2) {
            goto LABEL_57;
          }
          if ((BYTE2(v70) - 48) <= 9u)
          {
            uint64_t v78 = 10 * (BYTE1(v70) - 48) + (BYTE2(v70) - 48);
            uint64_t v101 = v72 - 3;
            if (v101)
            {
              uint64_t v102 = (unsigned __int8 *)&v193 + 3;
              while (1)
              {
                unsigned int v103 = *v102 - 48;
                if (v103 > 9) {
                  goto LABEL_55;
                }
                uint64_t v104 = 10 * v78;
                if ((unsigned __int128)(v78 * (__int128)10) >> 64 != (10 * v78) >> 63) {
                  goto LABEL_55;
                }
                uint64_t v78 = v104 + v103;
                if (__OFADD__(v104, v103)) {
                  goto LABEL_55;
                }
                char v80 = 0;
                ++v102;
                if (!--v101) {
                  goto LABEL_58;
                }
              }
            }
            goto LABEL_57;
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v70 != 45)
      {
        if (v72 && (v70 - 48) <= 9u)
        {
          uint64_t v78 = (v70 - 48);
          if (v72 == 1) {
            goto LABEL_57;
          }
          if ((BYTE1(v70) - 48) <= 9u)
          {
            uint64_t v78 = 10 * (v70 - 48) + (BYTE1(v70) - 48);
            uint64_t v163 = v72 - 2;
            if (v163)
            {
              v164 = (unsigned __int8 *)&v193 + 2;
              while (1)
              {
                unsigned int v165 = *v164 - 48;
                if (v165 > 9) {
                  goto LABEL_55;
                }
                uint64_t v166 = 10 * v78;
                if ((unsigned __int128)(v78 * (__int128)10) >> 64 != (10 * v78) >> 63) {
                  goto LABEL_55;
                }
                uint64_t v78 = v166 + v165;
                if (__OFADD__(v166, v165)) {
                  goto LABEL_55;
                }
                char v80 = 0;
                ++v164;
                if (!--v163) {
                  goto LABEL_58;
                }
              }
            }
            goto LABEL_57;
          }
        }
LABEL_55:
        uint64_t v78 = 0;
        char v80 = 1;
        goto LABEL_58;
      }
      if (v72)
      {
        if (v72 != 1 && (BYTE1(v70) - 48) <= 9u)
        {
          if (v72 == 2)
          {
            char v80 = 0;
            uint64_t v78 = -(uint64_t)(BYTE1(v70) - 48);
            goto LABEL_58;
          }
          if ((BYTE2(v70) - 48) <= 9u)
          {
            uint64_t v78 = -10 * (BYTE1(v70) - 48) - (BYTE2(v70) - 48);
            uint64_t v167 = v72 - 3;
            if (v167)
            {
              uint64_t v168 = (unsigned __int8 *)&v193 + 3;
              while (1)
              {
                unsigned int v169 = *v168 - 48;
                if (v169 > 9) {
                  goto LABEL_55;
                }
                uint64_t v170 = 10 * v78;
                if ((unsigned __int128)(v78 * (__int128)10) >> 64 != (10 * v78) >> 63) {
                  goto LABEL_55;
                }
                uint64_t v78 = v170 - v169;
                if (__OFSUB__(v170, v169)) {
                  goto LABEL_55;
                }
                char v80 = 0;
                ++v168;
                if (!--v167) {
                  goto LABEL_58;
                }
              }
            }
LABEL_57:
            char v80 = 0;
            goto LABEL_58;
          }
        }
        goto LABEL_55;
      }
      __break(1u);
    }
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  if ((v70 & 0x1000000000000000) != 0) {
    uint64_t v77 = (unsigned __int8 *)((v71 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v77 = (unsigned __int8 *)sub_23309BEE0();
  }
  uint64_t v78 = (uint64_t)sub_232F3DA34(v77, v73, 10);
  char v80 = v79 & 1;
LABEL_58:
  if ((v80 & 1) != 0 || v78 > 14) {
    goto LABEL_65;
  }
  uint64_t v185 = v70;
  id v105 = v187;
  uint64_t v106 = sub_23309BCC0();
  sub_23309BCB0();
  uint64_t v108 = v107;
  swift_bridgeObjectRelease();
  uint64_t v50 = (uint64_t)v190;
  if (!v108)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v132 = objc_msgSend(v105, sel_string);
    uint64_t v133 = sub_23309B710();
    uint64_t v135 = v134;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v136 = v133;
    *(void *)(v136 + 8) = v135;
    *(void *)(v136 + 16) = v106;
    *(unsigned char *)(v136 + 24) = 0;
    swift_willThrow();
    uint64_t v137 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(char *, char *))v41)(v186, v69);
    ((void (*)(char *, char *))v41)(v192, v69);
    uint64_t v138 = v50;
    uint64_t v139 = (uint64_t)v183;
    goto LABEL_69;
  }
  uint64_t v184 = v78;
  uint64_t v191 = v76;
  uint64_t v109 = sub_23309BCC0();
  uint64_t v110 = (uint64_t)v186;
  uint64_t v111 = sub_23309BCD0();
  if (!v112)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v140 = objc_msgSend(v105, sel_string);
    uint64_t v141 = sub_23309B710();
    uint64_t v143 = v142;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v144 = v141;
    *(void *)(v144 + 8) = v143;
    *(void *)(v144 + 16) = v109;
    *(unsigned char *)(v144 + 24) = 9;
    swift_willThrow();
    uint64_t v137 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(uint64_t, char *))v41)(v110, v69);
    ((void (*)(char *, char *))v41)(v192, v69);
    uint64_t v138 = v50;
    uint64_t v139 = (uint64_t)v182;
LABEL_69:
    sub_232F49AD4(v138, v139);
    id v62 = v105;
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v137 + 48))(v139, 1, v69) != 1)
    {
LABEL_79:
      uint64_t v63 = (void *)sub_23309ABD0();
      uint64_t v99 = v139;
      goto LABEL_80;
    }
    goto LABEL_70;
  }
  uint64_t v113 = v111;
  unint64_t v114 = v112;
  if (sub_23309B810() > 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v115 = v187;
    uint64_t v116 = v69;
    id v117 = objc_msgSend(v187, sel_string);
    uint64_t v118 = sub_23309B710();
    uint64_t v120 = v119;

    id v121 = objc_msgSend(v115, sel_string);
    sub_23309B710();

    sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v122 = sub_23309B850();
    swift_bridgeObjectRelease();
    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v123 = v118;
    *(void *)(v123 + 8) = v120;
    *(void *)(v123 + 16) = v122;
    *(unsigned char *)(v123 + 24) = 10;
    swift_willThrow();
    uint64_t v124 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(char *, char *))v41)(v186, v116);
    ((void (*)(char *, char *))v41)(v192, v116);
    uint64_t v125 = v181;
    sub_232F49AD4((uint64_t)v190, v181);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v124 + 48))(v125, 1, v116) == 1)
    {
      uint64_t v63 = 0;
    }
    else
    {
      uint64_t v63 = (void *)sub_23309ABD0();
      ((void (*)(uint64_t, char *))v41)(v125, v116);
    }
    id v62 = v187;
    uint64_t v64 = &selRef_setMedicalRecordMetadata_;
    goto LABEL_17;
  }
  uint64_t v145 = sub_23309B810();
  v146 = v192;
  if (v145 != 2
    || (swift_bridgeObjectRetain(), uint64_t result = sub_232F3B994(v113, v114), (v147 & 1) != 0)
    || (uint64_t v148 = result, result > 59))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v157 = v50;
    id v62 = v187;
    id v158 = objc_msgSend(v187, sel_string);
    uint64_t v159 = sub_23309B710();
    uint64_t v161 = v160;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v162 = v159;
    *(void *)(v162 + 8) = v161;
    *(void *)(v162 + 16) = v109;
    *(unsigned char *)(v162 + 24) = 9;
    swift_willThrow();
    uint64_t v155 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(char *, char *))v41)(v186, v69);
    ((void (*)(char *, char *))v41)(v146, v69);
    uint64_t v156 = v157;
    uint64_t v139 = (uint64_t)v180;
LABEL_78:
    sub_232F49AD4(v156, v139);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v155 + 48))(v139, 1, v69) != 1) {
      goto LABEL_79;
    }
    goto LABEL_70;
  }
  if (v184 >= 14 && result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v149 = v50;
    id v62 = v187;
    id v150 = objc_msgSend(v187, sel_string);
    uint64_t v151 = sub_23309B710();
    uint64_t v153 = v152;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v154 = v151;
    *(void *)(v154 + 8) = v153;
    *(void *)(v154 + 16) = v109;
    *(unsigned char *)(v154 + 24) = 9;
    swift_willThrow();
    uint64_t v155 = v189;
    uint64_t v41 = *(void *)(v189 + 8);
    ((void (*)(char *, char *))v41)(v186, v69);
    ((void (*)(char *, char *))v41)(v146, v69);
    uint64_t v156 = v149;
    uint64_t v139 = (uint64_t)v179;
    goto LABEL_78;
  }
  v183 = v69;
  uint64_t v171 = -1;
  if (v177 != 45 || v46 != 0xE100000000000000)
  {
    uint64_t result = sub_23309C220();
    if ((result & 1) == 0) {
      uint64_t v171 = 1;
    }
  }
  uint64_t v172 = 3600 * v184;
  if ((unsigned __int128)(v184 * (__int128)3600) >> 64 != (3600 * v184) >> 63) {
    goto LABEL_113;
  }
  uint64_t v173 = 60 * v148;
  if ((unsigned __int128)(v148 * (__int128)60) >> 64 != (60 * v148) >> 63)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  BOOL v174 = __OFADD__(v172, v173);
  uint64_t v175 = v172 + v173;
  if (v174)
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  uint64_t v41 = v171 * v175;
  if ((unsigned __int128)(v171 * (__int128)v175) >> 64 == (v171 * v175) >> 63)
  {
    uint64_t v193 = v177;
    uint64_t v194 = v46;
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    sub_23309B880();
    swift_bridgeObjectRelease();
    uint64_t v47 = v189;
    unint64_t v48 = *(void (**)(char *, uint64_t))(v189 + 8);
    uint64_t v49 = v183;
    v48(v186, (uint64_t)v183);
    v48(v146, (uint64_t)v49);
    goto LABEL_9;
  }
LABEL_116:
  __break(1u);
  return result;
}

void sub_23300ABAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t HealthRecordAttachmentsIndexerHandler.index(request:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x270FA2498](sub_23300AC30, 0, 0);
}

uint64_t sub_23300AC30()
{
  if (qword_268756440 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_23300ACFC;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_233086900(v2);
}

uint64_t sub_23300ACFC(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_23300AF74(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  return MEMORY[0x270FA2498](sub_23300B000, 0, 0);
}

uint64_t sub_23300B000()
{
  if (qword_268756440 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_23300B0CC;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_233086900(v2);
}

uint64_t sub_23300B0CC(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](sub_23300B244, 0, 0);
  }
  else
  {
    id v6 = *(void **)(v4 + 24);
    uint64_t v5 = *(void (***)(void, void, void))(v4 + 32);

    ((void (**)(void, void *, void))v5)[2](v5, a1, 0);
    _Block_release(v5);

    id v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7();
  }
}

uint64_t sub_23300B244()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);

  uint64_t v4 = (void *)sub_23309AEB0();
  ((void (**)(void, void, void *))v2)[2](v2, 0, v4);

  _Block_release(v2);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t HealthRecordAttachmentsIndexerHandler.fetchSpotlightSearchResults(queryString:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23300BBD4();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_23309BA90();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  void v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23300B72C((uint64_t)v10, (uint64_t)&unk_268758380, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_23300B40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x270FA2498](sub_23300B430, 0, 0);
}

uint64_t sub_23300B430()
{
  if (qword_268756440 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_23300B4FC;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return sub_2330875FC(v3, v2);
}

uint64_t sub_23300B4FC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_23300B69C;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_23300B624;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_23300B624()
{
  (*(void (**)(void, void))(v0 + 32))(*(void *)(v0 + 64), 0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_23300B69C()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(void, void *))v0[4];
  id v3 = v1;
  v2(0, v1);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_23300B72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23309BA90();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23309BA80();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_23300C26C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23309BA20();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_23300BA54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    sub_23300BF5C();
    uint64_t v5 = (void *)sub_23309B990();
  }
  if (a2) {
    uint64_t v6 = sub_23309AEB0();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);
}

id HealthRecordAttachmentsIndexerHandler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id HealthRecordAttachmentsIndexerHandler.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HealthRecordAttachmentsIndexerHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_23300BBD4()
{
  if (!qword_268758370)
  {
    sub_23309BA90();
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, &qword_268758370);
    }
  }
}

uint64_t sub_23300BC30()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_23300C494;
  *(void *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = v2;
  return MEMORY[0x270FA2498](sub_23300B430, 0, 0);
}

uint64_t type metadata accessor for HealthRecordAttachmentsIndexerHandler()
{
  return self;
}

uint64_t sub_23300BD18()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_23300BD50(void *a1, uint64_t a2)
{
  sub_23300BA54(a1, a2, *(void *)(v2 + 16));
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_23300BDA4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_23300BE68;
  *(void *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = v2;
  return MEMORY[0x270FA2498](sub_23300B430, 0, 0);
}

uint64_t sub_23300BE68()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_23300BF5C()
{
  unint64_t result = qword_268758390;
  if (!qword_268758390)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268758390);
  }
  return result;
}

uint64_t sub_23300BF9C()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23300BFE4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[1] = sub_23300C494;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_268758398 + dword_268758398);
  return v6(v2, v3, v4);
}

uint64_t sub_23300C09C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  long long v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *long long v5 = v1;
  v5[1] = sub_23300C494;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_268758B68 + dword_268758B68);
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_18Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_23300C1A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_23300C494;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_268758B70 + dword_268758B70);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_23300C26C(uint64_t a1)
{
  sub_23300BBD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23300C2C8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_232F573EC;
  return v6(a1);
}

uint64_t sub_23300C3A4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23300C3DC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_23300BE68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_2687583B8 + dword_2687583B8);
  return v6(a1, v4);
}

uint64_t sub_23300C498(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_23300C4B8, 0, 0);
}

id sub_23300C4B8()
{
  uint64_t v1 = v0[3];
  long long v9 = *(_OWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v2 = sub_233001A34();
  v0[4] = v2;
  sub_232F3A800(0, &qword_268757D38);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x263F09518], v9, v10);
  v0[5] = result;
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v0[2];
    uint64_t v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(unsigned char *)(v6 + 16) & 4) != 0)
    {

      uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
      return (id)v8(v2);
    }
    else
    {
      v0[6] = *(void *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[7] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_232F5E978;
      return (id)sub_232FDDCD0(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23300C64C(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  sub_23300E910(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  v2[15] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[16] = swift_task_alloc();
  v2[17] = *(void *)(type metadata accessor for Annotation() - 8);
  v2[18] = swift_task_alloc();
  v2[19] = *(void *)(type metadata accessor for ReferenceRange() - 8);
  v2[20] = swift_task_alloc();
  sub_23300E910(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  v2[21] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Quantity();
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  sub_23309AD60();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  sub_23300E910(0, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = type metadata accessor for ModelsR4.Observation(0);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  sub_23300E910(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23300CA04, 0, 0);
}

uint64_t sub_23300CA04()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[14];
  uint64_t v4 = v3 + *(int *)(v0[30] + 40);
  sub_23300E9CC(v4, v1, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_23300E964(v3, v2, type metadata accessor for ModelsR4.Observation);
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  v0[42] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v0[43] = v7;
  v0[44] = (v6 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v1, 1, v5) == 1)
  {
    uint64_t v8 = v0[29];
    sub_23300E9CC(v0[34] + *(int *)(v0[30] + 48), v8, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    uint64_t v9 = type metadata accessor for Period();
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    uint64_t v11 = v0[39];
    uint64_t v12 = v0[29];
    if (v10 == 1)
    {
      sub_23300EA98(v0[29], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
    }
    else
    {
      sub_23300E9CC(v0[29], v0[39], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_23300EA38(v12, (uint64_t (*)(void))type metadata accessor for Period);
    }
    uint64_t v15 = v0[39];
    sub_23300EAF4(v0[34], v0[33], type metadata accessor for ModelsR4.Observation);
    int v16 = v7(v15, 1, v5);
    uint64_t v17 = v0[41];
    uint64_t v18 = v0[39];
    uint64_t v19 = v0[33];
    if (v16 == 1)
    {
      sub_23300E9CC(v19 + *(int *)(v0[30] + 44), v0[41], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_23300EA38(v19, type metadata accessor for ModelsR4.Observation);
      sub_23300EA98(v18, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    }
    else
    {
      sub_23300EA38(v0[33], type metadata accessor for ModelsR4.Observation);
      sub_23300EAF4(v18, v17, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
    }
    uint64_t v20 = v0[41];
    sub_23300EA98(v0[40], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v20, 1, v5) == 1)
    {
      sub_23300EA98(v0[41], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      id v21 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v14 = v0[40];
    uint64_t v13 = v0[41];
    sub_23300EA38(v0[34], type metadata accessor for ModelsR4.Observation);
    sub_23300EAF4(v14, v13, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
  }
  unint64_t v112 = v7;
  uint64_t v22 = v0[41];
  uint64_t v23 = v4;
  if (*(void *)(v22 + 56) == 1)
  {
    if (*(unsigned char *)(v22 + 19))
    {
      uint64_t v24 = v6;
      if (*(unsigned char *)(v22 + 17)) {
        uint64_t v25 = 3;
      }
      else {
        uint64_t v25 = 2;
      }
    }
    else
    {
      uint64_t v24 = v6;
      uint64_t v25 = 1;
    }
  }
  else
  {
    uint64_t v24 = v6;
    uint64_t v25 = 0;
  }
  uint64_t v26 = v0[27];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v27 = (uint64_t *)(v22 + *(int *)(v5 + 32));
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  swift_bridgeObjectRetain();
  id v21 = sub_233017340(v26, v28, v29, v25);
  sub_23300EA38(v0[41], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v6 = v24;
  uint64_t v4 = v23;
  uint64_t v7 = v112;
LABEL_19:
  v0[45] = v21;
  uint64_t v30 = v0[37];
  uint64_t v31 = v0[32];
  uint64_t v32 = v0[14];
  sub_23300E9CC(v4, v30, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_23300E964(v32, v31, type metadata accessor for ModelsR4.Observation);
  if (v7(v30, 1, v5) == 1)
  {
    uint64_t v33 = v0[28];
    sub_23300E9CC(v0[32] + *(int *)(v0[30] + 48), v33, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    uint64_t v34 = type metadata accessor for Period();
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34);
    uint64_t v36 = v0[36];
    uint64_t v37 = v0[28];
    if (v35 == 1)
    {
      sub_23300EA98(v0[28], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v36, 1, 1, v5);
    }
    else
    {
      sub_23300E9CC(v37 + *(int *)(v34 + 20), v0[36], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_23300EA38(v37, (uint64_t (*)(void))type metadata accessor for Period);
    }
    uint64_t v40 = v0[36];
    sub_23300EAF4(v0[32], v0[31], type metadata accessor for ModelsR4.Observation);
    int v41 = v7(v40, 1, v5);
    uint64_t v42 = v0[38];
    uint64_t v43 = v0[36];
    uint64_t v44 = v0[31];
    if (v41 == 1)
    {
      sub_23300E9CC(v44 + *(int *)(v0[30] + 44), v0[38], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_23300EA38(v44, type metadata accessor for ModelsR4.Observation);
      sub_23300EA98(v43, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    }
    else
    {
      sub_23300EA38(v0[31], type metadata accessor for ModelsR4.Observation);
      sub_23300EAF4(v43, v42, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v42, 0, 1, v5);
    }
    uint64_t v45 = v0[38];
    sub_23300EA98(v0[37], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v7(v45, 1, v5) == 1)
    {
      sub_23300EA98(v0[38], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      id v46 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v39 = v0[37];
    uint64_t v38 = v0[38];
    sub_23300EA38(v0[32], type metadata accessor for ModelsR4.Observation);
    sub_23300EAF4(v39, v38, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v38, 0, 1, v5);
  }
  uint64_t v47 = v0[38];
  if (*(void *)(v47 + 56) == 1)
  {
    if (*(unsigned char *)(v47 + 19))
    {
      if (*(unsigned char *)(v47 + 17)) {
        uint64_t v48 = 3;
      }
      else {
        uint64_t v48 = 2;
      }
    }
    else
    {
      uint64_t v48 = 1;
    }
  }
  else
  {
    uint64_t v48 = 0;
  }
  uint64_t v49 = v0[26];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v50 = (uint64_t *)(v47 + *(int *)(v5 + 32));
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  swift_bridgeObjectRetain();
  id v46 = sub_233017340(v49, v52, v51, v48);
  sub_23300EA38(v0[38], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_37:
  v0[46] = 0;
  v0[47] = v46;
  id v53 = (int *)v0[30];
  uint64_t v54 = v0[14];
  if (*(void *)(v54 + v53[16] + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v56 = objc_msgSend(self, sel_inspectableValueWithString_, v55);

    if (v56) {
      goto LABEL_39;
    }
    goto LABEL_48;
  }
  uint64_t v58 = (void *)(v54 + v53[17]);
  uint64_t v59 = v58[1];
  if (v59 == 1)
  {
    uint64_t v60 = v0[22];
    uint64_t v61 = v0[23];
    uint64_t v62 = v0[21];
    sub_23300E9CC(v54 + v53[18], v62, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v62, 1, v60) == 1)
    {
      sub_23300EA98(v0[21], &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      id v57 = 0;
      id v56 = 0;
      goto LABEL_49;
    }
    sub_23300EAF4(v0[21], v0[24], (uint64_t (*)(void))type metadata accessor for Quantity);
    unint64_t v71 = Quantity.asCodedQuantity()();
    uint64_t v72 = v0[24];
    uint64_t v73 = v71;
    id v56 = objc_msgSend(self, sel_inspectableValueWithCodedQuantity_, v71);

    sub_23300EA38(v72, (uint64_t (*)(void))type metadata accessor for Quantity);
    if (v56)
    {
LABEL_39:
      id v57 = objc_msgSend(self, sel_inspectableValueCollectionSingleWithValue_, v56);
LABEL_49:
      v0[52] = v57;
      v0[53] = v56;
      v0[51] = 0;
      uint64_t v74 = (void *)v0[14];
      uint64_t v75 = *(void *)((char *)v74 + *(int *)(v0[30] + 76));
      if (v75)
      {
        uint64_t v76 = MEMORY[0x263F8EE78];
        uint64_t v114 = MEMORY[0x263F8EE78];
        uint64_t v77 = *(void *)(v75 + 16);
        if (v77)
        {
          uint64_t v78 = v0[19];
          uint64_t v79 = v75 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
          uint64_t v80 = *(void *)(v78 + 72);
          swift_bridgeObjectRetain();
          do
          {
            uint64_t v81 = v0[20];
            sub_23300E964(v79, v81, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
            id v82 = ReferenceRange.asReferenceRange()();
            uint64_t v83 = sub_23300EA38(v81, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
            if (v82)
            {
              MEMORY[0x237DB59C0](v83);
              if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                sub_23309B9D0();
              }
              sub_23309B9E0();
              sub_23309B9C0();
            }
            v79 += v80;
            --v77;
          }
          while (v77);
          swift_bridgeObjectRelease();
          uint64_t v76 = v114;
          uint64_t v74 = (void *)v0[14];
        }
      }
      else
      {
        uint64_t v76 = 0;
      }
      v0[54] = v76;
      id v84 = objc_msgSend(self, sel_FHIRObservationStatus);
      v0[55] = v84;
      uint64_t v86 = v74[5];
      uint64_t v85 = v74[6];
      v0[56] = v85;
      uint64_t v87 = sub_23309B710();
      v0[57] = v88;
      v0[2] = v84;
      v0[3] = v86;
      v0[4] = v85;
      v0[5] = v87;
      v0[7] = 0;
      v0[8] = 0;
      v0[6] = v88;
      uint64_t v89 = v74[7];
      swift_bridgeObjectRetain();
      if (v89) {
        uint64_t v90 = Array<A>.asCodingCollectionArray()(v89);
      }
      else {
        uint64_t v90 = MEMORY[0x263F8EE78];
      }
      v0[58] = v90;
      uint64_t v91 = v0[30];
      uint64_t v92 = v0[14];
      uint64_t v93 = *(void *)(v92 + *(int *)(v91 + 56));
      if (v93)
      {
        int64_t v94 = *(void *)(v93 + 16);
        uint64_t v95 = MEMORY[0x263F8EE78];
        if (v94)
        {
          uint64_t v96 = v0[17];
          uint64_t v113 = v0[18];
          uint64_t v115 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          sub_232F39748(0, v94, 0);
          uint64_t v97 = v93 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
          uint64_t v98 = *(void *)(v96 + 72);
          uint64_t v95 = v115;
          do
          {
            uint64_t v99 = (uint64_t *)v0[18];
            sub_23300E964(v97, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for Annotation);
            uint64_t v100 = *v99;
            uint64_t v101 = *(void *)(v113 + 8);
            swift_bridgeObjectRetain();
            sub_23300EA38((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for Annotation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_232F39748(0, *(void *)(v95 + 16) + 1, 1);
              uint64_t v95 = v115;
            }
            unint64_t v103 = *(void *)(v95 + 16);
            unint64_t v102 = *(void *)(v95 + 24);
            if (v103 >= v102 >> 1)
            {
              sub_232F39748(v102 > 1, v103 + 1, 1);
              uint64_t v95 = v115;
            }
            *(void *)(v95 + 16) = v103 + 1;
            uint64_t v104 = v95 + 16 * v103;
            *(void *)(v104 + 32) = v100;
            *(void *)(v104 + 40) = v101;
            v97 += v98;
            --v94;
          }
          while (v94);
          swift_bridgeObjectRelease();
        }
        v0[12] = v95;
        sub_232F51B70();
        sub_232F65EE4();
        uint64_t v105 = sub_23309B6C0();
        uint64_t v107 = v106;
        swift_bridgeObjectRelease();
        uint64_t v91 = v0[30];
        uint64_t v92 = v0[14];
      }
      else
      {
        uint64_t v105 = 0;
        uint64_t v107 = 0;
      }
      v0[59] = v105;
      v0[60] = v107;
      sub_23300E964(v0[13], v0[16], (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
      uint64_t v108 = v0[15];
      if (*(void *)(v92 + *(int *)(v91 + 80) + 8))
      {
        swift_bridgeObjectRetain();
        sub_23309B200();
        uint64_t v109 = sub_23309B230();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v108, 0, 1, v109);
      }
      else
      {
        uint64_t v110 = sub_23309B230();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v108, 1, 1, v110);
      }
      uint64_t v111 = swift_task_alloc();
      v0[61] = v111;
      *(void *)uint64_t v111 = v0;
      *(void *)(v111 + 8) = sub_23300E1DC;
      *(_OWORD *)(v111 + 16) = *(_OWORD *)(v0 + 13);
      uint64_t v64 = sub_23300C4B8;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      return MEMORY[0x270FA2498](v64, v65, v66);
    }
LABEL_48:
    id v57 = 0;
    goto LABEL_49;
  }
  uint64_t v63 = v58[2];
  v0[9] = *v58;
  v0[10] = v59;
  v0[11] = v63;
  sub_232F3A800(0, &qword_268757D38);
  uint64_t v64 = (id (*)())objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x263F09518]);
  v0[48] = v64;
  if (!v64)
  {
    __break(1u);
    return MEMORY[0x270FA2498](v64, v65, v66);
  }
  uint64_t v67 = (uint64_t)v64;
  unint64_t v68 = (void *)swift_task_alloc();
  v0[49] = v68;
  void *v68 = v0;
  v68[1] = sub_23300DBD8;
  uint64_t v69 = v0[13];
  return sub_23300252C(v69, v67);
}

uint64_t sub_23300DBD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 384);
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();

  return MEMORY[0x270FA2498](sub_23300DCF4, 0, 0);
}

uint64_t sub_23300DCF4()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[46];
  v0[52] = objc_msgSend(self, sel_inspectableValueCollectionSingleWithValue_, v1);
  v0[53] = v1;
  v0[51] = v2;
  uint64_t v3 = (void *)v0[14];
  uint64_t v4 = *(void *)((char *)v3 + *(int *)(v0[30] + 76));
  if (v4)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v43 = MEMORY[0x263F8EE78];
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v7 = v0[19];
      uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      uint64_t v9 = *(void *)(v7 + 72);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v10 = v0[20];
        sub_23300E964(v8, v10, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
        id v11 = ReferenceRange.asReferenceRange()();
        uint64_t v12 = sub_23300EA38(v10, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
        if (v11)
        {
          MEMORY[0x237DB59C0](v12);
          if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_23309B9D0();
          }
          sub_23309B9E0();
          sub_23309B9C0();
        }
        v8 += v9;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v5 = v43;
      uint64_t v3 = (void *)v0[14];
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  v0[54] = v5;
  id v13 = objc_msgSend(self, sel_FHIRObservationStatus);
  v0[55] = v13;
  uint64_t v15 = v3[5];
  uint64_t v14 = v3[6];
  v0[56] = v14;
  uint64_t v16 = sub_23309B710();
  v0[57] = v17;
  v0[2] = v13;
  v0[3] = v15;
  v0[4] = v14;
  v0[5] = v16;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v17;
  uint64_t v18 = v3[7];
  swift_bridgeObjectRetain();
  if (v18) {
    uint64_t v19 = Array<A>.asCodingCollectionArray()(v18);
  }
  else {
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  v0[58] = v19;
  uint64_t v20 = v0[30];
  uint64_t v21 = v0[14];
  uint64_t v22 = *(void *)(v21 + *(int *)(v20 + 56));
  if (v22)
  {
    int64_t v23 = *(void *)(v22 + 16);
    uint64_t v24 = MEMORY[0x263F8EE78];
    if (v23)
    {
      uint64_t v25 = v0[17];
      uint64_t v42 = v0[18];
      uint64_t v44 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_232F39748(0, v23, 0);
      uint64_t v26 = v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      uint64_t v27 = *(void *)(v25 + 72);
      uint64_t v24 = v44;
      do
      {
        uint64_t v28 = (uint64_t *)v0[18];
        sub_23300E964(v26, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Annotation);
        uint64_t v29 = *v28;
        uint64_t v30 = *(void *)(v42 + 8);
        swift_bridgeObjectRetain();
        sub_23300EA38((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Annotation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_232F39748(0, *(void *)(v24 + 16) + 1, 1);
          uint64_t v24 = v44;
        }
        unint64_t v32 = *(void *)(v24 + 16);
        unint64_t v31 = *(void *)(v24 + 24);
        if (v32 >= v31 >> 1)
        {
          sub_232F39748(v31 > 1, v32 + 1, 1);
          uint64_t v24 = v44;
        }
        *(void *)(v24 + 16) = v32 + 1;
        uint64_t v33 = v24 + 16 * v32;
        *(void *)(v33 + 32) = v29;
        *(void *)(v33 + 40) = v30;
        v26 += v27;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    v0[12] = v24;
    sub_232F51B70();
    sub_232F65EE4();
    uint64_t v34 = sub_23309B6C0();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v20 = v0[30];
    uint64_t v21 = v0[14];
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v36 = 0;
  }
  v0[59] = v34;
  v0[60] = v36;
  sub_23300E964(v0[13], v0[16], (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v37 = v0[15];
  if (*(void *)(v21 + *(int *)(v20 + 80) + 8))
  {
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v38 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
  }
  else
  {
    uint64_t v39 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 1, 1, v39);
  }
  uint64_t v40 = swift_task_alloc();
  v0[61] = v40;
  *(void *)uint64_t v40 = v0;
  *(void *)(v40 + 8) = sub_23300E1DC;
  *(_OWORD *)(v40 + 16) = *(_OWORD *)(v0 + 13);
  return MEMORY[0x270FA2498](sub_23300C4B8, 0, 0);
}

uint64_t sub_23300E1DC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 496) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23300E2DC, 0, 0);
}

uint64_t sub_23300E2DC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = (void *)*MEMORY[0x263F09508];
  sub_23300E9CC(*(void *)(v0 + 112) + *(int *)(*(void *)(v0 + 240) + 52), v3, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  int v5 = v1(v3, 1, v2);
  uint64_t v6 = *(void *)(v0 + 280);
  if (v5 == 1)
  {
    id v7 = v4;
    sub_23300EA98(v6, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v33 = 0;
LABEL_15:
    unint64_t v32 = v4;
    uint64_t v24 = *(void *)(v0 + 472);
    uint64_t v25 = *(void *)(v0 + 480);
    uint64_t v26 = *(void *)(v0 + 464);
    uint64_t v37 = *(void **)(v0 + 496);
    uint64_t v38 = *(void **)(v0 + 440);
    uint64_t v39 = *(void **)(v0 + 424);
    uint64_t v35 = *(void **)(v0 + 416);
    uint64_t v36 = *(void *)(v0 + 432);
    uint64_t v27 = *(void **)(v0 + 376);
    uint64_t v34 = *(void **)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 120);
    uint64_t v29 = *(uint64_t **)(v0 + 128);
    sub_232F3A800(0, &qword_268758320);
    swift_bridgeObjectRetain();
    id v30 = sub_23303673C(v29, v28, v24, v25, v37, (uint64_t)v35, v36, (uint64_t)v34, (uint64_t)v27, (uint64_t)v32, v26, v0 + 16, (uint64_t)v33, 0, v24, v25, 0, 0, 0,
            0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v31 = *(uint64_t (**)(id))(v0 + 8);
    return v31(v30);
  }
  if (*(void *)(v6 + 56) == 1)
  {
    if (*(unsigned char *)(v6 + 19))
    {
      if (*(unsigned char *)(v6 + 17)) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = 2;
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 200);
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  id v12 = v4;
  FHIRDateTime.asDateComponents()();
  id v13 = (uint64_t *)(v6 + *(int *)(v10 + 32));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  swift_bridgeObjectRetain();
  id v16 = sub_233017340(v11, v14, v15, v8);
  if (!v9)
  {
    uint64_t v33 = v16;
    sub_23300EA38(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    goto LABEL_15;
  }
  uint64_t v17 = *(void **)(v0 + 496);
  uint64_t v18 = *(void **)(v0 + 424);
  uint64_t v19 = *(void **)(v0 + 416);
  uint64_t v20 = *(void **)(v0 + 376);
  uint64_t v21 = *(void **)(v0 + 360);
  uint64_t v41 = *(void *)(v0 + 128);
  uint64_t v42 = *(void *)(v0 + 280);
  uint64_t v40 = *(void *)(v0 + 120);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23300EA98(v40, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  sub_23300EA38(v41, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  sub_23300EA38(v42, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

void sub_23300E910(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_23300E964(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23300E9CC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23300E910(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23300EA38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23300EA98(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_23300E910(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23300EAF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t Array<A>.asCodingCollectionArray()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    sub_23309BF20();
    uint64_t v4 = a1 + 48;
    do
    {
      sub_233001A34();
      sub_23309BF00();
      sub_23309BF30();
      sub_23309BF40();
      sub_23309BF10();
      v4 += 24;
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t Array<A>.extensions(with:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_23300F4B8(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t Array<A>.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v35 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F6703C();
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  id v16 = (char *)v31 - v15;
  uint64_t v45 = type metadata accessor for Extension();
  MEMORY[0x270FA5388](v45);
  uint64_t v39 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19)
  {
    uint64_t v29 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v29, 1, v45);
  }
  v31[1] = a2;
  uint64_t v32 = a3;
  uint64_t v20 = a2 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v41 = (void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v42 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v34 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v37 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v38 = v14;
  v31[0] = v17;
  uint64_t v40 = *(void *)(v17 + 72);
  swift_bridgeObjectRetain();
  uint64_t v22 = (uint64_t)v39;
  uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  while (1)
  {
    sub_23300F80C(v20, v22, (uint64_t (*)(void))type metadata accessor for Extension);
    uint64_t v23 = v22 + *(int *)(v45 + 20);
    (*v42)(v16, v44, v5);
    (*v41)(v16, 0, 1, v5);
    uint64_t v24 = (uint64_t)&v10[*(int *)(v43 + 48)];
    sub_23300F80C(v23, (uint64_t)v10, (uint64_t (*)(void))sub_232F41D18);
    sub_23300F80C((uint64_t)v16, v24, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v25 = *v21;
    if ((*v21)(v10, 1, v5) == 1) {
      break;
    }
    uint64_t v26 = (uint64_t)v38;
    sub_23300F80C((uint64_t)v10, (uint64_t)v38, (uint64_t (*)(void))sub_232F41D18);
    if (v25((char *)v24, 1, v5) == 1)
    {
      sub_23300F874((uint64_t)v16, (uint64_t (*)(void))sub_232F41D18);
      (*v37)(v26, v5);
      uint64_t v22 = (uint64_t)v39;
      goto LABEL_4;
    }
    uint64_t v27 = v35;
    (*v34)(v35, v24, v5);
    sub_23300F938();
    int v36 = sub_23309B6D0();
    uint64_t v28 = *v37;
    (*v37)((uint64_t)v27, v5);
    sub_23300F874((uint64_t)v16, (uint64_t (*)(void))sub_232F41D18);
    v28(v26, v5);
    uint64_t v21 = v33;
    sub_23300F874((uint64_t)v10, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v22 = (uint64_t)v39;
    if (v36) {
      goto LABEL_14;
    }
LABEL_5:
    sub_23300F874(v22, (uint64_t (*)(void))type metadata accessor for Extension);
    v20 += v40;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = 1;
      a3 = v32;
      goto LABEL_15;
    }
  }
  sub_23300F874((uint64_t)v16, (uint64_t (*)(void))sub_232F41D18);
  if (v25((char *)v24, 1, v5) != 1)
  {
LABEL_4:
    sub_23300F874((uint64_t)v10, (uint64_t (*)(void))sub_232F6703C);
    goto LABEL_5;
  }
  sub_23300F874((uint64_t)v10, (uint64_t (*)(void))sub_232F41D18);
LABEL_14:
  swift_bridgeObjectRelease();
  a3 = v32;
  sub_23300F8D4(v22, v32);
  uint64_t v29 = 0;
LABEL_15:
  uint64_t v17 = v31[0];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v29, 1, v45);
}

uint64_t Array<A>.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  sub_232F41D18();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Extension();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13)
  {
    uint64_t v22 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v22, 1, v9);
  }
  uint64_t v25 = v10;
  uint64_t v26 = a4;
  uint64_t v14 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v15 = *(void *)(v10 + 72);
  v24[1] = a3;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23300F80C(v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Extension);
    sub_23300F80C((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v16 = sub_23309AF80();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1)
    {
      sub_23300F874((uint64_t)v8, (uint64_t (*)(void))sub_232F41D18);
      goto LABEL_4;
    }
    uint64_t v18 = sub_23309AEE0();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
    if (v18 == v28 && v20 == v27) {
      break;
    }
    char v21 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_13;
    }
LABEL_4:
    sub_23300F874((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Extension);
    v14 += v15;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 1;
      uint64_t v10 = v25;
      a4 = v26;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v22, 1, v9);
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v10 = v25;
  a4 = v26;
  swift_bridgeObjectRelease();
  sub_23300F8D4((uint64_t)v12, a4);
  uint64_t v22 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v22, 1, v9);
}

uint64_t sub_23300F4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v31 = a2;
  sub_232F41D18();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Extension();
  uint64_t v8 = MEMORY[0x270FA5388](v32);
  uint64_t v30 = (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v27 = v3;
    uint64_t v28 = (v15 + 32) & ~v15;
    uint64_t v17 = a1 + v28;
    while (1)
    {
      sub_23300F80C(v17, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Extension);
      sub_23300F80C((uint64_t)&v12[*(int *)(v32 + 20)], (uint64_t)v7, (uint64_t (*)(void))sub_232F41D18);
      uint64_t v18 = sub_23309AF80();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v18) == 1)
      {
        sub_23300F874((uint64_t)v7, (uint64_t (*)(void))sub_232F41D18);
      }
      else
      {
        uint64_t v20 = sub_23309AEE0();
        uint64_t v22 = v21;
        (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v18);
        if (v20 == v31 && v22 == v29)
        {
          swift_bridgeObjectRelease();
LABEL_11:
          sub_23300F8D4((uint64_t)v12, v30);
          uint64_t v24 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_232F39A3C(0, *(void *)(v24 + 16) + 1, 1);
            uint64_t v24 = v33;
          }
          unint64_t v26 = *(void *)(v24 + 16);
          unint64_t v25 = *(void *)(v24 + 24);
          if (v26 >= v25 >> 1)
          {
            sub_232F39A3C(v25 > 1, v26 + 1, 1);
            uint64_t v24 = v33;
          }
          *(void *)(v24 + 16) = v26 + 1;
          sub_23300F8D4(v30, v24 + v28 + v26 * v16);
          goto LABEL_5;
        }
        char v23 = sub_23309C220();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_11;
        }
      }
      sub_23300F874((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Extension);
LABEL_5:
      v17 += v16;
      if (!--v14) {
        return v33;
      }
    }
  }
  return result;
}

uint64_t sub_23300F80C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23300F874(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23300F8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Extension();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23300F938()
{
  unint64_t result = qword_268756530;
  if (!qword_268756530)
  {
    sub_23309AF80();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756530);
  }
  return result;
}

uint64_t sub_23300F990(uint64_t a1)
{
  uint64_t v34 = a1;
  SignedClinicalDataEUDCC.verifySignature(using:)((HealthRecordsExtraction::VCJWKSet)&v34);
  if (v1)
  {
    uint64_t v2 = v1;
    id v37 = v1;
    id v3 = v1;
    sub_232F3DAA0();
    if (swift_dynamicCast())
    {
      uint64_t v5 = v34;
      uint64_t v4 = v35;
      if (!v36)
      {

        if (qword_2687563A0 != -1) {
          swift_once();
        }
        uint64_t v16 = sub_23309B4B0();
        __swift_project_value_buffer(v16, (uint64_t)qword_268770F68);
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_23309B4A0();
        os_log_type_t v18 = sub_23309BB80();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          uint64_t v33 = v20;
          *(_DWORD *)uint64_t v19 = 136446210;
          swift_bridgeObjectRetain();
          sub_232F62B64(v5, v4, &v33);
          sub_23309BD10();
          sub_232F4F6D4(v5, v4, 0);
          sub_232F4F6D4(v5, v4, 0);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_232E63000, v17, v18, "SignedClinicalDataSignatureVerifiable: signature is invalid because the key “%{public}s” is not a signing key", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x237DB6EC0](v20, -1, -1);
          MEMORY[0x237DB6EC0](v19, -1, -1);
        }
        else
        {
          sub_232F4F6D4(v5, v4, 0);
          sub_232F4F6D4(v5, v4, 0);
        }

        id v31 = v37;
        goto LABEL_28;
      }
      if (v36 == 2)
      {

        if (qword_2687563A0 != -1) {
          swift_once();
        }
        uint64_t v6 = sub_23309B4B0();
        __swift_project_value_buffer(v6, (uint64_t)qword_268770F68);
        swift_bridgeObjectRetain();
        uint64_t v7 = sub_23309B4A0();
        os_log_type_t v8 = sub_23309BB80();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = (uint8_t *)swift_slowAlloc();
          uint64_t v10 = swift_slowAlloc();
          uint64_t v33 = v10;
          *(_DWORD *)uint64_t v9 = 136446210;
          swift_bridgeObjectRetain();
          sub_232F62B64(v5, v4, &v33);
          sub_23309BD10();
          sub_232F4F6D4(v5, v4, 2u);
          sub_232F4F6D4(v5, v4, 2u);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_232E63000, v7, v8, "SignedClinicalDataSignatureVerifiable: unable to verify signature because the signing key “%{public}s” could not be found", v9, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x237DB6EC0](v10, -1, -1);
          MEMORY[0x237DB6EC0](v9, -1, -1);
        }
        else
        {
          sub_232F4F6D4(v5, v4, 2u);
          sub_232F4F6D4(v5, v4, 2u);
        }

        return 1;
      }
      sub_232F4F6D4(v34, v35, v36);
    }

    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_23309B4B0();
    __swift_project_value_buffer(v21, (uint64_t)qword_268770F68);
    id v22 = v2;
    id v23 = v2;
    uint64_t v24 = sub_23309B4A0();
    os_log_type_t v25 = sub_23309BB80();
    if (!os_log_type_enabled(v24, v25))
    {

      return 3;
    }
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v34 = v27;
    *(_DWORD *)unint64_t v26 = 136446210;
    id v37 = v2;
    id v28 = v2;
    uint64_t v29 = sub_23309B770();
    id v37 = (id)sub_232F62B64(v29, v30, &v34);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v24, v25, "SignedClinicalDataSignatureVerifiable: signature invalid because: %{public}s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v27, -1, -1);
    MEMORY[0x237DB6EC0](v26, -1, -1);

    id v31 = v2;
LABEL_28:

    return 3;
  }
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_23309B4B0();
  __swift_project_value_buffer(v11, (uint64_t)qword_268770F68);
  uint64_t v12 = sub_23309B4A0();
  os_log_type_t v13 = sub_23309BBA0();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = 2;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_232E63000, v12, v13, "SignedClinicalDataSignatureVerifiable: signature appears to be valid", v15, 2u);
    MEMORY[0x237DB6EC0](v15, -1, -1);
  }
  else
  {

    return 2;
  }
  return v14;
}

void SignedClinicalDataEUDCC.algorithm.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t SignedClinicalDataEUDCC.signingKeyID.getter()
{
  return sub_23309B020();
}

uint64_t SignedClinicalDataEUDCC.signature()()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_232E9A9F4(v1, *(void *)(v0 + 216));
  return v1;
}

uint64_t SignedClinicalDataEUDCC.signatureMessage()()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[5];
  unint64_t v3 = v0[6];
  sub_2330102A8();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_2330A7020;
  uint64_t v6 = (void *)sub_23309B6E0();
  uint64_t v7 = self;
  id v8 = objc_msgSend(v7, sel_cborWithUTF8String_, v6);

  *(void *)(v5 + 32) = v8;
  sub_232E9A9F4(v1, v2);
  uint64_t v9 = (void *)sub_23309B010();
  id v10 = objc_msgSend(v7, sel_cborWithData_, v9);
  sub_232E9AA4C(v1, v2);

  *(void *)(v5 + 40) = v10;
  uint64_t v11 = (void *)sub_23309B010();
  id v12 = objc_msgSend(v7, sel_cborWithData_, v11);

  *(void *)(v5 + 48) = v12;
  sub_232E9A9F4(v4, v3);
  os_log_type_t v13 = (void *)sub_23309B010();
  id v14 = objc_msgSend(v7, sel_cborWithData_, v13);
  sub_232E9AA4C(v4, v3);

  *(void *)(v5 + 56) = v14;
  sub_23309B9C0();
  sub_233010304();
  uint64_t v15 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v7, sel_cborWithArray_, v15);

  id v17 = v16;
  uint64_t v18 = sub_23309AFA0();
  if (v19 >> 60 == 15)
  {
    sub_232FEA9C4();
    swift_allocError();
    *(void *)uint64_t v20 = 2;
    *(unsigned char *)(v20 + 8) = 1;
    swift_willThrow();
  }

  return v18;
}

void sub_2330102A8()
{
  if (!qword_268757D40)
  {
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757D40);
    }
  }
}

unint64_t sub_233010304()
{
  unint64_t result = qword_2687583D8;
  if (!qword_2687583D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687583D8);
  }
  return result;
}

uint64_t SignedClinicalDataEUDCC.signatureStatus(using:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_JWKSOutcome);
  if (v2 == (id)3)
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_23309B4B0();
    __swift_project_value_buffer(v4, (uint64_t)qword_268770F68);
    id v5 = a1;
    uint64_t v6 = sub_23309B4A0();
    os_log_type_t v7 = sub_23309BBA0();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v32 = v9;
      *(_DWORD *)id v8 = 136446210;
      id v10 = objc_msgSend(v5, sel_signingKeyID);
      if (v10)
      {
        uint64_t v11 = v10;
        sub_23309B710();

        swift_bridgeObjectRetain_n();
        sub_23309C320();
        id v12 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_23309BDB0();
        swift_unknownObjectRelease();
        uint64_t v13 = sub_23309B770();
        unint64_t v15 = v14;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v13 = 0x7D6C696E7BLL;
        unint64_t v15 = 0xE500000000000000;
      }
      sub_232F62B64(v13, v15, &v32);
      sub_23309BD10();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v6, v7, "SignedClinicalDataEUDCC: signing key “%{public}s” has been removed", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v9, -1, -1);
      MEMORY[0x237DB6EC0](v8, -1, -1);

      return 3;
    }
    else
    {

      return 3;
    }
  }
  else if (v2 == (id)2)
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_23309B4B0();
    __swift_project_value_buffer(v16, (uint64_t)qword_268770F68);
    id v17 = a1;
    uint64_t v18 = sub_23309B4A0();
    os_log_type_t v19 = sub_23309BBA0();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v32 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      id v22 = objc_msgSend(v17, sel_signingKeyID);
      if (v22)
      {
        id v23 = v22;
        sub_23309B710();

        swift_bridgeObjectRetain_n();
        sub_23309C320();
        id v24 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_23309BDB0();
        swift_unknownObjectRelease();
        uint64_t v25 = sub_23309B770();
        unint64_t v27 = v26;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v25 = 0x7D6C696E7BLL;
        unint64_t v27 = 0xE500000000000000;
      }
      sub_232F62B64(v25, v27, &v32);
      sub_23309BD10();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_232E63000, v18, v19, "SignedClinicalDataEUDCC: signing key “%{public}s” not found", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DB6EC0](v21, -1, -1);
      MEMORY[0x237DB6EC0](v20, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  else if (v2 == (id)1)
  {
    return sub_2330108C8(a1);
  }
  else
  {
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_23309B4B0();
    __swift_project_value_buffer(v28, (uint64_t)qword_268770F68);
    uint64_t v29 = sub_23309B4A0();
    os_log_type_t v30 = sub_23309BB80();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v31 = 0;
      _os_log_impl(&dword_232E63000, v29, v30, "SignedClinicalDataEUDCC: unable to verify signature", v31, 2u);
      MEMORY[0x237DB6EC0](v31, -1, -1);
    }

    return 1;
  }
}

uint64_t sub_2330108C8(void *a1)
{
  long long v2 = v1[11];
  long long v46 = v1[10];
  long long v47 = v2;
  long long v3 = v1[13];
  long long v48 = v1[12];
  long long v49 = v3;
  long long v4 = v1[7];
  long long v42 = v1[6];
  long long v43 = v4;
  long long v5 = v1[9];
  long long v44 = v1[8];
  long long v45 = v5;
  long long v6 = v1[3];
  long long v38 = v1[2];
  long long v39 = v6;
  long long v7 = v1[5];
  long long v40 = v1[4];
  long long v41 = v7;
  long long v8 = v1[1];
  long long v36 = *v1;
  long long v37 = v8;
  id v9 = objc_msgSend(a1, sel_JWKSData);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = sub_23309B030();
    unint64_t v13 = v12;

    sub_23309AB30();
    swift_allocObject();
    sub_23309AB20();
    sub_232F63150();
    sub_23309AB10();
    swift_release();
    sub_232E9AA4C(v11, v13);
    uint64_t v21 = sub_23300F990(v33);
    swift_bridgeObjectRelease();
    return v21;
  }
  sub_232F4F650();
  unint64_t v14 = (void *)swift_allocError();
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 5;
  swift_willThrow();
  id v35 = v14;
  id v16 = v14;
  sub_232F3DAA0();
  if (swift_dynamicCast())
  {
    if (v34 == 5 && v33 == 0)
    {

      if (qword_2687563A0 != -1) {
        swift_once();
      }
      uint64_t v17 = sub_23309B4B0();
      __swift_project_value_buffer(v17, (uint64_t)qword_268770F68);
      uint64_t v18 = sub_23309B4A0();
      os_log_type_t v19 = sub_23309BBA0();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_232E63000, v18, v19, "SignedClinicalDataEUDCC: not attempting to verify signature because there is no JWKS data", v20, 2u);
        MEMORY[0x237DB6EC0](v20, -1, -1);
      }

      return 0;
    }
    sub_232F4F6D4(v33, *((uint64_t *)&v33 + 1), v34);
  }

  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_23309B4B0();
  __swift_project_value_buffer(v22, (uint64_t)qword_268770F68);
  id v23 = v14;
  id v24 = v14;
  uint64_t v25 = sub_23309B4A0();
  os_log_type_t v26 = sub_23309BB80();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(void *)&long long v33 = v28;
    *(_DWORD *)unint64_t v27 = 136446210;
    id v35 = v14;
    id v29 = v14;
    uint64_t v30 = sub_23309B770();
    id v35 = (id)sub_232F62B64(v30, v31, (uint64_t *)&v33);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v25, v26, "SignedClinicalDataEUDCC: unable to verify signature because: %{public}s", v27, 0xCu);
    uint64_t v21 = 1;
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v28, -1, -1);
    MEMORY[0x237DB6EC0](v27, -1, -1);
  }
  else
  {

    return 1;
  }
  return v21;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SignedClinicalDataEUDCC.verifySignature(using:)(HealthRecordsExtraction::VCJWKSet using)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)using.keys._rawValue;
  long long v5 = v1[11];
  long long v101 = v1[10];
  long long v102 = v5;
  long long v6 = v1[13];
  long long v103 = v1[12];
  long long v104 = v6;
  long long v7 = v1[7];
  long long v97 = v1[6];
  long long v98 = v7;
  long long v8 = v1[9];
  long long v99 = v1[8];
  long long v100 = v8;
  long long v9 = v1[3];
  long long v93 = v1[2];
  long long v94 = v9;
  long long v10 = v1[5];
  long long v95 = v1[4];
  long long v96 = v10;
  long long v11 = v1[1];
  long long v91 = *v1;
  long long v92 = v11;
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_23309B4B0();
  __swift_project_value_buffer(v12, (uint64_t)qword_268770F68);
  sub_2330113C4((uint64_t *)&v91);
  sub_2330113C4((uint64_t *)&v91);
  unint64_t v13 = sub_23309B4A0();
  os_log_type_t v14 = sub_23309BBA0();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(void *)&long long v83 = v16;
    uint64_t v105 = v2;
    *(_DWORD *)uint64_t v15 = 136446210;
    sub_2330113C4((uint64_t *)&v91);
    sub_23309B020();
    uint64_t v18 = v17;
    sub_2330114BC((uint64_t *)&v91);
    *((void *)&v69 + 1) = v18;
    sub_23309C320();
    id v19 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v20 = sub_23309B770();
    *(void *)&long long v69 = sub_232F62B64(v20, v21, (uint64_t *)&v83);
    uint64_t v3 = v105;
    sub_23309BD10();
    swift_bridgeObjectRelease();
    sub_2330114BC((uint64_t *)&v91);
    sub_2330114BC((uint64_t *)&v91);
    _os_log_impl(&dword_232E63000, v13, v14, "SignedClinicalDataEUDCC: trying to verify signature with key “%{public}s”", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v16, -1, -1);
    MEMORY[0x237DB6EC0](v15, -1, -1);
  }
  else
  {
    sub_2330114BC((uint64_t *)&v91);
    sub_2330114BC((uint64_t *)&v91);
  }

  uint64_t v22 = v92;
  sub_2330113C4((uint64_t *)&v91);
  uint64_t v23 = sub_23309B020();
  uint64_t v25 = v24;
  sub_2330114BC((uint64_t *)&v91);
  uint64_t v26 = *(void *)(v4 + 16);
  if (!v26)
  {
LABEL_16:
    sub_232F4F650();
    swift_allocError();
    *(void *)uint64_t v41 = v23;
    *(void *)(v41 + 8) = v25;
    *(unsigned char *)(v41 + 16) = 2;
LABEL_17:
    swift_willThrow();
    return;
  }
  long long v27 = *(_OWORD *)(v4 + 128);
  long long v88 = *(_OWORD *)(v4 + 112);
  long long v89 = v27;
  v90[0] = *(_OWORD *)(v4 + 144);
  *(void *)&v90[1] = *(void *)(v4 + 160);
  long long v28 = *(_OWORD *)(v4 + 48);
  long long v29 = *(_OWORD *)(v4 + 80);
  long long v30 = *(_OWORD *)(v4 + 96);
  long long v85 = *(_OWORD *)(v4 + 64);
  long long v86 = v29;
  long long v87 = v30;
  long long v83 = *(_OWORD *)(v4 + 32);
  long long v84 = v28;
  uint64_t v31 = v4 + 168;
  uint64_t v32 = v26 - 1;
  uint64_t v33 = *((void *)&v27 + 1);
  if (!*((void *)&v27 + 1)) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v34 = (void)v89 == v23 && v33 == v25;
  if (!v34 && (sub_23309C220() & 1) == 0)
  {
LABEL_13:
    while (v32)
    {
      long long v83 = *(_OWORD *)v31;
      long long v35 = *(_OWORD *)(v31 + 16);
      long long v36 = *(_OWORD *)(v31 + 32);
      long long v37 = *(_OWORD *)(v31 + 64);
      long long v86 = *(_OWORD *)(v31 + 48);
      long long v87 = v37;
      long long v84 = v35;
      long long v85 = v36;
      long long v38 = *(_OWORD *)(v31 + 80);
      long long v39 = *(_OWORD *)(v31 + 96);
      long long v40 = *(_OWORD *)(v31 + 112);
      *(void *)&v90[1] = *(void *)(v31 + 128);
      long long v89 = v39;
      v90[0] = v40;
      long long v88 = v38;
      v31 += 136;
      --v32;
      uint64_t v33 = *((void *)&v39 + 1);
      if (*((void *)&v39 + 1)) {
        goto LABEL_8;
      }
    }
    goto LABEL_16;
  }
  sub_232F631A4((uint64_t)&v83);
  if (*(void *)&v90[1]
    && *(_OWORD *)((char *)v90 + 8) != __PAIR128__(0xE300000000000000, 6777203)
    && (sub_23309C220() & 1) == 0)
  {
    sub_232F63238((uint64_t)&v83);
    sub_232F4F650();
    swift_allocError();
    *(void *)uint64_t v59 = v23;
    *(void *)(v59 + 8) = v25;
    *(unsigned char *)(v59 + 16) = 0;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if (v22 == 3)
  {
    long long v50 = v104;
    long long v79 = v101;
    long long v80 = v102;
    long long v81 = v103;
    long long v82 = v104;
    long long v75 = v97;
    long long v76 = v98;
    long long v77 = v99;
    long long v78 = v100;
    long long v71 = v93;
    long long v72 = v94;
    long long v73 = v95;
    long long v74 = v96;
    long long v69 = v91;
    long long v70 = v92;
    sub_2330113C4((uint64_t *)&v91);
    sub_232E9A9F4(v50, *((unint64_t *)&v50 + 1));
    uint64_t v51 = SignedClinicalDataEUDCC.signatureMessage()();
    if (!v3)
    {
      uint64_t v53 = v51;
      unint64_t v54 = v52;
      long long v66 = v89;
      long long v67 = v90[0];
      uint64_t v68 = *(void *)&v90[1];
      long long v62 = v85;
      long long v63 = v86;
      long long v64 = v87;
      long long v65 = v88;
      long long v60 = v83;
      long long v61 = v84;
      uint64_t v55 = VCJWK.asRSASecKey()();
      if (!v56)
      {
        id v57 = v55;
        sub_232FFEF60(v50, SDWORD2(v50), v53, v54, v55);
      }
      sub_232E9AA4C(v53, v54);
    }
    sub_232E9AA4C(v50, *((unint64_t *)&v50 + 1));
    sub_232F63238((uint64_t)&v83);
    sub_2330114BC((uint64_t *)&v91);
  }
  else
  {
    if (v22 != 1)
    {
      sub_232F63238((uint64_t)&v83);
      sub_232F632CC();
      swift_allocError();
      *(void *)uint64_t v58 = v22;
      *(void *)(v58 + 8) = 0;
      *(void *)(v58 + 16) = 0;
      *(void *)(v58 + 24) = 0;
      *(unsigned char *)(v58 + 32) = 1;
      goto LABEL_17;
    }
    *((void *)&v61 + 1) = &type metadata for SignedClinicalDataEUDCC;
    *(void *)&long long v62 = &protocol witness table for SignedClinicalDataEUDCC;
    long long v42 = (_OWORD *)swift_allocObject();
    *(void *)&long long v60 = v42;
    long long v43 = v102;
    v42[11] = v101;
    v42[12] = v43;
    long long v44 = v104;
    v42[13] = v103;
    v42[14] = v44;
    long long v45 = v98;
    v42[7] = v97;
    v42[8] = v45;
    long long v46 = v100;
    v42[9] = v99;
    v42[10] = v46;
    long long v47 = v94;
    v42[3] = v93;
    v42[4] = v47;
    long long v48 = v96;
    v42[5] = v95;
    v42[6] = v48;
    long long v49 = v92;
    v42[1] = v91;
    v42[2] = v49;
    long long v75 = v89;
    long long v76 = v90[0];
    *(void *)&long long v77 = *(void *)&v90[1];
    long long v71 = v85;
    long long v72 = v86;
    long long v73 = v87;
    long long v74 = v88;
    long long v69 = v83;
    long long v70 = v84;
    sub_2330113C4((uint64_t *)&v91);
    sub_232F63500(&v60, &v69, 0);
    sub_232F63238((uint64_t)&v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  }
}

void sub_233011334(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t sub_233011340()
{
  return sub_23309B020();
}

uint64_t sub_23301134C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_232E9A9F4(v1, *(void *)(v0 + 216));
  return v1;
}

uint64_t sub_233011390()
{
  return SignedClinicalDataEUDCC.signatureMessage()();
}

void sub_2330113AC(HealthRecordsExtraction::VCJWKSet a1)
{
}

uint64_t *sub_2330113C4(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  unint64_t v7 = a1[27];
  uint64_t v8 = a1[26];
  sub_232E9A9F4(*a1, a1[1]);
  sub_232E9A9F4(v2, v3);
  sub_232E9A9F4(v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_232E9A9F4(v8, v7);
  return a1;
}

uint64_t *sub_2330114BC(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  unint64_t v7 = a1[27];
  uint64_t v8 = a1[26];
  sub_232E9AA4C(*a1, a1[1]);
  sub_232E9AA4C(v2, v3);
  sub_232E9AA4C(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E9AA4C(v8, v7);
  return a1;
}

uint64_t sub_2330115B8()
{
  sub_232E9AA4C(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_232E9AA4C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_232E9AA4C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E9AA4C(*(void *)(v0 + 224), *(void *)(v0 + 232));
  return MEMORY[0x270FA0238](v0, 240, 7);
}

unint64_t SignedClinicalDataQRError.errorDescription.getter()
{
  sub_23301190C(v0, (uint64_t)&v9);
  switch(v13)
  {
    case 1:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0x100000000000001BLL;
      unint64_t v7 = 0x80000002330B6280;
      sub_23309C1E0();
      goto LABEL_4;
    case 2:
      sub_232F3FDD0(&v9, (uint64_t)&v6);
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001FLL;
      goto LABEL_7;
    case 3:
      sub_232F3FDD0(&v9, (uint64_t)&v6);
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001BLL;
LABEL_7:
      unint64_t v5 = v2;
      __swift_project_boxed_opaque_existential_1(&v6, v8);
      sub_23309C370();
      sub_23309B880();
      swift_bridgeObjectRelease();
      unint64_t v1 = v5;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
      break;
    case 4:
      unint64_t v1 = 0xD000000000000019;
      if (v11 | v12 | (unint64_t)v9 | v10 | *((void *)&v9 + 1))
      {
        uint64_t v3 = v11 | v12 | v10 | *((void *)&v9 + 1);
        if ((void)v9 != 1 || v3)
        {
          if ((void)v9 == 2 && v3 == 0) {
            unint64_t v1 = 0xD000000000000023;
          }
          else {
            unint64_t v1 = 0xD00000000000002DLL;
          }
        }
      }
      else
      {
        unint64_t v1 = 0xD000000000000030;
      }
      break;
    default:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      uint64_t v6 = 0x1000000000000019;
      unint64_t v7 = 0x80000002330B62C0;
LABEL_4:
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      unint64_t v1 = v6;
      break;
  }
  return v1;
}

uint64_t sub_23301190C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for SignedClinicalDataQRError(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)result + 4;
  }
  if (v1 == 3 || v1 == 2) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (!v1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SignedClinicalDataQRError(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 4) {
    unsigned int v3 = *(_DWORD *)a2 + 4;
  }
  switch(v3)
  {
    case 0u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(unsigned char *)(a1 + 40) = 0;
      swift_bridgeObjectRetain();
      return a1;
    case 1u:
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
      goto LABEL_9;
    case 2u:
      long long v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      char v6 = 2;
      goto LABEL_9;
    case 3u:
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      char v6 = 3;
LABEL_9:
      *(unsigned char *)(a1 + 40) = v6;
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataQRError(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4 == 3 || v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(unsigned char *)(a1 + 40) = 0;
        swift_bridgeObjectRetain();
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        char v8 = 1;
        goto LABEL_17;
      case 2u:
        uint64_t v9 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
        char v8 = 2;
        goto LABEL_17;
      case 3u:
        uint64_t v10 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v10 - 8))(a1, a2);
        char v8 = 3;
LABEL_17:
        *(unsigned char *)(a1 + 40) = v8;
        break;
      default:
        long long v6 = *a2;
        long long v7 = a2[1];
        *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)a1 = v6;
        *(_OWORD *)(a1 + 16) = v7;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for SignedClinicalDataQRError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (v4 == 3 || v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(void *)a1 = *(void *)a2;
        char v7 = 1;
        goto LABEL_17;
      case 2u:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v7 = 2;
        goto LABEL_17;
      case 3u:
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v7 = 3;
LABEL_17:
        *(unsigned char *)(a1 + 40) = v7;
        break;
      default:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataQRError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataQRError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_233011DE4(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t sub_233011E00(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataQRError()
{
  return &type metadata for SignedClinicalDataQRError;
}

uint64_t sub_233011E38@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v4 = sub_23309AED0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_23309AF80();
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  os_log_type_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v30 - v15;
  sub_23309AF40();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(a2, v2, v11);
    id v19 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56);
    return v19((uint64_t)a2, 0, 1, v11);
  }
  else
  {
    sub_232F41E94(v39, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v11) == 1)
    {
      sub_232F571C0((uint64_t)v10);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(a2, 1, 1, v11);
    }
    else
    {
      long long v36 = v14;
      uint64_t v37 = v4;
      long long v30 = a2;
      long long v38 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
      uint64_t v39 = v40 + 32;
      v38(v16, v10, v11);
      uint64_t v31 = sub_23309AEF0();
      uint64_t v21 = *(void *)(v31 + 16);
      if (v21)
      {
        unsigned int v35 = *MEMORY[0x263F06E50];
        uint64_t v33 = (void (**)(char *, uint64_t))(v5 + 8);
        BOOL v34 = (void (**)(char *, void, uint64_t))(v5 + 104);
        uint64_t v22 = (void (**)(char *, uint64_t))(v40 + 8);
        uint64_t v23 = (uint64_t *)(v31 + 40);
        long long v32 = xmmword_2330A1880;
        uint64_t v24 = v36;
        do
        {
          uint64_t v26 = *(v23 - 1);
          uint64_t v25 = *v23;
          swift_bridgeObjectRetain();
          if (sub_23301259C())
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_233012A68();
            uint64_t v27 = swift_allocObject();
            *(_OWORD *)(v27 + 16) = v32;
            *(void *)(v27 + 32) = v26;
            *(void *)(v27 + 40) = v25;
            uint64_t v28 = v37;
            (*v34)(v7, v35, v37);
            sub_232F379FC();
            sub_23309AF60();
            swift_bridgeObjectRelease();
            (*v33)(v7, v28);
            (*v22)(v16, v11);
            v38(v16, v24, v11);
          }
          v23 += 2;
          --v21;
        }
        while (v21);
      }
      swift_bridgeObjectRelease();
      long long v29 = v30;
      v38(v30, v16, v11);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v29, 0, 1, v11);
    }
  }
}

uint64_t sub_233012274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v4 = sub_23309AED0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v23 - v16;
  sub_232F41E94(a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_232F571C0((uint64_t)v10);
    char v18 = 0;
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v23(v17, v10, v11);
    uint64_t v28 = v24;
    uint64_t v29 = v25;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F06E50], v4);
    sub_232F379FC();
    sub_23309AF70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v19 = *(void (**)(char *, uint64_t))(v12 + 8);
    v19(v17, v11);
    v23(v17, v15, v11);
    uint64_t v28 = sub_23309AEE0();
    uint64_t v29 = v20;
    uint64_t v26 = sub_23309AEE0();
    uint64_t v27 = v21;
    sub_2330129C0();
    sub_233012A14();
    char v18 = sub_23309B6B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19(v17, v11);
  }
  return v18 & 1;
}

uint64_t sub_23301259C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_23309B890();
  uint64_t v2 = v1;
  uint64_t v3 = sub_23309B890();
  uint64_t v5 = v4;
  if (v2)
  {
    uint64_t v6 = v3;
    do
    {
      if (!v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      if (v0 == v6 && v2 == v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v7 = sub_23309C220();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }
      uint64_t v0 = sub_23309B890();
      uint64_t v2 = v8;
      uint64_t v6 = sub_23309B890();
      uint64_t v5 = v9;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v5) {
    return 1;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t URL.init(stringLiteral:)@<X0>(uint64_t a1@<X8>)
{
  sub_232F41D18();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309AF50();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  __break(1u);
  return result;
}

uint64_t sub_23301280C()
{
  return sub_233012878(&qword_2687583E0);
}

uint64_t sub_233012844()
{
  return sub_233012878(&qword_2687583E8);
}

uint64_t sub_233012878(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23309AF80();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2330128BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_232F41D18();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309AF50();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, a1);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v6, a1);
  }
  __break(1u);
  return result;
}

unint64_t sub_2330129C0()
{
  unint64_t result = qword_2687583F0;
  if (!qword_2687583F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687583F0);
  }
  return result;
}

unint64_t sub_233012A14()
{
  unint64_t result = qword_2687583F8;
  if (!qword_2687583F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687583F8);
  }
  return result;
}

void sub_233012A68()
{
  if (!qword_268757058)
  {
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, &qword_268757058);
    }
  }
}

void **sub_233012AC0(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    uint64_t v8 = (char *)v6 + v7;
    long long v38 = a2;
    uint64_t v9 = (char *)a2 + v7;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)((char *)a2 + v7);
    *((void *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
    uint64_t v10 = (int *)type metadata accessor for ExtractionContext();
    uint64_t v11 = v10[7];
    uint64_t v12 = &v8[v11];
    uint64_t v13 = &v9[v11];
    uint64_t v14 = sub_23309B190();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    uint64_t v16 = v4;
    v15(v12, v13, v14);
    uint64_t v17 = v10[8];
    char v18 = &v8[v17];
    id v19 = &v9[v17];
    uint64_t v20 = sub_23309AF80();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_232F41D18();
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = v10[9];
    uint64_t v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
    *(void *)&v8[v10[11]] = *(void *)&v9[v10[11]];
    uint64_t v27 = a3[5];
    uint64_t v28 = a3[6];
    uint64_t v29 = *(void **)((char *)a2 + v27);
    *(void **)((char *)v6 + v27) = v29;
    long long v30 = *(void **)((char *)v38 + v28);
    *(void **)((char *)v6 + v28) = v30;
    uint64_t v31 = a3[7];
    long long v32 = *(void **)((char *)v38 + v31);
    *(void **)((char *)v6 + v31) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v33 = v29;
    id v34 = v30;
    id v35 = v32;
  }
  return v6;
}

void sub_233012D30(id *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v5 = type metadata accessor for ExtractionContext();
  uint64_t v6 = &v4[*(int *)(v5 + 28)];
  uint64_t v7 = sub_23309B190();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = &v4[*(int *)(v5 + 32)];
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v11 = *(id *)((char *)a1 + a2[7]);
}

void **sub_233012EA4(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v37 = a2;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  id v15 = v5;
  v14(v11, v12, v13);
  uint64_t v16 = v9[8];
  uint64_t v17 = &v7[v16];
  char v18 = &v8[v16];
  uint64_t v19 = sub_23309AF80();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_232F41D18();
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = v9[9];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v26 = a3[5];
  uint64_t v27 = a3[6];
  uint64_t v28 = *(void **)((char *)a2 + v26);
  *(void **)((char *)a1 + v26) = v28;
  uint64_t v29 = *(void **)((char *)v37 + v27);
  *(void **)((char *)a1 + v27) = v29;
  uint64_t v30 = a3[7];
  uint64_t v31 = *(void **)((char *)v37 + v30);
  *(void **)((char *)a1 + v30) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v32 = v28;
  id v33 = v29;
  id v34 = v31;
  return a1;
}

void **sub_2330130C8(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  id v7 = v5;

  uint64_t v8 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v9 = (void **)((char *)a1 + v8);
  long long v45 = a2;
  uint64_t v10 = (char *)a2 + v8;
  *uint64_t v9 = *(void **)((char *)a2 + v8);
  v9[1] = *(void **)((char *)a2 + v8 + 8);
  v9[2] = *(void **)((char *)a2 + v8 + 16);
  uint64_t v11 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v12 = v11[7];
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[8];
  uint64_t v17 = (char *)v9 + v16;
  char v18 = &v10[v16];
  uint64_t v19 = sub_23309AF80();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  long long v43 = v17;
  LODWORD(v17) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (v17)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 16))(v43, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v43, 0, 1, v19);
      goto LABEL_9;
    }
    sub_232F41D18();
    size_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
    uint64_t v25 = v43;
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 24))(v43, v18, v19);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v43, v19);
    sub_232F41D18();
    size_t v24 = *(void *)(*(void *)(v26 - 8) + 64);
    uint64_t v25 = v43;
  }
  memcpy(v25, v18, v24);
LABEL_9:
  uint64_t v27 = v11[9];
  uint64_t v28 = (void *)((char *)v9 + v27);
  uint64_t v29 = &v10[v27];
  *uint64_t v28 = *(void *)v29;
  v28[1] = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v9 + v11[10]) = *(void *)&v10[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v9 + v11[11]) = *(void *)&v10[v11[11]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[5];
  uint64_t v31 = *(void **)((char *)v45 + v30);
  id v32 = *(void **)((char *)a1 + v30);
  *(void **)((char *)a1 + v30) = v31;
  id v33 = v31;

  uint64_t v34 = a3[6];
  id v35 = *(void **)((char *)a1 + v34);
  long long v36 = *(void **)((char *)v45 + v34);
  *(void **)((char *)a1 + v34) = v36;
  id v37 = v36;

  uint64_t v38 = a3[7];
  uint64_t v39 = *(void **)((char *)v45 + v38);
  uint64_t v40 = *(void **)((char *)a1 + v38);
  *(void **)((char *)a1 + v38) = v39;
  id v41 = v39;

  return a1;
}

void *sub_2330133C0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)id v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void *)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_232F41D18();
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v20 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void **sub_2330135A4(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;

  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  id v7 = (char *)a1 + v6;
  uint64_t v39 = a2;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)id v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  id v37 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v15)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v37, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v37, 0, 1, v17);
      goto LABEL_9;
    }
    sub_232F41D18();
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = v37;
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v37, v16, v17);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v17);
    sub_232F41D18();
    size_t v22 = *(void *)(*(void *)(v24 - 8) + 64);
    uint64_t v23 = v37;
  }
  memcpy(v23, v16, v22);
LABEL_9:
  uint64_t v25 = v9[9];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  swift_release();
  uint64_t v30 = a3[5];
  uint64_t v31 = *(void **)((char *)a1 + v30);
  *(void **)((char *)a1 + v30) = *(void **)((char *)v39 + v30);

  uint64_t v32 = a3[6];
  id v33 = *(void **)((char *)a1 + v32);
  *(void **)((char *)a1 + v32) = *(void **)((char *)v39 + v32);

  uint64_t v34 = a3[7];
  id v35 = *(void **)((char *)a1 + v34);
  *(void **)((char *)a1 + v34) = *(void **)((char *)v39 + v34);

  return a1;
}

uint64_t sub_233013864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233013878);
}

uint64_t sub_233013878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RecordExtractionContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_233013938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23301394C);
}

uint64_t sub_23301394C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RecordExtractionContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for PostExtractionContext()
{
  uint64_t result = qword_268758400;
  if (!qword_268758400) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_233013A54()
{
  uint64_t result = type metadata accessor for RecordExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_233013AF8(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  sub_2330162B8(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  *(void *)(v2 + 96) = swift_task_alloc();
  *(void *)(v2 + 104) = type metadata accessor for RecordExtractionContext();
  *(void *)(v2 + 112) = swift_task_alloc();
  sub_23309AD60();
  *(void *)(v2 + 120) = swift_task_alloc();
  *(void *)(v2 + 128) = type metadata accessor for FHIRDateTime();
  *(void *)(v2 + 136) = swift_task_alloc();
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 160) = *(void *)(v1 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 88);
  *(void *)(v2 + 184) = *(void *)(v1 + 104);
  return MEMORY[0x270FA2498](sub_233013C64, 0, 0);
}

uint64_t sub_233013C64()
{
  uint64_t v1 = v0[17];
  id v2 = objc_msgSend(self, sel_FHIRImmunizationStatus);
  v0[24] = v2;
  uint64_t v3 = sub_23309B710();
  v0[2] = v2;
  v0[25] = v4;
  v0[3] = 0x6574656C706D6F63;
  v0[4] = 0xE900000000000064;
  v0[5] = v3;
  v0[6] = v4;
  v0[7] = 0;
  v0[8] = 0;
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  uint64_t v5 = v0[17];
  if (*(void *)(v5 + 56) == 1)
  {
    if (*(unsigned char *)(v5 + 19))
    {
      if (*(unsigned char *)(v5 + 17)) {
        uint64_t v6 = 3;
      }
      else {
        uint64_t v6 = 2;
      }
    }
    else
    {
      uint64_t v6 = 1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[16];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v9 = (uint64_t *)(v5 + *(int *)(v8 + 32));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  v0[26] = sub_233017340(v7, v10, v11, v6);
  sub_233016258(v5, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v13 = v0[13];
  uint64_t v12 = v0[14];
  uint64_t v15 = v0[11];
  uint64_t v14 = v0[12];
  v0[27] = sub_232F3A800(0, &qword_2687582B0);
  sub_2330161B4(v15, v12, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v16 = sub_23309B230();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
  uint64_t v17 = v15 + *(int *)(v13 + 20);
  v0[28] = *(void *)(v17 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  uint64_t v18 = *(void *)(v17 + 16);
  swift_retain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[29] = v19;
  void *v19 = v0;
  v19[1] = sub_233013FAC;
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[22];
  return sub_232FE0168(5, v20, v21, 0, 0, v18);
}

uint64_t sub_233013FAC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x270FA2498](sub_2330140CC, 0, 0);
}

uint64_t sub_2330140CC()
{
  uint64_t v1 = (void *)v0[30];
  id v2 = (void *)v0[26];
  uint64_t v3 = v0[23];
  uint64_t v17 = (void *)v0[24];
  uint64_t v4 = v0[18];
  uint64_t v5 = (uint64_t *)v0[14];
  uint64_t v16 = v0[12];
  id v6 = objc_msgSend(v1, sel_codings);

  sub_232F3A800(0, (unint64_t *)&qword_268757138);
  uint64_t v7 = sub_23309B9A0();

  v0[9] = v4;
  uint64_t v8 = sub_23309C1E0();
  uint64_t v10 = v9;
  v0[10] = v3;
  uint64_t v11 = sub_23309C1E0();
  id v13 = sub_232F691A0(v5, v16, 0, 0, v7, (uint64_t)v2, 0, v0 + 2, v8, v10, v11, v12, 0, 0, 0, 0, 0, 0, 0,
          0,
          0,
          0,
          0,
          0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(id))v0[1];
  return v14(v13);
}

uint64_t sub_2330142A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 272) = a1;
  *(void *)(v3 + 280) = a2;
  *(void *)(v3 + 288) = type metadata accessor for FHIRExtractionContext();
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = type metadata accessor for ModelsR4.Immunization(0);
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  *(void *)(v3 + 320) = v4;
  *(void *)(v3 + 328) = v5;
  *(void *)(v3 + 336) = v6;
  long long v7 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(v3 + 112) = v7;
  long long v8 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(v3 + 128) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(v3 + 144) = v8;
  long long v9 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v3 + 32) = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v3 + 48) = v9;
  long long v10 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(v3 + 64) = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v3 + 80) = v10;
  return MEMORY[0x270FA2498](sub_23301439C, 0, 0);
}

uint64_t sub_23301439C()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[34];
  v0[2] = v0[41];
  v0[3] = v1;
  uint64_t v3 = v2 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v4 = *(void *)(v3 + *(int *)(type metadata accessor for ExtractionContext() + 44));
  v0[43] = v4;
  uint64_t v5 = *(void *)(v3 + 16);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[44] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_233014488;
  uint64_t v7 = v0[39];
  return sub_2330151C8(v7, v4, v5);
}

uint64_t sub_233014488()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_233014EF4;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_2330145A4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2330145A4()
{
  uint64_t v51 = v0;
  uint64_t v1 = (void *)v0[45];
  sub_233016020(v0[39], v0[40]);
  sub_23309ABA0();
  swift_allocObject();
  sub_23309AB90();
  sub_233016084();
  uint64_t v2 = sub_23309AB80();
  if (!v1)
  {
    uint64_t v17 = v2;
    unint64_t v18 = v3;
    uint64_t v19 = (void *)v0[35];
    swift_release();
    sub_232E9A9F4(v17, v18);
    uint64_t v20 = (void *)sub_232FE782C(v19);
    uint64_t v45 = v0[42];
    unint64_t v48 = v18;
    uint64_t v49 = v0[41];
    uint64_t v21 = v17;
    size_t v22 = (uint64_t *)v0[40];
    uint64_t v23 = (int *)v0[36];
    uint64_t v24 = v0[37];
    uint64_t v25 = v0[34];
    unint64_t v46 = sub_233020734(v26);
    swift_bridgeObjectRelease();
    id v27 = v20;
    uint64_t v47 = sub_233086410();
    uint64_t v29 = v28;
    sub_2330161B4(v25, v24, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    uint64_t v30 = *v22;
    uint64_t v31 = v22[1];
    uint64_t v32 = v21;
    id v33 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v34 = objc_msgSend(v33, sel_primaryR4Version);
    id v35 = (void *)(v24 + v23[5]);
    *id v35 = v30;
    v35[1] = v31;
    long long v36 = (void *)(v24 + v23[6]);
    *long long v36 = v49;
    v36[1] = v45;
    *(void *)(v24 + v23[7]) = v34;
    uint64_t v37 = v23[8];
    uint64_t v38 = v27;
    uint64_t v39 = (uint64_t *)(v24 + v37);
    *uint64_t v39 = v21;
    v39[1] = v48;
    id v40 = sub_23300549C(v24, v27, v46, v47, v29);
    uint64_t v41 = v0[40];
    uint64_t v42 = v0[37];

    sub_232E9AA4C(v32, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_233016258(v42, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
    sub_233016258(v41, type metadata accessor for ModelsR4.Immunization);
    goto LABEL_11;
  }
  swift_release();
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_23309B4B0();
  __swift_project_value_buffer(v4, (uint64_t)qword_268770F68);
  id v5 = v1;
  id v6 = v1;
  uint64_t v7 = sub_23309B4A0();
  os_log_type_t v8 = sub_23309BB80();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v50 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[32] = v1;
    id v11 = v1;
    id v12 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v13 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v14 = sub_23309B770();
    unint64_t v16 = v15;

    v0[28] = sub_232F62B64(v14, v16, &v50);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v7, v8, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v10, -1, -1);
    MEMORY[0x237DB6EC0](v9, -1, -1);

    if (!v0[45]) {
      goto LABEL_9;
    }
  }
  else
  {

    if (!v0[45]) {
LABEL_9:
    }
      sub_233016258(v0[40], type metadata accessor for ModelsR4.Immunization);
  }
  id v40 = 0;
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v43 = (uint64_t (*)(id))v0[1];
  return v43(v40);
}

uint64_t sub_233014EF4()
{
  unint64_t v18 = v0;
  swift_release();
  uint64_t v1 = (void *)v0[45];
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_23309B4B0();
  __swift_project_value_buffer(v2, (uint64_t)qword_268770F68);
  id v3 = v1;
  id v4 = v1;
  id v5 = sub_23309B4A0();
  os_log_type_t v6 = sub_23309BB80();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[32] = v1;
    id v9 = v1;
    id v10 = v1;
    sub_232F3DAA0();
    sub_23309C320();
    id v11 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_23309BDB0();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_23309B770();
    unint64_t v14 = v13;

    v0[28] = sub_232F62B64(v12, v14, &v17);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v5, v6, "SignedClinicalDataEUDCC.asClinicalRecord: error building Immunization. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v8, -1, -1);
    MEMORY[0x237DB6EC0](v7, -1, -1);

    if (v0[45]) {
      goto LABEL_8;
    }
  }
  else
  {

    if (v0[45]) {
      goto LABEL_8;
    }
  }
  sub_233016258(v0[40], type metadata accessor for ModelsR4.Immunization);
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_2330151C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 80) = a2;
  *(void *)(v4 + 88) = a3;
  *(void *)(v4 + 72) = a1;
  id v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2330162B8(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  *(void *)(v4 + 96) = swift_task_alloc();
  sub_2330162B8(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  *(void *)(v4 + 104) = swift_task_alloc();
  *(void *)(v4 + 112) = swift_task_alloc();
  sub_2330162B8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v5);
  *(void *)(v4 + 120) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Identifier();
  *(void *)(v4 + 128) = v6;
  *(void *)(v4 + 136) = *(void *)(v6 - 8);
  *(void *)(v4 + 144) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Reference();
  *(void *)(v4 + 152) = v7;
  *(void *)(v4 + 160) = *(void *)(v7 - 8);
  *(void *)(v4 + 168) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  *(void *)(v4 + 176) = v8;
  *(void *)(v4 + 184) = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  *(void *)(v4 + 192) = v9;
  *(void *)(v4 + 200) = v10;
  *(void *)(v4 + 208) = v11;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(v3 + 32);
  uint64_t v12 = *(void *)(v3 + 72);
  *(void *)(v4 + 232) = *(void *)(v3 + 48);
  *(void *)(v4 + 240) = v12;
  *(_OWORD *)(v4 + 248) = *(_OWORD *)(v3 + 80);
  *(void *)(v4 + 264) = *(void *)(v3 + 96);
  *(_OWORD *)(v4 + 272) = *(_OWORD *)(v3 + 104);
  *(void *)(v4 + 288) = *(void *)(v3 + 120);
  return MEMORY[0x270FA2498](sub_233015490, 0, 0);
}

uint64_t sub_233015490()
{
  uint64_t v1 = v0[24];
  swift_bridgeObjectRetain();
  FHIRDateTime.init(_:)(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[37] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_233015604;
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[11];
  return sub_232FE1994((uint64_t)(v0 + 2), 5, v3, v4, 0, 0, v5);
}

uint64_t sub_233015604()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233015700, 0, 0);
}

uint64_t sub_233015700()
{
  *(_OWORD *)(v0 + 304) = *(_OWORD *)(v0 + 16);
  *(void *)(v0 + 320) = *(void *)(v0 + 32);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_2330157B0;
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 88);
  return sub_232FE2518(v4, 4, v2, v3, v5);
}

uint64_t sub_2330157B0()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[42] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_233015944;
  uint64_t v4 = v1[36];
  uint64_t v5 = v1[35];
  uint64_t v6 = v1[11];
  return sub_232FE1994((uint64_t)(v1 + 5), 0, v5, v4, 0, 0, v6);
}

uint64_t sub_233015944()
{
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233015A40, 0, 0);
}

uint64_t sub_233015A40()
{
  uint64_t v38 = *(void *)(v0 + 320);
  long long v37 = *(_OWORD *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v32 = *(void *)(v0 + 216);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v28 = *(void *)(v0 + 192);
  uint64_t v29 = *(void *)(v0 + 176);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v34 = *(void *)(v0 + 160);
  uint64_t v35 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v43 = *(void *)(v0 + 120);
  uint64_t v39 = *(void *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 104);
  uint64_t v41 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 72);
  long long v31 = *(_OWORD *)(v0 + 40);
  uint64_t v30 = *(void *)(v0 + 56);
  sub_23309B710();
  sub_23309AF50();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = xmmword_2330A4FC0;
  uint64_t v8 = (void *)(v4 + *(int *)(v6 + 28));
  *uint64_t v8 = v2;
  v8[1] = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8E0F8];
  sub_2330162B8(0, &qword_2687570A0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8E0F8]);
  uint64_t v10 = (int *)(type metadata accessor for Coding() - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_2330A1880;
  uint64_t v12 = v36 + v11;
  swift_bridgeObjectRetain();
  sub_23309AF50();
  sub_2330160DC(v43, v12, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  *(_OWORD *)(v12 + v10[7]) = xmmword_2330A7220;
  *(_OWORD *)(v12 + v10[8]) = xmmword_2330A7230;
  unint64_t v13 = (void *)(v12 + v10[9]);
  sub_2330162B8(0, &qword_268758420, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v9);
  *unint64_t v13 = 0;
  v13[1] = 0;
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2330A1880;
  sub_2330161B4(v4, v27 + v14, (uint64_t (*)(void))type metadata accessor for Identifier);
  sub_2330161B4(v28, v39, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  unint64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
  v15(v39, 0, 1, v29);
  sub_23301615C();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2330A1880;
  *(void *)(v16 + 32) = v32;
  *(unsigned char *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 0;
  *(void *)(v16 + 56) = 0;
  *(void *)(v16 + 64) = v33;
  *(unsigned char *)(v16 + 72) = 0;
  *(void *)(v16 + 80) = 0;
  *(void *)(v16 + 88) = 0;
  *(_OWORD *)(v16 + 96) = v31;
  *(void *)(v16 + 112) = v30;
  sub_2330161B4(v28, v40, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  v15(v40, 0, 1, v29);
  sub_2330161B4(v42, v41, (uint64_t (*)(void))type metadata accessor for Reference);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v41, 0, 1, v35);
  uint64_t v17 = (int *)type metadata accessor for ModelsR4.Immunization(0);
  *(void *)(v0 + 64) = v17;
  sub_23301621C();
  uint64_t v18 = sub_23309B770();
  uint64_t v20 = v19;
  sub_233016258(v4, (uint64_t (*)(void))type metadata accessor for Identifier);
  sub_233016258(v42, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_233016258(v28, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  *(void *)uint64_t v7 = v18;
  *(void *)(v7 + 8) = v20;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 32) = xmmword_2330A7240;
  *(void *)(v7 + 48) = 0xE900000000000064;
  *(void *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 64) = 0;
  *(unsigned char *)(v7 + 68) = 1;
  *(void *)(v7 + 72) = 0;
  sub_2330160DC(v39, v7 + v17[10], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  *(void *)(v7 + v17[11]) = v16;
  sub_2330160DC(v40, v7 + v17[12], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v21 = v7 + v17[13];
  *(_OWORD *)uint64_t v21 = v37;
  *(void *)(v21 + 16) = v38;
  sub_2330160DC(v41, v7 + v17[14], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  *(unsigned char *)(v7 + v17[15]) = 1;
  size_t v22 = (void *)(v7 + v17[16]);
  *size_t v22 = 0;
  v22[1] = 0;
  *(void *)(v7 + v17[17]) = 0;
  *(unsigned char *)(v7 + v17[18]) = 2;
  uint64_t v23 = (uint64_t *)(v7 + v17[19]);
  *uint64_t v23 = v27;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v36;
  v23[5] = 0;
  v23[6] = 0;
  v23[4] = 0;
  uint64_t v24 = (void *)(v7 + v17[20]);
  *uint64_t v24 = 0;
  v24[1] = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_233016020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.Immunization(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_233016084()
{
  unint64_t result = qword_268756C78;
  if (!qword_268756C78)
  {
    type metadata accessor for ModelsR4.Immunization(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756C78);
  }
  return result;
}

uint64_t sub_2330160DC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_2330162B8(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_23301615C()
{
  if (!qword_268758428)
  {
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, &qword_268758428);
    }
  }
}

uint64_t sub_2330161B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_23301621C()
{
  unint64_t result = qword_268756840;
  if (!qword_268756840)
  {
    type metadata accessor for ModelsR4.Immunization(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268756840);
  }
  return result;
}

uint64_t sub_233016258(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_2330162B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

id static HKSignedClinicalDataSubject.unknown()()
{
  return sub_23301637C(0xD000000000000010, 0x80000002330B6360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

id sub_23301637C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  long long v37 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  if (a5)
  {
    uint64_t v36 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    if (a6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v36 = 0;
    if (a6)
    {
LABEL_3:
      uint64_t v35 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
      if (a7) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  uint64_t v35 = 0;
  if (a7)
  {
LABEL_4:
    uint64_t v34 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    uint64_t v21 = a9;
    if (a8) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v34 = 0;
  uint64_t v21 = a9;
  if (a8)
  {
LABEL_5:
    sub_232F51B70();
    uint64_t v33 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    uint64_t v22 = a11;
    if (v21) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v33 = 0;
  uint64_t v22 = a11;
  if (v21)
  {
LABEL_6:
    uint64_t v23 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    uint64_t v24 = a13;
    if (v22) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v23 = 0;
  uint64_t v24 = a13;
  if (v22)
  {
LABEL_7:
    uint64_t v25 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v26 = a15;
    if (v24) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v25 = 0;
  uint64_t v26 = a15;
  if (v24)
  {
LABEL_8:
    uint64_t v27 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v28 = a17;
    if (v26) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t v29 = 0;
    if (v28) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v30 = 0;
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v27 = 0;
  uint64_t v28 = a17;
  if (!v26) {
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v29 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v30 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
LABEL_20:
  id v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_subjectWithFullName_birthDate_gender_emailAddresses_phoneNumbers_identifiers_addresses_maritalStatus_race_ethnicity_birthSex_, v37, a3, v36, v35, v34, v33, v23, v25, v27, v29, v30);

  return v31;
}

id FHIRDateTime.asMedicalDate()()
{
  uint64_t v1 = sub_23309AD60();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = 0;
  if (*(void *)(v0 + 56) == 1)
  {
    if (*(unsigned char *)(v0 + 19) == 1)
    {
      if (*(unsigned char *)(v0 + 17)) {
        uint64_t v4 = 3;
      }
      else {
        uint64_t v4 = 2;
      }
    }
    else
    {
      uint64_t v4 = 1;
    }
  }
  sub_2330166F8();
  FHIRDateTime.asDateComponents()();
  uint64_t v5 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FHIRDateTime() + 32));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_bridgeObjectRetain();
  return sub_233017340((uint64_t)v3, v7, v6, v4);
}

unint64_t sub_2330166F8()
{
  unint64_t result = qword_2687576C8;
  if (!qword_2687576C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687576C8);
  }
  return result;
}

uint64_t FHIRDateTime.asNSDate()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v48 = a1;
  sub_233017824(0, &qword_268757C70, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v45 = (char *)&v39 - v4;
  sub_233017824(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  unint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v39 - v9;
  sub_233017824(0, &qword_268758438, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = sub_23309AD60();
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v41 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_23309B240();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_23309B290();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F07740], v15);
  sub_23309B250();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v42 = v22;
  v23(v12, v22, v19);
  uint64_t v43 = v20;
  uint64_t v44 = v19;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v12, 0, 1, v19);
  uint64_t v24 = type metadata accessor for FHIRDateTime();
  sub_233017878(v2 + *(int *)(v24 + 28), (uint64_t)v8);
  uint64_t v25 = sub_23309B300();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v25) == 1)
  {
    sub_23309B2A0();
    sub_2330178F8((uint64_t)v8, &qword_268756590, MEMORY[0x263F079C8]);
  }
  else
  {
    uint64_t v27 = v40;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v40, v8, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
  }
  uint64_t v28 = v41;
  sub_23309AD50();
  uint64_t v29 = v48;
  uint64_t v30 = (uint64_t)v45;
  if ((*(unsigned char *)(v2 + 17) & 1) == 0) {
    sub_23309AD30();
  }
  if ((*(unsigned char *)(v2 + 19) & 1) == 0) {
    sub_23309AD00();
  }
  uint64_t v31 = *(void *)(v2 + 56);
  if (v31 != 1)
  {
    sub_23309AD20();
    sub_23309AD40();
  }
  sub_23309AD10();
  uint64_t v32 = sub_23309B190();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v30, 1, v32) == 1)
  {
    sub_2330178F8(v30, &qword_268757C70, MEMORY[0x263F07490]);
    type metadata accessor for DateExpressionError();
    sub_2330179A0();
    swift_allocError();
    uint64_t v35 = v46;
    uint64_t v34 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v36, v28, v47);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v29, v30, v32);
    if (v31 != 1)
    {
      uint64_t v38 = (void *)sub_23309BC60();
      sub_23309BAF0();

      sub_23309B0C0();
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
  }
}

id FHIRDate.asMedicalDate()()
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v1 = sub_23309AD60();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = *(unsigned char *)(v0 + 8);
  char v6 = *(unsigned char *)(v0 + 9);
  char v7 = *(unsigned char *)(v0 + 10);
  char v8 = *(unsigned char *)(v0 + 11);
  uint64_t v9 = 2;
  if (v6) {
    uint64_t v9 = 3;
  }
  if (*(unsigned char *)(v0 + 11)) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 1;
  }
  id v19 = *(id *)v0;
  char v20 = v5;
  char v21 = v6;
  char v22 = v7;
  char v23 = v8;
  FHIRDate.asDateComponents()((uint64_t)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (void *)sub_23309ACF0();
  uint64_t v12 = self;
  id v19 = 0;
  id v13 = objc_msgSend(v12, sel_medicalDateFromComponents_originalTimeZoneString_form_error_, v11, 0, v10, &v19);

  if (v13)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t))(v2 + 8);
    id v15 = v19;
    v14(v4, v1);
  }
  else
  {
    id v16 = v19;
    sub_23309AEC0();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v13;
}

uint64_t FHIRDate.asDateComponents()@<X0>(uint64_t a1@<X8>)
{
  v14[1] = a1;
  sub_233017824(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v14 - v2;
  uint64_t v4 = sub_23309B240();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233017824(0, &qword_268758438, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F07740], v4);
  sub_23309B250();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = sub_23309B290();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  uint64_t v12 = sub_23309B300();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
  return sub_23309AD50();
}

id sub_233017340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *(id *)MEMORY[0x263EF8340];
  char v7 = (void *)sub_23309ACF0();
  if (a3)
  {
    uint64_t v8 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  v17[0] = 0;
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicalDateFromComponents_originalTimeZoneString_form_error_, v7, v8, a4, v17);

  id v10 = v17[0];
  if (v9)
  {
    uint64_t v11 = sub_23309AD60();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    id v13 = v10;
    v12(a1, v11);
  }
  else
  {
    id v14 = v17[0];
    sub_23309AEC0();

    swift_willThrow();
    uint64_t v15 = sub_23309AD60();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  }
  return v9;
}

uint64_t FHIRDateTime.asDateComponents()()
{
  sub_233017824(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v14 - v2;
  uint64_t v4 = sub_23309B240();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233017824(0, &qword_268758438, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v8 - 8);
  id v10 = (char *)&v14 - v9;
  if (*(void *)(v0 + 56) != 1) {
    sub_2330179F8();
  }
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F07740], v4);
  sub_23309B250();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = sub_23309B290();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  uint64_t v12 = sub_23309B300();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
  return sub_23309AD50();
}

void sub_233017824(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_233017878(uint64_t a1, uint64_t a2)
{
  sub_233017824(0, &qword_268756590, MEMORY[0x263F079C8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2330178F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233017824(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t type metadata accessor for DateExpressionError()
{
  uint64_t result = qword_268758450;
  if (!qword_268758450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_2330179A0()
{
  unint64_t result = qword_268758440;
  if (!qword_268758440)
  {
    type metadata accessor for DateExpressionError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758440);
  }
  return result;
}

void sub_2330179F8()
{
  uint64_t v0 = (void *)sub_23309BC60();
  id v1 = objc_msgSend(v0, sel_integerValue);
  objc_msgSend(v0, sel_doubleValue);
  double v3 = v2;

  double v4 = (v3 - (double)(uint64_t)v1) * 1000000000.0;
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 >= 9.22337204e18) {
LABEL_7:
  }
    __break(1u);
}

uint64_t FHIRDateTime.compare(_:)()
{
  uint64_t v2 = sub_23309B190();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v12 - v7;
  FHIRDateTime.asNSDate()((uint64_t)v12 - v7);
  if (!v1)
  {
    FHIRDateTime.asNSDate()((uint64_t)v6);
    uint64_t v9 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v0 = sub_23309B170();
    uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
    (*v9)(v6, v2);
    v11(v8, v2);
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for DateExpressionError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_23309B190();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      sub_233017D94();
      uint64_t v8 = *(int *)(v7 + 48);
      uint64_t v9 = (char *)a1 + v8;
      id v10 = (char *)a2 + v8;
      uint64_t v11 = sub_23309AD60();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      uint64_t v13 = sub_23309AD60();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_233017D94()
{
  if (!qword_268758448)
  {
    sub_23309B190();
    sub_23309AD60();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268758448);
    }
  }
}

uint64_t destroy for DateExpressionError(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = sub_23309B190();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    sub_233017D94();
    a1 += *(int *)(v3 + 48);
  }
  uint64_t v4 = sub_23309AD60();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

uint64_t initializeWithCopy for DateExpressionError(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23309B190();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    sub_233017D94();
    uint64_t v6 = *(int *)(v5 + 48);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_23309AD60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_23309AD60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DateExpressionError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_23301811C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_23309B190();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      sub_233017D94();
      uint64_t v6 = *(int *)(v5 + 48);
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = sub_23309AD60();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      uint64_t v10 = sub_23309AD60();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23301811C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateExpressionError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for DateExpressionError(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_23309B190();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    sub_233017D94();
    uint64_t v6 = *(int *)(v5 + 48);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_23309AD60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  }
  else
  {
    uint64_t v10 = sub_23309AD60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DateExpressionError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_23301811C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = sub_23309B190();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      sub_233017D94();
      uint64_t v6 = *(int *)(v5 + 48);
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = sub_23309AD60();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    }
    else
    {
      uint64_t v10 = sub_23309AD60();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2330183D8()
{
  uint64_t result = sub_23309AD60();
  if (v1 <= 0x3F)
  {
    v3[4] = *(void *)(result - 8) + 64;
    uint64_t result = sub_23309B190();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[5] = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_2330184B4()
{
  sub_23301E890(0, &qword_268757790, MEMORY[0x263F8DCD0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v15[-1] - v2;
  uint64_t v4 = sub_23309BEC0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23301190C(v0, (uint64_t)v16);
  int v8 = swift_dynamicCast();
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v8)
  {
    v9(v3, 0, 1, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    unint64_t v10 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v9(v3, 1, 1, v4);
    sub_23301F1A0((uint64_t)v3, &qword_268757790, MEMORY[0x263F8DCD0]);
    v16[3] = &type metadata for SignedClinicalDataQRError;
    v16[4] = sub_23301F1FC();
    v16[0] = swift_allocObject();
    sub_23301190C(v0, v16[0] + 16);
    __swift_project_boxed_opaque_existential_1(v16, (uint64_t)&type metadata for SignedClinicalDataQRError);
    unint64_t v10 = SignedClinicalDataQRError.errorDescription.getter();
    uint64_t v12 = v11;
    sub_232EA35E0((uint64_t)v16, (uint64_t)v15);
    if (!v12)
    {
      __swift_project_boxed_opaque_existential_1(v15, v15[3]);
      sub_232F3DA4C();
      unint64_t v10 = sub_23309C370();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return v10;
}

void *sub_23301873C(void *a1, uint64_t a2)
{
  return sub_23301C6D0(a1, a2);
}

id sub_23301876C(void *a1, uint64_t a2)
{
  return sub_23301C7E4(a1, a2);
}

id sub_23301879C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id, uint64_t))
{
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = (void *)a6(v9, a4);

  return v11;
}

uint64_t sub_233018860(unint64_t a1, uint64_t a2)
{
  return sub_23301D2A4(a1, a2);
}

uint64_t sub_23301895C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_268758468 + dword_268758468);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_232FDB518;
  return v7(a1, a2);
}

uint64_t sub_233018A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[11] = a2;
  sub_23301EC68();
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  sub_23301E890(0, &qword_268758370, MEMORY[0x263F8F520]);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_233018B2C, 0, 0);
}

uint64_t sub_233018B2C()
{
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_23309BF80();
    uint64_t v2 = v3;
    if (v3) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    sub_232F3A800(0, &qword_2687584D0);
    sub_232F3DAA0();
    sub_23309BAB0();
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_233018F40;
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v3 = v0 + 72;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = v0 + 80;
    return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v28 = v1 & 0xC000000000000001;
    uint64_t v27 = *(void *)(v0 + 96) + 32;
    uint64_t v29 = v2;
    while (1)
    {
      if (v28) {
        id v10 = (id)MEMORY[0x237DB5EA0](v8, *(void *)(v0 + 96));
      }
      else {
        id v10 = *(id *)(v27 + 8 * v8);
      }
      uint64_t v11 = v10;
      uint64_t v13 = *(void *)(v0 + 136);
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v14 = sub_23309BA90();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, 1, 1, v14);
      id v16 = (void *)swift_allocObject();
      v16[2] = 0;
      uint64_t v17 = v16 + 2;
      v16[3] = 0;
      v16[4] = v11;
      sub_23301F0E0(v12, v13, &qword_268758370, MEMORY[0x263F8F520]);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
      id v18 = v11;
      uint64_t v19 = *(void *)(v0 + 136);
      if (v13 == 1)
      {
        sub_23301F1A0(*(void *)(v0 + 136), &qword_268758370, MEMORY[0x263F8F520]);
        if (!*v17) {
          goto LABEL_13;
        }
      }
      else
      {
        sub_23309BA80();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v19, v14);
        if (!*v17)
        {
LABEL_13:
          uint64_t v20 = 0;
          uint64_t v22 = 0;
          goto LABEL_14;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v20 = sub_23309BA20();
      uint64_t v22 = v21;
      swift_unknownObjectRelease();
LABEL_14:
      uint64_t v23 = **(void **)(v0 + 88);
      sub_232F3A800(0, &qword_2687584D0);
      uint64_t v24 = v22 | v20;
      if (v22 | v20)
      {
        uint64_t v24 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v20;
        *(void *)(v0 + 40) = v22;
      }
      ++v8;
      uint64_t v9 = *(void *)(v0 + 144);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v24;
      *(void *)(v0 + 64) = v23;
      swift_task_create();

      swift_release();
      sub_23301F1A0(v9, &qword_268758370, MEMORY[0x263F8F520]);
      if (v29 == v8) {
        goto LABEL_17;
      }
    }
  }
  __break(1u);
  return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
}

uint64_t sub_233018F40()
{
  swift_task_dealloc();
  if (v0) {
    unint64_t v1 = sub_2330191E8;
  }
  else {
    unint64_t v1 = sub_233019050;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_233019050()
{
  unint64_t v1 = (void *)v0[9];
  if (v1)
  {
    uint64_t v2 = (void *)v0[13];
    id v3 = v1;
    MEMORY[0x237DB59C0]();
    if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_23309B9D0();
    }
    sub_23309B9E0();
    sub_23309B9C0();

    uint64_t v4 = (void *)swift_task_alloc();
    v0[19] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_233018F40;
    uint64_t v5 = v0[14];
    return MEMORY[0x270FA2058](v0 + 9, 0, 0, v5, v0 + 10);
  }
  else
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_2330191E8()
{
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_233019284(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_23301931C;
  return HDHRSOriginalSignedClinicalDataRecord.convert()();
}

uint64_t sub_23301931C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return MEMORY[0x270FA2498](sub_233019468, 0, 0);
  }
}

uint64_t sub_233019468()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233019620(int a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  sub_232F3A800(0, &qword_2687584C8);
  uint64_t v7 = sub_23309B9A0();
  v4[4] = v7;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_268758468 + dword_268758468);
  id v8 = a4;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_233019724;
  return v11(v7, a2);
}

uint64_t sub_233019724(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  id v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)sub_23309AEB0();

    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  id v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_2330198E0(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_268758478 + dword_268758478);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23301F2AC;
  return v5(a1);
}

uint64_t sub_233019988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  sub_23301EC68();
  v3[15] = v4;
  v3[16] = *(void *)(v4 - 8);
  v3[17] = swift_task_alloc();
  sub_23301E890(0, &qword_268758370, MEMORY[0x263F8F520]);
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_233019AA4, 0, 0);
}

uint64_t sub_233019AA4()
{
  id v1 = objc_msgSend(*(id *)(v0 + 112), sel_contextItems);
  sub_232F3A800(0, &qword_268758508);
  unint64_t v2 = sub_23309B9A0();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_23309BF80();
    uint64_t v3 = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = MEMORY[0x263F8EE78];
    sub_232F3A800(0, &qword_2687584D0);
    sub_232F3DAA0();
    sub_23309BAB0();
    unint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v28;
    *unint64_t v28 = v0;
    v28[1] = sub_233019EF8;
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v3 = v0 + 80;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = v0 + 88;
    return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
  }
  uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v8) {
    goto LABEL_17;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v30 = v2 & 0xC000000000000001;
    uint64_t v31 = v8;
    unint64_t v32 = v2;
    while (1)
    {
      if (v30) {
        id v11 = (id)MEMORY[0x237DB5EA0](v9, v2);
      }
      else {
        id v11 = *(id *)(v2 + 8 * v9 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v14 = *(void *)(v0 + 144);
      uint64_t v13 = *(void *)(v0 + 152);
      uint64_t v15 = *(void **)(v0 + 112);
      uint64_t v16 = sub_23309BA90();
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, 1, 1, v16);
      id v18 = (void *)swift_allocObject();
      v18[2] = 0;
      uint64_t v19 = v18 + 2;
      void v18[3] = 0;
      v18[4] = v12;
      v18[5] = v15;
      sub_23301F0E0(v13, v14, &qword_268758370, MEMORY[0x263F8F520]);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16);
      id v20 = v12;
      id v21 = v15;
      uint64_t v22 = *(void *)(v0 + 144);
      if (v13 == 1)
      {
        sub_23301F1A0(*(void *)(v0 + 144), &qword_268758370, MEMORY[0x263F8F520]);
        if (!*v19) {
          goto LABEL_13;
        }
      }
      else
      {
        sub_23309BA80();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v22, v16);
        if (!*v19)
        {
LABEL_13:
          uint64_t v23 = 0;
          uint64_t v25 = 0;
          goto LABEL_14;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v23 = sub_23309BA20();
      uint64_t v25 = v24;
      swift_unknownObjectRelease();
LABEL_14:
      uint64_t v26 = **(void **)(v0 + 104);
      sub_232F3A800(0, &qword_2687584D0);
      uint64_t v27 = v25 | v23;
      if (v25 | v23)
      {
        uint64_t v27 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v23;
        *(void *)(v0 + 40) = v25;
      }
      ++v9;
      uint64_t v10 = *(void *)(v0 + 152);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v27;
      *(void *)(v0 + 64) = v26;
      swift_task_create();

      swift_release();
      sub_23301F1A0(v10, &qword_268758370, MEMORY[0x263F8F520]);
      unint64_t v2 = v32;
      if (v31 == v9) {
        goto LABEL_17;
      }
    }
  }
  __break(1u);
  return MEMORY[0x270FA2058](v3, v4, v5, v6, v7);
}

uint64_t sub_233019EF8()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    id v1 = sub_23301A1AC;
  }
  else
  {
    id v1 = sub_23301A010;
  }
  return MEMORY[0x270FA2498](v1, 0, 0);
}

uint64_t sub_23301A010()
{
  id v1 = (void *)v0[10];
  if (v1)
  {
    id v2 = v1;
    MEMORY[0x237DB59C0]();
    if (*(void *)((v0[9] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[9] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_23309B9D0();
    }
    sub_23309B9E0();
    sub_23309B9C0();

    uint64_t v3 = (void *)swift_task_alloc();
    v0[20] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_233019EF8;
    uint64_t v4 = v0[15];
    return MEMORY[0x270FA2058](v0 + 10, 0, 0, v4, v0 + 11);
  }
  else
  {
    uint64_t v5 = (void *)v0[12];
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    *uint64_t v5 = v0[9];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_23301A1AC()
{
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_23301A248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_23301A2E8;
  return HDHRSSignedClinicalDataProcessingContext.process(using:)(a5);
}

uint64_t sub_23301A2E8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return MEMORY[0x270FA2498](sub_23301F2B0, 0, 0);
  }
}

uint64_t HDHRSSignedClinicalDataProcessingContext.process(using:)(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  sub_23301E890(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  v2[18] = swift_task_alloc();
  uint64_t v3 = sub_23309B190();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  type metadata accessor for ExtractionContext();
  v2[22] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23301A568, 0, 0);
}

uint64_t sub_23301A568()
{
  uint64_t v50 = v0;
  id v1 = objc_msgSend(*(id *)(v0 + 136), sel_metadata);
  if (v1)
  {
    id v2 = v1;
    sub_232F3A564();
    uint64_t v3 = sub_23309B650();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  id v4 = objc_msgSend(*(id *)(v0 + 128), sel_countryCode);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_23309B710();
    uint64_t v8 = v7;

    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    uint64_t v9 = MEMORY[0x263F8D310];
    uint64_t v10 = sub_23309B710();
    uint64_t v12 = v11;
    *(void *)(v0 + 88) = v9;
    *(void *)(v0 + 64) = v6;
    *(void *)(v0 + 72) = v8;
    sub_232F3A680((_OWORD *)(v0 + 64), (_OWORD *)(v0 + 96));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v3;
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 96, v14);
    uint64_t v16 = *(void *)(v14 - 8);
    uint64_t v17 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v15, v14);
    sub_23301B4D0(*v17, v17[1], v10, v12, isUniquelyReferenced_nonNull_native, &v49);
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    swift_task_dealloc();
    uint64_t v3 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v3 && *(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = v3;
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v18 = 0;
LABEL_12:
  *(void *)(v0 + 184) = v18;
  id v20 = *(void **)(v0 + 128);
  uint64_t v19 = *(void **)(v0 + 136);
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v20, sel_receivedDate);
  sub_23309B160();

  id v22 = objc_msgSend(v19, sel_sourceURL);
  uint64_t v23 = *(void *)(v0 + 144);
  if (v22)
  {
    uint64_t v24 = v22;
    sub_23309AF30();

    uint64_t v25 = sub_23309AF80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 0, 1, v25);
  }
  else
  {
    uint64_t v26 = sub_23309AF80();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v23, 1, 1, v26);
  }
  uint64_t v28 = *(void *)(v0 + 168);
  uint64_t v27 = *(char **)(v0 + 176);
  uint64_t v29 = *(void *)(v0 + 152);
  uint64_t v30 = *(void *)(v0 + 160);
  unint64_t v32 = *(void **)(v0 + 136);
  uint64_t v31 = *(void *)(v0 + 144);
  id v33 = objc_msgSend(*(id *)(v0 + 128), sel_options);
  swift_bridgeObjectRetain();
  sub_232FFAE90(v28, v31, (uint64_t)v33, 0, v18, v27);
  swift_bridgeObjectRelease();
  sub_23301F1A0(v31, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  id v34 = objc_msgSend(v32, sel_sourceType);
  id v35 = objc_msgSend(v32, sel_rawData);
  uint64_t v36 = sub_23309B030();
  unint64_t v38 = v37;

  sub_232F42DB8(v36, v38, (uint64_t)v34, (uint64_t *)(v0 + 16));
  uint64_t v39 = *(void **)(v0 + 136);
  sub_232E9AA4C(v36, v38);
  uint64_t v40 = *(void *)(v0 + 40);
  uint64_t v41 = *(void *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v40);
  id v42 = objc_msgSend(v39, sel_rawData);
  uint64_t v43 = sub_23309B030();
  uint64_t v45 = v44;

  *(void *)(v0 + 192) = v43;
  *(void *)(v0 + 200) = v45;
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v46;
  void *v46 = v0;
  v46[1] = sub_23301AA80;
  uint64_t v47 = *(void *)(v0 + 176);
  return sub_232F3AAB8(v47, v43, v45, v40, v41);
}

uint64_t sub_23301AA80(uint64_t a1)
{
  id v4 = (void *)*v2;
  v4[27] = v1;
  swift_task_dealloc();
  unint64_t v5 = v4[25];
  uint64_t v6 = v4[24];
  if (v1)
  {
    sub_232E9AA4C(v6, v5);
    uint64_t v7 = sub_23301AD5C;
  }
  else
  {
    v4[28] = a1;
    sub_232E9AA4C(v6, v5);
    uint64_t v7 = sub_23301ABDC;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t sub_23301ABDC()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v4);
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v3, v4, v5);
  id v7 = objc_msgSend(v1, sel_originalRecord);
  id v8 = sub_232F4E668(v6);

  id v9 = objc_msgSend(v1, sel_mainRecord);
  id v10 = sub_23301F2B8(v6);

  id v11 = objc_msgSend(v1, sel_copyWithOriginalRecord_mainRecord_, v8, v10);
  sub_23301E3F4(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(id))v0[1];
  return v12(v11);
}

uint64_t sub_23301AD5C()
{
  sub_23301E3F4(*(void *)(v0 + 176));
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_23301AF8C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v10 = (uint64_t (*)(uint64_t))((char *)&dword_268758478 + dword_268758478);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_23301B060;
  return v10((uint64_t)v6);
}

uint64_t sub_23301B060(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  id v9 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    id v10 = (void *)sub_23309AEB0();

    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);
    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

void *HKSignedClinicalDataQRRepresentation.asProcessingContext()()
{
  sub_23301E890(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v13 - v3;
  uint64_t v5 = sub_232F42B58((uint64_t)v0, (uint64_t)objc_msgSend(v0, sel_sourceType));
  if (!v1)
  {
    uint64_t v7 = (uint64_t)v5;
    unint64_t v8 = v6;
    sub_232F42DB8((uint64_t)v5, v6, (uint64_t)objc_msgSend(v0, sel_sourceType), v13);
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v11 = sub_23309AF80();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
    uint64_t v0 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, char *, void, uint64_t, uint64_t))(v10 + 16))(v7, v8, v4, 0, v9, v10);
    sub_23301F1A0((uint64_t)v4, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_232E9AA4C(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return v0;
}

id SignedClinicalDataProcessor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id SignedClinicalDataProcessor.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignedClinicalDataProcessor();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SignedClinicalDataProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignedClinicalDataProcessor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_OWORD *sub_23301B4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v10 = MEMORY[0x263F8D310];
  uint64_t v29 = MEMORY[0x263F8D310];
  *(void *)&long long v28 = a1;
  *((void *)&v28 + 1) = a2;
  uint64_t v11 = (void *)*a6;
  unint64_t v13 = sub_232F393E0(a3, a4);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = (void *)*a6;
    if (v17)
    {
LABEL_8:
      id v20 = (_OWORD *)(v19[7] + 32 * v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return sub_232F3A680(&v28, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_232F5D5E8();
    goto LABEL_7;
  }
  sub_232F5C45C(v16, a5 & 1);
  unint64_t v22 = sub_232F393E0(a3, a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = (_OWORD *)sub_23309C340();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*a6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v10);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_23301B6B4(v13, a3, a4, *v26, v26[1], v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23301B6B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v13 = MEMORY[0x263F8D310];
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = (void *)(a6[6] + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t result = sub_232F3A680(&v12, (_OWORD *)(a6[7] + 32 * a1));
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

uint64_t sub_23301B738(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  sub_23301E890(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  BOOL v10 = (char *)&v33 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v11)
  {
    uint64_t v53 = MEMORY[0x263F8EE78];
    sub_23309BF20();
    uint64_t v13 = (_OWORD *)(a1 + 32);
    uint64_t v14 = v11 - 1;
    uint64_t v68 = v10;
    for (unint64_t i = a2; ; a2 = i)
    {
      sub_232F41778(v13, v52);
      sub_232F41A04((uint64_t)v52);
      id v15 = objc_msgSend(a2, sel_sourceURL);
      if (v15)
      {
        uint64_t v16 = v15;
        sub_23309AF30();

        uint64_t v17 = sub_23309AF80();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 0, 1, v17);
      }
      else
      {
        uint64_t v18 = sub_23309AF80();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
      }
      id v19 = objc_msgSend(a2, sel_metadata);
      unint64_t v41 = sub_232F3A564();
      sub_23309B650();

      sub_232F41778(v52, v42);
      long long v64 = v48;
      long long v65 = v49;
      long long v66 = v50;
      long long v67 = v51;
      long long v60 = v44;
      long long v61 = v45;
      long long v62 = v46;
      long long v63 = v47;
      long long v56 = v42[2];
      long long v57 = v42[3];
      long long v58 = v42[4];
      long long v59 = v43;
      long long v54 = v42[0];
      long long v55 = v42[1];
      sub_232F41A04((uint64_t)v42);
      uint64_t v20 = sub_232F410E8();
      if (v3)
      {
        sub_232F41D70((uint64_t)v52);
        sub_23301F1A0((uint64_t)v68, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        swift_bridgeObjectRelease();
        sub_232F41D70((uint64_t)v52);
        return swift_release();
      }
      uint64_t v22 = v20;
      unint64_t v23 = v21;
      uint64_t v39 = v14;
      uint64_t v40 = 0;
      uint64_t v36 = v13;
      uint64_t v37 = v43;
      uint64_t v24 = v35;
      sub_23301F0E0((uint64_t)v68, v35, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_23309B010();
      uint64_t v25 = sub_23309AF80();
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
      {
        uint64_t v28 = v35;
        uint64_t v27 = (void *)sub_23309AF10();
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v25);
      }
      id v29 = objc_allocWithZone(MEMORY[0x263F45C30]);
      uint64_t v30 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
      unint64_t v32 = (void *)v38;
      objc_msgSend(v29, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v38, 1, v27, v30, 0, 0, 0, v31);
      sub_232E9AA4C(v22, v23);

      sub_232F41D70((uint64_t)v52);
      BOOL v10 = v68;
      sub_23301F1A0((uint64_t)v68, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      swift_bridgeObjectRelease();
      sub_232F41D70((uint64_t)v52);
      sub_23309BF00();
      sub_23309BF30();
      sub_23309BF40();
      sub_23309BF10();
      if (!v39) {
        break;
      }
      uint64_t v13 = v36 + 14;
      uint64_t v14 = v39 - 1;
      uint64_t v3 = v40;
    }
    return v53;
  }
  return result;
}

id sub_23301BC38(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_23309B190();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(a1, sel_fileHandle);
  uint64_t v10 = sub_23309BB50();
  if (v2)
  {

    type metadata accessor for HDHRExtractionError(0);
    id v13 = v12;
    uint64_t v31 = 101;
    sub_23301EC10(0, (unint64_t *)&qword_268756F90, (unint64_t *)&qword_268756F98);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2330A1880;
    *(void *)(inited + 32) = sub_23309B710();
    *(void *)(inited + 40) = v15;
    uint64_t v16 = sub_23309AEB0();
    *(void *)(inited + 72) = sub_232F3A800(0, &qword_268757078);
    *(void *)(inited + 48) = v16;
    sub_232F37A50(inited);
    sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
    sub_23309AEA0();
    swift_willThrow();
  }
  else
  {
    uint64_t v17 = v10;
    unint64_t v18 = v11;

    if (v18 >> 60 == 15)
    {
      type metadata accessor for HDHRExtractionError(0);
      id v13 = v19;
      uint64_t v31 = 102;
      sub_232F54C28(MEMORY[0x263F8EE78]);
      sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
      sub_23309AEA0();
      swift_willThrow();
    }
    else
    {
      sub_23309AB30();
      swift_allocObject();
      sub_232E9A9F4(v17, v18);
      uint64_t v20 = sub_23309AB20();
      sub_23301F08C();
      sub_23309AB10();
      uint64_t v29 = v20;
      uint64_t v21 = v30;
      id v28 = a1;
      sub_23301B738(v21, v28);
      swift_bridgeObjectRelease();
      unint64_t v23 = v28;

      id v24 = objc_msgSend(v23, sel_receivedDate);
      sub_23309B160();

      id v28 = objc_allocWithZone(MEMORY[0x263F45C38]);
      uint64_t v25 = (void *)sub_23309B130();
      id v27 = v25;
      sub_232F3A800(0, &qword_268758508);
      uint64_t v26 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v28, sel_initWithReceivedDate_countryCode_options_contextItems_, v25, 0, a2, v26);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_232F3F15C(v17, v18);
      swift_release();
      sub_232F3F15C(v17, v18);
    }
  }
  return v13;
}

id sub_23301C214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309B190();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = HKSignedClinicalDataQRRepresentation.asProcessingContext()();
  if (v2)
  {
    id v41 = v2;
    id v9 = v2;
    sub_232F3DAA0();
    if (swift_dynamicCast())
    {
      if (v40 == 4)
      {
        int8x16_t v10 = vorrq_s8(v38, v39);
        if (!(*(void *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | v37))
        {

          sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_2330A1880;
          *(void *)(inited + 32) = sub_23309B710();
          *(void *)(inited + 40) = v25;
          memset(v33, 0, sizeof(v33));
          char v34 = 4;
          unint64_t v26 = sub_2330184B4();
          uint64_t v28 = v27;
          sub_23301F14C((uint64_t)v33);
          *(void *)(inited + 48) = v26;
          *(void *)(inited + 56) = v28;
          unint64_t v29 = sub_232F37BB4(inited);
          type metadata accessor for HDHRExtractionError(0);
          uint64_t v31 = v30;
          v32[1] = (id)104;
          sub_233020AD0(v29);
          swift_bridgeObjectRelease();
          sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
          id v17 = v31;
          sub_23309AEA0();
          swift_willThrow();

          return v17;
        }
      }
      sub_23301F14C((uint64_t)&v37);
    }

    sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
    uint64_t v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_2330A1880;
    *(void *)(v11 + 32) = sub_23309B710();
    *(void *)(v11 + 40) = v12;
    unint64_t v37 = 0;
    v38.i64[0] = 0xE000000000000000;
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v37 = 0xD000000000000025;
    v38.i64[0] = 0x80000002330B65F0;
    swift_getErrorValue();
    Error.hdhr_friendlyDescription.getter(v35, v36);
    sub_23309B880();
    swift_bridgeObjectRelease();
    uint64_t v13 = v38.i64[0];
    *(void *)(v11 + 48) = v37;
    *(void *)(v11 + 56) = v13;
    unint64_t v14 = sub_232F37BB4(v11);
    type metadata accessor for HDHRExtractionError(0);
    uint64_t v16 = v15;
    v33[0] = 103;
    sub_233020AD0(v14);
    swift_bridgeObjectRelease();
    sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
    id v17 = v16;
    sub_23309AEA0();
    swift_willThrow();
  }
  else
  {
    unint64_t v18 = v8;
    sub_23309B180();
    sub_2330102A8();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2330A4FB0;
    *(void *)(v19 + 32) = v18;
    unint64_t v37 = v19;
    sub_23309B9C0();
    v32[0] = objc_allocWithZone(MEMORY[0x263F45C38]);
    id v42 = v18;
    uint64_t v20 = (void *)sub_23309B130();
    sub_232F3A800(0, &qword_268758508);
    uint64_t v21 = a2;
    uint64_t v22 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v32[0], sel_initWithReceivedDate_countryCode_options_contextItems_, v20, 0, v21, v22);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v17;
}

void *sub_23301C6D0(void *a1, uint64_t a2)
{
  id v4 = objc_msgSend(a1, sel_file);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_23301BC38(v4, a2);
  }
  else
  {
    id v7 = objc_msgSend(a1, sel_QRRepresentation);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v6 = sub_23301C214((uint64_t)v7, a2);
    }
    else
    {
      id v9 = self;
      uint64_t v6 = (void *)sub_23309B6E0();
      objc_msgSend(v9, sel_hk_error_description_, 3, v6);

      swift_willThrow();
    }
  }
  return v6;
}

id sub_23301C7E4(void *a1, uint64_t a2)
{
  uint64_t v63 = a2;
  uint64_t v4 = sub_23309B190();
  uint64_t v65 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v64 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23301E890(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v59 - v7;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v59 - v14;
  id v16 = objc_msgSend(a1, sel_sourceURL);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_6;
  }
  id v17 = v16;
  uint64_t v62 = v4;
  long long v66 = v15;
  sub_23309AF30();

  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v8, v13, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_6:
    sub_23301F1A0((uint64_t)v8, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    type metadata accessor for HDHRExtractionError(0);
    id v28 = v27;
    unint64_t v69 = 2;
    sub_232F54C28(MEMORY[0x263F8EE78]);
    sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
    sub_23309AEA0();
    swift_willThrow();
    return v28;
  }
  uint64_t v19 = (uint64_t)v66;
  v18(v66, v8, v9);
  sub_23309AB30();
  swift_allocObject();
  uint64_t v20 = sub_23309AB20();
  uint64_t v21 = a1;
  uint64_t v22 = v20;
  id v61 = v21;
  id v23 = objc_msgSend(v21, sel_data);
  uint64_t v24 = sub_23309B030();
  unint64_t v26 = v25;

  sub_232F552F8();
  sub_23309AB10();
  if (!v2)
  {
    uint64_t v60 = v22;
    sub_232E9AA4C(v24, v26);
    long long v59 = v73;
    Parameters.asSignedClinicalDataProcessingContexts(sourceURL:metadata:)(v19, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v52 = v61;
    id v53 = objc_msgSend(v61, sel_receivedDate);
    long long v54 = v64;
    sub_23309B160();

    id v55 = objc_msgSend(v52, sel_country);
    sub_23309B710();

    id v61 = objc_allocWithZone(MEMORY[0x263F45C38]);
    long long v56 = (void *)sub_23309B130();
    long long v57 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    sub_232F3A800(0, &qword_268758508);
    long long v58 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v61, sel_initWithReceivedDate_countryCode_options_contextItems_, v56, v57, v63, v58);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v62);
    swift_release();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v66, v9);
    return v28;
  }
  swift_release();
  sub_232E9AA4C(v24, v26);
  id v30 = v61;
  type metadata accessor for Code(0);
  uint64_t v71 = 202;
  id v31 = v2;
  sub_23301EFF0(&qword_2687564E8, type metadata accessor for Code);
  char v32 = sub_23309ADC0();

  if (v32)
  {

    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v33 = sub_23309B4B0();
    __swift_project_value_buffer(v33, (uint64_t)qword_268770F68);
    char v34 = sub_23309B4A0();
    os_log_type_t v35 = sub_23309BB70();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_232E63000, v34, v35, "SignedClinicalDataProcessor.preprocess Empty response received. Converting to empty contextItems", v36, 2u);
      MEMORY[0x237DB6EC0](v36, -1, -1);
    }

    id v37 = objc_msgSend(v30, sel_receivedDate);
    int8x16_t v38 = v64;
    sub_23309B160();

    id v39 = objc_msgSend(v30, sel_country);
    sub_23309B710();

    id v40 = objc_allocWithZone(MEMORY[0x263F45C38]);
    id v41 = (void *)sub_23309B130();
    id v42 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    sub_232F3A800(0, &qword_268758508);
    long long v43 = (void *)sub_23309B990();
    id v28 = objc_msgSend(v40, sel_initWithReceivedDate_countryCode_options_contextItems_, v41, v42, v63, v43);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v38, v62);
    goto LABEL_16;
  }
  sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = sub_23309B710();
  *(void *)(inited + 40) = v45;
  uint64_t v71 = 0;
  unint64_t v72 = 0xE000000000000000;
  sub_23309BE40();
  swift_bridgeObjectRelease();
  unint64_t v69 = 0xD000000000000028;
  unint64_t v70 = 0x80000002330B6540;
  swift_getErrorValue();
  uint64_t v71 = Error.hdhr_friendlyDescription.getter(v67, v68);
  unint64_t v72 = v46;
  swift_bridgeObjectRetain();
  sub_23309C320();
  id v47 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_23309BDB0();
  swift_unknownObjectRelease();
  sub_23309B770();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  unint64_t v48 = v70;
  *(void *)(inited + 48) = v69;
  *(void *)(inited + 56) = v48;
  unint64_t v49 = sub_232F37BB4(inited);
  type metadata accessor for HDHRExtractionError(0);
  long long v51 = v50;
  unint64_t v69 = 103;
  sub_233020AD0(v49);
  swift_bridgeObjectRelease();
  sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  id v28 = v51;
  sub_23309AEA0();
  swift_willThrow();

  (*(void (**)(char *, uint64_t))(v10 + 8))(v66, v9);
  return v28;
}

unint64_t sub_23301D1F4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = sub_23309B840();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }
  return sub_23309B950();
}

uint64_t sub_23301D2A4(unint64_t a1, uint64_t a2)
{
  unint64_t v5 = sub_23309B190();
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = v7;
  unint64_t v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = a1 >> 62;
  uint64_t v47 = a2;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    uint64_t v50 = MEMORY[0x263F8EE78];
    sub_23309BF20();
    if (v9 < 0)
    {
      __break(1u);
LABEL_37:
      id v15 = (id)MEMORY[0x237DB5EA0](0, a1);
      goto LABEL_20;
    }
    unint64_t v46 = v5;
    uint64_t v10 = 0;
    unint64_t v5 = a1 & 0xC000000000000001;
    while (v9 != v10)
    {
      if (v5) {
        id v11 = (id)MEMORY[0x237DB5EA0](v10, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      sub_232F4DC34();
      if (v2)
      {

        swift_release();
        sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_2330A1880;
        *(void *)(inited + 32) = sub_23309B710();
        *(void *)(inited + 40) = v20;
        uint64_t v50 = 0;
        unint64_t v51 = 0xE000000000000000;
        sub_23309BE40();
        uint64_t v54 = v50;
        unint64_t v55 = v51;
        sub_23309B880();
        swift_getErrorValue();
        uint64_t v50 = Error.hdhr_friendlyDescription.getter(v52, v53);
        unint64_t v51 = v21;
        swift_bridgeObjectRetain();
        sub_23309C320();
        id v22 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_23309BDB0();
        swift_unknownObjectRelease();
        sub_23309B770();
        swift_bridgeObjectRelease();
        sub_23309B880();
        swift_bridgeObjectRelease();
        unint64_t v23 = v55;
        *(void *)(inited + 48) = v54;
        *(void *)(inited + 56) = v23;
        unint64_t v24 = sub_232F37BB4(inited);
        type metadata accessor for HDHRExtractionError(0);
        uint64_t v54 = 103;
        id v25 = (id)sub_233020AD0(v24);
        swift_bridgeObjectRelease();
        sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
        sub_23309AEA0();
        swift_willThrow();

        return (uint64_t)v25;
      }
      ++v10;

      sub_23309BF00();
      sub_23309BF30();
      sub_23309BF40();
      sub_23309BF10();
      if (v9 == v10)
      {
        unint64_t v5 = v46;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_23309BF80();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_23309BF80();
    if (!result) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_27;
    }
  }
  unint64_t v8 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    goto LABEL_37;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  id v15 = *(id *)(a1 + 32);
LABEL_20:
  id v16 = v15;
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v16, sel_sourceType);

  if (v17 != (id)2) {
    goto LABEL_28;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    id v18 = (id)MEMORY[0x237DB5EA0](0, a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v18 = *(id *)(a1 + 32);
  }
  id v26 = objc_msgSend(v18, sel_issuerIdentifier, v46);

  uint64_t v27 = sub_23309B710();
  unint64_t v29 = v28;

  uint64_t v50 = v27;
  unint64_t v51 = v29;
  uint64_t v54 = sub_23309B710();
  unint64_t v55 = v30;
  sub_2330129C0();
  sub_233012A14();
  char v31 = sub_23309B6B0();
  swift_bridgeObjectRelease();
  if (v31)
  {
    sub_23309B710();
    unint64_t v32 = sub_23309B810();
    swift_bridgeObjectRelease();
    unint64_t v33 = sub_23301D1F4(v32, v27, v29);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    MEMORY[0x237DB57D0](v33, v35, v37, v39);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
LABEL_27:
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v41 = 0;
LABEL_29:
  sub_23309B180();
  id v42 = (void *)sub_23309B130();
  if (v41)
  {
    long long v43 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v43 = 0;
  }
  id v44 = objc_allocWithZone(MEMORY[0x263F45C38]);
  sub_232F3A800(0, &qword_268758508);
  uint64_t v45 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v44, sel_initWithReceivedDate_countryCode_options_contextItems_, v42, v43, v47, v45);

  (*(void (**)(char *, unint64_t))(v48 + 8))(v49, v5);
  return (uint64_t)v25;
}

uint64_t sub_23301D8E0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 184) = a1;
  *(void *)(v2 + 192) = a2;
  return MEMORY[0x270FA2498](sub_23301D900, 0, 0);
}

uint64_t sub_23301D900()
{
  uint64_t v1 = v0[23];
  v0[19] = MEMORY[0x263F8EE78];
  uint64_t v2 = sub_232F3A800(0, &qword_2687584D0);
  v0[25] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[26] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v0 + 19;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_23301DA1C;
  uint64_t v5 = MEMORY[0x263F8EE60] + 8;
  return MEMORY[0x270FA22B8](v4, v2, v5, 0, 0, &unk_268758528, v3, v2);
}

uint64_t sub_23301DA1C()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_23301DBFC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_23301DB38;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_23301DB38()
{
  uint64_t v1 = *(void *)(v0 + 192);
  id v2 = objc_allocWithZone(MEMORY[0x263F45D08]);
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initWithItems_options_, v3, v1);

  swift_bridgeObjectRelease();
  uint64_t v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

uint64_t sub_23301DBFC()
{
  uint64_t v1 = (void *)v0[28];
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = sub_23309B710();
  *(void *)(inited + 40) = v3;
  sub_23309BE40();
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.hdhr_friendlyDescription.getter(v0[15], v0[16]);
  v0[18] = v4;
  swift_bridgeObjectRetain();
  sub_23309C320();
  id v5 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_23309BDB0();
  swift_unknownObjectRelease();
  sub_23309B770();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = 0xD000000000000028;
  *(void *)(inited + 56) = 0x80000002330B64C0;
  unint64_t v6 = sub_232F37BB4(inited);
  type metadata accessor for HDHRExtractionError(0);
  v0[22] = 103;
  sub_233020AD0(v6);
  swift_bridgeObjectRelease();
  sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  sub_23309AEA0();
  swift_willThrow();

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_23301DE74(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  return MEMORY[0x270FA2498](sub_23301DE94, 0, 0);
}

uint64_t sub_23301DE94()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = sub_232F3A800(0, &qword_2687584D0);
  v0[24] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[25] = v3;
  *(void *)(v3 + 16) = v1;
  sub_23301EBA8();
  uint64_t v5 = v4;
  unint64_t v6 = (void *)swift_task_alloc();
  v0[26] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_23301DFB0;
  return MEMORY[0x270FA22B8](v0 + 19, v2, v5, 0, 0, &unk_2687584E0, v3, v2);
}

uint64_t sub_23301DFB0()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_23301E184;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_23301E0CC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_23301E0CC()
{
  id v1 = objc_allocWithZone(MEMORY[0x263F45D08]);
  uint64_t v2 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithItems_options_, v2, 0);

  uint64_t v4 = *(uint64_t (**)(id))(v0 + 8);
  return v4(v3);
}

uint64_t sub_23301E184()
{
  id v1 = (void *)v0[27];
  swift_task_dealloc();
  sub_23301EC10(0, &qword_2687584F0, &qword_2687584F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2330A1880;
  *(void *)(inited + 32) = sub_23309B710();
  *(void *)(inited + 40) = v3;
  sub_23309BE40();
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.hdhr_friendlyDescription.getter(v0[15], v0[16]);
  v0[18] = v4;
  swift_bridgeObjectRetain();
  sub_23309C320();
  id v5 = (id)HKSensitiveLogItem();
  swift_unknownObjectRelease();
  sub_23309BDB0();
  swift_unknownObjectRelease();
  sub_23309B770();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = 0xD000000000000026;
  *(void *)(inited + 56) = 0x80000002330B6490;
  unint64_t v6 = sub_232F37BB4(inited);
  type metadata accessor for HDHRExtractionError(0);
  v0[22] = 103;
  sub_233020AD0(v6);
  swift_bridgeObjectRelease();
  sub_23301EFF0((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  sub_23309AEA0();
  swift_willThrow();

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_23301E3F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SignedClinicalDataProcessor()
{
  return self;
}

uint64_t method lookup function for SignedClinicalDataProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SignedClinicalDataProcessor);
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.preprocessData(in:options:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x50))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.preprocess(fhirResourceObject:options:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.reprocess(originalRecords:options:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.process(originalSignedClinicalDataRecords:options:)(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0x68);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_23301E680;
  return v9(a1, a2);
}

uint64_t sub_23301E680(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of SignedClinicalDataProcessor.process(contextCollection:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x263F8EED0] & *v1) + 0x70);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_23301F2B4;
  return v7(a1);
}

void sub_23301E890(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_23301E8E4()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23301E92C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  unint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_23300C494;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_268758498 + dword_268758498);
  return v6(v2, v3, v4);
}

uint64_t sub_23301E9E8()
{
  _Block_release(*(const void **)(v0 + 32));
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_23301EA30()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  unint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_23300BE68;
  uint64_t v7 = (uint64_t (*)(int, uint64_t, void *, void *))((char *)&dword_2687584A8 + dword_2687584A8);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_23301EAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_23300C494;
  return sub_233019988(a1, a2, v6);
}

void sub_23301EBA8()
{
  if (!qword_2687584E8)
  {
    sub_232F3A800(255, &qword_2687584D0);
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687584E8);
    }
  }
}

void sub_23301EC10(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_23301F038(255, a3);
    unint64_t v4 = sub_23309C1F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_23301EC68()
{
  if (!qword_268758500)
  {
    sub_232F3A800(255, &qword_2687584D0);
    sub_232F3DAA0();
    unint64_t v0 = sub_23309BAD0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758500);
    }
  }
}

uint64_t sub_23301ECE8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_23301ED30(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_23300C494;
  v5[2] = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[3] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_23301A2E8;
  return HDHRSSignedClinicalDataProcessingContext.process(using:)(v4);
}

uint64_t sub_23301EE18(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_23300C494;
  return sub_233018A10(a1, a2, v7, v6);
}

uint64_t sub_23301EECC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23301EF0C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_23300BE68;
  v3[2] = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_23301931C;
  return HDHRSOriginalSignedClinicalDataRecord.convert()();
}

uint64_t sub_23301EFF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23301F038(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

unint64_t sub_23301F08C()
{
  unint64_t result = qword_268758540;
  if (!qword_268758540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758540);
  }
  return result;
}

uint64_t sub_23301F0E0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23301E890(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23301F14C(uint64_t a1)
{
  return a1;
}

uint64_t sub_23301F1A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_23301E890(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_23301F1FC()
{
  unint64_t result = qword_268758548;
  if (!qword_268758548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758548);
  }
  return result;
}

uint64_t sub_23301F250()
{
  int v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 3 || v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else if (!*(unsigned char *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x270FA0238](v0, 57, 7);
}

id sub_23301F2B8(id a1)
{
  sub_233020188(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v70 - v3;
  sub_233020188(0, &qword_268757C70, MEMORY[0x263F07490]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v70 - v9;
  uint64_t v11 = sub_23309B190();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  id v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  id v18 = (char *)&v70 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  unint64_t v21 = (char *)&v70 - v20;
  MEMORY[0x270FA5388](v19);
  long long v87 = (char *)&v70 - v22;
  if (objc_msgSend(v88, sel_signatureStatus) == a1)
  {
    id v23 = v88;
    return v23;
  }
  sub_232F3A800(0, &qword_268758550);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordTypeForIdentifier_, *MEMORY[0x263F09FB0]);
  id v84 = result;
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v25 = objc_msgSend(v88, sel_note);
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = sub_23309B710();
    uint64_t v71 = v28;
    uint64_t v72 = v27;
  }
  else
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
  }
  long long v86 = v18;
  unsigned int v82 = objc_msgSend(v88, sel_enteredInError);
  id v29 = objc_msgSend(v88, sel_modifiedDate);
  long long v85 = v15;
  if (v29)
  {
    unint64_t v30 = v29;
    sub_23309B160();

    char v31 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v31(v10, v21, v11);
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v32(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v31(v87, v10, v11);
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v32(v10, 1, 1, v11);
  }
  sub_23309B180();
  sub_233020248((uint64_t)v10, &qword_268757C70, MEMORY[0x263F07490]);
LABEL_15:
  id v81 = objc_msgSend(v88, sel_originIdentifier);
  id v33 = objc_msgSend(v88, sel_locale);
  if (v33)
  {
    uint64_t v34 = v33;
    sub_23309B220();

    uint64_t v35 = sub_23309B230();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v4, 0, 1, v35);
  }
  else
  {
    uint64_t v36 = sub_23309B230();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v4, 1, 1, v36);
  }
  id v79 = objc_msgSend(v88, sel_extractionVersion);
  id v80 = objc_msgSend(v88, sel_device);
  id v37 = objc_msgSend(v88, sel_metadata);
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v70 = sub_23309B650();
  }
  else
  {
    uint64_t v70 = 0;
  }
  long long v83 = v4;
  id v39 = objc_msgSend(v88, sel_country, v70);
  uint64_t v40 = sub_23309B710();
  uint64_t v77 = v41;
  uint64_t v78 = v40;

  id v76 = objc_msgSend(v88, sel_state);
  id v42 = objc_msgSend(v88, sel_credentialTypes);
  uint64_t v75 = sub_23309B9A0();

  id v43 = objc_msgSend(v88, sel_issuerIdentifier);
  uint64_t v44 = sub_23309B710();
  uint64_t v73 = v45;
  uint64_t v74 = v44;

  id v46 = objc_msgSend(v88, sel_issuedDate);
  sub_23309B160();

  id v47 = objc_msgSend(v88, sel_relevantDate);
  sub_23309B160();

  id v48 = objc_msgSend(v88, sel_expirationDate);
  if (v48)
  {
    unint64_t v49 = v48;
    uint64_t v50 = (uint64_t)a1;
    sub_23309B160();

    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v50 = (uint64_t)a1;
    uint64_t v51 = 1;
  }
  v32(v8, v51, 1, v11);
  id v52 = objc_msgSend(v88, sel_subject);
  id v53 = objc_msgSend(v88, sel_items);
  sub_232F3A800(0, &qword_268758558);
  uint64_t v54 = sub_23309B9A0();

  id v55 = objc_msgSend(v88, sel_dataValue);
  if (v55)
  {
    long long v56 = v55;
    uint64_t v57 = sub_23309B030();
    unint64_t v59 = v58;
  }
  else
  {
    uint64_t v57 = 0;
    unint64_t v59 = 0xF000000000000000;
  }
  sub_232F3A800(0, &qword_268757C78);
  id v60 = objc_msgSend(v88, sel_sourceType);
  unint64_t v69 = v59;
  uint64_t v68 = v50;
  uint64_t v67 = (uint64_t)v8;
  id v61 = v80;
  uint64_t v62 = v84;
  id v63 = v81;
  id v64 = sub_233020300((uint64_t)v84, v72, v71, v82, (uint64_t)v87, (uint64_t)v81, (uint64_t)v83, (uint64_t)v79, (uint64_t)v80, v70, v78, v77, (uint64_t)v76, v75, v74, v73, (uint64_t)v86, (uint64_t)v85, v67,
          v68,
          (uint64_t)v52,
          v54,
          v57,
          v69,
          (uint64_t)v60);

  id v65 = objc_msgSend(v88, sel__creationDate);
  sub_23309B160();

  long long v66 = (void *)sub_23309B130();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
  objc_msgSend(v64, sel_setCreationDate_, v66);

  return v64;
}

id sub_23301FB04(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  uint64_t v84 = a6;
  sub_233020188(0, &qword_268757C70, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v21 - 8);
  id v23 = (char *)&v65 - v22;
  sub_233020188(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v24 - 8);
  id v26 = (char *)&v65 - v25;
  sub_232F3A800(0, &qword_268758550);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordTypeForIdentifier_, *MEMORY[0x263F09FB0]);
  if (result)
  {
    id v79 = result;
    uint64_t v87 = a8;
    id v81 = v16;
    if (a4)
    {
      uint64_t v66 = sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v66 = 0;
    }
    uint64_t v85 = a10;
    uint64_t v86 = a9;
    uint64_t v28 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v29 = type metadata accessor for ExtractionContext();
    id v80 = (char *)v28 + *(int *)(v29 + 28);
    uint64_t v30 = sub_23309B130();
    uint64_t v82 = a2;
    long long v83 = a1;
    id v77 = *a1;
    uint64_t v78 = (void *)v30;
    sub_2330201DC(a2, (uint64_t)v26, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
    uint64_t v31 = sub_23309B230();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v26, 1, v31) != 1)
    {
      uint64_t v33 = sub_23309B210();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v31);
    }
    id v76 = (void *)v33;
    uint64_t v34 = *v28;
    id v35 = objc_msgSend(self, sel_localDevice);
    uint64_t v36 = *(uint64_t *)((char *)v28 + *(int *)(v29 + 40));
    uint64_t v74 = v34;
    id v75 = v35;
    if (v36)
    {
      uint64_t v37 = swift_bridgeObjectRetain();
      sub_233020734(v37);
      swift_bridgeObjectRelease();
      uint64_t v65 = sub_23309B640();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v84 = sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v72 = sub_23309B990();
    swift_bridgeObjectRelease();
    uint64_t v70 = sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)sub_23309B130();
    uint64_t v39 = sub_23309B130();
    sub_2330201DC(v85, (uint64_t)v23, &qword_268757C70, MEMORY[0x263F07490]);
    uint64_t v40 = sub_23309B190();
    uint64_t v41 = *(void *)(v40 - 8);
    id v42 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v23, 1, v40) != 1)
    {
      id v42 = (void *)sub_23309B130();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v40);
    }
    uint64_t v71 = v41;
    uint64_t v73 = v40;
    sub_232F3A800(0, &qword_268758558);
    id v43 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    uint64_t v44 = 0;
    if (a15 >> 60 != 15)
    {
      sub_232E9A9F4(a14, a15);
      uint64_t v44 = (void *)sub_23309B010();
      sub_232F3F15C(a14, a15);
    }
    id v67 = v42;
    id v68 = v43;
    id v69 = v44;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v64 = v44;
    id v63 = v43;
    uint64_t v62 = v42;
    id v46 = (void *)v39;
    id v60 = v38;
    uint64_t v61 = v39;
    id v81 = v38;
    id v47 = (void *)v70;
    id v48 = (void *)v72;
    unint64_t v49 = (void *)v84;
    uint64_t v50 = (void *)v65;
    uint64_t v51 = v75;
    id v53 = v78;
    id v52 = v79;
    uint64_t v54 = (void *)v66;
    id v55 = v76;
    id v77 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_signedClinicalDataRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_credentialTypes_issuerIdentifier_issuedDate_relevantDate_expirationDate_signatureStatus_subject_items_dataValue_sourceType_, v79, v66, 0, v78, v77, v76, v74, v75, v65, v84, 0, v72, v70, v60, v61, v62,
              a11,
              a12,
              v63,
              v64,
              a16));

    id v56 = v77;
    uint64_t v57 = (void *)sub_23309B130();
    objc_msgSend(v56, sel_setCreationDate_, v57);

    sub_233020248(v85, &qword_268757C70, MEMORY[0x263F07490]);
    unint64_t v58 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    uint64_t v59 = v73;
    v58(v86, v73);
    v58(v87, v59);
    sub_233020248(v82, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
    sub_2330202A4((uint64_t)v83);
    return v56;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_233020188(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2330201DC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233020188(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_233020248(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233020188(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2330202A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_233020300(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25)
{
  if (a3)
  {
    id v47 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v47 = 0;
  }
  uint64_t v51 = a5;
  uint64_t v44 = (void *)sub_23309B130();
  uint64_t v27 = sub_23309B230();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(a7, 1, v27) != 1)
  {
    uint64_t v29 = sub_23309B210();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a7, v27);
  }
  id v43 = (void *)v29;
  if (a10)
  {
    id v42 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v42 = 0;
  }
  uint64_t v30 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v41 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  uint64_t v40 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v39 = (void *)sub_23309B130();
  uint64_t v31 = (void *)sub_23309B130();
  uint64_t v32 = sub_23309B190();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(a19, 1, v32) != 1)
  {
    uint64_t v34 = (void *)sub_23309B130();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a19, v32);
  }
  sub_232F3A800(0, &qword_268758558);
  id v35 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  uint64_t v36 = 0;
  if (a24 >> 60 != 15)
  {
    uint64_t v36 = (void *)sub_23309B010();
    sub_232F3F15C(a23, a24);
  }
  id v50 = objc_retainAutoreleasedReturnValue(objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_signedClinicalDataRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_credentialTypes_issuerIdentifier_issuedDate_relevantDate_expirationDate_signatureStatus_subject_items_dataValue_sourceType_, a1, v47, a4 & 1, v44, a6, v43, a8, a9, v42, v30, a13, v41, v40, v39, v31, v34,
            a20,
            a21,
            v35,
            v36,
            a25));

  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(a18, v32);
  v37(a17, v32);
  v37(v51, v32);
  return v50;
}

unint64_t sub_233020734(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_232F55814();
    uint64_t v2 = (void *)sub_23309BFB0();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v47;
  uint64_t v7 = v45;
  uint64_t v8 = &v41;
  uint64_t v9 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v34) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v19);
  int64_t v21 = v36 + 1;
  if (!v20)
  {
    int64_t v21 = v36 + 2;
    if (v36 + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v36 + 3;
      if (v36 + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v36 + 4;
        if (v36 + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v34) {
                break;
              }
              unint64_t v20 = *(void *)(v35 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_2330222F8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v36 = v21;
  uint64_t v37 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    id v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_232F397F8(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v39 = v25;
    uint64_t v40 = v24;
    sub_232F3A680(v7, &v38);
    sub_232F3A564();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    sub_232F3A680(v8, v9);
    sub_232F3A680(v9, v44);
    sub_232F3A680(v44, &v42);
    unint64_t result = sub_232F393E0(v27, v26);
    unint64_t v28 = result;
    if (v29)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v8;
      uint64_t v13 = v1;
      uint64_t v14 = v7;
      id v15 = v6;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v16 = v27;
      v16[1] = v26;
      uint64_t v6 = v15;
      uint64_t v7 = v14;
      uint64_t v1 = v13;
      uint64_t v8 = v12;
      uint64_t v9 = v11;
      uint64_t v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      unint64_t result = (unint64_t)sub_232F3A680(&v42, v17);
      unint64_t v5 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v30 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v30 = v27;
    v30[1] = v26;
    unint64_t result = (unint64_t)sub_232F3A680(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v2[2] = v33;
    unint64_t v5 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_233020AD0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_232F55814();
    uint64_t v2 = (void *)sub_23309BFB0();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x263F8EE58] + 8;
  uint64_t v11 = MEMORY[0x263F8D310];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_2330222F8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    uint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_232F3A680(v6, v7);
    sub_232F3A680(v7, v40);
    sub_232F3A680(v40, &v38);
    unint64_t result = sub_232F393E0(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      id v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      unint64_t result = (unint64_t)sub_232F3A680(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_232F3A680(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_233020E38(uint64_t a1)
{
  uint64_t v2 = sub_23309B280();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_233022234();
    uint64_t v9 = sub_23309BE00();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_2330222B4(&qword_268758580);
      uint64_t v16 = sub_23309B680();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_2330222B4(&qword_268758588);
          char v23 = sub_23309B6D0();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        unint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_233021124(id *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v121 = a3;
  id v122 = a4;
  id v130 = a2;
  uint64_t v8 = sub_23309B290();
  uint64_t v115 = *(void *)(v8 - 8);
  uint64_t v116 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v118 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23302213C(0, &qword_268757C70, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v120 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v113 - v14;
  uint64_t v16 = (void *)sub_23309B190();
  id v132 = (char *)*(v16 - 1);
  uint64_t v133 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  unint64_t v19 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  id v117 = (char *)&v113 - v20;
  sub_23302213C(0, &qword_268758560, MEMORY[0x263F063B0], v10);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v129 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v114 = (char *)&v113 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v113 - v26;
  sub_23302213C(0, &qword_268757D68, MEMORY[0x263F07508], v10);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v113 - v29;
  int64_t v31 = (void *)sub_23309B1F0();
  uint64_t v32 = (void *)*(v31 - 1);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v113 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v134 = a1;
  uint64_t v135 = (char *)&v113 - v36;
  id v37 = objc_msgSend(*a1, sel_signedClinicalDataRecordIdentifier);
  if (!v37) {
    goto LABEL_30;
  }
  long long v38 = v37;
  id v123 = a5;
  id v126 = v5;
  sub_23309B1D0();

  uint64_t v39 = (void (*)(char *, char *, void *))v32[4];
  v39(v30, v35, v31);
  ((void (*)(char *, void, uint64_t, void *))v32[7])(v30, 0, 1, v31);
  uint64_t v124 = v32;
  if (((unsigned int (*)(char *, uint64_t, void *))v32[6])(v30, 1, v31) == 1)
  {
LABEL_31:
    sub_233021FF8((uint64_t)v30, &qword_268757D68, MEMORY[0x263F07508]);
    uint64_t result = sub_23309BF70();
    __break(1u);
    return result;
  }
  uint64_t v125 = v31;
  v39(v135, v30, v31);
  uint64_t v40 = sub_23309AD60();
  uint64_t v127 = *(void **)(v40 - 8);
  uint64_t v128 = v40;
  uint64_t v41 = (void (*)(char *, uint64_t, uint64_t))v127[7];
  uint64_t v30 = v27;
  v41(v27, 1, 1);
  long long v42 = &selRef_setMedicalRecordMetadata_;
  id v43 = v130;
  id v44 = objc_msgSend(v130, sel_subject);
  id v45 = objc_msgSend(v44, sel_birthDate);

  uint64_t v131 = v30;
  if (!v45)
  {
    id v47 = v132;
    int64_t v31 = v133;
    uint64_t v119 = (void (*)(char *, uint64_t, uint64_t, void *))*((void *)v132 + 7);
    v119(v15, 1, 1, v133);
    goto LABEL_7;
  }
  id v46 = objc_msgSend(v45, sel_dateForUTC);

  sub_23309B160();
  id v47 = v132;
  int64_t v31 = v133;
  id v48 = (void (*)(char *, char *, void *))*((void *)v132 + 4);
  v48(v15, v19, v133);
  uint64_t v119 = (void (*)(char *, uint64_t, uint64_t, void *))*((void *)v47 + 7);
  v119(v15, 0, 1, v31);
  if ((*((unsigned int (**)(char *, uint64_t, void *))v47 + 6))(v15, 1, v31) == 1)
  {
    long long v42 = &selRef_setMedicalRecordMetadata_;
LABEL_7:
    sub_233021FF8((uint64_t)v15, &qword_268757C70, MEMORY[0x263F07490]);
    uint64_t v50 = v128;
    uint64_t v49 = (uint64_t)v129;
    goto LABEL_9;
  }
  v48(v117, v15, v31);
  id v51 = objc_msgSend(self, sel_referenceCalendar);
  sub_23309B270();

  sub_23302213C(0, &qword_268758570, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v52 = sub_23309B280();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(void *)(v53 + 72);
  uint64_t v55 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v113 = v41;
  uint64_t v56 = (v55 + 32) & ~v55;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_2330A72F0;
  uint64_t v58 = v57 + v56;
  uint64_t v59 = *(void (**)(uint64_t, void, uint64_t))(v53 + 104);
  v59(v58, *MEMORY[0x263F07878], v52);
  v59(v58 + v54, *MEMORY[0x263F078A0], v52);
  v59(v58 + 2 * v54, *MEMORY[0x263F078A8], v52);
  uint64_t v60 = 3 * v54;
  int64_t v31 = v133;
  uint64_t v30 = v131;
  v59(v58 + v60, *MEMORY[0x263F07870], v52);
  sub_233020E38(v57);
  swift_setDeallocating();
  swift_arrayDestroy();
  id v47 = v132;
  swift_deallocClassInstance();
  uint64_t v61 = (uint64_t)v114;
  id v63 = v117;
  uint64_t v62 = v118;
  sub_23309B260();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v62, v116);
  (*((void (**)(char *, void *))v47 + 1))(v63, v31);
  sub_233021FF8((uint64_t)v30, &qword_268758560, MEMORY[0x263F063B0]);
  uint64_t v64 = v128;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v113)(v61, 0, 1, v128);
  uint64_t v50 = v64;
  sub_2330221A0(v61, (uint64_t)v30);
  uint64_t v49 = (uint64_t)v129;
  long long v42 = &selRef_setMedicalRecordMetadata_;
LABEL_9:
  id v65 = [v43 v42[205]];
  id v66 = objc_msgSend(v65, sel_fullName);

  sub_23309B710();
  sub_233022068((uint64_t)v30, v49);
  id v67 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v68 = v127;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v127[6])(v49, 1, v50) == 1)
  {
    id v69 = 0;
  }
  else
  {
    id v69 = (void *)sub_23309ACF0();
    ((void (*)(uint64_t, uint64_t))v68[1])(v49, v50);
  }
  uint64_t v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A8D0]), sel_initWithFullName_dateOfBirthComponents_, v67, v69);

  sub_2330220FC();
  id v70 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_verifiableClinicalRecordTypeForIdentifier_, *MEMORY[0x263F0A048]);
  if (!v70)
  {
    __break(1u);
LABEL_30:
    ((void (*)(char *, uint64_t, uint64_t, void *))v32[7])(v30, 1, 1, v31);
    goto LABEL_31;
  }
  uint64_t v71 = v70;
  uint64_t v72 = (char *)v134 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v73 = type metadata accessor for ExtractionContext();
  uint64_t v74 = &v72[*(int *)(v73 + 28)];
  uint64_t v129 = (char *)sub_23309B130();
  uint64_t v128 = sub_23309B130();
  uint64_t v127 = objc_msgSend(v43, sel_device);
  uint64_t v75 = *(void *)&v72[*(int *)(v73 + 40)];
  id v132 = v74;
  uint64_t v133 = v32;
  id v130 = v71;
  if (v75)
  {
    uint64_t v76 = swift_bridgeObjectRetain();
    sub_233020734(v76);
    swift_bridgeObjectRelease();
    uint64_t v118 = (char *)sub_23309B640();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v118 = 0;
  }
  id v77 = (char *)objc_msgSend(v43, sel_credentialTypes);
  if (!v77)
  {
    sub_23309B9A0();
    id v77 = (char *)sub_23309B990();
    swift_bridgeObjectRelease();
  }
  id v117 = v77;
  id v78 = objc_msgSend(v43, sel_issuedDate);
  sub_23309B160();

  uint64_t v79 = sub_23309B130();
  id v80 = (void (*)(char *, void *))*((void *)v47 + 1);
  v80(v19, v31);
  id v81 = objc_msgSend(v43, sel_relevantDate);
  sub_23309B160();

  uint64_t v82 = sub_23309B130();
  v80(v19, v31);
  id v83 = objc_msgSend(v43, sel_expirationDate);
  if (v83)
  {
    uint64_t v84 = v83;
    sub_23309B160();

    uint64_t v85 = v120;
    (*((void (**)(char *, char *, void *))v47 + 4))(v120, v19, v31);
    v119(v85, 0, 1, v31);
    if ((*((unsigned int (**)(char *, uint64_t, void *))v47 + 6))(v85, 1, v31) == 1)
    {
      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = sub_23309B130();
      v80(v85, v31);
    }
  }
  else
  {
    v119(v120, 1, 1, v31);
    uint64_t v86 = 0;
  }
  id v87 = objc_msgSend(v43, sel_issuerIdentifier);
  if (!v87)
  {
    sub_23309B710();
    id v87 = (id)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  id v88 = (char *)sub_23309B990();
  uint64_t v120 = v88;
  swift_bridgeObjectRelease();
  long long v89 = (void *)sub_23309B010();
  id v122 = v89;
  uint64_t v90 = (void *)sub_23309B1C0();
  id v123 = v90;
  id v91 = objc_msgSend(v43, sel_sourceType);
  if (v91 == (id)2) {
    uint64_t v92 = 2;
  }
  else {
    uint64_t v92 = v91 == (id)1;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v111 = v90;
  uint64_t v112 = v92;
  uint64_t v109 = v88;
  uint64_t v110 = v89;
  uint64_t v107 = v82;
  uint64_t v108 = v86;
  uint64_t v106 = v79;
  long long v94 = (void *)v82;
  id v95 = v130;
  long long v96 = (void *)v79;
  long long v97 = (void *)v128;
  long long v98 = v129;
  long long v99 = v127;
  long long v100 = (void *)v86;
  long long v102 = v117;
  long long v101 = v118;
  id v126 = objc_msgSend(ObjCClassFromMetadata, sel_verifiableClinicalRecordWithType_startDate_endDate_device_metadata_recordTypes_issuedDate_relevantDate_expirationDate_issuerIdentifier_subject_itemNames_dataRepresentation_originIdentifier_sourceType_, v130, v129, v128, v127, v118, v117, v106, v107, v108, v87, v133, v109, v110, v111, v112);

  id v103 = v126;
  long long v104 = (void *)sub_23309B130();
  objc_msgSend(v103, sel_setCreationDate_, v104);

  sub_233021FF8((uint64_t)v131, &qword_268758560, MEMORY[0x263F063B0]);
  ((void (*)(char *, void *))v124[1])(v135, v125);
  sub_2330202A4((uint64_t)v134);
  return (uint64_t)v103;
}

uint64_t sub_233021FF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23302213C(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_233022068(uint64_t a1, uint64_t a2)
{
  sub_23302213C(0, &qword_268758560, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_2330220FC()
{
  unint64_t result = qword_268758568;
  if (!qword_268758568)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268758568);
  }
  return result;
}

void sub_23302213C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_2330221A0(uint64_t a1, uint64_t a2)
{
  sub_23302213C(0, &qword_268758560, MEMORY[0x263F063B0], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_233022234()
{
  if (!qword_268758578)
  {
    sub_23309B280();
    sub_2330222B4(&qword_268758580);
    unint64_t v0 = sub_23309BE10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758578);
    }
  }
}

uint64_t sub_2330222B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23309B280();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2330222F8()
{
  return swift_release();
}

id ReferenceRange.asReferenceRange()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for ReferenceRange();
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  unint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v54 - v9;
  sub_233024110(v1, (uint64_t)&v54 - v9, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v11 = type metadata accessor for Quantity();
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  if (v12(v10, 1, v11) == 1)
  {
    sub_2330250A0((uint64_t)v10, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = Quantity.asCodedQuantity()();
    sub_23302845C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  sub_233024110(v1 + v2[5], (uint64_t)v8, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v12(v8, 1, v11) == 1)
  {
    sub_2330250A0((uint64_t)v8, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = Quantity.asCodedQuantity()();
    sub_23302845C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v28 = (uint64_t *)(v1 + v2[6]);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  uint64_t v31 = v28[2];
  sub_233022B74(v1, (uint64_t)v4);
  if (v30 == 1)
  {
    uint64_t v32 = (uint64_t *)&v4[v2[8]];
    uint64_t v29 = *v32;
    uint64_t v30 = v32[1];
    uint64_t v31 = v32[2];
    sub_232E967F8(*v32, v30);
    sub_23302845C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
    if (v30 == 1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!v13) {
        goto LABEL_41;
      }
      goto LABEL_29;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23302845C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
  }
  uint64_t v56 = v29;
  uint64_t v57 = v30;
  uint64_t v58 = v31;
  uint64_t v34 = (void *)sub_233001A34();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v34, sel_codings);
  sub_232F40368();
  unint64_t v36 = sub_23309B9A0();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_23309BF80();
    if (v37)
    {
LABEL_17:
      uint64_t v55 = v34;
      uint64_t v38 = 4;
      while (1)
      {
        if ((v36 & 0xC000000000000001) != 0) {
          id v39 = (id)MEMORY[0x237DB5EA0](v38 - 4, v36);
        }
        else {
          id v39 = *(id *)(v36 + 8 * v38);
        }
        uint64_t v40 = v39;
        uint64_t v41 = v38 - 3;
        if (__OFADD__(v38 - 4, 1))
        {
          __break(1u);
          swift_once();
          uint64_t v15 = sub_23309B4B0();
          __swift_project_value_buffer(v15, (uint64_t)qword_268770F68);
          id v16 = (id)v36;
          id v17 = (id)v36;
          uint64_t v18 = sub_23309B4A0();
          os_log_type_t v19 = sub_23309BB80();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = (uint8_t *)swift_slowAlloc();
            uint64_t v21 = swift_slowAlloc();
            uint64_t v59 = v21;
            *(_DWORD *)uint64_t v20 = 136446210;
            uint64_t v56 = v36;
            id v22 = (id)v36;
            id v23 = (id)v36;
            sub_232F3DAA0();
            sub_23309C320();
            id v24 = (id)HKSensitiveLogItem();
            swift_unknownObjectRelease();
            sub_23309BDB0();
            swift_unknownObjectRelease();
            uint64_t v25 = sub_23309B770();
            unint64_t v27 = v26;

            uint64_t v56 = sub_232F62B64(v25, v27, &v59);
            sub_23309BD10();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_232E63000, v18, v19, "ModelsBase.ReferenceRange caught extraction failure: %{public}s", v20, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x237DB6EC0](v21, -1, -1);
            MEMORY[0x237DB6EC0](v20, -1, -1);
          }
          else
          {
          }
          return 0;
        }
        id v42 = objc_msgSend(v39, sel_displayString);
        if (v42) {
          break;
        }

        ++v38;
        if (v41 == v37)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
      }
      id v43 = v42;
      swift_bridgeObjectRelease_n();

      id v44 = objc_msgSend(v40, sel_displayString);
      if (v44)
      {
        sub_23309B710();
        uint64_t v33 = v45;

        goto LABEL_28;
      }
LABEL_27:
      uint64_t v33 = 0;
LABEL_28:
      uint64_t v34 = v55;
      if (!v13) {
        goto LABEL_41;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v37) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v33 = 0;
  if (!v13)
  {
LABEL_41:
    if (v14)
    {
      uint64_t v52 = v14;
      if (v33)
      {
        uint64_t v13 = (void *)sub_23309B6E0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = 0;
      }
      id v51 = objc_msgSend(self, sel_referenceRangeWithIdentifier_maxValue_, v13, v14);

LABEL_48:
      return v51;
    }

    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_29:
  if (v14)
  {
    id v46 = v13;
    id v47 = v14;
    if (v33)
    {
      id v48 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v48 = 0;
    }
    id v51 = objc_msgSend(self, sel_referenceRangeWithIdentifier_minValue_maxValue_, v48, v13, v14);

    goto LABEL_48;
  }
  id v49 = v13;
  if (v33)
  {
    uint64_t v50 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = 0;
  }
  id v51 = objc_msgSend(self, sel_referenceRangeWithIdentifier_minValue_, v50, v13);

  return v51;
}

uint64_t type metadata accessor for ReferenceRange()
{
  uint64_t result = qword_2687585B8;
  if (!qword_2687585B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_233022B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReferenceRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ReferenceRange.low.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233024110(v1, a1, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ReferenceRange.high.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ReferenceRange();
  return sub_233024110(v1 + *(int *)(v3 + 20), a1, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ReferenceRange.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 24));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ReferenceRange.appliesTo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 28));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ReferenceRange.meaning.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ReferenceRange() + 32));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ReferenceRange.age.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ReferenceRange();
  return sub_233024110(v1 + *(int *)(v3 + 36), a1, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
}

uint64_t ReferenceRange.text.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ReferenceRange() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReferenceRange.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v35 - v12;
  sub_233024110(v2, (uint64_t)&v35 - v12, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v14(v13, 1, v4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23302AC88((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_23302845C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v15 = (int *)type metadata accessor for ReferenceRange();
  sub_233024110(v2 + v15[5], (uint64_t)v11, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v14(v11, 1, v4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23302AC88((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_23302845C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  id v16 = (uint64_t *)(v2 + v15[6]);
  uint64_t v17 = v16[1];
  if (v17 == 1)
  {
    sub_23309C3F0();
    goto LABEL_15;
  }
  uint64_t v18 = *v16;
  uint64_t v19 = v16[2];
  sub_23309C3F0();
  if (!v17)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_11;
    }
LABEL_13:
    sub_23309C3F0();
    uint64_t v20 = v18;
    uint64_t v21 = v17;
    goto LABEL_14;
  }
  sub_23309C3F0();
  sub_232E967F8(v18, v17);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_13;
  }
LABEL_11:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = v18;
  uint64_t v21 = v17;
LABEL_14:
  sub_232E96840(v20, v21);
LABEL_15:
  id v22 = (uint64_t *)(v2 + v15[7]);
  uint64_t v23 = v22[1];
  if (v23 == 1)
  {
    sub_23309C3F0();
    goto LABEL_23;
  }
  uint64_t v24 = *v22;
  uint64_t v25 = v22[2];
  sub_23309C3F0();
  if (!v23)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v25) {
      goto LABEL_19;
    }
LABEL_21:
    sub_23309C3F0();
    uint64_t v26 = v24;
    uint64_t v27 = v23;
    goto LABEL_22;
  }
  sub_23309C3F0();
  sub_232E967F8(v24, v23);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_21;
  }
LABEL_19:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = v24;
  uint64_t v27 = v23;
LABEL_22:
  sub_232E96840(v26, v27);
LABEL_23:
  uint64_t v28 = (uint64_t *)(v2 + v15[8]);
  uint64_t v29 = v28[1];
  if (v29 == 1)
  {
    sub_23309C3F0();
    goto LABEL_31;
  }
  uint64_t v30 = *v28;
  uint64_t v31 = v28[2];
  sub_23309C3F0();
  if (!v29)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v31) {
      goto LABEL_27;
    }
LABEL_29:
    sub_23309C3F0();
    uint64_t v32 = v30;
    uint64_t v33 = v29;
    goto LABEL_30;
  }
  sub_23309C3F0();
  sub_232E967F8(v30, v29);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v31) {
    goto LABEL_29;
  }
LABEL_27:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v31);
  swift_bridgeObjectRelease();
  uint64_t v32 = v30;
  uint64_t v33 = v29;
LABEL_30:
  sub_232E96840(v32, v33);
LABEL_31:
  sub_232EB3350(a1);
  if (!*(void *)(v2 + v15[10] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2330233A8()
{
  uint64_t result = 7827308;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1751607656;
      break;
    case 2:
      uint64_t result = 1701869940;
      break;
    case 3:
      uint64_t result = 0x547365696C707061;
      break;
    case 4:
      uint64_t result = 0x676E696E61656DLL;
      break;
    case 5:
      uint64_t result = 6645601;
      break;
    case 6:
      uint64_t result = 1954047348;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233023464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23302A924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23302348C(uint64_t a1)
{
  unint64_t v2 = sub_233024FE8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2330234C8(uint64_t a1)
{
  unint64_t v2 = sub_233024FE8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ReferenceRange.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_23302503C(0, &qword_268758590, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233024FE8();
  sub_23309C480();
  LOBYTE(v18) = 0;
  type metadata accessor for Quantity();
  sub_23302525C(&qword_268756AD8, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_23309C150();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for ReferenceRange();
    LOBYTE(v18) = 1;
    sub_23309C150();
    uint64_t v11 = (long long *)(v3 + v10[6]);
    uint64_t v12 = *((void *)v11 + 2);
    long long v18 = *v11;
    uint64_t v19 = v12;
    char v20 = 2;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v13 = (long long *)(v3 + v10[7]);
    uint64_t v14 = *((void *)v13 + 2);
    long long v18 = *v13;
    uint64_t v19 = v14;
    char v20 = 3;
    sub_23309C150();
    uint64_t v15 = (long long *)(v3 + v10[8]);
    uint64_t v16 = *((void *)v15 + 2);
    long long v18 = *v15;
    uint64_t v19 = v16;
    char v20 = 4;
    sub_23309C150();
    LOBYTE(v18) = 5;
    type metadata accessor for Range();
    sub_23302525C(&qword_268757340, (void (*)(uint64_t))type metadata accessor for Range);
    sub_23309C150();
    LOBYTE(v18) = 6;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ReferenceRange.hashValue.getter()
{
  sub_23309C3D0();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t ReferenceRange.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v38 - v4;
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v38 - v10;
  sub_23302503C(0, &qword_2687585A0, MEMORY[0x263F8E040]);
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v38 - v13;
  uint64_t v15 = type metadata accessor for ReferenceRange();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_233024FE8();
  id v44 = v14;
  uint64_t v19 = (uint64_t)v46;
  sub_23309C460();
  if (v19) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  }
  id v39 = v5;
  uint64_t v40 = (int *)v15;
  id v46 = v17;
  type metadata accessor for Quantity();
  LOBYTE(v47) = 0;
  sub_23302525C(&qword_2687568A0, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v20 = v43;
  sub_23309C080();
  uint64_t v21 = (uint64_t)v46;
  sub_2330250FC((uint64_t)v11, (uint64_t)v46, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  LOBYTE(v47) = 1;
  sub_23309C080();
  id v22 = v40;
  sub_2330250FC((uint64_t)v9, v21 + v40[5], &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  char v49 = 2;
  sub_232EA391C();
  sub_23309C080();
  uint64_t v23 = v21;
  uint64_t v24 = v48;
  uint64_t v25 = v21 + v22[6];
  *(_OWORD *)uint64_t v25 = v47;
  *(void *)(v25 + 16) = v24;
  char v49 = 3;
  sub_23309C080();
  uint64_t v26 = v48;
  uint64_t v27 = v21 + v22[7];
  *(_OWORD *)uint64_t v27 = v47;
  *(void *)(v27 + 16) = v26;
  char v49 = 4;
  uint64_t v28 = v44;
  v38[1] = 0;
  sub_23309C080();
  uint64_t v29 = v48;
  uint64_t v30 = v21 + v22[8];
  *(_OWORD *)uint64_t v30 = v47;
  *(void *)(v30 + 16) = v29;
  type metadata accessor for Range();
  LOBYTE(v47) = 5;
  sub_23302525C(&qword_268757338, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v31 = (uint64_t)v39;
  sub_23309C080();
  uint64_t v32 = v42;
  sub_2330250FC(v31, v23 + v22[9], &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  LOBYTE(v47) = 6;
  uint64_t v33 = sub_23309C040();
  uint64_t v35 = v34;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v20);
  unint64_t v36 = (uint64_t *)(v23 + v22[10]);
  *unint64_t v36 = v33;
  v36[1] = v35;
  sub_233022B74(v23, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return sub_23302845C(v23, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
}

uint64_t sub_23302405C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ReferenceRange.init(from:)(a1, a2);
}

uint64_t sub_233024074(void *a1)
{
  return ReferenceRange.encode(to:)(a1);
}

uint64_t sub_23302408C()
{
  sub_23309C3D0();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_2330240D0()
{
  sub_23309C3D0();
  ReferenceRange.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_233024110(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233025D08(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s23HealthRecordsExtraction14ReferenceRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = a2;
  uint64_t v3 = type metadata accessor for Range();
  uint64_t v99 = *(void *)(v3 - 8);
  uint64_t v100 = v3;
  MEMORY[0x270FA5388](v3);
  long long v96 = &v94[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23302ABC8(0, &qword_2687585E0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v98 = v5;
  MEMORY[0x270FA5388](v5);
  long long v101 = &v94[-v6];
  sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  long long v97 = &v94[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v103 = &v94[-v11];
  MEMORY[0x270FA5388](v10);
  long long v102 = &v94[-v12];
  uint64_t v13 = type metadata accessor for Quantity();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v105 = &v94[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23302ABC8(0, (unint64_t *)&qword_268756F60, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v17 = v16;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v107 = &v94[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = &v94[-v20];
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  long long v104 = &v94[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v109 = &v94[-v26];
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v110 = &v94[-v28];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = &v94[-v30];
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = &v94[-v33];
  MEMORY[0x270FA5388](v32);
  unint64_t v36 = &v94[-v35];
  uint64_t v108 = a1;
  sub_233024110(a1, (uint64_t)&v94[-v35], &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_233024110(v111, (uint64_t)v34, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v106 = v17;
  uint64_t v37 = *(int *)(v17 + 48);
  uint64_t v38 = v13;
  uint64_t v39 = (uint64_t)&v21[v37];
  sub_233024110((uint64_t)v36, (uint64_t)v21, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_233024110((uint64_t)v34, v39, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v40((uint64_t)v21, 1, v38) == 1)
  {
    sub_2330250A0((uint64_t)v34, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_2330250A0((uint64_t)v36, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    if (v40(v39, 1, v38) == 1)
    {
      sub_2330250A0((uint64_t)v21, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v41 = (unint64_t *)&qword_268756F60;
    uint64_t v42 = &qword_268756578;
    uint64_t v43 = type metadata accessor for Quantity;
    uint64_t v44 = (uint64_t)v21;
LABEL_14:
    sub_23302AC2C(v44, v41, v42, (void (*)(uint64_t))v43);
    return 0;
  }
  sub_233024110((uint64_t)v21, (uint64_t)v31, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40(v39, 1, v38) == 1)
  {
    sub_2330250A0((uint64_t)v34, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_2330250A0((uint64_t)v36, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_23302845C((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for Quantity);
    goto LABEL_6;
  }
  uint64_t v45 = v105;
  sub_23302AC88(v39, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for Quantity);
  int v95 = static Quantity.== infix(_:_:)(v31, v45);
  sub_23302845C((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v34, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v36, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_23302845C((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v21, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if ((v95 & 1) == 0) {
    return 0;
  }
LABEL_8:
  uint64_t v46 = type metadata accessor for ReferenceRange();
  long long v47 = v110;
  sub_233024110(v108 + *(int *)(v46 + 20), (uint64_t)v110, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v48 = v109;
  sub_233024110(v111 + *(int *)(v46 + 20), (uint64_t)v109, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  char v49 = v107;
  uint64_t v50 = (uint64_t)&v107[*(int *)(v106 + 48)];
  sub_233024110((uint64_t)v47, (uint64_t)v107, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_233024110((uint64_t)v48, v50, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40((uint64_t)v49, 1, v38) == 1)
  {
    sub_2330250A0((uint64_t)v48, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_2330250A0((uint64_t)v47, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    if (v40(v50, 1, v38) == 1)
    {
      sub_2330250A0((uint64_t)v49, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  id v51 = v104;
  sub_233024110((uint64_t)v49, (uint64_t)v104, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v40(v50, 1, v38) == 1)
  {
    sub_2330250A0((uint64_t)v109, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_2330250A0((uint64_t)v110, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_23302845C((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for Quantity);
LABEL_13:
    uint64_t v41 = (unint64_t *)&qword_268756F60;
    uint64_t v42 = &qword_268756578;
    uint64_t v43 = type metadata accessor for Quantity;
    uint64_t v44 = (uint64_t)v49;
    goto LABEL_14;
  }
  uint64_t v53 = (uint64_t)v51;
  uint64_t v54 = v105;
  sub_23302AC88(v50, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for Quantity);
  char v55 = static Quantity.== infix(_:_:)(v53, v54);
  sub_23302845C((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v109, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v110, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_23302845C(v53, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_2330250A0((uint64_t)v49, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if ((v55 & 1) == 0) {
    return 0;
  }
LABEL_17:
  uint64_t v56 = (int *)v46;
  uint64_t v57 = *(int *)(v46 + 24);
  uint64_t v58 = v108;
  uint64_t v60 = *(void *)(v108 + v57);
  uint64_t v59 = *(void *)(v108 + v57 + 8);
  uint64_t v61 = *(void *)(v108 + v57 + 16);
  uint64_t v62 = v111;
  id v63 = (uint64_t *)(v111 + v57);
  uint64_t v65 = *v63;
  uint64_t v64 = v63[1];
  uint64_t v66 = v63[2];
  if (v59 == 1)
  {
    uint64_t v67 = (uint64_t)v103;
    if (v64 != 1) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v115 = v60;
    uint64_t v116 = v59;
    uint64_t v117 = v61;
    uint64_t v67 = (uint64_t)v103;
    if (v64 == 1) {
      goto LABEL_31;
    }
    uint64_t v112 = v65;
    uint64_t v113 = v64;
    uint64_t v114 = v66;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v68 = static CodeableConcept.== infix(_:_:)(&v115, &v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v60, v59);
    if ((v68 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v69 = v56[7];
  uint64_t v60 = *(void *)(v58 + v69);
  uint64_t v59 = *(void *)(v58 + v69 + 8);
  uint64_t v70 = *(void *)(v58 + v69 + 16);
  uint64_t v71 = (uint64_t *)(v62 + v69);
  uint64_t v65 = *v71;
  uint64_t v64 = v71[1];
  uint64_t v72 = v71[2];
  if (v59 == 1)
  {
    if (v64 != 1) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v115 = v60;
    uint64_t v116 = v59;
    uint64_t v117 = v70;
    if (v64 == 1) {
      goto LABEL_31;
    }
    uint64_t v112 = v65;
    uint64_t v113 = v64;
    uint64_t v114 = v72;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v73 = static CodeableConcept.== infix(_:_:)(&v115, &v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v60, v59);
    if ((v73 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v74 = v56[8];
  uint64_t v60 = *(void *)(v58 + v74);
  uint64_t v59 = *(void *)(v58 + v74 + 8);
  uint64_t v75 = *(void *)(v58 + v74 + 16);
  uint64_t v76 = (uint64_t *)(v62 + v74);
  uint64_t v65 = *v76;
  uint64_t v64 = v76[1];
  uint64_t v77 = v76[2];
  if (v59 == 1)
  {
    if (v64 == 1) {
      goto LABEL_34;
    }
LABEL_32:
    sub_232E967F8(v65, v64);
    sub_232E96840(v60, v59);
    sub_232E96840(v65, v64);
    return 0;
  }
  uint64_t v115 = v60;
  uint64_t v116 = v59;
  uint64_t v117 = v75;
  if (v64 == 1)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_32;
  }
  uint64_t v112 = v65;
  uint64_t v113 = v64;
  uint64_t v114 = v77;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v78 = static CodeableConcept.== infix(_:_:)(&v115, &v112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v60, v59);
  if ((v78 & 1) == 0) {
    return 0;
  }
LABEL_34:
  uint64_t v79 = v102;
  sub_233024110(v58 + v56[9], (uint64_t)v102, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  sub_233024110(v62 + v56[9], v67, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  id v80 = v101;
  id v81 = &v101[*(int *)(v98 + 48)];
  sub_233024110((uint64_t)v79, (uint64_t)v101, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v110 = v81;
  sub_233024110(v67, (uint64_t)v81, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v82 = v100;
  id v83 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v99 + 48);
  if (v83(v80, 1, v100) == 1)
  {
    sub_2330250A0(v67, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    sub_2330250A0((uint64_t)v79, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    if (v83(v110, 1, v82) == 1)
    {
      sub_2330250A0((uint64_t)v80, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  uint64_t v84 = v97;
  sub_233024110((uint64_t)v80, (uint64_t)v97, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v85 = v110;
  if (v83(v110, 1, v82) == 1)
  {
    sub_2330250A0(v67, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    sub_2330250A0((uint64_t)v102, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    sub_23302845C((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for Range);
LABEL_39:
    uint64_t v41 = &qword_2687585E0;
    uint64_t v42 = &qword_268756570;
    uint64_t v43 = type metadata accessor for Range;
    uint64_t v44 = (uint64_t)v80;
    goto LABEL_14;
  }
  uint64_t v86 = (uint64_t)v84;
  id v87 = v96;
  sub_23302AC88((uint64_t)v85, (uint64_t)v96, (uint64_t (*)(void))type metadata accessor for Range);
  BOOL v88 = _s23HealthRecordsExtraction5RangeV2eeoiySbAC_ACtFZ_0(v86, (uint64_t)v87);
  sub_23302845C((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for Range);
  sub_2330250A0(v67, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  sub_2330250A0((uint64_t)v102, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  sub_23302845C(v86, (uint64_t (*)(void))type metadata accessor for Range);
  sub_2330250A0((uint64_t)v80, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  if (!v88) {
    return 0;
  }
LABEL_41:
  uint64_t v89 = v56[10];
  uint64_t v90 = (void *)(v58 + v89);
  uint64_t v91 = *(void *)(v58 + v89 + 8);
  uint64_t v92 = (void *)(v62 + v89);
  uint64_t v93 = v92[1];
  if (v91)
  {
    if (!v93 || (*v90 != *v92 || v91 != v93) && (sub_23309C220() & 1) == 0) {
      return 0;
    }
  }
  else if (v93)
  {
    return 0;
  }
  return 1;
}

unint64_t sub_233024FE8()
{
  unint64_t result = qword_268758598;
  if (!qword_268758598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758598);
  }
  return result;
}

void sub_23302503C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233024FE8();
    unint64_t v7 = a3(a1, &type metadata for ReferenceRange.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_2330250A0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233025D08(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2330250FC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233025D08(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_233025168(void *a1)
{
  a1[1] = sub_23302525C(&qword_2687568B8, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
  a1[2] = sub_23302525C(&qword_268756AE8, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
  uint64_t result = sub_23302525C(&qword_2687585A8, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
  a1[3] = result;
  return result;
}

uint64_t sub_233025214()
{
  return sub_23302525C(&qword_2687585B0, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
}

uint64_t sub_23302525C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReferenceRange(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for Quantity();
    uint64_t v109 = *(void *)(v7 - 8);
    uint64_t v8 = *(unsigned int (**)(void, void, void))(v109 + 48);
    uint64_t v108 = v7;
    if (v8(a2, 1, v7))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      id v103 = v8;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
      uint64_t v11 = a2[4];
      a1[3] = a2[3];
      a1[4] = v11;
      uint64_t v12 = a2[6];
      a1[5] = a2[5];
      a1[6] = v12;
      uint64_t v13 = *(int *)(v7 + 28);
      __dst = (char *)a1 + v13;
      uint64_t v14 = (char *)a2 + v13;
      uint64_t v15 = sub_23309AF80();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      uint64_t v7 = v108;
      uint64_t v19 = *(int *)(v108 + 32);
      uint64_t v20 = (uint64_t *)((char *)a1 + v19);
      uint64_t v21 = (uint64_t *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      uint64_t v23 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v109 + 56);
      swift_bridgeObjectRetain();
      v23(a1, 0, 1, v108);
      uint64_t v8 = (unsigned int (*)(void, void, void))v103;
    }
    uint64_t v24 = v6[5];
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    if (v8((char *)a2 + v24, 1, v7))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      long long v104 = v8;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(void *)((char *)v25 + 13) = *(void *)((char *)v26 + 13);
      uint64_t v28 = v7;
      uint64_t v29 = v26[4];
      v25[3] = v26[3];
      v25[4] = v29;
      uint64_t v30 = v26[6];
      v25[5] = v26[5];
      v25[6] = v30;
      uint64_t v31 = *(int *)(v28 + 28);
      int v95 = (char *)v25 + v31;
      uint64_t v98 = (char *)v26 + v31;
      __dsta = v6;
      uint64_t v32 = sub_23309AF80();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v98, 1, v32))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v95, v98, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v95, v98, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v95, 0, 1, v32);
      }
      uint64_t v7 = v108;
      uint64_t v36 = *(int *)(v108 + 32);
      uint64_t v37 = (void *)((char *)v25 + v36);
      uint64_t v38 = (void *)((char *)v26 + v36);
      uint64_t v39 = v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v39;
      uint64_t v40 = *(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56);
      swift_bridgeObjectRetain();
      v40(v25, 0, 1, v108);
      uint64_t v6 = __dsta;
      uint64_t v8 = (unsigned int (*)(void, void, void))v104;
    }
    uint64_t v41 = v6[6];
    uint64_t v42 = (char *)a1 + v41;
    uint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = *((void *)v43 + 1);
    if (v44 == 1)
    {
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((void *)v42 + 2) = *((void *)v43 + 2);
    }
    else
    {
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = v44;
      *((void *)v42 + 2) = *((void *)v43 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v45 = v6[7];
    uint64_t v46 = (char *)a1 + v45;
    long long v47 = (char *)a2 + v45;
    uint64_t v48 = *((void *)v47 + 1);
    if (v48 == 1)
    {
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      *((void *)v46 + 2) = *((void *)v47 + 2);
    }
    else
    {
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = v48;
      *((void *)v46 + 2) = *((void *)v47 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v49 = v6[8];
    uint64_t v50 = (char *)a1 + v49;
    id v51 = (char *)a2 + v49;
    uint64_t v52 = *((void *)v51 + 1);
    if (v52 == 1)
    {
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
      *((void *)v50 + 2) = *((void *)v51 + 2);
    }
    else
    {
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = v52;
      *((void *)v50 + 2) = *((void *)v51 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v53 = v6[9];
    uint64_t v54 = (uint64_t *)((char *)a1 + v53);
    char v55 = (uint64_t *)((char *)a2 + v53);
    uint64_t v56 = type metadata accessor for Range();
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      uint64_t v99 = v57;
      if (v8(v55, 1, v7))
      {
        sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
        memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v105 = v8;
        *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        *(void *)((char *)v54 + 13) = *(void *)((char *)v55 + 13);
        uint64_t v60 = v55[4];
        v54[3] = v55[3];
        v54[4] = v60;
        uint64_t v61 = v55[6];
        v54[5] = v55[5];
        v54[6] = v61;
        uint64_t v62 = *(int *)(v7 + 28);
        long long v94 = (char *)v54 + v62;
        long long v96 = (char *)v55 + v62;
        uint64_t v63 = sub_23309AF80();
        uint64_t v93 = *(void *)(v63 - 8);
        uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v64(v96, 1, v63))
        {
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          memcpy(v94, v96, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v94, v96, v63);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v94, 0, 1, v63);
        }
        uint64_t v7 = v108;
        uint64_t v8 = (unsigned int (*)(void, void, void))v105;
        uint64_t v66 = *(int *)(v108 + 32);
        uint64_t v67 = (void *)((char *)v54 + v66);
        char v68 = (void *)((char *)v55 + v66);
        uint64_t v69 = v68[1];
        *uint64_t v67 = *v68;
        v67[1] = v69;
        uint64_t v70 = *(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56);
        swift_bridgeObjectRetain();
        v70(v54, 0, 1, v108);
      }
      uint64_t v71 = *(int *)(v56 + 20);
      uint64_t v72 = (void *)((char *)v54 + v71);
      char v73 = (void *)((char *)v55 + v71);
      if (v8(v73, 1, v7))
      {
        sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        *(void *)((char *)v72 + 13) = *(void *)((char *)v73 + 13);
        uint64_t v75 = v7;
        uint64_t v76 = v73[4];
        v72[3] = v73[3];
        v72[4] = v76;
        uint64_t v77 = v73[6];
        v72[5] = v73[5];
        v72[6] = v77;
        uint64_t v78 = *(int *)(v75 + 28);
        __dstb = v6;
        uint64_t v106 = (char *)v72 + v78;
        uint64_t v107 = (char *)v73 + v78;
        uint64_t v79 = sub_23309AF80();
        long long v97 = *(void **)(v79 - 8);
        id v80 = (unsigned int (*)(char *, uint64_t, uint64_t))v97[6];
        uint64_t v81 = v79;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v80(v107, 1, v81))
        {
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          memcpy(v106, v107, *(void *)(*(void *)(v82 - 8) + 64));
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v97[2])(v106, v107, v81);
          ((void (*)(char *, void, uint64_t, uint64_t))v97[7])(v106, 0, 1, v81);
        }
        uint64_t v83 = *(int *)(v108 + 32);
        uint64_t v84 = (void *)((char *)v72 + v83);
        uint64_t v85 = (void *)((char *)v73 + v83);
        uint64_t v86 = v85[1];
        *uint64_t v84 = *v85;
        v84[1] = v86;
        id v87 = *(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56);
        swift_bridgeObjectRetain();
        v87(v72, 0, 1, v108);
        uint64_t v6 = __dstb;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v99 + 56))(v54, 0, 1, v56);
    }
    uint64_t v88 = v6[10];
    uint64_t v89 = (uint64_t *)((char *)a1 + v88);
    uint64_t v90 = (uint64_t *)((char *)a2 + v88);
    uint64_t v91 = v90[1];
    *uint64_t v89 = *v90;
    v89[1] = v91;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void sub_233025D08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for ReferenceRange(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = a1 + *(int *)(v4 + 28);
    uint64_t v7 = sub_23309AF80();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + a2[5];
  if (!v5(v9, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v9 + *(int *)(v4 + 28);
    uint64_t v11 = sub_23309AF80();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[6] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[7] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[8] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = a1 + a2[9];
  uint64_t v14 = type metadata accessor for Range();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    if (!v5(v13, 1, v4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v13 + *(int *)(v4 + 28);
      uint64_t v16 = sub_23309AF80();
      uint64_t v17 = *(void *)(v16 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v13 + *(int *)(v14 + 20);
    if (!v5(v18, 1, v4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v18 + *(int *)(v4 + 28);
      uint64_t v20 = sub_23309AF80();
      uint64_t v21 = *(void *)(v20 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      }
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ReferenceRange(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v7 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v104 + 48);
  uint64_t v105 = v6;
  if (v7(a2, 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
    uint64_t v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    uint64_t v10 = v6;
    uint64_t v11 = a2[6];
    a1[5] = a2[5];
    a1[6] = v11;
    uint64_t v12 = *(int *)(v10 + 28);
    __dst = (char *)a1 + v12;
    uint64_t v13 = (char *)a2 + v12;
    uint64_t v14 = sub_23309AF80();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v6 = v105;
    uint64_t v18 = *(int *)(v105 + 32);
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56);
    swift_bridgeObjectRetain();
    v22(a1, 0, 1, v105);
  }
  uint64_t v23 = a3[5];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  if (v7((void *)((char *)a2 + v23), 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    __dsta = a3;
    long long v101 = v7;
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *(void *)((char *)v24 + 13) = *(void *)((char *)v25 + 13);
    uint64_t v27 = v25[4];
    v24[3] = v25[3];
    v24[4] = v27;
    uint64_t v28 = v25[6];
    v24[5] = v25[5];
    v24[6] = v28;
    uint64_t v29 = *(int *)(v6 + 28);
    uint64_t v92 = a2;
    int v95 = (char *)v24 + v29;
    uint64_t v30 = (char *)v25 + v29;
    uint64_t v31 = sub_23309AF80();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v95, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v95, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v95, 0, 1, v31);
    }
    uint64_t v6 = v105;
    uint64_t v35 = *(int *)(v105 + 32);
    uint64_t v36 = (void *)((char *)v24 + v35);
    uint64_t v37 = (void *)((char *)v25 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = *(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56);
    swift_bridgeObjectRetain();
    v39(v24, 0, 1, v105);
    a3 = __dsta;
    uint64_t v7 = v101;
    a2 = v92;
  }
  uint64_t v40 = a3[6];
  uint64_t v41 = (char *)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  uint64_t v43 = *((void *)v42 + 1);
  if (v43 == 1)
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *((void *)v41 + 2) = *((void *)v42 + 2);
  }
  else
  {
    *(void *)uint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = v43;
    *((void *)v41 + 2) = *((void *)v42 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v44 = a3[7];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = *((void *)v46 + 1);
  if (v47 == 1)
  {
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    *((void *)v45 + 2) = *((void *)v46 + 2);
  }
  else
  {
    *(void *)uint64_t v45 = *(void *)v46;
    *((void *)v45 + 1) = v47;
    *((void *)v45 + 2) = *((void *)v46 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v48 = a3[8];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = *((void *)v50 + 1);
  if (v51 == 1)
  {
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *((void *)v49 + 2) = *((void *)v50 + 2);
  }
  else
  {
    *(void *)uint64_t v49 = *(void *)v50;
    *((void *)v49 + 1) = v51;
    *((void *)v49 + 2) = *((void *)v50 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v52 = a3[9];
  uint64_t v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  uint64_t v55 = type metadata accessor for Range();
  uint64_t v56 = *(void **)(v55 - 8);
  if ((*((unsigned int (**)(void *, uint64_t, uint64_t))v56 + 6))(v54, 1, v55))
  {
    sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    if (v7(v54, 1, v6))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v53, v54, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      long long v96 = v56;
      __dstb = a3;
      long long v102 = v7;
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      *(void *)((char *)v53 + 13) = *(void *)((char *)v54 + 13);
      uint64_t v59 = v54[4];
      v53[3] = v54[3];
      v53[4] = v59;
      uint64_t v60 = v54[6];
      v53[5] = v54[5];
      v53[6] = v60;
      uint64_t v61 = *(int *)(v6 + 28);
      uint64_t v90 = (char *)v54 + v61;
      uint64_t v93 = (char *)v53 + v61;
      uint64_t v62 = sub_23309AF80();
      uint64_t v63 = *(void *)(v62 - 8);
      uint64_t v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v89(v90, 1, v62))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v93, v90, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v93, v90, v62);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v93, 0, 1, v62);
      }
      uint64_t v6 = v105;
      uint64_t v65 = *(int *)(v105 + 32);
      uint64_t v66 = (void *)((char *)v53 + v65);
      uint64_t v67 = (void *)((char *)v54 + v65);
      uint64_t v68 = v67[1];
      void *v66 = *v67;
      v66[1] = v68;
      uint64_t v69 = *(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56);
      swift_bridgeObjectRetain();
      v69(v53, 0, 1, v105);
      a3 = __dstb;
      uint64_t v7 = v102;
      uint64_t v56 = v96;
    }
    uint64_t v70 = *(int *)(v55 + 20);
    uint64_t v71 = (void *)((char *)v53 + v70);
    uint64_t v72 = (void *)((char *)v54 + v70);
    if (v7(v72, 1, v6))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
    }
    else
    {
      long long v97 = v56;
      *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
      *(void *)((char *)v71 + 13) = *(void *)((char *)v72 + 13);
      uint64_t v74 = v72[4];
      v71[3] = v72[3];
      v71[4] = v74;
      uint64_t v75 = v72[6];
      v71[5] = v72[5];
      v71[6] = v75;
      uint64_t v76 = *(int *)(v6 + 28);
      uint64_t v106 = (char *)v71 + v76;
      id v103 = (char *)v72 + v76;
      uint64_t v77 = sub_23309AF80();
      uint64_t v91 = *(void *)(v77 - 8);
      long long v94 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v94(v103, 1, v77))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v106, v103, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v106, v103, v77);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v106, 0, 1, v77);
      }
      uint64_t v79 = *(int *)(v105 + 32);
      id v80 = (void *)((char *)v71 + v79);
      uint64_t v81 = (void *)((char *)v72 + v79);
      uint64_t v82 = v81[1];
      *id v80 = *v81;
      v80[1] = v82;
      uint64_t v83 = *(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56);
      swift_bridgeObjectRetain();
      v83(v71, 0, 1, v105);
      uint64_t v56 = v97;
    }
    (*((void (**)(void *, void, uint64_t, uint64_t))v56 + 7))(v53, 0, 1, v55);
  }
  uint64_t v84 = a3[10];
  uint64_t v85 = (void *)((char *)a1 + v84);
  uint64_t v86 = (void *)((char *)a2 + v84);
  uint64_t v87 = v86[1];
  void *v85 = *v86;
  v85[1] = v87;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ReferenceRange(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v199 = *(void *)(v6 - 8);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v199 + 48);
  int v8 = v7((char *)a1, 1, v6);
  v208 = v7;
  int v9 = v7((char *)a2, 1, v6);
  v206 = a3;
  if (!v8)
  {
    if (v9)
    {
      sub_23302845C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_7;
    }
    long long v20 = *(_OWORD *)a2;
    *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
    *(_OWORD *)a1 = v20;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[5] = a2[5];
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = v6;
    uint64_t v22 = *(int *)(v6 + 28);
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_23309AF80();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    int v28 = v27(v23, 1, v25);
    int v29 = v27(v24, 1, v25);
    if (v28)
    {
      if (!v29)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_16:
        a3 = v206;
        uint64_t v6 = v21;
        uint64_t v35 = *(int *)(v21 + 32);
        uint64_t v36 = (void *)((char *)a1 + v35);
        uint64_t v37 = (void *)((char *)a2 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      if (!v29)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    }
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v23, v24, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_16;
  }
  if (v9)
  {
LABEL_7:
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  long long v10 = *(_OWORD *)a2;
  *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v10;
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v11 = *(int *)(v6 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2;
  uint64_t v14 = (char *)a2 + v11;
  uint64_t v15 = sub_23309AF80();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v12, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v12, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  a2 = v13;
  uint64_t v30 = *(int *)(v6 + 32);
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)v13 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  uint64_t v33 = *(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56);
  swift_bridgeObjectRetain();
  v33(a1, 0, 1, v6);
LABEL_17:
  uint64_t v38 = a3[5];
  uint64_t v39 = (void *)((char *)a1 + v38);
  uint64_t v40 = (void *)((char *)a2 + v38);
  int v41 = v208((char *)a1 + v38, 1, v6);
  int v42 = v208((char *)v40, 1, v6);
  if (!v41)
  {
    if (v42)
    {
      sub_23302845C((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_23;
    }
    v195 = a2;
    long long v51 = *(_OWORD *)v40;
    *(void *)((char *)v39 + 13) = *(void *)((char *)v40 + 13);
    *(_OWORD *)uint64_t v39 = v51;
    v39[3] = v40[3];
    v39[4] = v40[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39[5] = v40[5];
    v39[6] = v40[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v201 = v6;
    uint64_t v52 = *(int *)(v6 + 28);
    uint64_t v53 = (char *)v39 + v52;
    uint64_t v54 = (char *)v40 + v52;
    uint64_t v55 = sub_23309AF80();
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    int v58 = v57(v53, 1, v55);
    int v59 = v57(v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_32:
        a2 = v195;
        uint64_t v6 = v201;
        a3 = v206;
        uint64_t v65 = *(int *)(v201 + 32);
        uint64_t v66 = (void *)((char *)v39 + v65);
        uint64_t v67 = (void *)((char *)v40 + v65);
        void *v66 = *v67;
        v66[1] = v67[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 24))(v53, v54, v55);
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
    }
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v53, v54, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_32;
  }
  if (v42)
  {
LABEL_23:
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v39, v40, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_33;
  }
  long long v43 = *(_OWORD *)v40;
  *(void *)((char *)v39 + 13) = *(void *)((char *)v40 + 13);
  *(_OWORD *)uint64_t v39 = v43;
  v39[3] = v40[3];
  v39[4] = v40[4];
  v39[5] = v40[5];
  v39[6] = v40[6];
  uint64_t v200 = v6;
  uint64_t v44 = *(int *)(v6 + 28);
  __dst = (char *)v39 + v44;
  uint64_t v45 = (char *)v40 + v44;
  uint64_t v46 = sub_23309AF80();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(__dst, v45, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
  }
  uint64_t v6 = v200;
  a3 = v206;
  uint64_t v60 = *(int *)(v200 + 32);
  uint64_t v61 = (void *)((char *)v39 + v60);
  uint64_t v62 = (void *)((char *)v40 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  uint64_t v63 = *(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56);
  swift_bridgeObjectRetain();
  v63(v39, 0, 1, v200);
LABEL_33:
  uint64_t v68 = a3[6];
  uint64_t v69 = (uint64_t)a1 + v68;
  uint64_t v70 = (char *)a2 + v68;
  uint64_t v71 = *(void *)((char *)a1 + v68 + 8);
  uint64_t v72 = *(void *)((char *)a2 + v68 + 8);
  if (v71 == 1)
  {
    if (v72 == 1)
    {
      long long v73 = *(_OWORD *)v70;
      *(void *)(v69 + 16) = *((void *)v70 + 2);
      *(_OWORD *)uint64_t v69 = v73;
    }
    else
    {
      *(void *)uint64_t v69 = *(void *)v70;
      *(void *)(v69 + 8) = *((void *)v70 + 1);
      *(void *)(v69 + 16) = *((void *)v70 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v72 == 1)
  {
    sub_232F042F8(v69);
    uint64_t v74 = *((void *)v70 + 2);
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
    *(void *)(v69 + 16) = v74;
  }
  else
  {
    *(void *)uint64_t v69 = *(void *)v70;
    *(void *)(v69 + 8) = *((void *)v70 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v69 + 16) = *((void *)v70 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v75 = a3[7];
  uint64_t v76 = (uint64_t)a1 + v75;
  uint64_t v77 = (char *)a2 + v75;
  uint64_t v78 = *(void *)((char *)a1 + v75 + 8);
  uint64_t v79 = *(void *)((char *)a2 + v75 + 8);
  if (v78 == 1)
  {
    if (v79 == 1)
    {
      long long v80 = *(_OWORD *)v77;
      *(void *)(v76 + 16) = *((void *)v77 + 2);
      *(_OWORD *)uint64_t v76 = v80;
    }
    else
    {
      *(void *)uint64_t v76 = *(void *)v77;
      *(void *)(v76 + 8) = *((void *)v77 + 1);
      *(void *)(v76 + 16) = *((void *)v77 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v79 == 1)
  {
    sub_232F042F8(v76);
    uint64_t v81 = *((void *)v77 + 2);
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    *(void *)(v76 + 16) = v81;
  }
  else
  {
    *(void *)uint64_t v76 = *(void *)v77;
    *(void *)(v76 + 8) = *((void *)v77 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v76 + 16) = *((void *)v77 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v82 = a3[8];
  uint64_t v83 = (uint64_t)a1 + v82;
  uint64_t v84 = (char *)a2 + v82;
  uint64_t v85 = *(void *)((char *)a1 + v82 + 8);
  uint64_t v86 = *(void *)((char *)a2 + v82 + 8);
  if (v85 == 1)
  {
    if (v86 == 1)
    {
      long long v87 = *(_OWORD *)v84;
      *(void *)(v83 + 16) = *((void *)v84 + 2);
      *(_OWORD *)uint64_t v83 = v87;
    }
    else
    {
      *(void *)uint64_t v83 = *(void *)v84;
      *(void *)(v83 + 8) = *((void *)v84 + 1);
      *(void *)(v83 + 16) = *((void *)v84 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v86 == 1)
  {
    sub_232F042F8(v83);
    uint64_t v88 = *((void *)v84 + 2);
    *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
    *(void *)(v83 + 16) = v88;
  }
  else
  {
    *(void *)uint64_t v83 = *(void *)v84;
    *(void *)(v83 + 8) = *((void *)v84 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v83 + 16) = *((void *)v84 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v89 = a3[9];
  uint64_t v90 = (void *)((char *)a1 + v89);
  uint64_t v91 = (void *)((char *)a2 + v89);
  uint64_t v92 = type metadata accessor for Range();
  __dsta = *(void **)(v92 - 8);
  uint64_t v93 = (uint64_t (*)(void *, uint64_t, uint64_t))__dsta[6];
  int v94 = v93(v90, 1, v92);
  int v95 = v93(v91, 1, v92);
  if (!v94)
  {
    if (v95)
    {
      sub_23302845C((uint64_t)v90, (uint64_t (*)(void))type metadata accessor for Range);
      goto LABEL_60;
    }
    int v102 = v208((char *)v90, 1, v6);
    int v103 = v208((char *)v91, 1, v6);
    if (v102)
    {
      if (!v103)
      {
        long long v104 = *(_OWORD *)v91;
        *(void *)((char *)v90 + 13) = *(void *)((char *)v91 + 13);
        *(_OWORD *)uint64_t v90 = v104;
        v90[3] = v91[3];
        v90[4] = v91[4];
        v90[5] = v91[5];
        v90[6] = v91[6];
        uint64_t v105 = *(int *)(v6 + 28);
        __dstb = (char *)v90 + v105;
        v196 = a2;
        uint64_t v188 = (char *)v91 + v105;
        uint64_t v106 = sub_23309AF80();
        uint64_t v107 = *(void *)(v106 - 8);
        uint64_t v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v108(v188, 1, v106))
        {
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          memcpy(__dstb, v188, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v107 + 16))(__dstb, v188, v106);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(__dstb, 0, 1, v106);
        }
        uint64_t v149 = *(int *)(v6 + 32);
        id v150 = (void *)((char *)v90 + v149);
        uint64_t v151 = (void *)((char *)v91 + v149);
        *id v150 = *v151;
        v150[1] = v151[1];
        uint64_t v152 = *(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56);
        swift_bridgeObjectRetain();
        v152(v90, 0, 1, v6);
        goto LABEL_94;
      }
LABEL_70:
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v90, v91, *(void *)(*(void *)(v116 - 8) + 64));
      goto LABEL_95;
    }
    if (v103)
    {
      sub_23302845C((uint64_t)v90, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_70;
    }
    v196 = a2;
    long long v138 = *(_OWORD *)v91;
    *(void *)((char *)v90 + 13) = *(void *)((char *)v91 + 13);
    *(_OWORD *)uint64_t v90 = v138;
    v90[3] = v91[3];
    v90[4] = v91[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v90[5] = v91[5];
    v90[6] = v91[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v203 = v6;
    uint64_t v139 = *(int *)(v6 + 28);
    id v140 = (char *)v90 + v139;
    uint64_t v141 = (char *)v91 + v139;
    uint64_t v142 = sub_23309AF80();
    uint64_t v143 = *(void *)(v142 - 8);
    uint64_t v144 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48);
    uint64_t v191 = v140;
    LODWORD(v140) = v144(v140, 1, v142);
    int v145 = v144(v141, 1, v142);
    if (v140)
    {
      if (!v145)
      {
        (*(void (**)(void *, char *, uint64_t))(v143 + 16))(v191, v141, v142);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v143 + 56))(v191, 0, 1, v142);
        goto LABEL_93;
      }
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v147 = *(void *)(*(void *)(v146 - 8) + 64);
      uint64_t v148 = v191;
    }
    else
    {
      if (!v145)
      {
        (*(void (**)(void *, char *, uint64_t))(v143 + 24))(v191, v141, v142);
        goto LABEL_93;
      }
      (*(void (**)(void *, uint64_t))(v143 + 8))(v191, v142);
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v147 = *(void *)(*(void *)(v153 - 8) + 64);
      uint64_t v148 = v191;
    }
    memcpy(v148, v141, v147);
LABEL_93:
    uint64_t v6 = v203;
    uint64_t v154 = *(int *)(v203 + 32);
    uint64_t v155 = (void *)((char *)v90 + v154);
    uint64_t v156 = (void *)((char *)v91 + v154);
    *uint64_t v155 = *v156;
    v155[1] = v156[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_94:
    a2 = v196;
    a3 = v206;
LABEL_95:
    uint64_t v157 = *(int *)(v92 + 20);
    uint64_t v158 = (uint64_t)v90 + v157;
    uint64_t v159 = (void *)((char *)v91 + v157);
    int v160 = v208((char *)v158, 1, v6);
    int v161 = v208((char *)v159, 1, v6);
    if (v160)
    {
      if (!v161)
      {
        long long v162 = *(_OWORD *)v159;
        *(void *)(v158 + 13) = *(void *)((char *)v159 + 13);
        *(_OWORD *)uint64_t v158 = v162;
        *(void *)(v158 + 24) = v159[3];
        *(void *)(v158 + 32) = v159[4];
        *(void *)(v158 + 40) = v159[5];
        *(void *)(v158 + 48) = v159[6];
        uint64_t v204 = v6;
        uint64_t v163 = *(int *)(v6 + 28);
        uint64_t v210 = (void *)(v158 + v163);
        v164 = (char *)v159 + v163;
        uint64_t v165 = sub_23309AF80();
        uint64_t v166 = *(void *)(v165 - 8);
        uint64_t v167 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v167(v164, 1, v165))
        {
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          memcpy(v210, v164, *(void *)(*(void *)(v168 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v166 + 16))(v210, v164, v165);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v210, 0, 1, v165);
        }
        a3 = v206;
        uint64_t v179 = *(int *)(v204 + 32);
        v180 = (void *)(v158 + v179);
        uint64_t v181 = (void *)((char *)v159 + v179);
        void *v180 = *v181;
        v180[1] = v181[1];
        v182 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v199 + 56);
        swift_bridgeObjectRetain();
        v182(v158, 0, 1, v204);
        goto LABEL_80;
      }
      goto LABEL_101;
    }
    if (v161)
    {
      sub_23302845C(v158, (uint64_t (*)(void))type metadata accessor for Quantity);
LABEL_101:
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      size_t v99 = *(void *)(*(void *)(v169 - 8) + 64);
      uint64_t v100 = (void *)v158;
      long long v101 = v159;
      goto LABEL_61;
    }
    unint64_t v198 = a2;
    long long v170 = *(_OWORD *)v159;
    *(void *)(v158 + 13) = *(void *)((char *)v159 + 13);
    *(_OWORD *)uint64_t v158 = v170;
    *(void *)(v158 + 24) = v159[3];
    *(void *)(v158 + 32) = v159[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v158 + 40) = v159[5];
    *(void *)(v158 + 48) = v159[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v205 = v6;
    uint64_t v171 = *(int *)(v6 + 28);
    uint64_t v172 = (void *)(v158 + v171);
    uint64_t v173 = (char *)v159 + v171;
    uint64_t v174 = sub_23309AF80();
    uint64_t v175 = *(void *)(v174 - 8);
    char v176 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v175 + 48);
    int v177 = v176(v172, 1, v174);
    int v178 = v176(v173, 1, v174);
    if (v177)
    {
      if (!v178)
      {
        (*(void (**)(void *, char *, uint64_t))(v175 + 16))(v172, v173, v174);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
LABEL_110:
        a2 = v198;
        a3 = v206;
        uint64_t v184 = *(int *)(v205 + 32);
        uint64_t v185 = (void *)(v158 + v184);
        v186 = (void *)((char *)v159 + v184);
        void *v185 = *v186;
        v185[1] = v186[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_80;
      }
    }
    else
    {
      if (!v178)
      {
        (*(void (**)(void *, char *, uint64_t))(v175 + 24))(v172, v173, v174);
        goto LABEL_110;
      }
      (*(void (**)(void *, uint64_t))(v175 + 8))(v172, v174);
    }
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v172, v173, *(void *)(*(void *)(v183 - 8) + 64));
    goto LABEL_110;
  }
  if (v95)
  {
LABEL_60:
    sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    size_t v99 = *(void *)(*(void *)(v98 - 8) + 64);
    uint64_t v100 = v90;
    long long v101 = v91;
LABEL_61:
    memcpy(v100, v101, v99);
    goto LABEL_80;
  }
  if (v208((char *)v91, 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v90, v91, *(void *)(*(void *)(v96 - 8) + 64));
    uint64_t v97 = v6;
  }
  else
  {
    v197 = a2;
    long long v110 = *(_OWORD *)v91;
    *(void *)((char *)v90 + 13) = *(void *)((char *)v91 + 13);
    *(_OWORD *)uint64_t v90 = v110;
    v90[3] = v91[3];
    v90[4] = v91[4];
    v90[5] = v91[5];
    v90[6] = v91[6];
    uint64_t v111 = *(int *)(v6 + 28);
    id v187 = (char *)v91 + v111;
    uint64_t v189 = (char *)v90 + v111;
    uint64_t v112 = sub_23309AF80();
    uint64_t v113 = *(void *)(v112 - 8);
    uint64_t v114 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v114(v187, 1, v112))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v189, v187, *(void *)(*(void *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v189, v187, v112);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v189, 0, 1, v112);
    }
    uint64_t v97 = v6;
    uint64_t v117 = *(int *)(v6 + 32);
    uint64_t v118 = (void *)((char *)v90 + v117);
    uint64_t v119 = (void *)((char *)v91 + v117);
    *uint64_t v118 = *v119;
    v118[1] = v119[1];
    uint64_t v120 = *(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56);
    swift_bridgeObjectRetain();
    v120(v90, 0, 1, v6);
    a2 = v197;
    a3 = v206;
  }
  uint64_t v121 = *(int *)(v92 + 20);
  id v122 = (void *)((char *)v90 + v121);
  id v123 = (void *)((char *)v91 + v121);
  if (v208((char *)v123, 1, v97))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v122, v123, *(void *)(*(void *)(v124 - 8) + 64));
  }
  else
  {
    long long v125 = *(_OWORD *)v123;
    *(void *)((char *)v122 + 13) = *(void *)((char *)v123 + 13);
    *(_OWORD *)id v122 = v125;
    v122[3] = v123[3];
    v122[4] = v123[4];
    v122[5] = v123[5];
    v122[6] = v123[6];
    uint64_t v202 = v97;
    uint64_t v126 = *(int *)(v97 + 28);
    unint64_t v207 = (char *)v123 + v126;
    v209 = (char *)v122 + v126;
    uint64_t v127 = sub_23309AF80();
    uint64_t v128 = *(void *)(v127 - 8);
    v190 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v190(v207, 1, v127))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v209, v207, *(void *)(*(void *)(v129 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v209, v207, v127);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v209, 0, 1, v127);
    }
    a3 = v206;
    uint64_t v130 = *(int *)(v202 + 32);
    uint64_t v131 = (void *)((char *)v122 + v130);
    id v132 = (void *)((char *)v123 + v130);
    *uint64_t v131 = *v132;
    v131[1] = v132[1];
    uint64_t v133 = *(void (**)(void *, void, uint64_t, uint64_t))(v199 + 56);
    swift_bridgeObjectRetain();
    v133(v122, 0, 1, v202);
  }
  ((void (*)(void *, void, uint64_t, uint64_t))__dsta[7])(v90, 0, 1, v92);
LABEL_80:
  uint64_t v134 = a3[10];
  uint64_t v135 = (void *)((char *)a1 + v134);
  uint64_t v136 = (void *)((char *)a2 + v134);
  *uint64_t v135 = *v136;
  v135[1] = v136[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23302845C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for ReferenceRange(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    uint64_t v10 = *(int *)(v6 + 28);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_23309AF80();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = (_OWORD *)((char *)a1 + v16);
  uint64_t v18 = (_OWORD *)((char *)a2 + v16);
  uint64_t v64 = v8;
  if (v8((_OWORD *)((char *)a2 + v16), 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v7;
    *uint64_t v17 = *v18;
    *(void *)((char *)v17 + 13) = *(void *)((char *)v18 + 13);
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)((char *)v18 + 24);
    *(_OWORD *)((char *)v17 + 40) = *(_OWORD *)((char *)v18 + 40);
    uint64_t v20 = *(int *)(v6 + 28);
    uint64_t v21 = (char *)v17 + v20;
    uint64_t v22 = (char *)v18 + v20;
    uint64_t v23 = sub_23309AF80();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)((char *)v17 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v18 + *(int *)(v6 + 32));
    uint64_t v7 = v61;
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v61 + 56))(v17, 0, 1, v6);
  }
  uint64_t v26 = a3[6];
  uint64_t v27 = a3[7];
  int v28 = (char *)a1 + v26;
  int v29 = (char *)a2 + v26;
  *(_OWORD *)int v28 = *(_OWORD *)v29;
  *((void *)v28 + 2) = *((void *)v29 + 2);
  uint64_t v30 = (char *)a1 + v27;
  uint64_t v31 = (char *)a2 + v27;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *((void *)v30 + 2) = *((void *)v31 + 2);
  uint64_t v32 = a3[8];
  uint64_t v33 = a3[9];
  uint64_t v34 = (char *)a1 + v32;
  uint64_t v35 = (char *)a2 + v32;
  long long v36 = *(_OWORD *)v35;
  *((void *)v34 + 2) = *((void *)v35 + 2);
  *(_OWORD *)uint64_t v34 = v36;
  uint64_t v37 = (_OWORD *)((char *)a1 + v33);
  uint64_t v38 = (_OWORD *)((char *)a2 + v33);
  uint64_t v39 = type metadata accessor for Range();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    if (v64(v38, 1, v6))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      *uint64_t v37 = *v38;
      *(void *)((char *)v37 + 13) = *(void *)((char *)v38 + 13);
      *(_OWORD *)((char *)v37 + 24) = *(_OWORD *)((char *)v38 + 24);
      *(_OWORD *)((char *)v37 + 40) = *(_OWORD *)((char *)v38 + 40);
      uint64_t v43 = *(int *)(v6 + 28);
      int v59 = (char *)v37 + v43;
      uint64_t v62 = v7;
      uint64_t v44 = (char *)v38 + v43;
      uint64_t v45 = sub_23309AF80();
      uint64_t v58 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v44, 1, v45))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v59, v44, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v59, v44, v45);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v45);
      }
      *(_OWORD *)((char *)v37 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v38 + *(int *)(v6 + 32));
      uint64_t v7 = v62;
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v62 + 56))(v37, 0, 1, v6);
    }
    uint64_t v47 = *(int *)(v39 + 20);
    uint64_t v48 = (_OWORD *)((char *)v37 + v47);
    uint64_t v49 = (_OWORD *)((char *)v38 + v47);
    if (v64(v49, 1, v6))
    {
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      uint64_t v63 = v7;
      _OWORD *v48 = *v49;
      *(void *)((char *)v48 + 13) = *(void *)((char *)v49 + 13);
      *(_OWORD *)((char *)v48 + 24) = *(_OWORD *)((char *)v49 + 24);
      *(_OWORD *)((char *)v48 + 40) = *(_OWORD *)((char *)v49 + 40);
      uint64_t v51 = *(int *)(v6 + 28);
      uint64_t v66 = (char *)v48 + v51;
      uint64_t v52 = (char *)v49 + v51;
      uint64_t v53 = sub_23309AF80();
      uint64_t v60 = *(void *)(v53 - 8);
      uint64_t v65 = v52;
      uint64_t v54 = v52;
      uint64_t v55 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v54, 1, v53))
      {
        sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v66, v65, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v60 + 32))(v66, v65, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v66, 0, 1, v55);
      }
      *(_OWORD *)((char *)v48 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v49 + *(int *)(v6 + 32));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v63 + 56))(v48, 0, 1, v6);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for ReferenceRange(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v171 = *(void **)(v6 - 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171[6];
  int v8 = v7(a1, 1, v6);
  int v9 = v7(a2, 1, v6);
  uint64_t v169 = v7;
  uint64_t v172 = a3;
  if (!v8)
  {
    if (v9)
    {
      sub_23302845C(a1, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_7;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
    uint64_t v17 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v17;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v18;
    swift_bridgeObjectRelease();
    uint64_t v19 = *(int *)(v6 + 28);
    uint64_t v20 = (void *)(a1 + v19);
    uint64_t v21 = (void *)(a2 + v19);
    uint64_t v22 = sub_23309AF80();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
    int v25 = v24(v20, 1, v22);
    int v26 = v24(v21, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_16:
        a3 = v172;
        uint64_t v7 = v169;
        uint64_t v28 = *(int *)(v6 + 32);
        int v29 = (void *)(a1 + v28);
        uint64_t v30 = (uint64_t *)(a2 + v28);
        uint64_t v32 = *v30;
        uint64_t v31 = v30[1];
        *int v29 = v32;
        v29[1] = v31;
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
        goto LABEL_16;
      }
      (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    }
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_16;
  }
  if (v9)
  {
LABEL_7:
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_17;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v10 = *(int *)(v6 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = sub_23309AF80();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_OWORD *)(a1 + *(int *)(v6 + 32)) = *(_OWORD *)(a2 + *(int *)(v6 + 32));
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v171[7])(a1, 0, 1, v6);
LABEL_17:
  uint64_t v33 = a3[5];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  int v36 = v7(a1 + v33, 1, v6);
  int v37 = v7(v35, 1, v6);
  if (!v36)
  {
    if (v37)
    {
      sub_23302845C(v34, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_23;
    }
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    *(void *)(v34 + 13) = *(void *)(v35 + 13);
    uint64_t v45 = *(void *)(v35 + 32);
    *(void *)(v34 + 24) = *(void *)(v35 + 24);
    *(void *)(v34 + 32) = v45;
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void *)(v35 + 48);
    *(void *)(v34 + 40) = *(void *)(v35 + 40);
    *(void *)(v34 + 48) = v46;
    swift_bridgeObjectRelease();
    uint64_t v162 = v6;
    uint64_t v47 = *(int *)(v6 + 28);
    uint64_t v48 = (void *)(v34 + v47);
    uint64_t v49 = (void *)(v35 + v47);
    uint64_t v50 = sub_23309AF80();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
    __dst = v48;
    LODWORD(v48) = v52(v48, 1, v50);
    int v53 = v52(v49, 1, v50);
    if (v48)
    {
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v51 + 32))(__dst, v49, v50);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
        goto LABEL_35;
      }
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v55 = *(void *)(*(void *)(v54 - 8) + 64);
      uint64_t v56 = __dst;
    }
    else
    {
      if (!v53)
      {
        (*(void (**)(void *, void *, uint64_t))(v51 + 40))(__dst, v49, v50);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v51 + 8))(__dst, v50);
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v55 = *(void *)(*(void *)(v57 - 8) + 64);
      uint64_t v56 = __dst;
    }
    memcpy(v56, v49, v55);
LABEL_35:
    a3 = v172;
    uint64_t v6 = v162;
    uint64_t v58 = *(int *)(v162 + 32);
    int v59 = (void *)(v34 + v58);
    uint64_t v60 = (uint64_t *)(v35 + v58);
    uint64_t v62 = *v60;
    uint64_t v61 = v60[1];
    void *v59 = v62;
    v59[1] = v61;
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (v37)
  {
LABEL_23:
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy((void *)v34, (const void *)v35, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_36;
  }
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(void *)(v34 + 13) = *(void *)(v35 + 13);
  *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
  *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
  uint64_t v38 = *(int *)(v6 + 28);
  uint64_t v39 = (void *)(v34 + v38);
  uint64_t v40 = (const void *)(v35 + v38);
  uint64_t v41 = sub_23309AF80();
  uint64_t v42 = *(void *)(v41 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v39, v40, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  *(_OWORD *)(v34 + *(int *)(v6 + 32)) = *(_OWORD *)(v35 + *(int *)(v6 + 32));
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v171[7])(v34, 0, 1, v6);
LABEL_36:
  uint64_t v63 = a3[6];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  if (*(void *)(a1 + v63 + 8) == 1)
  {
LABEL_39:
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    *(void *)(v64 + 16) = *(void *)(v65 + 16);
    goto LABEL_41;
  }
  uint64_t v66 = *(void *)(v65 + 8);
  if (v66 == 1)
  {
    sub_232F042F8(v64);
    goto LABEL_39;
  }
  *(void *)uint64_t v64 = *(void *)v65;
  *(void *)(v64 + 8) = v66;
  swift_bridgeObjectRelease();
  *(void *)(v64 + 16) = *(void *)(v65 + 16);
  swift_bridgeObjectRelease();
LABEL_41:
  uint64_t v67 = a3[7];
  uint64_t v68 = a1 + v67;
  uint64_t v69 = a2 + v67;
  if (*(void *)(a1 + v67 + 8) == 1)
  {
LABEL_44:
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    *(void *)(v68 + 16) = *(void *)(v69 + 16);
    goto LABEL_46;
  }
  uint64_t v70 = *(void *)(v69 + 8);
  if (v70 == 1)
  {
    sub_232F042F8(v68);
    goto LABEL_44;
  }
  *(void *)uint64_t v68 = *(void *)v69;
  *(void *)(v68 + 8) = v70;
  swift_bridgeObjectRelease();
  *(void *)(v68 + 16) = *(void *)(v69 + 16);
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t v71 = a3[8];
  uint64_t v72 = a1 + v71;
  uint64_t v73 = a2 + v71;
  if (*(void *)(a1 + v71 + 8) == 1)
  {
LABEL_49:
    *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    *(void *)(v72 + 16) = *(void *)(v73 + 16);
    goto LABEL_51;
  }
  uint64_t v74 = *(void *)(v73 + 8);
  if (v74 == 1)
  {
    sub_232F042F8(v72);
    goto LABEL_49;
  }
  *(void *)uint64_t v72 = *(void *)v73;
  *(void *)(v72 + 8) = v74;
  swift_bridgeObjectRelease();
  *(void *)(v72 + 16) = *(void *)(v73 + 16);
  swift_bridgeObjectRelease();
LABEL_51:
  uint64_t v75 = a3[9];
  uint64_t v76 = (void *)(a1 + v75);
  uint64_t v77 = (void *)(a2 + v75);
  uint64_t v78 = type metadata accessor for Range();
  uint64_t v79 = *(void **)(v78 - 8);
  long long v80 = (uint64_t (*)(void *, uint64_t, uint64_t))v79[6];
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (!v81)
  {
    if (v82)
    {
      sub_23302845C((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for Range);
      goto LABEL_57;
    }
    long long v87 = v169;
    int v88 = v169((uint64_t)v76, 1, v6);
    int v89 = v169((uint64_t)v77, 1, v6);
    uint64_t v84 = v172;
    if (v88)
    {
      if (!v89)
      {
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
        *(void *)((char *)v76 + 13) = *(void *)((char *)v77 + 13);
        *(_OWORD *)(v76 + 3) = *(_OWORD *)(v77 + 3);
        *(_OWORD *)(v76 + 5) = *(_OWORD *)(v77 + 5);
        uint64_t v90 = *(int *)(v6 + 28);
        uint64_t v91 = (char *)v76 + v90;
        uint64_t v92 = (char *)v77 + v90;
        uint64_t v93 = sub_23309AF80();
        uint64_t v94 = *(void *)(v93 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
        {
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v91, v92, v93);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
        }
        *(_OWORD *)((char *)v76 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v77 + *(int *)(v6 + 32));
        uint64_t v84 = v172;
        ((void (*)(void *, void, uint64_t, uint64_t))v171[7])(v76, 0, 1, v6);
        long long v87 = v169;
LABEL_87:
        uint64_t v127 = *(int *)(v78 + 20);
        uint64_t v128 = (void *)((char *)v76 + v127);
        uint64_t v129 = (void *)((char *)v77 + v127);
        int v130 = v87((uint64_t)v128, 1, v6);
        int v131 = v87((uint64_t)v129, 1, v6);
        if (v130)
        {
          if (!v131)
          {
            *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
            *(void *)((char *)v128 + 13) = *(void *)((char *)v129 + 13);
            *(_OWORD *)(v128 + 3) = *(_OWORD *)(v129 + 3);
            *(_OWORD *)(v128 + 5) = *(_OWORD *)(v129 + 5);
            uint64_t v132 = *(int *)(v6 + 28);
            uint64_t v133 = (char *)v128 + v132;
            uint64_t v134 = (char *)v129 + v132;
            uint64_t v135 = sub_23309AF80();
            uint64_t v136 = *(void *)(v135 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
            {
              sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
              memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v133, v134, v135);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
            }
            *(_OWORD *)((char *)v128 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v129 + *(int *)(v6 + 32));
            ((void (*)(void *, void, uint64_t, uint64_t))v171[7])(v128, 0, 1, v6);
            goto LABEL_105;
          }
LABEL_93:
          sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
          memcpy(v128, v129, *(void *)(*(void *)(v138 - 8) + 64));
          goto LABEL_105;
        }
        if (v131)
        {
          sub_23302845C((uint64_t)v128, (uint64_t (*)(void))type metadata accessor for Quantity);
          goto LABEL_93;
        }
        *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
        *(void *)((char *)v128 + 13) = *(void *)((char *)v129 + 13);
        uint64_t v139 = v129[4];
        v128[3] = v129[3];
        v128[4] = v139;
        swift_bridgeObjectRelease();
        uint64_t v140 = v129[6];
        v128[5] = v129[5];
        v128[6] = v140;
        swift_bridgeObjectRelease();
        uint64_t v141 = *(int *)(v6 + 28);
        uint64_t v142 = (char *)v128 + v141;
        uint64_t v143 = (char *)v129 + v141;
        uint64_t v144 = sub_23309AF80();
        long long v170 = *(void **)(v144 - 8);
        int v145 = (uint64_t (*)(char *, uint64_t, uint64_t))v170[6];
        uint64_t v174 = v142;
        LODWORD(v142) = v145(v142, 1, v144);
        int v146 = v145(v143, 1, v144);
        if (v142)
        {
          if (!v146)
          {
            ((void (*)(void *, char *, uint64_t))v170[4])(v174, v143, v144);
            ((void (*)(void *, void, uint64_t, uint64_t))v170[7])(v174, 0, 1, v144);
            goto LABEL_104;
          }
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          size_t v148 = *(void *)(*(void *)(v147 - 8) + 64);
          uint64_t v149 = v174;
        }
        else
        {
          if (!v146)
          {
            ((void (*)(void *, char *, uint64_t))v170[5])(v174, v143, v144);
            goto LABEL_104;
          }
          ((void (*)(void *, uint64_t))v170[1])(v174, v144);
          sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          size_t v148 = *(void *)(*(void *)(v150 - 8) + 64);
          uint64_t v149 = v174;
        }
        memcpy(v149, v143, v148);
LABEL_104:
        uint64_t v84 = v172;
        uint64_t v151 = *(int *)(v6 + 32);
        uint64_t v152 = (void *)((char *)v128 + v151);
        uint64_t v153 = (void *)((char *)v129 + v151);
        uint64_t v155 = *v153;
        uint64_t v154 = v153[1];
        *uint64_t v152 = v155;
        v152[1] = v154;
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
LABEL_66:
      sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v76, v77, *(void *)(*(void *)(v101 - 8) + 64));
      goto LABEL_87;
    }
    if (v89)
    {
      sub_23302845C((uint64_t)v76, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_66;
    }
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    *(void *)((char *)v76 + 13) = *(void *)((char *)v77 + 13);
    uint64_t v111 = v77[4];
    v76[3] = v77[3];
    v76[4] = v111;
    swift_bridgeObjectRelease();
    uint64_t v112 = v77[6];
    v76[5] = v77[5];
    v76[6] = v112;
    swift_bridgeObjectRelease();
    uint64_t v113 = *(int *)(v6 + 28);
    uint64_t v114 = (char *)v76 + v113;
    __dstc = (char *)v77 + v113;
    uint64_t v115 = sub_23309AF80();
    uint64_t v163 = *(void *)(v115 - 8);
    __src = v114;
    uint64_t v116 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v163 + 48);
    LODWORD(v114) = v116(v114, 1, v115);
    int v117 = v116(__dstc, 1, v115);
    if (v114)
    {
      if (!v117)
      {
        (*(void (**)(void *, char *, uint64_t))(v163 + 32))(__src, __dstc, v115);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v163 + 56))(__src, 0, 1, v115);
        goto LABEL_86;
      }
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v119 = *(void *)(*(void *)(v118 - 8) + 64);
      uint64_t v120 = __src;
    }
    else
    {
      if (!v117)
      {
        (*(void (**)(void *, char *, uint64_t))(v163 + 40))(__src, __dstc, v115);
        goto LABEL_86;
      }
      (*(void (**)(void *, uint64_t))(v163 + 8))(__src, v115);
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v119 = *(void *)(*(void *)(v121 - 8) + 64);
      uint64_t v120 = __src;
    }
    memcpy(v120, __dstc, v119);
LABEL_86:
    long long v87 = v169;
    uint64_t v122 = *(int *)(v6 + 32);
    id v123 = (void *)((char *)v76 + v122);
    uint64_t v124 = (void *)((char *)v77 + v122);
    uint64_t v126 = *v124;
    uint64_t v125 = v124[1];
    *id v123 = v126;
    v123[1] = v125;
    swift_bridgeObjectRelease();
    uint64_t v84 = v172;
    goto LABEL_87;
  }
  if (v82)
  {
LABEL_57:
    sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    memcpy(v76, v77, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v84 = v172;
    goto LABEL_105;
  }
  uint64_t v83 = v169;
  uint64_t v84 = v172;
  if (v169((uint64_t)v77, 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v76, v77, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    *(void *)((char *)v76 + 13) = *(void *)((char *)v77 + 13);
    *(_OWORD *)(v76 + 3) = *(_OWORD *)(v77 + 3);
    *(_OWORD *)(v76 + 5) = *(_OWORD *)(v77 + 5);
    uint64_t v96 = *(int *)(v6 + 28);
    __dsta = (char *)v76 + v96;
    uint64_t v97 = (char *)v77 + v96;
    uint64_t v98 = sub_23309AF80();
    uint64_t v99 = *(void *)(v98 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(__dsta, v97, *(void *)(*(void *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(__dsta, v97, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(__dsta, 0, 1, v98);
    }
    *(_OWORD *)((char *)v76 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v77 + *(int *)(v6 + 32));
    ((void (*)(void *, void, uint64_t, uint64_t))v171[7])(v76, 0, 1, v6);
    uint64_t v84 = v172;
    uint64_t v83 = v169;
  }
  uint64_t v102 = *(int *)(v78 + 20);
  int v103 = (_OWORD *)((char *)v76 + v102);
  long long v104 = (_OWORD *)((char *)v77 + v102);
  if (v83((uint64_t)v104, 1, v6))
  {
    sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
  }
  else
  {
    __dstb = v79;
    *int v103 = *v104;
    *(void *)((char *)v103 + 13) = *(void *)((char *)v104 + 13);
    *(_OWORD *)((char *)v103 + 24) = *(_OWORD *)((char *)v104 + 24);
    *(_OWORD *)((char *)v103 + 40) = *(_OWORD *)((char *)v104 + 40);
    uint64_t v106 = *(int *)(v6 + 28);
    uint64_t v173 = (char *)v103 + v106;
    uint64_t v107 = (char *)v104 + v106;
    uint64_t v108 = sub_23309AF80();
    uint64_t v109 = *(void *)(v108 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
    {
      sub_233025D08(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v173, v107, *(void *)(*(void *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v173, v107, v108);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v173, 0, 1, v108);
    }
    uint64_t v84 = v172;
    uint64_t v79 = __dstb;
    *(_OWORD *)((char *)v103 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v104 + *(int *)(v6 + 32));
    ((void (*)(_OWORD *, void, uint64_t, uint64_t))v171[7])(v103, 0, 1, v6);
  }
  ((void (*)(void *, void, uint64_t, uint64_t))v79[7])(v76, 0, 1, v78);
LABEL_105:
  uint64_t v156 = v84[10];
  uint64_t v157 = (void *)(a1 + v156);
  uint64_t v158 = (uint64_t *)(a2 + v156);
  uint64_t v160 = *v158;
  uint64_t v159 = v158[1];
  *uint64_t v157 = v160;
  v157[1] = v159;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23302A344);
}

uint64_t sub_23302A344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for ReferenceRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23302A4B4);
}

void sub_23302A4B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_233025D08(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    sub_233025D08(0, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 8) = a2;
      return;
    }
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_23302A600()
{
  sub_233025D08(319, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v0 <= 0x3F)
  {
    sub_233025D08(319, &qword_268756570, (void (*)(uint64_t))type metadata accessor for Range);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ReferenceRange.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23302A7E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferenceRange.CodingKeys()
{
  return &type metadata for ReferenceRange.CodingKeys;
}

unint64_t sub_23302A820()
{
  unint64_t result = qword_2687585C8;
  if (!qword_2687585C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687585C8);
  }
  return result;
}

unint64_t sub_23302A878()
{
  unint64_t result = qword_2687585D0;
  if (!qword_2687585D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687585D0);
  }
  return result;
}

unint64_t sub_23302A8D0()
{
  unint64_t result = qword_2687585D8;
  if (!qword_2687585D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687585D8);
  }
  return result;
}

uint64_t sub_23302A924(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7827308 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x547365696C707061 && a2 == 0xE90000000000006FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E696E61656DLL && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 6645601 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void sub_23302ABC8(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_233025D08(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_23302AC2C(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23302ABC8(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23302AC88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id Period.asMedicalDateInterval()()
{
  v78[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = sub_23309AD60();
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v75 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v74 = (char *)&v72 - v5;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v72 = (char *)&v72 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v73 = (char *)&v72 - v8;
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  int v15 = (char *)&v72 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v72 - v16;
  uint64_t v18 = type metadata accessor for FHIRDateTime();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v76 = (uint64_t)&v72 - v24;
  MEMORY[0x270FA5388](v23);
  int v26 = (char *)&v72 - v25;
  sub_23302B410(v0, (uint64_t)v17);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v27(v17, 1, v18) != 1)
  {
    sub_2330007B4((uint64_t)v17, (uint64_t)v26);
    uint64_t v30 = type metadata accessor for Period();
    sub_23302B410(v0 + *(int *)(v30 + 20), (uint64_t)v15);
    if (v27(v15, 1, v18) == 1)
    {
      sub_23302B490((uint64_t)v15);
      uint64_t v31 = v77;
      if (*((void *)v26 + 7) == 1)
      {
        if (v26[19])
        {
          if (v26[17]) {
            uint64_t v32 = 3;
          }
          else {
            uint64_t v32 = 2;
          }
        }
        else
        {
          uint64_t v32 = 1;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      unint64_t v38 = sub_2330166F8();
      uint64_t v39 = (uint64_t)v74;
      FHIRDateTime.asDateComponents()();
      uint64_t v40 = (uint64_t *)&v26[*(int *)(v18 + 32)];
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      swift_bridgeObjectRetain();
      uint64_t v43 = v41;
      id v29 = (id)v38;
      id v44 = sub_233017340(v39, v42, v43, v32);
      if (!v31)
      {
        uint64_t v45 = v44;
        id v29 = objc_msgSend(self, sel_medicalDateIntervalWithStartDate_, v44);

        sub_23302B554((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        return v29;
      }
    }
    else
    {
      uint64_t v35 = v76;
      sub_2330007B4((uint64_t)v15, v76);
      uint64_t v36 = v77;
      if (*((void *)v26 + 7) == 1)
      {
        if (v26[19])
        {
          if (v26[17]) {
            uint64_t v37 = 3;
          }
          else {
            uint64_t v37 = 2;
          }
        }
        else
        {
          uint64_t v37 = 1;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      unint64_t v54 = sub_2330166F8();
      uint64_t v55 = (uint64_t)v73;
      FHIRDateTime.asDateComponents()();
      uint64_t v56 = (uint64_t *)&v26[*(int *)(v18 + 32)];
      uint64_t v58 = *v56;
      uint64_t v57 = v56[1];
      swift_bridgeObjectRetain();
      uint64_t v59 = v57;
      id v29 = (id)v54;
      id v60 = sub_233017340(v55, v58, v59, v37);
      if (!v36)
      {
        uint64_t v61 = v60;
        if (*(void *)(v35 + 56) == 1)
        {
          if (*(unsigned char *)(v35 + 19))
          {
            if (*(unsigned char *)(v35 + 17)) {
              uint64_t v62 = 3;
            }
            else {
              uint64_t v62 = 2;
            }
          }
          else
          {
            uint64_t v62 = 1;
          }
        }
        else
        {
          uint64_t v62 = 0;
        }
        uint64_t v63 = (uint64_t)v72;
        FHIRDateTime.asDateComponents()();
        uint64_t v64 = (uint64_t *)(v35 + *(int *)(v18 + 32));
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        swift_bridgeObjectRetain();
        id v68 = sub_233017340(v63, v66, v65, v62);
        uint64_t v69 = self;
        v78[0] = 0;
        id v29 = objc_msgSend(v69, sel_medicalDateIntervalWithStartDate_endDate_error_, v61, v68, v78);
        id v70 = v78[0];
        if (v29)
        {

          sub_23302B554(v35, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          sub_23302B554((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          return v29;
        }
        uint64_t v71 = v70;
        sub_23309AEC0();

        swift_willThrow();
      }
      sub_23302B554(v35, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
LABEL_41:
    sub_23302B554((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    return v29;
  }
  sub_23302B490((uint64_t)v17);
  uint64_t v28 = type metadata accessor for Period();
  sub_23302B410(v0 + *(int *)(v28 + 20), (uint64_t)v12);
  if (v27(v12, 1, v18) != 1)
  {
    sub_2330007B4((uint64_t)v12, (uint64_t)v22);
    uint64_t v33 = v77;
    if (*((void *)v22 + 7) == 1)
    {
      if (v22[19])
      {
        if (v22[17]) {
          uint64_t v34 = 3;
        }
        else {
          uint64_t v34 = 2;
        }
      }
      else
      {
        uint64_t v34 = 1;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    unint64_t v46 = sub_2330166F8();
    uint64_t v47 = (uint64_t)v75;
    FHIRDateTime.asDateComponents()();
    uint64_t v48 = (uint64_t *)&v22[*(int *)(v18 + 32)];
    uint64_t v50 = *v48;
    uint64_t v49 = v48[1];
    swift_bridgeObjectRetain();
    uint64_t v51 = v49;
    id v29 = (id)v46;
    id v52 = sub_233017340(v47, v50, v51, v34);
    if (!v33)
    {
      int v53 = v52;
      id v29 = objc_msgSend(self, sel_medicalDateIntervalWithEndDate_, v52);

      sub_23302B554((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      return v29;
    }
    int v26 = v22;
    goto LABEL_41;
  }
  sub_23302B490((uint64_t)v12);
  return 0;
}

uint64_t sub_23302B410(uint64_t a1, uint64_t a2)
{
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23302B490(uint64_t a1)
{
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for Period()
{
  uint64_t result = qword_268758610;
  if (!qword_268758610) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23302B554(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Period.start.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23302B410(v1, a1);
}

uint64_t Period.end.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Period() + 20);
  return sub_23302B410(v3, a1);
}

uint64_t Period.hash(into:)()
{
  return sub_232EB2E40();
}

uint64_t sub_23302B644()
{
  if (*v0) {
    return 6581861;
  }
  else {
    return 0x7472617473;
  }
}

uint64_t sub_23302B674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23302EFB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23302B69C(uint64_t a1)
{
  unint64_t v2 = sub_23302C32C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23302B6D8(uint64_t a1)
{
  unint64_t v2 = sub_23302C32C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Period.encode(to:)(void *a1)
{
  sub_23302C380(0, &qword_2687585E8, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23302C32C();
  sub_23309C480();
  v9[15] = 0;
  type metadata accessor for FHIRDateTime();
  sub_23302C5BC(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_23309C150();
  if (!v1)
  {
    type metadata accessor for Period();
    v9[14] = 1;
    sub_23309C150();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Period.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Period.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v23 = (char *)&v20 - v8;
  sub_23302C380(0, &qword_2687585F8, MEMORY[0x263F8E040]);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = type metadata accessor for Period();
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23302C32C();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v20 = v13;
  uint64_t v21 = v15;
  type metadata accessor for FHIRDateTime();
  char v27 = 0;
  sub_23302C5BC(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v17 = (uint64_t)v23;
  uint64_t v16 = v24;
  sub_23309C080();
  sub_23302C3E4(v17, (uint64_t)v21);
  char v26 = 1;
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v16);
  uint64_t v18 = (uint64_t)v21;
  sub_23302C3E4((uint64_t)v7, (uint64_t)&v21[*(int *)(v20 + 20)]);
  sub_23302C464(v18, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23302B554(v18, (uint64_t (*)(void))type metadata accessor for Period);
}

uint64_t sub_23302BCA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Period.init(from:)(a1, a2);
}

uint64_t sub_23302BCC0(void *a1)
{
  return Period.encode(to:)(a1);
}

uint64_t sub_23302BCD8()
{
  return sub_23309C420();
}

uint64_t sub_23302BD2C()
{
  return sub_232EB2E40();
}

uint64_t sub_23302BD6C()
{
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction6PeriodV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v45 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23302F094();
  uint64_t v8 = v7;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v50 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v42[-v11];
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v47 = &v42[-v18];
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v48 = &v42[-v20];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = &v42[-v22];
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  char v26 = &v42[-v25];
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = &v42[-v27];
  uint64_t v46 = a1;
  sub_23302B410(a1, (uint64_t)&v42[-v27]);
  uint64_t v49 = a2;
  sub_23302B410(a2, (uint64_t)v26);
  uint64_t v29 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_23302B410((uint64_t)v28, (uint64_t)v12);
  sub_23302B410((uint64_t)v26, v29);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v30((uint64_t)v12, 1, v4) != 1)
  {
    sub_23302B410((uint64_t)v12, (uint64_t)v23);
    if (v30(v29, 1, v4) != 1)
    {
      id v44 = v16;
      uint64_t v32 = v45;
      sub_2330007B4(v29, (uint64_t)v45);
      int v43 = static FHIRDateTime.== infix(_:_:)(v23, v32);
      uint64_t v33 = (uint64_t)v32;
      uint64_t v16 = v44;
      sub_23302B554(v33, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      sub_23302B490((uint64_t)v26);
      sub_23302B490((uint64_t)v28);
      sub_23302B554((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      sub_23302B490((uint64_t)v12);
      if ((v43 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    sub_23302B490((uint64_t)v26);
    sub_23302B490((uint64_t)v28);
    sub_23302B554((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_6:
    uint64_t v31 = (uint64_t)v12;
LABEL_14:
    sub_23302B554(v31, (uint64_t (*)(void))sub_23302F094);
    return 0;
  }
  sub_23302B490((uint64_t)v26);
  sub_23302B490((uint64_t)v28);
  if (v30(v29, 1, v4) != 1) {
    goto LABEL_6;
  }
  sub_23302B490((uint64_t)v12);
LABEL_8:
  uint64_t v34 = type metadata accessor for Period();
  uint64_t v35 = v48;
  sub_23302B410(v46 + *(int *)(v34 + 20), (uint64_t)v48);
  uint64_t v36 = v47;
  sub_23302B410(v49 + *(int *)(v34 + 20), (uint64_t)v47);
  uint64_t v37 = v50;
  uint64_t v38 = (uint64_t)&v50[*(int *)(v8 + 48)];
  sub_23302B410((uint64_t)v35, (uint64_t)v50);
  sub_23302B410((uint64_t)v36, v38);
  if (v30((uint64_t)v37, 1, v4) == 1)
  {
    sub_23302B490((uint64_t)v36);
    sub_23302B490((uint64_t)v35);
    if (v30(v38, 1, v4) == 1)
    {
      sub_23302B490((uint64_t)v37);
      return 1;
    }
    goto LABEL_13;
  }
  sub_23302B410((uint64_t)v37, (uint64_t)v16);
  if (v30(v38, 1, v4) == 1)
  {
    sub_23302B490((uint64_t)v36);
    sub_23302B490((uint64_t)v35);
    sub_23302B554((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_13:
    uint64_t v31 = (uint64_t)v37;
    goto LABEL_14;
  }
  uint64_t v40 = v45;
  sub_2330007B4(v38, (uint64_t)v45);
  char v41 = static FHIRDateTime.== infix(_:_:)(v16, v40);
  sub_23302B554((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_23302B490((uint64_t)v36);
  sub_23302B490((uint64_t)v35);
  sub_23302B554((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_23302B490((uint64_t)v37);
  return (v41 & 1) != 0;
}

unint64_t sub_23302C32C()
{
  unint64_t result = qword_2687585F0;
  if (!qword_2687585F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687585F0);
  }
  return result;
}

void sub_23302C380(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_23302C32C();
    unint64_t v7 = a3(a1, &type metadata for Period.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23302C3E4(uint64_t a1, uint64_t a2)
{
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23302C464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Period();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23302C4C8(void *a1)
{
  a1[1] = sub_23302C5BC(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
  a1[2] = sub_23302C5BC(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
  uint64_t result = sub_23302C5BC(&qword_268758600, (void (*)(uint64_t))type metadata accessor for Period);
  a1[3] = result;
  return result;
}

uint64_t sub_23302C574()
{
  return sub_23302C5BC(&qword_268758608, (void (*)(uint64_t))type metadata accessor for Period);
}

uint64_t sub_23302C5BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Period(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FHIRDateTime();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      a1[1] = a2[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      uint64_t v12 = a2[7];
      uint64_t v44 = v8;
      if (v12 == 1)
      {
        long long v13 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 5) = v13;
        a1[7] = a2[7];
      }
      else
      {
        *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
        *(_WORD *)((char *)a1 + 25) = *(_WORD *)((char *)a2 + 25);
        *(_OWORD *)((char *)a1 + 28) = *(_OWORD *)((char *)a2 + 28);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
        a1[6] = a2[6];
        a1[7] = v12;
        swift_bridgeObjectRetain();
      }
      uint64_t v14 = *(int *)(v7 + 28);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      uint64_t v20 = *(int *)(v7 + 32);
      uint64_t v21 = (uint64_t *)((char *)a1 + v20);
      uint64_t v22 = (uint64_t *)((char *)a2 + v20);
      uint64_t v23 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v23;
      uint64_t v8 = v44;
      uint64_t v24 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v44 + 56);
      swift_bridgeObjectRetain();
      v24(a1, 0, 1, v7);
    }
    uint64_t v25 = *(int *)(a3 + 20);
    char v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    if (v9((uint64_t *)v27, 1, v7))
    {
      sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *char v26 = *v27;
      *((void *)v26 + 1) = *((void *)v27 + 1);
      *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
      uint64_t v29 = *((void *)v27 + 7);
      uint64_t v30 = v8;
      if (v29 == 1)
      {
        long long v31 = *(_OWORD *)(v27 + 40);
        *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
        *(_OWORD *)(v26 + 40) = v31;
        *((void *)v26 + 7) = *((void *)v27 + 7);
      }
      else
      {
        v26[24] = v27[24];
        *(_WORD *)(v26 + 25) = *(_WORD *)(v27 + 25);
        *(_OWORD *)(v26 + 28) = *(_OWORD *)(v27 + 28);
        *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
        *((void *)v26 + 6) = *((void *)v27 + 6);
        *((void *)v26 + 7) = v29;
        swift_bridgeObjectRetain();
      }
      uint64_t v32 = *(int *)(v7 + 28);
      uint64_t v33 = &v26[v32];
      uint64_t v34 = &v27[v32];
      uint64_t v35 = sub_23309B300();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v38 = *(int *)(v7 + 32);
      uint64_t v39 = &v26[v38];
      uint64_t v40 = &v27[v38];
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      uint64_t v42 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56);
      swift_bridgeObjectRetain();
      v42(v26, 0, 1, v7);
    }
  }
  return a1;
}

void sub_23302CB30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for Period(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    if (*(void *)(a1 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v6 = a1 + *(int *)(v4 + 28);
    uint64_t v7 = sub_23309B300();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v9, 1, v4);
  if (!result)
  {
    if (*(void *)(v9 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = v9 + *(int *)(v4 + 28);
    uint64_t v12 = sub_23309B300();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *initializeWithCopy for Period(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FHIRDateTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    uint64_t v10 = *((void *)a2 + 7);
    uint64_t v42 = v7;
    if (v10 == 1)
    {
      long long v11 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = v11;
      *((void *)a1 + 7) = *((void *)a2 + 7);
    }
    else
    {
      a1[24] = a2[24];
      *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
      *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
      *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      *((void *)a1 + 7) = v10;
      swift_bridgeObjectRetain();
    }
    uint64_t v12 = *(int *)(v6 + 28);
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    uint64_t v15 = sub_23309B300();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v18 = *(int *)(v6 + 32);
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    uint64_t v7 = v42;
    uint64_t v22 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v42 + 56);
    swift_bridgeObjectRetain();
    v22(a1, 0, 1, v6);
  }
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  if (v8(v25, 1, v6))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v24 = *v25;
    *((void *)v24 + 1) = *((void *)v25 + 1);
    *((_DWORD *)v24 + 4) = *((_DWORD *)v25 + 4);
    uint64_t v27 = *((void *)v25 + 7);
    uint64_t v28 = v7;
    if (v27 == 1)
    {
      long long v29 = *(_OWORD *)(v25 + 40);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)(v25 + 24);
      *(_OWORD *)(v24 + 40) = v29;
      *((void *)v24 + 7) = *((void *)v25 + 7);
    }
    else
    {
      v24[24] = v25[24];
      *(_WORD *)(v24 + 25) = *(_WORD *)(v25 + 25);
      *(_OWORD *)(v24 + 28) = *(_OWORD *)(v25 + 28);
      *((_DWORD *)v24 + 11) = *((_DWORD *)v25 + 11);
      *((void *)v24 + 6) = *((void *)v25 + 6);
      *((void *)v24 + 7) = v27;
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = *(int *)(v6 + 28);
    long long v31 = &v24[v30];
    uint64_t v32 = &v25[v30];
    uint64_t v33 = sub_23309B300();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v36 = *(int *)(v6 + 32);
    uint64_t v37 = &v24[v36];
    uint64_t v38 = &v25[v36];
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56);
    swift_bridgeObjectRetain();
    v40(v24, 0, 1, v6);
  }
  return a1;
}

uint64_t assignWithCopy for Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FHIRDateTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_23302B554(a1, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    uint64_t v94 = v7;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
    uint64_t v16 = (long long *)(a1 + 24);
    uint64_t v17 = (long long *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 56);
    if (*(void *)(a1 + 56) == 1)
    {
      if (v18 == 1)
      {
        long long v19 = *v17;
        long long v20 = *(_OWORD *)(a2 + 40);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        long long *v16 = v19;
        *(_OWORD *)(a1 + 40) = v20;
      }
      else
      {
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
        *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
        long long v34 = *(_OWORD *)(a2 + 28);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
        *(_OWORD *)(a1 + 28) = v34;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v18 == 1)
    {
      sub_232F0434C(a1 + 24);
      uint64_t v32 = *(void *)(a2 + 56);
      long long v33 = *(_OWORD *)(a2 + 40);
      long long *v16 = *v17;
      *(_OWORD *)(a1 + 40) = v33;
      *(void *)(a1 + 56) = v32;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
      *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
      *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
      *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
      *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
      *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v35 = *(int *)(v6 + 28);
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (void *)(a2 + v35);
    uint64_t v38 = sub_23309B300();
    uint64_t v92 = *(void *)(v38 - 8);
    uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v92 + 48);
    uint64_t v93 = v36;
    LODWORD(v36) = v39(v36, 1, v38);
    int v40 = v39(v37, 1, v38);
    if (v36)
    {
      if (!v40)
      {
        (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v93, v37, v38);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v38);
        goto LABEL_28;
      }
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v42 = *(void *)(*(void *)(v41 - 8) + 64);
      int v43 = v93;
    }
    else
    {
      if (!v40)
      {
        (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v93, v37, v38);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v92 + 8))(v93, v38);
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v42 = *(void *)(*(void *)(v44 - 8) + 64);
      int v43 = v93;
    }
    memcpy(v43, v37, v42);
LABEL_28:
    uint64_t v45 = *(int *)(v6 + 32);
    uint64_t v46 = (void *)(a1 + v45);
    uint64_t v47 = (void *)(a2 + v45);
    void *v46 = *v47;
    v46[1] = v47[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v7 = v94;
    goto LABEL_29;
  }
  if (v10)
  {
LABEL_7:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_29;
  }
  uint64_t v96 = a3;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = v7;
  if (*(void *)(a2 + 56) == 1)
  {
    long long v13 = *(_OWORD *)(a2 + 24);
    long long v14 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 40) = v14;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
    long long v21 = *(_OWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 28) = v21;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = *(int *)(v6 + 28);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (const void *)(a2 + v22);
  uint64_t v25 = sub_23309B300();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v28 = *(int *)(v6 + 32);
  long long v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *long long v29 = *v30;
  v29[1] = v30[1];
  uint64_t v7 = v12;
  long long v31 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56);
  swift_bridgeObjectRetain();
  v31(a1, 0, 1, v6);
  a3 = v96;
LABEL_29:
  uint64_t v48 = a3[5];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  int v51 = v8(a1 + v48, 1, v6);
  int v52 = v8(v50, 1, v6);
  if (!v51)
  {
    if (v52)
    {
      sub_23302B554(v49, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_35;
    }
    *(unsigned char *)uint64_t v49 = *(unsigned char *)v50;
    *(void *)(v49 + 8) = *(void *)(v50 + 8);
    *(_WORD *)(v49 + 16) = *(_WORD *)(v50 + 16);
    *(_WORD *)(v49 + 18) = *(_WORD *)(v50 + 18);
    uint64_t v58 = (long long *)(v49 + 24);
    uint64_t v59 = (long long *)(v50 + 24);
    uint64_t v60 = *(void *)(v50 + 56);
    if (*(void *)(v49 + 56) == 1)
    {
      if (v60 == 1)
      {
        long long v61 = *v59;
        long long v62 = *(_OWORD *)(v50 + 40);
        *(void *)(v49 + 56) = *(void *)(v50 + 56);
        long long *v58 = v61;
        *(_OWORD *)(v49 + 40) = v62;
      }
      else
      {
        *(unsigned char *)(v49 + 24) = *(unsigned char *)(v50 + 24);
        *(unsigned char *)(v49 + 25) = *(unsigned char *)(v50 + 25);
        *(unsigned char *)(v49 + 26) = *(unsigned char *)(v50 + 26);
        long long v76 = *(_OWORD *)(v50 + 28);
        *(_DWORD *)(v49 + 44) = *(_DWORD *)(v50 + 44);
        *(_OWORD *)(v49 + 28) = v76;
        *(void *)(v49 + 48) = *(void *)(v50 + 48);
        *(void *)(v49 + 56) = *(void *)(v50 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v60 == 1)
    {
      sub_232F0434C(v49 + 24);
      uint64_t v74 = *(void *)(v50 + 56);
      long long v75 = *(_OWORD *)(v50 + 40);
      long long *v58 = *v59;
      *(_OWORD *)(v49 + 40) = v75;
      *(void *)(v49 + 56) = v74;
    }
    else
    {
      *(unsigned char *)(v49 + 24) = *(unsigned char *)(v50 + 24);
      *(unsigned char *)(v49 + 25) = *(unsigned char *)(v50 + 25);
      *(unsigned char *)(v49 + 26) = *(unsigned char *)(v50 + 26);
      *(_DWORD *)(v49 + 28) = *(_DWORD *)(v50 + 28);
      *(_WORD *)(v49 + 32) = *(_WORD *)(v50 + 32);
      *(_WORD *)(v49 + 34) = *(_WORD *)(v50 + 34);
      *(_WORD *)(v49 + 36) = *(_WORD *)(v50 + 36);
      *(_WORD *)(v49 + 38) = *(_WORD *)(v50 + 38);
      *(_WORD *)(v49 + 40) = *(_WORD *)(v50 + 40);
      *(_WORD *)(v49 + 42) = *(_WORD *)(v50 + 42);
      *(_WORD *)(v49 + 44) = *(_WORD *)(v50 + 44);
      *(_WORD *)(v49 + 46) = *(_WORD *)(v50 + 46);
      *(void *)(v49 + 48) = *(void *)(v50 + 48);
      *(void *)(v49 + 56) = *(void *)(v50 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v77 = *(int *)(v6 + 28);
    uint64_t v78 = (void *)(v49 + v77);
    uint64_t v79 = (void *)(v50 + v77);
    uint64_t v80 = sub_23309B300();
    uint64_t v81 = *(void *)(v80 - 8);
    int v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
    uint64_t v95 = v78;
    LODWORD(v78) = v82(v78, 1, v80);
    int v83 = v82(v79, 1, v80);
    if (v78)
    {
      if (!v83)
      {
        (*(void (**)(void *, void *, uint64_t))(v81 + 16))(v95, v79, v80);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v81 + 56))(v95, 0, 1, v80);
        goto LABEL_56;
      }
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v85 = *(void *)(*(void *)(v84 - 8) + 64);
      uint64_t v86 = v95;
    }
    else
    {
      if (!v83)
      {
        (*(void (**)(void *, void *, uint64_t))(v81 + 24))(v95, v79, v80);
        goto LABEL_56;
      }
      (*(void (**)(void *, uint64_t))(v81 + 8))(v95, v80);
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v85 = *(void *)(*(void *)(v87 - 8) + 64);
      uint64_t v86 = v95;
    }
    memcpy(v86, v79, v85);
LABEL_56:
    uint64_t v88 = *(int *)(v6 + 32);
    int v89 = (void *)(v49 + v88);
    uint64_t v90 = (void *)(v50 + v88);
    *int v89 = *v90;
    v89[1] = v90[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v52)
  {
LABEL_35:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v49, (const void *)v50, *(void *)(*(void *)(v57 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v49 = *(unsigned char *)v50;
  uint64_t v53 = *(void *)(v50 + 8);
  *(_DWORD *)(v49 + 16) = *(_DWORD *)(v50 + 16);
  *(void *)(v49 + 8) = v53;
  uint64_t v54 = v7;
  if (*(void *)(v50 + 56) == 1)
  {
    long long v55 = *(_OWORD *)(v50 + 24);
    long long v56 = *(_OWORD *)(v50 + 40);
    *(void *)(v49 + 56) = *(void *)(v50 + 56);
    *(_OWORD *)(v49 + 24) = v55;
    *(_OWORD *)(v49 + 40) = v56;
  }
  else
  {
    *(unsigned char *)(v49 + 24) = *(unsigned char *)(v50 + 24);
    *(unsigned char *)(v49 + 25) = *(unsigned char *)(v50 + 25);
    *(unsigned char *)(v49 + 26) = *(unsigned char *)(v50 + 26);
    long long v63 = *(_OWORD *)(v50 + 28);
    *(_DWORD *)(v49 + 44) = *(_DWORD *)(v50 + 44);
    *(_OWORD *)(v49 + 28) = v63;
    *(void *)(v49 + 48) = *(void *)(v50 + 48);
    *(void *)(v49 + 56) = *(void *)(v50 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v64 = *(int *)(v6 + 28);
  uint64_t v65 = (void *)(v49 + v64);
  uint64_t v66 = (const void *)(v50 + v64);
  uint64_t v67 = sub_23309B300();
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 16))(v65, v66, v67);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  uint64_t v70 = *(int *)(v6 + 32);
  uint64_t v71 = (void *)(v49 + v70);
  uint64_t v72 = (void *)(v50 + v70);
  *uint64_t v71 = *v72;
  v71[1] = v72[1];
  uint64_t v73 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56);
  swift_bridgeObjectRetain();
  v73(v49, 0, 1, v6);
  return a1;
}

unsigned char *initializeWithTake for Period(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FHIRDateTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v28 = v7;
    *a1 = *a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *((void *)a1 + 7) = *((void *)a2 + 7);
    uint64_t v10 = *(int *)(v6 + 28);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = sub_23309B300();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
    uint64_t v7 = v28;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v6);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (v8(v18, 1, v6))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v7;
    *uint64_t v17 = *v18;
    *((void *)v17 + 1) = *((void *)v18 + 1);
    *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
    *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
    *((void *)v17 + 7) = *((void *)v18 + 7);
    uint64_t v21 = *(int *)(v6 + 28);
    uint64_t v22 = &v17[v21];
    uint64_t v23 = &v18[v21];
    uint64_t v24 = sub_23309B300();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *(_OWORD *)&v17[*(int *)(v6 + 32)] = *(_OWORD *)&v18[*(int *)(v6 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

uint64_t assignWithTake for Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FHIRDateTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_23302B554(a1, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    uint64_t v70 = v7;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    if (*(void *)(a1 + 56) != 1)
    {
      uint64_t v19 = *(void *)(a2 + 56);
      if (v19 != 1)
      {
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = v19;
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v21 = *(int *)(v6 + 28);
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (void *)(a2 + v21);
        uint64_t v24 = sub_23309B300();
        uint64_t v68 = *(void *)(v24 - 8);
        uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v68 + 48);
        uint64_t v69 = v22;
        LODWORD(v22) = v25(v22, 1, v24);
        int v26 = v25(v23, 1, v24);
        if (v22)
        {
          if (!v26)
          {
            (*(void (**)(void *, void *, uint64_t))(v68 + 32))(v69, v23, v24);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v24);
            goto LABEL_23;
          }
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
          long long v29 = v69;
        }
        else
        {
          if (!v26)
          {
            (*(void (**)(void *, void *, uint64_t))(v68 + 40))(v69, v23, v24);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v68 + 8))(v69, v24);
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v28 = *(void *)(*(void *)(v30 - 8) + 64);
          long long v29 = v69;
        }
        memcpy(v29, v23, v28);
LABEL_23:
        uint64_t v31 = *(int *)(v6 + 32);
        uint64_t v32 = (void *)(a1 + v31);
        long long v33 = (uint64_t *)(a2 + v31);
        uint64_t v35 = *v33;
        uint64_t v34 = v33[1];
        *uint64_t v32 = v35;
        v32[1] = v34;
        swift_bridgeObjectRelease();
        uint64_t v7 = v70;
        goto LABEL_24;
      }
      sub_232F0434C(a1 + 24);
    }
    long long v20 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v20;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    goto LABEL_15;
  }
  if (v10)
  {
LABEL_7:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v72 = a3;
  uint64_t v11 = v7;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(int *)(v6 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_23309B300();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + *(int *)(v6 + 32)) = *(_OWORD *)(a2 + *(int *)(v6 + 32));
  uint64_t v7 = v11;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v6);
  a3 = v72;
LABEL_24:
  uint64_t v36 = a3[5];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  int v39 = v8(a1 + v36, 1, v6);
  int v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (v40)
    {
      sub_23302B554(v37, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_30;
    }
    *(unsigned char *)uint64_t v37 = *(unsigned char *)v38;
    *(void *)(v37 + 8) = *(void *)(v38 + 8);
    *(_DWORD *)(v37 + 16) = *(_DWORD *)(v38 + 16);
    if (*(void *)(v37 + 56) != 1)
    {
      uint64_t v49 = *(void *)(v38 + 56);
      if (v49 != 1)
      {
        *(unsigned char *)(v37 + 24) = *(unsigned char *)(v38 + 24);
        *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
        *(_DWORD *)(v37 + 28) = *(_DWORD *)(v38 + 28);
        *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
        *(void *)(v37 + 48) = *(void *)(v38 + 48);
        *(void *)(v37 + 56) = v49;
        swift_bridgeObjectRelease();
LABEL_38:
        uint64_t v51 = *(int *)(v6 + 28);
        int v52 = (void *)(v37 + v51);
        uint64_t v53 = (void *)(v38 + v51);
        uint64_t v54 = sub_23309B300();
        uint64_t v55 = *(void *)(v54 - 8);
        long long v56 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v55 + 48);
        uint64_t v71 = v52;
        LODWORD(v52) = v56(v52, 1, v54);
        int v57 = v56(v53, 1, v54);
        if (v52)
        {
          if (!v57)
          {
            (*(void (**)(void *, void *, uint64_t))(v55 + 32))(v71, v53, v54);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v71, 0, 1, v54);
            goto LABEL_46;
          }
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v59 = *(void *)(*(void *)(v58 - 8) + 64);
          uint64_t v60 = v71;
        }
        else
        {
          if (!v57)
          {
            (*(void (**)(void *, void *, uint64_t))(v55 + 40))(v71, v53, v54);
            goto LABEL_46;
          }
          (*(void (**)(void *, uint64_t))(v55 + 8))(v71, v54);
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v59 = *(void *)(*(void *)(v61 - 8) + 64);
          uint64_t v60 = v71;
        }
        memcpy(v60, v53, v59);
LABEL_46:
        uint64_t v62 = *(int *)(v6 + 32);
        long long v63 = (void *)(v37 + v62);
        uint64_t v64 = (uint64_t *)(v38 + v62);
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        void *v63 = v66;
        v63[1] = v65;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_232F0434C(v37 + 24);
    }
    long long v50 = *(_OWORD *)(v38 + 40);
    *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
    *(_OWORD *)(v37 + 40) = v50;
    *(void *)(v37 + 56) = *(void *)(v38 + 56);
    goto LABEL_38;
  }
  if (v40)
  {
LABEL_30:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v37, (const void *)v38, *(void *)(*(void *)(v48 - 8) + 64));
    return a1;
  }
  uint64_t v41 = v7;
  *(unsigned char *)uint64_t v37 = *(unsigned char *)v38;
  *(void *)(v37 + 8) = *(void *)(v38 + 8);
  *(_DWORD *)(v37 + 16) = *(_DWORD *)(v38 + 16);
  *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
  *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
  *(void *)(v37 + 56) = *(void *)(v38 + 56);
  uint64_t v42 = *(int *)(v6 + 28);
  int v43 = (void *)(v37 + v42);
  uint64_t v44 = (const void *)(v38 + v42);
  uint64_t v45 = sub_23309B300();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *(_OWORD *)(v37 + *(int *)(v6 + 32)) = *(_OWORD *)(v38 + *(int *)(v6 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Period(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23302EBDC);
}

uint64_t sub_23302EBDC(uint64_t a1, uint64_t a2)
{
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Period(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23302EC78);
}

uint64_t sub_23302EC78(uint64_t a1, uint64_t a2)
{
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_23302ED04()
{
  sub_23302CB30(319, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Period.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23302EE78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Period.CodingKeys()
{
  return &type metadata for Period.CodingKeys;
}

unint64_t sub_23302EEB4()
{
  unint64_t result = qword_268758620;
  if (!qword_268758620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758620);
  }
  return result;
}

unint64_t sub_23302EF0C()
{
  unint64_t result = qword_268758628;
  if (!qword_268758628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758628);
  }
  return result;
}

unint64_t sub_23302EF64()
{
  unint64_t result = qword_268758630;
  if (!qword_268758630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758630);
  }
  return result;
}

uint64_t sub_23302EFB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_23302F094()
{
  if (!qword_268756550)
  {
    sub_23302CB30(255, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756550);
    }
  }
}

uint64_t Reference.display.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Reference.reference.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Reference.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Reference() + 24);
  return sub_23302FE18(v3, a1);
}

uint64_t Reference.hash(into:)(uint64_t a1)
{
  if (!*(void *)(v1 + 8))
  {
    sub_23309C3F0();
    if (*(void *)(v1 + 24)) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    goto LABEL_6;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*(void *)(v1 + 24)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_6:
  type metadata accessor for Reference();
  return sub_232EB2488(a1);
}

uint64_t sub_23302F29C()
{
  uint64_t v1 = 0x636E657265666572;
  if (*v0 != 1) {
    uint64_t v1 = 0x696669746E656469;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79616C70736964;
  }
}

uint64_t sub_23302F300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233031A6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23302F328(uint64_t a1)
{
  unint64_t v2 = sub_23302FE98();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23302F364(uint64_t a1)
{
  unint64_t v2 = sub_23302FE98();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Reference.encode(to:)(void *a1)
{
  sub_23302FEEC(0, &qword_268758638, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23302FE98();
  sub_23309C480();
  v9[15] = 0;
  sub_23309C110();
  if (!v1)
  {
    v9[14] = 1;
    sub_23309C110();
    type metadata accessor for Reference();
    v9[13] = 2;
    type metadata accessor for Identifier();
    sub_233030128(&qword_268756B68, (void (*)(uint64_t))type metadata accessor for Identifier);
    sub_23309C150();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Reference.hashValue.getter()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t Reference.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - v5;
  sub_23302FEEC(0, &qword_268758648, MEMORY[0x263F8E040]);
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for Reference();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23302FE98();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v17 = v10;
  uint64_t v13 = v19;
  char v23 = 0;
  uint64_t *v12 = sub_23309C040();
  v12[1] = v14;
  char v22 = 1;
  void v12[2] = sub_23309C040();
  v12[3] = v15;
  type metadata accessor for Identifier();
  char v21 = 2;
  sub_233030128(&qword_268756918, (void (*)(uint64_t))type metadata accessor for Identifier);
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v20);
  sub_23302FF50((uint64_t)v6, (uint64_t)v12 + *(int *)(v17 + 24));
  sub_23302FFD0((uint64_t)v12, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_233030EA0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Reference);
}

uint64_t sub_23302F940@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Reference.init(from:)(a1, a2);
}

uint64_t sub_23302F958(void *a1)
{
  return Reference.encode(to:)(a1);
}

uint64_t sub_23302F970()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_23302F9B4()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Identifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233031BDC();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v34 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v22) {
    return 0;
  }
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_23309C220(), BOOL result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v25 = a1[3];
    uint64_t v26 = a2[3];
    if (v25)
    {
      if (!v26) {
        return 0;
      }
      if (a1[2] != a2[2] || v25 != v26)
      {
        char v27 = sub_23309C220();
        BOOL result = 0;
        if ((v27 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v35 = v7;
    uint64_t v28 = v5;
    uint64_t v29 = type metadata accessor for Reference();
    sub_23302FE18((uint64_t)a1 + *(int *)(v29 + 24), (uint64_t)v20);
    sub_23302FE18((uint64_t)a2 + *(int *)(v29 + 24), (uint64_t)v18);
    uint64_t v30 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_23302FE18((uint64_t)v20, (uint64_t)v11);
    sub_23302FE18((uint64_t)v18, v30);
    uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (v31((uint64_t)v11, 1, v4) == 1)
    {
      sub_233031C5C((uint64_t)v18);
      sub_233031C5C((uint64_t)v20);
      if (v31(v30, 1, v4) == 1)
      {
        sub_233031C5C((uint64_t)v11);
        return 1;
      }
      goto LABEL_20;
    }
    sub_23302FE18((uint64_t)v11, (uint64_t)v15);
    if (v31(v30, 1, v4) == 1)
    {
      sub_233031C5C((uint64_t)v18);
      sub_233031C5C((uint64_t)v20);
      sub_233030EA0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_20:
      sub_233030EA0((uint64_t)v11, (uint64_t (*)(void))sub_233031BDC);
      return 0;
    }
    uint64_t v32 = (uint64_t)v35;
    sub_233031CD4(v30, (uint64_t)v35);
    char v33 = static Identifier.== infix(_:_:)(v15, v32);
    sub_233030EA0(v32, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_233031C5C((uint64_t)v18);
    sub_233031C5C((uint64_t)v20);
    sub_233030EA0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_233031C5C((uint64_t)v11);
    return (v33 & 1) != 0;
  }
  return result;
}

uint64_t type metadata accessor for Reference()
{
  uint64_t result = qword_268758660;
  if (!qword_268758660) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23302FE18(uint64_t a1, uint64_t a2)
{
  sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23302FE98()
{
  unint64_t result = qword_268758640;
  if (!qword_268758640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758640);
  }
  return result;
}

void sub_23302FEEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_23302FE98();
    unint64_t v7 = a3(a1, &type metadata for Reference.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23302FF50(uint64_t a1, uint64_t a2)
{
  sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23302FFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_233030034(void *a1)
{
  a1[1] = sub_233030128(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
  a1[2] = sub_233030128(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
  uint64_t result = sub_233030128(&qword_268758650, (void (*)(uint64_t))type metadata accessor for Reference);
  a1[3] = result;
  return result;
}

uint64_t sub_2330300E0()
{
  return sub_233030128(&qword_268758658, (void (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t sub_233030128(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Reference(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for Identifier();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = v9[1];
      *uint64_t v8 = *v9;
      v8[1] = v15;
      uint64_t v16 = v9[3];
      swift_bridgeObjectRetain();
      if (v16 == 1)
      {
        *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
        v8[4] = v9[4];
      }
      else
      {
        v8[2] = v9[2];
        v8[3] = v16;
        v8[4] = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v17 = *(int *)(v10 + 24);
      uint64_t v18 = (char *)v8 + v17;
      uint64_t v19 = (char *)v9 + v17;
      uint64_t v20 = sub_23309AF80();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      uint64_t v23 = *(int *)(v10 + 28);
      uint64_t v24 = (void *)((char *)v8 + v23);
      uint64_t v25 = (void *)((char *)v9 + v23);
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      char v27 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
      swift_bridgeObjectRetain();
      v27(v8, 0, 1, v10);
    }
  }
  return v3;
}

void sub_233030464(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for Reference(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Identifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v4 + 24) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 24);
    uint64_t v8 = sub_23309AF80();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Reference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    uint64_t v14 = v8[3];
    swift_bridgeObjectRetain();
    if (v14 == 1)
    {
      *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      v7[4] = v8[4];
    }
    else
    {
      v7[2] = v8[2];
      v7[3] = v14;
      v7[4] = v8[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v15 = *(int *)(v9 + 24);
    uint64_t v16 = (char *)v7 + v15;
    uint64_t v17 = (char *)v8 + v15;
    uint64_t v18 = sub_23309AF80();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v21 = *(int *)(v9 + 28);
    uint64_t v22 = (void *)((char *)v7 + v21);
    uint64_t v23 = (void *)((char *)v8 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    swift_bridgeObjectRetain();
    v25(v7, 0, 1, v9);
  }
  return a1;
}

void *assignWithCopy for Reference(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (long long *)((char *)a1 + v6);
  uint64_t v8 = (long long *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_233030EA0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_7;
    }
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = *((void *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = v7 + 1;
    uint64_t v18 = v8 + 1;
    uint64_t v19 = *((void *)v8 + 3);
    if (*((void *)v7 + 3) == 1)
    {
      if (v19 == 1)
      {
        long long v20 = *v18;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *uint64_t v17 = v20;
      }
      else
      {
        *((void *)v7 + 2) = *((void *)v8 + 2);
        *((void *)v7 + 3) = *((void *)v8 + 3);
        *((void *)v7 + 4) = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v19 == 1)
    {
      sub_232F042F8((uint64_t)(v7 + 1));
      uint64_t v31 = *((void *)v8 + 4);
      *uint64_t v17 = *v18;
      *((void *)v7 + 4) = v31;
    }
    else
    {
      *((void *)v7 + 2) = *((void *)v8 + 2);
      *((void *)v7 + 3) = *((void *)v8 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v7 + 4) = *((void *)v8 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = *(int *)(v9 + 24);
    char v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)v8 + v32;
    uint64_t v35 = sub_23309AF80();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v47 = v33;
    LODWORD(v33) = v37(v33, 1, v35);
    int v38 = v37(v34, 1, v35);
    if (v33)
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v36 + 16))(v47, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v47, 0, 1, v35);
        goto LABEL_28;
      }
      sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v40 = *(void *)(*(void *)(v39 - 8) + 64);
      uint64_t v41 = v47;
    }
    else
    {
      if (!v38)
      {
        (*(void (**)(void *, char *, uint64_t))(v36 + 24))(v47, v34, v35);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v36 + 8))(v47, v35);
      sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v40 = *(void *)(*(void *)(v42 - 8) + 64);
      uint64_t v41 = v47;
    }
    memcpy(v41, v34, v40);
LABEL_28:
    uint64_t v43 = *(int *)(v9 + 28);
    uint64_t v44 = (void *)((char *)v7 + v43);
    uint64_t v45 = (void *)((char *)v8 + v43);
    *uint64_t v44 = *v45;
    v44[1] = v45[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v13)
  {
LABEL_7:
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = *((void *)v8 + 1);
  uint64_t v14 = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  if (v14 == 1)
  {
    long long v15 = v8[1];
    *((void *)v7 + 4) = *((void *)v8 + 4);
    v7[1] = v15;
  }
  else
  {
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *((void *)v7 + 3) = *((void *)v8 + 3);
    *((void *)v7 + 4) = *((void *)v8 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = *(int *)(v9 + 24);
  uint64_t v22 = (char *)v7 + v21;
  uint64_t v23 = (char *)v8 + v21;
  uint64_t v24 = sub_23309AF80();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v27 = *(int *)(v9 + 28);
  uint64_t v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = (void *)((char *)v8 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  uint64_t v30 = *(void (**)(long long *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v30(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_233030EA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for Reference(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (_OWORD *)((char *)a1 + v5);
  uint64_t v7 = (_OWORD *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for Identifier();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    long long v11 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v11;
    *((void *)v6 + 4) = *((void *)v7 + 4);
    uint64_t v12 = *(int *)(v8 + 24);
    int v13 = (char *)v6 + v12;
    uint64_t v14 = (char *)v7 + v12;
    uint64_t v15 = sub_23309AF80();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)((char *)v6 + *(int *)(v8 + 28)) = *(_OWORD *)((char *)v7 + *(int *)(v8 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithTake for Reference(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for Identifier();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_233030EA0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_7;
    }
    uint64_t v24 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v24;
    swift_bridgeObjectRelease();
    if (v9[3] != 1)
    {
      uint64_t v25 = v10[3];
      if (v25 != 1)
      {
        v9[2] = v10[2];
        v9[3] = v25;
        swift_bridgeObjectRelease();
        v9[4] = v10[4];
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v26 = *(int *)(v11 + 24);
        uint64_t v27 = (char *)v9 + v26;
        uint64_t v28 = (char *)v10 + v26;
        uint64_t v29 = sub_23309AF80();
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
        uint64_t v43 = v27;
        LODWORD(v27) = v31(v27, 1, v29);
        int v32 = v31(v28, 1, v29);
        if (v27)
        {
          if (!v32)
          {
            (*(void (**)(void *, char *, uint64_t))(v30 + 32))(v43, v28, v29);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v43, 0, 1, v29);
            goto LABEL_23;
          }
          sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          size_t v34 = *(void *)(*(void *)(v33 - 8) + 64);
          uint64_t v35 = v43;
        }
        else
        {
          if (!v32)
          {
            (*(void (**)(void *, char *, uint64_t))(v30 + 40))(v43, v28, v29);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v30 + 8))(v43, v29);
          sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
          size_t v34 = *(void *)(*(void *)(v36 - 8) + 64);
          uint64_t v35 = v43;
        }
        memcpy(v35, v28, v34);
LABEL_23:
        uint64_t v37 = *(int *)(v11 + 28);
        int v38 = (void *)((char *)v9 + v37);
        uint64_t v39 = (void *)((char *)v10 + v37);
        uint64_t v41 = *v39;
        uint64_t v40 = v39[1];
        *int v38 = v41;
        v38[1] = v40;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_232F042F8((uint64_t)(v9 + 2));
    }
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    goto LABEL_15;
  }
  if (v15)
  {
LABEL_7:
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    memcpy(v9, v10, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  long long v16 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v16;
  v9[4] = v10[4];
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = (char *)v9 + v17;
  uint64_t v19 = (char *)v10 + v17;
  uint64_t v20 = sub_23309AF80();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_233030464(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2330315FC);
}

uint64_t sub_2330315FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2330316E8);
}

uint64_t sub_2330316E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_2330317AC()
{
  sub_233030464(319, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Reference.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23303192CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Reference.CodingKeys()
{
  return &type metadata for Reference.CodingKeys;
}

unint64_t sub_233031968()
{
  unint64_t result = qword_268758670;
  if (!qword_268758670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758670);
  }
  return result;
}

unint64_t sub_2330319C0()
{
  unint64_t result = qword_268758678;
  if (!qword_268758678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758678);
  }
  return result;
}

unint64_t sub_233031A18()
{
  unint64_t result = qword_268758680;
  if (!qword_268758680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758680);
  }
  return result;
}

uint64_t sub_233031A6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79616C70736964 && a2 == 0xE700000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xE900000000000065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void sub_233031BDC()
{
  if (!qword_268756540)
  {
    sub_233030464(255, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756540);
    }
  }
}

uint64_t sub_233031C5C(uint64_t a1)
{
  sub_233030464(0, &qword_268756538, (void (*)(uint64_t))type metadata accessor for Identifier);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233031CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Identifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_233031D3C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    sub_232F39748(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(type metadata accessor for Coding() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = Coding.description.getter();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_232F39748(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

Swift::Bool __swiftcall CodeableConcept.hasCoding(system:code:)(Swift::String system, Swift::String code)
{
  Swift::String v36 = code;
  Swift::String v40 = system;
  int v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233033AB4(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v33 - v5;
  uint64_t v7 = sub_23309AF80();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Coding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233033AB4(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v3);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v33 - v15;
  uint64_t v17 = *(void *)(v2 + 16);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v10);
LABEL_18:
    Swift::Bool v31 = 0;
    goto LABEL_19;
  }
  uint64_t v41 = v10;
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v33 = v17;
    size_t v34 = (char *)&v33 - v15;
    uint64_t v19 = v11;
    uint64_t v20 = v17 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v43 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v44 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v35 = v19;
    uint64_t v22 = *(void *)(v19 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = v41;
    uint64_t v24 = v42;
    uint64_t v38 = v22;
    uint64_t v39 = v7;
    uint64_t v37 = v21;
    do
    {
      sub_232F65C38(v20, (uint64_t)v13);
      sub_232F41E94((uint64_t)v13, (uint64_t)v6);
      if ((*v21)(v6, 1, v7) == 1)
      {
        sub_2330339F0((uint64_t)v6, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      }
      else
      {
        (*v44)(v24, v6, v7);
        uint64_t v25 = &v13[*(int *)(v23 + 20)];
        uint64_t v26 = v7;
        uint64_t v27 = *((void *)v25 + 1);
        if (v27)
        {
          uint64_t v42 = *(char **)v25;
          uint64_t v46 = sub_23309AEE0();
          uint64_t v47 = v28;
          Swift::String v45 = v40;
          sub_232F379FC();
          uint64_t v29 = sub_23309BD60();
          swift_bridgeObjectRelease();
          if (v29)
          {
            uint64_t v7 = v39;
            (*v43)(v24, v39);
            uint64_t v23 = v41;
            uint64_t v21 = v37;
            uint64_t v22 = v38;
          }
          else
          {
            uint64_t v46 = (uint64_t)v42;
            uint64_t v47 = v27;
            Swift::String v45 = v36;
            uint64_t v30 = sub_23309BD60();
            uint64_t v7 = v39;
            (*v43)(v24, v39);
            uint64_t v23 = v41;
            uint64_t v21 = v37;
            uint64_t v22 = v38;
            if (!v30)
            {
              swift_bridgeObjectRelease();
              long long v16 = v34;
              sub_232F65DAC((uint64_t)v13, (uint64_t)v34);
              uint64_t v11 = v35;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v16, 0, 1, v23);
              goto LABEL_17;
            }
          }
        }
        else
        {
          (*v43)(v24, v26);
          uint64_t v7 = v26;
        }
      }
      sub_2330024D0((uint64_t)v13);
      v20 += v22;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    long long v16 = v34;
    uint64_t v11 = v35;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = v41;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v23);
LABEL_17:
  swift_bridgeObjectRelease();
  Swift::Bool v31 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v23) == 1) {
    goto LABEL_18;
  }
LABEL_19:
  sub_2330339F0((uint64_t)v16, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  return v31;
}

uint64_t CodeableConcept.init(text:coding:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t CodeableConcept.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CodeableConcept.coding.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodeableConcept.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (!*(void *)(v1 + 8))
  {
    sub_23309C3F0();
    if (v3) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2330324B8()
{
  if (*v0) {
    return 0x676E69646F63;
  }
  else {
    return 1954047348;
  }
}

uint64_t sub_2330324E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233034164(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233032510(uint64_t a1)
{
  unint64_t v2 = sub_233033A60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23303254C(uint64_t a1)
{
  unint64_t v2 = sub_233033A60();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CodeableConcept.encode(to:)(void *a1)
{
  sub_233033B18(0, &qword_268758688, MEMORY[0x263F8E0C0]);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v13 - v6;
  v13[0] = *(void *)(v1 + 16);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_233033A60();
  sub_23309C480();
  char v15 = 0;
  sub_23309C110();
  if (!v2)
  {
    v13[1] = v13[0];
    char v14 = 1;
    sub_233033AB4(0, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
    sub_233033B7C(&qword_268756460, &qword_268756468);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v11);
}

uint64_t CodeableConcept.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  sub_23309C3D0();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t CodeableConcept.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_233033B18(0, &qword_268758698, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233033A60();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v17 = 0;
  uint64_t v10 = sub_23309C040();
  uint64_t v12 = v11;
  sub_233033AB4(0, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
  char v16 = 1;
  sub_233033B7C(&qword_268756478, &qword_268756480);
  swift_bridgeObjectRetain();
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = v15[1];
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233032AF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return CodeableConcept.init(from:)(a1, a2);
}

uint64_t sub_233032B10(void *a1)
{
  return CodeableConcept.encode(to:)(a1);
}

uint64_t sub_233032B2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (!*(void *)(v1 + 8))
  {
    sub_23309C3F0();
    if (v3) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233032BFC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  sub_23309C3D0();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

Swift::String_optional __swiftcall CodeableConcept.preferredDisplayString()()
{
  sub_233033AB4(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v22 - v2;
  uint64_t v4 = type metadata accessor for Coding();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = (void *)v0[1];
  if (v11)
  {
    uint64_t v12 = *v0;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v13 = v0[2];
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        uint64_t v16 = *(void *)(v5 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_232F65C38(v15, (uint64_t)v8);
          if (*(void *)&v8[*(int *)(v4 + 24) + 8]) {
            break;
          }
          sub_2330024D0((uint64_t)v8);
          v15 += v16;
          if (!--v14) {
            goto LABEL_11;
          }
        }
        sub_232F65DAC((uint64_t)v8, (uint64_t)v3);
        uint64_t v17 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
LABEL_11:
        uint64_t v17 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v17, 1, v4);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        sub_232F65DAC((uint64_t)v3, (uint64_t)v10);
        uint64_t v18 = (uint64_t *)&v10[*(int *)(v4 + 24)];
        uint64_t v12 = *v18;
        uint64_t v11 = (void *)v18[1];
        swift_bridgeObjectRetain();
        sub_2330024D0((uint64_t)v10);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    }
    sub_2330339F0((uint64_t)v3, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
LABEL_16:
  uint64_t v19 = v12;
  uint64_t v20 = v11;
  result.value._object = v20;
  result.value._countAndFlagsBits = v19;
  return result;
}

Swift::Bool __swiftcall CodeableConcept.hasCoding(codings:)(Swift::OpaquePointer codings)
{
  rawValue = (char *)codings._rawValue;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233033AB4(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v55 - v7;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  long long v75 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v71 = (char *)v55 - v13;
  uint64_t v14 = type metadata accessor for Coding();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v61 = (uint64_t)v55 - v19;
  sub_233033AB4(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v2);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v63 = (uint64_t)v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v55 - v23;
  uint64_t v25 = *(void *)(v1 + 16);
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)v55 - v23, 1, 1, v14);
    uint64_t v50 = (uint64_t)v24;
LABEL_28:
    Swift::Bool v53 = 0;
    goto LABEL_29;
  }
  uint64_t v58 = v15;
  uint64_t v56 = (uint64_t)v55 - v23;
  uint64_t v26 = *(void *)(v25 + 16);
  v55[1] = v25;
  if (v26)
  {
    unint64_t v27 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    uint64_t v66 = v25 + v27;
    uint64_t v77 = *(void *)(v58 + 72);
    uint64_t v78 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v28 = rawValue;
    int v57 = &rawValue[v27];
    uint64_t v73 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    uint64_t v30 = v71;
    uint64_t v31 = v61;
    uint64_t v67 = v6;
    uint64_t v68 = v14;
    size_t v59 = v8;
    v55[0] = v26;
    while (1)
    {
      uint64_t v69 = v29;
      sub_232F65C38(v66 + v77 * v29, v31);
      sub_232F41E94(v31, (uint64_t)v8);
      int v32 = *v78;
      if ((*v78)(v8, 1, v9) == 1)
      {
        sub_2330339F0((uint64_t)v8, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        goto LABEL_5;
      }
      uint64_t v72 = *v74;
      v72(v30, v8, v9);
      uint64_t v33 = (uint64_t *)(v31 + *(int *)(v14 + 20));
      uint64_t v65 = v33[1];
      if (!v65)
      {
        (*v73)(v30, v9);
        goto LABEL_5;
      }
      uint64_t v34 = *((void *)v28 + 2);
      if (!v34) {
        goto LABEL_23;
      }
      long long v76 = v32;
      uint64_t v64 = *v33;
      swift_bridgeObjectRetain();
      uint64_t v35 = (uint64_t)v57;
      do
      {
        sub_232F65C38(v35, (uint64_t)v18);
        uint64_t v36 = sub_23309AEE0();
        uint64_t v38 = v37;
        sub_232F41E94((uint64_t)v18, (uint64_t)v6);
        if (v76(v6, 1, v9) == 1)
        {
          sub_2330339F0((uint64_t)v6, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_11:
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        uint64_t v39 = v75;
        v72(v75, v6, v9);
        Swift::String v40 = (uint64_t *)&v18[*(int *)(v14 + 20)];
        uint64_t v41 = v40[1];
        if (!v41)
        {
          (*v73)(v39, v9);
          uint64_t v30 = v71;
          goto LABEL_11;
        }
        uint64_t v70 = *v40;
        uint64_t v81 = sub_23309AEE0();
        uint64_t v82 = v42;
        uint64_t v79 = v36;
        uint64_t v80 = v38;
        sub_232F379FC();
        uint64_t v43 = sub_23309BD60();
        swift_bridgeObjectRelease();
        if (v43)
        {
          BOOL v44 = 0;
        }
        else
        {
          uint64_t v81 = v70;
          uint64_t v82 = v41;
          uint64_t v79 = v64;
          uint64_t v80 = v65;
          BOOL v44 = sub_23309BD60() == 0;
        }
        uint64_t v30 = v71;
        Swift::String v45 = *v73;
        (*v73)(v75, v9);
        swift_bridgeObjectRelease();
        uint64_t v6 = v67;
        uint64_t v14 = v68;
        if (v44)
        {
          swift_bridgeObjectRelease();
          uint64_t v47 = (uint64_t)v18;
          uint64_t v48 = v63;
          sub_232F65DAC(v47, v63);
          uint64_t v49 = *v60;
          (*v60)(v48, 0, 1, v14);
          sub_2330339F0(v48, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
          v45(v30, v9);
          uint64_t v50 = v56;
          sub_232F65DAC(v61, v56);
          v49(v50, 0, 1, v14);
          uint64_t v51 = v58;
          goto LABEL_27;
        }
LABEL_12:
        sub_2330024D0((uint64_t)v18);
        v35 += v77;
        --v34;
      }
      while (v34);
      uint64_t v28 = rawValue;
      swift_bridgeObjectRelease();
      uint64_t v31 = v61;
      uint64_t v26 = v55[0];
LABEL_23:
      uint64_t v46 = v63;
      (*v60)(v63, 1, 1, v14);
      sub_2330339F0(v46, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      (*v73)(v30, v9);
      uint64_t v8 = v59;
LABEL_5:
      uint64_t v29 = v69 + 1;
      sub_2330024D0(v31);
      if (v29 == v26) {
        goto LABEL_26;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_26:
  uint64_t v51 = v58;
  uint64_t v50 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v56, 1, 1, v14);
LABEL_27:
  swift_bridgeObjectRelease();
  int v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  Swift::Bool v53 = 1;
  if (v52(v50, 1, v14) == 1) {
    goto LABEL_28;
  }
LABEL_29:
  sub_2330339F0(v50, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  return v53;
}

unint64_t CodeableConcept.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(void *)(v0 + 8))
  {
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v4 = 0xD000000000000017;
    sub_23309B880();
    sub_23309B880();
    if (v1) {
      goto LABEL_5;
    }
  }
  else
  {
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v4 = 0xD000000000000019;
    if (v1)
    {
LABEL_5:
      uint64_t v2 = swift_bridgeObjectRetain();
      sub_233031D3C(v2);
      swift_bridgeObjectRelease();
      sub_232F51B70();
      sub_233033C3C((unint64_t *)&qword_268757740, (void (*)(uint64_t))sub_232F51B70);
      sub_23309B6C0();
      swift_bridgeObjectRelease();
    }
  }
  sub_23309B880();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t _s23HealthRecordsExtraction15CodeableConceptV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  if (!v3)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v7 = *a1 == *a2 && v3 == v5;
  if (v7 || (char v8 = sub_23309C220(), result = 0, (v8 & 1) != 0))
  {
LABEL_10:
    if (v4)
    {
      if (v6)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = swift_bridgeObjectRetain();
        char v11 = sub_232E94C94(v10, v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v11) {
          return 1;
        }
      }
    }
    else if (!v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_2330339F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_233033AB4(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_233033A60()
{
  unint64_t result = qword_268758690;
  if (!qword_268758690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758690);
  }
  return result;
}

void sub_233033AB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_233033B18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233033A60();
    unint64_t v7 = a3(a1, &type metadata for CodeableConcept.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_233033B7C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_233033AB4(255, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
    sub_233033C3C(a2, (void (*)(uint64_t))type metadata accessor for Coding);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233033C3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233033C84(void *a1)
{
  a1[1] = sub_232EA391C();
  a1[2] = sub_232EBD064();
  unint64_t result = sub_233033CBC();
  a1[3] = result;
  return result;
}

unint64_t sub_233033CBC()
{
  unint64_t result = qword_2687586A0;
  if (!qword_2687586A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586A0);
  }
  return result;
}

unint64_t sub_233033D14()
{
  unint64_t result = qword_2687586A8;
  if (!qword_2687586A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586A8);
  }
  return result;
}

uint64_t destroy for CodeableConcept()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s23HealthRecordsExtraction15CodeableConceptVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CodeableConcept(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodeableConcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeableConcept(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodeableConcept(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeableConcept()
{
  return &type metadata for CodeableConcept;
}

unsigned char *storeEnumTagSinglePayload for CodeableConcept.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233034024);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeableConcept.CodingKeys()
{
  return &type metadata for CodeableConcept.CodingKeys;
}

unint64_t sub_233034060()
{
  unint64_t result = qword_2687586B0;
  if (!qword_2687586B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586B0);
  }
  return result;
}

unint64_t sub_2330340B8()
{
  unint64_t result = qword_2687586B8;
  if (!qword_2687586B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586B8);
  }
  return result;
}

unint64_t sub_233034110()
{
  unint64_t result = qword_2687586C0;
  if (!qword_2687586C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586C0);
  }
  return result;
}

uint64_t sub_233034164(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69646F63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

id sub_233034240(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_232F69858();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23303466C();
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x263F09500]);
  if (result)
  {
    id v52 = result;
    if (a4)
    {
      uint64_t v48 = sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v20 = *(void *)(a8 + 8);
    uint64_t v21 = *(void *)(a8 + 16);
    uint64_t v55 = a6;
    uint64_t v56 = a5;
    uint64_t v54 = a7;
    if (v20 == 0xD000000000000010 && v21 == 0x80000002330B5A90) {
      char v22 = 1;
    }
    else {
      char v22 = sub_23309C220();
    }
    uint64_t v53 = a8;
    uint64_t v23 = (void *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v24 = type metadata accessor for ExtractionContext();
    uint64_t v51 = (char *)v23 + *(int *)(v24 + 28);
    uint64_t v25 = sub_23309B130();
    uint64_t v57 = a2;
    uint64_t v58 = a1;
    uint64_t v49 = *a1;
    uint64_t v50 = (void *)v25;
    sub_232F698B0(a2, (uint64_t)v18);
    uint64_t v26 = sub_23309B230();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v26) != 1)
    {
      uint64_t v28 = (void *)sub_23309B210();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v26);
    }
    uint64_t v29 = a9;
    uint64_t v30 = *v23;
    id v31 = objc_msgSend(self, sel_localDevice);
    if (*(uint64_t *)((char *)v23 + *(int *)(v24 + 40)))
    {
      uint64_t v32 = swift_bridgeObjectRetain();
      sub_233020734(v32);
      swift_bridgeObjectRelease();
      uint64_t v29 = a9;
      uint64_t v33 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v35 = ((unint64_t)v23[1] >> 2) & 1;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v37 = sub_233042B90();
    uint64_t v46 = v29;
    uint64_t v38 = v22 & 1;
    uint64_t v45 = v35;
    uint64_t v39 = v52;
    Swift::String v40 = (void *)v48;
    uint64_t v41 = v50;
    id v42 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_diagnosticTestReportWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_diagnosticTestCodingCollection_results_effectiveStartDate_statusCoding_effectiveEndDate_issueDate_, v52, v48, v38, v50, v49, v28, v30, v31, v33, v34, v45, v56, 0, v55, v37, v54,
              v46));

    id v43 = v42;
    BOOL v44 = (void *)sub_23309B130();
    objc_msgSend(v43, sel_setCreationDate_, v44);

    sub_232F69914(v57, (uint64_t (*)(void))sub_232F69858);
    sub_232F69914((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    return v43;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_23303466C()
{
  unint64_t result = qword_2687576B0;
  if (!qword_2687576B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687576B0);
  }
  return result;
}

uint64_t sub_2330346B0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  uint64_t v4 = a1;
  uint64_t v5 = 0x696669746E656469;
  unint64_t v6 = 0xEA00000000007265;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6C61636973796870;
      unint64_t v6 = 0xEC00000065707954;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x7361696C61;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1701667182;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      if (v5 == 0x6C61636973796870) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x7361696C61;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1701667182) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_23309C220();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_233034840(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 17221;
    }
    else {
      uint64_t v3 = 5262159;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 17221;
      }
      else {
        uint64_t v6 = 5262159;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 4281170;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE300000000000000;
  if (v3 != 4281170)
  {
LABEL_21:
    char v8 = sub_23309C220();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_233034924(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE900000000000031;
  uint64_t v3 = 0x6B36353270636573;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x3635322D50;
    }
    else {
      uint64_t v5 = 0x39313535326445;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE500000000000000;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6B36353270636573;
  unint64_t v6 = 0xE900000000000031;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x3635322D50;
    }
    else {
      uint64_t v3 = 0x39313535326445;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE500000000000000;
    }
    else {
      unint64_t v2 = 0xE700000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_233034A38(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x4B3635325345;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x4B3635325345;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x3635325345;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x4153446445;
      break;
    case 3:
      uint64_t v5 = 0x3635325350;
      unint64_t v3 = 0xE500000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x3635325345) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x4153446445;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x3635325350) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_23309C220();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_233034BB0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7372655672696866;
    }
    else {
      uint64_t v3 = 0x646E754272696866;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEB000000006E6F69;
    }
    else {
      unint64_t v4 = 0xEA0000000000656CLL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7372655672696866;
      }
      else {
        uint64_t v6 = 0x646E754272696866;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEB000000006E6F69;
      }
      else {
        unint64_t v7 = 0xEA0000000000656CLL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE200000000000000;
    uint64_t v3 = 25705;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE200000000000000;
  if (v3 != 25705)
  {
LABEL_21:
    char v8 = sub_23309C220();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_233034CCC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x53452D48444345;
  }
  else {
    uint64_t v3 = 0x5045414F2D415352;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x53452D48444345;
  }
  else {
    uint64_t v5 = 0x5045414F2D415352;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_233034D74(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000011;
  }
  else {
    unint64_t v3 = 0xD000000000000010;
  }
  if (v2) {
    unint64_t v4 = 0x80000002330ADB70;
  }
  else {
    unint64_t v4 = 0x80000002330ADB90;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000011;
  }
  else {
    unint64_t v5 = 0xD000000000000010;
  }
  if (a2) {
    unint64_t v6 = 0x80000002330ADB90;
  }
  else {
    unint64_t v6 = 0x80000002330ADB70;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_233034E20(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000015;
  unint64_t v4 = 0x80000002330B4D40;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0x65545F4343445545;
      unint64_t v4 = 0xEE00666E614D7473;
      break;
    case 2:
      unint64_t v4 = 0x80000002330B4D70;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v3 = 0x65545F4343445545;
      unint64_t v4 = 0xEE00657079547473;
      break;
    case 4:
      unint64_t v3 = 0xD000000000000014;
      unint64_t v5 = "EUDCC_VaccineMahManf";
      goto LABEL_8;
    case 5:
      unint64_t v3 = 0xD00000000000001DLL;
      unint64_t v5 = "EUDCC_VaccineMedicinalProduct";
      goto LABEL_8;
    case 6:
      unint64_t v3 = 0xD000000000000018;
      unint64_t v5 = "EUDCC_VaccineProphylaxis";
LABEL_8:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000015;
  unint64_t v7 = 0x80000002330B4D40;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x65545F4343445545;
      unint64_t v7 = 0xEE00666E614D7473;
      break;
    case 2:
      unint64_t v7 = 0x80000002330B4D70;
      unint64_t v6 = 0xD000000000000010;
      break;
    case 3:
      unint64_t v6 = 0x65545F4343445545;
      unint64_t v7 = 0xEE00657079547473;
      break;
    case 4:
      unint64_t v6 = 0xD000000000000014;
      char v8 = "EUDCC_VaccineMahManf";
      goto LABEL_16;
    case 5:
      unint64_t v6 = 0xD00000000000001DLL;
      char v8 = "EUDCC_VaccineMedicinalProduct";
      goto LABEL_16;
    case 6:
      unint64_t v6 = 0xD000000000000018;
      char v8 = "EUDCC_VaccineProphylaxis";
LABEL_16:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_233035064(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x656372756F736572;
  }
  else {
    uint64_t v3 = 0x6C72556C6C7566;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x656372756F736572;
  }
  else {
    uint64_t v5 = 0x6C72556C6C7566;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t VCJWK.asRawECPublicKey()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (*v0 && v1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = sub_23309C220();
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
    {
      char v4 = 1;
      sub_232F4F650();
      swift_allocError();
      *(void *)uint64_t v5 = (v1 << 8) | 1;
      goto LABEL_11;
    }
  }
  switch((int)v2)
  {
    case 1:
      swift_bridgeObjectRelease();
      return sub_233035780();
    case 3:
      goto LABEL_10;
    default:
      char v6 = sub_23309C220();
      swift_bridgeObjectRelease();
      if (v6) {
        return sub_233035780();
      }
LABEL_10:
      sub_232F4F650();
      swift_allocError();
      *(void *)uint64_t v5 = v2;
      char v4 = 3;
      break;
  }
LABEL_11:
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = v4;
  return swift_willThrow();
}

SecKeyRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VCJWK.asRSASecKey()()
{
  if (!*((void *)v0 + 7))
  {
    sub_232F4F650();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_2330A7C20;
    *(unsigned char *)(v7 + 16) = 5;
    goto LABEL_12;
  }
  uint64_t v1 = *((void *)v0 + 5);
  sub_232F379FC();
  sub_23309BD50();
  uint64_t v2 = sub_23309BD50();
  uint64_t v0 = v3;
  swift_bridgeObjectRelease();
  uint64_t v24 = v2;
  uint64_t v25 = v0;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 & 3;
  if (v4 <= 0) {
    uint64_t v5 = -(-v4 & 3);
  }
  if (v5 == 3 || v5 == 2)
  {
    sub_23309B880();
LABEL_10:
    uint64_t v0 = v25;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_23309AFC0();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    if (v10 >> 60 == 15)
    {
      sub_232F3F0B4();
      swift_allocError();
      *char v11 = v24;
      v11[1] = v0;
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v8;
    unint64_t v27 = v10;
    if (!v1)
    {
      sub_232F4F650();
      swift_allocError();
      *(_OWORD *)uint64_t v17 = xmmword_2330A7C10;
      *(unsigned char *)(v17 + 16) = 5;
      swift_willThrow();
      sub_232E9AA4C(v26, v27);
      return v0;
    }
    sub_23309BD50();
    uint64_t v13 = sub_23309BD50();
    uint64_t v0 = v14;
    swift_bridgeObjectRelease();
    uint64_t v23 = v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v16 = v15 & 3;
    if (v15 <= 0) {
      uint64_t v16 = -(-v15 & 3);
    }
    if (v16)
    {
      if (v16 != 2 && v16 != 3)
      {
        swift_bridgeObjectRelease();
        sub_232F3F0B4();
        swift_allocError();
        *char v22 = 0;
        v22[1] = 0;
        goto LABEL_27;
      }
      sub_23309B880();
    }
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_23309AFC0();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = v18;
      uint64_t v25 = (__SecKey *)v20;
      uint64_t v0 = (__SecKey *)sub_233035DAC(&v26, &v24);
      sub_232E9AA4C(v26, v27);
      sub_232E9AA4C(v24, (unint64_t)v25);
      return v0;
    }
    sub_232F3F0B4();
    swift_allocError();
    *uint64_t v21 = v23;
    v21[1] = (uint64_t)v0;
LABEL_27:
    swift_willThrow();
    sub_232F3F15C(v8, v10);
    return v0;
  }
  if (!v5) {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  sub_232F3F0B4();
  swift_allocError();
  *char v6 = 0;
  v6[1] = 0;
LABEL_12:
  swift_willThrow();
  return v0;
}

uint64_t sub_233035780()
{
  if (!*(void *)(v0 + 72))
  {
    sub_232F4F650();
    swift_allocError();
    long long v8 = xmmword_2330A7C40;
LABEL_11:
    *(_OWORD *)uint64_t v7 = v8;
    *(unsigned char *)(v7 + 16) = 5;
    return swift_willThrow();
  }
  if (!*(void *)(v0 + 88))
  {
    sub_232F4F650();
    swift_allocError();
    long long v8 = xmmword_2330A7C30;
    goto LABEL_11;
  }
  sub_232F379FC();
  sub_23309BD50();
  uint64_t v1 = sub_23309BD50();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v24 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 & 3;
  if (v4 <= 0) {
    uint64_t v5 = -(-v4 & 3);
  }
  if (v5 == 3 || v5 == 2)
  {
    sub_23309B880();
  }
  else if (v5)
  {
    swift_bridgeObjectRelease();
    sub_232F3F0B4();
    swift_allocError();
    *char v6 = 0;
    v6[1] = 0;
    return swift_willThrow();
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_23309AFC0();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  if (v11 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    uint64_t *v12 = v24;
    v12[1] = v3;
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
  sub_23309BD50();
  uint64_t v14 = sub_23309BD50();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v25 = v14;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v18 = v17 & 3;
  if (v17 <= 0) {
    uint64_t v18 = -(-v17 & 3);
  }
  if (v18)
  {
    if (v18 != 2 && v18 != 3)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      swift_allocError();
      *uint64_t v23 = 0;
      v23[1] = 0;
      goto LABEL_26;
    }
    sub_23309B880();
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23309AFC0();
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (v21 >> 60 != 15)
  {
    swift_bridgeObjectRelease();
    sub_232FDDBBC(v9, v11);
    sub_232FDDBBC(v19, v21);
    sub_233036518(v19, v21);
    sub_232F3F15C(v19, v21);
    sub_232F3F15C(v19, v21);
    sub_232F3F15C(v9, v11);
    return v9;
  }
  sub_232F3F0B4();
  swift_allocError();
  *char v22 = v25;
  v22[1] = v16;
LABEL_26:
  swift_willThrow();
  return sub_232F3F15C(v9, v11);
}

uint64_t sub_233035C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  if (a3 && a1)
  {
    v11[0] = a3;
    v11[1] = a4;
    v11[2] = a1;
    v11[3] = a2 - a1;
    uint64_t result = sub_233035CE8((uint64_t)v11, &v9, &v10);
    if (!v5) {
      *a5 = v10;
    }
  }
  else
  {
    sub_232F4F650();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = xmmword_2330A7C50;
    *(unsigned char *)(v8 + 16) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_233035CE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  if (a1)
  {
    uint64_t result = SecKeyCreateRSAPublicKey();
    if (result)
    {
      *a3 = result;
      return result;
    }
    sub_232F4F650();
    uint64_t v7 = swift_allocError();
    uint64_t v8 = 8;
  }
  else
  {
    sub_232F4F650();
    uint64_t v7 = swift_allocError();
    uint64_t v8 = 3;
  }
  *(void *)uint64_t v6 = v8;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 16) = 5;
  uint64_t result = swift_willThrow();
  *a2 = v7;
  return result;
}

uint64_t sub_233035DAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_2330A6940;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_12;
      }
      if (v9 < (int)v3) {
        goto LABEL_15;
      }
      if (sub_23309ACB0() && __OFSUB__((int)v3, sub_23309ACD0())) {
        goto LABEL_16;
      }
      sub_23309ACE0();
      swift_allocObject();
      uint64_t v11 = sub_23309AC90();
      swift_release();
      uint64_t v8 = v11;
LABEL_12:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      uint64_t result = sub_233036340((int)v3, v3 >> 32, v8, a2);
      *a1 = v3;
      a1[1] = v8 | 0x4000000000000000;
      return result;
    case 2uLL:
      *(void *)&long long v12 = *a1;
      *((void *)&v12 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_23309AF90();
      uint64_t v10 = *((void *)&v12 + 1);
      uint64_t result = sub_233036340(*(void *)(v12 + 16), *(void *)(v12 + 24), *((uint64_t *)&v12 + 1), a2);
      *a1 = v12;
      a1[1] = v10 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v12 + 7) = 0;
      *(void *)&long long v12 = 0;
      return sub_233036050(a2, (uint64_t)&v12, 0);
    default:
      *(void *)&long long v12 = *a1;
      WORD4(v12) = v2;
      BYTE10(v12) = BYTE2(v2);
      BYTE11(v12) = BYTE3(v2);
      BYTE12(v12) = BYTE4(v2);
      BYTE13(v12) = BYTE5(v2);
      BYTE14(v12) = BYTE6(v2);
      uint64_t result = sub_233036050(a2, (uint64_t)&v12, BYTE6(v2));
      unint64_t v7 = DWORD2(v12) | ((unint64_t)BYTE12(v12) << 32) | ((unint64_t)BYTE13(v12) << 40) | ((unint64_t)BYTE14(v12) << 48);
      *a1 = v12;
      a1[1] = v7;
      return result;
  }
}

uint64_t sub_233036050(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v11 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_2330A6940;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = v5 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_14;
      }
      if (v13 < (int)v5) {
        goto LABEL_18;
      }
      if (sub_23309ACB0() && __OFSUB__((int)v5, sub_23309ACD0())) {
        goto LABEL_19;
      }
      sub_23309ACE0();
      swift_allocObject();
      uint64_t v15 = sub_23309AC90();
      swift_release();
      uint64_t v11 = v15;
      uint64_t v13 = v5 >> 32;
LABEL_14:
      if (v13 < (int)v5)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }
      uint64_t result = sub_2330363D0((int)v5, v13, v11, a2, a3);
      *a1 = v5;
      a1[1] = v11 | 0x4000000000000000;
      return result;
    case 2uLL:
      *(void *)&long long v17 = *a1;
      *((void *)&v17 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_23309AF90();
      uint64_t v14 = *((void *)&v17 + 1);
      uint64_t result = sub_2330363D0(*(void *)(v17 + 16), *(void *)(v17 + 24), *((uint64_t *)&v17 + 1), a2, a3);
      *a1 = v17;
      a1[1] = v14 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v17 + 7) = 0;
      *(void *)&long long v17 = 0;
      uint64_t result = sub_233035C0C((uint64_t)&v17, (uint64_t)&v17, a2, a3, &v16);
      if (!v3) {
        return v16;
      }
      return result;
    default:
      *(void *)&long long v17 = *a1;
      WORD4(v17) = v4;
      BYTE10(v17) = BYTE2(v4);
      BYTE11(v17) = BYTE3(v4);
      BYTE12(v17) = BYTE4(v4);
      BYTE13(v17) = BYTE5(v4);
      BYTE14(v17) = BYTE6(v4);
      uint64_t result = sub_233035C0C((uint64_t)&v17, (uint64_t)&v17 + BYTE6(v4), a2, a3, &v16);
      if (!v3) {
        uint64_t result = v16;
      }
      unint64_t v10 = DWORD2(v17) | ((unint64_t)BYTE12(v17) << 32) | ((unint64_t)BYTE13(v17) << 40) | ((unint64_t)BYTE14(v17) << 48);
      *a1 = v17;
      a1[1] = v10;
      return result;
  }
}

uint64_t sub_233036340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = sub_23309ACB0();
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v8 = result;
  uint64_t result = sub_23309ACD0();
  uint64_t v9 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_23309ACC0();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  return sub_233036050(a4, v8 + v9, v13);
}

uint64_t sub_2330363D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_23309ACB0();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v11 = result;
  uint64_t result = sub_23309ACD0();
  uint64_t v12 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v13 = __OFSUB__(a2, a1);
  uint64_t v14 = a2 - a1;
  if (v13)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v15 = sub_23309ACC0();
  if (v15 >= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t result = sub_233035C0C(v11 + v12, v11 + v12 + v16, a4, a5, &v17);
  if (!v5) {
    return v17;
  }
  return result;
}

uint64_t sub_233036484(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_23309ACB0();
  if (!result || (uint64_t result = sub_23309ACD0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23309ACC0();
      return sub_23309AFF0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_233036518(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x263EF8340];
  v10[3] = MEMORY[0x263F06F78];
  void v10[4] = MEMORY[0x263F06F68];
  v10[0] = a1;
  v10[1] = a2;
  unint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x263F06F78]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_232E9A9F4(a1, a2);
      sub_232E9A9F4(v5, v6);
      sub_233036484((int)v5, v5 >> 32);
      sub_232E9AA4C(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_232E9A9F4(a1, a2);
      swift_retain();
      swift_retain();
      sub_233036484(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_232E9A9F4(a1, a2);
      sub_23309AFF0();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

id sub_23303673C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_232F69858();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3A800(0, &qword_268757D38);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestResultTypeForIdentifier_, *MEMORY[0x263F09518]);
  if (result)
  {
    id v78 = result;
    if (a4)
    {
      uint64_t v65 = sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v65 = 0;
    }
    uint64_t v31 = *(void *)(a12 + 8);
    uint64_t v32 = *(void *)(a12 + 16);
    uint64_t v80 = a6;
    id v81 = a5;
    uint64_t v79 = a8;
    if (v31 == 0xD000000000000010 && v32 == 0x80000002330B5A90) {
      int v76 = 1;
    }
    else {
      int v76 = sub_23309C220();
    }
    uint64_t v33 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v34 = type metadata accessor for ExtractionContext();
    uint64_t v77 = (char *)v33 + *(int *)(v34 + 28);
    uint64_t v35 = sub_23309B130();
    uint64_t v74 = *a1;
    long long v75 = (void *)v35;
    sub_232F698B0(a2, (uint64_t)v29);
    uint64_t v36 = sub_23309B230();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v29, 1, v36) != 1)
    {
      uint64_t v38 = sub_23309B210();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v36);
    }
    uint64_t v73 = (void *)v38;
    uint64_t v71 = *v33;
    id v72 = objc_msgSend(self, sel_localDevice);
    if (*(uint64_t *)((char *)v33 + *(int *)(v34 + 40)))
    {
      uint64_t v39 = swift_bridgeObjectRetain();
      sub_233020734(v39);
      swift_bridgeObjectRelease();
      uint64_t v64 = sub_23309B640();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v64 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v41 = v33[1];
    uint64_t v70 = (void *)v40;
    if (a7)
    {
      sub_232F3A800(0, &qword_2687586D0);
      uint64_t v63 = sub_23309B990();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v63 = 0;
    }
    sub_23309B710();
    id v85 = (id)sub_23309B6E0();
    swift_bridgeObjectRelease();
    sub_232F3A800(0, &qword_2687586C8);
    uint64_t v42 = sub_23309B990();
    swift_bridgeObjectRelease();
    id v69 = sub_233042B90();
    if (a14)
    {
      id v43 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v43 = 0;
    }
    uint64_t v82 = a2;
    int v83 = a1;
    uint64_t v68 = (void *)v42;
    if (a16)
    {
      BOOL v44 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      BOOL v44 = 0;
    }
    if (a19)
    {
      uint64_t v45 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = 0;
    }
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v67 = v45;
    uint64_t v62 = v45;
    id v66 = v44;
    uint64_t v60 = v43;
    uint64_t v61 = v44;
    id v84 = v43;
    uint64_t v47 = v69;
    uint64_t v48 = v68;
    uint64_t v49 = (void *)v63;
    uint64_t v59 = (v41 >> 2) & 1;
    uint64_t v50 = v70;
    uint64_t v51 = (void *)v64;
    id v52 = v72;
    uint64_t v53 = v78;
    uint64_t v54 = (void *)v65;
    uint64_t v55 = v75;
    uint64_t v56 = v73;
    id v81 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_diagnosticTestResultWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_diagnosticTestCodingCollection_value_referenceRanges_effectiveStartDate_category_categoriesCodingCollections_issueDate_effectiveEndDate_statusCoding_interpretationCodingCollections_comments_bodySiteCodingCollection_methodCodingCollection_performers_referenceRangeStatus_, v78, v65, v76 & 1, v75, v74, v73, v71, v72, v64, v70, v59, v81, v80, v63, v79, v85,
              v68,
              a13,
              a9,
              v69,
              v60,
              v61,
              a17,
              a18,
              v62,
              a20));

    id v57 = v81;
    uint64_t v58 = (void *)sub_23309B130();
    objc_msgSend(v57, sel_setCreationDate_, v58);

    sub_232F69914(v82, (uint64_t (*)(void))sub_232F69858);
    sub_232F69914((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    return v57;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233036D0C()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233036E2C()
{
  return sub_23309C420();
}

uint64_t sub_233036F64()
{
  return sub_23309C420();
}

uint64_t sub_233036FE8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_23309BF80();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_23309BF80();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x237DB5EB0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_23303B724(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_23309BF80();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_23309B9C0();
}

uint64_t sub_2330371B4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_23309BF80();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_23309BF80();
    swift_bridgeObjectRelease();
    uint64_t v5 = v20 + v3;
    if (!__OFADD__(v20, v3)) {
      goto LABEL_5;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_26;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_23309BF80();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5) {
    uint64_t v10 = v5;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = MEMORY[0x237DB5EB0](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v11;
  uint64_t v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = (*(void *)(v9 + 24) >> 1) - v12;
  uint64_t result = sub_23303B950(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    sub_23303D018();
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  if (v15 >= 1)
  {
    uint64_t v17 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, v15);
    uint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  swift_bridgeObjectRelease();
  if (v16 == v13) {
    goto LABEL_28;
  }
LABEL_20:
  return sub_23309B9C0();
}

uint64_t sub_23303739C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2330373FC()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_233037448(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_23303749C())()
{
  return j__swift_endAccess;
}

void *RTFDocument.__allocating_init(rtfString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  v4[5] = 0;
  v4[6] = 0;
  v4[3] = a2;
  v4[4] = 0;
  v4[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_23303C364(a1, a2);
  swift_bridgeObjectRelease();
  v4[4] = v5;
  sub_2330375D8();
  return v4;
}

void *RTFDocument.init(rtfString:)(uint64_t a1, unint64_t a2)
{
  v2[4] = 0;
  v2[5] = 0;
  v2[6] = 0;
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_23303C364(a1, a2);
  swift_bridgeObjectRelease();
  v2[4] = v5;
  swift_release();
  sub_2330375D8();
  return v2;
}

uint64_t sub_2330375D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309AC20();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v0 + 32)) {
    return result;
  }
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  unint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v26 = MEMORY[0x263F8EE78];
  swift_retain();
  if ((v7 & 0xC000000000000000) != 0) {
    goto LABEL_41;
  }
LABEL_3:
  uint64_t v8 = swift_retain();
  MEMORY[0x237DB59C0](v8);
  if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_23309B9D0();
  }
  sub_23309B9E0();
  sub_23309B9C0();
  unint64_t v7 = v26;
LABEL_6:
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_44;
    }
    while (1)
    {
LABEL_8:
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_23309BF80();
        swift_bridgeObjectRelease();
        uint64_t v10 = v9 - 1;
        if (__OFSUB__(v9, 1)) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v10 = v9 - 1;
        if (__OFSUB__(v9, 1)) {
          goto LABEL_40;
        }
      }
      if ((v10 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_11:
      unint64_t v7 = v26;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_23309BF80();
        swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_44;
        }
      }
      else if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_44;
      }
    }
    while (1)
    {
      unint64_t v7 = v26;
      unint64_t v12 = v26 >> 62;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_23309BF80();
        swift_bridgeObjectRelease();
        if (!v16)
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          if (!sub_23309BF80()) {
            goto LABEL_3;
          }
          goto LABEL_6;
        }
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_23309BF80();
        swift_bridgeObjectRelease();
        if (!v17) {
          goto LABEL_37;
        }
      }
      else if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_36;
      }
      if ((v7 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x237DB5EA0](0, v7);
        if (!v12) {
          goto LABEL_20;
        }
      }
      else
      {
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v13 = *(void *)(v7 + 32);
        swift_retain();
        if (!v12)
        {
LABEL_20:
          if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_39;
          }
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_23309BF80();
      swift_bridgeObjectRelease();
      if (!v18) {
        goto LABEL_39;
      }
LABEL_21:
      sub_23303CBBC(0, 1);
      swift_beginAccess();
      unint64_t v14 = *(void *)(v13 + 56);
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = *(void *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
      }
      if (v15)
      {
        swift_bridgeObjectRetain();
        sub_23309B880();
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      unint64_t v11 = swift_bridgeObjectRetain();
      sub_233036FE8(v11);
      swift_release();
      if (--v9 <= 0) {
        goto LABEL_11;
      }
    }
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_44:
  swift_bridgeObjectRelease();
  v25[0] = v27;
  v25[1] = v28;
  sub_23309ABE0();
  sub_232F379FC();
  uint64_t v21 = sub_23309BD40();
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v24)
  {
    swift_beginAccess();
    *(void *)(v1 + 40) = v21;
    *(void *)(v1 + 48) = v23;
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t RTFDocument.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RTFDocument.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_233037AA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309AC20();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  uint64_t v77 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v79 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = v5;
  MEMORY[0x270FA5388](v4);
  id v78 = (char *)v69 - v6;
  uint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v7 = sub_23309B910();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = v1[2];
    unint64_t v10 = v1[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      uint64_t v81 = 4 * v11;
      v69[1] = v1 + 6;
      uint64_t v80 = v1 + 5;
      uint64_t v73 = v77 + 32;
      uint64_t v74 = v77 + 16;
      uint64_t v72 = v77 + 8;
      swift_bridgeObjectRetain();
      char v12 = 0;
      uint64_t v13 = 0;
      uint64_t v70 = v1;
      v69[2] = v10;
      uint64_t v71 = v9;
      while (1)
      {
        while (1)
        {
          swift_bridgeObjectRetain();
          unint64_t v14 = sub_23309B820();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v15 = sub_23309B920();
          unint64_t v17 = v16;
          swift_bridgeObjectRelease();
          BOOL v18 = v15 == 92 && v17 == 0xE100000000000000;
          if (!v18 && (sub_23309C220() & 1) == 0) {
            break;
          }
          swift_bridgeObjectRelease();
          uint64_t v20 = v82;
          unint64_t v19 = v83;
          uint64_t v21 = HIBYTE(v83) & 0xF;
          if ((v83 & 0x2000000000000000) == 0) {
            uint64_t v21 = v82 & 0xFFFFFFFFFFFFLL;
          }
          if (v21)
          {
            unint64_t v22 = (void **)v80;
            swift_beginAccess();
            unint64_t v23 = *v22;
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *unint64_t v22 = v23;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v23 = sub_232F3CCE0(0, v23[2] + 1, 1, v23);
              *uint64_t v80 = v23;
            }
            unint64_t v26 = v23[2];
            unint64_t v25 = v23[3];
            if (v26 >= v25 >> 1)
            {
              unint64_t v23 = sub_232F3CCE0((void *)(v25 > 1), v26 + 1, 1, v23);
              *uint64_t v80 = v23;
            }
            v23[2] = v26 + 1;
            uint64_t v27 = &v23[2 * v26];
            v27[4] = v20;
            v27[5] = v19;
            swift_endAccess();
          }
          swift_bridgeObjectRelease();
          uint64_t v82 = 0;
          unint64_t v83 = 0xE000000000000000;
          char v12 = 1;
LABEL_20:
          if (v81 == v14 >> 14) {
            goto LABEL_43;
          }
        }
        if ((v12 & 1) == 0) {
          break;
        }
        uint64_t v28 = v82 & 0xFFFFFFFFFFFFLL;
        if ((v83 & 0x2000000000000000) != 0) {
          uint64_t v28 = HIBYTE(v83) & 0xF;
        }
        if (v28) {
          goto LABEL_33;
        }
        v69[0] = v13;
        if (qword_268756410 != -1) {
          swift_once();
        }
        uint64_t v29 = v76;
        uint64_t v30 = __swift_project_value_buffer(v76, (uint64_t)qword_268770F80);
        uint64_t v32 = v77;
        uint64_t v31 = v78;
        uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
        v33(v78, v30, v29);
        v33(v79, (uint64_t)v31, v29);
        unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
        uint64_t v35 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v35 + v34, v79, v29);
        swift_bridgeObjectRetain();
        uint64_t v13 = v69[0];
        LOBYTE(v34) = sub_23303C128(v15, v17, (unsigned int (*)(uint64_t))sub_23303CA58);
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v78, v29);
        if ((v34 & 1) == 0)
        {
LABEL_33:
          id v43 = v78;
          sub_23309ABE0();
          uint64_t v45 = v76;
          uint64_t v44 = v77;
          uint64_t v46 = v79;
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v79, v43, v76);
          unint64_t v47 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
          uint64_t v48 = swift_allocObject();
          (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v48 + v47, v46, v45);
          swift_bridgeObjectRetain();
          LOBYTE(v46) = sub_23303C128(v15, v17, (unsigned int (*)(uint64_t))sub_23303CA58);
          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v45);
          if (v46)
          {
            swift_bridgeObjectRelease();
            uint64_t v50 = v82;
            unint64_t v49 = v83;
            uint64_t v51 = (void **)v80;
            swift_beginAccess();
            id v52 = *v51;
            swift_bridgeObjectRetain();
            char v53 = swift_isUniquelyReferenced_nonNull_native();
            *uint64_t v51 = v52;
            uint64_t v1 = v70;
            if ((v53 & 1) == 0)
            {
              id v52 = sub_232F3CCE0(0, v52[2] + 1, 1, v52);
              *uint64_t v80 = v52;
            }
            unint64_t v55 = v52[2];
            unint64_t v54 = v52[3];
            if (v55 >= v54 >> 1)
            {
              id v52 = sub_232F3CCE0((void *)(v54 > 1), v55 + 1, 1, v52);
              *uint64_t v80 = v52;
            }
            v52[2] = v55 + 1;
            uint64_t v56 = &v52[2 * v55];
            v56[4] = v50;
            v56[5] = v49;
            swift_endAccess();
            swift_bridgeObjectRelease();
            char v12 = 0;
            uint64_t v82 = 0;
            unint64_t v83 = 0xE000000000000000;
            goto LABEL_20;
          }
          MEMORY[0x237DB58B0](v15, v17);
          swift_bridgeObjectRelease();
          char v12 = 1;
          goto LABEL_40;
        }
        swift_beginAccess();
        MEMORY[0x237DB58B0](v15, v17);
        swift_endAccess();
        swift_bridgeObjectRelease();
        char v12 = 0;
        BOOL v36 = v81 == v14 >> 14;
LABEL_41:
        if (v36)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
      uint64_t v37 = v78;
      sub_23309AC10();
      uint64_t v39 = v76;
      uint64_t v38 = v77;
      uint64_t v40 = v79;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v79, v37, v76);
      unint64_t v41 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
      uint64_t v42 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v42 + v41, v40, v39);
      swift_bridgeObjectRetain();
      LOBYTE(v40) = sub_23303C128(v15, v17, (unsigned int (*)(uint64_t))sub_23303CA58);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
      if ((v40 & 1) == 0)
      {
        swift_beginAccess();
        MEMORY[0x237DB58B0](v15, v17);
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
      char v12 = 0;
LABEL_40:
      BOOL v36 = v81 == v14 >> 14;
      uint64_t v1 = v70;
      goto LABEL_41;
    }
LABEL_44:
    uint64_t v58 = v82;
    unint64_t v57 = v83;
    uint64_t v59 = HIBYTE(v83) & 0xF;
    if ((v83 & 0x2000000000000000) == 0) {
      uint64_t v59 = v82 & 0xFFFFFFFFFFFFLL;
    }
    if (v59)
    {
      uint64_t v60 = v1 + 5;
      swift_beginAccess();
      uint64_t v61 = (void *)v1[5];
      swift_bridgeObjectRetain();
      char v62 = swift_isUniquelyReferenced_nonNull_native();
      v1[5] = v61;
      if ((v62 & 1) == 0)
      {
        uint64_t v61 = sub_232F3CCE0(0, v61[2] + 1, 1, v61);
        *uint64_t v60 = v61;
      }
      unint64_t v64 = v61[2];
      unint64_t v63 = v61[3];
      if (v64 >= v63 >> 1)
      {
        uint64_t v61 = sub_232F3CCE0((void *)(v63 > 1), v64 + 1, 1, v61);
        *uint64_t v60 = v61;
      }
      v61[2] = v64 + 1;
      uint64_t v65 = &v61[2 * v64];
      v65[4] = v58;
      v65[5] = v57;
      swift_endAccess();
    }
    swift_beginAccess();
    uint64_t v66 = swift_bridgeObjectRetain();
    uint64_t v67 = sub_23303BDBC(v66);
    swift_bridgeObjectRelease();
    if (qword_268756418 != -1) {
      swift_once();
    }
    uint64_t v68 = *(void *)(sub_23303ADC8(qword_268770F98, v67) + 16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v68)
    {
      swift_beginAccess();
      v1[6] = 0;
      v1[7] = 0xE000000000000000;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_233038418()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_233038468()
{
  uint64_t v0 = sub_23309AC20();
  __swift_allocate_value_buffer(v0, qword_268770F80);
  __swift_project_value_buffer(v0, (uint64_t)qword_268770F80);
  return sub_23309ABB0();
}

uint64_t sub_2330384C0()
{
  uint64_t v0 = sub_23303BDBC((uint64_t)&unk_26E6A4C48);
  uint64_t result = swift_arrayDestroy();
  qword_268770F98 = v0;
  return result;
}

uint64_t sub_23303850C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  uint64_t v8 = sub_23309C420();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23309C220() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      BOOL v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23309C220() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_2330395AC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_2330386BC(unsigned char *a1, char a2)
{
  uint64_t v4 = *v2;
  sub_23309C3D0();
  if (a2) {
    unint64_t v5 = 0xD000000000000011;
  }
  else {
    unint64_t v5 = 0xD000000000000010;
  }
  if (a2) {
    unint64_t v6 = 0x80000002330ADB90;
  }
  else {
    unint64_t v6 = 0x80000002330ADB70;
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_23309C420();
  uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      unint64_t v11 = *(unsigned char *)(*(void *)(v4 + 48) + v9) ? 0xD000000000000011 : 0xD000000000000010;
      unint64_t v12 = *(unsigned char *)(*(void *)(v4 + 48) + v9) ? 0x80000002330ADB90 : 0x80000002330ADB70;
      if (v11 == v5 && v12 == v6) {
        break;
      }
      char v14 = sub_23309C220();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_23;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v16 = *(unsigned char *)(*(void *)(*v18 + 48) + v9);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v18;
    *BOOL v18 = 0x8000000000000000;
    char v16 = a2 & 1;
    sub_233039748(a2 & 1, v9, isUniquelyReferenced_nonNull_native);
    *BOOL v18 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_2330388A8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_23309B1F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = sub_23309B680();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    char v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_23303D080(&qword_2687586F8, MEMORY[0x263F07508]);
      char v21 = sub_23309B6D0();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      char v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_233039938((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_233038BCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_23303CB5C();
  uint64_t v3 = sub_23309BDF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v0;
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8) {
      break;
    }
    uint64_t v17 = (void *)(v2 + 56);
    unint64_t v18 = *(void *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v32 + 8 * v11);
      if (!v18)
      {
        int64_t v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          uint64_t v1 = v31;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            int64_t v11 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_39;
            }
            if (v11 >= v8) {
              goto LABEL_31;
            }
            unint64_t v18 = *(void *)(v32 + 8 * v11);
            ++v19;
            if (v18) {
              goto LABEL_21;
            }
          }
        }
        int64_t v11 = v19;
      }
    }
LABEL_21:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    sub_23309C3D0();
    sub_23309B800();
    uint64_t result = sub_23309C420();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v21;
    v13[1] = v22;
    ++*(void *)(v4 + 16);
  }
  swift_release();
  uint64_t v1 = v31;
  uint64_t v17 = (void *)(v2 + 56);
LABEL_33:
  uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
  if (v30 > 63) {
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v17 = -1 << v30;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_233038E90()
{
  uint64_t v1 = *v0;
  sub_23303D0C8();
  uint64_t v2 = sub_23309BDF0();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    char v26 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v25 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v7 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v11 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v12 = v11 | (v9 << 6);
      }
      else
      {
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = v26[v13];
        ++v9;
        if (!v14)
        {
          int64_t v9 = v13 + 1;
          if (v13 + 1 >= v25) {
            goto LABEL_33;
          }
          unint64_t v14 = v26[v9];
          if (!v14)
          {
            int64_t v9 = v13 + 2;
            if (v13 + 2 >= v25) {
              goto LABEL_33;
            }
            unint64_t v14 = v26[v9];
            if (!v14)
            {
              int64_t v15 = v13 + 3;
              if (v15 >= v25)
              {
LABEL_33:
                swift_release();
                uint64_t v24 = 1 << *(unsigned char *)(v1 + 32);
                if (v24 > 63) {
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v26 = -1 << v24;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v14 = v26[v15];
              if (!v14)
              {
                while (1)
                {
                  int64_t v9 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_39;
                  }
                  if (v9 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = v26[v9];
                  ++v15;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v9 = v15;
            }
          }
        }
LABEL_23:
        unint64_t v6 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
      }
      char v16 = *(unsigned char *)(*(void *)(v1 + 48) + v12);
      sub_23309C3D0();
      sub_23309B800();
      swift_bridgeObjectRelease();
      uint64_t result = sub_23309C420();
      uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v20 = 0;
        unint64_t v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v22 = v19 == v21;
          if (v19 == v21) {
            unint64_t v19 = 0;
          }
          v20 |= v22;
          uint64_t v23 = *(void *)(v7 + 8 * v19);
        }
        while (v23 == -1);
        unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      *(unsigned char *)(*(void *)(v3 + 48) + v10) = v16;
      ++*(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v3;
  return result;
}

uint64_t sub_2330391B4()
{
  uint64_t v1 = v0;
  uint64_t v42 = sub_23309B1F0();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_23303CF84();
  uint64_t v5 = sub_23309BDF0();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      char v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
      uint64_t result = sub_23309B680();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_2330395AC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_233038BCC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_233039BD8();
      goto LABEL_22;
    }
    sub_23303A1AC();
  }
  uint64_t v11 = *v4;
  sub_23309C3D0();
  sub_23309B800();
  uint64_t result = sub_23309C420();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_23309C220(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_23309C330();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_23309C220();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_233039748(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result & 1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  char v22 = result & 1;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_28;
  }
  if (a3)
  {
    sub_233038E90();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_233039D74();
      goto LABEL_28;
    }
    sub_23303A434();
  }
  uint64_t v8 = *v3;
  sub_23309C3D0();
  if (v5) {
    unint64_t v9 = 0xD000000000000011;
  }
  else {
    unint64_t v9 = 0xD000000000000010;
  }
  if (v5) {
    unint64_t v10 = 0x80000002330ADB90;
  }
  else {
    unint64_t v10 = 0x80000002330ADB70;
  }
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t result = sub_23309C420();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    do
    {
      unint64_t v13 = *(unsigned char *)(*(void *)(v8 + 48) + a2) ? 0xD000000000000011 : 0xD000000000000010;
      unint64_t v14 = *(unsigned char *)(*(void *)(v8 + 48) + a2) ? 0x80000002330ADB90 : 0x80000002330ADB70;
      if (v13 == v9 && v14 == v10) {
        goto LABEL_31;
      }
      char v16 = sub_23309C220();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_32;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  uint64_t v17 = *v21;
  *(void *)(*v21 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v22;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n();
LABEL_32:
  uint64_t result = sub_23309C330();
  __break(1u);
  return result;
}

uint64_t sub_233039938(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_23309B1F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_2330391B4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_233039F04();
      goto LABEL_12;
    }
    sub_23303A720();
  }
  uint64_t v12 = *v3;
  sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
  uint64_t v13 = sub_23309B680();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_23303D080(&qword_2687586F8, MEMORY[0x263F07508]);
      char v21 = sub_23309B6D0();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_23309C330();
  __break(1u);
  return result;
}

void *sub_233039BD8()
{
  uint64_t v1 = v0;
  sub_23303CB5C();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23309BDE0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_233039D74()
{
  uint64_t v1 = v0;
  sub_23303D0C8();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23309BDE0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_233039F04()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309B1F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23303CF84();
  uint64_t v6 = *v0;
  uint64_t v7 = sub_23309BDE0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  uint64_t v23 = v1;
  uint64_t v24 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v24, 8 * v10);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v25) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v24 + v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_28;
      }
      unint64_t v20 = *((void *)v24 + v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_28;
        }
        unint64_t v20 = *((void *)v24 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_12:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v18, v5, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_30;
  }
  unint64_t v20 = *((void *)v24 + v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_28;
    }
    unint64_t v20 = *((void *)v24 + v12);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23303A1AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_23303CB5C();
  uint64_t v3 = sub_23309BDF0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_32:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain_n();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          uint64_t result = swift_release_n();
          uint64_t v1 = v0;
          goto LABEL_32;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v18);
        int64_t v11 = v18;
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_23309C3D0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    uint64_t result = sub_23309C420();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_30;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_23303A434()
{
  uint64_t v1 = *v0;
  sub_23303D0C8();
  uint64_t v2 = sub_23309BDF0();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v24 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v25) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_24:
    char v16 = *(unsigned char *)(*(void *)(v1 + 48) + v12);
    sub_23309C3D0();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t result = sub_23309C420();
    uint64_t v17 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v18) & ~*(void *)(v7 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)(v7 + 8 * v19);
      }
      while (v23 == -1);
      unint64_t v10 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    *(unsigned char *)(*(void *)(v3 + 48) + v10) = v16;
    ++*(void *)(v3 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v25) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23303A720()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309B1F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_23303CF84();
  uint64_t v7 = sub_23309BDF0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
    uint64_t result = sub_23309B680();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23303AACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    unint64_t v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_23309BF80();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_23309BF80();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_23309BF80();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v6 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v6 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v6;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = MEMORY[0x237DB5EB0](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v6;
  uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  int64_t v15 = (void *)(v13 + 32 + 8 * v7);
  sub_232F3A800(0, (unint64_t *)&qword_268757138);
  swift_arrayDestroy();
  if (v8)
  {
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_23309BF80();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_21:
        if (v17 < 0)
        {
LABEL_46:
          uint64_t result = sub_23309BFD0();
          __break(1u);
          return result;
        }
        unint64_t v18 = (char *)(v15 + 1);
        unint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
          memmove(v18, v19, 8 * v17);
        }
        if (!(v6 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v21;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_23309BF80();
        swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v8;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *int64_t v15 = v3;
  return sub_23309B9C0();
}

uint64_t sub_23303ADC8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_23303AF50((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_23303AF50((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x237DB6EC0](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_23303AF50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        sub_23309C3D0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        uint64_t v20 = sub_23309C420();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      uint64_t v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (sub_23309C220() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          BOOL v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (sub_23309C220() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    sub_23309C3D0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    uint64_t v47 = sub_23309C420();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    uint64_t v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (sub_23309C220() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_23303B490(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        unint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (sub_23309C220() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_23303B490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x263F8EE88];
LABEL_36:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_23303CB5C();
  uint64_t result = sub_23309BE00();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_23309C3D0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    uint64_t result = sub_23309C420();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_23303B724(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_23303CF20(0, &qword_2687586E0, v11, (uint64_t (*)(uint64_t))type metadata accessor for RTFNode, MEMORY[0x263F8D488]);
        sub_23303CE98(v12, v13, v14);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v16 = sub_23303BB90(v20, i, a3);
          uint64_t v18 = *v17;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v16)(v20, 0);
          *(void *)(a1 + 8 * i) = v18;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RTFNode();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_23303B950(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_23303D018();
        sub_23303D080(&qword_268758718, (void (*)(uint64_t))sub_23303D018);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = sub_23303BBFC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_232F3A800(0, &qword_268758710);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t (*sub_23303BB90(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_23303BCAC(v6, a2, a3);
  return sub_23303BBF8;
}

uint64_t (*sub_23303BBFC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_23303BD34(v6, a2, a3);
  return sub_23303BBF8;
}

void sub_23303BC64(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_23303BCAC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x237DB5EA0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_23303BD2C;
  }
  __break(1u);
  return result;
}

uint64_t sub_23303BD2C()
{
  return swift_release();
}

void (*sub_23303BD34(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x237DB5EA0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for HealthRecordAttachmentsIndexer.State;
  }
  __break(1u);
  return result;
}

void destroy for HealthRecordAttachmentsIndexer.State(id *a1)
{
}

uint64_t sub_23303BDBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_23309BB20();
  uint64_t v8 = result;
  if (v2)
  {
    id v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23303850C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23303BE54(uint64_t a1)
{
  uint64_t v2 = sub_23309B1F0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)v21 - v6;
  sub_23303CF20(0, &qword_268757D68, 255, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v21 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
  uint64_t v29 = sub_23309BB20();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    char v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    unint64_t v25 = v12;
    unint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_2330388A8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_23303C128(uint64_t a1, unint64_t a2, unsigned int (*a3)(uint64_t))
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i < v4; i += v12)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = sub_23309BE30();
      uint64_t v12 = v11;
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0)
      {
        uint64_t v9 = (void *)v15;
        if ((a1 & 0x1000000000000000) == 0) {
          uint64_t v9 = (void *)sub_23309BEE0();
        }
        uint64_t v10 = *((unsigned __int8 *)v9 + i);
        if (*((char *)v9 + i) < 0)
        {
          switch(__clz(v10 ^ 0xFF))
          {
            case 0x1Au:
              goto LABEL_20;
            case 0x1Bu:
              goto LABEL_22;
            case 0x1Cu:
              goto LABEL_24;
            default:
              break;
          }
        }
LABEL_14:
        uint64_t v12 = 1;
        goto LABEL_15;
      }
      v16[0] = a1;
      v16[1] = v17;
      uint64_t v10 = *((unsigned __int8 *)v16 + i);
      if ((*((char *)v16 + i) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      switch(__clz(v10 ^ 0xFF))
      {
        case 0x1Au:
          uint64_t v9 = v16;
LABEL_20:
          uint64_t v10 = *((unsigned char *)v9 + i + 1) & 0x3F | ((v10 & 0x1F) << 6);
          uint64_t v12 = 2;
          break;
        case 0x1Bu:
          uint64_t v9 = v16;
LABEL_22:
          uint64_t v10 = ((v10 & 0xF) << 12) | ((*((unsigned char *)v9 + i + 1) & 0x3F) << 6) | *((unsigned char *)v9 + i + 2) & 0x3F;
          uint64_t v12 = 3;
          break;
        case 0x1Cu:
          uint64_t v9 = v16;
LABEL_24:
          uint64_t v10 = ((v10 & 0xF) << 18) | ((*((unsigned char *)v9 + i + 1) & 0x3F) << 12) | ((*((unsigned char *)v9 + i + 2) & 0x3F) << 6) | *((unsigned char *)v9 + i + 3) & 0x3F;
          uint64_t v12 = 4;
          break;
        default:
          goto LABEL_14;
      }
    }
LABEL_15:
    uint64_t v13 = (v3 == 0) & a3(v10);
    if (v13 != 1) {
      break;
    }
  }
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_23303C364(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v30 = 4 * v3;
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      unint64_t v5 = sub_23309B820();
      swift_bridgeObjectRelease();
      uint64_t v7 = sub_23309B920();
      uint64_t v8 = v6;
      BOOL v9 = v7 == 123 && v6 == 0xE100000000000000;
      int v10 = v9;
      if (!v9)
      {
        char v11 = sub_23309C220();
        BOOL v12 = v7 == 125 && v8 == 0xE100000000000000;
        BOOL v13 = v12;
        if ((v11 & 1) == 0 && !v13 && (sub_23309C220() & 1) == 0) {
          goto LABEL_6;
        }
      }
      if (v4)
      {
        sub_23309B830();
        if (sub_23309B920() == 92 && v14 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        char v15 = sub_23309C220();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_6;
        }
      }
      if (v10 || (sub_23309C220() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for RTFNode();
        uint64_t v16 = (void *)swift_allocObject();
        uint64_t v17 = MEMORY[0x263F8EE78];
        v16[4] = MEMORY[0x263F8EE78];
        v16[5] = v17;
        void v16[6] = 0;
        v16[7] = 0xE000000000000000;
        void v16[2] = 0;
        v16[3] = 0xE000000000000000;
        if (v31 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = sub_23309BF80();
          swift_bridgeObjectRelease();
          if (!v24)
          {
LABEL_32:
            swift_release();
            swift_retain();
            uint64_t v29 = v16;
          }
        }
        else if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_32;
        }
        if (v31 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_23309BF80();
          if (!v18) {
            goto LABEL_57;
          }
LABEL_35:
          unint64_t v19 = v18 - 1;
          if (__OFSUB__(v18, 1))
          {
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            swift_bridgeObjectRetain();
            uint64_t v27 = sub_23309BF80();
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
          if ((v31 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = MEMORY[0x237DB5EA0](v19, v31);
          }
          else
          {
            if ((v19 & 0x8000000000000000) != 0) {
              goto LABEL_76;
            }
            if (v19 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_77;
            }
            uint64_t v20 = *(void *)(v31 + 8 * v19 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v21 = swift_retain();
          MEMORY[0x237DB59C0](v21);
          if (*(void *)((*(void *)(v20 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v20 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            sub_23309B9D0();
          sub_23309B9E0();
          sub_23309B9C0();
          swift_endAccess();
          swift_beginAccess();
          sub_23309B880();
          swift_endAccess();
          swift_release();
        }
        else
        {
          uint64_t v18 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v18) {
            goto LABEL_35;
          }
LABEL_57:
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v25 = swift_retain();
        MEMORY[0x237DB59C0](v25);
        if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_23309B9D0();
        }
        sub_23309B9E0();
        sub_23309B9C0();
LABEL_61:
        swift_release();
        goto LABEL_7;
      }
      if (v7 == 125 && v8 == 0xE100000000000000 || (sub_23309C220() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v31;
        if (v31 >> 62)
        {
          if ((v31 & 0x8000000000000000) != 0) {
            uint64_t v4 = v31;
          }
          else {
            uint64_t v4 = v31 & 0xFFFFFFFFFFFFFF8;
          }
          swift_bridgeObjectRetain();
          uint64_t v26 = sub_23309BF80();
          swift_bridgeObjectRelease();
          if (!v26)
          {
LABEL_67:
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else if (!*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_67;
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v31 & 0x8000000000000000) != 0
          || (v31 & 0x4000000000000000) != 0)
        {
          uint64_t v22 = sub_232FE4838(v31);
          unint64_t v31 = v22;
        }
        uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v23) {
          goto LABEL_78;
        }
        *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) = v23 - 1;
        sub_23309B9C0();
        swift_beginAccess();
        sub_23309B880();
        swift_endAccess();
        swift_bridgeObjectRelease();
        sub_233037AA8();
        goto LABEL_61;
      }
LABEL_6:
      MEMORY[0x237DB58B0](v7, v8);
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v4 = v5 >> 14;
      if (v5 >> 14 == v30)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v31;
        uint64_t v4 = (uint64_t)v29;
        goto LABEL_70;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_70:
  swift_bridgeObjectRelease();
  if (v2 >> 62) {
    goto LABEL_79;
  }
  uint64_t v27 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_72:
  swift_bridgeObjectRelease();
  if (v27)
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t sub_23303C924@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 48);
  *a2 = *(void *)(v3 + 40);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for RTFDocument()
{
  return self;
}

uint64_t method lookup function for RTFDocument(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RTFDocument);
}

uint64_t dispatch thunk of RTFDocument.plainText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RTFDocument.plainText.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RTFDocument.plainText.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RTFDocument.__allocating_init(rtfString:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t type metadata accessor for RTFNode()
{
  return self;
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = sub_23309AC20();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_23303CAF4()
{
  return sub_23309AC00() & 1;
}

void sub_23303CB5C()
{
  if (!qword_2687586D8)
  {
    unint64_t v0 = sub_23309BE10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687586D8);
    }
  }
}

uint64_t sub_23303CBBC(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    unint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23309BF80();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_23309BF80();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_23309BF80();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v5;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = MEMORY[0x237DB5EB0](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for RTFNode();
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_23309BF80();
      swift_bridgeObjectRelease();
      uint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = sub_23309BFD0();
          __break(1u);
          return result;
        }
        char v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          uint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_23309BF80();
        swift_bridgeObjectRelease();
        uint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return sub_23309B9C0();
}

unint64_t sub_23303CE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = qword_2687586E8;
  if (!qword_2687586E8)
  {
    sub_23303CF20(255, &qword_2687586E0, a3, (uint64_t (*)(uint64_t))type metadata accessor for RTFNode, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687586E8);
  }
  return result;
}

void sub_23303CF20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_23303CF84()
{
  if (!qword_268758700)
  {
    sub_23309B1F0();
    sub_23303D080(&qword_2687586F0, MEMORY[0x263F07508]);
    unint64_t v0 = sub_23309BE10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758700);
    }
  }
}

void sub_23303D018()
{
  if (!qword_268758708)
  {
    sub_232F3A800(255, &qword_268758710);
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758708);
    }
  }
}

uint64_t sub_23303D080(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23303D0C8()
{
  if (!qword_268758720)
  {
    sub_23303D124();
    unint64_t v0 = sub_23309BE10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758720);
    }
  }
}

unint64_t sub_23303D124()
{
  unint64_t result = qword_268758728;
  if (!qword_268758728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758728);
  }
  return result;
}

uint64_t VCJWKSet.key(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  if (!v8)
  {
LABEL_11:
    sub_232F4F650();
    swift_allocError();
    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + 8) = a2;
    *(unsigned char *)(v23 + 16) = 2;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  long long v9 = *(_OWORD *)(v7 + 128);
  long long v34 = *(_OWORD *)(v7 + 112);
  long long v35 = v9;
  long long v36 = *(_OWORD *)(v7 + 144);
  uint64_t v37 = *(void *)(v7 + 160);
  long long v10 = *(_OWORD *)(v7 + 48);
  long long v11 = *(_OWORD *)(v7 + 80);
  long long v12 = *(_OWORD *)(v7 + 96);
  long long v31 = *(_OWORD *)(v7 + 64);
  long long v32 = v11;
  long long v33 = v12;
  long long v29 = *(_OWORD *)(v7 + 32);
  long long v30 = v10;
  uint64_t v13 = (long long *)(v7 + 168);
  uint64_t v14 = v8 - 1;
  uint64_t v15 = *((void *)&v9 + 1);
  if (!*((void *)&v9 + 1)) {
    goto LABEL_8;
  }
LABEL_3:
  BOOL v16 = (void)v35 == a1 && v15 == a2;
  if (!v16 && (sub_23309C220() & 1) == 0)
  {
LABEL_8:
    while (v14)
    {
      long long v29 = *v13;
      long long v17 = v13[1];
      long long v18 = v13[2];
      long long v19 = v13[4];
      long long v32 = v13[3];
      long long v33 = v19;
      long long v30 = v17;
      long long v31 = v18;
      long long v20 = v13[5];
      long long v21 = v13[6];
      long long v22 = v13[7];
      uint64_t v37 = *((void *)v13 + 16);
      long long v35 = v21;
      long long v36 = v22;
      long long v34 = v20;
      uint64_t v13 = (long long *)((char *)v13 + 136);
      --v14;
      uint64_t v15 = *((void *)&v21 + 1);
      if (*((void *)&v21 + 1)) {
        goto LABEL_3;
      }
    }
    goto LABEL_11;
  }
  uint64_t result = sub_232F631A4((uint64_t)&v29);
  long long v25 = v36;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v25;
  *(void *)(a3 + 128) = v37;
  long long v26 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v26;
  long long v27 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v27;
  long long v28 = v30;
  *(_OWORD *)a3 = v29;
  *(_OWORD *)(a3 + 16) = v28;
  return result;
}

uint64_t VCJWKSet.keys.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static VCJWKSet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_232E90024(*a1, *a2);
}

uint64_t sub_23303D2FC()
{
  return 1937335659;
}

uint64_t sub_23303D30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_23309C220();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23303D394(uint64_t a1)
{
  unint64_t v2 = sub_23303D5A0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23303D3D0(uint64_t a1)
{
  unint64_t v2 = sub_23303D5A0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCJWKSet.encode(to:)(void *a1)
{
  sub_23303D870(0, &qword_268758730, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23303D5A0();
  sub_23309C480();
  v10[1] = v8;
  sub_23303D5F4();
  sub_23303D8D4(&qword_268758748, (void (*)(void))sub_23303D64C);
  sub_23309C1B0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23303D5A0()
{
  unint64_t result = qword_268758738;
  if (!qword_268758738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758738);
  }
  return result;
}

void sub_23303D5F4()
{
  if (!qword_268758740)
  {
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758740);
    }
  }
}

unint64_t sub_23303D64C()
{
  unint64_t result = qword_268758750;
  if (!qword_268758750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758750);
  }
  return result;
}

uint64_t VCJWKSet.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_23303D870(0, &qword_268758758, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23303D5A0();
  sub_23309C460();
  if (!v2)
  {
    sub_23303D5F4();
    sub_23303D8D4(&qword_268758760, (void (*)(void))sub_23303D940);
    sub_23309C0E0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_23303D870(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_23303D5A0();
    unint64_t v7 = a3(a1, &type metadata for VCJWKSet.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23303D8D4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23303D5F4();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23303D940()
{
  unint64_t result = qword_268758768;
  if (!qword_268758768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758768);
  }
  return result;
}

uint64_t sub_23303D994@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return VCJWKSet.init(from:)(a1, a2);
}

uint64_t sub_23303D9AC(void *a1)
{
  return VCJWKSet.encode(to:)(a1);
}

BOOL sub_23303D9C4(uint64_t *a1, uint64_t *a2)
{
  return sub_232E90024(*a1, *a2);
}

ValueMetadata *type metadata accessor for VCJWKSet()
{
  return &type metadata for VCJWKSet;
}

unsigned char *storeEnumTagSinglePayload for VCJWKSet.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x23303DA7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWKSet.CodingKeys()
{
  return &type metadata for VCJWKSet.CodingKeys;
}

unint64_t sub_23303DAB8()
{
  unint64_t result = qword_268758770;
  if (!qword_268758770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758770);
  }
  return result;
}

unint64_t sub_23303DB10()
{
  unint64_t result = qword_268758778;
  if (!qword_268758778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758778);
  }
  return result;
}

unint64_t sub_23303DB68()
{
  unint64_t result = qword_268758780;
  if (!qword_268758780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758780);
  }
  return result;
}

unint64_t VCJWTError.errorDescription.getter()
{
  uint64_t v1 = *(void **)v0;
  switch(*(unsigned char *)(v0 + 8))
  {
    case 1:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001CLL;
      sub_23309C1E0();
      sub_23309B880();
      swift_bridgeObjectRelease();
      return v6;
    case 2:
      unint64_t v6 = 0;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      return v6;
    case 3:
      unint64_t result = 0xD00000000000002ELL;
      switch((unint64_t)v1)
      {
        case 1uLL:
          unint64_t result = 0xD00000000000002ELL;
          break;
        case 2uLL:
          unint64_t result = 0x742064656C696146;
          break;
        case 3uLL:
          unint64_t result = 0xD000000000000018;
          break;
        default:
          return result;
      }
      return result;
    default:
      id v2 = v1;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001CLL;
      swift_getErrorValue();
      Error.hdhr_friendlyDescription.getter(v4, v5);
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23303DE0C(v1, 0);
      return v6;
  }
}

void sub_23303DE0C(id a1, char a2)
{
  if (!a2) {
}
  }

uint64_t initializeBufferWithCopyOfBuffer for VCJWTError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_23303DE6C(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_23303DE6C(id result, char a2)
{
  if (!a2) {
    return result;
  }
  return result;
}

void destroy for VCJWTError(uint64_t a1)
{
}

uint64_t assignWithCopy for VCJWTError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_23303DE6C(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_23303DE0C(v5, v6);
  return a1;
}

uint64_t assignWithTake for VCJWTError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_23303DE0C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWTError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWTError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23303DFAC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_23303DFC4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCJWTError()
{
  return &type metadata for VCJWTError;
}

id sub_23303DFF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v57 = a5;
  sub_232F69858();
  MEMORY[0x270FA5388](v17 - 8);
  long long v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3A800(0, &qword_268758788);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_clinicalNoteRecordTypeForIdentifier_, *MEMORY[0x263F09480]);
  if (result)
  {
    long long v21 = result;
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v53 = a4;
    uint64_t v54 = a6;
    uint64_t v51 = a8;
    uint64_t v52 = a7;
    if (v22 == 0xD000000000000010 && v23 == 0x80000002330B5A90) {
      int v48 = 1;
    }
    else {
      int v48 = sub_23309C220();
    }
    uint64_t v50 = v9;
    uint64_t v24 = (void *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v25 = type metadata accessor for ExtractionContext();
    unint64_t v49 = (char *)v24 + *(int *)(v25 + 28);
    uint64_t v26 = sub_23309B130();
    uint64_t v55 = a2;
    uint64_t v56 = a1;
    uint64_t v46 = *a1;
    uint64_t v47 = (void *)v26;
    sub_232F698B0(a2, (uint64_t)v19);
    uint64_t v27 = sub_23309B230();
    uint64_t v28 = *(void *)(v27 - 8);
    long long v29 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27) != 1)
    {
      long long v29 = (void *)sub_23309B210();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v27);
    }
    uint64_t v45 = *v24;
    id v30 = objc_msgSend(self, sel_localDevice);
    if (*(uint64_t *)((char *)v24 + *(int *)(v25 + 40)))
    {
      uint64_t v31 = swift_bridgeObjectRetain();
      sub_233020734(v31);
      swift_bridgeObjectRelease();
      long long v32 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v32 = 0;
    }
    swift_bridgeObjectRetain();
    long long v33 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v34 = v24[1];
    id v35 = sub_233042B90();
    sub_232F3A800(0, &qword_2687586C8);
    long long v36 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
    if (a9)
    {
      uint64_t v37 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = 0;
    }
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    uint64_t v43 = (v34 >> 2) & 1;
    unint64_t v39 = v47;
    id v40 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_clinicalNoteRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_statusCoding_documentTypeCodingCollection_noteCreationDate_categoriesCodingCollections_relevantStartDate_relevantEndDate_authors_, v21, 0, v48 & 1, v47, v46, v29, v45, v30, v32, v33, v43, v35, v53, v54, v36, v52,
              v51,
              v37));

    id v41 = v40;
    unint64_t v42 = (void *)sub_23309B130();
    objc_msgSend(v41, sel_setCreationDate_, v42);

    sub_232F69914(v55, (uint64_t (*)(void))sub_232F69858);
    sub_232F69914((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    return v41;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_23303E440()
{
  uint64_t v2 = v1;
  unsigned int v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23303EE88(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  int64_t v62 = (char *)v61 - v5;
  uint64_t v6 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23303EE88(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, v3);
  MEMORY[0x270FA5388](v10 - 8);
  long long v12 = (char *)v61 - v11;
  uint64_t v94 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  MEMORY[0x270FA5388](v94);
  uint64_t v15 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v0 + 16);
  if (v16 && (uint64_t v17 = *(void *)(v16 + 16)) != 0)
  {
    v61[1] = *(void *)(v0 + 16);
    v61[2] = v2;
    uint64_t v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v67 = *(void *)(v13 + 72);
    uint64_t v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    swift_bridgeObjectRetain();
    long long v19 = (void *)MEMORY[0x263F8EE78];
    uint64_t v20 = v17 - 1;
    uint64_t v66 = v6;
    while (1)
    {
      sub_233040A08(v18, (uint64_t)v15, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      sub_233040448((uint64_t)&v15[*(int *)(v94 + 20)], (uint64_t)v12);
      if ((*v68)(v12, 1, v6) == 1)
      {
        sub_23304056C((uint64_t)v12, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
        sub_2330404DC((uint64_t)v92);
        sub_233040D98((uint64_t)v92, (uint64_t)v93, (uint64_t (*)(void))sub_2330404FC);
      }
      else
      {
        sub_233040A08((uint64_t)v12, (uint64_t)v9, type metadata accessor for ModelsR4.ResourceProxy);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            long long v26 = *(_OWORD *)v9;
            long long v64 = *((_OWORD *)v9 + 1);
            long long v65 = v26;
            uint64_t v27 = *((void *)v9 + 4);
            uint64_t v90 = &type metadata for ModelsR4.Bundle;
            unint64_t v91 = sub_232E9B8DC();
            uint64_t v28 = swift_allocObject();
            v89[0] = v28;
            long long v29 = v64;
            *(_OWORD *)(v28 + 16) = v65;
            *(_OWORD *)(v28 + 32) = v29;
            *(void *)(v28 + 48) = v27;
            goto LABEL_18;
          case 2u:
            uint64_t v90 = (ValueMetadata *)type metadata accessor for ModelsR4.Condition(0);
            unint64_t v91 = sub_2330406BC(&qword_2687566B8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
            uint64_t v31 = type metadata accessor for ModelsR4.Condition;
            goto LABEL_14;
          case 3u:
            uint64_t v90 = (ValueMetadata *)type metadata accessor for ModelsR4.DiagnosticReport(0);
            unint64_t v91 = sub_2330406BC(&qword_2687566B0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
            uint64_t v31 = type metadata accessor for ModelsR4.DiagnosticReport;
            goto LABEL_14;
          case 4u:
            uint64_t v90 = (ValueMetadata *)type metadata accessor for ModelsR4.DocumentReference(0);
            unint64_t v91 = sub_2330406BC(&qword_2687566A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
            uint64_t v31 = type metadata accessor for ModelsR4.DocumentReference;
            goto LABEL_14;
          case 5u:
            uint64_t v90 = (ValueMetadata *)type metadata accessor for ModelsR4.Immunization(0);
            unint64_t v91 = sub_2330406BC(&qword_2687566A0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
            uint64_t v31 = type metadata accessor for ModelsR4.Immunization;
            goto LABEL_14;
          case 6u:
            uint64_t v90 = (ValueMetadata *)type metadata accessor for ModelsR4.Observation(0);
            unint64_t v91 = sub_2330406BC(&qword_268756698, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v89);
            uint64_t v31 = type metadata accessor for ModelsR4.Observation;
LABEL_14:
            sub_233040D98((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, v31);
            goto LABEL_18;
          case 7u:
            uint64_t v90 = &type metadata for ModelsR4.Patient;
            unint64_t v91 = sub_232E9B6A4();
            uint64_t v32 = swift_allocObject();
            v89[0] = v32;
            long long v33 = *((_OWORD *)v9 + 7);
            *(_OWORD *)(v32 + 112) = *((_OWORD *)v9 + 6);
            *(_OWORD *)(v32 + 128) = v33;
            *(_OWORD *)(v32 + 144) = *((_OWORD *)v9 + 8);
            *(void *)(v32 + 160) = *((void *)v9 + 18);
            long long v34 = *((_OWORD *)v9 + 3);
            *(_OWORD *)(v32 + 48) = *((_OWORD *)v9 + 2);
            *(_OWORD *)(v32 + 64) = v34;
            long long v35 = *((_OWORD *)v9 + 5);
            *(_OWORD *)(v32 + 80) = *((_OWORD *)v9 + 4);
            *(_OWORD *)(v32 + 96) = v35;
            long long v36 = *((_OWORD *)v9 + 1);
            *(_OWORD *)(v32 + 16) = *(_OWORD *)v9;
            *(_OWORD *)(v32 + 32) = v36;
            goto LABEL_18;
          case 8u:
            long long v37 = *(_OWORD *)v9;
            long long v64 = *((_OWORD *)v9 + 1);
            long long v65 = v37;
            uint64_t v38 = *((void *)v9 + 4);
            uint64_t v39 = *((void *)v9 + 5);
            uint64_t v90 = &type metadata for UnknownResource;
            unint64_t v91 = sub_232E9B608();
            uint64_t v40 = swift_allocObject();
            v89[0] = v40;
            long long v41 = v64;
            *(_OWORD *)(v40 + 16) = v65;
            *(_OWORD *)(v40 + 32) = v41;
            *(void *)(v40 + 48) = v38;
            *(void *)(v40 + 56) = v39;
            goto LABEL_17;
          default:
            long long v21 = *(_OWORD *)v9;
            long long v64 = *((_OWORD *)v9 + 1);
            long long v65 = v21;
            long long v63 = *((_OWORD *)v9 + 2);
            uint64_t v22 = *((void *)v9 + 6);
            uint64_t v23 = *((void *)v9 + 7);
            uint64_t v90 = &type metadata for ModelsR4.Binary;
            unint64_t v91 = sub_232E9B978();
            uint64_t v24 = swift_allocObject();
            v89[0] = v24;
            long long v25 = v64;
            *(_OWORD *)(v24 + 16) = v65;
            *(_OWORD *)(v24 + 32) = v25;
            *(_OWORD *)(v24 + 48) = v63;
            *(void *)(v24 + 64) = v22;
            *(void *)(v24 + 72) = v23;
LABEL_17:
            uint64_t v6 = v66;
LABEL_18:
            sub_232E9BAB0();
            if (swift_dynamicCast())
            {
              nullsub_1(v93);
            }
            else
            {
              sub_2330404DC((uint64_t)v92);
              sub_233040D98((uint64_t)v92, (uint64_t)v93, (uint64_t (*)(void))sub_2330404FC);
            }
            sub_233040E00((uint64_t)v12, type metadata accessor for ModelsR4.ResourceProxy);
            break;
        }
      }
      sub_233040E00((uint64_t)v15, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      sub_233040D98((uint64_t)v93, (uint64_t)v89, (uint64_t (*)(void))sub_2330404FC);
      sub_233040D98((uint64_t)v89, (uint64_t)v92, (uint64_t (*)(void))sub_2330404FC);
      if (sub_233040554((uint64_t)v92) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v19 = sub_232F3D0D8(0, v19[2] + 1, 1, v19);
        }
        unint64_t v43 = v19[2];
        unint64_t v42 = v19[3];
        if (v43 >= v42 >> 1) {
          long long v19 = sub_232F3D0D8((void *)(v42 > 1), v43 + 1, 1, v19);
        }
        sub_233040D98((uint64_t)v89, (uint64_t)&v79, (uint64_t (*)(void))sub_2330404FC);
        v19[2] = v43 + 1;
        uint64_t v44 = &v19[19 * v43];
        long long v45 = v80;
        *((_OWORD *)v44 + 2) = v79;
        *((_OWORD *)v44 + 3) = v45;
        long long v46 = v84;
        long long v48 = v81;
        long long v47 = v82;
        *((_OWORD *)v44 + 6) = v83;
        *((_OWORD *)v44 + 7) = v46;
        *((_OWORD *)v44 + 4) = v48;
        *((_OWORD *)v44 + 5) = v47;
        long long v50 = v86;
        long long v49 = v87;
        long long v51 = v85;
        v44[22] = v88;
        *((_OWORD *)v44 + 9) = v50;
        *((_OWORD *)v44 + 10) = v49;
        *((_OWORD *)v44 + 8) = v51;
        uint64_t v6 = v66;
      }
      if (!v20) {
        break;
      }
      --v20;
      v18 += v67;
    }
    swift_bridgeObjectRelease();
    if (v19[2])
    {
      long long v55 = *((_OWORD *)v19 + 9);
      long long v85 = *((_OWORD *)v19 + 8);
      long long v86 = v55;
      long long v87 = *((_OWORD *)v19 + 10);
      uint64_t v88 = v19[22];
      long long v56 = *((_OWORD *)v19 + 5);
      long long v81 = *((_OWORD *)v19 + 4);
      long long v82 = v56;
      long long v57 = *((_OWORD *)v19 + 7);
      long long v83 = *((_OWORD *)v19 + 6);
      long long v84 = v57;
      long long v58 = *((_OWORD *)v19 + 3);
      long long v79 = *((_OWORD *)v19 + 2);
      long long v80 = v58;
      sub_232EA4908((uint64_t)&v79);
      swift_bridgeObjectRelease();
      long long v75 = v85;
      long long v76 = v86;
      long long v77 = v87;
      uint64_t v78 = v88;
      long long v71 = v81;
      long long v72 = v82;
      long long v73 = v83;
      long long v74 = v84;
      long long v69 = v79;
      long long v70 = v80;
      uint64_t v59 = sub_23309B230();
      uint64_t v60 = (uint64_t)v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v62, 1, 1, v59);
      id v53 = sub_2330717E8(v60);
      sub_23304056C(v60, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
      sub_232EA49DC((uint64_t)&v79);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_232F3A800(0, &qword_268758798);
      return static HKSignedClinicalDataSubject.unknown()();
    }
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    id v53 = v52;
    v92[0] = 200;
    sub_232F54C28(MEMORY[0x263F8EE78]);
    sub_2330406BC((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
    sub_23309AEA0();
    swift_willThrow();
  }
  return v53;
}

void sub_23303EE88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23303EEEC(uint64_t a1)
{
  v2[9] = a1;
  sub_233040954(0, &qword_2687587A8, MEMORY[0x263F8F7E0]);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = *(void *)(type metadata accessor for RecordExtractionContext() - 8);
  v2[13] = v4;
  v2[14] = *(void *)(v4 + 64);
  v2[15] = swift_task_alloc();
  sub_233040954(0, &qword_2687587D0, MEMORY[0x263F8F7F0]);
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = *(void *)(v1 + 16);
  v2[19] = v6;
  v2[20] = v7;
  return MEMORY[0x270FA2498](sub_23303F0B4, 0, 0);
}

uint64_t sub_23303F0B4()
{
  uint64_t v1 = v0[20];
  if (v1 && *(void *)(v1 + 16))
  {
    uint64_t v2 = v0[19];
    uint64_t v15 = v0[18];
    uint64_t v4 = v0[16];
    uint64_t v3 = v0[17];
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[13];
    sub_233040A08(v0[9], v5, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = swift_allocObject();
    sub_233040D98(v5, v8 + v7, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    v0[6] = v1;
    sub_23303EE88(0, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_23304079C();
    sub_233040884();
    swift_bridgeObjectRetain();
    sub_23309C2F0();
    uint64_t v9 = MEMORY[0x263F8EE78];
    v0[7] = MEMORY[0x263F8EE78];
    v0[8] = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v15, v2, v4);
    sub_233040D14(&qword_2687587E8, &qword_2687587D0, MEMORY[0x263F8F7F0]);
    sub_23309BAE0();
    uint64_t v10 = sub_233040D14(&qword_2687587F0, &qword_2687587A8, MEMORY[0x263F8F7E0]);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[21] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_23303F444;
    uint64_t v12 = v0[10];
    return MEMORY[0x270FA1E80](v0 + 2, v12, v10);
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    v0[5] = 200;
    sub_232F54C28(MEMORY[0x263F8EE78]);
    sub_2330406BC((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
    sub_23309AEA0();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_23303F444()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[11];
    uint64_t v3 = v2[12];
    uint64_t v5 = v2[10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_23303F8A4;
  }
  else
  {
    uint64_t v6 = sub_23303F590;
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t sub_23303F590()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 24);
    id v3 = v1;
    MEMORY[0x237DB59C0]();
    if (*(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_23309B9D0();
    sub_23309B9E0();
    sub_23309B9C0();
    id v4 = v2;
    MEMORY[0x237DB59C0]();
    if (*(void *)(*(void *)(v0 + 64) + 16) >= *(void *)(*(void *)(v0 + 64) + 24) >> 1) {
      sub_23309B9D0();
    }
    sub_23309B9E0();
    sub_23309B9C0();

    uint64_t v5 = sub_233040D14(&qword_2687587F0, &qword_2687587A8, MEMORY[0x263F8F7E0]);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_23303F444;
    uint64_t v7 = *(void *)(v0 + 80);
    return MEMORY[0x270FA1E80](v0 + 16, v7, v5);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 136);
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    sub_233040D58(*(void **)(v0 + 16), *(void **)(v0 + 24));
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    uint64_t v13 = MEMORY[0x263F8EE78];
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v14 = *(void *)(v12 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v14; ++i)
      {
        uint64_t v16 = *(void **)(v12 + 8 * i + 32);
        if (v16)
        {
          id v17 = v16;
          MEMORY[0x237DB59C0]();
          if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_23309B9D0();
          }
          sub_23309B9E0();
          sub_23309B9C0();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v20;
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v18(v11, v13);
  }
}

uint64_t sub_23303F8A4()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[19], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_23303F948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_23303F9EC;
  return sub_23303FB70(a3);
}

uint64_t sub_23303F9EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23303FAEC, 0, 0);
}

uint64_t sub_23303FAEC()
{
  uint64_t v1 = (void *)v0[6];
  if (v1)
  {
    id v2 = sub_233040044(v0[4], v1);
    uint64_t v3 = v0[6];
  }
  else
  {
    uint64_t v3 = 0;
    id v2 = 0;
  }
  id v4 = (void *)v0[2];
  *id v4 = v3;
  v4[1] = v2;
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_23303FB70(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_23303EE88(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23303FC8C, 0, 0);
}

uint64_t sub_23303FC8C()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_233040448(v4 + *(int *)(v5 + 20), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23304056C(v0[4], &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_23309B4B0();
    __swift_project_value_buffer(v6, (uint64_t)qword_268770F68);
    uint64_t v7 = sub_23309B4A0();
    os_log_type_t v8 = sub_23309BB80();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_232E63000, v7, v8, "ModelsR4.Bundle.BundleEntry.extractMedicalRecord: no “resource” entry, skipping", v9, 2u);
      MEMORY[0x237DB6EC0](v9, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10(0);
  }
  else
  {
    sub_233040D98(v0[4], v0[7], type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[8] = v12;
    void *v12 = v0;
    v12[1] = sub_23303FEB4;
    uint64_t v13 = v0[2];
    return sub_23308230C(v13);
  }
}

uint64_t sub_23303FEB4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23303FFB4, 0, 0);
}

uint64_t sub_23303FFB4()
{
  sub_233040E00(v0[7], type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t v1 = v0[9];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

id sub_233040044(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for FHIRExtractionContext();
  MEMORY[0x270FA5388](v6);
  os_log_type_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23303EE88(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_233040448((uint64_t)v3 + *(int *)(v16 + 20), (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_23304056C((uint64_t)v11, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    if (qword_2687563A0 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_23309B4B0();
    __swift_project_value_buffer(v17, (uint64_t)qword_268770F68);
    uint64_t v18 = sub_23309B4A0();
    os_log_type_t v19 = sub_23309BB80();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_232E63000, v18, v19, "ModelsR4.Bundle.BundleEntry.asClinicalRecord: no “resource” entry, skipping", v20, 2u);
      MEMORY[0x237DB6EC0](v20, -1, -1);
    }

    return 0;
  }
  else
  {
    sub_233040D98((uint64_t)v11, (uint64_t)v15, type metadata accessor for ModelsR4.ResourceProxy);
    ModelsR4.ResourceProxy.get()(v41);
    uint64_t v39 = a1;
    uint64_t v22 = v42;
    uint64_t v23 = v43;
    __swift_project_boxed_opaque_existential_1(v41, v42);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
    uint64_t v26 = v25;
    uint64_t v40 = a2;
    uint64_t v27 = *v3;
    uint64_t v28 = v3[1];
    long long v29 = self;
    swift_bridgeObjectRetain();
    id v30 = objc_msgSend(v29, sel_primaryR4Version);
    uint64_t v31 = (uint64_t *)((char *)v3 + *(int *)(v16 + 24));
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_233040A08(v39, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    long long v34 = (uint64_t *)&v8[v6[5]];
    *long long v34 = v24;
    v34[1] = v26;
    long long v35 = &v8[v6[6]];
    *(void *)long long v35 = v27;
    *((void *)v35 + 1) = v28;
    *(void *)&v8[v6[7]] = v30;
    long long v36 = (uint64_t *)&v8[v6[8]];
    *long long v36 = v32;
    v36[1] = v33;
    sub_232E9A9F4(v32, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    id v21 = sub_233082A54((uint64_t)v8, v40);
    sub_233040E00((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
    sub_233040E00((uint64_t)v15, type metadata accessor for ModelsR4.ResourceProxy);
  }
  return v21;
}

uint64_t sub_233040448(uint64_t a1, uint64_t a2)
{
  sub_23303EE88(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_2330404DC(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_2330404FC()
{
  if (!qword_268758790)
  {
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268758790);
    }
  }
}

uint64_t sub_233040554(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_23304056C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23303EE88(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2330405DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_233040624()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 168, 7);
}

uint64_t sub_2330406BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233040704()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_23304074C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

void sub_23304079C()
{
  if (!qword_2687587B0)
  {
    sub_232F3A800(255, &qword_268757008);
    sub_23304081C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2687587B0);
    }
  }
}

void sub_23304081C()
{
  if (!qword_2687587B8)
  {
    sub_232F3A800(255, &qword_268757C60);
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687587B8);
    }
  }
}

unint64_t sub_233040884()
{
  unint64_t result = qword_2687587C0;
  if (!qword_2687587C0)
  {
    sub_23303EE88(255, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_2330406BC(&qword_2687587C8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687587C0);
  }
  return result;
}

void sub_233040954(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    sub_23303EE88(255, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    uint64_t v7 = v6;
    sub_23304079C();
    uint64_t v9 = v8;
    unint64_t v10 = sub_233040884();
    unint64_t v11 = a3(a1, v7, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t sub_233040A08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233040A70()
{
  uint64_t v1 = (int *)(type metadata accessor for RecordExtractionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  uint64_t v5 = v0 + v3 + v1[7];
  uint64_t v6 = type metadata accessor for ExtractionContext();
  uint64_t v7 = v5 + *(int *)(v6 + 28);
  uint64_t v8 = sub_23309B190();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v5 + *(int *)(v6 + 32);
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t sub_233040C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(type metadata accessor for RecordExtractionContext() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_23300BE68;
  return sub_23303F948(a1, a2, v7);
}

uint64_t sub_233040D14(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_233040954(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_233040D58(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t sub_233040D98(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_233040E00(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_233040E60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_2330411CC();
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unknownRecordTypeForIdentifier_, *MEMORY[0x263F09FF0]);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v8 = type metadata accessor for ExtractionContext();
    uint64_t v9 = (void *)sub_23309B130();
    uint64_t v17 = *v7;
    uint64_t v18 = *a1;
    id v10 = objc_msgSend(self, sel_localDevice);
    uint64_t v11 = *(void **)((char *)v7 + *(int *)(v8 + 40));
    uint64_t v19 = (uint64_t)a1;
    if (v11)
    {
      uint64_t v12 = swift_bridgeObjectRetain();
      sub_233020734(v12);
      swift_bridgeObjectRelease();
      uint64_t v11 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v14 = v7[1];
    if (a3)
    {
      uint64_t v15 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
    }
    id v16 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unknownRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_displayName_, v6, 0, 0, v9, v18, 0, v17, v10, v11, v13, (v14 >> 2) & 1, v15);

    sub_2330202A4(v19);
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_233041068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = objc_msgSend(self, sel_synthesizeInMemoryConceptForCodingCollection_, a2);
  sub_232F6913C(a1, (uint64_t)v6);
  id v8 = objc_msgSend(v7, sel_preferredName);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_23309B710();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = sub_233040E60(v6, v10, v12);
  type metadata accessor for ExtractionContext();
  id v14 = v13;
  uint64_t v15 = (void *)sub_23309B130();
  objc_msgSend(v14, sel_setCreationDate_, v15);

  sub_2330202A4(a1);
  return v14;
}

unint64_t sub_2330411CC()
{
  unint64_t result = qword_268758800;
  if (!qword_268758800)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268758800);
  }
  return result;
}

unint64_t Parameter.asSignedClinicalDataProcessingContext(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  sub_232F41D18();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(v2 + 24);
  if (!v10) {
    goto LABEL_7;
  }
  unint64_t v11 = *(void *)(v2 + 16);
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    sub_232F3C104((uint64_t)v22);
    if (!v4)
    {
      long long v30 = v22[10];
      long long v31 = v22[11];
      long long v32 = v22[12];
      long long v33 = v22[13];
      long long v26 = v22[6];
      long long v27 = v22[7];
      long long v28 = v22[8];
      long long v29 = v22[9];
      void v24[2] = v22[2];
      v24[3] = v22[3];
      v24[4] = v22[4];
      long long v25 = v22[5];
      v24[0] = v22[0];
      v24[1] = v22[1];
      uint64_t v15 = sub_232F410E8();
      unint64_t v17 = v16;
      uint64_t v18 = sub_23309AF80();
      uint64_t v19 = *(void *)(v18 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v9, a1, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v18);
      long long v20 = v25;
      objc_allocWithZone(MEMORY[0x263F45C30]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v11 = (unint64_t)sub_232F412FC(v15, v17, 1, (uint64_t)v9, v20, *((uint64_t *)&v20 + 1), 0, 0, 0, 0xF000000000000000, 0, a2);
      sub_232F41D70((uint64_t)v24);
    }
  }
  else
  {
LABEL_7:
    type metadata accessor for HDHRExtractionError(0);
    unint64_t v11 = v13;
    uint64_t v23 = 203;
    sub_232F54C28(MEMORY[0x263F8EE78]);
    sub_232F55268();
    sub_23309AEA0();
    swift_willThrow();
  }
  return v11;
}

uint64_t Parameter.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueUri.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.valueDateTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameter.part.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Parameter.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[5];
  uint64_t v7 = v2[7];
  uint64_t v6 = v2[8];
  if (v2[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_23309C3F0();
    if (v4)
    {
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  sub_23309C3F0();
  if (v5)
  {
LABEL_4:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_5;
    }
LABEL_12:
    sub_23309C3F0();
    if (v6) {
      goto LABEL_6;
    }
    return sub_23309C3F0();
  }
LABEL_11:
  sub_23309C3F0();
  if (!v7) {
    goto LABEL_12;
  }
LABEL_5:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v6) {
    return sub_23309C3F0();
  }
LABEL_6:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E96978(a1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233041714()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72745365756C6176;
      break;
    case 2:
      uint64_t result = 0x69725565756C6176;
      break;
    case 3:
      uint64_t result = 0x74614465756C6176;
      break;
    case 4:
      uint64_t result = 1953653104;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2330417C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233042954(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2330417E8(uint64_t a1)
{
  unint64_t v2 = sub_2330422A4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233041824(uint64_t a1)
{
  unint64_t v2 = sub_2330422A4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Parameter.encode(to:)(void *a1)
{
  sub_2330422F8(0, &qword_268758808, MEMORY[0x263F8E0C0]);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v16 - v6;
  uint64_t v8 = v1[2];
  v16[5] = v1[3];
  void v16[6] = v8;
  uint64_t v9 = v1[4];
  v16[3] = v1[5];
  v16[4] = v9;
  uint64_t v10 = v1[6];
  v16[1] = v1[7];
  void v16[2] = v10;
  v16[0] = v1[8];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1;
  uint64_t v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_2330422A4();
  sub_23309C480();
  char v21 = 0;
  sub_23309C110();
  if (!v2)
  {
    char v20 = 1;
    sub_23309C110();
    char v19 = 2;
    sub_23309C110();
    char v18 = 3;
    sub_23309C110();
    v16[7] = v16[0];
    char v17 = 4;
    sub_232F5505C();
    sub_232F551A8(&qword_268757408, (void (*)(void))sub_232F550B4);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v14);
}

uint64_t Parameter.hashValue.getter()
{
  uint64_t v1 = *((void *)v0 + 8);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  uint64_t v10 = v1;
  sub_23309C3D0();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_23309C420();
}

uint64_t Parameter.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_2330422F8(0, &qword_268758818, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v9 = (char *)&v24 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2330422A4();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v36 = 0;
  uint64_t v10 = sub_23309C040();
  uint64_t v12 = v11;
  char v35 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_23309C040();
  uint64_t v30 = v14;
  uint64_t v26 = v13;
  uint64_t v27 = v10;
  char v34 = 2;
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  uint64_t v25 = sub_23309C040();
  char v33 = 3;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_23309C040();
  uint64_t v28 = v16;
  uint64_t v24 = v17;
  uint64_t v20 = v19;
  sub_232F5505C();
  char v32 = 4;
  sub_232F551A8(&qword_268757428, (void (*)(void))sub_232F55214);
  swift_bridgeObjectRetain();
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v21 = v31;
  swift_bridgeObjectRetain();
  uint64_t v22 = v28;
  *a2 = v27;
  a2[1] = v12;
  uint64_t v23 = v30;
  a2[2] = v26;
  a2[3] = v23;
  a2[4] = v25;
  a2[5] = v22;
  a2[6] = v24;
  a2[7] = v20;
  a2[8] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233041F84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Parameter.init(from:)(a1, a2);
}

uint64_t sub_233041F9C(void *a1)
{
  return Parameter.encode(to:)(a1);
}

uint64_t sub_233041FB4()
{
  uint64_t v1 = *((void *)v0 + 8);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  uint64_t v10 = v1;
  sub_23309C3D0();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_23309C420();
}

uint64_t sub_233042014()
{
  uint64_t v1 = *((void *)v0 + 8);
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v3 = v0[3];
  long long v8 = v0[2];
  long long v9 = v3;
  uint64_t v10 = v1;
  sub_23309C3D0();
  Parameter.hash(into:)((uint64_t)v5);
  return sub_23309C420();
}

uint64_t _s23HealthRecordsExtraction9ParameterV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v11 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v14 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v16 = a2[6];
  uint64_t v18 = a2[7];
  uint64_t v17 = a2[8];
  if (!v3)
  {
    if (v11) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v11) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v11) {
    goto LABEL_8;
  }
  uint64_t v45 = a2[6];
  uint64_t v46 = a1[4];
  uint64_t v43 = a1[7];
  uint64_t v44 = a2[7];
  uint64_t v19 = a1[6];
  uint64_t v20 = a2[8];
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[5];
  uint64_t v23 = a2[5];
  uint64_t v24 = a2[4];
  uint64_t v25 = a1[2];
  char v26 = sub_23309C220();
  uint64_t v4 = v25;
  uint64_t v13 = v24;
  uint64_t v15 = v23;
  uint64_t v7 = v22;
  uint64_t v9 = v21;
  uint64_t v17 = v20;
  uint64_t v8 = v19;
  uint64_t v10 = v43;
  uint64_t v18 = v44;
  uint64_t v16 = v45;
  uint64_t v6 = v46;
  char v27 = v26;
  uint64_t result = 0;
  if (v27)
  {
LABEL_8:
    if (v5)
    {
      if (!v14) {
        return 0;
      }
      if (v4 != v12 || v5 != v14)
      {
        uint64_t v29 = v9;
        uint64_t v30 = v7;
        uint64_t v31 = v15;
        uint64_t v32 = v13;
        char v33 = sub_23309C220();
        uint64_t v13 = v32;
        uint64_t v15 = v31;
        uint64_t v7 = v30;
        uint64_t v9 = v29;
        char v34 = v33;
        uint64_t result = 0;
        if ((v34 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v14)
    {
      return 0;
    }
    if (v7)
    {
      if (!v15) {
        return 0;
      }
      if (v6 != v13 || v7 != v15)
      {
        uint64_t v35 = v9;
        char v36 = sub_23309C220();
        uint64_t v9 = v35;
        char v37 = v36;
        uint64_t result = 0;
        if ((v37 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v10)
    {
      if (!v18) {
        return 0;
      }
      if (v8 != v16 || v10 != v18)
      {
        uint64_t v38 = v9;
        char v39 = sub_23309C220();
        uint64_t v9 = v38;
        char v40 = v39;
        uint64_t result = 0;
        if ((v40 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v18)
    {
      return 0;
    }
    if (v9)
    {
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v41 = swift_bridgeObjectRetain();
        char v42 = sub_232E8FDA0(v41, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v42) {
          return 1;
        }
      }
    }
    else if (!v17)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_2330422A4()
{
  unint64_t result = qword_268758810;
  if (!qword_268758810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758810);
  }
  return result;
}

void sub_2330422F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_2330422A4();
    unint64_t v7 = a3(a1, &type metadata for Parameter.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_23304235C(void *a1)
{
  a1[1] = sub_232F55214();
  a1[2] = sub_232F550B4();
  unint64_t result = sub_233042394();
  a1[3] = result;
  return result;
}

unint64_t sub_233042394()
{
  unint64_t result = qword_268758820;
  if (!qword_268758820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758820);
  }
  return result;
}

unint64_t sub_2330423EC()
{
  unint64_t result = qword_268758828;
  if (!qword_268758828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758828);
  }
  return result;
}

uint64_t destroy for Parameter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Parameter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Parameter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for Parameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Parameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Parameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameter()
{
  return &type metadata for Parameter;
}

unsigned char *storeEnumTagSinglePayload for Parameter.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233042814);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameter.CodingKeys()
{
  return &type metadata for Parameter.CodingKeys;
}

unint64_t sub_233042850()
{
  unint64_t result = qword_268758830;
  if (!qword_268758830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758830);
  }
  return result;
}

unint64_t sub_2330428A8()
{
  unint64_t result = qword_268758838;
  if (!qword_268758838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758838);
  }
  return result;
}

unint64_t sub_233042900()
{
  unint64_t result = qword_268758840;
  if (!qword_268758840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758840);
  }
  return result;
}

uint64_t sub_233042954(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69725565756C6176 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74614465756C6176 && a2 == 0xED0000656D695465 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953653104 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

id sub_233042B90()
{
  uint64_t v1 = *v0;
  sub_23304369C((uint64_t)(v0 + 3), (uint64_t)v10, (uint64_t (*)(void))sub_233042D0C);
  sub_23304369C((uint64_t)(v0 + 5), (uint64_t)v9, (uint64_t (*)(void))sub_233042D0C);
  sub_23304369C((uint64_t)v10, (uint64_t)&v11, (uint64_t (*)(void))sub_233042D0C);
  BOOL v2 = v12;
  if (v12)
  {
    id v3 = v1;
    swift_bridgeObjectRetain();
    sub_233042D64((uint64_t)v9);
    sub_233042D64((uint64_t)v10);
    BOOL v2 = (void *)sub_23309B6E0();
    sub_233042D90((uint64_t)v10);
  }
  else
  {
    id v4 = v1;
    swift_bridgeObjectRetain();
    sub_233042D64((uint64_t)v9);
  }
  uint64_t v5 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  sub_23304369C((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))sub_233042D0C);
  if (v13[1])
  {
    char v6 = (void *)sub_23309B6E0();
    sub_233042D90((uint64_t)v9);
  }
  else
  {
    char v6 = 0;
  }
  id v7 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v1, v2, v5, v6);

  return v7;
}

void sub_233042D0C()
{
  if (!qword_2687571C0)
  {
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687571C0);
    }
  }
}

uint64_t sub_233042D64(uint64_t a1)
{
  return a1;
}

uint64_t sub_233042D90(uint64_t a1)
{
  return a1;
}

uint64_t sub_233042DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v75 = a1;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  long long v77 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v84 = (char *)&v63 - v11;
  sub_232F65CFC(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v72 = (uint64_t)&v63 - v16;
  uint64_t v74 = type metadata accessor for Coding();
  uint64_t v17 = *(void *)(v74 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v74);
  long long v70 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v69 = (uint64_t)&v63 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  char v27 = (char *)&v63 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = *(void *)(v3 + 16);
  uint64_t v76 = a2;
  if (a2)
  {
    uint64_t v73 = v29;
    if (!v29)
    {
      uint64_t v45 = v17;
      uint64_t v42 = v72;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v72, 1, 1, v74);
      goto LABEL_17;
    }
    uint64_t v64 = (uint64_t)&v63 - v28;
    uint64_t v65 = v5;
    uint64_t v30 = *(void *)(v29 + 16);
    if (!v30)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = v65;
      goto LABEL_15;
    }
    uint64_t v67 = v15;
    uint64_t v68 = a3;
    uint64_t v31 = v29 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    long long v71 = v24 + 8;
    uint64_t v66 = v17;
    uint64_t v32 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = (uint64_t)v84;
    while (1)
    {
      sub_232F65C38(v31, (uint64_t)v27);
      sub_232F41E94((uint64_t)v27, v33);
      uint64_t v34 = sub_23309AF80();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1)
      {
        sub_232F65D50(v33, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        sub_232F65C38((uint64_t)v27, (uint64_t)v24);
      }
      else
      {
        uint64_t v36 = v32;
        uint64_t v37 = sub_23309AEE0();
        uint64_t v39 = v38;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v84, v34);
        uint64_t v80 = v37;
        uint64_t v81 = v39;
        uint64_t v78 = v75;
        uint64_t v79 = v76;
        sub_232F379FC();
        uint64_t v32 = v36;
        uint64_t v40 = sub_23309BD60();
        uint64_t v33 = (uint64_t)v84;
        swift_bridgeObjectRelease();
        sub_232F65C38((uint64_t)v27, (uint64_t)v24);
        if (!v40)
        {
          uint64_t v41 = *(void *)&v71[*(int *)(v74 + 20)];
          swift_bridgeObjectRetain();
          sub_2330024D0((uint64_t)v24);
          if (v41)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v42 = v72;
            sub_23304369C((uint64_t)v27, v72, (uint64_t (*)(void))type metadata accessor for Coding);
            uint64_t v43 = v66;
            uint64_t v44 = v74;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v42, 0, 1, v74);
            a3 = v68;
            uint64_t v5 = v65;
            uint64_t v15 = v67;
            goto LABEL_16;
          }
          goto LABEL_7;
        }
      }
      sub_2330024D0((uint64_t)v24);
LABEL_7:
      sub_2330024D0((uint64_t)v27);
      v31 += v32;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        a3 = v68;
        uint64_t v5 = v65;
        uint64_t v15 = v67;
        uint64_t v17 = v66;
LABEL_15:
        uint64_t v42 = v72;
        uint64_t v44 = v74;
        uint64_t v43 = v17;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v72, 1, 1, v74);
LABEL_16:
        swift_bridgeObjectRelease();
        uint64_t v45 = v43;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1, v44) == 1)
        {
LABEL_17:
          sub_232F65D50(v42, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
          uint64_t v17 = v45;
          uint64_t v29 = v73;
          break;
        }
        uint64_t v54 = v64;
        sub_23304369C(v42, v64, (uint64_t (*)(void))type metadata accessor for Coding);
        long long v55 = v82;
        long long v56 = v82;
LABEL_32:
        sub_232FE5E78(v56);
        uint64_t result = sub_2330024D0(v54);
        if (!v5)
        {
          uint64_t v60 = *((void *)v55 + 2);
          long long v61 = *(_OWORD *)(v55 + 24);
          long long v62 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)a3 = *(_OWORD *)v55;
          *(void *)(a3 + 16) = v60;
          *(_OWORD *)(a3 + 24) = v61;
          *(_OWORD *)(a3 + 40) = v62;
        }
        return result;
      }
    }
  }
  if (v29)
  {
    uint64_t v46 = *(void *)(v29 + 16);
    if (v46)
    {
      uint64_t v68 = a3;
      uint64_t v67 = v15;
      uint64_t v47 = v29 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v66 = v17;
      uint64_t v48 = *(void *)(v17 + 72);
      swift_bridgeObjectRetain();
      uint64_t v49 = (uint64_t)v70;
      uint64_t v50 = (uint64_t)v77;
      while (1)
      {
        sub_232F65C38(v47, v49);
        sub_232F41E94(v49, v50);
        uint64_t v51 = sub_23309AF80();
        int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51);
        sub_232F65D50(v50, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        if (v52 != 1) {
          break;
        }
        sub_2330024D0(v49);
        v47 += v48;
        if (!--v46)
        {
          uint64_t v53 = 1;
          uint64_t v15 = v67;
          goto LABEL_28;
        }
      }
      uint64_t v15 = v67;
      sub_23304369C(v49, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for Coding);
      uint64_t v53 = 0;
LABEL_28:
      uint64_t v57 = v74;
      uint64_t v17 = v66;
      a3 = v68;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = 1;
      uint64_t v57 = v74;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v53, 1, v57);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v57) != 1)
    {
      uint64_t v54 = v69;
      sub_23304369C((uint64_t)v15, v69, (uint64_t (*)(void))type metadata accessor for Coding);
      long long v55 = v83;
      long long v56 = v83;
      goto LABEL_32;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v74);
  }
  sub_232F65D50((uint64_t)v15, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  sub_232F6210C();
  swift_allocError();
  *(void *)uint64_t v58 = 0xD00000000000001CLL;
  *(void *)(v58 + 8) = 0x80000002330B68C0;
  *(void *)(v58 + 16) = 0;
  *(void *)(v58 + 24) = 0;
  *(unsigned char *)(v58 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_23304369C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for VerificationStatusCoding(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for VerificationStatusCoding(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(void *)(a2 + 48);
  id v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerificationStatusCoding(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VerificationStatusCoding(uint64_t a1, void *a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerificationStatusCoding(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerificationStatusCoding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerificationStatusCoding()
{
  return &type metadata for VerificationStatusCoding;
}

uint64_t static Base64URL.encode(_:)()
{
  uint64_t v0 = sub_23309AC20();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_23309B020();
  uint64_t v18 = v4;
  sub_23309ABB0();
  sub_232F379FC();
  uint64_t v5 = sub_23309BD40();
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  uint64_t v17 = v5;
  uint64_t v18 = v7;
  uint64_t v15 = 43;
  unint64_t v16 = 0xE100000000000000;
  uint64_t v13 = 45;
  unint64_t v14 = 0xE100000000000000;
  uint64_t v8 = sub_23309BD50();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  uint64_t v17 = v8;
  uint64_t v18 = v10;
  uint64_t v15 = 47;
  unint64_t v16 = 0xE100000000000000;
  uint64_t v13 = 95;
  unint64_t v14 = 0xE100000000000000;
  uint64_t v11 = sub_23309BD50();
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v0 = sub_23309AC20();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  long long v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_233082194(v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_23309B020();
  uint64_t v22 = v8;
  sub_23309ABB0();
  sub_232F379FC();
  uint64_t v9 = sub_23309BD40();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  uint64_t v21 = v9;
  uint64_t v22 = v11;
  uint64_t v19 = 43;
  uint64_t v20 = 0xE100000000000000;
  uint64_t v17 = 45;
  uint64_t v18 = 0xE100000000000000;
  uint64_t v12 = sub_23309BD50();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v21 = v12;
  uint64_t v22 = v14;
  uint64_t v19 = 47;
  uint64_t v20 = 0xE100000000000000;
  uint64_t v17 = 95;
  uint64_t v18 = 0xE100000000000000;
  uint64_t v15 = sub_23309BD50();
  swift_bridgeObjectRelease();
  sub_232E9AA4C(v5, v7);
  return v15;
}

uint64_t static Base64URL.decode(_:)()
{
  return sub_233043DA8();
}

uint64_t sub_233043DA8()
{
  sub_232F379FC();
  uint64_t v0 = MEMORY[0x263F8D310];
  sub_23309BD50();
  uint64_t v1 = sub_23309BD50();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v11 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 & 3;
  if (v4 <= 0) {
    uint64_t v5 = -(-v4 & 3);
  }
  if (v5)
  {
    if (v5 != 3 && v5 != 2)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      swift_allocError();
      *uint64_t v9 = 0;
      v9[1] = 0;
      goto LABEL_11;
    }
    sub_23309B880();
  }
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_23309AFC0();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    *uint64_t v8 = v11;
    v8[1] = v3;
LABEL_11:
    swift_willThrow();
    return v0;
  }
  swift_bridgeObjectRelease();
  return v0;
}

ValueMetadata *type metadata accessor for Base64URL()
{
  return &type metadata for Base64URL;
}

uint64_t getEnumTagSinglePayload for Base64URLError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Base64URLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *sub_233044058(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Base64URLError()
{
  return &type metadata for Base64URLError;
}

uint64_t sub_233044088()
{
  uint64_t v1 = OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder;
  if (*(void *)(v0 + OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder);
  }
  else
  {
    uint64_t v3 = v0;
    sub_23309AB30();
    swift_allocObject();
    uint64_t v2 = sub_23309AB20();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_233044104(void *a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233044720();
  id v6 = objc_msgSend(a1, sel_FHIRVersion);
  id v7 = objc_msgSend(self, sel_primaryR4Version);
  char v8 = sub_23309BBF0();

  if ((v8 & 1) == 0)
  {
    sub_23309B710();
    sub_232FFC7F4();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2330A1880;
    *(void *)(inited + 32) = sub_23309B710();
    *(void *)(inited + 40) = v14;
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    sub_23309BE40();
    sub_23309B880();
    id v15 = objc_msgSend(a1, sel_FHIRVersion);
    id v16 = objc_msgSend(v15, sel_FHIRRelease);

    sub_23309B710();
    sub_23309B880();
    swift_bridgeObjectRelease();
    uint64_t v17 = v46;
    unint64_t v18 = v47;
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v17;
    *(void *)(inited + 56) = v18;
    sub_232F37A50(inited);
    id v19 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v20 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_initWithDomain_code_userInfo_, v20, 125, v21);

    goto LABEL_13;
  }
  sub_233044088();
  id v9 = objc_msgSend(a1, sel_data);
  uint64_t v10 = sub_23309B030();
  unint64_t v12 = v11;

  sub_233044760();
  sub_23309AB10();
  if (!v1)
  {
    sub_232E9AA4C(v10, v12);
    swift_release();
    ModelsR4.ResourceProxy.get()(v45);
    sub_232E9BAB0();
    if (swift_dynamicCast())
    {
      uint64_t v22 = v47;
      if (v47)
      {
        uint64_t v23 = v49;
        uint64_t v41 = v46;
        uint64_t v42 = v52;
        uint64_t v43 = v51;
        uint64_t v44 = v48;
        if (v50 && (uint64_t v24 = sub_23309AFC0(), v25 >> 60 != 15))
        {
          unint64_t v33 = v25;
          uint64_t v40 = v24;
          if (v23)
          {
            id v38 = objc_allocWithZone(MEMORY[0x263F45CD8]);
            swift_bridgeObjectRetain();
            id v39 = (id)sub_23309B010();
            uint64_t v34 = (void *)sub_23309B6E0();
            id v37 = v34;
            swift_bridgeObjectRelease();
            id v7 = objc_msgSend(v38, sel_initWithContent_contentType_, v39, v34);
            sub_232F3F15C(v40, v33);

            sub_233044868(v41, v22);
            sub_2330447B8((uint64_t)v5);
            return v7;
          }
          sub_233044814();
          id v7 = (id)swift_allocError();
          *uint64_t v35 = 1;
          swift_willThrow();
          sub_232F3F15C(v40, v33);
        }
        else
        {
          sub_233044814();
          id v7 = (id)swift_allocError();
          *uint64_t v26 = 0;
          swift_willThrow();
        }
        sub_233044868(v41, v22);
        sub_2330447B8((uint64_t)v5);
        goto LABEL_4;
      }
    }
    sub_2330447B8((uint64_t)v5);
    sub_23309B710();
    sub_232FFC7F4();
    uint64_t v27 = swift_initStackObject();
    *(_OWORD *)(v27 + 16) = xmmword_2330A1880;
    *(void *)(v27 + 32) = sub_23309B710();
    *(void *)(v27 + 40) = v28;
    *(void *)(v27 + 72) = MEMORY[0x263F8D310];
    *(void *)(v27 + 48) = 0xD000000000000028;
    *(void *)(v27 + 56) = 0x80000002330B6920;
    sub_232F37A50(v27);
    id v29 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v30 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, 125, v31);

LABEL_13:
    swift_willThrow();
    return v7;
  }
  sub_232E9AA4C(v10, v12);
  swift_release();
  id v7 = v1;
LABEL_4:
  swift_getErrorValue();
  sub_232FFC588(v53, v54);
  swift_willThrow();

  return v7;
}

unint64_t sub_233044720()
{
  unint64_t result = qword_268757560;
  if (!qword_268757560)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268757560);
  }
  return result;
}

unint64_t sub_233044760()
{
  unint64_t result = qword_268756968;
  if (!qword_268756968)
  {
    type metadata accessor for ModelsR4.ResourceProxy(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756968);
  }
  return result;
}

uint64_t sub_2330447B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModelsR4.ResourceProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_233044814()
{
  unint64_t result = qword_268758848;
  if (!qword_268758848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758848);
  }
  return result;
}

uint64_t sub_233044868(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id FHIRAttachmentContentExtractor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id FHIRAttachmentContentExtractor.init()()
{
  *(void *)&v0[OBJC_IVAR___HKFHIRAttachmentContentExtractor____lazy_storage___decoder] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FHIRAttachmentContentExtractor();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for FHIRAttachmentContentExtractor()
{
  return self;
}

id FHIRAttachmentContentExtractor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FHIRAttachmentContentExtractor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for FHIRAttachmentContentExtractor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FHIRAttachmentContentExtractor);
}

uint64_t dispatch thunk of FHIRAttachmentContentExtractor.extractAttachmentContent(from:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t Identifier.use.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Identifier.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t Identifier.system.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Identifier();
  return sub_233045F44(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(void))sub_232F41D18);
}

uint64_t type metadata accessor for Identifier()
{
  uint64_t result = qword_268758880;
  if (!qword_268758880) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Identifier.value.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Identifier() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Identifier.hash(into:)(uint64_t a1)
{
  uint64_t v3 = sub_23309AF80();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v10 = v1[3];
  if (v10 == 1)
  {
    sub_23309C3F0();
    goto LABEL_12;
  }
  uint64_t v11 = v1[2];
  uint64_t v12 = v1[4];
  sub_23309C3F0();
  if (!v10)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_8;
    }
LABEL_10:
    sub_23309C3F0();
    uint64_t v13 = v11;
    uint64_t v14 = v10;
    goto LABEL_11;
  }
  sub_23309C3F0();
  sub_232E967F8(v11, v10);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_10;
  }
LABEL_8:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v11;
  uint64_t v14 = v10;
LABEL_11:
  sub_232E96840(v13, v14);
LABEL_12:
  uint64_t v15 = type metadata accessor for Identifier();
  sub_233045F44((uint64_t)v1 + *(int *)(v15 + 24), (uint64_t)v9, (uint64_t (*)(void))sub_232F41D18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23309C3F0();
    sub_23304711C(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  if (!*(void *)((char *)v1 + *(int *)(v15 + 28) + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233044F9C()
{
  uint64_t result = 6648693;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x6D6574737973;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233045014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233046F30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23304503C(uint64_t a1)
{
  unint64_t v2 = sub_233045E8C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233045078(uint64_t a1)
{
  unint64_t v2 = sub_233045E8C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Identifier.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_233045EE0(0, &qword_268758858, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233045E8C();
  sub_23309C480();
  LOBYTE(v13) = 0;
  sub_23309C110();
  if (!v2)
  {
    uint64_t v10 = *(void *)(v3 + 32);
    long long v13 = *(_OWORD *)(v3 + 16);
    uint64_t v14 = v10;
    v12[15] = 1;
    sub_232EBD064();
    sub_23309C150();
    type metadata accessor for Identifier();
    LOBYTE(v13) = 2;
    sub_23309AF80();
    sub_23304711C(&qword_268757720, MEMORY[0x263F06EA8]);
    sub_23309C150();
    LOBYTE(v13) = 3;
    sub_23309C110();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Identifier.hashValue.getter()
{
  sub_23309C3D0();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t Identifier.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  sub_232F41D18();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233045EE0(0, &qword_268758868, MEMORY[0x263F8E040]);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v7);
  id v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for Identifier();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233045E8C();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v25 = v6;
  uint64_t v26 = a1;
  uint64_t v13 = v28;
  uint64_t v14 = v29;
  LOBYTE(v30) = 0;
  uint64_t v15 = (uint64_t)v12;
  *(void *)uint64_t v12 = sub_23309C040();
  *((void *)v12 + 1) = v16;
  char v32 = 1;
  sub_232EA391C();
  sub_23309C080();
  uint64_t v17 = v31;
  *((_OWORD *)v12 + 1) = v30;
  *((void *)v12 + 4) = v17;
  sub_23309AF80();
  LOBYTE(v30) = 2;
  sub_23304711C(&qword_268757730, MEMORY[0x263F06EA8]);
  uint64_t v18 = (uint64_t)v25;
  sub_23309C080();
  sub_232F63BA8(v18, v15 + *(int *)(v10 + 24));
  LOBYTE(v30) = 3;
  uint64_t v20 = sub_23309C040();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v14);
  uint64_t v23 = (uint64_t *)(v15 + *(int *)(v10 + 28));
  *uint64_t v23 = v20;
  v23[1] = v22;
  sub_233045F44(v15, v27, (uint64_t (*)(void))type metadata accessor for Identifier);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return sub_2330470BC(v15, (uint64_t (*)(void))type metadata accessor for Identifier);
}

uint64_t sub_233045754@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Identifier.init(from:)(a1, a2);
}

uint64_t sub_23304576C(void *a1)
{
  return Identifier.encode(to:)(a1);
}

uint64_t sub_233045784()
{
  sub_23309C3D0();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_2330457C8()
{
  sub_23309C3D0();
  Identifier.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

Swift::OpaquePointer_optional __swiftcall Identifier.asTypeValuePair()()
{
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Identifier() + 28));
  uint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v4 = *v2;
    if (*(void *)(v0 + 24) == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    else
    {
      swift_bridgeObjectRetain();
      Swift::String_optional v8 = CodeableConcept.preferredDisplayString()();
      if (v8.value._object) {
        uint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
      }
      else {
        uint64_t countAndFlagsBits = 0;
      }
      if (v8.value._object) {
        object = v8.value._object;
      }
      else {
        object = (void *)0xE000000000000000;
      }
    }
    sub_233012A68();
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2330A1EB0;
    *(void *)(v7 + 32) = countAndFlagsBits;
    *(void *)(v7 + 40) = object;
    *(void *)(v7 + 48) = v4;
    *(void *)(v7 + 56) = v3;
  }
  else
  {
    uint64_t v7 = 0;
  }
  result.value._rawValue = (void *)v7;
  result.is_nil = v1;
  return result;
}

uint64_t _s23HealthRecordsExtraction10IdentifierV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F6703C();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v49 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v22) {
    return 0;
  }
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_23309C220(), uint64_t result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v54 = v20;
    uint64_t v55 = v5;
    uint64_t v51 = v7;
    uint64_t v52 = v15;
    long long v56 = v11;
    uint64_t v53 = v4;
    uint64_t v25 = a1[2];
    uint64_t v26 = a1[3];
    uint64_t v27 = a1[4];
    uint64_t v29 = a2[2];
    uint64_t v28 = a2[3];
    uint64_t v30 = a2[4];
    if (v26 == 1)
    {
      if (v28 == 1) {
        goto LABEL_15;
      }
    }
    else
    {
      v58[0] = a1[2];
      v58[1] = v26;
      v58[2] = v27;
      if (v28 != 1)
      {
        v57[0] = v29;
        v57[1] = v28;
        v57[2] = v30;
        sub_232E967F8(v25, v26);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v31 = _s23HealthRecordsExtraction15CodeableConceptV2eeoiySbAC_ACtFZ_0(v58, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232E96840(v25, v26);
        if ((v31 & 1) == 0) {
          return 0;
        }
LABEL_15:
        uint64_t v32 = type metadata accessor for Identifier();
        uint64_t v33 = (uint64_t)v54;
        sub_233045F44((uint64_t)a1 + *(int *)(v32 + 24), (uint64_t)v54, (uint64_t (*)(void))sub_232F41D18);
        uint64_t v50 = v32;
        sub_233045F44((uint64_t)a2 + *(int *)(v32 + 24), (uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
        uint64_t v34 = (uint64_t)v56;
        uint64_t v35 = (uint64_t)&v56[*(int *)(v9 + 48)];
        sub_233045F44(v33, (uint64_t)v56, (uint64_t (*)(void))sub_232F41D18);
        uint64_t v36 = v34;
        sub_233045F44((uint64_t)v18, v35, (uint64_t (*)(void))sub_232F41D18);
        id v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        uint64_t v38 = v53;
        if (v37(v34, 1, v53) == 1)
        {
          sub_2330470BC((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
          uint64_t v36 = (uint64_t)v56;
          sub_2330470BC(v33, (uint64_t (*)(void))sub_232F41D18);
          if (v37(v35, 1, v38) == 1)
          {
            sub_2330470BC(v36, (uint64_t (*)(void))sub_232F41D18);
LABEL_22:
            uint64_t v44 = *(int *)(v50 + 28);
            uint64_t v45 = (void *)((char *)a1 + v44);
            uint64_t v46 = *(void *)((char *)a1 + v44 + 8);
            unint64_t v47 = (void *)((char *)a2 + v44);
            uint64_t v48 = v47[1];
            if (v46)
            {
              if (v48 && (*v45 == *v47 && v46 == v48 || (sub_23309C220() & 1) != 0)) {
                return 1;
              }
            }
            else if (!v48)
            {
              return 1;
            }
            return 0;
          }
        }
        else
        {
          uint64_t v39 = (uint64_t)v52;
          sub_233045F44(v34, (uint64_t)v52, (uint64_t (*)(void))sub_232F41D18);
          if (v37(v35, 1, v38) != 1)
          {
            uint64_t v40 = v55;
            uint64_t v41 = v51;
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v51, v35, v38);
            sub_23304711C((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
            char v42 = sub_23309B6D0();
            uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
            v43(v41, v38);
            sub_2330470BC((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
            sub_2330470BC((uint64_t)v54, (uint64_t (*)(void))sub_232F41D18);
            v43((char *)v39, v38);
            sub_2330470BC(v34, (uint64_t (*)(void))sub_232F41D18);
            if ((v42 & 1) == 0) {
              return 0;
            }
            goto LABEL_22;
          }
          sub_2330470BC((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
          sub_2330470BC((uint64_t)v54, (uint64_t (*)(void))sub_232F41D18);
          (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v39, v38);
        }
        sub_2330470BC(v36, (uint64_t (*)(void))sub_232F6703C);
        return 0;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_232E967F8(v29, v28);
    sub_232E96840(v25, v26);
    sub_232E96840(v29, v28);
    return 0;
  }
  return result;
}

unint64_t sub_233045E8C()
{
  unint64_t result = qword_268758860;
  if (!qword_268758860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758860);
  }
  return result;
}

void sub_233045EE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233045E8C();
    unint64_t v7 = a3(a1, &type metadata for Identifier.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_233045F44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233045FAC(void *a1)
{
  a1[1] = sub_23304711C(&qword_268756918, (void (*)(uint64_t))type metadata accessor for Identifier);
  a1[2] = sub_23304711C(&qword_268756B68, (void (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t result = sub_23304711C(&qword_268758870, (void (*)(uint64_t))type metadata accessor for Identifier);
  a1[3] = result;
  return result;
}

uint64_t sub_233046058()
{
  return sub_23304711C(&qword_268758878, (void (*)(uint64_t))type metadata accessor for Identifier);
}

uint64_t initializeBufferWithCopyOfBuffer for Identifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 32) = a2[4];
    }
    else
    {
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_23309AF80();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_232F41D18();
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Identifier(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_232F41D18();
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Identifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 2);
  uint64_t v7 = (long long *)(a2 + 2);
  uint64_t v8 = a2[3];
  if (a1[3] == 1)
  {
    if (v8 == 1)
    {
      long long v9 = *v7;
      a1[4] = a2[4];
      *uint64_t v6 = v9;
    }
    else
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_232F042F8((uint64_t)(a1 + 2));
    uint64_t v10 = a2[4];
    *uint64_t v6 = *v7;
    a1[4] = v10;
  }
  else
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_23309AF80();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    sub_232F41D18();
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  uint64_t v20 = *(int *)(a3 + 28);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_232F41D18();
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) == 1) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7 == 1)
  {
    sub_232F042F8(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v8 = *(int *)(a3 + 24);
  long long v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_11;
  }
  if (v15)
  {
LABEL_11:
    sub_232F41D18();
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_12:
  uint64_t v17 = *(int *)(a3 + 28);
  int v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *int v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233046B0C);
}

uint64_t sub_233046B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232F41D18();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_233046BDC);
}

uint64_t sub_233046BDC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_232F41D18();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_233046C84()
{
  sub_232F41D18();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Identifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233046DF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Identifier.CodingKeys()
{
  return &type metadata for Identifier.CodingKeys;
}

unint64_t sub_233046E2C()
{
  unint64_t result = qword_268758890;
  if (!qword_268758890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758890);
  }
  return result;
}

unint64_t sub_233046E84()
{
  unint64_t result = qword_268758898;
  if (!qword_268758898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758898);
  }
  return result;
}

unint64_t sub_233046EDC()
{
  unint64_t result = qword_2687588A0;
  if (!qword_2687588A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588A0);
  }
  return result;
}

uint64_t sub_233046F30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_2330470BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23304711C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 VCJWK.init(kty:crv:alg:ext:e:n:x:y:keyOps:kid:use:)@<Q0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, __n128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __n128 result = a11;
  char v18 = *a2;
  *(unsigned char *)a9 = *a1;
  *(unsigned char *)(a9 + 1) = v18;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(unsigned char *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(__n128 *)(a9 + 72) = a11;
  *(void *)(a9 + 88) = a12;
  *(void *)(a9 + 96) = a14;
  *(void *)(a9 + 104) = a15;
  *(void *)(a9 + 112) = a13;
  *(void *)(a9 + 120) = a16;
  *(void *)(a9 + 128) = a17;
  return result;
}

HealthRecordsExtraction::VCJWK::KeyType_optional __swiftcall VCJWK.KeyType.init(rawValue:)(Swift::String rawValue)
{
  return (HealthRecordsExtraction::VCJWK::KeyType_optional)sub_233047490(v1);
}

uint64_t VCJWK.KeyType.rawValue.getter()
{
  uint64_t v1 = 17221;
  if (*v0 != 1) {
    uint64_t v1 = 5262159;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 4281170;
  }
}

uint64_t sub_2330471F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233034840(*a1, *a2);
}

uint64_t sub_233047204()
{
  return sub_23309C420();
}

uint64_t sub_23304728C()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233047300()
{
  return sub_23309C420();
}

HealthRecordsExtraction::VCJWK::KeyType_optional sub_233047384(Swift::String *a1)
{
  return VCJWK.KeyType.init(rawValue:)(*a1);
}

void sub_233047390(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 17221;
  if (v2 != 1)
  {
    uint64_t v5 = 5262159;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 4281170;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2330473D4()
{
  return sub_23309B970();
}

uint64_t sub_233047434()
{
  return sub_23309B960();
}

HealthRecordsExtraction::VCJWK::Curve_optional __swiftcall VCJWK.Curve.init(rawValue:)(Swift::String rawValue)
{
  return (HealthRecordsExtraction::VCJWK::Curve_optional)sub_233047490(v1);
}

uint64_t sub_233047490@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t VCJWK.Curve.rawValue.getter()
{
  uint64_t v1 = 0x3635322D50;
  if (*v0 != 1) {
    uint64_t v1 = 0x39313535326445;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6B36353270636573;
  }
}

uint64_t sub_233047544(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233034924(*a1, *a2);
}

uint64_t sub_233047550()
{
  return sub_23309C420();
}

uint64_t sub_2330475F4()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233047684()
{
  return sub_23309C420();
}

HealthRecordsExtraction::VCJWK::Curve_optional sub_233047724(Swift::String *a1)
{
  return VCJWK.Curve.init(rawValue:)(*a1);
}

void sub_233047730(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE900000000000031;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x3635322D50;
  if (v2 != 1)
  {
    uint64_t v5 = 0x39313535326445;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6B36353270636573;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_233047790()
{
  return sub_23309B970();
}

uint64_t sub_2330477F0()
{
  return sub_23309B960();
}

void VCJWK.kty.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void VCJWK.crv.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t VCJWK.alg.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.ext.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t VCJWK.e.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.n.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.x.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.y.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.kid.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWK.keyOps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VCJWK.use.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 VCJWK.init(data:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_23309AB30();
  swift_allocObject();
  sub_23309AB20();
  sub_23303D940();
  sub_23309AB10();
  sub_232E9AA4C(a1, a2);
  swift_release();
  if (!v3)
  {
    *(_OWORD *)(a3 + 96) = v14;
    *(_OWORD *)(a3 + 112) = v15;
    *(void *)(a3 + 128) = v16;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v12;
    *(_OWORD *)(a3 + 80) = v13;
    __n128 result = v9;
    *(_OWORD *)a3 = v8;
    *(__n128 *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t sub_233047AA0(char a1)
{
  uint64_t result = 7959659;
  switch(a1)
  {
    case 1:
      uint64_t result = 7762531;
      break;
    case 2:
      uint64_t result = 6777953;
      break;
    case 3:
      uint64_t result = 7632997;
      break;
    case 4:
      uint64_t result = 101;
      break;
    case 5:
      uint64_t result = 110;
      break;
    case 6:
      uint64_t result = 120;
      break;
    case 7:
      uint64_t result = 121;
      break;
    case 8:
      uint64_t result = 6580587;
      break;
    case 9:
      uint64_t result = 0x73706F5F79656BLL;
      break;
    case 10:
      uint64_t result = 6648693;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233047B84(char a1)
{
  uint64_t result = 7959659;
  switch(a1)
  {
    case 1:
      uint64_t result = 7762531;
      break;
    case 2:
      uint64_t result = 6777953;
      break;
    case 3:
      uint64_t result = 7632997;
      break;
    case 4:
      uint64_t result = 101;
      break;
    case 5:
      uint64_t result = 110;
      break;
    case 6:
      uint64_t result = 120;
      break;
    case 7:
      uint64_t result = 121;
      break;
    case 8:
      uint64_t result = 6580587;
      break;
    case 9:
      uint64_t result = 0x73706F5F79656BLL;
      break;
    case 10:
      uint64_t result = 6648693;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233047C68(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_233047AA0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_233047AA0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_233047CF4()
{
  char v1 = *v0;
  sub_23309C3D0();
  sub_233047AA0(v1);
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_233047D58()
{
  sub_233047AA0(*v0);
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233047DAC()
{
  char v1 = *v0;
  sub_23309C3D0();
  sub_233047AA0(v1);
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_233047E0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_23304A000();
  *a1 = result;
  return result;
}

uint64_t sub_233047E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_233047AA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_233047E68()
{
  return sub_233047B84(*v0);
}

uint64_t sub_233047E70@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_23304A000();
  *a1 = result;
  return result;
}

uint64_t sub_233047E98(uint64_t a1)
{
  unint64_t v2 = sub_2330495BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233047ED4(uint64_t a1)
{
  unint64_t v2 = sub_2330495BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t VCJWK.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 1);
  uint64_t v2 = *(void *)(v0 + 16);
  int v13 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 128);
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3F0();
  if (v1 != 3)
  {
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  sub_23309C3F0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  if (v13 != 2) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if (v3)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
  }
  else
  {
    sub_23309C3F0();
    if (v11)
    {
LABEL_9:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
  }
  sub_23309C3F0();
  if (v12)
  {
LABEL_10:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  sub_23309C3F0();
  if (v4)
  {
LABEL_11:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  sub_23309C3F0();
  if (v5)
  {
LABEL_12:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_23309C3F0();
  if (v6)
  {
LABEL_13:
    sub_23309C3F0();
    sub_23309C3E0();
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = v6 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        v9 += 16;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    if (v7) {
      goto LABEL_18;
    }
    return sub_23309C3F0();
  }
LABEL_26:
  sub_23309C3F0();
  if (!v7) {
    return sub_23309C3F0();
  }
LABEL_18:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t VCJWK.encode(to:)(void *a1)
{
  sub_2330496B8(0, &qword_2687588A8, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v19 - v6;
  char v8 = *v1;
  int v36 = v1[1];
  uint64_t v9 = *((void *)v1 + 1);
  uint64_t v32 = *((void *)v1 + 2);
  uint64_t v33 = v9;
  int v31 = v1[24];
  uint64_t v10 = *((void *)v1 + 5);
  uint64_t v29 = *((void *)v1 + 4);
  uint64_t v30 = v10;
  uint64_t v11 = *((void *)v1 + 7);
  uint64_t v27 = *((void *)v1 + 6);
  uint64_t v28 = v11;
  uint64_t v12 = *((void *)v1 + 9);
  uint64_t v25 = *((void *)v1 + 8);
  uint64_t v26 = v12;
  uint64_t v13 = *((void *)v1 + 11);
  uint64_t v23 = *((void *)v1 + 10);
  uint64_t v24 = v13;
  uint64_t v14 = *((void *)v1 + 13);
  uint64_t v21 = *((void *)v1 + 12);
  uint64_t v22 = v14;
  uint64_t v15 = *((void *)v1 + 14);
  uint64_t v16 = *((void *)v1 + 16);
  v19[1] = *((void *)v1 + 15);
  uint64_t v20 = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2330495BC();
  sub_23309C480();
  LOBYTE(v35) = v8;
  char v37 = 0;
  sub_233049610();
  uint64_t v17 = v34;
  sub_23309C1B0();
  if (!v17)
  {
    uint64_t v34 = v16;
    LOBYTE(v35) = v36;
    char v37 = 1;
    sub_233049664();
    sub_23309C150();
    LOBYTE(v35) = 2;
    sub_23309C110();
    LOBYTE(v35) = 3;
    sub_23309C120();
    LOBYTE(v35) = 4;
    sub_23309C110();
    LOBYTE(v35) = 5;
    sub_23309C110();
    LOBYTE(v35) = 6;
    sub_23309C110();
    LOBYTE(v35) = 7;
    sub_23309C110();
    LOBYTE(v35) = 8;
    sub_23309C110();
    uint64_t v35 = v20;
    char v37 = 9;
    sub_232F51B70();
    sub_232F51C2C(&qword_268756B08);
    sub_23309C150();
    LOBYTE(v35) = 10;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t VCJWK.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t VCJWK.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2330496B8(0, &qword_2687588C8, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = a1[3];
  long long v84 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_2330495BC();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
  }
  uint64_t v11 = v7;
  uint64_t v51 = a2;
  LOBYTE(v56) = 0;
  sub_23304971C();
  sub_23309C0E0();
  int v12 = LOBYTE(v65[0]);
  LOBYTE(v56) = 1;
  sub_233049770();
  sub_23309C080();
  int v13 = LOBYTE(v65[0]);
  LOBYTE(v65[0]) = 2;
  uint64_t v49 = sub_23309C040();
  int v50 = v13;
  LOBYTE(v65[0]) = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  int v16 = sub_23309C050();
  uint64_t v55 = v15;
  int v48 = v16;
  LOBYTE(v65[0]) = 4;
  uint64_t v47 = sub_23309C040();
  LOBYTE(v65[0]) = 5;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_23309C040();
  uint64_t v54 = v18;
  uint64_t v46 = v19;
  LOBYTE(v65[0]) = 6;
  uint64_t v53 = v20;
  swift_bridgeObjectRetain();
  uint64_t v45 = sub_23309C040();
  LOBYTE(v65[0]) = 7;
  uint64_t v52 = v21;
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_23309C040();
  int v43 = v12;
  LOBYTE(v65[0]) = 8;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain();
  uint64_t v42 = sub_23309C040();
  uint64_t v25 = v24;
  uint64_t v26 = v23;
  sub_232F51B70();
  LOBYTE(v56) = 9;
  sub_232F51C2C(&qword_268756B18);
  swift_bridgeObjectRetain();
  sub_23309C080();
  char v81 = 10;
  uint64_t v41 = v65[0];
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_23309C040();
  uint64_t v40 = v27;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v6);
  LOBYTE(v56) = v43;
  BYTE1(v56) = v50;
  uint64_t v28 = v55;
  *((void *)&v56 + 1) = v49;
  *(void *)&long long v57 = v55;
  BYTE8(v57) = v48;
  *(void *)&long long v58 = v47;
  *((void *)&v58 + 1) = v54;
  uint64_t v29 = v52;
  uint64_t v30 = v53;
  *(void *)&long long v59 = v46;
  *((void *)&v59 + 1) = v53;
  *(void *)&long long v60 = v45;
  *((void *)&v60 + 1) = v52;
  *(void *)&long long v61 = v44;
  *((void *)&v61 + 1) = v23;
  uint64_t v31 = v41;
  *(void *)&long long v62 = v42;
  *((void *)&v62 + 1) = v25;
  *(void *)&long long v63 = v41;
  *((void *)&v63 + 1) = v39;
  uint64_t v64 = v40;
  sub_232F631A4((uint64_t)&v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  long long v33 = v63;
  uint64_t v34 = v51;
  *(_OWORD *)(v51 + 96) = v62;
  *(_OWORD *)(v34 + 112) = v33;
  *(void *)(v34 + 128) = v64;
  long long v35 = v59;
  *(_OWORD *)(v34 + 32) = v58;
  *(_OWORD *)(v34 + 48) = v35;
  long long v36 = v61;
  *(_OWORD *)(v34 + 64) = v60;
  *(_OWORD *)(v34 + 80) = v36;
  long long v37 = v57;
  *(_OWORD *)uint64_t v34 = v56;
  *(_OWORD *)(v34 + 16) = v37;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
  LOBYTE(v65[0]) = v43;
  BYTE1(v65[0]) = v50;
  *(_DWORD *)((char *)v65 + 2) = *(_DWORD *)&v82[7];
  HIWORD(v65[0]) = v83;
  v65[1] = v49;
  v65[2] = v28;
  char v66 = v48;
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v82;
  *(_DWORD *)&v67[3] = *(_DWORD *)&v82[3];
  uint64_t v68 = v47;
  uint64_t v69 = v54;
  uint64_t v70 = v46;
  uint64_t v71 = v30;
  uint64_t v72 = v45;
  uint64_t v73 = v29;
  uint64_t v74 = v44;
  uint64_t v75 = v26;
  uint64_t v76 = v42;
  uint64_t v77 = v25;
  uint64_t v78 = v32;
  uint64_t v79 = v39;
  uint64_t v80 = v40;
  return sub_232F63238((uint64_t)v65);
}

uint64_t sub_233048F9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return VCJWK.init(from:)(a1, a2);
}

uint64_t sub_233048FB4(void *a1)
{
  return VCJWK.encode(to:)(a1);
}

uint64_t sub_233048FD0()
{
  return sub_23309C420();
}

uint64_t sub_233049014()
{
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction5VCJWKV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4281170;
  if (!*(unsigned char *)a1)
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 4281170;
    if (*(unsigned char *)a2) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)a1 != 1)
  {
    unint64_t v3 = 0xE300000000000000;
    uint64_t v4 = 5262159;
    if (*(unsigned char *)a2) {
      goto LABEL_6;
    }
LABEL_9:
    unint64_t v5 = 0xE300000000000000;
    goto LABEL_11;
  }
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 17221;
  if (!*(unsigned char *)a2) {
    goto LABEL_9;
  }
LABEL_6:
  if (*(unsigned char *)a2 == 1)
  {
    unint64_t v5 = 0xE200000000000000;
    uint64_t v2 = 17221;
  }
  else
  {
    unint64_t v5 = 0xE300000000000000;
    uint64_t v2 = 5262159;
  }
LABEL_11:
  int v6 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(a1 + 32);
  uint64_t v51 = *(void *)(a1 + 40);
  uint64_t v52 = *(void *)(a1 + 8);
  uint64_t v43 = *(void *)(a1 + 48);
  uint64_t v49 = *(void *)(a1 + 56);
  uint64_t v39 = *(void *)(a1 + 64);
  uint64_t v45 = *(void *)(a1 + 72);
  uint64_t v35 = *(void *)(a1 + 80);
  uint64_t v41 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v37 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 128);
  int v8 = *(unsigned __int8 *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a2 + 32);
  uint64_t v50 = *(void *)(a2 + 40);
  uint64_t v42 = *(void *)(a2 + 48);
  uint64_t v48 = *(void *)(a2 + 56);
  uint64_t v38 = *(void *)(a2 + 64);
  uint64_t v44 = *(void *)(a2 + 72);
  uint64_t v34 = *(void *)(a2 + 80);
  uint64_t v40 = *(void *)(a2 + 88);
  uint64_t v36 = *(void *)(a2 + 104);
  int v11 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v30 = *(void **)(a1 + 112);
  uint64_t v27 = *(void *)(a1 + 120);
  uint64_t v28 = *(void *)(a2 + 128);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v26 = *(void *)(a2 + 120);
  uint64_t v31 = *(void **)(a2 + 112);
  uint64_t v32 = *(void *)(a2 + 96);
  if (v4 == v2 && v3 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = sub_23309C220();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v13 & 1) == 0) {
      return result;
    }
  }
  if (v6 != 3)
  {
    if (v8 == 3) {
      return 0;
    }
    unint64_t v15 = 0xE900000000000031;
    uint64_t v16 = 0x6B36353270636573;
    if (v6)
    {
      if (v6 == 1)
      {
        unint64_t v17 = 0xE500000000000000;
        uint64_t v18 = 0x3635322D50;
        if (!v8) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v17 = 0xE700000000000000;
        uint64_t v18 = 0x39313535326445;
        if (!v8) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v18 = 0x6B36353270636573;
      unint64_t v17 = 0xE900000000000031;
      if (!v8) {
        goto LABEL_28;
      }
    }
    if (v8 != 1)
    {
      unint64_t v15 = 0xE700000000000000;
      if (v18 != 0x39313535326445) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    unint64_t v15 = 0xE500000000000000;
    uint64_t v16 = 0x3635322D50;
LABEL_28:
    if (v18 != v16)
    {
LABEL_33:
      char v19 = sub_23309C220();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v19 & 1) == 0) {
        return result;
      }
      goto LABEL_34;
    }
LABEL_31:
    if (v17 == v15)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v8 != 3) {
    return 0;
  }
LABEL_34:
  if (!v7)
  {
    if (v9) {
      return 0;
    }
LABEL_41:
    if (v11 == 2)
    {
      if (v12 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if (v12 == 2 || ((((v11 & 1) == 0) ^ v12) & 1) == 0) {
        return result;
      }
    }
    if (v51)
    {
      if (!v50) {
        return 0;
      }
      if (v47 != v46 || v51 != v50)
      {
        char v21 = sub_23309C220();
        BOOL result = 0;
        if ((v21 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v50)
    {
      return 0;
    }
    if (v49)
    {
      if (!v48) {
        return 0;
      }
      if (v43 != v42 || v49 != v48)
      {
        char v22 = sub_23309C220();
        BOOL result = 0;
        if ((v22 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v48)
    {
      return 0;
    }
    if (v45)
    {
      if (!v44) {
        return 0;
      }
      if (v39 != v38 || v45 != v44)
      {
        char v23 = sub_23309C220();
        BOOL result = 0;
        if ((v23 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v44)
    {
      return 0;
    }
    if (v41)
    {
      if (!v40) {
        return 0;
      }
      if (v35 != v34 || v41 != v40)
      {
        char v24 = sub_23309C220();
        BOOL result = 0;
        if ((v24 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v40)
    {
      return 0;
    }
    if (v37)
    {
      if (!v36) {
        return 0;
      }
      if (v33 != v32 || v37 != v36)
      {
        char v25 = sub_23309C220();
        BOOL result = 0;
        if ((v25 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v36)
    {
      return 0;
    }
    if (v30)
    {
      if (!v31 || (sub_232E90100(v30, v31) & 1) == 0) {
        return 0;
      }
    }
    else if (v31)
    {
      return 0;
    }
    if (v29) {
      return v28 && (v27 == v26 && v29 == v28 || (sub_23309C220() & 1) != 0);
    }
    return !v28;
  }
  if (!v9) {
    return 0;
  }
  if (v52 == v10 && v7 == v9) {
    goto LABEL_41;
  }
  char v20 = sub_23309C220();
  BOOL result = 0;
  if (v20) {
    goto LABEL_41;
  }
  return result;
}

unint64_t sub_2330495BC()
{
  unint64_t result = qword_2687588B0;
  if (!qword_2687588B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588B0);
  }
  return result;
}

unint64_t sub_233049610()
{
  unint64_t result = qword_2687588B8;
  if (!qword_2687588B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588B8);
  }
  return result;
}

unint64_t sub_233049664()
{
  unint64_t result = qword_2687588C0;
  if (!qword_2687588C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588C0);
  }
  return result;
}

void sub_2330496B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_2330495BC();
    unint64_t v7 = a3(a1, &type metadata for VCJWK.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_23304971C()
{
  unint64_t result = qword_2687588D0;
  if (!qword_2687588D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588D0);
  }
  return result;
}

unint64_t sub_233049770()
{
  unint64_t result = qword_2687588D8;
  if (!qword_2687588D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588D8);
  }
  return result;
}

unint64_t sub_2330497C8()
{
  unint64_t result = qword_2687588E0;
  if (!qword_2687588E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588E0);
  }
  return result;
}

unint64_t sub_233049820()
{
  unint64_t result = qword_2687588E8;
  if (!qword_2687588E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588E8);
  }
  return result;
}

unint64_t sub_233049878()
{
  unint64_t result = qword_2687588F0;
  if (!qword_2687588F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588F0);
  }
  return result;
}

uint64_t destroy for VCJWK()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VCJWK(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VCJWK(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VCJWK(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWK(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWK(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWK()
{
  return &type metadata for VCJWK;
}

ValueMetadata *type metadata accessor for VCJWK.KeyType()
{
  return &type metadata for VCJWK.KeyType;
}

unsigned char *_s23HealthRecordsExtraction5VCJWKV5CurveOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233049DBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWK.Curve()
{
  return &type metadata for VCJWK.Curve;
}

unsigned char *storeEnumTagSinglePayload for VCJWK.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233049EC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWK.CodingKeys()
{
  return &type metadata for VCJWK.CodingKeys;
}

unint64_t sub_233049EFC()
{
  unint64_t result = qword_2687588F8;
  if (!qword_2687588F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687588F8);
  }
  return result;
}

unint64_t sub_233049F54()
{
  unint64_t result = qword_268758900;
  if (!qword_268758900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758900);
  }
  return result;
}

unint64_t sub_233049FAC()
{
  unint64_t result = qword_268758908;
  if (!qword_268758908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758908);
  }
  return result;
}

uint64_t sub_23304A000()
{
  unint64_t v0 = sub_23309C010();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB) {
    return 11;
  }
  else {
    return v0;
  }
}

unint64_t sub_23304A04C()
{
  unint64_t result = qword_268758910;
  if (!qword_268758910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758910);
  }
  return result;
}

unint64_t sub_23304A0A0()
{
  unint64_t result = qword_268758918;
  if (!qword_268758918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758918);
  }
  return result;
}

id sub_23304A0F4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19)
{
  uint64_t v94 = a7;
  uint64_t v86 = a8;
  uint64_t v98 = a6;
  id v95 = a2;
  uint64_t v96 = a5;
  uint64_t v88 = a4;
  id v83 = a3;
  sub_23304AA64(0, &qword_268757C70, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v20 - 8);
  long long v82 = (char *)&v79 - v21;
  sub_23304AA64(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v97 = (uint64_t)&v79 - v23;
  sub_23304AA64(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  char v81 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v90 = (uint64_t)&v79 - v27;
  sub_23304AA64(0, &qword_268757D68, MEMORY[0x263F07508]);
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v30 = (char *)&v79 - v29;
  uint64_t v31 = sub_23309B1F0();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309B1E0();
  uint64_t v92 = sub_23309B1C0();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v34, v31);
  uint64_t v36 = (int *)type metadata accessor for PostExtractionContext();
  id v37 = objc_msgSend(*(id *)(a1 + v36[5]), sel_UUID);
  sub_23309B1D0();

  uint64_t v91 = sub_23309B1C0();
  v35(v34, v31);
  uint64_t v38 = v36[6];
  uint64_t v99 = a1;
  uint64_t v39 = *(void **)(a1 + v38);
  if (v39)
  {
    id v40 = objc_msgSend(v39, sel_UUID);
    sub_23309B1D0();

    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v34, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
    {
      uint64_t v89 = 0;
    }
    else
    {
      uint64_t v89 = sub_23309B1C0();
      v35(v30, v31);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, 1, 1, v31);
    uint64_t v89 = 0;
  }
  uint64_t v87 = *(void *)(v99 + v36[7]);
  if (v96)
  {
    uint64_t v88 = sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v88 = 0;
  }
  uint64_t v41 = v90;
  sub_23304AAB8(v98, v90, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v42 = sub_23309AF80();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  uint64_t v45 = 0;
  if (v44(v41, 1, v42) != 1)
  {
    uint64_t v45 = sub_23309AF10();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  }
  long long v85 = (void *)v45;
  if (a9)
  {
    uint64_t v84 = sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v84 = 0;
  }
  uint64_t v46 = v97;
  sub_23304AAB8(a10, v97, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  uint64_t v47 = sub_23309B230();
  uint64_t v48 = *(void *)(v47 - 8);
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47);
  uint64_t v96 = 0;
  if (v49 != 1)
  {
    uint64_t v96 = sub_23309B210();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  }
  uint64_t v97 = a14;
  uint64_t v90 = a10;
  if (a12 >> 60 == 15)
  {
    uint64_t v80 = 0;
  }
  else
  {
    sub_232E9A9F4(a11, a12);
    uint64_t v80 = sub_23309B010();
    sub_232F3F15C(a11, a12);
  }
  uint64_t v51 = (uint64_t)v81;
  uint64_t v50 = v82;
  sub_23304AAB8(a13, (uint64_t)v82, &qword_268757C70, MEMORY[0x263F07490]);
  uint64_t v52 = sub_23309B190();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v50, 1, v52) != 1)
  {
    uint64_t v54 = sub_23309B130();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
  }
  sub_23304AAB8(v97, v51, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if (v44(v51, 1, v42) == 1)
  {
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = (char *)sub_23309AF10();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v51, v42);
  }
  if (a16 >> 60 == 15)
  {
    long long v56 = 0;
  }
  else
  {
    sub_232E9A9F4(a15, a16);
    long long v56 = (void *)sub_23309B010();
    sub_232F3F15C(a15, a16);
  }
  if (a18 >> 60 == 15)
  {
    uint64_t v57 = 0;
  }
  else
  {
    sub_232E9A9F4(a17, a18);
    uint64_t v57 = sub_23309B010();
    sub_232F3F15C(a17, a18);
  }
  id v58 = v83;
  uint64_t v86 = a13;
  if (a19)
  {
    long long v59 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v59 = 0;
  }
  id v83 = v59;
  id v60 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v78 = v59;
  uint64_t v76 = v56;
  uint64_t v77 = v57;
  uint64_t v75 = v55;
  uint64_t v74 = v54;
  long long v61 = (void *)v80;
  id v93 = v56;
  long long v62 = (void *)v96;
  long long v82 = v55;
  long long v63 = (void *)v84;
  uint64_t v64 = (void *)v54;
  uint64_t v65 = v85;
  char v66 = (void *)v88;
  id v73 = v58;
  uint64_t v67 = (void *)v92;
  uint64_t v68 = (void *)v57;
  uint64_t v69 = (void *)v91;
  uint64_t v70 = (void *)v89;
  id v95 = objc_msgSend(v60, sel_initWithIdentifier_medicalRecordIdentifier_clinicalRecordIdentifier_accountIdentifier_FHIRVersion_type_status_errorStatus_title_webURL_sizeInBytes_contentType_locale_expectedHash_creationDate_retryCount_nextRetryDate_lastUpdatedDate_lastError_fileURL_inlineData_inlineDataChecksum_attachmentIdentifier_metadata_, v92, v91, v89, 0, v87, v95, v73, 0, v88, v85, v94, v84, v96, v80, v74, 0, 0,
          0,
          0,
          v75,
          v76,
          v77,
          0,
          v78);

  uint64_t v71 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_23304AB24(v97, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  sub_23304AB24(v86, &qword_268757C70, MEMORY[0x263F07490]);
  sub_23304AB24(v90, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  sub_23304AB24(v98, (unint64_t *)&qword_268756520, v71);
  sub_23304AB80(v99);
  return v95;
}

void sub_23304AA64(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_23304AAB8(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23304AA64(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23304AB24(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_23304AA64(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23304AB80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PostExtractionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t ExtractionError.errorDescription.getter()
{
  uint64_t v1 = sub_23309B1F0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = *(void *)v0;
  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      v20[0] = 0x1000000000000017;
      v20[1] = 0x80000002330B6A90;
      sub_23309B880();
      sub_23309B880();
      return v20[0];
    case 2:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      v20[0] = 0x1000000000000018;
      v20[1] = 0x80000002330B6A70;
      sub_23309B880();
      goto LABEL_6;
    case 3:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      v20[0] = 0x1000000000000020;
      v20[1] = 0x80000002330B6A40;
      sub_23309B880();
LABEL_6:
      sub_23309B880();
      sub_23309B880();
      return v20[0];
    case 4:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      v20[0] = 0x100000000000001CLL;
      v20[1] = 0x80000002330B6A20;
      sub_23309B880();
      sub_23309B880();
      sub_23309B880();
      goto LABEL_8;
    case 5:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      id v9 = (id)v5;
      sub_23309BE40();
      sub_23309B880();
      id v10 = objc_msgSend(v9, sel_UUID);
      sub_23309B1D0();

      sub_23304B1D0();
      sub_23309C1E0();
      sub_23309B880();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      sub_23309B880();
      int v11 = (void *)v5;
      uint64_t v12 = v6;
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      char v15 = 5;
      goto LABEL_11;
    case 6:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      id v16 = (id)v5;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      strcpy((char *)v20, "FHIR version ");
      HIWORD(v20[1]) = -4864;
      id v17 = objc_msgSend(v16, sel_stringRepresentation);
      sub_23309B710();

      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      int v11 = (void *)v5;
      uint64_t v12 = v6;
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      char v15 = 6;
LABEL_11:
      sub_23304B118(v11, v12, v13, v14, v15);
      return v20[0];
    case 7:
      unint64_t v19 = 0xD00000000000002DLL;
      if (v5 == 1 && (v8 | v6 | v7) == 0) {
        unint64_t v19 = 0xD000000000000015;
      }
      if (v8 | v6 | v5 | v7) {
        return v19;
      }
      else {
        return 0xD00000000000001CLL;
      }
    default:
      v20[0] = 0;
      v20[1] = 0xE000000000000000;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      v20[0] = 0xD000000000000013;
      v20[1] = 0x80000002330B6AD0;
      sub_23309B880();
LABEL_8:
      sub_23309B880();
      return v20[0];
  }
}

void sub_23304B118(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
      goto LABEL_6;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 5:
    case 6:

      break;
    default:
      return;
  }
}

unint64_t sub_23304B1D0()
{
  unint64_t result = qword_268758920;
  if (!qword_268758920)
  {
    sub_23309B1F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758920);
  }
  return result;
}

id sub_23304B230(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
      goto LABEL_6;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRetain();
LABEL_6:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 5:
    case 6:
      unint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for ExtractionError(uint64_t a1)
{
}

uint64_t initializeWithCopy for ExtractionError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23304B230(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ExtractionError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23304B230(*(id *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_23304B118(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ExtractionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_23304B118(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtractionError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23304B4C4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 6u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_23304B4DC(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)__n128 result = a2 - 7;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 7;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ExtractionError()
{
  return &type metadata for ExtractionError;
}

__n128 Location.init(identifier:physicalType:alias:name:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = a2[1].n128_u64[0];
  *(void *)a6 = a1;
  __n128 result = *a2;
  *(__n128 *)(a6 + 8) = *a2;
  *(void *)(a6 + 24) = v6;
  *(void *)(a6 + 32) = a3;
  *(void *)(a6 + 40) = a4;
  *(void *)(a6 + 48) = a5;
  return result;
}

uint64_t Location.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Location.physicalType.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t Location.alias.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Location.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23304B578(unsigned __int8 *a1, char *a2)
{
  return sub_2330346B0(*a1, *a2);
}

uint64_t sub_23304B584()
{
  return sub_23309C420();
}

uint64_t sub_23304B660()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23304B724()
{
  return sub_23309C420();
}

uint64_t sub_23304B7FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_23304CF28();
  *a1 = result;
  return result;
}

void sub_23304B82C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      uint64_t v3 = 0x6C61636973796870;
      goto LABEL_3;
    case 2:
      *a1 = 0x7361696C61;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 1701667182;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_23304B8C8()
{
  uint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C61636973796870;
      break;
    case 2:
      uint64_t result = 0x7361696C61;
      break;
    case 3:
      uint64_t result = 1701667182;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23304B958@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_23304CF28();
  *a1 = result;
  return result;
}

uint64_t sub_23304B980(uint64_t a1)
{
  unint64_t v2 = sub_23304BE3C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23304B9BC(uint64_t a1)
{
  unint64_t v2 = sub_23304BE3C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Location.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_23304C758(0, &qword_268758928, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v9 = (char *)&v22 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23304BE3C();
  sub_23309C460();
  if (v2)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_23309C450();
    uint64_t v26 = a2;
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    uint64_t v15 = sub_23309C230();
    uint64_t v17 = v12;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    uint64_t v10 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 1;
  }
  else
  {
    sub_23304BE90();
    char v28 = 0;
    sub_23304C7BC((unint64_t *)&qword_268756910, &qword_268756918);
    sub_23309C080();
    uint64_t v10 = v27[0];
    char v28 = 1;
    sub_232EA391C();
    sub_23309C080();
    uint64_t v11 = v27[2];
    uint64_t v24 = v27[1];
    uint64_t v25 = v27[0];
    sub_232F51B70();
    char v28 = 2;
    sub_232F51C2C(&qword_268756B18);
    sub_23309C080();
    uint64_t v26 = a2;
    uint64_t v22 = v27[0];
    uint64_t v23 = v11;
    LOBYTE(v27[0]) = 3;
    uint64_t v15 = sub_23309C040();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    uint64_t v20 = v25;
    uint64_t v21 = v22;
  }
  uint64_t v13 = v26;
  *uint64_t v26 = v10;
  v13[1] = v20;
  void v13[2] = v19;
  uint64_t v13[3] = v18;
  v13[4] = v21;
  v13[5] = v15;
  v13[6] = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23304BE3C()
{
  unint64_t result = qword_268758930;
  if (!qword_268758930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758930);
  }
  return result;
}

void sub_23304BE90()
{
  if (!qword_268756908)
  {
    type metadata accessor for Identifier();
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756908);
    }
  }
}

uint64_t Location.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[6];
  if (*v1)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E9800C(a1, v4);
    swift_bridgeObjectRelease();
    if (v5 == 1) {
      goto LABEL_3;
    }
LABEL_6:
    sub_23309C3F0();
    if (v5)
    {
      sub_23309C3F0();
      sub_232E967F8(v3, v5);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_8;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_8:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v6);
        swift_bridgeObjectRelease();
        sub_232E96840(v3, v5);
        if (!v7) {
          goto LABEL_4;
        }
        goto LABEL_12;
      }
    }
    sub_23309C3F0();
    sub_232E96840(v3, v5);
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  sub_23309C3F0();
  if (v5 != 1) {
    goto LABEL_6;
  }
LABEL_3:
  sub_23309C3F0();
  if (!v7)
  {
LABEL_4:
    sub_23309C3F0();
    goto LABEL_16;
  }
LABEL_12:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
LABEL_16:
  if (!v8) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t Location.encode(to:)(void *a1)
{
  sub_23304C758(0, &qword_268758938, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v10 = *v1;
  uint64_t v9 = v1[1];
  uint64_t v18 = v1[2];
  uint64_t v19 = v9;
  uint64_t v11 = v1[3];
  uint64_t v16 = v1[4];
  uint64_t v17 = v11;
  uint64_t v12 = v1[5];
  v15[1] = v1[6];
  void v15[2] = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23304BE3C();
  sub_23309C480();
  uint64_t v20 = v10;
  char v23 = 0;
  sub_23304BE90();
  sub_23304C7BC((unint64_t *)&qword_268756B60, &qword_268756B68);
  sub_23309C150();
  if (!v2)
  {
    uint64_t v13 = v16;
    uint64_t v20 = v19;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    char v23 = 1;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v20 = v13;
    char v23 = 2;
    sub_232F51B70();
    sub_232F51C2C(&qword_268756B08);
    sub_23309C150();
    LOBYTE(v20) = 3;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Location.hashValue.getter()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_23309C3D0();
  Location.hash(into:)((uint64_t)v4);
  return sub_23309C420();
}

uint64_t sub_23304C43C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Location.init(from:)(a1, a2);
}

uint64_t sub_23304C454(void *a1)
{
  return Location.encode(to:)(a1);
}

uint64_t sub_23304C46C()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_23309C3D0();
  Location.hash(into:)((uint64_t)v4);
  return sub_23309C420();
}

uint64_t sub_23304C4CC()
{
  uint64_t v1 = *((void *)v0 + 6);
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  long long v7 = v0[2];
  uint64_t v8 = v1;
  sub_23309C3D0();
  Location.hash(into:)((uint64_t)v4);
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction8LocationV2eeoiySbAC_ACtFZ_0(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  long long v5 = (void *)a1[4];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = (void *)a2[4];
  if (*a1)
  {
    if (!v6) {
      return 0;
    }
    uint64_t v27 = a2[5];
    uint64_t v28 = a2[6];
    uint64_t v29 = a1[6];
    uint64_t v30 = a1[5];
    uint64_t v26 = a2[2];
    uint64_t v11 = a1[2];
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[3];
    uint64_t v14 = a1[3];
    uint64_t v15 = a1[1];
    uint64_t v16 = (void *)a2[4];
    uint64_t v17 = (void *)a1[4];
    swift_bridgeObjectRetain();
    uint64_t v18 = swift_bridgeObjectRetain();
    char v19 = sub_232E904A8(v18, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v5 = v17;
    uint64_t v10 = v16;
    uint64_t v2 = v15;
    uint64_t v3 = v14;
    uint64_t v9 = v13;
    uint64_t v7 = v12;
    uint64_t v4 = v11;
    uint64_t v8 = v26;
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v27 = a2[5];
    uint64_t v28 = a2[6];
    uint64_t v29 = a1[6];
    uint64_t v30 = a1[5];
    if (v6) {
      return 0;
    }
  }
  if (v4 == 1)
  {
    if (v8 == 1) {
      goto LABEL_14;
    }
LABEL_11:
    sub_232E967F8(v7, v8);
    sub_232E96840(v2, v4);
    sub_232E96840(v7, v8);
    return 0;
  }
  v32[0] = v2;
  v32[1] = v4;
  id v32[2] = v3;
  if (v8 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  v31[0] = v7;
  v31[1] = v8;
  void v31[2] = v9;
  uint64_t v21 = v5;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v22 = static CodeableConcept.== infix(_:_:)(v32, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v2, v4);
  long long v5 = v21;
  if ((v22 & 1) == 0) {
    return 0;
  }
LABEL_14:
  if (v5)
  {
    uint64_t v24 = v29;
    uint64_t v23 = v30;
    uint64_t v25 = v27;
    if (!v10 || (sub_232E90100(v5, v10) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v24 = v29;
    uint64_t v23 = v30;
    uint64_t v25 = v27;
    if (v10) {
      return 0;
    }
  }
  if (!v24) {
    return !v28;
  }
  return v28 && (v23 == v25 && v24 == v28 || (sub_23309C220() & 1) != 0);
}

void sub_23304C758(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_23304BE3C();
    unint64_t v7 = a3(a1, &type metadata for Location.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23304C7BC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_23304BE90();
    sub_23304C838(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23304C838(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Identifier();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23304C87C(void *a1)
{
  a1[1] = sub_232EA4270();
  a1[2] = sub_232EBD864();
  unint64_t result = sub_23304C8B4();
  a1[3] = result;
  return result;
}

unint64_t sub_23304C8B4()
{
  unint64_t result = qword_268758940;
  if (!qword_268758940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758940);
  }
  return result;
}

unint64_t sub_23304C90C()
{
  unint64_t result = qword_268758948;
  if (!qword_268758948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758948);
  }
  return result;
}

uint64_t destroy for Location(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Location(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    *uint64_t v4 = *(_OWORD *)(a2 + 8);
    a1[3] = *(void *)(a2 + 24);
  }
  else
  {
    a1[1] = *(void *)(a2 + 8);
    a1[2] = v5;
    a1[3] = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  a1[6] = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Location(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 1);
  uint64_t v5 = (long long *)(a2 + 1);
  uint64_t v6 = a2[2];
  if (a1[2] == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      a1[3] = a2[3];
      *uint64_t v4 = v7;
    }
    else
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_232F042F8((uint64_t)(a1 + 1));
    uint64_t v8 = a2[3];
    *uint64_t v4 = *v5;
    a1[3] = v8;
  }
  else
  {
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Location(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  if (a1[2] != 1)
  {
    uint64_t v4 = a2[2];
    if (v4 != 1)
    {
      a1[1] = a2[1];
      a1[2] = v4;
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_232F042F8((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
LABEL_6:
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Location(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Location()
{
  return &type metadata for Location;
}

unsigned char *storeEnumTagSinglePayload for Location.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23304CDE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Location.CodingKeys()
{
  return &type metadata for Location.CodingKeys;
}

unint64_t sub_23304CE24()
{
  unint64_t result = qword_268758950;
  if (!qword_268758950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758950);
  }
  return result;
}

unint64_t sub_23304CE7C()
{
  unint64_t result = qword_268758958;
  if (!qword_268758958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758958);
  }
  return result;
}

unint64_t sub_23304CED4()
{
  unint64_t result = qword_268758960;
  if (!qword_268758960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758960);
  }
  return result;
}

uint64_t sub_23304CF28()
{
  unint64_t v0 = sub_23309C010();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

void static FHIRDateTime.distantFuture()(uint64_t a1@<X8>)
{
}

void FHIRDateTime.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v35 = type metadata accessor for FHIRDateTime();
  MEMORY[0x270FA5388](v35);
  int v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  long long v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v25 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v25 - v11;
  id v13 = objc_allocWithZone(MEMORY[0x263F08B08]);
  uint64_t v14 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithString_, v14);

  uint64_t v16 = static FHIRDateTime.parse(from:expectAtEnd:)(&v38, (unint64_t *)v36, (uint64_t)v10, v15, 1);
  if (v1)
  {
  }
  else
  {
    uint64_t v18 = v16;
    uint64_t v33 = v38;
    uint64_t v34 = v17;
    int v31 = v40;
    int v32 = v39;
    int v29 = v42;
    int v30 = v41;
    long long v27 = v36[1];
    long long v28 = v36[0];
    uint64_t v26 = v37;
    char v19 = (void (*)(uint64_t))MEMORY[0x263F079C8];
    sub_23305003C((uint64_t)v10, (uint64_t)v12, &qword_268756590, MEMORY[0x263F079C8]);
    sub_2330500A8((uint64_t)v12, (uint64_t)v7, &qword_268756590, v19);
    *int v3 = 1;
    uint64_t v20 = v35;
    uint64_t v21 = (uint64_t)&v3[*(int *)(v35 + 28)];
    uint64_t v22 = sub_23309B300();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
    *((void *)v3 + 1) = v33;
    v3[16] = v32;
    v3[17] = v31;
    v3[18] = v30;
    v3[19] = v29;
    *(_OWORD *)(v3 + 24) = v28;
    *(_OWORD *)(v3 + 40) = v27;
    *((void *)v3 + 7) = v26;
    sub_23304FF54((uint64_t)v7, v21);
    uint64_t v23 = &v3[*(int *)(v20 + 32)];
    uint64_t v24 = v34;
    *(void *)uint64_t v23 = v18;
    *((void *)v23 + 1) = v24;
    sub_2330007B4((uint64_t)v3, v43);

    sub_233050114((uint64_t)v12, &qword_268756590, v19);
  }
}

void FHIRDateTime.date.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 17);
  char v4 = *(unsigned char *)(v1 + 18);
  char v5 = *(unsigned char *)(v1 + 19);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(unsigned char *)(a1 + 11) = v5;
}

uint64_t FHIRDateTime.date.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  char v4 = *(unsigned char *)(result + 10);
  char v5 = *(unsigned char *)(result + 11);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 17) = v3;
  *(unsigned char *)(v1 + 18) = v4;
  *(unsigned char *)(v1 + 19) = v5;
  return result;
}

uint64_t (*FHIRDateTime.date.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDateTime.time.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_23304FFD4(v2, v3, v4, v5, v6);
}

__n128 FHIRDateTime.time.setter(long long *a1)
{
  __n128 v4 = (__n128)a1[1];
  long long v5 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  sub_232E9AAA4(v1[3], v1[4], v1[5], v1[6], v1[7]);
  *(_OWORD *)(v1 + 3) = v5;
  __n128 result = v4;
  *(__n128 *)(v1 + 5) = v4;
  v1[7] = v2;
  return result;
}

uint64_t (*FHIRDateTime.time.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDateTime.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FHIRDateTime();
  return sub_2330500A8(v1 + *(int *)(v3 + 28), a1, &qword_268756590, MEMORY[0x263F079C8]);
}

uint64_t sub_23304D408(uint64_t a1, unsigned char *a2)
{
  __n128 v4 = (void (*)(uint64_t))MEMORY[0x263F079C8];
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v5 - 8);
  long long v7 = (char *)&v10 - v6;
  sub_2330500A8(a1, (uint64_t)&v10 - v6, &qword_268756590, v4);
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  uint64_t result = sub_23304FF54((uint64_t)v7, (uint64_t)&a2[*(int *)(v8 + 28)]);
  *a2 = 0;
  return result;
}

uint64_t FHIRDateTime.timeZone.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FHIRDateTime();
  uint64_t result = sub_23304FF54(a1, (uint64_t)&v1[*(int *)(v3 + 28)]);
  *uint64_t v1 = 0;
  return result;
}

unsigned char **(*FHIRDateTime.timeZone.modify(void *a1))(unsigned char **result, char a2)
{
  *a1 = v1;
  type metadata accessor for FHIRDateTime();
  return sub_23304D55C;
}

unsigned char **sub_23304D55C(unsigned char **result, char a2)
{
  if ((a2 & 1) == 0) {
    **uint64_t result = 0;
  }
  return result;
}

uint64_t FHIRDateTime.originalTimeZoneString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FHIRDateTime() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRDateTime.init(date:time:timezone:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v7 = type metadata accessor for FHIRDateTime();
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void (*)(uint64_t))MEMORY[0x263F079C8];
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *a1;
  char v16 = *((unsigned char *)a1 + 8);
  char v17 = *((unsigned char *)a1 + 9);
  int v27 = *((unsigned __int8 *)a1 + 10);
  LOBYTE(a1) = *((unsigned char *)a1 + 11);
  long long v18 = *a2;
  long long v25 = a2[1];
  long long v26 = v18;
  uint64_t v24 = *((void *)a2 + 4);
  sub_2330500A8(a3, (uint64_t)&v23 - v13, &qword_268756590, v11);
  *uint64_t v10 = 1;
  uint64_t v19 = (uint64_t)&v10[*(int *)(v8 + 36)];
  uint64_t v20 = sub_23309B300();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *((void *)v10 + 1) = v15;
  unsigned char v10[16] = v16;
  v10[17] = v17;
  v10[18] = v27;
  v10[19] = (char)a1;
  *(_OWORD *)(v10 + 24) = v26;
  *(_OWORD *)(v10 + 40) = v25;
  *((void *)v10 + 7) = v24;
  sub_23304FF54((uint64_t)v14, v19);
  uint64_t v21 = &v10[*(int *)(v8 + 40)];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  sub_2330007B4((uint64_t)v10, v28);
  return sub_233050114(a3, &qword_268756590, v11);
}

char *static FHIRDateTime.parse(from:expectAtEnd:)(uint64_t *a1, unint64_t *a2, uint64_t a3, void *a4, int a5)
{
  int v101 = a5;
  uint64_t v100 = a3;
  uint64_t v97 = a1;
  uint64_t v98 = a2;
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v115 = (uint64_t)&v77 - v11;
  sub_23304FFE8(0, &qword_268757310, MEMORY[0x263F06278]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v99 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v96 = (char *)&v77 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v77 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v77 - v23;
  MEMORY[0x270FA5388](v22);
  long long v26 = (char *)&v77 - v25;
  id v27 = objc_msgSend(a4, sel_charactersToBeSkipped);
  if (v27)
  {
    uint64_t v28 = v27;
    sub_23309ABF0();

    uint64_t v29 = sub_23309AC20();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v24, 0, 1, v29);
  }
  else
  {
    uint64_t v30 = sub_23309AC20();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v24, 1, 1, v30);
  }
  sub_23305003C((uint64_t)v24, (uint64_t)v26, &qword_268757310, MEMORY[0x263F06278]);
  objc_msgSend(a4, sel_setCharactersToBeSkipped_, 0);
  uint64_t v31 = sub_232F48C70(a4, 0);
  if (v5)
  {
    sub_2330500A8((uint64_t)v26, (uint64_t)v21, &qword_268757310, MEMORY[0x263F06278]);
    uint64_t v33 = sub_23309AC20();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v21, 1, v33) == 1)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = (void *)sub_23309ABD0();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v33);
    }
    uint64_t v44 = &selRef_setMedicalRecordMetadata_;
    goto LABEL_23;
  }
  uint64_t v95 = v31;
  if (v32 > 0xCu) {
    int v36 = 1;
  }
  else {
    int v36 = (v32 >> 8) & 1;
  }
  if (BYTE2(v32) > 0x1Fu) {
    unsigned int v37 = 1;
  }
  else {
    unsigned int v37 = v36 | ((v32 & 0x1000000) >> 24);
  }
  if (v37) {
    unsigned int v38 = 0;
  }
  else {
    unsigned int v38 = HIWORD(v32);
  }
  if (v36) {
    unsigned int v39 = 0;
  }
  else {
    unsigned int v39 = v32;
  }
  unsigned int v93 = v39;
  unsigned int v94 = v38;
  uint64_t v40 = sub_23309B300();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v115, 1, 1, v40);
  sub_23309BCB0();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  if (v42)
  {
    uint64_t v43 = sub_233065868(a4, 0, &v102);
    id v83 = v10;
    int v84 = v36;
    unint64_t v89 = v104;
    unint64_t v88 = v105;
    unint64_t v87 = v106;
    unint64_t v86 = v107;
    unint64_t v85 = v108;
    unint64_t v57 = v109;
    unint64_t v58 = v110;
    unsigned int v59 = v111;
    uint64_t v60 = v112;
    uint64_t v91 = v113;
    unint64_t v92 = v114;
    if (v102 >= 0x17u) {
      uint64_t v61 = 23;
    }
    else {
      uint64_t v61 = v102;
    }
    uint64_t v78 = v61;
    if (v103 >= 0x3Bu) {
      uint64_t v62 = 59;
    }
    else {
      uint64_t v62 = v103;
    }
    uint64_t v77 = v62;
    MEMORY[0x237DB5C80](v43, 60.0);
    unint64_t v81 = v57;
    unint64_t v80 = v58;
    uint64_t v82 = v60;
    char v63 = sub_23309BC70();
    unsigned int v90 = v37;
    if (v63)
    {
      unint64_t v89 = MEMORY[0x237DB5C80](60.0);
      unsigned int v79 = v64;
      uint64_t v82 = HIWORD(v64);
      unint64_t v87 = HIWORD(v89);
      unint64_t v88 = HIDWORD(v89);
      unint64_t v85 = v65 >> 16;
      unint64_t v86 = v65;
      unint64_t v81 = HIDWORD(v65);
      unint64_t v80 = HIWORD(v65);
    }
    else
    {
      unsigned int v79 = v59;
    }
    uint64_t v66 = (uint64_t)v83;
    sub_233009918(a4);
    LOBYTE(v36) = v84;
    uint64_t v21 = v74;
    sub_23309B2C0();
    uint64_t v75 = (void (*)(uint64_t))MEMORY[0x263F079C8];
    uint64_t v76 = v115;
    sub_233050114(v115, &qword_268756590, MEMORY[0x263F079C8]);
    sub_23305003C(v66, v76, &qword_268756590, v75);
    unint64_t v89 = ((unint64_t)v77 << 16) | (v78 << 8) | (v89 << 32) | 1;
    unint64_t v46 = (unsigned __int16)v88 | ((unint64_t)v87 << 16) | ((unint64_t)(unsigned __int16)v86 << 32) | (v85 << 48);
    unint64_t v47 = (unsigned __int16)v81 | ((unint64_t)v80 << 16) | ((unint64_t)(unsigned __int16)v79 << 32) | (v82 << 48);
  }
  else
  {
    uint64_t v91 = 0;
    unint64_t v92 = 1;
    unsigned int v90 = v37;
    uint64_t v21 = 0;
    unint64_t v89 = 0;
    unint64_t v46 = 0;
    unint64_t v47 = 0;
  }
  uint64_t v48 = sub_23309BCC0();
  if (v101)
  {
    uint64_t v49 = v48;
    if ((objc_msgSend(a4, sel_isAtEnd) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_232E9AAA4(v89, v46, v47, v91, v92);
      id v67 = objc_msgSend(a4, sel_string);
      uint64_t v68 = sub_23309B710();
      uint64_t v70 = v69;

      sub_232F49A80();
      swift_allocError();
      *(void *)uint64_t v71 = v68;
      *(void *)(v71 + 8) = v70;
      *(void *)(v71 + 16) = v49;
      *(unsigned char *)(v71 + 24) = 10;
      swift_willThrow();
      sub_233050114(v115, &qword_268756590, MEMORY[0x263F079C8]);
      uint64_t v21 = v96;
      sub_2330500A8((uint64_t)v26, (uint64_t)v96, &qword_268757310, MEMORY[0x263F06278]);
      uint64_t v72 = sub_23309AC20();
      uint64_t v73 = *(void *)(v72 - 8);
      uint64_t v44 = &selRef_setMedicalRecordMetadata_;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v21, 1, v72) == 1)
      {
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v35 = (void *)sub_23309ABD0();
        (*(void (**)(char *, uint64_t))(v73 + 8))(v21, v72);
      }
LABEL_23:
      objc_msgSend(a4, v44[120], v35);

      sub_233050114((uint64_t)v26, &qword_268757310, MEMORY[0x263F06278]);
      return v21;
    }
  }
  uint64_t v50 = v97;
  *uint64_t v97 = v95;
  *((unsigned char *)v50 + 8) = v93;
  *((unsigned char *)v50 + 9) = v36;
  *((unsigned char *)v50 + 10) = v94;
  *((unsigned char *)v50 + 11) = v90;
  uint64_t v51 = v98;
  *uint64_t v98 = v89;
  v51[1] = v46;
  uint64_t v52 = v91;
  v51[2] = v47;
  v51[3] = v52;
  v51[4] = v92;
  sub_23305003C(v115, v100, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v53 = v99;
  sub_2330500A8((uint64_t)v26, v99, &qword_268757310, MEMORY[0x263F06278]);
  uint64_t v54 = sub_23309AC20();
  uint64_t v55 = *(void *)(v54 - 8);
  long long v56 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) != 1)
  {
    long long v56 = (void *)sub_23309ABD0();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
  }
  objc_msgSend(a4, sel_setCharactersToBeSkipped_, v56);

  sub_233050114((uint64_t)v26, &qword_268757310, MEMORY[0x263F06278]);
  return v21;
}

void static FHIRDateTime.distantPast()(uint64_t a1@<X8>)
{
}

void sub_23304E35C(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_23309B120();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309B190();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v10);
  sub_23304E504((uint64_t)v7);
  sub_23309B0A0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  FHIRDateTime.init(_:)(a2);
}

uint64_t sub_23304E504@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v29 = (char *)&v24 - v2;
  uint64_t v28 = sub_23309B300();
  uint64_t v3 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_23309B110();
  uint64_t v5 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309B0F0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23309B0D0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_23309B0E0();
  MEMORY[0x270FA5388](v16);
  (*(void (**)(char *, void))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x263F072A0]);
  uint64_t v19 = v12;
  uint64_t v20 = v28;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F07288], v19);
  uint64_t v21 = v7;
  uint64_t v22 = v29;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F072B8], v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v21, *MEMORY[0x263F072C8], v27);
  sub_23309B2C0();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v22, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v25, v22, v20);
    return sub_23309B100();
  }
  return result;
}

uint64_t FHIRDateTime.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309B300();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v23 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v18 - v6;
  sub_23309C3F0();
  char v8 = *(unsigned char *)(v0 + 17);
  char v9 = *(unsigned char *)(v0 + 19);
  sub_23309C3E0();
  if ((v8 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v9 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  uint64_t v10 = *(void *)(v0 + 56);
  if (v10 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v21 = v3;
    uint64_t v22 = v2;
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v12 = *(void *)(v0 + 32);
    unint64_t v13 = *(void *)(v0 + 40);
    uint64_t v19 = *(void *)(v0 + 48);
    unint64_t v20 = HIDWORD(v13);
    sub_23309C3F0();
    sub_23309C3F0();
    sub_23309C3F0();
    sub_23309C3F0();
    sub_23309BC90();
    sub_23309C3F0();
    if (v10)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = v19;
      sub_23309B800();
      sub_232E9AAA4(v11, v12, v13, v14, v10);
    }
    uint64_t v3 = v21;
    uint64_t v2 = v22;
  }
  uint64_t v15 = type metadata accessor for FHIRDateTime();
  sub_2330500A8(v1 + *(int *)(v15 + 28), (uint64_t)v7, &qword_268756590, MEMORY[0x263F079C8]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v16 = v23;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v23, v7, v2);
    sub_23309C3F0();
    sub_2330511E4(&qword_268756598, MEMORY[0x263F079C8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v2);
  }
  if (!*(void *)(v1 + *(int *)(v15 + 32) + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t FHIRDateTime.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t sub_23304ED00()
{
  return sub_23309C420();
}

uint64_t sub_23304ED44()
{
  return sub_23309C420();
}

void FHIRDateTime.init(stringLiteral:)(uint64_t a1@<X8>)
{
}

void sub_23304EDD4(uint64_t a1@<X8>)
{
}

uint64_t FHIRDateTime.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C450();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    sub_23309C230();
    FHIRDateTime.init(_:)((uint64_t)v7);
    sub_2330007B4((uint64_t)v7, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRDateTime.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRDateTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t FHIRDateTime.description.getter()
{
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v42 - v2;
  uint64_t v4 = sub_23309B300();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + 56);
  if (v8 == 1) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(v0 + 32);
  unint64_t v53 = *(void *)(v0 + 24);
  unint64_t v11 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  sub_2330500A8(v0 + *(int *)(v12 + 28), (uint64_t)v3, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v52 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_233050114((uint64_t)v3, &qword_268756590, MEMORY[0x263F079C8]);
LABEL_4:
    char v13 = *(unsigned char *)(v0 + 16);
    char v14 = *(unsigned char *)(v0 + 17);
    char v15 = *(unsigned char *)(v0 + 18);
    char v16 = *(unsigned char *)(v0 + 19);
    uint64_t v54 = *(void *)(v0 + 8);
    LOBYTE(v55) = v13;
    HIBYTE(v55) = v14;
    LOBYTE(v56) = v15;
    HIBYTE(v56) = v16;
    return FHIRDate.description.getter();
  }
  unint64_t v50 = v53 & 1;
  uint64_t v51 = v10;
  unint64_t v18 = HIDWORD(v53);
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v7, v3, v4);
  if (*(unsigned char *)v0 == 1 && (v19 = (unint64_t *)(v0 + *(int *)(v12 + 32)), (unint64_t v20 = v19[1]) != 0))
  {
    unint64_t v49 = *v19;
    unint64_t v46 = HIDWORD(v11);
    unint64_t v47 = HIWORD(v11);
    unint64_t v44 = HIWORD(v9);
    unint64_t v45 = v11 >> 16;
    unint64_t v43 = HIDWORD(v9);
    uint64_t v21 = *(void *)(v0 + 8);
    char v22 = *(unsigned char *)(v0 + 16);
    char v23 = *(unsigned char *)(v0 + 17);
    char v24 = *(unsigned char *)(v0 + 18);
    char v25 = *(unsigned char *)(v0 + 19);
    unint64_t v42 = v9 >> 16;
    uint64_t v54 = v21;
    int v26 = v18;
    uint64_t v27 = v53;
    unint64_t v28 = v53 >> 16;
    LOBYTE(v55) = v22;
    unint64_t v29 = v53 >> 8;
    HIBYTE(v55) = v23;
    LOBYTE(v56) = v24;
    HIBYTE(v56) = v25;
    unint64_t v48 = v20;
    swift_bridgeObjectRetain();
    uint64_t v65 = FHIRDate.description.getter();
    uint64_t v66 = v30;
    sub_23309B880();
    LOBYTE(v54) = v50;
    BYTE1(v54) = v29;
    BYTE2(v54) = v28;
    HIDWORD(v54) = v26;
    __int16 v55 = v9;
    __int16 v56 = v42;
    __int16 v57 = v43;
    __int16 v58 = v44;
    __int16 v59 = v11;
    __int16 v60 = v45;
    __int16 v61 = v46;
    __int16 v62 = v47;
    uint64_t v31 = v51;
    uint64_t v63 = v51;
    uint64_t v64 = v8;
    FHIRTime.description.getter();
    sub_232E9AAA4(v27, v9, v11, v31, v8);
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
  }
  else
  {
    unint64_t v48 = HIDWORD(v11);
    unint64_t v49 = HIWORD(v11);
    unint64_t v46 = HIWORD(v9);
    unint64_t v47 = v11 >> 16;
    char v32 = *(unsigned char *)(v0 + 16);
    char v33 = *(unsigned char *)(v0 + 17);
    char v34 = *(unsigned char *)(v0 + 18);
    char v35 = *(unsigned char *)(v0 + 19);
    uint64_t v54 = *(void *)(v0 + 8);
    unint64_t v44 = v9 >> 16;
    unint64_t v45 = HIDWORD(v9);
    LOBYTE(v55) = v32;
    uint64_t v36 = v53;
    unint64_t v37 = v53 >> 16;
    HIBYTE(v55) = v33;
    unint64_t v38 = v53 >> 8;
    LOBYTE(v56) = v34;
    HIBYTE(v56) = v35;
    swift_bridgeObjectRetain();
    uint64_t v65 = FHIRDate.description.getter();
    uint64_t v66 = v39;
    sub_23309B880();
    LOBYTE(v54) = v50;
    BYTE1(v54) = v38;
    BYTE2(v54) = v37;
    HIDWORD(v54) = v18;
    __int16 v55 = v9;
    __int16 v56 = v44;
    __int16 v57 = v45;
    __int16 v58 = v46;
    __int16 v59 = v11;
    __int16 v60 = v47;
    __int16 v61 = v48;
    __int16 v62 = v49;
    uint64_t v40 = v51;
    uint64_t v63 = v51;
    uint64_t v64 = v8;
    FHIRTime.description.getter();
    sub_232E9AAA4(v36, v9, v11, v40, v8);
    sub_23309B880();
    swift_bridgeObjectRelease();
    TimeZone.fhirDescription.getter();
    sub_23309B880();
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v65;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v4);
  return v17;
}

uint64_t sub_23304F4BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRDateTime.init(from:)(a1, a2);
}

uint64_t sub_23304F4D4(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRDateTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

BOOL sub_23304F598()
{
  return !_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL sub_23304F5C4()
{
  return !_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL sub_23304F5E4()
{
  return _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
}

BOOL _s23HealthRecordsExtraction12FHIRDateTimeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309B300();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233051108();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  char v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  unint64_t v18 = (char *)&v64 - v17;
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v64 - v19;
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  char v21 = *(unsigned char *)(a2 + 17);
  if (*(unsigned char *)(a1 + 17))
  {
    if (!*(unsigned char *)(a2 + 17)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      char v21 = 1;
    }
    if (v21) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 19))
  {
    if (!*(unsigned char *)(a2 + 19)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)) {
      char v22 = *(unsigned char *)(a2 + 19);
    }
    else {
      char v22 = 1;
    }
    if (v22) {
      return 0;
    }
  }
  uint64_t v71 = v5;
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 32);
  unint64_t v25 = *(void *)(a1 + 40);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v28 = *(void *)(a2 + 24);
  uint64_t v27 = *(void *)(a2 + 32);
  unint64_t v30 = *(void *)(a2 + 40);
  uint64_t v29 = *(void *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 56);
  uint64_t v75 = *(void *)(a1 + 48);
  if (v26 == 1)
  {
    uint64_t v70 = v24;
    uint64_t v72 = v23;
    unint64_t v73 = v25;
    uint64_t v74 = 1;
    if (v31 == 1) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  if (v31 == 1)
  {
    uint64_t v70 = v24;
    uint64_t v72 = v23;
    unint64_t v73 = v25;
    uint64_t v74 = v26;
    uint64_t v39 = v27;
    unint64_t v40 = v30;
    uint64_t v41 = v28;
    uint64_t v42 = v29;
    swift_bridgeObjectRetain();
    uint64_t v29 = v42;
    uint64_t v28 = v41;
    unint64_t v30 = v40;
    uint64_t v27 = v39;
LABEL_22:
    uint64_t v43 = v27;
    unint64_t v44 = v30;
    uint64_t v45 = v29;
    uint64_t v46 = v28;
    sub_23304FFD4(v28, v27, v30, v29, v31);
    sub_232E9AAA4(v70, v72, v73, v75, v74);
    uint64_t v47 = v46;
    uint64_t v48 = v43;
    uint64_t v49 = v44;
    uint64_t v50 = v45;
    uint64_t v51 = v31;
LABEL_27:
    sub_232E9AAA4(v47, v48, v49, v50, v51);
    return 0;
  }
  uint64_t v52 = v24;
  if (__PAIR64__(*(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 25)) != __PAIR64__(BYTE2(v28), BYTE1(v28)))
  {
    uint64_t v56 = v23;
    uint64_t v57 = v26;
    unint64_t v58 = v25;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    uint64_t v47 = v52;
    uint64_t v48 = v56;
    uint64_t v49 = v58;
    uint64_t v50 = v75;
    uint64_t v51 = v57;
    goto LABEL_27;
  }
  unint64_t v53 = *(unsigned int *)(a1 + 27) | ((unint64_t)*(unsigned __int8 *)(a1 + 31) << 32);
  unint64_t v69 = HIDWORD(v25);
  uint64_t v70 = HIDWORD(v30);
  *((void *)&v54 + 1) = v25;
  *(void *)&long long v54 = v23;
  uint64_t v65 = v54 >> 32;
  unint64_t v66 = (v53 >> 8) | (unint64_t)(v23 << 32);
  *((void *)&v54 + 1) = v27;
  *(void *)&long long v54 = v28;
  uint64_t v55 = v54 >> 32;
  *((void *)&v54 + 1) = v30;
  *(void *)&long long v54 = v27;
  uint64_t v67 = v54 >> 32;
  uint64_t v68 = v55;
  uint64_t v72 = v23;
  unint64_t v73 = v25;
  uint64_t v74 = v26;
  swift_bridgeObjectRetain_n();
  LODWORD(v70) = MEMORY[0x237DB5CC0](v66, v65, v69, v68, v67, v70);
  swift_bridgeObjectRelease();
  sub_232E9AAA4(v52, v72, v73, v75, v74);
  if ((v70 & 1) == 0) {
    return 0;
  }
LABEL_17:
  uint64_t v32 = type metadata accessor for FHIRDateTime();
  uint64_t v33 = a1 + *(int *)(v32 + 28);
  char v34 = (void (*)(uint64_t))MEMORY[0x263F079C8];
  sub_2330500A8(v33, (uint64_t)v20, &qword_268756590, MEMORY[0x263F079C8]);
  sub_2330500A8(a2 + *(int *)(v32 + 28), (uint64_t)v18, &qword_268756590, v34);
  uint64_t v35 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_2330500A8((uint64_t)v20, (uint64_t)v11, &qword_268756590, v34);
  sub_2330500A8((uint64_t)v18, v35, &qword_268756590, v34);
  uint64_t v36 = v71;
  unint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (v37((uint64_t)v11, 1, v4) != 1)
  {
    sub_2330500A8((uint64_t)v11, (uint64_t)v15, &qword_268756590, MEMORY[0x263F079C8]);
    if (v37(v35, 1, v4) == 1)
    {
      __int16 v60 = (void (*)(uint64_t))MEMORY[0x263F079C8];
      sub_233050114((uint64_t)v18, &qword_268756590, MEMORY[0x263F079C8]);
      sub_233050114((uint64_t)v20, &qword_268756590, v60);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v4);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v7, v35, v4);
    sub_2330511E4(&qword_268758998, MEMORY[0x263F079C8]);
    char v61 = sub_23309B6D0();
    __int16 v62 = *(void (**)(char *, uint64_t))(v36 + 8);
    v62(v7, v4);
    uint64_t v63 = (void (*)(uint64_t))MEMORY[0x263F079C8];
    sub_233050114((uint64_t)v18, &qword_268756590, MEMORY[0x263F079C8]);
    sub_233050114((uint64_t)v20, &qword_268756590, v63);
    v62(v15, v4);
    sub_233050114((uint64_t)v11, &qword_268756590, v63);
    return (v61 & 1) != 0;
  }
  unint64_t v38 = (void (*)(uint64_t))MEMORY[0x263F079C8];
  sub_233050114((uint64_t)v18, &qword_268756590, MEMORY[0x263F079C8]);
  sub_233050114((uint64_t)v20, &qword_268756590, v38);
  if (v37(v35, 1, v4) != 1)
  {
LABEL_31:
    sub_233051188((uint64_t)v11);
    return 0;
  }
  sub_233050114((uint64_t)v11, &qword_268756590, MEMORY[0x263F079C8]);
  return 1;
}

BOOL _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0()
{
  uint64_t v0 = sub_23309B190();
  uint64_t v1 = *(void (***)(char *, uint64_t))(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v10 - v5;
  FHIRDateTime.asNSDate()((uint64_t)&v10 - v5);
  FHIRDateTime.asNSDate()((uint64_t)v4);
  ++v1;
  uint64_t v7 = sub_23309B170();
  uint64_t v8 = *v1;
  (*v1)(v4, v0);
  v8(v6, v0);
  return v7 == -1;
}

uint64_t type metadata accessor for FHIRDateTime()
{
  uint64_t result = qword_268758980;
  if (!qword_268758980) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23304FF54(uint64_t a1, uint64_t a2)
{
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23304FFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_23304FFE8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_23305003C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23304FFE8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_2330500A8(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23304FFE8(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_233050114(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_23304FFE8(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_233050170()
{
  return sub_2330511E4(&qword_268758968, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t sub_2330501B8()
{
  return sub_2330511E4(&qword_268758970, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t sub_233050200()
{
  return sub_2330511E4(&qword_268758978, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t sub_233050248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  return sub_2330500A8(a1 + *(int *)(v4 + 28), a2, &qword_268756590, MEMORY[0x263F079C8]);
}

uint64_t initializeBufferWithCopyOfBuffer for FHIRDateTime(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v7 = a2[7];
    if (v7 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v4 + 40) = v8;
      *(void *)(v4 + 56) = a2[7];
    }
    else
    {
      *(unsigned char *)(v4 + 24) = *((unsigned char *)a2 + 24);
      *(_WORD *)(v4 + 25) = *(_WORD *)((char *)a2 + 25);
      *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a2 + 28);
      *(_DWORD *)(v4 + 44) = *((_DWORD *)a2 + 11);
      *(void *)(v4 + 48) = a2[6];
      *(void *)(v4 + 56) = v7;
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = *(int *)(a3 + 28);
    unint64_t v11 = (void *)(v4 + v10);
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_23309B300();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v16 = *(int *)(a3 + 32);
    uint64_t v17 = (void *)(v4 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FHIRDateTime(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 56) != 1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_23309B300();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 56);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = sub_23309B300();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  uint64_t v6 = a1 + 24;
  long long v7 = (long long *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) == 1)
  {
    if (v8 == 1)
    {
      long long v9 = *v7;
      long long v10 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)uint64_t v6 = v9;
      *(_OWORD *)(a1 + 40) = v10;
    }
    else
    {
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
      *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
      long long v13 = *(_OWORD *)(a2 + 28);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_OWORD *)(a1 + 28) = v13;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_232F0434C(a1 + 24);
    uint64_t v11 = *((void *)v7 + 4);
    long long v12 = v7[1];
    *(_OWORD *)uint64_t v6 = *v7;
    *(_OWORD *)(v6 + 16) = v12;
    *(void *)(v6 + 32) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
    *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
    *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    *(_WORD *)(a1 + 46) = *(_WORD *)(a2 + 46);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = sub_23309B300();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_13;
  }
  if (v21)
  {
LABEL_13:
    sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_14:
  uint64_t v23 = *(int *)(a3 + 32);
  uint64_t v24 = (void *)(a1 + v23);
  unint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  long long v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v10 = sub_23309B300();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = a1 + 24;
  uint64_t v7 = a2 + 24;
  if (*(void *)(a1 + 56) == 1) {
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  if (v8 == 1)
  {
    sub_232F0434C(v6);
LABEL_4:
    long long v9 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v9;
    *(void *)(v6 + 32) = *(void *)(v7 + 32);
    goto LABEL_6;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = sub_23309B300();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_12:
  uint64_t v19 = *(int *)(a3 + 32);
  int v20 = (void *)(a1 + v19);
  int v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *int v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233050E54);
}

uint64_t sub_233050E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FHIRDateTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_233050F58);
}

void sub_233050F58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_23304FFE8(0, &qword_268756590, MEMORY[0x263F079C8]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 28);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  }
}

void sub_233051038()
{
  sub_23304FFE8(319, &qword_268756590, MEMORY[0x263F079C8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_233051108()
{
  if (!qword_268758990)
  {
    sub_23304FFE8(255, &qword_268756590, MEMORY[0x263F079C8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268758990);
    }
  }
}

uint64_t sub_233051188(uint64_t a1)
{
  sub_233051108();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2330511E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_23305122C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  uint64_t v58 = a7;
  uint64_t v74 = a6;
  sub_2330518A4((uint64_t)a13, (uint64_t)v75);
  id v56 = (id)v75[0];
  uint64_t v57 = v75[2];
  id v62 = (id)v75[4];
  uint64_t v55 = v75[6];
  sub_232F69858();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3A800(0, &qword_268757D30);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_conditionRecordTypeForIdentifier_, *MEMORY[0x263F094B0], v55);
  if (result)
  {
    id v25 = result;
    if (a4)
    {
      uint64_t v61 = sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v61 = 0;
    }
    sub_2330518A4((uint64_t)a13, (uint64_t)v82);
    id v71 = a5;
    uint64_t v70 = v25;
    uint64_t v69 = v15;
    if (v82[0])
    {
      if (v82[1] == 0xD000000000000010 && v82[2] == 0x80000002330B5A90) {
        int v60 = 1;
      }
      else {
        int v60 = sub_23309C220();
      }
    }
    else
    {
      int v60 = 0;
    }
    uint64_t v26 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
    uint64_t v27 = type metadata accessor for ExtractionContext();
    uint64_t v68 = (char *)v26 + *(int *)(v27 + 28);
    uint64_t v67 = sub_23309B130();
    uint64_t v66 = *a1;
    sub_232F698B0(a2, (uint64_t)v23);
    uint64_t v28 = sub_23309B230();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v23, 1, v28) != 1)
    {
      uint64_t v30 = sub_23309B210();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v28);
    }
    uint64_t v65 = (void *)v30;
    uint64_t v31 = *v26;
    id v32 = objc_msgSend(self, sel_localDevice);
    uint64_t v33 = *(uint64_t *)((char *)v26 + *(int *)(v27 + 40));
    id v64 = v32;
    uint64_t v63 = v31;
    if (v33)
    {
      uint64_t v34 = swift_bridgeObjectRetain();
      sub_233020734(v34);
      swift_bridgeObjectRelease();
      uint64_t v59 = sub_23309B640();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v59 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v35 = v26[1];
    sub_232F3A800(0, &qword_2687586C8);
    uint64_t v36 = sub_23309B990();
    swift_bridgeObjectRelease();
    if (a8)
    {
      uint64_t v58 = sub_23309B6E0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v58 = 0;
    }
    sub_2330518A4((uint64_t)a13, (uint64_t)v76);
    unint64_t v73 = a1;
    uint64_t v72 = a2;
    if (*(void *)&v76[0])
    {
      long long v78 = v76[0];
      long long v79 = v76[1];
      long long v80 = v76[2];
      uint64_t v81 = v77;
      swift_bridgeObjectRetain();
      id v37 = v56;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v38 = sub_233042B90();
      sub_233051960(a13);
    }
    else
    {
      id v38 = 0;
    }
    if (a15)
    {
      uint64_t v39 = (void *)sub_23309B990();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v39 = 0;
    }
    id v62 = v39;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    long long v54 = v39;
    uint64_t v41 = (void *)v58;
    uint64_t v53 = v36;
    uint64_t v52 = (v35 >> 2) & 1;
    uint64_t v42 = (void *)v36;
    uint64_t v43 = (void *)v74;
    unint64_t v44 = (void *)v59;
    uint64_t v45 = v64;
    uint64_t v46 = v70;
    uint64_t v47 = (void *)v61;
    uint64_t v48 = (void *)v67;
    uint64_t v49 = v65;
    id v71 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_conditionRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_conditionCodingCollection_categoriesCodingCollections_asserter_abatement_onset_recordedDate_clinicalStatusCoding_verificationStatusCoding_severityCodingCollection_bodySitesCodingCollections_, v70, v61, v60 & 1, v67, v66, v65, v63, v64, v59, v74, v52, v71, v53, v58, a9, a10,
              a11,
              a12,
              v38,
              a14,
              v54));

    id v50 = v71;
    uint64_t v51 = (void *)sub_23309B130();
    objc_msgSend(v50, sel_setCreationDate_, v51);

    sub_232F69914(v72, (uint64_t (*)(void))sub_232F69858);
    sub_232F69914((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    return v50;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2330518A4(uint64_t a1, uint64_t a2)
{
  sub_233051908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_233051908()
{
  if (!qword_2687589A0)
  {
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687589A0);
    }
  }
}

void **sub_233051960(void **a1)
{
  return a1;
}

uint64_t sub_233051998@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v33 = a1;
  unint64_t v34 = a2;
  id v32 = a7;
  uint64_t v12 = sub_23309B560();
  uint64_t v30 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_23309B530();
  uint64_t v31 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v39 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a3;
  unint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v17 = type metadata accessor for VCJWT();
  uint64_t result = VCJWT.signatureMessage()();
  if (!v7)
  {
    uint64_t v20 = result;
    unint64_t v21 = v19;
    uint64_t v22 = v32;
    uint64_t v28 = v12;
    uint64_t v29 = v15;
    uint64_t v35 = v33;
    unint64_t v36 = v34;
    sub_232E9A9F4(v33, v34);
    uint64_t v23 = v39;
    sub_23309B510();
    uint64_t v35 = v20;
    unint64_t v36 = v21;
    sub_232F639B8();
    sub_23309B520();
    uint64_t v24 = sub_23309B540();
    unint64_t v34 = v21;
    unint64_t v26 = v25;
    VCJWT.assigningSignature(_:)(v24, v17, v22);
    sub_232E9AA4C(v24, v26);
    sub_232E9AA4C(v20, v34);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v23, v29);
  }
  return result;
}

uint64_t Extension.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Extension.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Extension();
  return sub_233051DF0(v1 + *(int *)(v3 + 20), a1, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
}

uint64_t type metadata accessor for Extension()
{
  uint64_t result = qword_2687589D0;
  if (!qword_2687589D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Extension.valueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Extension() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Extension.valueDecimal.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Extension() + 28));
}

uint64_t Extension.valueCode.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Extension() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Extension.valueCoding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Extension();
  return sub_233051DF0(v1 + *(int *)(v3 + 36), a1, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
}

uint64_t sub_233051DF0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_233056788(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t Extension.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Extension() + 40));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t Extension.valueAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Extension();
  return sub_233051DF0(v1 + *(int *)(v3 + 44), a1, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t Extension.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = type metadata accessor for Attachment();
  uint64_t v4 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v27 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v6);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *v2;
  if (*v2)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E96B88(a1, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v18 = (int *)type metadata accessor for Extension();
  sub_233051DF0((uint64_t)v2 + v18[5], (uint64_t)v16, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23309C3F0();
    sub_23305B030(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(uint64_t *)((char *)v2 + v18[6] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*((unsigned char *)v2 + v18[7] + 8) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C410();
  }
  if (*(uint64_t *)((char *)v2 + v18[8] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  sub_232EB29B4();
  unint64_t v19 = (uint64_t *)((char *)v2 + v18[10]);
  uint64_t v20 = v19[1];
  if (v20 == 1)
  {
    sub_23309C3F0();
    goto LABEL_24;
  }
  uint64_t v21 = *v19;
  uint64_t v22 = v19[2];
  sub_23309C3F0();
  if (!v20)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v22) {
      goto LABEL_20;
    }
LABEL_22:
    sub_23309C3F0();
    uint64_t v23 = v21;
    uint64_t v24 = v20;
    goto LABEL_23;
  }
  sub_23309C3F0();
  sub_232E967F8(v21, v20);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_22;
  }
LABEL_20:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = v21;
  uint64_t v24 = v20;
LABEL_23:
  sub_232E96840(v23, v24);
LABEL_24:
  sub_233051DF0((uint64_t)v2 + v18[11], (uint64_t)v9, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v28) == 1) {
    return sub_23309C3F0();
  }
  uint64_t v26 = v27;
  sub_233055CC0((uint64_t)v9, v27, (uint64_t (*)(void))type metadata accessor for Attachment);
  sub_23309C3F0();
  Attachment.hash(into:)();
  return sub_23305897C(v26, (uint64_t (*)(void))type metadata accessor for Attachment);
}

unint64_t sub_2330524F8(char a1)
{
  unint64_t result = 0x6F69736E65747865;
  switch(a1)
  {
    case 1:
      unint64_t result = 7107189;
      break;
    case 2:
      unint64_t result = 0x72745365756C6176;
      break;
    case 3:
      unint64_t result = 0x63654465756C6176;
      break;
    case 4:
      unint64_t result = 0x646F4365756C6176;
      break;
    case 5:
      unint64_t result = 0x646F4365756C6176;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0x74744165756C6176;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_23305261C()
{
  return sub_2330524F8(*v0);
}

uint64_t sub_233052624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_23305ABBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23305264C(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_233052658(uint64_t a1)
{
  unint64_t v2 = sub_2330559F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233052694(uint64_t a1)
{
  unint64_t v2 = sub_2330559F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Extension.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_233055A44(0, &qword_2687589A8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2330559F0();
  sub_23309C480();
  *(void *)&long long v14 = *v3;
  char v16 = 0;
  sub_233056788(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
  sub_233055B18((unint64_t *)&qword_2687569F0, &qword_2687569F8);
  sub_23309C150();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for Extension();
    LOBYTE(v14) = 1;
    sub_23309AF80();
    sub_23305B030(&qword_268757720, MEMORY[0x263F06EA8]);
    sub_23309C150();
    LOBYTE(v14) = 2;
    sub_23309C110();
    LOBYTE(v14) = 3;
    sub_23309C130();
    LOBYTE(v14) = 4;
    sub_23309C110();
    LOBYTE(v14) = 5;
    type metadata accessor for Coding();
    sub_23305B030(&qword_268756468, (void (*)(uint64_t))type metadata accessor for Coding);
    sub_23309C150();
    uint64_t v11 = (char *)v3 + *(int *)(v10 + 40);
    uint64_t v12 = *((void *)v11 + 2);
    long long v14 = *(_OWORD *)v11;
    uint64_t v15 = v12;
    char v16 = 6;
    sub_232EBD064();
    sub_23309C150();
    LOBYTE(v14) = 7;
    type metadata accessor for Attachment();
    sub_23305B030(&qword_268756A10, (void (*)(uint64_t))type metadata accessor for Attachment);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Extension.hashValue.getter()
{
  sub_23309C3D0();
  Extension.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t Extension.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v36 - v5;
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v3);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v36 - v8;
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v3);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v36 - v11;
  sub_233055A44(0, &qword_2687589B8, MEMORY[0x263F8E040]);
  uint64_t v38 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v36 - v15;
  unint64_t v40 = (int *)type metadata accessor for Extension();
  MEMORY[0x270FA5388](v40);
  uint64_t v41 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2330559F0();
  uint64_t v39 = v16;
  uint64_t v18 = v43;
  sub_23309C460();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  uint64_t v19 = (uint64_t)v12;
  uint64_t v20 = v14;
  uint64_t v43 = v6;
  sub_233056788(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
  char v46 = 0;
  sub_233055B18((unint64_t *)&qword_2687567B8, &qword_2687567C0);
  sub_23309C080();
  uint64_t v21 = (uint64_t)v41;
  *uint64_t v41 = v44;
  sub_23309AF80();
  LOBYTE(v44) = 1;
  sub_23305B030(&qword_268757730, MEMORY[0x263F06EA8]);
  sub_23309C080();
  uint64_t v22 = (uint64_t)v42;
  sub_233055BD8(v19, v21 + v40[5], (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  LOBYTE(v44) = 2;
  uint64_t v23 = sub_23309C040();
  uint64_t v24 = (uint64_t *)(v21 + v40[6]);
  *uint64_t v24 = v23;
  v24[1] = v25;
  LOBYTE(v44) = 3;
  uint64_t v26 = sub_23309C060();
  uint64_t v27 = v21 + v40[7];
  *(void *)uint64_t v27 = v26;
  *(unsigned char *)(v27 + 8) = v28 & 1;
  LOBYTE(v44) = 4;
  uint64_t v29 = sub_23309C040();
  uint64_t v30 = (uint64_t *)(v21 + v40[8]);
  uint64_t *v30 = v29;
  v30[1] = v31;
  type metadata accessor for Coding();
  LOBYTE(v44) = 5;
  sub_23305B030(&qword_268756480, (void (*)(uint64_t))type metadata accessor for Coding);
  sub_23309C080();
  sub_233055BD8((uint64_t)v9, v21 + v40[9], &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  char v46 = 6;
  sub_232EA391C();
  sub_23309C080();
  uint64_t v32 = v45;
  uint64_t v33 = v21 + v40[10];
  *(_OWORD *)uint64_t v33 = v44;
  *(void *)(v33 + 16) = v32;
  type metadata accessor for Attachment();
  LOBYTE(v44) = 7;
  sub_23305B030(&qword_2687567E8, (void (*)(uint64_t))type metadata accessor for Attachment);
  uint64_t v34 = (uint64_t)v43;
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v38);
  sub_233055BD8(v34, v21 + v40[11], &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  sub_233055C58(v21, v37, (uint64_t (*)(void))type metadata accessor for Extension);
  __swift_destroy_boxed_opaque_existential_1(v22);
  return sub_23305897C(v21, (uint64_t (*)(void))type metadata accessor for Extension);
}

uint64_t sub_23305344C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Extension.init(from:)(a1, a2);
}

uint64_t sub_233053464(void *a1)
{
  return Extension.encode(to:)(a1);
}

uint64_t sub_23305347C()
{
  sub_23309C3D0();
  Extension.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_2330534C0()
{
  sub_23309C3D0();
  Extension.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

Swift::String_optional __swiftcall Extension.raceValueString()()
{
  uint64_t v0 = sub_2330542F0(0xD00000000000003DLL, 0x80000002330B6B40, 0xD00000000000003CLL, (void *)0x80000002330B6B80);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall Extension.stringValueForExtension(with:)(Swift::String with)
{
  uint64_t v2 = v1;
  Swift::String v115 = with;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  unsigned __int8 v102 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v110 = (uint64_t)v95 - v7;
  uint64_t v111 = type metadata accessor for Coding();
  uint64_t v106 = *(void *)(v111 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v111);
  unsigned __int16 v105 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int v101 = (char *)v95 - v11;
  MEMORY[0x270FA5388](v10);
  unsigned __int16 v107 = (char *)v95 - v12;
  uint64_t v13 = (int *)type metadata accessor for Extension();
  uint64_t v112 = *((void *)v13 - 1);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  char v16 = (char *)v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v95 - v18);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v103 = (uint64_t)v95 - v21;
  MEMORY[0x270FA5388](v20);
  unsigned int v104 = (char *)v95 - v22;
  uint64_t v23 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v3);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v27 = (char *)v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)v95 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = (char *)v95 - v31;
  sub_233051DF0((uint64_t)v2 + v13[5], (uint64_t)v95 - v31, (unint64_t *)&qword_268756520, v23);
  uint64_t v33 = sub_23309AF80();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v116 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  uint64_t v117 = v34 + 48;
  if (v116(v32, 1, v33) != 1)
  {
    uint64_t v39 = sub_23309AEE0();
    uint64_t v40 = v34;
    uint64_t v42 = v41;
    uint64_t v113 = *(void (**)(char *, uint64_t))(v40 + 8);
    uint64_t v114 = v40 + 8;
    v113(v32, v33);
    if (v39 == v115._countAndFlagsBits && v42 == v115._object)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v43 = sub_23309C220();
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v44 = *v2;
    if (!*v2)
    {
      uint64_t v35 = sub_233054770();
      unint64_t v36 = v55;
      goto LABEL_4;
    }
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      uint64_t v46 = v44 + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80));
      v115._object = *(void **)(v112 + 72);
      uint64_t v100 = v44;
      swift_bridgeObjectRetain();
      v115._uint64_t countAndFlagsBits = v46;
      uint64_t v112 = v45;
      uint64_t v47 = (unint64_t *)&qword_268756520;
      unsigned __int16 v108 = v19;
      unsigned __int16 v109 = v27;
      while (1)
      {
        sub_233055C58(v46, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Extension);
        sub_233051DF0((uint64_t)v19 + v13[5], (uint64_t)v30, v47, MEMORY[0x263F06EA8]);
        if (v116(v30, 1, v33) == 1)
        {
          sub_233055AA8((uint64_t)v30, v47, MEMORY[0x263F06EA8]);
        }
        else
        {
          uint64_t v48 = v16;
          uint64_t v49 = v13;
          id v50 = v47;
          uint64_t v51 = sub_23309AEE0();
          uint64_t v53 = v52;
          v113(v30, v33);
          if (v51 == 1954047348 && v53 == 0xE400000000000000)
          {
            swift_bridgeObjectRelease();
            uint64_t v13 = v49;
            char v16 = v48;
            uint64_t v19 = v108;
            uint64_t v27 = v109;
LABEL_23:
            swift_bridgeObjectRelease();
            uint64_t v58 = v103;
            sub_233055CC0((uint64_t)v19, v103, (uint64_t (*)(void))type metadata accessor for Extension);
            uint64_t v59 = (uint64_t)v104;
            sub_233055CC0(v58, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for Extension);
            v60._uint64_t countAndFlagsBits = 1954047348;
            v60._object = (void *)0xE400000000000000;
            Swift::String_optional v61 = Extension.stringValueForExtension(with:)(v60);
            sub_23305897C(v59, (uint64_t (*)(void))type metadata accessor for Extension);
            if (v61.value._object) {
              uint64_t countAndFlagsBits = v61.value._countAndFlagsBits;
            }
            else {
              uint64_t countAndFlagsBits = 0;
            }
            uint64_t v99 = countAndFlagsBits;
            object = (void *)0xE000000000000000;
            if (v61.value._object) {
              object = v61.value._object;
            }
LABEL_28:
            unint64_t v98 = (unint64_t)object;
            uint64_t v63 = v112;
            unsigned __int16 v108 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
            unsigned int v104 = v105 + 8;
            uint64_t v96 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
            uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
            uint64_t v64 = 0;
            id v56 = (void *)MEMORY[0x263F8EE78];
            while (2)
            {
              uint64_t v65 = v64 + 1;
              if (__OFADD__(v64, 1))
              {
                __break(1u);
                goto LABEL_83;
              }
              sub_233055C58(v115._countAndFlagsBits + v64 * (uint64_t)v115._object, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Extension);
              sub_233051DF0((uint64_t)&v16[v13[5]], (uint64_t)v27, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
              if (v116(v27, 1, v33) == 1)
              {
                sub_233055AA8((uint64_t)v27, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_35:
                uint64_t v66 = &v16[v13[6]];
                uint64_t v67 = *((void *)v66 + 1);
                if (v67 || (v66 = &v16[v13[8]], (uint64_t v67 = *((void *)v66 + 1)) != 0))
                {
LABEL_37:
                  uint64_t v68 = *(void *)v66;
                  swift_bridgeObjectRetain();
                  sub_23305897C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Extension);
                  goto LABEL_38;
                }
                uint64_t v76 = v110;
                sub_233051DF0((uint64_t)&v16[v13[9]], v110, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                uint64_t v77 = *v108;
                if ((*v108)(v76, 1, v111) == 1)
                {
                  uint64_t v97 = v77;
                  sub_233055AA8(v76, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                  uint64_t v66 = &v16[v13[10]];
                  uint64_t v67 = *((void *)v66 + 1);
                  if (v67 == 1) {
                    goto LABEL_30;
                  }
                  if (v67) {
                    goto LABEL_37;
                  }
                  uint64_t v78 = *((void *)v66 + 2);
                  if (!v78)
                  {
                    uint64_t v80 = (uint64_t)v102;
                    (*v96)(v102, 1, 1, v111);
                    goto LABEL_65;
                  }
                  uint64_t v79 = *(void *)(v78 + 16);
                  uint64_t v80 = (uint64_t)v102;
                  v95[1] = *((void *)v66 + 2);
                  if (v79)
                  {
                    uint64_t v81 = v106;
                    uint64_t v82 = v78
                        + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
                    swift_bridgeObjectRetain();
                    uint64_t v103 = *(void *)(v81 + 72);
                    uint64_t v83 = (uint64_t)v105;
                    while (1)
                    {
                      sub_233055C58(v82, v83, (uint64_t (*)(void))type metadata accessor for Coding);
                      if (*(void *)&v104[*(int *)(v111 + 24)]) {
                        break;
                      }
                      sub_23305897C(v83, (uint64_t (*)(void))type metadata accessor for Coding);
                      v82 += v103;
                      if (!--v79) {
                        goto LABEL_62;
                      }
                    }
                    uint64_t v87 = v111;
                    sub_233055CC0(v83, v80, (uint64_t (*)(void))type metadata accessor for Coding);
                    (*v96)((char *)v80, 0, 1, v87);
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
LABEL_62:
                    uint64_t v87 = v111;
                    (*v96)((char *)v80, 1, 1, v111);
                  }
                  uint64_t v63 = v112;
                  swift_bridgeObjectRelease();
                  if (v97(v80, 1, v87) == 1)
                  {
LABEL_65:
                    sub_233055AA8(v80, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
                    goto LABEL_30;
                  }
                  uint64_t v84 = v80;
                  uint64_t v85 = (uint64_t)v101;
                }
                else
                {
                  uint64_t v84 = v76;
                  uint64_t v85 = (uint64_t)v107;
                }
                sub_233055CC0(v84, v85, (uint64_t (*)(void))type metadata accessor for Coding);
                unint64_t v86 = (uint64_t *)(v85 + *(int *)(v111 + 24));
                uint64_t v68 = *v86;
                uint64_t v67 = v86[1];
                swift_bridgeObjectRetain();
                sub_23305897C(v85, (uint64_t (*)(void))type metadata accessor for Coding);
                uint64_t isUniquelyReferenced_nonNull_native = sub_23305897C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Extension);
                if (v67)
                {
LABEL_38:
                  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_232F3CCE0(0, v56[2] + 1, 1, v56);
                    id v56 = (void *)isUniquelyReferenced_nonNull_native;
                  }
                  unint64_t v70 = v56[2];
                  unint64_t v69 = v56[3];
                  if (v70 >= v69 >> 1)
                  {
                    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_232F3CCE0((void *)(v69 > 1), v70 + 1, 1, v56);
                    id v56 = (void *)isUniquelyReferenced_nonNull_native;
                  }
                  v56[2] = v70 + 1;
                  id v71 = &v56[2 * v70];
                  v71[4] = v68;
                  v71[5] = v67;
                }
                uint64_t v63 = v112;
              }
              else
              {
                uint64_t v72 = sub_23309AEE0();
                uint64_t v74 = v73;
                v113(v27, v33);
                if (v72 == 1954047348 && v74 == 0xE400000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  char v75 = sub_23309C220();
                  swift_bridgeObjectRelease();
                  if ((v75 & 1) == 0) {
                    goto LABEL_35;
                  }
                }
LABEL_30:
                uint64_t isUniquelyReferenced_nonNull_native = sub_23305897C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Extension);
              }
              uint64_t v64 = v65;
              if (v65 == v63)
              {
                swift_bridgeObjectRelease();
                uint64_t v35 = v99;
                unint64_t v36 = v98;
                goto LABEL_68;
              }
              continue;
            }
          }
          char v54 = sub_23309C220();
          swift_bridgeObjectRelease();
          uint64_t v47 = v50;
          uint64_t v13 = v49;
          char v16 = v48;
          uint64_t v19 = v108;
          uint64_t v27 = v109;
          if (v54) {
            goto LABEL_23;
          }
        }
        sub_23305897C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Extension);
        v46 += (uint64_t)v115._object;
        if (!--v45)
        {
          swift_bridgeObjectRelease();
          uint64_t v99 = 0;
          object = (void *)0xE000000000000000;
          goto LABEL_28;
        }
      }
    }
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    id v56 = (void *)MEMORY[0x263F8EE78];
LABEL_68:
    uint64_t v118 = (uint64_t)v56;
    sub_232F51B70();
    sub_23305B030((unint64_t *)&qword_268757740, (void (*)(uint64_t))sub_232F51B70);
    uint64_t v88 = sub_23309B6C0();
    unint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v91 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0) {
      uint64_t v91 = v35 & 0xFFFFFFFFFFFFLL;
    }
    if (v91)
    {
      uint64_t v92 = HIBYTE(v90) & 0xF;
      if ((v90 & 0x2000000000000000) == 0) {
        uint64_t v92 = v88 & 0xFFFFFFFFFFFFLL;
      }
      if (!v92)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      uint64_t v118 = v35;
      unint64_t v119 = v36;
      sub_23309B880();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v93 = HIBYTE(v90) & 0xF;
      if ((v90 & 0x2000000000000000) == 0) {
        uint64_t v93 = v88 & 0xFFFFFFFFFFFFLL;
      }
      if (!v93)
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      uint64_t v118 = 40;
      unint64_t v119 = 0xE100000000000000;
    }
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    uint64_t v35 = v118;
    unint64_t v36 = v119;
    goto LABEL_4;
  }
  sub_233055AA8((uint64_t)v32, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_3:
  uint64_t v35 = 0;
  unint64_t v36 = 0;
LABEL_4:
  uint64_t isUniquelyReferenced_nonNull_native = v35;
  uint64_t v38 = (void *)v36;
LABEL_83:
  result.value._object = v38;
  result.value._uint64_t countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

Swift::String_optional __swiftcall Extension.ethnicityValueString()()
{
  uint64_t v0 = sub_2330542F0(0xD000000000000042, 0x80000002330B6BC0, 0xD000000000000041, (void *)0x80000002330B6C10);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall Extension.birthSexValueString()()
{
  uint64_t v0 = sub_2330542F0(0xD000000000000041, 0x80000002330B6C60, 0xD000000000000040, (void *)0x80000002330B6CB0);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t sub_2330542F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String_optional v7 = Extension.stringValueForExtension(with:)(*(Swift::String *)&a1);
  uint64_t result = v7.value._countAndFlagsBits;
  if (!v7.value._object)
  {
    v8._uint64_t countAndFlagsBits = a3;
    v8._object = a4;
    return Extension.stringValueForExtension(with:)(v8).value._countAndFlagsBits;
  }
  return result;
}

uint64_t Extension.extensions(with:)(uint64_t a1, uint64_t a2)
{
  if (!*v2) {
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_23300F4B8(v5, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t Extension.firstExtension(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::String_optional v7 = (char *)&v26 - v6;
  uint64_t v8 = type metadata accessor for Extension();
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  if (!*v3)
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v23(a3, 1, 1, v8);
  }
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  }
  uint64_t v27 = v9;
  uint64_t v28 = a3;
  uint64_t v14 = v12 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v15 = *(void *)(v9 + 72);
  uint64_t v26 = v12;
  swift_bridgeObjectRetain();
  uint64_t v29 = v8;
  while (1)
  {
    sub_233055C58(v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Extension);
    sub_233051DF0((uint64_t)&v11[*(int *)(v8 + 20)], (uint64_t)v7, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    uint64_t v16 = sub_23309AF80();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16) == 1)
    {
      sub_233055AA8((uint64_t)v7, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      goto LABEL_5;
    }
    uint64_t v18 = v15;
    uint64_t v19 = sub_23309AEE0();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v16);
    if (v19 == v31 && v21 == v30) {
      break;
    }
    char v22 = sub_23309C220();
    swift_bridgeObjectRelease();
    uint64_t v8 = v29;
    uint64_t v15 = v18;
    if (v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
LABEL_5:
    sub_23305897C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Extension);
    v14 += v15;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v27;
      a3 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v29;
LABEL_17:
  uint64_t v25 = v28;
  sub_233055CC0((uint64_t)v11, v28, (uint64_t (*)(void))type metadata accessor for Extension);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v8);
}

uint64_t sub_233054770()
{
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v17 - v2;
  uint64_t v4 = type metadata accessor for Coding();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::String_optional v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for Extension();
  uint64_t v9 = (uint64_t *)(v0 + v8[6]);
  if (v9[1])
  {
    uint64_t countAndFlagsBits = *v9;
  }
  else
  {
    uint64_t v11 = v8;
    uint64_t v12 = (uint64_t *)(v0 + v8[8]);
    if (v12[1])
    {
      uint64_t countAndFlagsBits = *v12;
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_233051DF0(v0 + v8[9], (uint64_t)v3, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
      {
        sub_233055AA8((uint64_t)v3, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        uint64_t v13 = (void *)(v0 + v11[10]);
        uint64_t v14 = v13[1];
        if (v14 == 1)
        {
          uint64_t countAndFlagsBits = 0;
        }
        else
        {
          uint64_t v15 = v13[2];
          v17[1] = *v13;
          id v17[2] = v14;
          void v17[3] = v15;
          uint64_t countAndFlagsBits = CodeableConcept.preferredDisplayString()().value._countAndFlagsBits;
        }
      }
      else
      {
        sub_233055CC0((uint64_t)v3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Coding);
        uint64_t countAndFlagsBits = *(void *)&v7[*(int *)(v4 + 24)];
        swift_bridgeObjectRetain();
        sub_23305897C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Coding);
      }
    }
  }
  swift_bridgeObjectRetain();
  return countAndFlagsBits;
}

BOOL _s23HealthRecordsExtraction9ExtensionV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Attachment();
  uint64_t v116 = *(void *)(v4 - 8);
  uint64_t v117 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v113 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23305AF5C(0, &qword_2687589F8, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
  uint64_t v115 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v110 - v7;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v114 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v125 = (char *)&v110 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v126 = (char *)&v110 - v15;
  uint64_t v120 = type metadata accessor for Coding();
  uint64_t v124 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v118 = (uint64_t)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23305AF5C(0, &qword_268758A00, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  uint64_t v119 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v121 = (uint64_t)&v110 - v18;
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v9);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  id v123 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v127 = (uint64_t)&v110 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v122 = (char *)&v110 - v24;
  uint64_t v25 = sub_23309AF80();
  uint64_t v128 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_23305AF5C(0, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v30 = v29;
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v110 - v31;
  sub_233056788(0, (unint64_t *)&qword_268756520, v28, v9);
  uint64_t v34 = MEMORY[0x270FA5388](v33 - 8);
  unint64_t v36 = (char *)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  uint64_t v39 = (char *)&v110 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v110 - v40;
  uint64_t v129 = a1;
  int v130 = a2;
  uint64_t v42 = *a2;
  if (*a1)
  {
    if (!v42) {
      return 0;
    }
    uint64_t v112 = v8;
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_bridgeObjectRetain();
    char v44 = sub_232E8FFD0(v43, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v112 = v8;
    if (v42) {
      return 0;
    }
  }
  uint64_t v45 = type metadata accessor for Extension();
  uint64_t v46 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_233051DF0((uint64_t)v129 + *(int *)(v45 + 20), (uint64_t)v41, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v111 = (int *)v45;
  sub_233051DF0((uint64_t)v130 + *(int *)(v45 + 20), (uint64_t)v39, (unint64_t *)&qword_268756520, v46);
  uint64_t v47 = (uint64_t)&v32[*(int *)(v30 + 48)];
  sub_233051DF0((uint64_t)v41, (uint64_t)v32, (unint64_t *)&qword_268756520, v46);
  sub_233051DF0((uint64_t)v39, v47, (unint64_t *)&qword_268756520, v46);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v48((uint64_t)v32, 1, v25) == 1)
  {
    uint64_t v49 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_233055AA8((uint64_t)v39, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_233055AA8((uint64_t)v41, (unint64_t *)&qword_268756520, v49);
    if (v48(v47, 1, v25) == 1)
    {
      sub_233055AA8((uint64_t)v32, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v51 = (unint64_t *)&qword_268756528;
    uint64_t v52 = (unint64_t *)&qword_268756520;
    uint64_t v53 = (uint64_t (*)())MEMORY[0x263F06EA8];
    uint64_t v54 = (uint64_t)v32;
    goto LABEL_12;
  }
  sub_233051DF0((uint64_t)v32, (uint64_t)v36, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if (v48(v47, 1, v25) == 1)
  {
    id v50 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_233055AA8((uint64_t)v39, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_233055AA8((uint64_t)v41, (unint64_t *)&qword_268756520, v50);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v36, v25);
    goto LABEL_11;
  }
  uint64_t v56 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v27, v47, v25);
  sub_23305B030((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
  char v57 = sub_23309B6D0();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v56 + 8);
  v58(v27, v25);
  uint64_t v59 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_233055AA8((uint64_t)v39, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  sub_233055AA8((uint64_t)v41, (unint64_t *)&qword_268756520, v59);
  v58(v36, v25);
  sub_233055AA8((uint64_t)v32, (unint64_t *)&qword_268756520, v59);
  if ((v57 & 1) == 0) {
    return 0;
  }
LABEL_16:
  Swift::String v60 = v111;
  uint64_t v61 = v111[6];
  id v62 = (void *)((char *)v129 + v61);
  uint64_t v63 = *(void *)((char *)v129 + v61 + 8);
  uint64_t v64 = (void *)((char *)v130 + v61);
  uint64_t v65 = v64[1];
  if (v63)
  {
    uint64_t v66 = (uint64_t)v112;
    uint64_t v68 = (uint64_t)v125;
    uint64_t v67 = (uint64_t)v126;
    uint64_t v70 = (uint64_t)v123;
    uint64_t v69 = v124;
    uint64_t v71 = (uint64_t)v122;
    uint64_t v72 = v127;
    if (!v65) {
      return 0;
    }
    if (*v62 != *v64 || v63 != v65)
    {
      char v73 = sub_23309C220();
      BOOL result = 0;
      if ((v73 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v66 = (uint64_t)v112;
    uint64_t v68 = (uint64_t)v125;
    uint64_t v67 = (uint64_t)v126;
    uint64_t v70 = (uint64_t)v123;
    uint64_t v69 = v124;
    uint64_t v71 = (uint64_t)v122;
    uint64_t v72 = v127;
    if (v65) {
      return 0;
    }
  }
  uint64_t v74 = v60[7];
  char v75 = (double *)((char *)v129 + v74);
  char v76 = *((unsigned char *)v129 + v74 + 8);
  uint64_t v77 = (double *)((char *)v130 + v74);
  int v78 = *((unsigned __int8 *)v130 + v74 + 8);
  if (v76)
  {
    if (!v78) {
      return 0;
    }
  }
  else
  {
    if (*v75 != *v77) {
      LOBYTE(v78) = 1;
    }
    if (v78) {
      return 0;
    }
  }
  uint64_t v79 = v60[8];
  uint64_t v80 = (void *)((char *)v129 + v79);
  uint64_t v81 = *(void *)((char *)v129 + v79 + 8);
  uint64_t v82 = (void *)((char *)v130 + v79);
  uint64_t v83 = v82[1];
  if (!v81)
  {
    if (v83) {
      return 0;
    }
LABEL_36:
    uint64_t v112 = (char *)v66;
    sub_233051DF0((uint64_t)v129 + v60[9], v71, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    sub_233051DF0((uint64_t)v130 + v60[9], v72, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    uint64_t v85 = v121;
    uint64_t v86 = v121 + *(int *)(v119 + 48);
    sub_233051DF0(v71, v121, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    uint64_t v87 = v85;
    sub_233051DF0(v72, v86, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
    uint64_t v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
    uint64_t v89 = v120;
    if (v88(v87, 1, v120) == 1)
    {
      sub_233055AA8(v72, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      uint64_t v87 = v121;
      sub_233055AA8(v71, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if (v88(v86, 1, v89) == 1)
      {
        sub_233055AA8(v87, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        goto LABEL_43;
      }
    }
    else
    {
      sub_233051DF0(v87, v70, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      if (v88(v86, 1, v89) != 1)
      {
        uint64_t v90 = v118;
        sub_233055CC0(v86, v118, (uint64_t (*)(void))type metadata accessor for Coding);
        char v91 = static Coding.== infix(_:_:)(v70, v90);
        sub_23305897C(v90, (uint64_t (*)(void))type metadata accessor for Coding);
        sub_233055AA8(v127, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        sub_233055AA8(v71, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        sub_23305897C(v70, (uint64_t (*)(void))type metadata accessor for Coding);
        sub_233055AA8(v87, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
        if ((v91 & 1) == 0) {
          return 0;
        }
LABEL_43:
        uint64_t v92 = v111;
        uint64_t v93 = v111[10];
        uint64_t v95 = *(void *)((char *)v129 + v93);
        uint64_t v94 = *(void *)((char *)v129 + v93 + 8);
        uint64_t v96 = *(void *)((char *)v129 + v93 + 16);
        uint64_t v97 = (void *)((char *)v130 + v93);
        uint64_t v99 = *v97;
        uint64_t v98 = v97[1];
        uint64_t v100 = v97[2];
        if (v94 == 1)
        {
          if (v98 == 1)
          {
LABEL_50:
            sub_233051DF0((uint64_t)v129 + v92[11], v67, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_233051DF0((uint64_t)v130 + v92[11], v68, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            uint64_t v102 = (uint64_t)v112;
            uint64_t v103 = (uint64_t)&v112[*(int *)(v115 + 48)];
            sub_233051DF0(v67, (uint64_t)v112, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_233051DF0(v68, v103, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            uint64_t v104 = v117;
            unsigned __int16 v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
            if (v105(v102, 1, v117) == 1)
            {
              sub_233055AA8(v68, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_233055AA8(v67, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              if (v105(v103, 1, v104) == 1)
              {
                sub_233055AA8(v102, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
                return 1;
              }
              goto LABEL_55;
            }
            uint64_t v106 = v114;
            sub_233051DF0(v102, v114, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            if (v105(v103, 1, v104) == 1)
            {
              sub_233055AA8(v68, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_233055AA8(v67, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
              sub_23305897C(v106, (uint64_t (*)(void))type metadata accessor for Attachment);
LABEL_55:
              uint64_t v51 = &qword_2687589F8;
              uint64_t v52 = &qword_268756588;
              uint64_t v53 = type metadata accessor for Attachment;
              uint64_t v54 = v102;
              goto LABEL_12;
            }
            uint64_t v107 = v106;
            uint64_t v108 = v113;
            sub_233055CC0(v103, v113, (uint64_t (*)(void))type metadata accessor for Attachment);
            char v109 = static Attachment.== infix(_:_:)(v107, v108);
            sub_23305897C(v108, (uint64_t (*)(void))type metadata accessor for Attachment);
            sub_233055AA8(v68, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_233055AA8(v67, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            sub_23305897C(v107, (uint64_t (*)(void))type metadata accessor for Attachment);
            sub_233055AA8(v102, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
            return (v109 & 1) != 0;
          }
        }
        else
        {
          v132[0] = v95;
          v132[1] = v94;
          v132[2] = v96;
          if (v98 != 1)
          {
            v131[0] = v99;
            v131[1] = v98;
            v131[2] = v100;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v101 = static CodeableConcept.== infix(_:_:)(v132, v131);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_232E96840(v95, v94);
            if ((v101 & 1) == 0) {
              return 0;
            }
            goto LABEL_50;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        sub_232E967F8(v99, v98);
        sub_232E96840(v95, v94);
        sub_232E96840(v99, v98);
        return 0;
      }
      sub_233055AA8(v127, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      sub_233055AA8(v71, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
      sub_23305897C(v70, (uint64_t (*)(void))type metadata accessor for Coding);
    }
    uint64_t v51 = &qword_268758A00;
    uint64_t v52 = &qword_268756F50;
    uint64_t v53 = type metadata accessor for Coding;
    uint64_t v54 = v87;
LABEL_12:
    sub_23305AFD4(v54, v51, v52, (uint64_t (*)(uint64_t))v53);
    return 0;
  }
  if (!v83) {
    return 0;
  }
  if (*v80 == *v82 && v81 == v83) {
    goto LABEL_36;
  }
  char v84 = sub_23309C220();
  BOOL result = 0;
  if (v84) {
    goto LABEL_36;
  }
  return result;
}

unint64_t sub_2330559F0()
{
  unint64_t result = qword_2687589B0;
  if (!qword_2687589B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687589B0);
  }
  return result;
}

void sub_233055A44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_2330559F0();
    unint64_t v7 = a3(a1, &type metadata for Extension.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_233055AA8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_233056788(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_233055B18(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_233056788(255, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_23305B030(a2, (void (*)(uint64_t))type metadata accessor for Extension);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233055BD8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_233056788(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_233055C58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233055CC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_233055D28(void *a1)
{
  a1[1] = sub_23305B030(&qword_2687567C0, (void (*)(uint64_t))type metadata accessor for Extension);
  a1[2] = sub_23305B030(&qword_2687569F8, (void (*)(uint64_t))type metadata accessor for Extension);
  uint64_t result = sub_23305B030(&qword_2687589C0, (void (*)(uint64_t))type metadata accessor for Extension);
  a1[3] = result;
  return result;
}

uint64_t sub_233055DD4()
{
  return sub_23305B030(&qword_2687589C8, (void (*)(uint64_t))type metadata accessor for Extension);
}

uint64_t *initializeBufferWithCopyOfBuffer for Extension(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v15 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_23309AF80();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void, void, void))(v12 + 48);
    swift_bridgeObjectRetain();
    uint64_t v103 = (unsigned int (*)(char *, uint64_t, void *))v13;
    __dst = (void *)v11;
    uint64_t v102 = v12;
    if (v13(v10, 1, v11))
    {
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (char *)a1 + v17;
    uint64_t v22 = (char *)a2 + v17;
    v21[8] = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    uint64_t v23 = a3[8];
    uint64_t v24 = a3[9];
    uint64_t v25 = (uint64_t *)((char *)a1 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v106 = a1;
    uint64_t v28 = (char *)a1 + v24;
    uint64_t v29 = (char *)a2 + v24;
    uint64_t v30 = (int *)type metadata accessor for Coding();
    uint64_t v31 = *((void *)v30 - 1);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, int *))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
      uint64_t v15 = v106;
    }
    else
    {
      if (v103(v29, 1, __dst))
      {
        sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v28, v29, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v102 + 16))(v28, v29, __dst);
        (*(void (**)(char *, void, uint64_t, void *))(v102 + 56))(v28, 0, 1, __dst);
      }
      uint64_t v15 = v106;
      uint64_t v35 = v30[5];
      unint64_t v36 = &v28[v35];
      uint64_t v37 = &v29[v35];
      uint64_t v38 = *((void *)v37 + 1);
      *(void *)unint64_t v36 = *(void *)v37;
      *((void *)v36 + 1) = v38;
      uint64_t v39 = v30[6];
      uint64_t v40 = &v28[v39];
      uint64_t v41 = &v29[v39];
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      *((void *)v40 + 1) = v42;
      uint64_t v43 = v30[7];
      char v44 = &v28[v43];
      uint64_t v45 = &v29[v43];
      uint64_t v46 = *((void *)v45 + 1);
      *(void *)char v44 = *(void *)v45;
      *((void *)v44 + 1) = v46;
      uint64_t v47 = *(void (**)(char *, void, uint64_t, int *))(v31 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v28, 0, 1, v30);
    }
    uint64_t v48 = a3[10];
    uint64_t v49 = (uint64_t)v15 + v48;
    id v50 = (char *)a2 + v48;
    uint64_t v51 = *((void *)v50 + 1);
    if (v51 == 1)
    {
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      *(void *)(v49 + 16) = *((void *)v50 + 2);
    }
    else
    {
      *(void *)uint64_t v49 = *(void *)v50;
      *(void *)(v49 + 8) = v51;
      *(void *)(v49 + 16) = *((void *)v50 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = a3[11];
    uint64_t v53 = (uint64_t *)((char *)v15 + v52);
    uint64_t v54 = (uint64_t *)((char *)a2 + v52);
    unint64_t v55 = (int *)type metadata accessor for Attachment();
    uint64_t v56 = *((void *)v55 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
      memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      uint64_t v101 = v56;
      uint64_t v58 = v54[1];
      void *v53 = *v54;
      v53[1] = v58;
      uint64_t v59 = v54[3];
      v53[2] = v54[2];
      v53[3] = v59;
      uint64_t v60 = v55[6];
      uint64_t v61 = (char *)v53 + v60;
      id v62 = (char *)v54 + v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v103(v62, 1, __dst))
      {
        sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v102 + 16))(v61, v62, __dst);
        (*(void (**)(char *, void, uint64_t, void *))(v102 + 56))(v61, 0, 1, __dst);
      }
      uint64_t v64 = v55[7];
      uint64_t v65 = (char *)v53 + v64;
      uint64_t v66 = (char *)v54 + v64;
      *(_DWORD *)uint64_t v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      uint64_t v67 = v55[8];
      uint64_t v68 = (void *)((char *)v53 + v67);
      uint64_t v69 = (void *)((char *)v54 + v67);
      uint64_t v70 = v69[1];
      void *v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v55[9];
      uint64_t v72 = (void *)((char *)v53 + v71);
      char v73 = (void *)((char *)v54 + v71);
      uint64_t v74 = v73[1];
      *uint64_t v72 = *v73;
      v72[1] = v74;
      uint64_t v75 = v55[10];
      __dsta = (char *)v53 + v75;
      char v76 = (char *)v54 + v75;
      uint64_t v77 = type metadata accessor for FHIRDateTime();
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v79(v76, 1, v77))
      {
        sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v76, *(void *)(*(void *)(v80 - 8) + 64));
        uint64_t v15 = v106;
        uint64_t v81 = v56;
      }
      else
      {
        unsigned char *__dsta = *v76;
        *((void *)__dsta + 1) = *((void *)v76 + 1);
        *((_DWORD *)__dsta + 4) = *((_DWORD *)v76 + 4);
        uint64_t v82 = *((void *)v76 + 7);
        if (v82 == 1)
        {
          long long v83 = *(_OWORD *)(v76 + 40);
          *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v76 + 24);
          *(_OWORD *)(__dsta + 40) = v83;
          *((void *)__dsta + 7) = *((void *)v76 + 7);
        }
        else
        {
          __dsta[24] = v76[24];
          *(_WORD *)(__dsta + 25) = *(_WORD *)(v76 + 25);
          *(_OWORD *)(__dsta + 28) = *(_OWORD *)(v76 + 28);
          *((_DWORD *)__dsta + 11) = *((_DWORD *)v76 + 11);
          *((void *)__dsta + 6) = *((void *)v76 + 6);
          *((void *)__dsta + 7) = v82;
          swift_bridgeObjectRetain();
        }
        uint64_t v84 = *(int *)(v77 + 28);
        uint64_t v85 = &__dsta[v84];
        uint64_t v86 = &v76[v84];
        uint64_t v87 = sub_23309B300();
        uint64_t v88 = *(void *)(v87 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v88 + 16))(v85, v86, v87);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        uint64_t v15 = v106;
        uint64_t v81 = v101;
        uint64_t v90 = *(int *)(v77 + 32);
        char v91 = &__dsta[v90];
        uint64_t v92 = &v76[v90];
        uint64_t v93 = v92[1];
        *char v91 = *v92;
        v91[1] = v93;
        uint64_t v94 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v78 + 56);
        swift_bridgeObjectRetain();
        v94(__dsta, 0, 1, v77);
      }
      uint64_t v95 = v55[11];
      uint64_t v96 = (void *)((char *)v53 + v95);
      uint64_t v97 = (void *)((char *)v54 + v95);
      uint64_t v98 = v97[1];
      *uint64_t v96 = *v97;
      v96[1] = v98;
      uint64_t v99 = *(void (**)(void *, void, uint64_t, int *))(v81 + 56);
      swift_bridgeObjectRetain();
      v99(v53, 0, 1, v55);
    }
  }
  return v15;
}

void sub_233056788(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for Extension(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = type metadata accessor for Coding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    if (!v7(v8, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[10] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[11];
  uint64_t v11 = type metadata accessor for Attachment();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v10 + *(int *)(v11 + 24);
    if (!v7(v13, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v10 + *(int *)(v11 + 40);
    uint64_t v15 = type metadata accessor for FHIRDateTime();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      if (*(void *)(v14 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = v14 + *(int *)(v15 + 28);
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Extension(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  uint64_t v100 = v11;
  __dst = (void *)v9;
  uint64_t v99 = v10;
  if (v11(v8, 1, v9))
  {
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (char *)a1 + v14;
  uint64_t v19 = (char *)a2 + v14;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  uint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v103 = a1;
  uint64_t v25 = (char *)a1 + v21;
  uint64_t v26 = (char *)a2 + v21;
  uint64_t v27 = (int *)type metadata accessor for Coding();
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, int *))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v26, 1, v27))
  {
    sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    if (v100(v26, 1, v9))
    {
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v25, v26, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v25, 0, 1, v9);
    }
    uint64_t v32 = v27[5];
    uint64_t v33 = &v25[v32];
    uint64_t v34 = &v26[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = v27[6];
    uint64_t v37 = &v25[v36];
    uint64_t v38 = &v26[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *(void *)uint64_t v37 = *(void *)v38;
    *((void *)v37 + 1) = v39;
    uint64_t v40 = v27[7];
    uint64_t v41 = &v25[v40];
    uint64_t v42 = &v26[v40];
    uint64_t v43 = *((void *)v42 + 1);
    *(void *)uint64_t v41 = *(void *)v42;
    *((void *)v41 + 1) = v43;
    char v44 = *(void (**)(char *, void, uint64_t, int *))(v28 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44(v25, 0, 1, v27);
  }
  uint64_t v45 = v103;
  uint64_t v46 = a3[10];
  uint64_t v47 = (char *)v103 + v46;
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *((void *)v48 + 1);
  if (v49 == 1)
  {
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    *((void *)v47 + 2) = *((void *)v48 + 2);
  }
  else
  {
    *(void *)uint64_t v47 = *(void *)v48;
    *((void *)v47 + 1) = v49;
    *((void *)v47 + 2) = *((void *)v48 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v50 = a3[11];
  uint64_t v51 = (void *)((char *)v103 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for Attachment();
  uint64_t v54 = *((void *)v53 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    uint64_t v98 = v54;
    uint64_t v56 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v56;
    uint64_t v57 = v52[3];
    v51[2] = v52[2];
    v51[3] = v57;
    uint64_t v58 = v53[6];
    uint64_t v59 = (char *)v51 + v58;
    uint64_t v60 = (char *)v52 + v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v100(v60, 1, (uint64_t)__dst))
    {
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v99 + 16))(v59, v60, __dst);
      (*(void (**)(char *, void, uint64_t, void *))(v99 + 56))(v59, 0, 1, __dst);
    }
    uint64_t v62 = v53[7];
    uint64_t v63 = (char *)v51 + v62;
    uint64_t v64 = (char *)v52 + v62;
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    uint64_t v65 = v53[8];
    uint64_t v66 = (void *)((char *)v51 + v65);
    uint64_t v67 = (void *)((char *)v52 + v65);
    uint64_t v68 = v67[1];
    void *v66 = *v67;
    v66[1] = v68;
    uint64_t v69 = v53[9];
    uint64_t v70 = (void *)((char *)v51 + v69);
    uint64_t v71 = (void *)((char *)v52 + v69);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = v53[10];
    __dsta = (char *)v51 + v73;
    uint64_t v74 = (char *)v52 + v73;
    uint64_t v75 = type metadata accessor for FHIRDateTime();
    uint64_t v76 = *(void *)(v75 - 8);
    uint64_t v77 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v76 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v77(v74, 1, v75))
    {
      sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v74, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      unsigned char *__dsta = *v74;
      *((void *)__dsta + 1) = *((void *)v74 + 1);
      *((_DWORD *)__dsta + 4) = *((_DWORD *)v74 + 4);
      uint64_t v79 = *((void *)v74 + 7);
      if (v79 == 1)
      {
        long long v80 = *(_OWORD *)(v74 + 40);
        *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v74 + 24);
        *(_OWORD *)(__dsta + 40) = v80;
        *((void *)__dsta + 7) = *((void *)v74 + 7);
      }
      else
      {
        __dsta[24] = v74[24];
        *(_WORD *)(__dsta + 25) = *(_WORD *)(v74 + 25);
        *(_OWORD *)(__dsta + 28) = *(_OWORD *)(v74 + 28);
        *((_DWORD *)__dsta + 11) = *((_DWORD *)v74 + 11);
        *((void *)__dsta + 6) = *((void *)v74 + 6);
        *((void *)__dsta + 7) = v79;
        swift_bridgeObjectRetain();
      }
      uint64_t v81 = *(int *)(v75 + 28);
      uint64_t v82 = &__dsta[v81];
      long long v83 = &v74[v81];
      uint64_t v84 = sub_23309B300();
      uint64_t v85 = *(void *)(v84 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v85 + 16))(v82, v83, v84);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
      }
      uint64_t v87 = *(int *)(v75 + 32);
      uint64_t v88 = &__dsta[v87];
      uint64_t v89 = &v74[v87];
      uint64_t v90 = v89[1];
      *uint64_t v88 = *v89;
      v88[1] = v90;
      char v91 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v76 + 56);
      swift_bridgeObjectRetain();
      v91(__dsta, 0, 1, v75);
    }
    uint64_t v92 = v53[11];
    uint64_t v93 = (void *)((char *)v51 + v92);
    uint64_t v94 = (void *)((char *)v52 + v92);
    uint64_t v95 = v94[1];
    *uint64_t v93 = *v94;
    v93[1] = v95;
    uint64_t v96 = *(void (**)(void *, void, uint64_t, int *))(v98 + 56);
    swift_bridgeObjectRetain();
    v96(v51, 0, 1, v53);
    return v103;
  }
  return v45;
}

void *assignWithCopy for Extension(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unsigned int v12 = v11(v7, 1, v9);
  uint64_t v183 = v11;
  unsigned int v13 = v11(v8, 1, v9);
  uint64_t v181 = v10;
  if (v12)
  {
    if (v13)
    {
      uint64_t v14 = v9;
LABEL_6:
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_9;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    uint64_t v14 = v9;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      uint64_t v14 = v9;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
      goto LABEL_6;
    }
    uint64_t v14 = v9;
    (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
  }
LABEL_9:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  v20[8] = v21[8];
  *(void *)uint64_t v20 = v22;
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v189 = a1;
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = (int *)type metadata accessor for Coding();
  uint64_t v30 = *((void *)v29 - 1);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, int *))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = v14;
      if (v183(v28, 1, v14))
      {
        sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v27, v28, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v27, v28, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v27, 0, 1, v14);
      }
      uint64_t v40 = v29[5];
      uint64_t v41 = &v27[v40];
      uint64_t v42 = &v28[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v43 = v29[6];
      char v44 = &v27[v43];
      uint64_t v45 = &v28[v43];
      *(void *)char v44 = *(void *)v45;
      *((void *)v44 + 1) = *((void *)v45 + 1);
      uint64_t v46 = v29[7];
      uint64_t v47 = &v27[v46];
      uint64_t v48 = &v28[v46];
      *(void *)uint64_t v47 = *(void *)v48;
      *((void *)v47 + 1) = *((void *)v48 + 1);
      uint64_t v49 = *(void (**)(char *, void, uint64_t, int *))(v30 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v27, 0, 1, v29);
      goto LABEL_25;
    }
LABEL_15:
    sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v36 - 8) + 64));
    uint64_t v37 = v189;
    uint64_t v34 = v14;
    goto LABEL_26;
  }
  if (v33)
  {
    sub_23305897C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Coding);
    goto LABEL_15;
  }
  uint64_t v34 = v14;
  unsigned int v38 = v183(v27, 1, v14);
  unsigned int v39 = v183(v28, 1, v14);
  if (!v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v181 + 24))(v27, v28, v14);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v181 + 8))(v27, v14);
    goto LABEL_23;
  }
  if (v39)
  {
LABEL_23:
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v27, v28, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v27, 0, 1, v14);
LABEL_24:
  uint64_t v51 = v29[5];
  uint64_t v52 = &v27[v51];
  uint64_t v53 = &v28[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v29[6];
  uint64_t v55 = &v27[v54];
  uint64_t v56 = &v28[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = v29[7];
  uint64_t v58 = &v27[v57];
  uint64_t v59 = &v28[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  *((void *)v58 + 1) = *((void *)v59 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v37 = v189;
LABEL_26:
  uint64_t v60 = a3[10];
  uint64_t v61 = (uint64_t)v37 + v60;
  uint64_t v62 = (char *)a2 + v60;
  uint64_t v63 = *(void *)((char *)v37 + v60 + 8);
  uint64_t v64 = *(void *)((char *)a2 + v60 + 8);
  if (v63 == 1)
  {
    if (v64 == 1)
    {
      long long v65 = *(_OWORD *)v62;
      *(void *)(v61 + 16) = *((void *)v62 + 2);
      *(_OWORD *)uint64_t v61 = v65;
    }
    else
    {
      *(void *)uint64_t v61 = *(void *)v62;
      *(void *)(v61 + 8) = *((void *)v62 + 1);
      *(void *)(v61 + 16) = *((void *)v62 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v64 == 1)
  {
    sub_232F042F8(v61);
    uint64_t v66 = *((void *)v62 + 2);
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
    *(void *)(v61 + 16) = v66;
  }
  else
  {
    *(void *)uint64_t v61 = *(void *)v62;
    *(void *)(v61 + 8) = *((void *)v62 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v61 + 16) = *((void *)v62 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v67 = a3[11];
  uint64_t v68 = (char *)v37 + v67;
  uint64_t v69 = (void *)((char *)a2 + v67);
  uint64_t v70 = (int *)type metadata accessor for Attachment();
  uint64_t v71 = *((void *)v70 - 1);
  uint64_t v72 = *(uint64_t (**)(void *, uint64_t, int *))(v71 + 48);
  int v73 = v72(v68, 1, v70);
  int v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (v74)
    {
      sub_23305897C((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for Attachment);
      goto LABEL_39;
    }
    *(void *)uint64_t v68 = *v69;
    *((void *)v68 + 1) = v69[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v68 + 2) = v69[2];
    *((void *)v68 + 3) = v69[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v80 = v70[6];
    uint64_t v81 = &v68[v80];
    uint64_t v82 = (char *)v69 + v80;
    unsigned int v83 = v183(&v68[v80], 1, v34);
    unsigned int v84 = v183(v82, 1, v34);
    if (v83)
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v81, v82, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v81, 0, 1, v34);
        goto LABEL_51;
      }
    }
    else
    {
      if (!v84)
      {
        (*(void (**)(char *, char *, uint64_t))(v181 + 24))(v81, v82, v34);
LABEL_51:
        uint64_t v108 = v70[7];
        char v109 = &v68[v108];
        uint64_t v110 = (char *)v69 + v108;
        int v111 = *(_DWORD *)v110;
        v109[4] = v110[4];
        *(_DWORD *)char v109 = v111;
        uint64_t v112 = v70[8];
        uint64_t v113 = &v68[v112];
        uint64_t v114 = (void *)((char *)v69 + v112);
        *(void *)uint64_t v113 = *v114;
        *((void *)v113 + 1) = v114[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v115 = v70[9];
        uint64_t v116 = &v68[v115];
        uint64_t v117 = (void *)((char *)v69 + v115);
        *(void *)uint64_t v116 = *v117;
        *((void *)v116 + 1) = v117[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v118 = v70[10];
        uint64_t v119 = (uint64_t)&v68[v118];
        uint64_t v120 = (char *)v69 + v118;
        uint64_t v121 = type metadata accessor for FHIRDateTime();
        uint64_t v122 = *(void *)(v121 - 8);
        id v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
        int v124 = v123(v119, 1, v121);
        int v125 = v123((uint64_t)v120, 1, v121);
        if (v124)
        {
          if (!v125)
          {
            *(unsigned char *)uint64_t v119 = *v120;
            uint64_t v126 = *((void *)v120 + 1);
            *(_DWORD *)(v119 + 16) = *((_DWORD *)v120 + 4);
            *(void *)(v119 + 8) = v126;
            if (*((void *)v120 + 7) == 1)
            {
              long long v127 = *(_OWORD *)(v120 + 24);
              long long v128 = *(_OWORD *)(v120 + 40);
              *(void *)(v119 + 56) = *((void *)v120 + 7);
              *(_OWORD *)(v119 + 24) = v127;
              *(_OWORD *)(v119 + 40) = v128;
            }
            else
            {
              *(unsigned char *)(v119 + 24) = v120[24];
              *(unsigned char *)(v119 + 25) = v120[25];
              *(unsigned char *)(v119 + 26) = v120[26];
              long long v151 = *(_OWORD *)(v120 + 28);
              *(_DWORD *)(v119 + 44) = *((_DWORD *)v120 + 11);
              *(_OWORD *)(v119 + 28) = v151;
              *(void *)(v119 + 48) = *((void *)v120 + 6);
              *(void *)(v119 + 56) = *((void *)v120 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v152 = *(int *)(v121 + 28);
            uint64_t v185 = (void *)(v119 + v152);
            uint64_t v153 = &v120[v152];
            uint64_t v154 = sub_23309B300();
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v185, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v155 + 16))(v185, v153, v154);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v155 + 56))(v185, 0, 1, v154);
            }
            uint64_t v37 = v189;
            uint64_t v157 = *(int *)(v121 + 32);
            uint64_t v158 = (void *)(v119 + v157);
            uint64_t v159 = &v120[v157];
            *uint64_t v158 = *(void *)v159;
            v158[1] = *((void *)v159 + 1);
            uint64_t v160 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v122 + 56);
            swift_bridgeObjectRetain();
            v160(v119, 0, 1, v121);
            goto LABEL_87;
          }
          goto LABEL_57;
        }
        if (v125)
        {
          sub_23305897C(v119, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_57:
          sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v119, v120, *(void *)(*(void *)(v129 - 8) + 64));
          uint64_t v37 = v189;
LABEL_87:
          uint64_t v176 = v70[11];
          int v177 = &v68[v176];
          int v178 = (void *)((char *)v69 + v176);
          *(void *)int v177 = *v178;
          *((void *)v177 + 1) = v178[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return v37;
        }
        *(unsigned char *)uint64_t v119 = *v120;
        *(void *)(v119 + 8) = *((void *)v120 + 1);
        *(_WORD *)(v119 + 16) = *((_WORD *)v120 + 8);
        *(_WORD *)(v119 + 18) = *((_WORD *)v120 + 9);
        int v146 = (long long *)(v119 + 24);
        uint64_t v147 = (long long *)(v120 + 24);
        uint64_t v148 = *((void *)v120 + 7);
        if (*(void *)(v119 + 56) == 1)
        {
          if (v148 == 1)
          {
            long long v149 = *v147;
            long long v150 = *(_OWORD *)(v120 + 40);
            *(void *)(v119 + 56) = *((void *)v120 + 7);
            long long *v146 = v149;
            *(_OWORD *)(v119 + 40) = v150;
          }
          else
          {
            *(unsigned char *)(v119 + 24) = v120[24];
            *(unsigned char *)(v119 + 25) = v120[25];
            *(unsigned char *)(v119 + 26) = v120[26];
            long long v163 = *(_OWORD *)(v120 + 28);
            *(_DWORD *)(v119 + 44) = *((_DWORD *)v120 + 11);
            *(_OWORD *)(v119 + 28) = v163;
            *(void *)(v119 + 48) = *((void *)v120 + 6);
            *(void *)(v119 + 56) = *((void *)v120 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v148 == 1)
        {
          sub_232F0434C(v119 + 24);
          uint64_t v161 = *((void *)v120 + 7);
          long long v162 = *(_OWORD *)(v120 + 40);
          long long *v146 = *v147;
          *(_OWORD *)(v119 + 40) = v162;
          *(void *)(v119 + 56) = v161;
        }
        else
        {
          *(unsigned char *)(v119 + 24) = v120[24];
          *(unsigned char *)(v119 + 25) = v120[25];
          *(unsigned char *)(v119 + 26) = v120[26];
          *(_DWORD *)(v119 + 28) = *((_DWORD *)v120 + 7);
          *(_WORD *)(v119 + 32) = *((_WORD *)v120 + 16);
          *(_WORD *)(v119 + 34) = *((_WORD *)v120 + 17);
          *(_WORD *)(v119 + 36) = *((_WORD *)v120 + 18);
          *(_WORD *)(v119 + 38) = *((_WORD *)v120 + 19);
          *(_WORD *)(v119 + 40) = *((_WORD *)v120 + 20);
          *(_WORD *)(v119 + 42) = *((_WORD *)v120 + 21);
          *(_WORD *)(v119 + 44) = *((_WORD *)v120 + 22);
          *(_WORD *)(v119 + 46) = *((_WORD *)v120 + 23);
          *(void *)(v119 + 48) = *((void *)v120 + 6);
          *(void *)(v119 + 56) = *((void *)v120 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v164 = *(int *)(v121 + 28);
        uint64_t v165 = (void *)(v119 + v164);
        __srca = &v120[v164];
        uint64_t v166 = sub_23309B300();
        uint64_t v182 = *(void *)(v166 - 8);
        uint64_t v167 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v182 + 48);
        v186 = v165;
        LODWORD(v165) = v167(v165, 1, v166);
        int v168 = v167(__srca, 1, v166);
        if (v165)
        {
          uint64_t v37 = v189;
          if (!v168)
          {
            (*(void (**)(void *, char *, uint64_t))(v182 + 16))(v186, __srca, v166);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v182 + 56))(v186, 0, 1, v166);
            goto LABEL_86;
          }
          sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v170 = *(void *)(*(void *)(v169 - 8) + 64);
          uint64_t v171 = v186;
        }
        else
        {
          uint64_t v37 = v189;
          if (!v168)
          {
            (*(void (**)(void *, char *, uint64_t))(v182 + 24))(v186, __srca, v166);
            goto LABEL_86;
          }
          (*(void (**)(void *, uint64_t))(v182 + 8))(v186, v166);
          sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v170 = *(void *)(*(void *)(v172 - 8) + 64);
          uint64_t v171 = v186;
        }
        memcpy(v171, __srca, v170);
LABEL_86:
        uint64_t v173 = *(int *)(v121 + 32);
        uint64_t v174 = (void *)(v119 + v173);
        uint64_t v175 = &v120[v173];
        *uint64_t v174 = *(void *)v175;
        v174[1] = *((void *)v175 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_87;
      }
      (*(void (**)(char *, uint64_t))(v181 + 8))(v81, v34);
    }
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v81, v82, *(void *)(*(void *)(v107 - 8) + 64));
    goto LABEL_51;
  }
  if (v74)
  {
LABEL_39:
    sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v79 - 8) + 64));
    return v37;
  }
  *(void *)uint64_t v68 = *v69;
  *((void *)v68 + 1) = v69[1];
  *((void *)v68 + 2) = v69[2];
  *((void *)v68 + 3) = v69[3];
  uint64_t v75 = v70[6];
  uint64_t v76 = &v68[v75];
  uint64_t v77 = (char *)v69 + v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v180 = v71;
  if (v183(v77, 1, v34))
  {
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v76, v77, v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v76, 0, 1, v34);
  }
  uint64_t v85 = v70[7];
  uint64_t v86 = &v68[v85];
  uint64_t v87 = (char *)v69 + v85;
  int v88 = *(_DWORD *)v87;
  v86[4] = v87[4];
  *(_DWORD *)uint64_t v86 = v88;
  uint64_t v89 = v70[8];
  uint64_t v90 = &v68[v89];
  char v91 = (void *)((char *)v69 + v89);
  *(void *)uint64_t v90 = *v91;
  *((void *)v90 + 1) = v91[1];
  uint64_t v92 = v70[9];
  uint64_t v93 = &v68[v92];
  uint64_t v94 = (void *)((char *)v69 + v92);
  *(void *)uint64_t v93 = *v94;
  *((void *)v93 + 1) = v94[1];
  uint64_t v95 = v70[10];
  uint64_t v96 = &v68[v95];
  __src = (char *)v69;
  uint64_t v97 = (char *)v69 + v95;
  uint64_t v98 = type metadata accessor for FHIRDateTime();
  uint64_t v99 = *(void *)(v98 - 8);
  uint64_t v100 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v99 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v100(v97, 1, v98))
  {
    sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v96, v97, *(void *)(*(void *)(v101 - 8) + 64));
    uint64_t v102 = __src;
    uint64_t v37 = v189;
    uint64_t v103 = v180;
  }
  else
  {
    *uint64_t v96 = *v97;
    uint64_t v104 = *((void *)v97 + 1);
    *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
    *((void *)v96 + 1) = v104;
    uint64_t v184 = v99;
    if (*((void *)v97 + 7) == 1)
    {
      long long v105 = *(_OWORD *)(v97 + 24);
      long long v106 = *(_OWORD *)(v97 + 40);
      *((void *)v96 + 7) = *((void *)v97 + 7);
      *(_OWORD *)(v96 + 24) = v105;
      *(_OWORD *)(v96 + 40) = v106;
    }
    else
    {
      v96[24] = v97[24];
      v96[25] = v97[25];
      v96[26] = v97[26];
      long long v130 = *(_OWORD *)(v97 + 28);
      *((_DWORD *)v96 + 11) = *((_DWORD *)v97 + 11);
      *(_OWORD *)(v96 + 28) = v130;
      *((void *)v96 + 6) = *((void *)v97 + 6);
      *((void *)v96 + 7) = *((void *)v97 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v131 = v98;
    uint64_t v132 = *(int *)(v98 + 28);
    uint64_t v133 = &v96[v132];
    uint64_t v134 = &v97[v132];
    uint64_t v135 = sub_23309B300();
    uint64_t v136 = *(void *)(v135 - 8);
    uint64_t v102 = __src;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v136 + 16))(v133, v134, v135);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    uint64_t v37 = v189;
    uint64_t v103 = v180;
    uint64_t v138 = *(int *)(v131 + 32);
    uint64_t v139 = &v96[v138];
    uint64_t v140 = &v97[v138];
    *uint64_t v139 = *v140;
    v139[1] = v140[1];
    uint64_t v141 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v184 + 56);
    swift_bridgeObjectRetain();
    v141(v96, 0, 1, v131);
  }
  uint64_t v142 = v70[11];
  uint64_t v143 = &v68[v142];
  uint64_t v144 = &v102[v142];
  *(void *)uint64_t v143 = *(void *)v144;
  *((void *)v143 + 1) = *((void *)v144 + 1);
  int v145 = *(void (**)(void *, void, uint64_t, int *))(v103 + 56);
  swift_bridgeObjectRetain();
  v145(v68, 0, 1, v70);
  return v37;
}

uint64_t sub_23305897C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for Extension(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  __dst = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (__dst(v8, 1, v9))
  {
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  unsigned int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)unsigned int v13 = *(void *)v14;
  void v13[8] = v14[8];
  uint64_t v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = (int *)type metadata accessor for Coding();
  uint64_t v19 = *((void *)v18 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    if (__dst(v17, 1, v9))
    {
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
    }
    *(_OWORD *)&v16[v18[5]] = *(_OWORD *)&v17[v18[5]];
    *(_OWORD *)&v16[v18[6]] = *(_OWORD *)&v17[v18[6]];
    *(_OWORD *)&v16[v18[7]] = *(_OWORD *)&v17[v18[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v22 = a3[10];
  uint64_t v23 = a3[11];
  uint64_t v24 = (char *)a1 + v22;
  uint64_t v25 = (char *)a2 + v22;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((void *)v24 + 2) = *((void *)v25 + 2);
  uint64_t v26 = (_OWORD *)((char *)a1 + v23);
  uint64_t v27 = (_OWORD *)((char *)a2 + v23);
  uint64_t v28 = (int *)type metadata accessor for Attachment();
  uint64_t v29 = *((void *)v28 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
  {
    sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    long long v31 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v31;
    uint64_t v32 = v28[6];
    int v33 = (char *)v26 + v32;
    uint64_t v34 = (char *)v27 + v32;
    if (__dst((char *)v27 + v32, 1, v9))
    {
      sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v33, v34, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v33, 0, 1, v9);
    }
    uint64_t v36 = v28[7];
    uint64_t v37 = (char *)v26 + v36;
    unsigned int v38 = (char *)v27 + v36;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    *(_OWORD *)((char *)v26 + v28[8]) = *(_OWORD *)((char *)v27 + v28[8]);
    *(_OWORD *)((char *)v26 + v28[9]) = *(_OWORD *)((char *)v27 + v28[9]);
    uint64_t v39 = v28[10];
    uint64_t v40 = (char *)v26 + v39;
    uint64_t v41 = (char *)v27 + v39;
    uint64_t v42 = type metadata accessor for FHIRDateTime();
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      *uint64_t v40 = *v41;
      *((void *)v40 + 1) = *((void *)v41 + 1);
      *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
      *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
      *((void *)v40 + 7) = *((void *)v41 + 7);
      uint64_t v45 = *(int *)(v42 + 28);
      uint64_t v51 = v43;
      __dsta = &v40[v45];
      uint64_t v46 = &v41[v45];
      uint64_t v47 = sub_23309B300();
      uint64_t v50 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v50 + 48))(v46, 1, v47))
      {
        sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v46, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v50 + 32))(__dsta, v46, v47);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v50 + 56))(__dsta, 0, 1, v47);
      }
      *(_OWORD *)&v40[*(int *)(v42 + 32)] = *(_OWORD *)&v41[*(int *)(v42 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v51 + 56))(v40, 0, 1, v42);
    }
    *(_OWORD *)((char *)v26 + v28[11]) = *(_OWORD *)((char *)v27 + v28[11]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

void *assignWithTake for Extension(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unsigned int v12 = v11(v7, 1, v9);
  long long v150 = (unsigned int (*)(char *, uint64_t, void *))v11;
  unsigned int v13 = v11(v8, 1, v9);
  __src = (void *)v9;
  uint64_t v147 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = (void *)((char *)a1 + v21);
  uint64_t v25 = (void *)((char *)a2 + v21);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[9];
  uint64_t v156 = a1;
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  long long v31 = (int *)type metadata accessor for Coding();
  uint64_t v32 = *((void *)v31 - 1);
  int v33 = *(uint64_t (**)(char *, uint64_t, int *))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      sub_23305897C((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Coding);
      goto LABEL_13;
    }
    unsigned int v39 = v11(v29, 1, (uint64_t)__src);
    unsigned int v40 = v11(v30, 1, (uint64_t)__src);
    uint64_t v36 = v156;
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(char *, char *, void *))(v147 + 32))(v29, v30, __src);
        (*(void (**)(char *, void, uint64_t, void *))(v147 + 56))(v29, 0, 1, __src);
LABEL_23:
        uint64_t v42 = v31[5];
        uint64_t v43 = &v29[v42];
        uint64_t v44 = &v30[v42];
        uint64_t v46 = *(void *)v44;
        uint64_t v45 = *((void *)v44 + 1);
        *(void *)uint64_t v43 = v46;
        *((void *)v43 + 1) = v45;
        swift_bridgeObjectRelease();
        uint64_t v47 = v31[6];
        uint64_t v48 = &v29[v47];
        uint64_t v49 = &v30[v47];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = v51;
        *((void *)v48 + 1) = v50;
        swift_bridgeObjectRelease();
        uint64_t v52 = v31[7];
        uint64_t v53 = &v29[v52];
        uint64_t v54 = &v30[v52];
        uint64_t v56 = *(void *)v54;
        uint64_t v55 = *((void *)v54 + 1);
        *(void *)uint64_t v53 = v56;
        *((void *)v53 + 1) = v55;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    else
    {
      if (!v40)
      {
        (*(void (**)(char *, char *, void *))(v147 + 40))(v29, v30, __src);
        goto LABEL_23;
      }
      (*(void (**)(char *, void *))(v147 + 8))(v29, __src);
    }
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_23;
  }
  if (v35)
  {
LABEL_13:
    sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v38 - 8) + 64));
    uint64_t v36 = v156;
    goto LABEL_24;
  }
  uint64_t v36 = v156;
  if (v150(v30, 1, __src))
  {
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, void *))(v147 + 32))(v29, v30, __src);
    (*(void (**)(char *, void, uint64_t, void *))(v147 + 56))(v29, 0, 1, __src);
  }
  *(_OWORD *)&v29[v31[5]] = *(_OWORD *)&v30[v31[5]];
  *(_OWORD *)&v29[v31[6]] = *(_OWORD *)&v30[v31[6]];
  *(_OWORD *)&v29[v31[7]] = *(_OWORD *)&v30[v31[7]];
  (*(void (**)(char *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
LABEL_24:
  uint64_t v57 = a3[10];
  uint64_t v58 = (uint64_t)v36 + v57;
  uint64_t v59 = (char *)a2 + v57;
  if (*(void *)((char *)v36 + v57 + 8) == 1)
  {
LABEL_27:
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *(void *)(v58 + 16) = *((void *)v59 + 2);
    goto LABEL_29;
  }
  uint64_t v60 = *((void *)v59 + 1);
  if (v60 == 1)
  {
    sub_232F042F8(v58);
    goto LABEL_27;
  }
  *(void *)uint64_t v58 = *(void *)v59;
  *(void *)(v58 + 8) = v60;
  swift_bridgeObjectRelease();
  *(void *)(v58 + 16) = *((void *)v59 + 2);
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v61 = a3[11];
  uint64_t v62 = (char *)v36 + v61;
  uint64_t v63 = (void *)((char *)a2 + v61);
  uint64_t v64 = (int *)type metadata accessor for Attachment();
  uint64_t v65 = *((void *)v64 - 1);
  uint64_t v66 = *(uint64_t (**)(void *, uint64_t, int *))(v65 + 48);
  int v67 = v66(v62, 1, v64);
  int v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (v68)
    {
      sub_23305897C((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for Attachment);
      goto LABEL_35;
    }
    uint64_t v75 = v63[1];
    *(void *)uint64_t v62 = *v63;
    *((void *)v62 + 1) = v75;
    swift_bridgeObjectRelease();
    uint64_t v76 = v63[3];
    *((void *)v62 + 2) = v63[2];
    *((void *)v62 + 3) = v76;
    swift_bridgeObjectRelease();
    uint64_t v77 = v64[6];
    uint64_t v78 = &v62[v77];
    uint64_t v79 = (char *)v63 + v77;
    unsigned int v80 = v150(&v62[v77], 1, __src);
    unsigned int v81 = v150(v79, 1, __src);
    if (v80)
    {
      if (!v81)
      {
        (*(void (**)(char *, char *, void *))(v147 + 32))(v78, v79, __src);
        (*(void (**)(char *, void, uint64_t, void *))(v147 + 56))(v78, 0, 1, __src);
        goto LABEL_47;
      }
    }
    else
    {
      if (!v81)
      {
        (*(void (**)(char *, char *, void *))(v147 + 40))(v78, v79, __src);
LABEL_47:
        uint64_t v97 = v64[7];
        uint64_t v98 = &v62[v97];
        uint64_t v99 = (char *)v63 + v97;
        *(_DWORD *)uint64_t v98 = *(_DWORD *)v99;
        v98[4] = v99[4];
        uint64_t v100 = v64[8];
        uint64_t v101 = &v62[v100];
        uint64_t v102 = (void *)((char *)v63 + v100);
        uint64_t v104 = *v102;
        uint64_t v103 = v102[1];
        *(void *)uint64_t v101 = v104;
        *((void *)v101 + 1) = v103;
        swift_bridgeObjectRelease();
        uint64_t v105 = v64[9];
        long long v106 = &v62[v105];
        uint64_t v107 = (void *)((char *)v63 + v105);
        uint64_t v109 = *v107;
        uint64_t v108 = v107[1];
        *(void *)long long v106 = v109;
        *((void *)v106 + 1) = v108;
        swift_bridgeObjectRelease();
        uint64_t v110 = v64[10];
        int v111 = &v62[v110];
        uint64_t v112 = (char *)v63 + v110;
        uint64_t v113 = type metadata accessor for FHIRDateTime();
        uint64_t v114 = *(void *)(v113 - 8);
        uint64_t v115 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v114 + 48);
        int v116 = v115(v111, 1, v113);
        int v117 = v115(v112, 1, v113);
        if (v116)
        {
          if (v117)
          {
            sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v111, v112, *(void *)(*(void *)(v118 - 8) + 64));
          }
          else
          {
            *int v111 = *v112;
            *((void *)v111 + 1) = *((void *)v112 + 1);
            *((_DWORD *)v111 + 4) = *((_DWORD *)v112 + 4);
            *(_OWORD *)(v111 + 24) = *(_OWORD *)(v112 + 24);
            *(_OWORD *)(v111 + 40) = *(_OWORD *)(v112 + 40);
            *((void *)v111 + 7) = *((void *)v112 + 7);
            uint64_t v120 = *(int *)(v113 + 28);
            long long v151 = &v111[v120];
            uint64_t v121 = &v112[v120];
            uint64_t v122 = sub_23309B300();
            uint64_t v123 = *(void *)(v122 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v151, v121, *(void *)(*(void *)(v124 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, unsigned char *, uint64_t))(v123 + 32))(v151, v121, v122);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v151, 0, 1, v122);
            }
            *(_OWORD *)&v111[*(int *)(v113 + 32)] = *(_OWORD *)&v112[*(int *)(v113 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
          }
          uint64_t v36 = v156;
          goto LABEL_66;
        }
        uint64_t v36 = v156;
        if (v117)
        {
          sub_23305897C((uint64_t)v111, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v111, v112, *(void *)(*(void *)(v119 - 8) + 64));
LABEL_66:
          uint64_t v127 = v64[11];
          long long v128 = &v62[v127];
          uint64_t v129 = (void *)((char *)v63 + v127);
          uint64_t v131 = *v129;
          uint64_t v130 = v129[1];
          *(void *)long long v128 = v131;
          *((void *)v128 + 1) = v130;
          swift_bridgeObjectRelease();
          return v36;
        }
        *int v111 = *v112;
        *((void *)v111 + 1) = *((void *)v112 + 1);
        *((_DWORD *)v111 + 4) = *((_DWORD *)v112 + 4);
        if (*((void *)v111 + 7) != 1)
        {
          uint64_t v125 = *((void *)v112 + 7);
          if (v125 != 1)
          {
            v111[24] = v112[24];
            *(_WORD *)(v111 + 25) = *(_WORD *)(v112 + 25);
            *((_DWORD *)v111 + 7) = *((_DWORD *)v112 + 7);
            *((_OWORD *)v111 + 2) = *((_OWORD *)v112 + 2);
            *((void *)v111 + 6) = *((void *)v112 + 6);
            *((void *)v111 + 7) = v125;
            swift_bridgeObjectRelease();
LABEL_69:
            uint64_t v133 = *(int *)(v113 + 28);
            uint64_t v134 = &v111[v133];
            __srcb = &v112[v133];
            uint64_t v135 = sub_23309B300();
            uint64_t v149 = *(void *)(v135 - 8);
            uint64_t v136 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v149 + 48);
            uint64_t v152 = v134;
            LODWORD(v134) = v136(v134, 1, v135);
            int v137 = v136(__srcb, 1, v135);
            if (v134)
            {
              if (!v137)
              {
                (*(void (**)(char *, unsigned char *, uint64_t))(v149 + 32))((char *)v152, __srcb, v135);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v149 + 56))((char *)v152, 0, 1, v135);
                goto LABEL_77;
              }
              sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v139 = *(void *)(*(void *)(v138 - 8) + 64);
              uint64_t v140 = v152;
            }
            else
            {
              if (!v137)
              {
                (*(void (**)(char *, unsigned char *, uint64_t))(v149 + 40))((char *)v152, __srcb, v135);
                goto LABEL_77;
              }
              (*(void (**)(char *, uint64_t))(v149 + 8))((char *)v152, v135);
              sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v139 = *(void *)(*(void *)(v141 - 8) + 64);
              uint64_t v140 = v152;
            }
            memcpy(v140, __srcb, v139);
LABEL_77:
            uint64_t v36 = v156;
            uint64_t v142 = *(int *)(v113 + 32);
            uint64_t v143 = &v111[v142];
            uint64_t v144 = (uint64_t *)&v112[v142];
            uint64_t v146 = *v144;
            uint64_t v145 = v144[1];
            *(void *)uint64_t v143 = v146;
            *((void *)v143 + 1) = v145;
            swift_bridgeObjectRelease();
            goto LABEL_66;
          }
          sub_232F0434C((uint64_t)(v111 + 24));
        }
        long long v126 = *(_OWORD *)(v112 + 40);
        *(_OWORD *)(v111 + 24) = *(_OWORD *)(v112 + 24);
        *(_OWORD *)(v111 + 40) = v126;
        *((void *)v111 + 7) = *((void *)v112 + 7);
        goto LABEL_69;
      }
      (*(void (**)(char *, void *))(v147 + 8))(v78, __src);
    }
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v78, v79, *(void *)(*(void *)(v96 - 8) + 64));
    goto LABEL_47;
  }
  if (v68)
  {
LABEL_35:
    sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
    memcpy(v62, v63, *(void *)(*(void *)(v74 - 8) + 64));
    return v36;
  }
  long long v69 = *((_OWORD *)v63 + 1);
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  *((_OWORD *)v62 + 1) = v69;
  uint64_t v70 = v64[6];
  uint64_t v71 = &v62[v70];
  uint64_t v72 = (char *)v63 + v70;
  if (v150((char *)v63 + v70, 1, __src))
  {
    sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, void *))(v147 + 32))(v71, v72, __src);
    (*(void (**)(char *, void, uint64_t, void *))(v147 + 56))(v71, 0, 1, __src);
  }
  uint64_t v82 = v64[7];
  unsigned int v83 = &v62[v82];
  unsigned int v84 = (char *)v63 + v82;
  *(_DWORD *)unsigned int v83 = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_OWORD *)&v62[v64[8]] = *(_OWORD *)((char *)v63 + v64[8]);
  *(_OWORD *)&v62[v64[9]] = *(_OWORD *)((char *)v63 + v64[9]);
  uint64_t v85 = v64[10];
  uint64_t v86 = &v62[v85];
  uint64_t v87 = (char *)v63 + v85;
  uint64_t v88 = type metadata accessor for FHIRDateTime();
  uint64_t v89 = *(void *)(v88 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    sub_233056788(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    uint64_t v148 = v89;
    *uint64_t v86 = *v87;
    *((void *)v86 + 1) = *((void *)v87 + 1);
    *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
    *(_OWORD *)(v86 + 24) = *(_OWORD *)(v87 + 24);
    *(_OWORD *)(v86 + 40) = *(_OWORD *)(v87 + 40);
    *((void *)v86 + 7) = *((void *)v87 + 7);
    uint64_t v91 = *(int *)(v88 + 28);
    __srca = &v86[v91];
    uint64_t v92 = &v87[v91];
    uint64_t v93 = sub_23309B300();
    uint64_t v94 = *(void *)(v93 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
    {
      sub_233056788(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__srca, v92, *(void *)(*(void *)(v95 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v94 + 32))(__srca, v92, v93);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(__srca, 0, 1, v93);
    }
    uint64_t v36 = v156;
    *(_OWORD *)&v86[*(int *)(v88 + 32)] = *(_OWORD *)&v87[*(int *)(v88 + 32)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v86, 0, 1, v88);
  }
  *(_OWORD *)&v62[v64[11]] = *(_OWORD *)((char *)v63 + v64[11]);
  (*(void (**)(char *, void, uint64_t, int *))(v65 + 56))(v62, 0, 1, v64);
  return v36;
}

uint64_t getEnumTagSinglePayload for Extension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_23305A334);
}

uint64_t sub_23305A334(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84) == a2)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v12 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    return v14(&a1[v12], a2, v10);
  }
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v11 = *(void *)(v13 - 8);
    uint64_t v12 = a3[9];
    goto LABEL_11;
  }
  sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = &a1[a3[11]];
  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for Extension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_23305A55C);
}

char *sub_23305A55C(char *result, uint64_t a2, int a3, int *a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)uint64_t result = a2;
    return result;
  }
  sub_233056788(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  sub_233056788(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_7;
  }
  sub_233056788(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[11]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_23305A764()
{
  sub_233056788(319, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_233056788(319, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_233056788(319, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for Extension.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Extension.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23305AA7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Extension.CodingKeys()
{
  return &type metadata for Extension.CodingKeys;
}

unint64_t sub_23305AAB8()
{
  unint64_t result = qword_2687589E0;
  if (!qword_2687589E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687589E0);
  }
  return result;
}

unint64_t sub_23305AB10()
{
  unint64_t result = qword_2687589E8;
  if (!qword_2687589E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687589E8);
  }
  return result;
}

unint64_t sub_23305AB68()
{
  unint64_t result = qword_2687589F0;
  if (!qword_2687589F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687589F0);
  }
  return result;
}

uint64_t sub_23305ABBC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x63654465756C6176 && a2 == 0xEC0000006C616D69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F4365756C6176 && a2 == 0xE900000000000065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646F4365756C6176 && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002330B5020 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x74744165756C6176 && a2 == 0xEF746E656D686361)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

void sub_23305AF5C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_233056788(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_23305AFD4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_23305AF5C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_23305B030(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_23305B078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (__OFSUB__(0, a3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  unint64_t v7 = 15;
  uint64_t v8 = sub_23309B840();
  if ((v9 & 1) == 0) {
    unint64_t v7 = v8;
  }
  uint64_t v10 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v10 = a4;
  }
  uint64_t v11 = 7;
  if (((a5 >> 60) & ((a4 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  uint64_t v12 = v11 | (v10 << 16);
  uint64_t v13 = sub_23309B840();
  if (v14) {
    unint64_t v15 = v12;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15 >> 14 < v7 >> 14) {
    goto LABEL_14;
  }
}

uint64_t sub_23305B134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AC20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  sub_23309ABE0();
  sub_232F379FC();
  uint64_t v8 = sub_23309BD40();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v34 = v8;
  uint64_t v35 = v10;
  uint64_t v32 = 28252;
  unint64_t v33 = 0xE200000000000000;
  uint64_t v30 = 32;
  unint64_t v31 = 0xE100000000000000;
  uint64_t v11 = sub_23309BD50();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v34 = v11;
  uint64_t v35 = v13;
  uint64_t v32 = 10;
  unint64_t v33 = 0xE100000000000000;
  uint64_t v30 = 32;
  unint64_t v31 = 0xE100000000000000;
  uint64_t v14 = sub_23309BD50();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v34 = v14;
  uint64_t v35 = v16;
  uint64_t v32 = 32;
  unint64_t v33 = 0xE100000000000000;
  uint64_t v17 = sub_23309BD30();
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = (uint64_t *)(v17 + 40);
    uint64_t v20 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v25 = *(v19 - 1);
      uint64_t v24 = *v19;
      uint64_t v26 = HIBYTE(*v19) & 0xF;
      if ((*v19 & 0x2000000000000000) == 0) {
        uint64_t v26 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v26)
      {
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_232F39748(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v20 = v34;
        }
        unint64_t v22 = *(void *)(v20 + 16);
        unint64_t v21 = *(void *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_232F39748(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v34;
        }
        *(void *)(v20 + 16) = v22 + 1;
        unint64_t v23 = v20 + 16 * v22;
        *(void *)(v23 + 32) = v25;
        *(void *)(v23 + 40) = v24;
      }
      v19 += 2;
      --v18;
    }
    while (v18);
  }
  else
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = v20;
  sub_232F51B70();
  sub_232F65EE4();
  uint64_t v28 = sub_23309B6C0();
  swift_release();
  return v28;
}

uint64_t sub_23305B438(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_23309B3D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int v68 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v14 = sub_23309B3E0();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v21 = (char *)&v62 - v18;
  if (a1)
  {
    unint64_t v22 = a3 >> 62;
    uint64_t v23 = 0;
    uint64_t v24 = a2;
    switch(a3 >> 62)
    {
      case 1uLL:
        LODWORD(v25) = HIDWORD(a2) - a2;
        if (__OFSUB__(HIDWORD(a2), a2)) {
          goto LABEL_42;
        }
        uint64_t v25 = (int)v25;
LABEL_10:
        if (v25 < 7)
        {
          if (v22)
          {
            if (v22 == 1)
            {
              if (__OFSUB__(HIDWORD(a2), a2))
              {
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
              uint64_t v23 = HIDWORD(a2) - (int)a2;
            }
            else
            {
              uint64_t v38 = *(void *)(a2 + 16);
              uint64_t v37 = *(void *)(a2 + 24);
              uint64_t v23 = v37 - v38;
              if (__OFSUB__(v37, v38))
              {
LABEL_47:
                __break(1u);
                goto LABEL_48;
              }
            }
          }
          else
          {
            uint64_t v23 = BYTE6(a3);
          }
LABEL_24:
          sub_232FE64C8();
          swift_allocError();
          *(void *)uint64_t v39 = v23;
          *(unsigned char *)(v39 + 8) = 1;
LABEL_37:
          swift_willThrow();
          return v4;
        }
        uint64_t v4 = v20;
        uint64_t v65 = v19;
        if (sub_23305C298(a2, a3))
        {
          if (v22)
          {
            if (v22 == 1)
            {
              uint64_t v32 = (int)a2 + 2;
              uint64_t v33 = a2 >> 32;
            }
            else
            {
              uint64_t v40 = *(void *)(a2 + 16);
              uint64_t v32 = v40 + 2;
              if (__OFADD__(v40, 2))
              {
LABEL_48:
                __break(1u);
                JUMPOUT(0x23305BA98);
              }
              uint64_t v33 = *(void *)(a2 + 24);
            }
          }
          else
          {
            uint64_t v33 = BYTE6(a3);
            uint64_t v32 = 2;
          }
          if (!__OFSUB__(v33, 4))
          {
            uint64_t v64 = v3;
            if (v33 - 4 >= v32)
            {
              uint64_t v41 = sub_23309B000();
              unint64_t v43 = v42;
              (*(void (**)(char *, void, uint64_t))(v4 + 104))(v17, *MEMORY[0x263F8CE20], v65);
              uint64_t v44 = (uint64_t)v68;
              (*(void (**)(char *, void, uint64_t))(v9 + 104))(v68, *MEMORY[0x263F8CE08], v8);
              uint64_t v62 = v41;
              unint64_t v63 = v43;
              uint64_t v45 = v64;
              uint64_t v46 = sub_23305BE00((uint64_t)v17, v44, v41, v43);
              if (v45)
              {
                (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v44, v8);
                uint64_t v48 = *(void (**)(char *, uint64_t))(v4 + 8);
                v4 += 8;
                v48(v17, v65);
                sub_232E9AA4C(v62, v63);
              }
              else
              {
                uint64_t v49 = v46;
                unint64_t v50 = v47;
                uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
                uint64_t v64 = v24;
                v51(v44, v8);
                (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v65);
                sub_232E9AA4C(v62, v63);
                uint64_t v52 = sub_23305C3E8(v49, v50);
                unint64_t v54 = v53;
                uint64_t v55 = v64;
                sub_232E9A9F4(v64, a3);
                sub_232F3F978(4, v55, a3, &v66);
                uint64_t v4 = v49;
                uint64_t v56 = v66;
                unint64_t v57 = v67;
                char v58 = sub_232FFE1E4(v52, v54, v66, v67);
                sub_232E9AA4C(v52, v54);
                sub_232E9AA4C(v56, v57);
                if ((v58 & 1) == 0)
                {
                  sub_232FE64C8();
                  swift_allocError();
                  *(void *)uint64_t v59 = 0;
                  *(unsigned char *)(v59 + 8) = 2;
                  swift_willThrow();
                  sub_232E9AA4C(v4, v50);
                }
              }
              return v4;
            }
            goto LABEL_45;
          }
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        sub_232F63320();
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_2330A1EB0;
        if (v22)
        {
          if (v22 != 1)
          {
            *(unsigned char *)(v34 + 32) = sub_23309B080();
            if (!__OFADD__(*(void *)(v24 + 16), 1)) {
              goto LABEL_36;
            }
            goto LABEL_41;
          }
          uint64_t v35 = (int)v24;
          char v36 = sub_23309B080();
        }
        else
        {
          char v36 = sub_23309B080();
          uint64_t v35 = 0;
        }
        *(unsigned char *)(v34 + 32) = v36;
        if (!__OFADD__(v35, 1))
        {
LABEL_36:
          *(unsigned char *)(v34 + 33) = sub_23309B080();
          sub_232FE64C8();
          swift_allocError();
          *(void *)uint64_t v60 = v34;
          *(unsigned char *)(v60 + 8) = 0;
          goto LABEL_37;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      case 2uLL:
        uint64_t v30 = *(void *)(a2 + 16);
        uint64_t v29 = *(void *)(a2 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v25 = v29 - v30;
        if (!v31) {
          goto LABEL_10;
        }
        goto LABEL_43;
      case 3uLL:
        goto LABEL_24;
      default:
        uint64_t v25 = BYTE6(a3);
        goto LABEL_10;
    }
  }
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  (*(void (**)(char *, void, uint64_t))(v20 + 104))((char *)&v62 - v18, *MEMORY[0x263F8CE20], v19);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v13, *MEMORY[0x263F8CE08], v8);
  uint64_t v28 = sub_23305BE00((uint64_t)v21, (uint64_t)v13, a2, a3);
  if (!v3) {
    uint64_t v4 = v28;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v26);
  return v4;
}

uint64_t CompressionAlgorithm.decompress(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_23309B3D0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309B3E0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8CE20], v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8CE08], v4);
  uint64_t v12 = sub_23305BE00((uint64_t)v11, (uint64_t)v7, a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t Data.decompress(using:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_23305BCD4(a1, a2, a3, MEMORY[0x263F8CE08]);
}

uint64_t Data.compress(using:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_23305BCD4(a1, a2, a3, MEMORY[0x263F8CE10]);
}

uint64_t sub_23305BCD4(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v8 = sub_23309B3D0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *a4, v8);
  uint64_t v12 = sub_23305BE00(a1, (uint64_t)v11, a2, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

uint64_t sub_23305BE00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v30 = a4;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v5 = sub_23309B3E0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_23309B3D0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2330A6940;
  uint64_t v14 = v13 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v32, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
  sub_23309B3B0();
  swift_allocObject();
  swift_retain();
  unint64_t v15 = v36;
  sub_23309B3C0();
  if (v15)
  {
    swift_release();
  }
  else
  {
    uint64_t v33 = v13 + 16;
    unint64_t v16 = v30;
    uint64_t v17 = 0;
    uint64_t v29 = v13;
    switch(v30 >> 62)
    {
      case 1uLL:
        uint64_t v17 = (int)a3;
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(a3 + 16);
        break;
      default:
        break;
    }
    uint64_t v31 = BYTE6(v30);
    uint64_t v32 = a3 >> 32;
    unint64_t v36 = v30 >> 62;
    do
    {
      uint64_t v18 = 0;
      switch(v36)
      {
        case 0uLL:
          uint64_t v18 = v31;
          break;
        case 1uLL:
          uint64_t v18 = v32;
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(a3 + 24);
          break;
        case 3uLL:
          break;
        default:
          JUMPOUT(0);
      }
      BOOL v19 = __OFSUB__(v18, v17);
      uint64_t v20 = v18 - v17;
      if (v19)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        JUMPOUT(0x23305C198);
      }
      if (v20 >= 512) {
        uint64_t v21 = 512;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = v17 + v21;
      if (__OFADD__(v17, v21)) {
        goto LABEL_21;
      }
      if (v22 < v17) {
        goto LABEL_22;
      }
      uint64_t v23 = a3;
      unint64_t v24 = v16;
      uint64_t v25 = sub_23309B060();
      unint64_t v27 = v26;
      uint64_t v34 = v25;
      unint64_t v35 = v26;
      sub_232E9A9F4(v25, v26);
      sub_232F639B8();
      sub_23309B3A0();
      sub_232E9AA4C(v25, v27);
      sub_232E9AA4C(v25, v27);
      uint64_t v17 = v22;
      unint64_t v16 = v24;
      a3 = v23;
    }
    while (v21);
    swift_release();
    swift_beginAccess();
    uint64_t v14 = *(void *)(v29 + 16);
    sub_232E9A9F4(v14, *(void *)(v29 + 24));
    swift_release();
  }
  return v14;
}

uint64_t sub_23305C1B8()
{
  sub_232E9AA4C(*(void *)(v0 + 16), *(void *)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23305C1F0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    uint64_t v3 = result;
    swift_beginAccess();
    sub_232E9A9F4(v3, a2);
    sub_23309B050();
    swift_endAccess();
    return sub_232F3F15C(v3, a2);
  }
  return result;
}

uint64_t sub_23305C27C(uint64_t a1, unint64_t a2)
{
  return sub_23305C1F0(a1, a2);
}

BOOL sub_23305C298(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  BOOL result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_22;
      }
      uint64_t v5 = (int)v5;
      if (v5 < 2) {
        return 0;
      }
LABEL_6:
      if (v2)
      {
        if (v2 == 1)
        {
          uint64_t v9 = (int)a1;
          __int16 v10 = sub_23309B080();
        }
        else
        {
          __int16 v10 = sub_23309B080();
          uint64_t v9 = *(void *)(a1 + 16);
        }
      }
      else
      {
        __int16 v10 = sub_23309B080();
        uint64_t v9 = 0;
      }
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x23305C3D8);
      }
      unsigned __int8 v11 = sub_23309B080();
      if ((v10 & 0x8F) != 8) {
        return 0;
      }
      return (v11 & 0x20) == 0 && (unsigned __int16)(31711 * (v11 | (unsigned __int16)(v10 << 8))) < 0x843u;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_23;
    case 3uLL:
      return result;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_23305C3E8(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uLong v4 = adler32(0, 0, 0);
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_232E9A9F4(a1, a2);
      int v7 = sub_23305C81C((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, v4);
      goto LABEL_8;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      sub_232E9A9F4(a1, a2);
      swift_retain();
      swift_retain();
      int v7 = sub_23305C81C(v5, v6, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, v4);
      swift_release();
      swift_release();
LABEL_8:
      sub_232E9AA4C(a1, a2);
      goto LABEL_9;
    case 3uLL:
      memset(buf, 0, 14);
      goto LABEL_5;
    default:
      *(void *)buf = a1;
      *(_WORD *)&buf[8] = a2;
      buf[10] = BYTE2(a2);
      buf[11] = BYTE3(a2);
      buf[12] = BYTE4(a2);
      buf[13] = BYTE5(a2);
LABEL_5:
      sub_23305C684(buf, v4, a1, a2, &v11);
      sub_232E9AA4C(a1, a2);
      int v7 = v11;
LABEL_9:
      sub_232F63320();
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_2330A72F0;
      *(unsigned char *)(v8 + 32) = HIBYTE(v7);
      *(unsigned char *)(v8 + 33) = BYTE2(v7);
      *(unsigned char *)(v8 + 34) = BYTE1(v7);
      *(unsigned char *)(v8 + 35) = v7;
      uint64_t v9 = sub_233082194(v8);
      swift_bridgeObjectRelease();
      return v9;
  }
}

uLong sub_23305C684@<X0>(Bytef *buf@<X0>, uLong adler@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uLong *a5@<X8>)
{
  unint64_t v6 = a4 >> 62;
  if (buf)
  {
    switch((int)v6)
    {
      case 1:
        if (!__OFSUB__(HIDWORD(a3), a3)) {
          break;
        }
        __break(1u);
LABEL_6:
        if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
          break;
        }
        goto LABEL_17;
      case 2:
        goto LABEL_6;
      default:
        break;
    }
  }
  LODWORD(v7) = 0;
  switch((int)v6)
  {
    case 0:
      LODWORD(v7) = BYTE6(a4);
      goto LABEL_14;
    case 1:
      LODWORD(v7) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        sub_23309BF60();
        __break(1u);
        JUMPOUT(0x23305C7FCLL);
      }
      unint64_t v7 = (int)v7;
LABEL_12:
      if ((v7 & 0x8000000000000000) != 0 || HIDWORD(v7)) {
        goto LABEL_18;
      }
LABEL_14:
      uLong result = adler32(adler, buf, v7);
      *a5 = result;
      return result;
    case 2:
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v8 = *(void *)(a3 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      unint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_16;
    case 3:
      goto LABEL_14;
    default:
      JUMPOUT(0);
  }
}

uLong sub_23305C81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uLong a6)
{
  uLong result = sub_23309ACB0();
  uint64_t v13 = (Bytef *)result;
  if (result)
  {
    uLong result = sub_23309ACD0();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_23309ACC0();
  uLong result = sub_23305C684(v13, a6, a4, a5, &v14);
  if (!v6) {
    return v14;
  }
  return result;
}

uint64_t Attachment.contentType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.contentType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Attachment.contentType.modify())()
{
  return nullsub_1;
}

uint64_t Attachment.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Attachment.data.modify())()
{
  return nullsub_1;
}

uint64_t Attachment.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Attachment();
  return sub_23305EA54(v1 + *(int *)(v3 + 24), a1, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
}

uint64_t Attachment.url.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Attachment();
  return sub_23305EAC0(a1, v1 + *(int *)(v3 + 24), (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
}

uint64_t (*Attachment.url.modify())(void)
{
  return nullsub_1;
}

unint64_t Attachment.size.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for Attachment() + 28));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t Attachment.size.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Attachment();
  uint64_t v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*Attachment.size.modify())(void)
{
  return nullsub_1;
}

uint64_t Attachment.hash.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Attachment() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.hash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Attachment() + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.hash.modify())(void)
{
  return nullsub_1;
}

uint64_t Attachment.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Attachment() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Attachment() + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.title.modify())(void)
{
  return nullsub_1;
}

uint64_t Attachment.creation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Attachment();
  return sub_23305EA54(v1 + *(int *)(v3 + 40), a1, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t Attachment.creation.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Attachment();
  return sub_23305EAC0(a1, v1 + *(int *)(v3 + 40), &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t (*Attachment.creation.modify())(void)
{
  return nullsub_1;
}

uint64_t Attachment.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Attachment() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Attachment.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Attachment() + 44));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Attachment.language.modify())(void)
{
  return nullsub_1;
}

uint64_t Attachment.hash(into:)()
{
  uint64_t v1 = sub_23309AF80();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v10 - v6;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 24))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v8 = (int *)type metadata accessor for Attachment();
  sub_23305EA54(v0 + v8[6], (uint64_t)v7, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_23309C3F0();
    sub_233061520(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  if (*(unsigned char *)(v0 + v8[7] + 4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C400();
  }
  if (*(void *)(v0 + v8[8] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*(void *)(v0 + v8[9] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  sub_232EB2E40();
  if (!*(void *)(v0 + v8[11] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23305D2CC()
{
  uint64_t result = 0x54746E65746E6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1635017060;
      break;
    case 2:
      uint64_t result = 7107189;
      break;
    case 3:
      uint64_t result = 1702521203;
      break;
    case 4:
      uint64_t result = 1752392040;
      break;
    case 5:
      uint64_t result = 0x656C746974;
      break;
    case 6:
      uint64_t result = 0x6E6F697461657263;
      break;
    case 7:
      uint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23305D3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233061144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23305D3D8(uint64_t a1)
{
  unint64_t v2 = sub_23305EB2C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_23305D414(uint64_t a1)
{
  unint64_t v2 = sub_23305EB2C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Attachment.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_23305EB80(0, &qword_268758A08, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v13[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23305EB2C();
  sub_23309C480();
  v13[15] = 0;
  sub_23309C170();
  if (!v2)
  {
    v13[14] = 1;
    sub_23309C110();
    uint64_t v10 = type metadata accessor for Attachment();
    v13[13] = 2;
    sub_23309AF80();
    sub_233061520(&qword_268757720, MEMORY[0x263F06EA8]);
    sub_23309C150();
    char v11 = *(unsigned char *)(v3 + *(int *)(v10 + 28) + 4);
    v13[12] = 3;
    void v13[8] = v11;
    sub_23309C160();
    v13[7] = 4;
    sub_23309C110();
    v13[6] = 5;
    sub_23309C110();
    v13[5] = 6;
    type metadata accessor for FHIRDateTime();
    sub_233061520(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    v13[4] = 7;
    sub_23309C110();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Attachment.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Attachment.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v54 = (char *)&v51 - v4;
  sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v53 = (char *)&v51 - v6;
  sub_23305EB80(0, &qword_268758A18, MEMORY[0x263F8E040]);
  uint64_t v57 = v7;
  uint64_t v55 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = type metadata accessor for Attachment();
  char v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  uint64_t v14 = (uint64_t)&v13[v11[8]];
  uint64_t v15 = sub_23309AF80();
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v60 = v14;
  v16(v14, 1, 1, v15);
  uint64_t v17 = &v13[v11[9]];
  *(_DWORD *)uint64_t v17 = 0;
  void v17[4] = 1;
  uint64_t v18 = &v13[v11[10]];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  unint64_t v63 = v18;
  BOOL v19 = &v13[v11[11]];
  *(void *)BOOL v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v62 = v19;
  uint64_t v20 = (uint64_t)&v13[v11[12]];
  uint64_t v21 = type metadata accessor for FHIRDateTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v22 = v11[13];
  uint64_t v64 = (uint64_t *)v13;
  uint64_t v23 = &v13[v22];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  char v58 = v23;
  uint64_t v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23305EB2C();
  uint64_t v56 = v9;
  unint64_t v24 = v61;
  sub_23309C460();
  if (v24)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    uint64_t v29 = v60;
    swift_bridgeObjectRelease();
    sub_23305EBE4(v29, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23305EBE4(v20, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v61 = v17;
    uint64_t v51 = v21;
    uint64_t v26 = (uint64_t)v53;
    uint64_t v25 = (uint64_t)v54;
    char v72 = 0;
    uint64_t v27 = sub_23309C0A0();
    uint64_t v28 = v20;
    uint64_t v31 = v64;
    *uint64_t v64 = v27;
    v31[1] = v32;
    char v71 = 1;
    void v31[2] = sub_23309C040();
    void v31[3] = v33;
    char v70 = 2;
    sub_233061520(&qword_268757730, MEMORY[0x263F06EA8]);
    sub_23309C080();
    sub_23305EAC0(v26, v60, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    char v69 = 3;
    uint64_t v34 = sub_23309C090();
    unint64_t v35 = v61;
    *(_DWORD *)uint64_t v61 = v34;
    v35[4] = BYTE4(v34) & 1;
    char v68 = 4;
    uint64_t v36 = sub_23309C040();
    uint64_t v38 = v37;
    uint64_t v39 = (uint64_t *)v63;
    swift_bridgeObjectRelease();
    *uint64_t v39 = v36;
    v39[1] = v38;
    char v67 = 5;
    uint64_t v40 = sub_23309C040();
    uint64_t v42 = v41;
    unint64_t v43 = (uint64_t *)v62;
    swift_bridgeObjectRelease();
    *unint64_t v43 = v40;
    v43[1] = v42;
    char v66 = 6;
    sub_233061520(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    sub_23305EAC0(v25, v28, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    char v65 = 7;
    uint64_t v44 = sub_23309C040();
    uint64_t v46 = v58;
    uint64_t v45 = (uint64_t)v59;
    uint64_t v47 = v44;
    uint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
    swift_bridgeObjectRelease();
    void *v46 = v47;
    v46[1] = v49;
    unint64_t v50 = v64;
    sub_23305EC40((uint64_t)v64, v52);
    __swift_destroy_boxed_opaque_existential_1(v45);
    return sub_232FDDBD0((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Attachment);
  }
}

uint64_t sub_23305DEC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Attachment.init(from:)(a1, a2);
}

uint64_t sub_23305DED8(void *a1)
{
  return Attachment.encode(to:)(a1);
}

uint64_t sub_23305DEF0()
{
  return sub_23309C420();
}

uint64_t sub_23305DF34()
{
  return sub_23309C420();
}

uint64_t _s23HealthRecordsExtraction10AttachmentV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  uint64_t v102 = *(void *)(v4 - 8);
  uint64_t v103 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v98 = (uint64_t)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233061460(0, (unint64_t *)&qword_268756550, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v100 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v92 - v7;
  sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v99 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v104 = (uint64_t)&v92 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v101 = (uint64_t)&v92 - v14;
  uint64_t v15 = sub_23309AF80();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v105 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_233061460(0, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v92 - v21;
  sub_23305F224(0, (unint64_t *)&qword_268756520, v18);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v92 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v92 - v30;
  if (*a1 == *a2 && a1[1] == a2[1] || (v32 = sub_23309C220(), uint64_t result = 0, (v32 & 1) != 0))
  {
    uint64_t v34 = a1[3];
    uint64_t v35 = a2[3];
    if (v34)
    {
      if (!v35) {
        return 0;
      }
      if (a1[2] != a2[2] || v34 != v35)
      {
        char v36 = sub_23309C220();
        uint64_t result = 0;
        if ((v36 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v35)
    {
      return 0;
    }
    uint64_t v97 = v26;
    uint64_t v93 = v8;
    uint64_t v37 = v16;
    uint64_t v38 = type metadata accessor for Attachment();
    uint64_t v39 = *(int *)(v38 + 24);
    uint64_t v94 = a1;
    uint64_t v40 = (uint64_t)a1 + v39;
    uint64_t v41 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_23305EA54(v40, (uint64_t)v31, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    uint64_t v95 = (int *)v38;
    uint64_t v96 = a2;
    uint64_t v42 = *(int *)(v38 + 24);
    uint64_t v43 = v37;
    sub_23305EA54((uint64_t)a2 + v42, (uint64_t)v29, (unint64_t *)&qword_268756520, v41);
    uint64_t v44 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_23305EA54((uint64_t)v31, (uint64_t)v22, (unint64_t *)&qword_268756520, v41);
    sub_23305EA54((uint64_t)v29, v44, (unint64_t *)&qword_268756520, v41);
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v45((uint64_t)v22, 1, v15) == 1)
    {
      uint64_t v46 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
      sub_23305EBE4((uint64_t)v29, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      sub_23305EBE4((uint64_t)v31, (unint64_t *)&qword_268756520, v46);
      if (v45(v44, 1, v15) == 1)
      {
        sub_23305EBE4((uint64_t)v22, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_21:
        uint64_t v59 = v94;
        char v58 = v95;
        uint64_t v60 = v95[7];
        uint64_t v61 = (_DWORD *)((char *)v94 + v60);
        char v62 = *((unsigned char *)v94 + v60 + 4);
        unint64_t v63 = v96;
        uint64_t v64 = (_DWORD *)((char *)v96 + v60);
        int v65 = *((unsigned __int8 *)v96 + v60 + 4);
        if (v62)
        {
          uint64_t v66 = (uint64_t)v93;
          if (!v65) {
            return 0;
          }
        }
        else
        {
          if (*v61 != *v64) {
            LOBYTE(v65) = 1;
          }
          uint64_t v66 = (uint64_t)v93;
          if (v65) {
            return 0;
          }
        }
        uint64_t v67 = v95[8];
        char v68 = (void *)((char *)v94 + v67);
        uint64_t v69 = *(void *)((char *)v94 + v67 + 8);
        char v70 = (void *)((char *)v96 + v67);
        uint64_t v71 = v70[1];
        if (v69)
        {
          if (!v71) {
            return 0;
          }
          if (*v68 != *v70 || v69 != v71)
          {
            char v72 = sub_23309C220();
            uint64_t result = 0;
            if ((v72 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v71)
        {
          return 0;
        }
        uint64_t v73 = v58[9];
        uint64_t v74 = (void *)((char *)v59 + v73);
        uint64_t v75 = *(void *)((char *)v59 + v73 + 8);
        uint64_t v76 = (void *)((char *)v63 + v73);
        uint64_t v77 = v76[1];
        if (v75)
        {
          if (!v77) {
            return 0;
          }
          if (*v74 != *v76 || v75 != v77)
          {
            char v78 = sub_23309C220();
            uint64_t result = 0;
            if ((v78 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v77)
        {
          return 0;
        }
        uint64_t v79 = v101;
        sub_23305EA54((uint64_t)v59 + v58[10], v101, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v80 = v104;
        sub_23305EA54((uint64_t)v63 + v58[10], v104, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v81 = v66 + *(int *)(v100 + 48);
        sub_23305EA54(v79, v66, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_23305EA54(v80, v81, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v82 = v103;
        unsigned int v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
        if (v83(v66, 1, v103) == 1)
        {
          sub_23305EBE4(v80, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_23305EBE4(v79, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v83(v81, 1, v82) == 1)
          {
            sub_23305EBE4(v66, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_48:
            uint64_t v87 = v95[11];
            uint64_t v88 = (void *)((char *)v59 + v87);
            uint64_t v89 = *(void *)((char *)v59 + v87 + 8);
            uint64_t v90 = (void *)((char *)v96 + v87);
            uint64_t v91 = v90[1];
            if (v89)
            {
              if (v91 && (*v88 == *v90 && v89 == v91 || (sub_23309C220() & 1) != 0)) {
                return 1;
              }
            }
            else if (!v91)
            {
              return 1;
            }
            return 0;
          }
        }
        else
        {
          uint64_t v84 = v99;
          sub_23305EA54(v66, v99, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v83(v81, 1, v82) != 1)
          {
            uint64_t v85 = v98;
            sub_2330007B4(v81, v98);
            char v86 = static FHIRDateTime.== infix(_:_:)(v84, v85);
            sub_232FDDBD0(v85, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_23305EBE4(v104, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_23305EBE4(v79, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232FDDBD0(v84, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_23305EBE4(v66, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v86 & 1) == 0) {
              return 0;
            }
            goto LABEL_48;
          }
          sub_23305EBE4(v104, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_23305EBE4(v79, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232FDDBD0(v84, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        }
        uint64_t v49 = &qword_268756550;
        unint64_t v50 = &qword_268756548;
        uint64_t v51 = type metadata accessor for FHIRDateTime;
        uint64_t v52 = v66;
LABEL_17:
        sub_2330614C4(v52, (unint64_t *)v49, v50, (void (*)(uint64_t))v51);
        return 0;
      }
    }
    else
    {
      uint64_t v47 = (uint64_t)v97;
      sub_23305EA54((uint64_t)v22, (uint64_t)v97, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if (v45(v44, 1, v15) != 1)
      {
        uint64_t v53 = v47;
        unint64_t v54 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v105, v44, v15);
        sub_233061520((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
        char v55 = sub_23309B6D0();
        uint64_t v56 = *(void (**)(char *, uint64_t))(v43 + 8);
        v56(v54, v15);
        uint64_t v57 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
        sub_23305EBE4((uint64_t)v29, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        sub_23305EBE4((uint64_t)v31, (unint64_t *)&qword_268756520, v57);
        v56((char *)v53, v15);
        sub_23305EBE4((uint64_t)v22, (unint64_t *)&qword_268756520, v57);
        if ((v55 & 1) == 0) {
          return 0;
        }
        goto LABEL_21;
      }
      uint64_t v48 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
      sub_23305EBE4((uint64_t)v29, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      sub_23305EBE4((uint64_t)v31, (unint64_t *)&qword_268756520, v48);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v15);
    }
    uint64_t v49 = &qword_268756528;
    unint64_t v50 = (unint64_t *)&qword_268756520;
    uint64_t v51 = (uint64_t (*)())MEMORY[0x263F06EA8];
    uint64_t v52 = (uint64_t)v22;
    goto LABEL_17;
  }
  return result;
}

uint64_t type metadata accessor for Attachment()
{
  uint64_t result = qword_268758A30;
  if (!qword_268758A30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23305EA54(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23305F224(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23305EAC0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_23305F224(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

unint64_t sub_23305EB2C()
{
  unint64_t result = qword_268758A10;
  if (!qword_268758A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A10);
  }
  return result;
}

void sub_23305EB80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_23305EB2C();
    unint64_t v7 = a3(a1, &type metadata for Attachment.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_23305EBE4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_23305F224(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23305EC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Attachment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23305ECA4(void *a1)
{
  a1[1] = sub_233061520(&qword_2687567E8, (void (*)(uint64_t))type metadata accessor for Attachment);
  a1[2] = sub_233061520(&qword_268756A10, (void (*)(uint64_t))type metadata accessor for Attachment);
  uint64_t result = sub_233061520(&qword_268758A20, (void (*)(uint64_t))type metadata accessor for Attachment);
  a1[3] = result;
  return result;
}

uint64_t sub_23305ED50()
{
  return sub_233061520(&qword_268758A28, (void (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t *initializeBufferWithCopyOfBuffer for Attachment(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = sub_23309AF80();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = (uint64_t *)((char *)v4 + v17);
    uint64_t v21 = (uint64_t *)((char *)a2 + v17);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    __dsta = a3;
    uint64_t v25 = (uint64_t *)((char *)v4 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (char *)v4 + v24;
    uint64_t v29 = (char *)a2 + v24;
    uint64_t v30 = type metadata accessor for FHIRDateTime();
    uint64_t v31 = *(void *)(v30 - 8);
    char v32 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      *uint64_t v28 = *v29;
      *((void *)v28 + 1) = *((void *)v29 + 1);
      *((_DWORD *)v28 + 4) = *((_DWORD *)v29 + 4);
      uint64_t v34 = *((void *)v29 + 7);
      if (v34 == 1)
      {
        long long v35 = *(_OWORD *)(v29 + 40);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 40) = v35;
        *((void *)v28 + 7) = *((void *)v29 + 7);
      }
      else
      {
        v28[24] = v29[24];
        *(_WORD *)(v28 + 25) = *(_WORD *)(v29 + 25);
        *(_OWORD *)(v28 + 28) = *(_OWORD *)(v29 + 28);
        *((_DWORD *)v28 + 11) = *((_DWORD *)v29 + 11);
        *((void *)v28 + 6) = *((void *)v29 + 6);
        *((void *)v28 + 7) = v34;
        swift_bridgeObjectRetain();
      }
      uint64_t v36 = v30;
      uint64_t v37 = *(int *)(v30 + 28);
      uint64_t v38 = &v28[v37];
      uint64_t v39 = &v29[v37];
      uint64_t v40 = sub_23309B300();
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      uint64_t v43 = *(int *)(v36 + 32);
      uint64_t v44 = &v28[v43];
      uint64_t v45 = &v29[v43];
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      uint64_t v47 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56);
      swift_bridgeObjectRetain();
      v47(v28, 0, 1, v36);
    }
    uint64_t v48 = __dsta[11];
    uint64_t v49 = (uint64_t *)((char *)v4 + v48);
    unint64_t v50 = (uint64_t *)((char *)a2 + v48);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    swift_bridgeObjectRetain();
  }
  return v4;
}

void sub_23305F224(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for Attachment(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 40);
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    if (*(void *)(v7 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = v7 + *(int *)(v8 + 28);
    uint64_t v10 = sub_23309B300();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Attachment(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = (void *)((char *)a1 + v15);
  uint64_t v19 = (void *)((char *)a2 + v15);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = (void *)((char *)a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (char *)a1 + v22;
  uint64_t v27 = (char *)a2 + v22;
  uint64_t v28 = type metadata accessor for FHIRDateTime();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    *uint64_t v26 = *v27;
    *((void *)v26 + 1) = *((void *)v27 + 1);
    *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
    uint64_t v32 = *((void *)v27 + 7);
    if (v32 == 1)
    {
      long long v33 = *(_OWORD *)(v27 + 40);
      *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
      *(_OWORD *)(v26 + 40) = v33;
      *((void *)v26 + 7) = *((void *)v27 + 7);
    }
    else
    {
      v26[24] = v27[24];
      *(_WORD *)(v26 + 25) = *(_WORD *)(v27 + 25);
      *(_OWORD *)(v26 + 28) = *(_OWORD *)(v27 + 28);
      *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
      *((void *)v26 + 6) = *((void *)v27 + 6);
      *((void *)v26 + 7) = v32;
      swift_bridgeObjectRetain();
    }
    uint64_t v34 = *(int *)(v28 + 28);
    long long v35 = &v26[v34];
    uint64_t v36 = &v27[v34];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v40 = *(int *)(v28 + 32);
    uint64_t v41 = &v26[v40];
    uint64_t v42 = &v27[v40];
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56);
    swift_bridgeObjectRetain();
    v44(v26, 0, 1, v28);
  }
  uint64_t v45 = a3[11];
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  uint64_t v48 = v47[1];
  void *v46 = *v47;
  v46[1] = v48;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Attachment(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  int v18 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[10];
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for FHIRDateTime();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_232FDDBD0(v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_13;
    }
    *(unsigned char *)uint64_t v26 = *v27;
    *(void *)(v26 + 8) = *((void *)v27 + 1);
    *(_WORD *)(v26 + 16) = *((_WORD *)v27 + 8);
    *(_WORD *)(v26 + 18) = *((_WORD *)v27 + 9);
    uint64_t v37 = (long long *)(v26 + 24);
    uint64_t v38 = (long long *)(v27 + 24);
    uint64_t v39 = *((void *)v27 + 7);
    if (*(void *)(v26 + 56) == 1)
    {
      if (v39 == 1)
      {
        long long v40 = *v38;
        long long v41 = *(_OWORD *)(v27 + 40);
        *(void *)(v26 + 56) = *((void *)v27 + 7);
        *uint64_t v37 = v40;
        *(_OWORD *)(v26 + 40) = v41;
      }
      else
      {
        *(unsigned char *)(v26 + 24) = v27[24];
        *(unsigned char *)(v26 + 25) = v27[25];
        *(unsigned char *)(v26 + 26) = v27[26];
        long long v54 = *(_OWORD *)(v27 + 28);
        *(_DWORD *)(v26 + 44) = *((_DWORD *)v27 + 11);
        *(_OWORD *)(v26 + 28) = v54;
        *(void *)(v26 + 48) = *((void *)v27 + 6);
        *(void *)(v26 + 56) = *((void *)v27 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v39 == 1)
    {
      sub_232F0434C(v26 + 24);
      uint64_t v52 = *((void *)v27 + 7);
      long long v53 = *(_OWORD *)(v27 + 40);
      *uint64_t v37 = *v38;
      *(_OWORD *)(v26 + 40) = v53;
      *(void *)(v26 + 56) = v52;
    }
    else
    {
      *(unsigned char *)(v26 + 24) = v27[24];
      *(unsigned char *)(v26 + 25) = v27[25];
      *(unsigned char *)(v26 + 26) = v27[26];
      *(_DWORD *)(v26 + 28) = *((_DWORD *)v27 + 7);
      *(_WORD *)(v26 + 32) = *((_WORD *)v27 + 16);
      *(_WORD *)(v26 + 34) = *((_WORD *)v27 + 17);
      *(_WORD *)(v26 + 36) = *((_WORD *)v27 + 18);
      *(_WORD *)(v26 + 38) = *((_WORD *)v27 + 19);
      *(_WORD *)(v26 + 40) = *((_WORD *)v27 + 20);
      *(_WORD *)(v26 + 42) = *((_WORD *)v27 + 21);
      *(_WORD *)(v26 + 44) = *((_WORD *)v27 + 22);
      *(_WORD *)(v26 + 46) = *((_WORD *)v27 + 23);
      *(void *)(v26 + 48) = *((void *)v27 + 6);
      *(void *)(v26 + 56) = *((void *)v27 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v55 = *(int *)(v28 + 28);
    uint64_t v56 = (void *)(v26 + v55);
    __dsta = &v27[v55];
    uint64_t v57 = sub_23309B300();
    uint64_t v71 = *(void *)(v57 - 8);
    char v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v71 + 48);
    char v72 = v56;
    LODWORD(v56) = v58(v56, 1, v57);
    int v59 = v58(__dsta, 1, v57);
    if (v56)
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v71 + 16))(v72, __dsta, v57);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v57);
        goto LABEL_35;
      }
      sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v61 = *(void *)(*(void *)(v60 - 8) + 64);
      char v62 = v72;
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v71 + 24))(v72, __dsta, v57);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v71 + 8))(v72, v57);
      sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v61 = *(void *)(*(void *)(v63 - 8) + 64);
      char v62 = v72;
    }
    memcpy(v62, __dsta, v61);
LABEL_35:
    uint64_t v64 = *(int *)(v28 + 32);
    int v65 = (void *)(v26 + v64);
    uint64_t v66 = &v27[v64];
    void *v65 = *(void *)v66;
    v65[1] = *((void *)v66 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (v32)
  {
LABEL_13:
    sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v26, v27, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_36;
  }
  *(unsigned char *)uint64_t v26 = *v27;
  uint64_t v33 = *((void *)v27 + 1);
  *(_DWORD *)(v26 + 16) = *((_DWORD *)v27 + 4);
  *(void *)(v26 + 8) = v33;
  if (*((void *)v27 + 7) == 1)
  {
    long long v34 = *(_OWORD *)(v27 + 24);
    long long v35 = *(_OWORD *)(v27 + 40);
    *(void *)(v26 + 56) = *((void *)v27 + 7);
    *(_OWORD *)(v26 + 24) = v34;
    *(_OWORD *)(v26 + 40) = v35;
  }
  else
  {
    *(unsigned char *)(v26 + 24) = v27[24];
    *(unsigned char *)(v26 + 25) = v27[25];
    *(unsigned char *)(v26 + 26) = v27[26];
    long long v42 = *(_OWORD *)(v27 + 28);
    *(_DWORD *)(v26 + 44) = *((_DWORD *)v27 + 11);
    *(_OWORD *)(v26 + 28) = v42;
    *(void *)(v26 + 48) = *((void *)v27 + 6);
    *(void *)(v26 + 56) = *((void *)v27 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v43 = *(int *)(v28 + 28);
  __dst = (void *)(v26 + v43);
  uint64_t v44 = &v27[v43];
  uint64_t v45 = sub_23309B300();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(__dst, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v46 + 16))(__dst, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
  }
  uint64_t v48 = *(int *)(v28 + 32);
  uint64_t v49 = (void *)(v26 + v48);
  unint64_t v50 = &v27[v48];
  *uint64_t v49 = *(void *)v50;
  v49[1] = *((void *)v50 + 1);
  uint64_t v51 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
  swift_bridgeObjectRetain();
  v51(v26, 0, 1, v28);
LABEL_36:
  uint64_t v67 = a3[11];
  char v68 = (void *)((char *)a1 + v67);
  uint64_t v69 = (void *)((char *)a2 + v67);
  void *v68 = *v69;
  v68[1] = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Attachment(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v17 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  int v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for FHIRDateTime();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *int v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
    *((void *)v18 + 7) = *((void *)v19 + 7);
    uint64_t v23 = *(int *)(v20 + 28);
    __dst = &v18[v23];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = sub_23309B300();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32))(__dst, v24, v25);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    *(_OWORD *)&v18[*(int *)(v20 + 32)] = *(_OWORD *)&v19[*(int *)(v20 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  return a1;
}

void *assignWithTake for Attachment(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  uint64_t v21 = (void *)((char *)a1 + v18);
  uint64_t v22 = (void *)((char *)a2 + v18);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t)a1 + v30;
  int v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for FHIRDateTime();
  uint64_t v34 = *(void *)(v33 - 8);
  long long v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35((uint64_t)v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      sub_232FDDBD0(v31, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_13;
    }
    *(unsigned char *)uint64_t v31 = *v32;
    *(void *)(v31 + 8) = *((void *)v32 + 1);
    *(_DWORD *)(v31 + 16) = *((_DWORD *)v32 + 4);
    if (*(void *)(v31 + 56) != 1)
    {
      uint64_t v44 = *((void *)v32 + 7);
      if (v44 != 1)
      {
        *(unsigned char *)(v31 + 24) = v32[24];
        *(_WORD *)(v31 + 25) = *(_WORD *)(v32 + 25);
        *(_DWORD *)(v31 + 28) = *((_DWORD *)v32 + 7);
        *(_OWORD *)(v31 + 32) = *((_OWORD *)v32 + 2);
        *(void *)(v31 + 48) = *((void *)v32 + 6);
        *(void *)(v31 + 56) = v44;
        swift_bridgeObjectRelease();
LABEL_22:
        uint64_t v46 = *(int *)(v33 + 28);
        uint64_t v47 = (void *)(v31 + v46);
        __dsta = &v32[v46];
        uint64_t v48 = sub_23309B300();
        uint64_t v66 = *(void *)(v48 - 8);
        uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
        uint64_t v67 = v47;
        LODWORD(v47) = v49(v47, 1, v48);
        int v50 = v49(__dsta, 1, v48);
        if (v47)
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 32))(v67, __dsta, v48);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v67, 0, 1, v48);
            goto LABEL_30;
          }
          sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v52 = *(void *)(*(void *)(v51 - 8) + 64);
          long long v53 = v67;
        }
        else
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 40))(v67, __dsta, v48);
            goto LABEL_30;
          }
          (*(void (**)(void *, uint64_t))(v66 + 8))(v67, v48);
          sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v52 = *(void *)(*(void *)(v54 - 8) + 64);
          long long v53 = v67;
        }
        memcpy(v53, __dsta, v52);
LABEL_30:
        uint64_t v55 = *(int *)(v33 + 32);
        uint64_t v56 = (void *)(v31 + v55);
        uint64_t v57 = &v32[v55];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        void *v56 = v59;
        v56[1] = v58;
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      sub_232F0434C(v31 + 24);
    }
    long long v45 = *(_OWORD *)(v32 + 40);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 40) = v45;
    *(void *)(v31 + 56) = *((void *)v32 + 7);
    goto LABEL_22;
  }
  if (v37)
  {
LABEL_13:
    sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v31, v32, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_31;
  }
  *(unsigned char *)uint64_t v31 = *v32;
  *(void *)(v31 + 8) = *((void *)v32 + 1);
  *(_DWORD *)(v31 + 16) = *((_DWORD *)v32 + 4);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
  *(void *)(v31 + 56) = *((void *)v32 + 7);
  uint64_t v38 = *(int *)(v33 + 28);
  __dst = (void *)(v31 + v38);
  uint64_t v39 = &v32[v38];
  uint64_t v40 = sub_23309B300();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_23305F224(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(__dst, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v41 + 32))(__dst, v39, v40);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
  }
  *(_OWORD *)(v31 + *(int *)(v33 + 32)) = *(_OWORD *)&v32[*(int *)(v33 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_31:
  uint64_t v60 = a3[11];
  size_t v61 = (void *)((char *)a1 + v60);
  char v62 = (void *)((char *)a2 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *size_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233060B3C);
}

uint64_t sub_233060B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_233060CB4);
}

uint64_t sub_233060CB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_23305F224(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_23305F224(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_233060E18()
{
  sub_23305F224(319, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F)
  {
    sub_23305F224(319, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Attachment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233061004);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.CodingKeys()
{
  return &type metadata for Attachment.CodingKeys;
}

unint64_t sub_233061040()
{
  unint64_t result = qword_268758A40;
  if (!qword_268758A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A40);
  }
  return result;
}

unint64_t sub_233061098()
{
  unint64_t result = qword_268758A48;
  if (!qword_268758A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A48);
  }
  return result;
}

unint64_t sub_2330610F0()
{
  unint64_t result = qword_268758A50;
  if (!qword_268758A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A50);
  }
  return result;
}

uint64_t sub_233061144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1752392040 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

void sub_233061460(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_23305F224(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_2330614C4(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233061460(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_233061520(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Annotation.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Annotation.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Annotation() + 20);
  return sub_23302B410(v3, a1);
}

uint64_t type metadata accessor for Annotation()
{
  uint64_t result = qword_268758A80;
  if (!qword_268758A80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Annotation.hash(into:)()
{
  return sub_232EB2E40();
}

uint64_t sub_233061690()
{
  if (*v0) {
    return 1701669236;
  }
  else {
    return 1954047348;
  }
}

uint64_t sub_2330616B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233063CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2330616DC(uint64_t a1)
{
  unint64_t v2 = sub_233062124();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233061718(uint64_t a1)
{
  unint64_t v2 = sub_233062124();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Annotation.encode(to:)(void *a1)
{
  sub_233062178(0, &qword_268758A58, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233062124();
  sub_23309C480();
  v9[15] = 0;
  sub_23309C170();
  if (!v1)
  {
    type metadata accessor for Annotation();
    v9[14] = 1;
    type metadata accessor for FHIRDateTime();
    sub_233062334(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Annotation.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Annotation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - v5;
  sub_233062178(0, &qword_268758A68, MEMORY[0x263F8E040]);
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for Annotation();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233062124();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v18;
  char v21 = 0;
  uint64_t *v12 = sub_23309C0A0();
  v12[1] = v14;
  type metadata accessor for FHIRDateTime();
  char v20 = 1;
  sub_233062334(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v19);
  sub_23302C3E4((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 20));
  sub_2330621DC((uint64_t)v12, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_2330630AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Annotation);
}

uint64_t sub_233061C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Annotation.init(from:)(a1, a2);
}

uint64_t sub_233061CA0(void *a1)
{
  return Annotation.encode(to:)(a1);
}

uint64_t sub_233061CB8()
{
  return sub_23309C420();
}

uint64_t sub_233061D10()
{
  return sub_232EB2E40();
}

uint64_t sub_233061D54()
{
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction10AnnotationV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23302F094();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v28 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v28 - v19;
  if (*a1 == *a2 && a1[1] == a2[1] || (v21 = sub_23309C220(), BOOL result = 0, (v21 & 1) != 0))
  {
    uint64_t v29 = v7;
    uint64_t v23 = type metadata accessor for Annotation();
    sub_23302B410((uint64_t)a1 + *(int *)(v23 + 20), (uint64_t)v20);
    sub_23302B410((uint64_t)a2 + *(int *)(v23 + 20), (uint64_t)v18);
    uint64_t v24 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_23302B410((uint64_t)v20, (uint64_t)v11);
    sub_23302B410((uint64_t)v18, v24);
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v25((uint64_t)v11, 1, v4) == 1)
    {
      sub_23302B490((uint64_t)v18);
      sub_23302B490((uint64_t)v20);
      if (v25(v24, 1, v4) == 1)
      {
        sub_23302B490((uint64_t)v11);
        return 1;
      }
    }
    else
    {
      sub_23302B410((uint64_t)v11, (uint64_t)v15);
      if (v25(v24, 1, v4) != 1)
      {
        uint64_t v26 = (uint64_t)v29;
        sub_2330007B4(v24, (uint64_t)v29);
        BOOL v27 = _s23HealthRecordsExtraction12FHIRDateTimeV2eeoiySbAC_ACtFZ_0((uint64_t)v15, v26);
        sub_2330630AC(v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_23302B490((uint64_t)v18);
        sub_23302B490((uint64_t)v20);
        sub_2330630AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_23302B490((uint64_t)v11);
        return v27;
      }
      sub_23302B490((uint64_t)v18);
      sub_23302B490((uint64_t)v20);
      sub_2330630AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
    sub_2330630AC((uint64_t)v11, (uint64_t (*)(void))sub_23302F094);
    return 0;
  }
  return result;
}

unint64_t sub_233062124()
{
  unint64_t result = qword_268758A60;
  if (!qword_268758A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A60);
  }
  return result;
}

void sub_233062178(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233062124();
    unint64_t v7 = a3(a1, &type metadata for Annotation.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_2330621DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Annotation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_233062240(void *a1)
{
  a1[1] = sub_233062334(&qword_268756790, (void (*)(uint64_t))type metadata accessor for Annotation);
  a1[2] = sub_233062334(&qword_2687569E0, (void (*)(uint64_t))type metadata accessor for Annotation);
  uint64_t result = sub_233062334(&qword_268758A70, (void (*)(uint64_t))type metadata accessor for Annotation);
  a1[3] = result;
  return result;
}

uint64_t sub_2330622EC()
{
  return sub_233062334(&qword_268758A78, (void (*)(uint64_t))type metadata accessor for Annotation);
}

uint64_t sub_233062334(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Annotation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for FHIRDateTime();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      *unint64_t v7 = *v8;
      *((void *)v7 + 1) = *((void *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      uint64_t v14 = *((void *)v8 + 7);
      if (v14 == 1)
      {
        long long v15 = *(_OWORD *)(v8 + 40);
        *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v7 + 40) = v15;
        *((void *)v7 + 7) = *((void *)v8 + 7);
      }
      else
      {
        v7[24] = v8[24];
        *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
        *(_OWORD *)(v7 + 28) = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *((void *)v7 + 6) = *((void *)v8 + 6);
        *((void *)v7 + 7) = v14;
        swift_bridgeObjectRetain();
      }
      uint64_t v16 = *(int *)(v9 + 28);
      uint64_t v17 = &v7[v16];
      uint64_t v18 = &v8[v16];
      uint64_t v19 = sub_23309B300();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v22 = *(int *)(v9 + 32);
      uint64_t v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      uint64_t v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      uint64_t v26 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56);
      swift_bridgeObjectRetain();
      v26(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for Annotation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Annotation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v6 = *v7;
    *((void *)v6 + 1) = *((void *)v7 + 1);
    *((_DWORD *)v6 + 4) = *((_DWORD *)v7 + 4);
    uint64_t v12 = *((void *)v7 + 7);
    if (v12 == 1)
    {
      long long v13 = *(_OWORD *)(v7 + 40);
      *(_OWORD *)(v6 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(v6 + 40) = v13;
      *((void *)v6 + 7) = *((void *)v7 + 7);
    }
    else
    {
      v6[24] = v7[24];
      *(_WORD *)(v6 + 25) = *(_WORD *)(v7 + 25);
      *(_OWORD *)(v6 + 28) = *(_OWORD *)(v7 + 28);
      *((_DWORD *)v6 + 11) = *((_DWORD *)v7 + 11);
      *((void *)v6 + 6) = *((void *)v7 + 6);
      *((void *)v6 + 7) = v12;
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = *(int *)(v8 + 28);
    long long v15 = &v6[v14];
    uint64_t v16 = &v7[v14];
    uint64_t v17 = sub_23309B300();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = *(int *)(v8 + 32);
    uint64_t v21 = &v6[v20];
    uint64_t v22 = &v7[v20];
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
    v24(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithCopy for Annotation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FHIRDateTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_2330630AC(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    uint64_t v18 = (long long *)(v7 + 24);
    uint64_t v19 = (long long *)(v8 + 24);
    uint64_t v20 = *((void *)v8 + 7);
    if (*(void *)(v7 + 56) == 1)
    {
      if (v20 == 1)
      {
        long long v21 = *v19;
        long long v22 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *uint64_t v18 = v21;
        *(_OWORD *)(v7 + 40) = v22;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v36 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v36;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v34 = *((void *)v8 + 7);
      long long v35 = *(_OWORD *)(v8 + 40);
      *uint64_t v18 = *v19;
      *(_OWORD *)(v7 + 40) = v35;
      *(void *)(v7 + 56) = v34;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = *(int *)(v9 + 28);
    uint64_t v38 = (void *)(v7 + v37);
    uint64_t v39 = &v8[v37];
    uint64_t v40 = sub_23309B300();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
    size_t v52 = v38;
    LODWORD(v38) = v42(v38, 1, v40);
    int v43 = v42(v39, 1, v40);
    if (v38)
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v52, v39, v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v52, 0, 1, v40);
        goto LABEL_28;
      }
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
      uint64_t v46 = v52;
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 24))(v52, v39, v40);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v41 + 8))(v52, v40);
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      size_t v45 = *(void *)(*(void *)(v47 - 8) + 64);
      uint64_t v46 = v52;
    }
    memcpy(v46, v39, v45);
LABEL_28:
    uint64_t v48 = *(int *)(v9 + 32);
    uint64_t v49 = (void *)(v7 + v48);
    int v50 = &v8[v48];
    *uint64_t v49 = *(void *)v50;
    v49[1] = *((void *)v50 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v13)
  {
LABEL_7:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v7 = *v8;
  uint64_t v14 = *((void *)v8 + 1);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
  *(void *)(v7 + 8) = v14;
  if (*((void *)v8 + 7) == 1)
  {
    long long v15 = *(_OWORD *)(v8 + 24);
    long long v16 = *(_OWORD *)(v8 + 40);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v15;
    *(_OWORD *)(v7 + 40) = v16;
  }
  else
  {
    *(unsigned char *)(v7 + 24) = v8[24];
    *(unsigned char *)(v7 + 25) = v8[25];
    *(unsigned char *)(v7 + 26) = v8[26];
    long long v23 = *(_OWORD *)(v8 + 28);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v23;
    *(void *)(v7 + 48) = *((void *)v8 + 6);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = *(int *)(v9 + 28);
  uint64_t v25 = (void *)(v7 + v24);
  uint64_t v26 = &v8[v24];
  uint64_t v27 = sub_23309B300();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = *(int *)(v9 + 32);
  uint64_t v31 = (void *)(v7 + v30);
  int v32 = &v8[v30];
  *uint64_t v31 = *(void *)v32;
  v31[1] = *((void *)v32 + 1);
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v33(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_2330630AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for Annotation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FHIRDateTime();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    *((void *)v5 + 1) = *((void *)v6 + 1);
    *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *((void *)v5 + 7) = *((void *)v6 + 7);
    uint64_t v10 = *(int *)(v7 + 28);
    uint64_t v11 = &v5[v10];
    int v12 = &v6[v10];
    uint64_t v13 = sub_23309B300();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&v5[*(int *)(v7 + 32)] = *(_OWORD *)&v6[*(int *)(v7 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for Annotation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_2330630AC(v8, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v8 = *v9;
    *(void *)(v8 + 8) = *((void *)v9 + 1);
    *(_DWORD *)(v8 + 16) = *((_DWORD *)v9 + 4);
    if (*(void *)(v8 + 56) != 1)
    {
      uint64_t v22 = *((void *)v9 + 7);
      if (v22 != 1)
      {
        *(unsigned char *)(v8 + 24) = v9[24];
        *(_WORD *)(v8 + 25) = *(_WORD *)(v9 + 25);
        *(_DWORD *)(v8 + 28) = *((_DWORD *)v9 + 7);
        *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
        *(void *)(v8 + 48) = *((void *)v9 + 6);
        *(void *)(v8 + 56) = v22;
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v24 = *(int *)(v10 + 28);
        uint64_t v25 = (void *)(v8 + v24);
        uint64_t v26 = &v9[v24];
        uint64_t v27 = sub_23309B300();
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
        uint64_t v41 = v25;
        LODWORD(v25) = v29(v25, 1, v27);
        int v30 = v29(v26, 1, v27);
        if (v25)
        {
          if (!v30)
          {
            (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v41, v26, v27);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v41, 0, 1, v27);
            goto LABEL_23;
          }
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
          uint64_t v33 = v41;
        }
        else
        {
          if (!v30)
          {
            (*(void (**)(void *, char *, uint64_t))(v28 + 40))(v41, v26, v27);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v28 + 8))(v41, v27);
          sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
          size_t v32 = *(void *)(*(void *)(v34 - 8) + 64);
          uint64_t v33 = v41;
        }
        memcpy(v33, v26, v32);
LABEL_23:
        uint64_t v35 = *(int *)(v10 + 32);
        long long v36 = (void *)(v8 + v35);
        uint64_t v37 = &v9[v35];
        uint64_t v39 = *(void *)v37;
        uint64_t v38 = *((void *)v37 + 1);
        *long long v36 = v39;
        v36[1] = v38;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_232F0434C(v8 + 24);
    }
    long long v23 = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = v23;
    *(void *)(v8 + 56) = *((void *)v9 + 7);
    goto LABEL_15;
  }
  if (v14)
  {
LABEL_7:
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    memcpy((void *)v8, v9, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v8 = *v9;
  *(void *)(v8 + 8) = *((void *)v9 + 1);
  *(_DWORD *)(v8 + 16) = *((_DWORD *)v9 + 4);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *(void *)(v8 + 56) = *((void *)v9 + 7);
  uint64_t v15 = *(int *)(v10 + 28);
  long long v16 = (void *)(v8 + v15);
  uint64_t v17 = &v9[v15];
  uint64_t v18 = sub_23309B300();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_23302CB30(0, &qword_268756590, MEMORY[0x263F079C8]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_OWORD *)(v8 + *(int *)(v10 + 32)) = *(_OWORD *)&v9[*(int *)(v10 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Annotation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_233063850);
}

uint64_t sub_233063850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Annotation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_233063930);
}

uint64_t sub_233063930(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_23302CB30(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_2330639F4()
{
  sub_23302CB30(319, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Annotation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233063B74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Annotation.CodingKeys()
{
  return &type metadata for Annotation.CodingKeys;
}

unint64_t sub_233063BB0()
{
  unint64_t result = qword_268758A90;
  if (!qword_268758A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A90);
  }
  return result;
}

unint64_t sub_233063C08()
{
  unint64_t result = qword_268758A98;
  if (!qword_268758A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758A98);
  }
  return result;
}

unint64_t sub_233063C60()
{
  unint64_t result = qword_268758AA0;
  if (!qword_268758AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758AA0);
  }
  return result;
}

uint64_t sub_233063CB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_233063D88(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a3 < a1) {
    return 0;
  }
  if (a3 != a1) {
    return 1;
  }
  if ((a4 & 0x100) != 0) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = a4;
  }
  if ((a2 & 0x100) == 0)
  {
    uint64_t result = 0;
    if (v5 < a2) {
      return result;
    }
  }
  if ((a4 & 0x100) == 0)
  {
    uint64_t result = 1;
    if ((a2 & 0x100) != 0 || a4 != a2) {
      return result;
    }
    goto LABEL_15;
  }
  if ((a2 & 0x100) == 0) {
    return 1;
  }
LABEL_15:
  unsigned int v6 = HIWORD(a4);
  if ((a4 & 0x1000000) != 0) {
    LOBYTE(v6) = 0;
  }
  if (v6 >= BYTE2(a2)) {
    return 1;
  }
  else {
    return HIBYTE(a2) & 1;
  }
}

BOOL sub_233063E08(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL result = 0;
  if (v2 >= v3)
  {
    if (v2 != v3) {
      return 1;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 2);
    unsigned int v6 = *(unsigned __int8 *)(a1 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6) {
        return 1;
      }
      sub_2330179F8();
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      sub_2330179F8();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_233063EBC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a1 < a3) {
    return 0;
  }
  if (a1 != a3) {
    return 1;
  }
  if ((a2 & 0x100) != 0) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = a2;
  }
  if ((a4 & 0x100) == 0)
  {
    uint64_t result = 0;
    if (v5 < a4) {
      return result;
    }
  }
  if ((a2 & 0x100) == 0)
  {
    uint64_t result = 1;
    if ((a4 & 0x100) != 0 || a2 != a4) {
      return result;
    }
    goto LABEL_15;
  }
  if ((a4 & 0x100) == 0) {
    return 1;
  }
LABEL_15:
  unsigned int v6 = HIWORD(a2);
  if ((a2 & 0x1000000) != 0) {
    LOBYTE(v6) = 0;
  }
  if (v6 >= BYTE2(a4)) {
    return 1;
  }
  else {
    return HIBYTE(a4) & 1;
  }
}

BOOL sub_233063F3C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 1);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1);
  BOOL result = 0;
  if (v2 >= v3)
  {
    if (v2 != v3) {
      return 1;
    }
    unsigned int v5 = *(unsigned __int8 *)(a1 + 2);
    unsigned int v6 = *(unsigned __int8 *)(a2 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6) {
        return 1;
      }
      sub_2330179F8();
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      sub_2330179F8();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12)) {
        return 1;
      }
    }
  }
  return result;
}

BOOL sub_233063FEC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL result = 1;
  if (v2 >= v3)
  {
    if (v2 != v3) {
      return 0;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 2);
    unsigned int v6 = *(unsigned __int8 *)(a1 + 2);
    if (v5 >= v6)
    {
      if (v5 != v6) {
        return 0;
      }
      sub_2330179F8();
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      sub_2330179F8();
      if (v8 >= v11 && (v8 != v11 || v10 >= v12)) {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_2330640A0(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a3 < a1) {
    return 1;
  }
  if (a3 != a1) {
    return 0;
  }
  if ((a4 & 0x100) != 0) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = a4;
  }
  if ((a2 & 0x100) == 0 && v5 < a2) {
    return 1;
  }
  if ((a4 & 0x100) == 0)
  {
    BOOL result = 0;
    if ((a2 & 0x100) != 0 || a4 != a2) {
      return result;
    }
    goto LABEL_15;
  }
  if ((a2 & 0x100) == 0) {
    return 0;
  }
LABEL_15:
  unsigned int v6 = HIWORD(a4);
  if ((a4 & 0x1000000) != 0) {
    LOBYTE(v6) = 0;
  }
  return (a2 & 0x1000000) == 0 && v6 < BYTE2(a2);
}

unint64_t static FHIRTime.parse(from:expectAtEnd:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_233065868(a1, a2, &v27);
  if (!v3)
  {
    unint64_t v6 = v29;
    LOWORD(v7) = v30;
    __int16 v23 = v31;
    __int16 v8 = v32;
    __int16 v9 = v33;
    __int16 v22 = v34;
    LOWORD(v10) = v35;
    __int16 v11 = v36;
    __int16 v12 = v37;
    uint64_t v40 = v38;
    uint64_t v26 = v39;
    if (v27 >= 0x17u) {
      char v13 = 23;
    }
    else {
      char v13 = v27;
    }
    if (v28 >= 0x3Bu) {
      char v14 = 59;
    }
    else {
      char v14 = v28;
    }
    char v24 = v14;
    char v25 = v13;
    MEMORY[0x237DB5C80](result, 60.0);
    unint64_t v21 = v6;
    LOWORD(v6) = v23;
    __int16 v20 = v9;
    LOWORD(v15) = v22;
    if (sub_23309BC70())
    {
      unint64_t result = MEMORY[0x237DB5C80](60.0);
      __int16 v11 = v16;
      unint64_t v6 = HIWORD(result);
      unint64_t v18 = v17 >> 16;
      unint64_t v15 = HIDWORD(v17);
      unint64_t v10 = HIWORD(v17);
      unsigned int v19 = HIWORD(v16);
      unint64_t v7 = HIDWORD(result);
      __int16 v8 = v17;
    }
    else
    {
      unint64_t result = v21;
      LOWORD(v19) = v12;
      LOWORD(v18) = v20;
    }
    *(unsigned char *)a3 = 1;
    *(unsigned char *)(a3 + 1) = v25;
    *(unsigned char *)(a3 + 2) = v24;
    *(_DWORD *)(a3 + 4) = result;
    *(_WORD *)(a3 + 8) = v7;
    *(_WORD *)(a3 + 10) = v6;
    *(_WORD *)(a3 + 12) = v8;
    *(_WORD *)(a3 + 14) = v18;
    *(_WORD *)(a3 + 16) = v15;
    *(_WORD *)(a3 + 18) = v10;
    *(_WORD *)(a3 + 20) = v11;
    *(_WORD *)(a3 + 22) = v19;
    *(void *)(a3 + 24) = v40;
    *(void *)(a3 + 32) = v26;
  }
  return result;
}

uint64_t FHIRTime.description.getter()
{
  char v1 = *(unsigned char *)(v0 + 1);
  char v2 = *(unsigned char *)(v0 + 2);
  if (*(unsigned char *)v0 != 1 || *(void *)(v0 + 32) == 0)
  {
    if (qword_268756420 != -1) {
      swift_once();
    }
    unsigned int v4 = (void *)qword_268770FA0;
    unsigned __int8 v5 = (void *)sub_23309BC60();
    id v6 = objc_msgSend(v4, sel_stringForObjectValue_, v5, 0x3230253A64323025, 0xEA00000000003A64);

    if (v6)
    {
      sub_23309B710();
    }
    sub_23309B880();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309B880();
  }
  sub_23306702C(0, &qword_2687572E8, (uint64_t (*)(uint64_t))sub_232F4970C, MEMORY[0x263F8E0F8]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2330A1EB0;
  uint64_t v8 = MEMORY[0x263F8E778];
  uint64_t v9 = MEMORY[0x263F8E7C0];
  *(void *)(v7 + 56) = MEMORY[0x263F8E778];
  *(void *)(v7 + 64) = v9;
  *(unsigned char *)(v7 + 32) = v1;
  *(void *)(v7 + 96) = v8;
  *(void *)(v7 + 104) = v9;
  *(unsigned char *)(v7 + 72) = v2;
  uint64_t v10 = sub_23309B740();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t FHIRTime.hour.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FHIRTime.hour.setter(uint64_t result)
{
  char v2 = result;
  if (result >= 0x17u) {
    char v2 = 23;
  }
  *(unsigned char *)(v1 + 1) = v2;
  return result;
}

uint64_t (*FHIRTime.hour.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return sub_2330644D0;
}

uint64_t sub_2330644D0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && *(unsigned __int8 *)(*(void *)result + 1) >= 0x18u) {
    *(unsigned char *)(*(void *)result + 1) = 23;
  }
  return result;
}

uint64_t FHIRTime.minute.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FHIRTime.minute.setter(uint64_t result)
{
  char v2 = result;
  if (result >= 0x3Bu) {
    char v2 = 59;
  }
  *(unsigned char *)(v1 + 2) = v2;
  return result;
}

uint64_t (*FHIRTime.minute.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return sub_233064534;
}

uint64_t sub_233064534(uint64_t result, char a2)
{
  if ((a2 & 1) == 0 && *(unsigned __int8 *)(*(void *)result + 2) >= 0x3Cu) {
    *(unsigned char *)(*(void *)result + 2) = 59;
  }
  return result;
}

uint64_t FHIRTime.second.getter()
{
  return *(void *)(v0 + 4);
}

uint64_t sub_233064564(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a1 + 4);
  __int16 v4 = *(_WORD *)(a1 + 8);
  __int16 v5 = *(_WORD *)(a1 + 10);
  __int16 v6 = *(_WORD *)(a1 + 12);
  __int16 v7 = *(_WORD *)(a1 + 16);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)a1;
  *(_WORD *)(a2 + 8) = v3;
  *(_WORD *)(a2 + 10) = *(_WORD *)(a1 + 6);
  *(_WORD *)(a2 + 12) = v4;
  *(_WORD *)(a2 + 14) = v5;
  *(_WORD *)(a2 + 16) = v6;
  *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 14);
  *(_WORD *)(a2 + 20) = v7;
  *(_WORD *)(a2 + 22) = *(_WORD *)(a1 + 18);
  sub_23309BC50();
  uint64_t result = sub_23309BC70();
  if (result)
  {
    uint64_t result = MEMORY[0x237DB5C80](60.0);
    *(void *)(a2 + 4) = result;
    *(_WORD *)(a2 + 12) = v9;
    *(_WORD *)(a2 + 14) = v10;
    *(_WORD *)(a2 + 16) = v11;
    *(_WORD *)(a2 + 18) = v12;
    *(_WORD *)(a2 + 20) = v13;
    *(_WORD *)(a2 + 22) = v14;
  }
  *(unsigned char *)a2 = 0;
  return result;
}

uint64_t FHIRTime.second.setter(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(v3 + 4) = a1;
  *(void *)(v3 + 12) = a2;
  *(_DWORD *)(v3 + 20) = a3;
  sub_23309BC50();
  uint64_t result = sub_23309BC70();
  if (result)
  {
    uint64_t result = MEMORY[0x237DB5C80](60.0);
    *(void *)(v3 + 4) = result;
    *(_WORD *)(v3 + 12) = v5;
    *(_WORD *)(v3 + 14) = v6;
    *(_WORD *)(v3 + 16) = v7;
    *(_WORD *)(v3 + 18) = v8;
    *(_WORD *)(v3 + 20) = v9;
    *(_WORD *)(v3 + 22) = v10;
  }
  *(unsigned char *)uint64_t v3 = 0;
  return result;
}

uint64_t (*FHIRTime.second.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return sub_233064758;
}

uint64_t sub_233064758(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)result;
    sub_23309BC50();
    uint64_t result = sub_23309BC70();
    if (result)
    {
      uint64_t result = MEMORY[0x237DB5C80](60.0);
      *(void *)(v2 + 4) = result;
      *(_WORD *)(v2 + 12) = v3;
      *(_WORD *)(v2 + 14) = v4;
      *(_WORD *)(v2 + 16) = v5;
      *(_WORD *)(v2 + 18) = v6;
      *(_WORD *)(v2 + 20) = v7;
      *(_WORD *)(v2 + 22) = v8;
    }
    *(unsigned char *)uint64_t v2 = 0;
  }
  return result;
}

uint64_t FHIRTime.originalSecondsString.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRTime.init(hour:minute:second:)@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  MEMORY[0x237DB5C80](60.0);
  uint64_t result = sub_23309BC70();
  if (result)
  {
    uint64_t result = MEMORY[0x237DB5C80](60.0);
    a3 = result;
    a4 = v13;
    a5 = v14;
  }
  *(unsigned char *)a6 = 1;
  char v15 = a2;
  if (a2 >= 0x3Bu) {
    char v15 = 59;
  }
  char v16 = a1;
  if (a1 >= 0x17u) {
    char v16 = 23;
  }
  *(unsigned char *)(a6 + 1) = v16;
  *(unsigned char *)(a6 + 2) = v15;
  *(void *)(a6 + 4) = a3;
  *(void *)(a6 + 12) = a4;
  *(_DWORD *)(a6 + 20) = a5;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  return result;
}

void FHIRTime.init(_:)(uint64_t a1@<X8>)
{
  id v3 = objc_allocWithZone(MEMORY[0x263F08B08]);
  __int16 v4 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithString_, v4);

  uint64_t v6 = sub_233065868(v5, 1, &v32);
  if (v1)
  {
  }
  else
  {
    LODWORD(v7) = v34;
    __int16 v8 = v35;
    __int16 v27 = v36;
    __int16 v26 = v37;
    __int16 v25 = v38;
    __int16 v9 = v39;
    __int16 v10 = v40;
    unsigned int v11 = v41;
    unsigned int v12 = v42;
    uint64_t v30 = v44;
    uint64_t v31 = v43;
    if (v32 >= 0x17u) {
      char v13 = 23;
    }
    else {
      char v13 = v32;
    }
    if (v33 >= 0x3Bu) {
      char v14 = 59;
    }
    else {
      char v14 = v33;
    }
    char v28 = v14;
    char v29 = v13;
    MEMORY[0x237DB5C80](v6, 60.0);
    __int16 v24 = v9;
    unsigned int v45 = v12;
    unsigned int v46 = v11;
    if (sub_23309BC70())
    {
      unint64_t v7 = MEMORY[0x237DB5C80](60.0);
      unint64_t v16 = v15;
      unsigned int v18 = v17;

      unint64_t v19 = HIDWORD(v7);
      unint64_t v20 = HIWORD(v7);
      unint64_t v21 = v16 >> 16;
      unint64_t v22 = HIDWORD(v16);
      unint64_t v23 = HIWORD(v16);
      unsigned int v45 = HIWORD(v18);
      unsigned int v46 = v18;
    }
    else
    {

      LOWORD(v19) = v8;
      LOWORD(v20) = v27;
      LOWORD(v16) = v26;
      LOWORD(v21) = v25;
      LOWORD(v23) = v10;
      LOWORD(v22) = v24;
    }
    *(unsigned char *)a1 = 1;
    *(unsigned char *)(a1 + 1) = v29;
    *(unsigned char *)(a1 + 2) = v28;
    *(_DWORD *)(a1 + 4) = v7;
    *(_WORD *)(a1 + 8) = v19;
    *(_WORD *)(a1 + 10) = v20;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v21;
    *(_WORD *)(a1 + 16) = v22;
    *(_WORD *)(a1 + 18) = v23;
    *(_WORD *)(a1 + 20) = v46;
    *(_WORD *)(a1 + 22) = v45;
    *(void *)(a1 + 24) = v31;
    *(void *)(a1 + 32) = v30;
  }
}

__n128 static FHIRTime.parseComponents(from:expectAtEnd:)@<Q0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_233065868(a1, a2, v10);
  if (!v3)
  {
    char v6 = v10[1];
    int v7 = v11;
    __n128 result = v12;
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    *(unsigned char *)a3 = v10[0];
    *(unsigned char *)(a3 + 1) = v6;
    *(_DWORD *)(a3 + 4) = v7;
    *(__n128 *)(a3 + 8) = result;
    *(void *)(a3 + 24) = v8;
    *(void *)(a3 + 32) = v9;
  }
  return result;
}

uint64_t FHIRTime.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309BC90();
  if (!v1) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t FHIRTime.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_23309C3D0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309BC90();
  sub_23309C3F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  return sub_23309C420();
}

uint64_t sub_233064D48()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_23309C3D0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309BC90();
  sub_23309C3F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  return sub_23309C420();
}

void FHIRTime.init(stringLiteral:)(uint64_t a1@<X8>)
{
  id v9 = objc_allocWithZone(MEMORY[0x263F08B08]);
  unint64_t v3 = sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v9, sel_initWithString_, v3);

  unint64_t v16 = v10;
  uint64_t v2 = sub_233065868(v10, 1, v21);
  unsigned int v19 = v21[1];
  unsigned int v20 = v21[0];
  LODWORD(v3) = v22;
  LOWORD(v4) = v23;
  LOWORD(v5) = v24;
  LOWORD(v6) = v25;
  LOWORD(v7) = v26;
  LOWORD(v8) = v27;
  LOWORD(v9) = v28;
  LOWORD(v10) = v29;
  LOWORD(v11) = v30;
  uint64_t v17 = v32;
  uint64_t v18 = v31;
  MEMORY[0x237DB5C80](v2, 60.0);
  if (sub_23309BC70())
  {
    unint64_t v3 = MEMORY[0x237DB5C80](60.0);
    unint64_t v6 = v12;
    LODWORD(v10) = v13;

    unint64_t v4 = HIDWORD(v3);
    unint64_t v5 = HIWORD(v3);
    unint64_t v7 = v6 >> 16;
    unint64_t v8 = HIDWORD(v6);
    id v9 = (id)HIWORD(v6);
    unsigned int v11 = v10 >> 16;
  }
  else
  {
  }
  *(unsigned char *)a1 = 1;
  if (v19 >= 0x3B) {
    char v14 = 59;
  }
  else {
    char v14 = v19;
  }
  if (v20 >= 0x17) {
    char v15 = 23;
  }
  else {
    char v15 = v20;
  }
  *(unsigned char *)(a1 + 1) = v15;
  *(unsigned char *)(a1 + 2) = v14;
  *(_DWORD *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = (_WORD)v9;
  *(_WORD *)(a1 + 20) = (_WORD)v10;
  *(_WORD *)(a1 + 22) = v11;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = v17;
}

__n128 sub_233065010@<Q0>(uint64_t a1@<X8>)
{
  FHIRTime.init(_:)((uint64_t)&v6);
  __int16 v2 = v7;
  int v3 = v8;
  long long v5 = v9;
  __n128 result = v10;
  *(unsigned char *)a1 = v6;
  *(_WORD *)(a1 + 1) = v2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_OWORD *)(a1 + 8) = v5;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t FHIRTime.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C450();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v45, v45[3]);
    sub_23309C230();
    id v5 = objc_allocWithZone(MEMORY[0x263F08B08]);
    char v6 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v5, sel_initWithString_, v6);

    uint64_t v8 = sub_233065868(v7, 1, &v32);
    char v10 = v32;
    LODWORD(v31) = v34;
    __int16 v11 = v35;
    LOWORD(v28) = v36;
    __int16 v29 = v37;
    __int16 v12 = v38;
    __int16 v25 = v39;
    LOWORD(v13) = v40;
    unsigned int v14 = v41;
    __int16 v15 = v42;
    uint64_t v26 = v44;
    uint64_t v27 = v43;
    if (v32 >= 0x17u) {
      char v10 = 23;
    }
    char v24 = v10;
    if (v33 >= 0x3Bu) {
      int v16 = 59;
    }
    else {
      int v16 = v33;
    }
    int v46 = v16;
    MEMORY[0x237DB5C80](v8, 60.0);
    __int16 v23 = v12;
    LOWORD(v17) = v25;
    unsigned int v47 = v14;
    if (sub_23309BC70())
    {
      unint64_t v18 = MEMORY[0x237DB5C80](60.0);
      unint64_t v20 = v19;
      unsigned int v22 = v21;

      unint64_t v28 = HIWORD(v18);
      unint64_t v30 = v20 >> 16;
      unint64_t v31 = HIDWORD(v18);
      unint64_t v17 = HIDWORD(v20);
      unint64_t v13 = HIWORD(v20);
      unsigned int v47 = v22;
      LODWORD(v7) = HIWORD(v22);
    }
    else
    {

      LODWORD(v18) = v31;
      LOWORD(v31) = v11;
      LOWORD(v20) = v29;
      LOWORD(v30) = v23;
      LOWORD(v7) = v15;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    *(unsigned char *)a2 = 1;
    *(unsigned char *)(a2 + 1) = v24;
    *(unsigned char *)(a2 + 2) = v46;
    *(_DWORD *)(a2 + 4) = v18;
    *(_WORD *)(a2 + 8) = v31;
    *(_WORD *)(a2 + 10) = v28;
    *(_WORD *)(a2 + 12) = v20;
    *(_WORD *)(a2 + 14) = v30;
    *(_WORD *)(a2 + 16) = v17;
    *(_WORD *)(a2 + 18) = v13;
    *(_WORD *)(a2 + 20) = v47;
    *(_WORD *)(a2 + 22) = (_WORD)v7;
    *(void *)(a2 + 24) = v27;
    *(void *)(a2 + 32) = v26;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRTime.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_233065424@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRTime.init(from:)(a1, a2);
}

uint64_t sub_23306543C(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRTime.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id sub_233065528()
{
  id result = sub_233065548();
  qword_268770FA0 = (uint64_t)result;
  return result;
}

id sub_233065548()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
  objc_msgSend(v0, sel_setAllowsFloats_, 1);
  uint64_t v1 = (void *)sub_23309B6E0();
  objc_msgSend(v0, sel_setDecimalSeparator_, v1);

  objc_msgSend(v0, sel_setMaximumIntegerDigits_, 2);
  objc_msgSend(v0, sel_setMinimumIntegerDigits_, 2);
  objc_msgSend(v0, sel_setAlwaysShowsDecimalSeparator_, 0);
  objc_msgSend(v0, sel_setMinimumFractionDigits_, 0);
  objc_msgSend(v0, sel_setMaximumFractionDigits_, 15);
  return v0;
}

uint64_t static FHIRTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1)
    && *(unsigned __int8 *)(a1 + 2) == *(unsigned __int8 *)(a2 + 2))
  {
    JUMPOUT(0x237DB5CC0);
  }
  return 0;
}

uint64_t sub_233065668(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 1) == *(unsigned __int8 *)(a2 + 1)
    && *(unsigned __int8 *)(a1 + 2) == *(unsigned __int8 *)(a2 + 2))
  {
    JUMPOUT(0x237DB5CC0);
  }
  return 0;
}

BOOL sub_2330656B4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_233063E08((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_233065700(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_233063F3C((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_23306574C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_233063FEC((uint64_t)v5, (uint64_t)v7);
}

BOOL _s23HealthRecordsExtraction8FHIRTimeV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 1);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1);
  BOOL result = 1;
  if (v2 >= v3)
  {
    if (v2 != v3) {
      return 0;
    }
    unsigned int v4 = *(unsigned __int8 *)(a1 + 2);
    unsigned int v5 = *(unsigned __int8 *)(a2 + 2);
    if (v4 >= v5)
    {
      if (v4 != v5) {
        return 0;
      }
      sub_2330179F8();
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      sub_2330179F8();
      if (v7 >= v10 && (v7 != v10 || v9 >= v11)) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_233065868@<X0>(void *a1@<X0>, int a2@<W1>, unsigned char *a3@<X8>)
{
  v228 = a3;
  int v229 = a2;
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23306702C(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  v232 = (char *)&v225 - v6;
  uint64_t v7 = sub_23309AC20();
  unint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v244 = (char *)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23306702C(0, &qword_268757310, MEMORY[0x263F06278], v4);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  unint64_t v13 = (char *)&v225 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  int v16 = (char *)&v225 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  unint64_t v19 = (char *)&v225 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  unint64_t v240 = (unint64_t)&v225 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  unint64_t v239 = (unint64_t)&v225 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  v238 = (char *)&v225 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  unint64_t v237 = (unint64_t)&v225 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v236 = (char *)&v225 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  v235 = (char *)&v225 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  v234 = (char *)&v225 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  v233 = (char *)&v225 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  v231 = (char *)&v225 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v227 = (uint64_t)&v225 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v226 = (uint64_t)&v225 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  v230 = (char *)&v225 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  int v46 = (char *)&v225 - v45;
  MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v225 - v47;
  id v49 = objc_msgSend(a1, sel_charactersToBeSkipped);
  unint64_t v242 = v8;
  unint64_t v243 = v7;
  if (v49)
  {
    int v50 = v49;
    sub_23309ABF0();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v46, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v46, 1, 1, v7);
  }
  sub_232F499EC((uint64_t)v46, (uint64_t)v48);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  uint64_t v51 = v244;
  sub_23309ABC0();
  uint64_t v52 = sub_23309BCC0();
  uint64_t v53 = sub_23309BCD0();
  uint64_t v55 = a1;
  v247 = v48;
  if (!v54)
  {
    id v105 = objc_msgSend(a1, sel_string);
    long long v106 = v51;
    uint64_t v107 = sub_23309B710();
    uint64_t v109 = v108;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v110 = v107;
    *(void *)(v110 + 8) = v109;
    *(void *)(v110 + 16) = v52;
    *(unsigned char *)(v110 + 24) = 4;
    swift_willThrow();
    unint64_t v111 = v242;
    unint64_t v112 = v243;
    uint64_t v102 = *(void (**)(char *, unint64_t))(v242 + 8);
    v102(v106, v243);
    sub_232F49AD4((uint64_t)v48, (uint64_t)v13);
    id v61 = v55;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v111 + 48))(v13, 1, v112) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      uint64_t v125 = v13;
      unint64_t v126 = v112;
LABEL_29:
      v102(v125, v126);
      goto LABEL_35;
    }
LABEL_25:
    uint64_t v113 = 0;
LABEL_35:
    int v137 = &selRef_setMedicalRecordMetadata_;
LABEL_36:
    objc_msgSend(v61, v137[120], v113);

    return sub_233067090((uint64_t)v247, &qword_268757310, MEMORY[0x263F06278]);
  }
  uint64_t v56 = v53;
  unint64_t v57 = v54;
  id v241 = v55;
  if (sub_23309B810() != 2)
  {
    id v114 = v241;
    id v115 = objc_msgSend(v241, sel_string);
    uint64_t v116 = sub_23309B710();
    uint64_t v118 = v117;

    id v119 = objc_msgSend(v114, sel_string);
    sub_23309B710();

    sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v120 = sub_23309B850();
    swift_bridgeObjectRelease();
    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v121 = v116;
    *(void *)(v121 + 8) = v118;
    *(void *)(v121 + 16) = v120;
    *(unsigned char *)(v121 + 24) = 0;
    swift_willThrow();
    unint64_t v122 = v242;
    unint64_t v123 = v243;
    uint64_t v124 = *(void (**)(char *, unint64_t))(v242 + 8);
    v124(v244, v243);
    sub_232F49AD4((uint64_t)v247, (uint64_t)v16);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v122 + 48))(v16, 1, v123) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      uint64_t v135 = v16;
      unint64_t v136 = v123;
LABEL_33:
      v124(v135, v136);
      goto LABEL_34;
    }
LABEL_27:
    uint64_t v113 = 0;
LABEL_34:
    id v61 = v241;
    goto LABEL_35;
  }
  __int16 v58 = sub_232F3BBE4(v56, v57);
  unint64_t v59 = v243;
  if ((v58 & 0x100) != 0 || (char v60 = v58, v58 > 0x17u))
  {
    id v61 = v241;
    id v127 = objc_msgSend(v241, sel_string);
    long long v128 = v51;
    uint64_t v129 = sub_23309B710();
    uint64_t v131 = v130;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v132 = v129;
    *(void *)(v132 + 8) = v131;
    *(void *)(v132 + 16) = v52;
    *(unsigned char *)(v132 + 24) = 4;
    swift_willThrow();
    unint64_t v133 = v242;
    uint64_t v134 = *(void (**)(char *, unint64_t))(v242 + 8);
    v134(v128, v59);
    sub_232F49AD4((uint64_t)v247, (uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v133 + 48))(v19, 1, v59) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      size_t v139 = v19;
LABEL_38:
      v134(v139, v59);
      goto LABEL_39;
    }
LABEL_31:
    uint64_t v113 = 0;
LABEL_39:
    int v137 = &selRef_setMedicalRecordMetadata_;
    goto LABEL_36;
  }
  id v61 = v241;
  uint64_t v62 = sub_23309BCC0();
  sub_23309BCB0();
  uint64_t v64 = v63;
  swift_bridgeObjectRelease();
  if (!v64)
  {
    id v140 = objc_msgSend(v61, sel_string);
    uint64_t v141 = sub_23309B710();
    uint64_t v143 = v142;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v144 = v141;
    *(void *)(v144 + 8) = v143;
    *(void *)(v144 + 16) = v62;
    *(unsigned char *)(v144 + 24) = 0;
    swift_willThrow();
    unint64_t v145 = v242;
    uint64_t v146 = *(void (**)(char *, unint64_t))(v242 + 8);
    v146(v51, v59);
    unint64_t v147 = v240;
    sub_232F49AD4((uint64_t)v247, v240);
    if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(v145 + 48))(v147, 1, v59) == 1) {
      goto LABEL_25;
    }
LABEL_41:
    uint64_t v113 = (void *)sub_23309ABD0();
    v146((char *)v147, v59);
    goto LABEL_35;
  }
  uint64_t v65 = sub_23309BCC0();
  uint64_t v66 = sub_23309BCD0();
  if (!v67)
  {
    id v148 = objc_msgSend(v61, sel_string);
    uint64_t v149 = v51;
    uint64_t v150 = sub_23309B710();
    uint64_t v152 = v151;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v153 = v150;
    *(void *)(v153 + 8) = v152;
    *(void *)(v153 + 16) = v65;
    *(unsigned char *)(v153 + 24) = 5;
    swift_willThrow();
    unint64_t v101 = v242;
    uint64_t v102 = *(void (**)(char *, unint64_t))(v242 + 8);
    v102(v149, v59);
    uint64_t v103 = (uint64_t)v247;
    uint64_t v104 = v239;
    goto LABEL_43;
  }
  uint64_t v68 = v66;
  unint64_t v69 = v67;
  if (sub_23309B810() != 2)
  {
    id v154 = objc_msgSend(v61, sel_string);
    uint64_t v155 = v51;
    uint64_t v156 = sub_23309B710();
    uint64_t v158 = v157;

    id v159 = objc_msgSend(v61, sel_string);
    sub_23309B710();

    sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v160 = sub_23309B850();
    swift_bridgeObjectRelease();
    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v161 = v156;
    *(void *)(v161 + 8) = v158;
    *(void *)(v161 + 16) = v160;
    *(unsigned char *)(v161 + 24) = 0;
    swift_willThrow();
    unint64_t v162 = v242;
    uint64_t v124 = *(void (**)(char *, unint64_t))(v242 + 8);
    long long v163 = v155;
    unint64_t v164 = v243;
    v124(v163, v243);
    uint64_t v165 = (uint64_t)v247;
    uint64_t v166 = (uint64_t)v238;
    goto LABEL_46;
  }
  __int16 v70 = sub_232F3BBE4(v68, v69);
  if ((v70 & 0x100) != 0 || (char v71 = v70, v70 > 0x3Bu))
  {
    id v167 = objc_msgSend(v61, sel_string);
    uint64_t v168 = sub_23309B710();
    uint64_t v170 = v169;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v171 = v168;
    *(void *)(v171 + 8) = v170;
    *(void *)(v171 + 16) = v65;
    *(unsigned char *)(v171 + 24) = 5;
    swift_willThrow();
    unint64_t v172 = v242;
    unint64_t v59 = v243;
    uint64_t v146 = *(void (**)(char *, unint64_t))(v242 + 8);
    v146(v51, v243);
    unint64_t v147 = v237;
    sub_232F49AD4((uint64_t)v247, v237);
    if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(v172 + 48))(v147, 1, v59) == 1) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
  uint64_t v72 = sub_23309BCC0();
  sub_23309BCB0();
  uint64_t v74 = v73;
  swift_bridgeObjectRelease();
  unint64_t v75 = v242;
  if (!v74)
  {
    id v173 = objc_msgSend(v61, sel_string);
    uint64_t v174 = v51;
    uint64_t v175 = sub_23309B710();
    uint64_t v177 = v176;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v178 = v175;
    *(void *)(v178 + 8) = v177;
    *(void *)(v178 + 16) = v72;
    *(unsigned char *)(v178 + 24) = 0;
    swift_willThrow();
    uint64_t v134 = *(void (**)(char *, unint64_t))(v75 + 8);
    unint64_t v59 = v243;
    v134(v174, v243);
    uint64_t v179 = (uint64_t)v247;
    uint64_t v180 = (uint64_t)v236;
    goto LABEL_54;
  }
  char v76 = v60;
  uint64_t v77 = sub_23309BCC0();
  uint64_t v78 = sub_23309BCD0();
  if (!v79)
  {
    uint64_t v181 = v51;
    id v182 = objc_msgSend(v61, sel_string);
    uint64_t v183 = sub_23309B710();
    uint64_t v185 = v184;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v186 = v183;
    *(void *)(v186 + 8) = v185;
    *(void *)(v186 + 16) = v77;
    *(unsigned char *)(v186 + 24) = 6;
    swift_willThrow();
    uint64_t v134 = *(void (**)(char *, unint64_t))(v75 + 8);
    unint64_t v59 = v243;
    v134(v181, v243);
    uint64_t v179 = (uint64_t)v247;
    uint64_t v180 = (uint64_t)v235;
    goto LABEL_54;
  }
  uint64_t v80 = v78;
  unint64_t v81 = v79;
  if (sub_23309B810() != 2)
  {
    unint64_t v162 = v75;
    id v187 = objc_msgSend(v61, sel_string);
    uint64_t v188 = sub_23309B710();
    uint64_t v190 = v189;

    id v191 = objc_msgSend(v61, sel_string);
    sub_23309B710();

    sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v192 = sub_23309B850();
    swift_bridgeObjectRelease();
    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v193 = v188;
    *(void *)(v193 + 8) = v190;
    *(void *)(v193 + 16) = v192;
    *(unsigned char *)(v193 + 24) = 0;
    swift_willThrow();
    uint64_t v124 = *(void (**)(char *, unint64_t))(v162 + 8);
    unint64_t v164 = v243;
    v124(v244, v243);
    uint64_t v165 = (uint64_t)v247;
    uint64_t v166 = (uint64_t)v234;
LABEL_46:
    sub_232F49AD4(v165, v166);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v162 + 48))(v166, 1, v164) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      uint64_t v135 = (char *)v166;
      unint64_t v136 = v164;
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v82 = sub_232F3B994(v80, v81);
  if ((v83 & 1) != 0 || v82 > 60)
  {
    swift_bridgeObjectRelease();
    id v194 = objc_msgSend(v61, sel_string);
    uint64_t v195 = sub_23309B710();
    uint64_t v197 = v196;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v198 = v195;
    *(void *)(v198 + 8) = v197;
    *(void *)(v198 + 16) = v77;
    *(unsigned char *)(v198 + 24) = 6;
    swift_willThrow();
    uint64_t v134 = *(void (**)(char *, unint64_t))(v75 + 8);
    unint64_t v59 = v243;
    v134(v244, v243);
    uint64_t v179 = (uint64_t)v247;
    uint64_t v180 = (uint64_t)v233;
LABEL_54:
    sub_232F49AD4(v179, v180);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v75 + 48))(v180, 1, v59) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      size_t v139 = (char *)v180;
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  uint64_t v84 = sub_23309BCC0();
  sub_23309BCB0();
  uint64_t v86 = v85;
  swift_bridgeObjectRelease();
  if (v86)
  {
    uint64_t v84 = sub_23309BCC0();
    sub_23309BCD0();
    if (v87)
    {
      uint64_t v245 = v80;
      unint64_t v246 = v81;
      sub_23309B880();
      sub_23309B880();
      swift_bridgeObjectRelease();
      uint64_t v80 = v245;
      unint64_t v81 = v246;
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    id v61 = v241;
    id v199 = objc_msgSend(v241, sel_string);
    uint64_t v200 = sub_23309B710();
    uint64_t v202 = v201;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v203 = v200;
    *(void *)(v203 + 8) = v202;
    *(void *)(v203 + 16) = v84;
    *(unsigned char *)(v203 + 24) = 6;
    swift_willThrow();
    unint64_t v101 = v242;
    unint64_t v59 = v243;
    uint64_t v102 = *(void (**)(char *, unint64_t))(v242 + 8);
    v102(v244, v243);
    uint64_t v103 = (uint64_t)v247;
    uint64_t v104 = (uint64_t)v230;
LABEL_43:
    sub_232F49AD4(v103, v104);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v101 + 48))(v104, 1, v59) != 1)
    {
      uint64_t v113 = (void *)sub_23309ABD0();
      uint64_t v125 = (char *)v104;
      unint64_t v126 = v59;
      goto LABEL_29;
    }
    goto LABEL_25;
  }
LABEL_21:
  uint64_t v88 = sub_23309B230();
  uint64_t v89 = (uint64_t)v232;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v232, 1, 1, v88);
  uint64_t v90 = sub_23309BCA0();
  uint64_t v92 = v91;
  unint64_t v94 = v93;
  uint64_t v95 = sub_233067090(v89, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  if (v94 & 0x100000000) != 0 || (MEMORY[0x237DB5C80](v95, 60.0), (sub_23309BC70()))
  {
    swift_bridgeObjectRelease();
    id v61 = v241;
    id v96 = objc_msgSend(v241, sel_string);
    uint64_t v97 = sub_23309B710();
    uint64_t v99 = v98;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v100 = v97;
    *(void *)(v100 + 8) = v99;
    *(void *)(v100 + 16) = v84;
    *(unsigned char *)(v100 + 24) = 6;
    swift_willThrow();
    unint64_t v101 = v242;
    unint64_t v59 = v243;
    uint64_t v102 = *(void (**)(char *, unint64_t))(v242 + 8);
    v102(v244, v243);
    uint64_t v103 = (uint64_t)v247;
    uint64_t v104 = (uint64_t)v231;
    goto LABEL_43;
  }
  unint64_t v239 = (unint64_t)v92;
  unint64_t v240 = v90;
  id v204 = v241;
  uint64_t v205 = sub_23309BCC0();
  if (v229)
  {
    uint64_t v206 = v205;
    if ((objc_msgSend(v204, sel_isAtEnd) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      id v216 = objc_msgSend(v204, sel_string);
      uint64_t v217 = sub_23309B710();
      uint64_t v219 = v218;

      sub_232F49A80();
      swift_allocError();
      *(void *)uint64_t v220 = v217;
      *(void *)(v220 + 8) = v219;
      *(void *)(v220 + 16) = v206;
      *(unsigned char *)(v220 + 24) = 10;
      swift_willThrow();
      unint64_t v222 = v242;
      unint64_t v221 = v243;
      uint64_t v102 = *(void (**)(char *, unint64_t))(v242 + 8);
      v102(v244, v243);
      uint64_t v223 = v226;
      sub_232F49AD4((uint64_t)v247, v226);
      id v61 = v204;
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v222 + 48))(v223, 1, v221) != 1)
      {
        uint64_t v224 = v226;
        uint64_t v113 = (void *)sub_23309ABD0();
        uint64_t v125 = (char *)v224;
        unint64_t v126 = v243;
        goto LABEL_29;
      }
      goto LABEL_25;
    }
  }
  unint64_t v207 = v242;
  unint64_t v208 = v243;
  v209 = v244;
  v244 = *(char **)(v242 + 8);
  ((void (*)(char *, unint64_t))v244)(v209, v243);
  uint64_t v210 = v227;
  sub_232F49AD4((uint64_t)v247, v227);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v207 + 48))(v210, 1, v208) == 1)
  {
    uint64_t v211 = 0;
  }
  else
  {
    uint64_t v211 = (void *)sub_23309ABD0();
    ((void (*)(uint64_t, unint64_t))v244)(v210, v243);
  }
  __int16 v213 = v239;
  int v212 = v240;
  unint64_t v243 = HIWORD(v239);
  v244 = (char *)(v94 >> 16);
  unint64_t v242 = HIDWORD(v239);
  v238 = (char *)HIWORD(v240);
  v239 >>= 16;
  unint64_t v214 = HIDWORD(v240);
  objc_msgSend(v241, sel_setCharactersToBeSkipped_, v211);

  uint64_t result = sub_233067090((uint64_t)v247, &qword_268757310, MEMORY[0x263F06278]);
  uint64_t v215 = v228;
  unsigned char *v228 = v76;
  v215[1] = v71;
  *((_DWORD *)v215 + 1) = v212;
  *((_WORD *)v215 + 4) = v214;
  *((_WORD *)v215 + 5) = (_WORD)v238;
  *((_WORD *)v215 + 6) = v213;
  *((_WORD *)v215 + 7) = v239;
  *((_WORD *)v215 + 8) = v242;
  *((_WORD *)v215 + 9) = v243;
  *((_WORD *)v215 + 10) = v94;
  *((_WORD *)v215 + 11) = (_WORD)v244;
  *((void *)v215 + 3) = v80;
  *((void *)v215 + 4) = v81;
  return result;
}

unint64_t sub_233066CB0()
{
  unint64_t result = qword_268758AA8;
  if (!qword_268758AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758AA8);
  }
  return result;
}

unint64_t sub_233066D08()
{
  unint64_t result = qword_268758AB0;
  if (!qword_268758AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758AB0);
  }
  return result;
}

unint64_t sub_233066D60()
{
  unint64_t result = qword_268758AB8;
  if (!qword_268758AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758AB8);
  }
  return result;
}

uint64_t sub_233066DB4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

unsigned __int8 *sub_233066DC0(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2 = *result;
  if (v2 >= 0x17) {
    LOBYTE(v2) = 23;
  }
  *(unsigned char *)(a2 + 1) = v2;
  return result;
}

uint64_t sub_233066DD8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 2);
  return result;
}

unsigned __int8 *sub_233066DE4(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2 = *result;
  if (v2 >= 0x3B) {
    LOBYTE(v2) = 59;
  }
  *(unsigned char *)(a2 + 2) = v2;
  return result;
}

__n128 sub_233066DFC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 4);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 4) = result;
  return result;
}

uint64_t destroy for FHIRTime()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FHIRTime(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FHIRTime(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_WORD *)(a1 + 14) = *(_WORD *)(a2 + 14);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FHIRTime(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRTime(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRTime(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FHIRTime()
{
  return &type metadata for FHIRTime;
}

void sub_23306702C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_233067090(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23306702C(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id sub_233067100(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    uint64_t v10 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    if (a5) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = 0;
    if (a7) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v12 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = 0;
  if (!a5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v11 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  if (!a7) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v12 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
LABEL_8:
  id v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_medicalCodingWithSystem_codingVersion_code_displayString_, a1, v10, v11, v12);

  return v13;
}

char *Quantity.asCodedQuantity()()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_23309AF80();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v13 = type metadata accessor for Quantity();
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  unint64_t v19 = (char *)&v40 - v18;
  if ((*(unsigned char *)(v2 + 20) & 1) == 0)
  {
    uint64_t v45 = v4;
    uint64_t v46 = v17;
    uint64_t v41 = v6;
    uint64_t v44 = v1;
    uint64_t v42 = sub_23309BC30();
    uint64_t v43 = v20;
    uint64_t v21 = *(void *)(v2 + 48);
    sub_233068768(v2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Quantity);
    if (v21)
    {
      sub_233069E08((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Quantity);
      sub_233068768(v2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
      uint64_t v22 = v41;
      uint64_t v23 = v3;
    }
    else
    {
      sub_233068768((uint64_t)&v19[*(int *)(v46 + 28)], (uint64_t)v12, (uint64_t (*)(void))sub_232F41D18);
      sub_233069E08((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Quantity);
      uint64_t v23 = v3;
      int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v12, 1, v3);
      sub_233069E08((uint64_t)v12, (uint64_t (*)(void))sub_232F41D18);
      sub_233068768(v2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
      uint64_t v22 = v41;
      if (v24 == 1)
      {
        uint64_t v25 = v46;
        uint64_t v26 = *(void *)&v16[*(int *)(v46 + 32) + 8];
        sub_233069E08((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
        if (!v26)
        {
          id v27 = 0;
          uint64_t v28 = *(void *)(v2 + 32);
          if (v28)
          {
LABEL_19:
            id v29 = Quantity.medicalCoding(with:)(*(void *)(v2 + 24), v28);
            goto LABEL_20;
          }
LABEL_8:
          id v29 = 0;
LABEL_20:
          id v37 = objc_allocWithZone(MEMORY[0x263F0A1D8]);
          uint64_t v38 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          unint64_t v19 = (char *)objc_msgSend(v37, sel_initWithRawValue_comparatorCoding_unitCoding_, v38, v29, v27);

          return v19;
        }
LABEL_10:
        sub_233068768(v2 + *(int *)(v25 + 28), (uint64_t)v10, (uint64_t (*)(void))sub_232F41D18);
        uint64_t v30 = v45;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v10, 1, v23) == 1)
        {
          sub_233069E08((uint64_t)v10, (uint64_t (*)(void))sub_232F41D18);
          id v31 = 0;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v22, v10, v23);
          uint64_t v32 = self;
          sub_23309AEE0();
          uint64_t v33 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          id v31 = objc_msgSend(v32, sel_codeSystemWithIdentifier_, v33);

          (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v23);
        }
        uint64_t v34 = *(void *)(v2 + 48);
        if (*(void *)(v2 + *(int *)(v25 + 32) + 8))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v35 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          if (v34)
          {
LABEL_15:
            uint64_t v36 = (void *)sub_23309B6E0();
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = 0;
          if (v34) {
            goto LABEL_15;
          }
        }
        uint64_t v36 = 0;
LABEL_18:
        id v27 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v31, 0, v35, v36);

        uint64_t v28 = *(void *)(v2 + 32);
        if (v28) {
          goto LABEL_19;
        }
        goto LABEL_8;
      }
    }
    sub_233069E08((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
    uint64_t v25 = v46;
    goto LABEL_10;
  }
  type metadata accessor for HDHRExtractionError(0);
  uint64_t v47 = 201;
  sub_232F54C28(MEMORY[0x263F8EE78]);
  sub_233069E68((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  sub_23309AEA0();
  swift_willThrow();
  return v19;
}

uint64_t type metadata accessor for Quantity()
{
  uint64_t result = qword_268758AF0;
  if (!qword_268758AF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Quantity.value.getter()
{
  return *(void *)v0;
}

uint64_t Quantity.comparator.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.unit.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.system.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Quantity();
  return sub_233068768(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(void))sub_232F41D18);
}

uint64_t Quantity.code.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Quantity() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Quantity.hash(into:)()
{
  uint64_t v1 = sub_23309AF80();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 20) == 1)
  {
    sub_23309C3F0();
    if (*(void *)(v0 + 32)) {
      goto LABEL_3;
    }
LABEL_6:
    sub_23309C3F0();
    if (*(void *)(v0 + 48)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_23309C3F0();
  sub_23309BC90();
  if (!*(void *)(v0 + 32)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
LABEL_4:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  sub_23309C3F0();
LABEL_8:
  uint64_t v8 = type metadata accessor for Quantity();
  sub_233068768(v0 + *(int *)(v8 + 28), (uint64_t)v7, (uint64_t (*)(void))sub_232F41D18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_23309C3F0();
    sub_233069E68(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  if (!*(void *)(v0 + *(int *)(v8 + 32) + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233067C68()
{
  uint64_t result = 0x65756C6176;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x74617261706D6F63;
      break;
    case 2:
      uint64_t result = 1953066613;
      break;
    case 3:
      uint64_t result = 0x6D6574737973;
      break;
    case 4:
      uint64_t result = 1701080931;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233067D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_233069C0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233067D28(uint64_t a1)
{
  unint64_t v2 = sub_233068D08();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_233067D64(uint64_t a1)
{
  unint64_t v2 = sub_233068D08();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Quantity.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_233068D5C(0, &qword_268758AC8, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v13[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233068D08();
  sub_23309C480();
  int v10 = *((_DWORD *)v3 + 4);
  char v11 = *((unsigned char *)v3 + 20);
  long long v14 = *v3;
  int v15 = v10;
  char v16 = v11;
  v13[15] = 0;
  type metadata accessor for Decimal(0);
  sub_233069E68(&qword_268757618, type metadata accessor for Decimal);
  sub_23309C150();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_23309C110();
    LOBYTE(v14) = 2;
    sub_23309C110();
    type metadata accessor for Quantity();
    LOBYTE(v14) = 3;
    sub_23309AF80();
    sub_233069E68(&qword_268757720, MEMORY[0x263F06EA8]);
    sub_23309C150();
    LOBYTE(v14) = 4;
    sub_23309C110();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Quantity.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Quantity.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  sub_232F41D18();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233068D5C(0, &qword_268758AD8, MEMORY[0x263F8E040]);
  uint64_t v31 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int v10 = (char *)&v29 - v9;
  uint64_t v11 = type metadata accessor for Quantity();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_233068D08();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  id v29 = v6;
  int v15 = v13;
  uint64_t v16 = v8;
  type metadata accessor for Decimal(0);
  char v36 = 0;
  sub_233069E68(&qword_2687575E0, type metadata accessor for Decimal);
  uint64_t v17 = v31;
  sub_23309C080();
  int v18 = v34;
  char v19 = v35;
  uint64_t v20 = (uint64_t)v15;
  *(_OWORD *)int v15 = v33;
  *((_DWORD *)v15 + 4) = v18;
  v15[20] = v19;
  LOBYTE(v33) = 1;
  *((void *)v15 + 3) = sub_23309C040();
  *((void *)v15 + 4) = v21;
  LOBYTE(v33) = 2;
  *((void *)v15 + 5) = sub_23309C040();
  *((void *)v15 + 6) = v22;
  sub_23309AF80();
  LOBYTE(v33) = 3;
  sub_233069E68(&qword_268757730, MEMORY[0x263F06EA8]);
  uint64_t v23 = (uint64_t)v29;
  sub_23309C080();
  sub_232F63BA8(v23, v20 + *(int *)(v11 + 28));
  LOBYTE(v33) = 4;
  uint64_t v24 = sub_23309C040();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v17);
  id v27 = (uint64_t *)(v20 + *(int *)(v11 + 32));
  uint64_t *v27 = v24;
  v27[1] = v26;
  sub_233068768(v20, v30, (uint64_t (*)(void))type metadata accessor for Quantity);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_233069E08(v20, (uint64_t (*)(void))type metadata accessor for Quantity);
}

uint64_t sub_233068520@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Quantity.init(from:)(a1, a2);
}

uint64_t sub_233068538(void *a1)
{
  return Quantity.encode(to:)(a1);
}

uint64_t sub_233068550()
{
  return sub_23309C420();
}

uint64_t sub_233068594()
{
  return sub_23309C420();
}

void *sub_2330685D4()
{
  uint64_t result = (void *)sub_232F37BB4((uint64_t)&unk_26E6A5F40);
  off_268758AC0 = result;
  return result;
}

id Quantity.medicalCoding(with:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_FHIRQuantityComparatorSystem);
  if (qword_268756428 != -1) {
    swift_once();
  }
  uint64_t v5 = off_268758AC0;
  if (*((void *)off_268758AC0 + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_232F393E0(a1, a2);
    if (v7)
    {
      uint64_t v8 = *(void *)(v5[7] + 16 * v6 + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  if (v8)
  {
    int v10 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    int v10 = 0;
  }
  id v11 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v4, 0, v9, v10);

  return v11;
}

uint64_t sub_233068768(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL _s23HealthRecordsExtraction8QuantityV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F6703C();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  int v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  int v18 = (char *)&v42 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v42 - v19;
  if (*(unsigned char *)(a1 + 20))
  {
    if (!*(unsigned char *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 1) != 0 {
         || (MEMORY[0x237DB5CC0](*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)
  }
  {
    return 0;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(a2 + 32);
  if (!v21)
  {
    if (v22) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v22) {
    return 0;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v21 == v22
    || (v23 = sub_23309C220(), BOOL result = 0, (v23 & 1) != 0))
  {
LABEL_13:
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v26 = *(void *)(a2 + 48);
    if (v25)
    {
      if (!v26) {
        return 0;
      }
      if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || v25 != v26)
      {
        char v27 = sub_23309C220();
        BOOL result = 0;
        if ((v27 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v28 = type metadata accessor for Quantity();
    uint64_t v43 = v4;
    uint64_t v29 = v28;
    uint64_t v30 = a1 + *(int *)(v28 + 28);
    uint64_t v45 = v5;
    sub_233068768(v30, (uint64_t)v20, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v42 = v29;
    uint64_t v31 = *(int *)(v29 + 28);
    uint64_t v32 = v43;
    sub_233068768(a2 + v31, (uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v33 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_233068768((uint64_t)v20, (uint64_t)v11, (uint64_t (*)(void))sub_232F41D18);
    uint64_t v44 = v33;
    sub_233068768((uint64_t)v18, v33, (uint64_t (*)(void))sub_232F41D18);
    int v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v34((uint64_t)v11, 1, v32) == 1)
    {
      sub_233069E08((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
      sub_233069E08((uint64_t)v20, (uint64_t (*)(void))sub_232F41D18);
      if (v34(v44, 1, v32) == 1)
      {
        sub_233069E08((uint64_t)v11, (uint64_t (*)(void))sub_232F41D18);
LABEL_27:
        uint64_t v37 = *(int *)(v42 + 32);
        uint64_t v38 = (void *)(a1 + v37);
        uint64_t v39 = *(void *)(a1 + v37 + 8);
        uint64_t v40 = (void *)(a2 + v37);
        uint64_t v41 = v40[1];
        if (v39) {
          return v41 && (*v38 == *v40 && v39 == v41 || (sub_23309C220() & 1) != 0);
        }
        return !v41;
      }
    }
    else
    {
      sub_233068768((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))sub_232F41D18);
      if (v34(v44, 1, v32) != 1)
      {
        uint64_t v35 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v7, v44, v32);
        sub_233069E68((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
        LODWORD(v44) = sub_23309B6D0();
        char v36 = *(void (**)(char *, uint64_t))(v35 + 8);
        v36(v7, v32);
        sub_233069E08((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
        sub_233069E08((uint64_t)v20, (uint64_t (*)(void))sub_232F41D18);
        v36(v15, v32);
        sub_233069E08((uint64_t)v11, (uint64_t (*)(void))sub_232F41D18);
        if ((v44 & 1) == 0) {
          return 0;
        }
        goto LABEL_27;
      }
      sub_233069E08((uint64_t)v18, (uint64_t (*)(void))sub_232F41D18);
      sub_233069E08((uint64_t)v20, (uint64_t (*)(void))sub_232F41D18);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v32);
    }
    sub_233069E08((uint64_t)v11, (uint64_t (*)(void))sub_232F6703C);
    return 0;
  }
  return result;
}

unint64_t sub_233068D08()
{
  unint64_t result = qword_268758AD0;
  if (!qword_268758AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758AD0);
  }
  return result;
}

void sub_233068D5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_233068D08();
    unint64_t v7 = a3(a1, &type metadata for Quantity.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_233068DC0(void *a1)
{
  a1[1] = sub_233069E68(&qword_2687568A0, (void (*)(uint64_t))type metadata accessor for Quantity);
  a1[2] = sub_233069E68(&qword_268756AD8, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t result = sub_233069E68(&qword_268758AE0, (void (*)(uint64_t))type metadata accessor for Quantity);
  a1[3] = result;
  return result;
}

uint64_t sub_233068E6C()
{
  return sub_233069E68(&qword_268758AE8, (void (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t *initializeBufferWithCopyOfBuffer for Quantity(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = a2[6];
    uint64_t v9 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    a1[5] = a2[5];
    a1[6] = v8;
    uint64_t v11 = sub_23309AF80();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_232F41D18();
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = *(int *)(a3 + 32);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    int v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Quantity(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_232F41D18();
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Quantity(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v6;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_232F41D18();
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (void *)(a1 + v16);
  int v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_232F41D18();
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_232F41D18();
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 32);
  int v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *int v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Quantity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2330697E4);
}

uint64_t sub_2330697E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232F41D18();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Quantity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2330698B4);
}

uint64_t sub_2330698B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 32) = a2;
  }
  else
  {
    sub_232F41D18();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_23306995C()
{
  sub_232F41D18();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Quantity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233069ACCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Quantity.CodingKeys()
{
  return &type metadata for Quantity.CodingKeys;
}

unint64_t sub_233069B08()
{
  unint64_t result = qword_268758B00;
  if (!qword_268758B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758B00);
  }
  return result;
}

unint64_t sub_233069B60()
{
  unint64_t result = qword_268758B08;
  if (!qword_268758B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758B08);
  }
  return result;
}

unint64_t sub_233069BB8()
{
  unint64_t result = qword_268758B10;
  if (!qword_268758B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758B10);
  }
  return result;
}

uint64_t sub_233069C0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617261706D6F63 && a2 == 0xEA0000000000726FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_233069E08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_233069E68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t DecodingError.hdhr_friendlyDescription.getter()
{
  uint64_t v1 = sub_23309BEB0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v8 = sub_23309BEC0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (long long *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 16))(v11, v0, v8);
  int v12 = (*(uint64_t (**)(long long *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == *MEMORY[0x263F8DCB0])
  {
    (*(void (**)(long long *, uint64_t))(v9 + 96))(v11, v8);
    sub_23306A7F8(0, (unint64_t *)&qword_2687575A8, (void (*)(uint64_t))sub_232F5A6C8);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v13 + 48), v1);
    uint64_t v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    unint64_t v16 = v15;
    v43[0] = 0x20746F6E5B2ELL;
    v43[1] = 0xE600000000000000;
    sub_23309C4D0();
LABEL_5:
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    uint64_t v46 = v14;
    unint64_t v47 = v16;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_23309B940();
    unint64_t v47 = v19;
    sub_23309B860();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v46;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return v20;
  }
  if (v12 == *MEMORY[0x263F8DCC0])
  {
    (*(void (**)(long long *, uint64_t))(v9 + 96))(v11, v8);
    sub_23306A7F8(0, (unint64_t *)&qword_2687575A8, (void (*)(uint64_t))sub_232F5A6C8);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, (char *)v11 + *(int *)(v17 + 48), v1);
    uint64_t v14 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    unint64_t v16 = v18;
    v43[0] = 0;
    v43[1] = 0xE000000000000000;
    sub_23309BE40();
    swift_bridgeObjectRelease();
    strcpy((char *)v43, ".[not found; ");
    HIWORD(v43[1]) = -4864;
    sub_23309C4D0();
    goto LABEL_5;
  }
  if (v12 == *MEMORY[0x263F8DCA8])
  {
    (*(void (**)(long long *, uint64_t))(v9 + 96))(v11, v8);
    sub_23306A7F8(0, &qword_268758B18, (void (*)(uint64_t))sub_23306A86C);
    char v23 = (char *)v11 + *(int *)(v22 + 48);
    sub_232F3FDD0(v11, (uint64_t)v43);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v23, v1);
    uint64_t v24 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    uint64_t v26 = v25;
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    sub_23309BE40();
    swift_bridgeObjectRelease();
    uint64_t v46 = 46;
    unint64_t v47 = 0xE100000000000000;
    uint64_t v27 = v44;
    uint64_t v28 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    CodingKey.hdhr_keyPathRepresentation.getter(v27, v28);
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    uint64_t v41 = v24;
    uint64_t v42 = v26;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_23309B940();
    uint64_t v42 = v29;
    sub_23309B860();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v41;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
  else if (v12 == *MEMORY[0x263F8DCB8])
  {
    (*(void (**)(long long *, uint64_t))(v9 + 96))(v11, v8);
    (*(void (**)(char *, long long *, uint64_t))(v2 + 32))(v7, v11, v1);
    uint64_t v30 = sub_23309BEA0();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 0x2000000000000000) != 0) {
      uint64_t v33 = HIBYTE(v32) & 0xF;
    }
    else {
      uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v34 = DecodingError.Context.hdhr_keyPathRepresentation.getter();
    uint64_t v36 = v34;
    unint64_t v37 = v35;
    if (v33)
    {
      v43[0] = 23342;
      v43[1] = 0xE200000000000000;
      sub_23309BEA0();
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      uint64_t v46 = v36;
      unint64_t v47 = v37;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_23309B940();
      unint64_t v47 = v38;
      sub_23309B860();
      swift_bridgeObjectRelease();
    }
    else
    {
      v43[0] = 0xD000000000000011;
      v43[1] = 0x80000002330B6D60;
      uint64_t v46 = v34;
      unint64_t v47 = v35;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_23309B940();
      unint64_t v47 = v39;
      sub_23309B860();
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = v46;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  else
  {
    uint64_t v20 = sub_23309C370();
    (*(void (**)(long long *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v20;
}

uint64_t CodingKey.hdhr_keyPathRepresentation.getter(uint64_t a1, uint64_t a2)
{
  sub_23309C4A0();
  if ((v4 & 1) == 0) {
    return sub_23309C1E0();
  }
  return MEMORY[0x270FA0090](a1, a2);
}

uint64_t DecodingError.Context.hdhr_keyPathRepresentation.getter()
{
  uint64_t v0 = sub_23309BE90();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_232F39748(0, v1, 0);
    uint64_t v2 = v0 + 32;
    uint64_t v3 = v17;
    do
    {
      sub_232EA35E0(v2, (uint64_t)v14);
      uint64_t v4 = v15;
      uint64_t v5 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      uint64_t v6 = CodingKey.hdhr_keyPathRepresentation.getter(v4, v5);
      uint64_t v8 = v7;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_232F39748(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v17;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_232F39748(v9 > 1, v10 + 1, 1);
        uint64_t v3 = v17;
      }
      *(void *)(v3 + 16) = v10 + 1;
      uint64_t v11 = v3 + 16 * v10;
      *(void *)(v11 + 32) = v6;
      *(void *)(v11 + 40) = v8;
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  v14[0] = v3;
  sub_232F51B70();
  sub_232F65EE4();
  uint64_t v12 = sub_23309B6C0();
  swift_bridgeObjectRelease();
  return v12;
}

void sub_23306A7F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_23309BEB0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

unint64_t sub_23306A86C()
{
  unint64_t result = qword_268758B20;
  if (!qword_268758B20)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, &qword_268758B20);
  }
  return result;
}

id sub_23306A8C8(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  if (a5 != 2)
  {
    if (a5) {
      return result;
    }
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for VCJWTVerificationError(uint64_t a1)
{
}

void sub_23306A958(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 3)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    return;
  }
  if (a5 != 2)
  {
    if (a5) {
      return;
    }
    goto LABEL_6;
  }
}

uint64_t initializeWithCopy for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23306A8C8(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23306A8C8(*(id *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_23306A958(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for VCJWTVerificationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_23306A958(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for VCJWTVerificationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VCJWTVerificationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23306AB88(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 3u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_23306ABA0(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VCJWTVerificationError()
{
  return &type metadata for VCJWTVerificationError;
}

unint64_t sub_23306ABCC()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      *(void *)&long long v19 = 0x1000000000000017;
      *((void *)&v19 + 1) = 0x80000002330B6E10;
      sub_23309B880();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 2:
      *(void *)&long long v19 = 0;
      *((void *)&v19 + 1) = 0xE000000000000000;
      id v5 = (id)v1;
      sub_23309BE40();
      uint64_t v21 = 0;
      unint64_t v22 = 0xE000000000000000;
      sub_23309B880();
      id v6 = objc_msgSend(v5, sel_userInfo);
      uint64_t v7 = MEMORY[0x263F8D310];
      uint64_t v8 = sub_23309B650();

      if (*(void *)(v8 + 16) && (unint64_t v9 = sub_232F393E0(0x697263736544534ELL, 0xED00006E6F697470), (v10 & 1) != 0))
      {
        sub_232F397F8(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v17);
        swift_bridgeObjectRelease();
        if (*((void *)&v18 + 1))
        {
          sub_232F3A680(&v17, &v19);
          goto LABEL_17;
        }
      }
      else
      {
        long long v17 = 0u;
        long long v18 = 0u;
        swift_bridgeObjectRelease();
      }
      id v13 = objc_msgSend(v5, sel_localizedDescription, v17, (void)v18, *((void *)&v18 + 1));
      uint64_t v14 = sub_23309B710();
      uint64_t v16 = v15;

      uint64_t v20 = v7;
      *(void *)&long long v19 = v14;
      *((void *)&v19 + 1) = v16;
      sub_232F5D41C((uint64_t)&v17);
LABEL_17:
      sub_23309BF50();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      sub_23309B880();
      *(void *)&long long v19 = objc_msgSend(v5, sel_code);
      sub_23309C1E0();
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      sub_23306A958((void *)v1, v2, v4, v3, 2);
      return v21;
    case 3:
      *(void *)&long long v19 = 0;
      *((void *)&v19 + 1) = 0xE000000000000000;
      sub_23309BE40();
      sub_23309B880();
      sub_23309B880();
      sub_23309B880();
      sub_23309B880();
      goto LABEL_18;
    case 4:
      if (v1 == 1 && (v4 | v2 | v3) == 0) {
        unint64_t v11 = 0xD000000000000010;
      }
      else {
        unint64_t v11 = 0xD00000000000001DLL;
      }
      if (v4 | v2 | v1 | v3) {
        return v11;
      }
      else {
        return 0xD00000000000001DLL;
      }
    default:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      *(void *)&long long v19 = 0x687469772079656BLL;
      *((void *)&v19 + 1) = 0xAF9C80E220746920;
      sub_23309B880();
LABEL_18:
      sub_23309B880();
      return v19;
  }
}

uint64_t sub_23306B0B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  unint64_t v8 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  int v11 = *(unsigned __int8 *)(a2 + 32);
  switch(v6)
  {
    case 1:
      if (v11 != 1) {
        goto LABEL_56;
      }
      char v12 = sub_233034A38(*(void *)a1, *(void *)a2);
      sub_23306A958((void *)v3, v2, v5, v4, 1);
      id v13 = (void *)v8;
      uint64_t v14 = v7;
      uint64_t v15 = v10;
      uint64_t v16 = v9;
      char v17 = 1;
      goto LABEL_8;
    case 2:
      if (v11 != 2)
      {
        id v26 = (id)v3;
        goto LABEL_56;
      }
      sub_233044720();
      sub_23306A8C8((id)v8, v7, v10, v9, 2);
      sub_23306A8C8((id)v3, v2, v5, v4, 2);
      char v12 = sub_23309BBF0();
      sub_23306A958((void *)v3, v2, v5, v4, 2);
      id v13 = (void *)v8;
      uint64_t v14 = v7;
      uint64_t v15 = v10;
      uint64_t v16 = v9;
      char v17 = 2;
LABEL_8:
      sub_23306A958(v13, v14, v15, v16, v17);
      return v12 & 1;
    case 3:
      if (v11 != 3)
      {
        swift_bridgeObjectRetain();
LABEL_36:
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }
      BOOL v19 = v3 == v8 && v2 == v7;
      if (!v19 && (sub_23309C220() & 1) == 0)
      {
        sub_23306A8C8((id)v8, v7, v10, v9, 3);
        sub_23306A8C8((id)v3, v2, v5, v4, 3);
        sub_23306A958((void *)v3, v2, v5, v4, 3);
        unint64_t v31 = (void *)v8;
        uint64_t v32 = v7;
        uint64_t v33 = v10;
        uint64_t v34 = v9;
        char v35 = 3;
        goto LABEL_57;
      }
      if (v5 == v10 && v4 == v9) {
        char v21 = 1;
      }
      else {
        char v21 = sub_23309C220();
      }
      sub_23306A8C8((id)v8, v7, v10, v9, 3);
      sub_23306A8C8((id)v3, v2, v5, v4, 3);
      sub_23306A958((void *)v3, v2, v5, v4, 3);
      sub_23306A958((void *)v8, v7, v10, v9, 3);
      return v21 & 1;
    case 4:
      if (v5 | v2 | v3 | v4)
      {
        if (v3 != 1 || (v5 | v2 | v4) != 0)
        {
          if (v11 != 4 || v8 != 2 || (v10 | v7 | v9) != 0) {
            goto LABEL_56;
          }
          sub_23306A958((void *)2, 0, 0, 0, 4);
          uint64_t v25 = 2;
LABEL_48:
          sub_23306A958((void *)v25, 0, 0, 0, 4);
          char v21 = 1;
          return v21 & 1;
        }
        if (v11 == 4 && v8 == 1 && (v10 | v7 | v9) == 0)
        {
          char v21 = 1;
          sub_23306A958((void *)1, 0, 0, 0, 4);
          sub_23306A958((void *)1, 0, 0, 0, 4);
          return v21 & 1;
        }
      }
      else if (v11 == 4 && (v10 | v7 | v8 | v9) == 0)
      {
        sub_23306A958(0, 0, 0, 0, 4);
        uint64_t v25 = 0;
        goto LABEL_48;
      }
LABEL_56:
      sub_23306A8C8((id)v8, v7, v10, v9, v11);
      sub_23306A958((void *)v3, v2, v5, v4, v6);
      unint64_t v31 = (void *)v8;
      uint64_t v32 = v7;
      uint64_t v33 = v10;
      uint64_t v34 = v9;
      char v35 = v11;
LABEL_57:
      sub_23306A958(v31, v32, v33, v34, v35);
      char v21 = 0;
      return v21 & 1;
    default:
      if (*(unsigned char *)(a2 + 32)) {
        goto LABEL_36;
      }
      if (v3 == v8 && v2 == v7) {
        char v21 = 1;
      }
      else {
        char v21 = sub_23309C220();
      }
      sub_23306A8C8((id)v8, v7, v10, v9, 0);
      sub_23306A8C8((id)v3, v2, v5, v4, 0);
      sub_23306A958((void *)v3, v2, v5, v4, 0);
      sub_23306A958((void *)v8, v7, v10, v9, 0);
      return v21 & 1;
  }
}

uint64_t sub_23306B538(uint64_t a1)
{
  v2[69] = v1;
  v2[68] = a1;
  v2[70] = type metadata accessor for PostExtractionContext();
  v2[71] = swift_task_alloc();
  v2[72] = type metadata accessor for FHIRExtractionContext();
  v2[73] = swift_task_alloc();
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_23306DDD8(0, &qword_268758B30, (uint64_t (*)(uint64_t))type metadata accessor for RecordExtractionContext, MEMORY[0x263F8D8F0]);
  v2[74] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for RecordExtractionContext();
  v2[75] = v4;
  v2[76] = *(void *)(v4 - 8);
  v2[77] = swift_task_alloc();
  sub_23306DDD8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v3);
  v2[78] = swift_task_alloc();
  uint64_t v5 = sub_23309B190();
  v2[79] = v5;
  v2[80] = *(void *)(v5 - 8);
  v2[81] = swift_task_alloc();
  v2[82] = type metadata accessor for ExtractionContext();
  v2[83] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23306B7C0, 0, 0);
}

uint64_t sub_23306B7C0()
{
  uint64_t v1 = *(void **)(v0 + 544);
  id v2 = objc_msgSend(v1, sel_identifier);
  id v3 = objc_msgSend(v2, sel_resourceType);

  uint64_t v4 = sub_23309B710();
  uint64_t v6 = v5;

  *(void *)(v0 + 672) = v4;
  *(void *)(v0 + 680) = v6;
  id v7 = objc_msgSend(v1, sel_FHIRVersion);
  id v8 = objc_msgSend(v7, sel_FHIRRelease);

  LOBYTE(v1) = sub_232F437C0(v4, v6, (uint64_t)v8, v1);
  if ((v1 & 1) == 0)
  {
    uint64_t v20 = *(void **)(v0 + 544);
    sub_23309B710();
    sub_23306DDD8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2330A1880;
    *(void *)(inited + 32) = sub_23309B710();
    *(void *)(inited + 40) = v22;
    sub_23309BE40();
    swift_bridgeObjectRelease();
    uint64_t v100 = v4;
    sub_23309B880();
    id v23 = objc_msgSend(v20, sel_FHIRVersion);
    id v24 = objc_msgSend(v23, sel_FHIRRelease);

    sub_23309B710();
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 48) = v100;
    *(void *)(inited + 56) = v6;
    sub_232F37A50(inited);
    id v25 = objc_allocWithZone(MEMORY[0x263F087E8]);
    id v26 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, 125, v27);

    swift_willThrow();
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v88 = *(uint64_t (**)(void))(v0 + 8);
    return v88();
  }
  uint64_t v9 = *(void **)(v0 + 544);
  id v10 = objc_msgSend(v9, sel_data);
  uint64_t v11 = sub_23309B030();
  unint64_t v13 = v12;

  *(void *)(v0 + 688) = v11;
  *(void *)(v0 + 696) = v13;
  id v14 = objc_msgSend(v9, sel_FHIRVersion);
  id v15 = objc_msgSend(v14, sel_FHIRRelease);

  uint64_t v16 = sub_23309B710();
  uint64_t v18 = v17;
  if (v16 == sub_23309B710() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_7:
    uint64_t v29 = (long long *)(v0 + 496);

    *(void *)(v0 + 520) = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
    *(void *)(v0 + 528) = &off_26E6ABA70;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 496));
    uint64_t v30 = &qword_268757938;
    unint64_t v31 = (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy;
    goto LABEL_13;
  }
  char v28 = sub_23309C220();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    goto LABEL_7;
  }
  uint64_t v32 = sub_23309B710();
  uint64_t v34 = v33;
  if (v32 == sub_23309B710() && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v36 = sub_23309C220();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v36 & 1) == 0)
    {
      uint64_t v99 = v11;
      uint64_t v80 = *(void **)(v0 + 544);
      sub_23309B710();
      sub_23306DDD8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
      uint64_t v81 = swift_initStackObject();
      *(_OWORD *)(v81 + 16) = xmmword_2330A1880;
      *(void *)(v81 + 32) = sub_23309B710();
      *(void *)(v81 + 40) = v82;
      sub_23309BE40();
      swift_bridgeObjectRelease();
      uint64_t v101 = v4;
      sub_23309B880();
      id v83 = objc_msgSend(v80, sel_FHIRVersion);
      id v84 = objc_msgSend(v83, sel_FHIRRelease);

      sub_23309B710();
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      *(void *)(v81 + 72) = MEMORY[0x263F8D310];
      *(void *)(v81 + 48) = v101;
      *(void *)(v81 + 56) = v6;
      sub_232F37A50(v81);
      id v85 = objc_allocWithZone(MEMORY[0x263F087E8]);
      uint64_t v86 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      uint64_t v87 = (void *)sub_23309B640();
      swift_bridgeObjectRelease();
      objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v86, 125, v87);

      swift_willThrow();
      sub_232E9AA4C(v99, v13);
      goto LABEL_25;
    }
  }
  uint64_t v29 = (long long *)(v0 + 336);
  *(void *)(v0 + 360) = type metadata accessor for ModelsR4.ResourceProxy(0);
  *(void *)(v0 + 368) = &off_26E6ABC40;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 336));
  uint64_t v30 = (unint64_t *)&qword_268756968;
  unint64_t v31 = (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy;
LABEL_13:
  sub_23306DBF8(v30, v31);
  sub_23309AB10();
  sub_232F3FDD0(v29, v0 + 376);
  *(void *)(v0 + 704) = 0;
  unint64_t v37 = *(void **)(v0 + 544);
  uint64_t v38 = *MEMORY[0x263F45D58];
  id v39 = objc_msgSend(v37, sel_extractionHints);
  id v40 = objc_msgSend(v37, sel_receivedDate);
  sub_23309B160();

  id v41 = objc_msgSend(v37, sel_serverBaseURL);
  uint64_t v42 = *(void *)(v0 + 624);
  unint64_t v89 = v13;
  uint64_t v98 = v11;
  id v94 = v39;
  uint64_t v95 = v38;
  if (v41)
  {
    uint64_t v43 = v41;
    sub_23309AF30();

    uint64_t v44 = sub_23309AF80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v42, 0, 1, v44);
  }
  else
  {
    uint64_t v45 = sub_23309AF80();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v42, 1, 1, v45);
  }
  uint64_t v46 = *(char **)(v0 + 664);
  unint64_t v47 = *(int **)(v0 + 656);
  uint64_t v48 = *(void *)(v0 + 648);
  uint64_t v49 = *(void *)(v0 + 640);
  uint64_t v50 = *(void *)(v0 + 632);
  uint64_t v92 = *(void *)(v0 + 608);
  uint64_t v93 = *(void *)(v0 + 600);
  uint64_t v90 = *(void *)(v0 + 624);
  uint64_t v91 = *(void *)(v0 + 592);
  id v51 = objc_msgSend(*(id *)(v0 + 544), sel_country);
  uint64_t v52 = sub_23309B710();
  uint64_t v54 = v53;

  *(void *)uint64_t v46 = v95;
  *((void *)v46 + 1) = v94;
  *((void *)v46 + 2) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(&v46[v47[7]], v48, v50);
  sub_232F63BA8(v90, (uint64_t)&v46[v47[8]]);
  uint64_t v55 = (uint64_t *)&v46[v47[9]];
  uint64_t *v55 = v52;
  v55[1] = v54;
  *(void *)&v46[v47[10]] = 0;
  uint64_t v56 = v47[11];
  type metadata accessor for CodeableConceptLookupService();
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A410]), sel_init);
  *(void *)&v46[v56] = v57;
  uint64_t v58 = *(void *)(v0 + 400);
  uint64_t v59 = *(void *)(v0 + 408);
  id v96 = (void *)(v0 + 376);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v58);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v46, v58, v59);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v91, 1, v93) == 1)
  {
    uint64_t v60 = *(void *)(v0 + 664);
    uint64_t v61 = *(void *)(v0 + 592);
    swift_bridgeObjectRelease();
    sub_23306DB88(v61, &qword_268758B30, (uint64_t (*)(uint64_t))type metadata accessor for RecordExtractionContext);
    sub_23309B710();
    sub_23306DDD8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
    uint64_t v62 = swift_initStackObject();
    *(_OWORD *)(v62 + 16) = xmmword_2330A1880;
    *(void *)(v62 + 32) = sub_23309B710();
    *(void *)(v62 + 40) = v63;
    *(void *)(v62 + 72) = MEMORY[0x263F8D310];
    *(void *)(v62 + 48) = 0xD00000000000003FLL;
    *(void *)(v62 + 56) = 0x80000002330B6ED0;
    sub_232F37A50(v62);
    id v64 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v65 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v66 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
    objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 125, v66);

    swift_willThrow();
    sub_232E9AA4C(v98, v89);
LABEL_23:
    sub_23306D9D8(v60, (uint64_t (*)(void))type metadata accessor for ExtractionContext);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    goto LABEL_25;
  }
  unint64_t v67 = *(id **)(v0 + 616);
  sub_23306DA38(*(void *)(v0 + 592), (uint64_t)v67);
  id v68 = objc_msgSend(*v67, sel_fhirIdentifier);
  *(void *)(v0 + 712) = v68;
  if (!v68)
  {
    uint64_t v60 = *(void *)(v0 + 664);
    uint64_t v74 = *(void *)(v0 + 616);
    swift_bridgeObjectRelease();
    sub_23309B710();
    sub_23306DDD8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
    uint64_t v75 = swift_initStackObject();
    *(_OWORD *)(v75 + 16) = xmmword_2330A1880;
    *(void *)(v75 + 32) = sub_23309B710();
    *(void *)(v75 + 40) = v76;
    *(void *)(v75 + 72) = MEMORY[0x263F8D310];
    *(void *)(v75 + 48) = 0xD000000000000041;
    *(void *)(v75 + 56) = 0x80000002330B6F10;
    sub_232F37A50(v75);
    id v77 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v78 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v79 = (void *)sub_23309B640();
    swift_bridgeObjectRelease();
    objc_msgSend(v77, sel_initWithDomain_code_userInfo_, v78, 100, v79);

    swift_willThrow();
    sub_232E9AA4C(v98, v89);
    sub_23306D9D8(v74, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    goto LABEL_23;
  }
  uint64_t v69 = *(void *)(v0 + 400);
  uint64_t v70 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1(v96, v69);
  uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 + 24) + **(int **)(v70 + 24));
  char v71 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v71;
  *char v71 = v0;
  v71[1] = sub_23306C660;
  uint64_t v72 = *(void *)(v0 + 616);
  return v97(v72, v69, v70);
}

uint64_t sub_23306C660(uint64_t a1)
{
  *(void *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_23306C78C, 0, 0);
}

uint64_t sub_23306C78C()
{
  uint64_t v1 = *(void **)(v0 + 712);
  unint64_t v2 = *(void *)(v0 + 696);
  uint64_t v88 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 616);
  if (!*(void *)(v0 + 728))
  {
    uint64_t v41 = *(void *)(v0 + 664);
    swift_bridgeObjectRelease();
    sub_23309B710();
    id v42 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v43 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 125, 0);

    swift_willThrow();
    sub_232E9AA4C(v88, v2);
    sub_23306D9D8(v4, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    sub_23306D9D8(v41, (uint64_t (*)(void))type metadata accessor for ExtractionContext);
    uint64_t v40 = v0 + 376;
    goto LABEL_9;
  }
  uint64_t v76 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v90 = v0 + 376;
  unint64_t v6 = *(void *)(v0 + 696);
  id v7 = *(int **)(v0 + 576);
  uint64_t v8 = *(void *)(v0 + 568);
  id v85 = *(int **)(v0 + 560);
  uint64_t v9 = *(void **)(v0 + 544);
  id v83 = *(void **)(v0 + 728);
  sub_232F6913C(v4, v5);
  id v10 = objc_msgSend(v1, sel_identifier);
  uint64_t v11 = sub_23309B710();
  uint64_t v78 = v4;
  uint64_t v13 = v12;

  id v14 = objc_msgSend(v9, sel_FHIRVersion);
  id v15 = (void *)(v5 + v7[5]);
  *id v15 = v76;
  v15[1] = v3;
  uint64_t v16 = (uint64_t *)(v5 + v7[6]);
  uint64_t *v16 = v11;
  v16[1] = v13;
  *(void *)(v5 + v7[7]) = v14;
  uint64_t v17 = (uint64_t *)(v5 + v7[8]);
  *uint64_t v17 = v88;
  v17[1] = v6;
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v18);
  uint64_t v20 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v19 + 32);
  sub_232E9A9F4(v88, v6);
  char v21 = (void *)v20(v5, v83, v18, v19);
  sub_232F6913C(v78, v8);
  id v22 = v21;
  id v23 = v83;
  id v24 = objc_msgSend(v9, sel_FHIRVersion);
  *(void *)(v8 + v85[5]) = v23;
  *(void *)(v8 + v85[6]) = v21;
  *(void *)(v8 + v85[7]) = v24;
  uint64_t v25 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 408);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v25);
  uint64_t v27 = v8;
  char v28 = (long long *)(v0 + 456);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40))(v27, v25, v26);
  sub_23306DA9C(v29 + 24, v0 + 456);
  uint64_t v89 = v29;
  if (*(void *)(v0 + 480))
  {
    uint64_t v86 = v22;
    sub_232F3FDD0(v28, v0 + 416);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 416), *(void *)(v0 + 440));
    if (qword_268756398 != -1) {
      swift_once();
    }
    uint64_t v30 = *(void *)(v0 + 704);
    uint64_t v31 = sub_23309AB80();
    if (v30)
    {
      unint64_t v33 = *(void *)(v0 + 696);
      uint64_t v34 = *(void *)(v0 + 688);
      uint64_t v35 = *(void *)(v0 + 664);
      uint64_t v36 = *(void *)(v0 + 616);
      uint64_t v37 = *(void *)(v0 + 584);
      uint64_t v38 = *(void *)(v0 + 568);

      swift_release();
      sub_232E9AA4C(v34, v33);
      sub_23306D9D8(v38, (uint64_t (*)(void))type metadata accessor for PostExtractionContext);
      sub_23306D9D8(v37, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
      sub_23306D9D8(v36, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
      uint64_t v39 = v35;
LABEL_7:
      sub_23306D9D8(v39, (uint64_t (*)(void))type metadata accessor for ExtractionContext);
      __swift_destroy_boxed_opaque_existential_1(v90);
      uint64_t v40 = v0 + 416;
LABEL_9:
      __swift_destroy_boxed_opaque_existential_1(v40);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
      return v44();
    }
    uint64_t v52 = v31;
    unint64_t v53 = v32;
    uint64_t v54 = *(void **)(v0 + 544);
    uint64_t v55 = (void *)sub_23309B010();
    *(void *)(v0 + 536) = 0;
    id v48 = objc_msgSend(v54, sel_copyWithAlteredData_error_, v55, v0 + 536);

    uint64_t v56 = *(void **)(v0 + 536);
    if (!v48)
    {
      uint64_t v70 = *(void **)(v0 + 712);
      unint64_t v71 = *(void *)(v0 + 696);
      uint64_t v72 = *(void *)(v0 + 688);
      uint64_t v87 = *(void *)(v0 + 664);
      id v82 = *(id *)(v0 + 584);
      uint64_t v84 = *(void *)(v0 + 616);
      uint64_t v80 = *(void *)(v0 + 568);
      id v73 = v56;
      sub_23309AEC0();

      swift_willThrow();
      sub_232E9AA4C(v52, v53);

      swift_release();
      sub_232E9AA4C(v72, v71);
      sub_23306D9D8(v80, (uint64_t (*)(void))type metadata accessor for PostExtractionContext);
      sub_23306D9D8((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
      sub_23306D9D8(v84, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
      uint64_t v39 = v87;
      goto LABEL_7;
    }
    id v57 = v56;
    sub_232E9AA4C(v52, v53);
    __swift_destroy_boxed_opaque_existential_1(v0 + 416);
    id v22 = v86;
    if (!*(void *)(v89 + 16)) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v46 = *(void **)(v0 + 544);
    sub_23306DB88((uint64_t)v28, (unint64_t *)&qword_268757690, (uint64_t (*)(uint64_t))sub_23306DB30);
    id v47 = v46;
    id v48 = *(id *)(v0 + 544);
    if (!*(void *)(v29 + 16))
    {
LABEL_16:
      id v58 = v23;
      id v59 = v22;
      id v51 = 0;
      goto LABEL_17;
    }
  }
  sub_232F3A800(0, (unint64_t *)&qword_268757C80);
  id v49 = v23;
  id v50 = v22;
  swift_bridgeObjectRetain();
  id v51 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v60 = *(void **)(v0 + 712);
  uint64_t v75 = *(void *)(v0 + 688);
  unint64_t v77 = *(void *)(v0 + 696);
  uint64_t v61 = *(void *)(v0 + 664);
  uint64_t v79 = *(void *)(v0 + 584);
  id v81 = *(id *)(v0 + 616);
  uint64_t v74 = *(void *)(v0 + 568);
  uint64_t v62 = v22;
  id v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F45BF8]), sel_initWithMedicalRecord_clinicalRecord_downloadableAttachments_, v23, v22, v51);

  sub_2330102A8();
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_2330A4FB0;
  *(void *)(v64 + 32) = v63;
  sub_23309B9C0();
  id v65 = objc_allocWithZone(MEMORY[0x263F45BF0]);
  sub_232F3A800(0, &qword_268758B40);
  id v66 = v63;
  unint64_t v67 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v68 = objc_msgSend(v65, sel_initWithOriginalFHIRResource_units_flags_, v48, v67, 2);

  swift_release();
  sub_232E9AA4C(v75, v77);
  sub_23306D9D8(v74, (uint64_t (*)(void))type metadata accessor for PostExtractionContext);
  sub_23306D9D8(v79, (uint64_t (*)(void))type metadata accessor for FHIRExtractionContext);
  sub_23306D9D8((uint64_t)v81, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  sub_23306D9D8(v61, (uint64_t (*)(void))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1(v90);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v69 = *(uint64_t (**)(id))(v0 + 8);
  return v69(v68);
}

uint64_t sub_23306D230(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  id v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *id v7 = v3;
  v7[1] = sub_23301B060;
  return sub_23306B538((uint64_t)v6);
}

id sub_23306D2F4(void *a1, void *a2)
{
  id v3 = sub_232FFE960(a1, a2);
  if (v2)
  {
    swift_getErrorValue();
    sub_232FFC588(v5, v6);
    swift_willThrow();
  }
  return v3;
}

id HealthRecordsExtractor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id HealthRecordsExtractor.init()()
{
  uint64_t v1 = OBJC_IVAR___HKHealthRecordsExtractor_router;
  id v2 = objc_allocWithZone((Class)type metadata accessor for HealthRecordsExtractionRouter());
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR___HKHealthRecordsExtractor_decoder;
  sub_23309AB30();
  swift_allocObject();
  *(void *)&v3[v4] = sub_23309AB20();

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for HealthRecordsExtractor();
  return objc_msgSendSuper2(&v6, sel_init);
}

id HealthRecordsExtractor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23306D680(uint64_t a1, uint64_t a2, int *a3)
{
  objc_super v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_23300C494;
  return v6();
}

uint64_t sub_23306D74C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_23300C494;
  return v7();
}

uint64_t sub_23306D818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_23309BA90();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23309BA80();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_23306DB88(a1, &qword_268758370, MEMORY[0x263F8F520]);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23309BA20();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_23306D9D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23306DA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23306DA9C(uint64_t a1, uint64_t a2)
{
  sub_23306DDD8(0, (unint64_t *)&qword_268757690, (uint64_t (*)(uint64_t))sub_23306DB30, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23306DB30()
{
  unint64_t result = qword_268757698;
  if (!qword_268757698)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757698);
  }
  return result;
}

uint64_t sub_23306DB88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_23306DDD8(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23306DBF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HealthRecordsExtractor()
{
  return self;
}

uint64_t method lookup function for HealthRecordsExtractor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthRecordsExtractor);
}

uint64_t dispatch thunk of HealthRecordsExtractor.extract(resource:)(uint64_t a1)
{
  uint64_t v4 = *(int **)((*MEMORY[0x263F8EED0] & *v1) + 0x60);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_23301E680;
  return v7(a1);
}

uint64_t dispatch thunk of HealthRecordsExtractor.comparePatientResourceData(existing:incoming:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

void sub_23306DDD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_23306DE3C()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_23306DE84()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_23300BE68;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_268758B58 + dword_268758B58);
  return v6(v2, v3, v4);
}

uint64_t sub_23306DF40()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23306DF78(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_23300BE68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_268758B78 + dword_268758B78);
  return v6(a1, v4);
}

id sub_23306E030(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      return (id)swift_bridgeObjectRetain();
    case 1:
      swift_bridgeObjectRetain();
      return (id)swift_bridgeObjectRetain();
    case 0:
      return result;
  }
  return result;
}

void destroy for CryptoUtilitiesError(uint64_t a1)
{
}

void sub_23306E0C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      goto LABEL_9;
    case 1:
      swift_bridgeObjectRelease();
LABEL_9:
      swift_bridgeObjectRelease();
      return;
    case 0:

      break;
  }
}

uint64_t initializeWithCopy for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23306E030(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_23306E030(*(id *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_23306E0C0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CryptoUtilitiesError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_23306E0C0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoUtilitiesError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptoUtilitiesError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_23306E2F0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_23306E308(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CryptoUtilitiesError()
{
  return &type metadata for CryptoUtilitiesError;
}

unsigned char *sub_23306E334@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_23306E48C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_23306E550((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_23306E5CC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23306E3AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_23309ACB0();
  if (!result || (uint64_t result = sub_23309ACD0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23309ACC0();
      sub_23309B5D0();
      sub_23306EA90(&qword_268758B88, MEMORY[0x263F04850]);
      return sub_23309B4D0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23306E48C(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_23306E550(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_23309ACE0();
  swift_allocObject();
  uint64_t result = sub_23309ACA0();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23309AFD0();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23306E5CC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_23309ACE0();
  swift_allocObject();
  uint64_t result = sub_23309ACA0();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23306E650(uint64_t a1, unint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_23309B5D0();
  uint64_t v19 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_23309B5C0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23306EA90(&qword_268758B88, MEMORY[0x263F04850]);
  sub_23309B4F0();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v18 = v8;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      uint64_t v17 = 0;
      sub_232E9A9F4(a1, a2);
      sub_23306E3AC((int)a1, a1 >> 32);
      sub_232E9AA4C(a1, a2);
      uint64_t v8 = v18;
      goto LABEL_9;
    case 2uLL:
      uint64_t v17 = 0;
      uint64_t v18 = v8;
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_232E9A9F4(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v13 = v12;
      uint64_t v8 = v18;
      sub_23306E3AC(v13, v11);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_7;
    default:
      v21[0] = a1;
      LOWORD(v21[1]) = a2;
      BYTE2(v21[1]) = BYTE2(a2);
      BYTE3(v21[1]) = BYTE3(a2);
      BYTE4(v21[1]) = BYTE4(a2);
      BYTE5(v21[1]) = BYTE5(a2);
LABEL_7:
      sub_23309B4D0();
LABEL_8:
      sub_232E9AA4C(a1, a2);
LABEL_9:
      sub_23309B4E0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      uint64_t v22 = v7;
      uint64_t v23 = sub_23306EA90(&qword_268758B90, MEMORY[0x263F04830]);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v10, v7);
      __swift_project_boxed_opaque_existential_1(v21, v22);
      sub_23309ADB0();
      uint64_t v15 = v20;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v15;
  }
}

uint64_t sub_23306EA90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23306EAD8()
{
  swift_bridgeObjectRelease();
  sub_232FFCFE4(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DownloadableAttachmentExtractionResult()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataExtractionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23306EC08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataExtractionError()
{
  return &type metadata for SignedClinicalDataExtractionError;
}

unint64_t sub_23306EC44(char a1)
{
  unint64_t result = 0xD00000000000001BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_23306ECDC()
{
  return sub_23306EC44(*v0);
}

unint64_t sub_23306ECE8()
{
  unint64_t result = qword_268758B98;
  if (!qword_268758B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268758B98);
  }
  return result;
}

uint64_t sub_23306ED3C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_23306ED5C, 0, 0);
}

id sub_23306ED5C()
{
  uint64_t v1 = v0[3];
  long long v9 = *(_OWORD *)(v1 + 72);
  uint64_t v10 = *(void *)(v1 + 88);
  uint64_t v2 = sub_233001A34();
  v0[4] = v2;
  sub_232F3A800(0, (unint64_t *)&qword_2687576B0);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x263F09500], v9, v10);
  v0[5] = result;
  if (result)
  {
    unsigned int v4 = result;
    uint64_t v5 = v0[2];
    uint64_t v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(unsigned char *)(v6 + 16) & 4) != 0)
    {

      uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
      return (id)v8(v2);
    }
    else
    {
      v0[6] = *(void *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[7] = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_232F5E978;
      return (id)sub_232FDDCD0(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23306EEF0()
{
  id v0 = objc_msgSend(self, sel_FHIRDocumentReferenceClinicalNoteCategorySystem);
  id v1 = objc_msgSend(v0, sel_identifier);

  uint64_t v2 = sub_23309B710();
  uint64_t v4 = v3;

  qword_268770FA8 = v2;
  unk_268770FB0 = v4;
}

uint64_t sub_23306EF74()
{
  sub_233071604(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v32 - v2;
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Coding();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233071604(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v34 = (uint64_t)&v32 - v13;
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v38 = *(void *)(v14 + 16);
  if (!v38) {
    return 0;
  }
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  id v48 = (void (**)(char *, uint64_t))(v5 + 8);
  id v49 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v36 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v37 = v14 + 32;
  uint64_t v35 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v32 = v14;
  swift_bridgeObjectRetain_n();
  uint64_t v16 = 0;
  uint64_t v33 = v9;
  uint64_t v17 = v34;
  uint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v44 = v8;
  id v42 = v3;
  do
  {
    uint64_t v18 = v37 + 24 * v16;
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v20 = qword_268756430;
    uint64_t v41 = *(void *)(v18 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 == -1)
    {
      uint64_t v21 = v19;
      if (!v19) {
        goto LABEL_3;
      }
    }
    else
    {
      swift_once();
      uint64_t v21 = v19;
      if (!v19)
      {
LABEL_3:
        (*v36)(v17, 1, 1, v8);
        goto LABEL_4;
      }
    }
    uint64_t v39 = v16;
    uint64_t v40 = v21;
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v45 = unk_268770FB0;
      uint64_t v46 = qword_268770FA8;
      uint64_t v23 = v33;
      uint64_t v24 = v21 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
      swift_bridgeObjectRetain_n();
      uint64_t v50 = *(void *)(v23 + 72);
      do
      {
        sub_233071658(v24, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
        sub_2330716C0((uint64_t)v11, (uint64_t)v3, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        if ((*v15)(v3, 1, v4) == 1)
        {
          sub_23307172C((uint64_t)v3, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        }
        else
        {
          (*v49)(v7, v3, v4);
          uint64_t v25 = (uint64_t *)&v11[*(int *)(v8 + 20)];
          uint64_t v26 = v25[1];
          if (v26)
          {
            uint64_t v47 = *v25;
            uint64_t v52 = sub_23309AEE0();
            uint64_t v53 = v27;
            v51[0] = v46;
            v51[1] = v45;
            sub_232F379FC();
            uint64_t v28 = sub_23309BD60();
            swift_bridgeObjectRelease();
            if (v28)
            {
              (*v48)(v7, v4);
              uint64_t v3 = v42;
              uint64_t v15 = v43;
              uint64_t v8 = v44;
            }
            else
            {
              uint64_t v52 = v47;
              uint64_t v53 = v26;
              strcpy((char *)v51, "clinical-note");
              HIWORD(v51[1]) = -4864;
              uint64_t v29 = sub_23309BD60();
              (*v48)(v7, v4);
              uint64_t v3 = v42;
              uint64_t v15 = v43;
              uint64_t v8 = v44;
              if (!v29)
              {
                swift_bridgeObjectRelease();
                uint64_t v17 = v34;
                sub_23307159C((uint64_t)v11, v34, (uint64_t (*)(void))type metadata accessor for Coding);
                (*v36)(v17, 0, 1, v8);
                uint64_t v16 = v39;
                goto LABEL_21;
              }
            }
          }
          else
          {
            (*v48)(v7, v4);
          }
        }
        sub_233071788((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
        v24 += v50;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
      uint64_t v17 = v34;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v16 = v39;
    (*v36)(v17, 1, 1, v8);
LABEL_21:
    swift_bridgeObjectRelease();
    if ((*v35)(v17, 1, v8) != 1)
    {
      sub_23307172C(v17, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = 1;
      goto LABEL_27;
    }
LABEL_4:
    ++v16;
    sub_23307172C(v17, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while (v16 != v38);
  uint64_t v30 = 0;
LABEL_27:
  swift_bridgeObjectRelease_n();
  return v30;
}

uint64_t sub_23306F638(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  sub_233071604(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  v2[12] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[13] = swift_task_alloc();
  v2[14] = *(void *)(type metadata accessor for Reference() - 8);
  v2[15] = swift_task_alloc();
  v2[16] = *(void *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) - 8);
  v2[17] = swift_task_alloc();
  uint64_t v3 = sub_23309B120();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = sub_23309B190();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  sub_23309AD60();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  sub_233071604(0, &qword_2687567F0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  sub_233071604(0, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  sub_233071604(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_23306FA98, 0, 0);
}

uint64_t sub_23306FA98()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = (void *)v0[11];
  id v3 = objc_msgSend(self, sel_FHIRDocumentReferenceClinicalNoteStatus);
  v0[45] = v3;
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  v0[46] = v5;
  uint64_t v6 = sub_23309B710();
  v0[2] = v3;
  v0[47] = v7;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = 0;
  v0[8] = 0;
  uint64_t v8 = v2[12];
  swift_bridgeObjectRetain();
  v0[48] = Array<A>.asCodingCollectionArray()(v8);
  uint64_t v124 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
  uint64_t v9 = (uint64_t)v2 + v124[15];
  sub_2330716C0(v9, v1, &qword_2687567F0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  uint64_t v10 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (v11(v1, 1, v10) == 1)
  {
    uint64_t v12 = v0[38];
    uint64_t v13 = &qword_2687567F0;
    uint64_t v14 = (uint64_t (*)())type metadata accessor for ModelsR4.DocumentReferenceContext;
LABEL_5:
    uint64_t v18 = v14;
LABEL_6:
    sub_23307172C(v12, v13, (void (*)(uint64_t))v18);
    id v19 = 0;
    goto LABEL_7;
  }
  uint64_t v15 = v0[40];
  uint64_t v16 = v0[38];
  sub_2330716C0(v16 + *(int *)(v10 + 20), v15, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  sub_233071788(v16, type metadata accessor for ModelsR4.DocumentReferenceContext);
  uint64_t v17 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v15, 1, v17) == 1)
  {
    uint64_t v12 = v0[40];
    uint64_t v13 = &qword_268756730;
    uint64_t v14 = type metadata accessor for Period;
    goto LABEL_5;
  }
  uint64_t v59 = v0[44];
  uint64_t v60 = v0[40];
  uint64_t v61 = v0[26];
  uint64_t v62 = v0[27];
  sub_2330716C0(v60, v59, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_233071788(v60, (uint64_t (*)(void))type metadata accessor for Period);
  int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v59, 1, v61);
  uint64_t v64 = v0[44];
  if (v63 == 1)
  {
    uint64_t v13 = &qword_268756548;
    uint64_t v18 = type metadata accessor for FHIRDateTime;
    uint64_t v12 = v0[44];
    goto LABEL_6;
  }
  if (*(void *)(v64 + 56) == 1)
  {
    if (*(unsigned char *)(v64 + 19))
    {
      uint64_t v71 = 2;
      if (*(unsigned char *)(v64 + 17)) {
        uint64_t v71 = 3;
      }
    }
    else
    {
      uint64_t v71 = 1;
    }
    uint64_t v126 = v71;
  }
  else
  {
    uint64_t v126 = 0;
  }
  uint64_t v88 = v0[36];
  uint64_t v89 = v0[26];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v90 = (uint64_t *)(v64 + *(int *)(v89 + 32));
  uint64_t v91 = *v90;
  uint64_t v92 = v90[1];
  swift_bridgeObjectRetain();
  id v19 = sub_233017340(v88, v91, v92, v126);
  sub_233071788(v0[44], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_7:
  v0[49] = v19;
  uint64_t v20 = v0[37];
  sub_2330716C0(v9, v20, &qword_2687567F0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  if (v11(v20, 1, v10) == 1)
  {
    uint64_t v21 = v0[37];
    uint64_t v22 = &qword_2687567F0;
    uint64_t v23 = (uint64_t (*)())type metadata accessor for ModelsR4.DocumentReferenceContext;
LABEL_11:
    uint64_t v27 = v23;
LABEL_12:
    sub_23307172C(v21, v22, (void (*)(uint64_t))v27);
    id v28 = 0;
    goto LABEL_13;
  }
  uint64_t v24 = v0[39];
  uint64_t v25 = v0[37];
  sub_2330716C0(v25 + *(int *)(v10 + 20), v24, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  sub_233071788(v25, type metadata accessor for ModelsR4.DocumentReferenceContext);
  uint64_t v26 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v24, 1, v26) == 1)
  {
    uint64_t v21 = v0[39];
    uint64_t v22 = &qword_268756730;
    uint64_t v23 = type metadata accessor for Period;
    goto LABEL_11;
  }
  uint64_t v65 = v0[43];
  uint64_t v66 = v0[39];
  uint64_t v67 = v0[26];
  uint64_t v68 = v0[27];
  sub_2330716C0(v66 + *(int *)(v26 + 20), v65, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_233071788(v66, (uint64_t (*)(void))type metadata accessor for Period);
  int v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v65, 1, v67);
  uint64_t v70 = v0[43];
  if (v69 == 1)
  {
    uint64_t v22 = &qword_268756548;
    uint64_t v27 = type metadata accessor for FHIRDateTime;
    uint64_t v21 = v0[43];
    goto LABEL_12;
  }
  if (*(void *)(v70 + 56) == 1)
  {
    if (*(unsigned char *)(v70 + 19))
    {
      if (*(unsigned char *)(v70 + 17)) {
        uint64_t v75 = 3;
      }
      else {
        uint64_t v75 = 2;
      }
    }
    else
    {
      uint64_t v75 = 1;
    }
  }
  else
  {
    uint64_t v75 = 0;
  }
  uint64_t v93 = v0[35];
  uint64_t v94 = v0[26];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v95 = (uint64_t *)(v70 + *(int *)(v94 + 32));
  uint64_t v96 = *v95;
  uint64_t v97 = v95[1];
  swift_bridgeObjectRetain();
  id v28 = sub_233017340(v93, v96, v97, v75);
  sub_233071788(v0[43], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_13:
  v0[50] = v28;
  uint64_t v29 = v0[32];
  uint64_t v30 = v0[25];
  uint64_t v31 = v0[21];
  uint64_t v32 = v0[22];
  uint64_t v34 = v0[19];
  uint64_t v33 = v0[20];
  uint64_t v35 = v0[18];
  sub_23309B0B0();
  sub_23304E504(v33);
  sub_23309B0A0();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v36(v30, v31);
  FHIRDateTime.init(_:)(v29);
  unint64_t v123 = v36;
  uint64_t v37 = *(void *)(v0[11] + v124[14]);
  sub_233071658(v0[32], v0[30], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    uint64_t v39 = v0[16];
    uint64_t v40 = v37 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v41 = *(void *)(v39 + 72);
    id v42 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[27] + 48);
    swift_bridgeObjectRetain();
    uint64_t v125 = v41;
    do
    {
      uint64_t v43 = v0[42];
      uint64_t v44 = v0[26];
      uint64_t v45 = v0[17];
      sub_233071658(v40, v45, type metadata accessor for ModelsR4.DocumentReferenceContent);
      uint64_t v46 = type metadata accessor for Attachment();
      sub_2330716C0(v45 + *(int *)(v46 + 40), v43, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      int v47 = (*v42)(v43, 1, v44);
      uint64_t v48 = v0[42];
      if (v47 == 1)
      {
        sub_23307172C(v48, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      }
      else
      {
        uint64_t v49 = v0[24];
        sub_23307159C(v48, v0[29], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        FHIRDateTime.asNSDate()(v49);
        FHIRDateTime.asNSDate()(v0[23]);
        uint64_t v50 = v0[24];
        uint64_t v56 = v0[23];
        uint64_t v57 = v0[21];
        uint64_t v58 = sub_23309B170();
        v123(v56, v57);
        v123(v50, v57);
        id v51 = v0 + 29;
        uint64_t v52 = v0 + 30;
        if (v58 != -1)
        {
          id v51 = v0 + 30;
          uint64_t v52 = v0 + 29;
        }
        uint64_t v53 = *v52;
        uint64_t v54 = v0[30];
        uint64_t v55 = v0[28];
        sub_233071788(*v51, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_23307159C(v53, v55, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_23307159C(v55, v54, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        uint64_t v41 = v125;
      }
      sub_233071788(v0[17], type metadata accessor for ModelsR4.DocumentReferenceContent);
      v40 += v41;
      --v38;
    }
    while (v38);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_23307159C(v0[30], v0[31], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  swift_bridgeObjectRelease();
  if (_s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0())
  {
    uint64_t v72 = v0[31];
    if (*(void *)(v72 + 56) == 1)
    {
      if (*(unsigned char *)(v72 + 19))
      {
        if (*(unsigned char *)(v72 + 17)) {
          uint64_t v73 = 3;
        }
        else {
          uint64_t v73 = 2;
        }
      }
      else
      {
        uint64_t v73 = 1;
      }
    }
    else
    {
      uint64_t v73 = 0;
    }
    uint64_t v76 = v0[34];
    uint64_t v77 = v0[26];
    sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
    FHIRDateTime.asDateComponents()();
    uint64_t v78 = (uint64_t *)(v72 + *(int *)(v77 + 32));
    uint64_t v79 = *v78;
    uint64_t v80 = v78[1];
    swift_bridgeObjectRetain();
    id v74 = sub_233017340(v76, v79, v80, v73);
  }
  else
  {
    id v74 = 0;
  }
  v0[51] = v74;
  uint64_t v81 = v0[41];
  uint64_t v82 = v0[26];
  uint64_t v83 = v0[27];
  sub_2330716C0(v0[11] + v124[11], v81, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  int v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82);
  uint64_t v85 = v0[41];
  if (v84 == 1)
  {
    sub_23307172C(v0[41], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    id v86 = v74;
  }
  else
  {
    if (*(void *)(v85 + 56) == 1)
    {
      if (*(unsigned char *)(v85 + 19))
      {
        if (*(unsigned char *)(v85 + 17)) {
          uint64_t v87 = 3;
        }
        else {
          uint64_t v87 = 2;
        }
      }
      else
      {
        uint64_t v87 = 1;
      }
    }
    else
    {
      uint64_t v87 = 0;
    }
    uint64_t v98 = v0[33];
    uint64_t v99 = v0[26];
    sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
    FHIRDateTime.asDateComponents()();
    uint64_t v100 = (uint64_t *)(v85 + *(int *)(v99 + 32));
    uint64_t v101 = *v100;
    uint64_t v102 = v100[1];
    swift_bridgeObjectRetain();
    id v103 = sub_233017340(v98, v101, v102, v87);
    sub_233071788(v0[41], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    id v74 = v103;
  }
  v0[52] = v74;
  uint64_t v104 = v0[11];
  uint64_t v105 = *(void *)(v104 + v124[13]);
  if (v105)
  {
    uint64_t v106 = *(void *)(v105 + 16);
    if (v106)
    {
      uint64_t v107 = v0[14];
      uint64_t v108 = v0[15];
      uint64_t v109 = v105 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
      uint64_t v110 = *(void *)(v107 + 72);
      swift_bridgeObjectRetain_n();
      unint64_t v111 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v113 = (uint64_t *)v0[15];
        sub_233071658(v109, (uint64_t)v113, (uint64_t (*)(void))type metadata accessor for Reference);
        uint64_t v114 = *v113;
        uint64_t v115 = *(void *)(v108 + 8);
        swift_bridgeObjectRetain();
        sub_233071788((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for Reference);
        if (v115)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v111 = sub_232F3CCE0(0, v111[2] + 1, 1, v111);
          }
          unint64_t v117 = v111[2];
          unint64_t v116 = v111[3];
          if (v117 >= v116 >> 1) {
            unint64_t v111 = sub_232F3CCE0((void *)(v116 > 1), v117 + 1, 1, v111);
          }
          v111[2] = v117 + 1;
          unint64_t v112 = &v111[2 * v117];
          v112[4] = v114;
          v112[5] = v115;
        }
        v109 += v110;
        --v106;
      }
      while (v106);
      swift_bridgeObjectRelease_n();
      uint64_t v104 = v0[11];
    }
    else
    {
      unint64_t v111 = (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    unint64_t v111 = 0;
  }
  v0[53] = v111;
  sub_233071658(v0[10], v0[13], (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  if (*(void *)(v104 + v124[16] + 8))
  {
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v118 = 0;
  }
  else
  {
    uint64_t v118 = 1;
  }
  uint64_t v119 = v0[12];
  uint64_t v120 = sub_23309B230();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56))(v119, v118, 1, v120);
  v0[54] = sub_232F3A800(0, &qword_2687576C0);
  uint64_t v121 = swift_task_alloc();
  v0[55] = v121;
  *(void *)uint64_t v121 = v0;
  *(void *)(v121 + 8) = sub_233070D04;
  *(_OWORD *)(v121 + 16) = *((_OWORD *)v0 + 5);
  return MEMORY[0x270FA2498](sub_23306ED5C, 0, 0);
}

uint64_t sub_233070D04(uint64_t a1)
{
  *(void *)(*(void *)v1 + 448) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_233070E04, 0, 0);
}

uint64_t sub_233070E04()
{
  uint64_t v1 = *(void **)(v0 + 448);
  uint64_t v2 = *(void **)(v0 + 416);
  uint64_t v4 = *(void **)(v0 + 392);
  uint64_t v3 = *(void **)(v0 + 400);
  uint64_t v5 = *(void **)(v0 + 360);
  uint64_t v11 = *(void **)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 256);
  id v7 = sub_23303DFF0(*(void **)(v0 + 104), *(void *)(v0 + 96), v0 + 16, (uint64_t)v1, *(void *)(v0 + 384), (uint64_t)v2, (uint64_t)v4, (uint64_t)v3, *(void *)(v0 + 424));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_233071788(v6, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_233071788(v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(id))(v0 + 8);
  return v8(v7);
}

uint64_t sub_233071078(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_23306EF74() & 1) != 0 && (uint64_t v6 = *(void *)(v1 + *(int *)(v3 + 56)), *(void *)(v6 + 16)))
  {
    unint64_t v7 = sub_23307126C(a1, 0, *(void *)(v1 + *(int *)(v3 + 56)));
    uint64_t v9 = v8;
    if ((sub_232E91944(v7, v6) & 1) == 0)
    {
      sub_233071658(v1, (uint64_t)v5, type metadata accessor for ModelsR4.DocumentReference);
      uint64_t v13 = *(int *)(v3 + 56);
      swift_bridgeObjectRelease();
      *(void *)&v5[v13] = v7;
      *((void *)&v16 + 1) = v3;
      unint64_t v17 = sub_233071544();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      sub_233071658((uint64_t)v5, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ModelsR4.DocumentReference);
      type metadata accessor for DownloadableAttachmentExtractionResult();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      sub_23307159C((uint64_t)&v15, v11 + 24, (uint64_t (*)(void))sub_232F61E60);
      sub_233071788((uint64_t)v5, type metadata accessor for ModelsR4.DocumentReference);
      return v11;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for DownloadableAttachmentExtractionResult();
    long long v15 = 0u;
    long long v16 = 0u;
    unint64_t v17 = 0;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = v9;
  }
  else
  {
    type metadata accessor for DownloadableAttachmentExtractionResult();
    long long v15 = 0u;
    long long v16 = 0u;
    unint64_t v17 = 0;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = 0;
  }
  sub_23307159C((uint64_t)&v15, v10 + 24, (uint64_t (*)(void))sub_232F61E60);
  return v11;
}

unint64_t sub_23307126C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for ModelsR4.DocumentReferenceContent(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v23 - v9;
  unint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v26 = MEMORY[0x263F8EE78];
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12)
  {
    unint64_t v16 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62)) {
      goto LABEL_13;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (v22) {
      return v16;
    }
    goto LABEL_14;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = a3 + v13;
  uint64_t v15 = *(void *)(v8 + 72);
  uint64_t v23 = a3;
  swift_bridgeObjectRetain();
  unint64_t v16 = MEMORY[0x263F8EE78];
  do
  {
    sub_233071658(v14, (uint64_t)v10, type metadata accessor for ModelsR4.DocumentReferenceContent);
    id v17 = sub_232FDBF30(v24, v25);
    if (v17)
    {
      id v18 = v17;
      MEMORY[0x237DB59C0]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_23309B9D0();
      }
      sub_23309B9E0();
      sub_23309B9C0();
    }
    sub_233071658((uint64_t)v10, (uint64_t)v7, type metadata accessor for ModelsR4.DocumentReferenceContent);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v16 = sub_232F3D670(0, *(void *)(v16 + 16) + 1, 1, v16);
    }
    unint64_t v20 = *(void *)(v16 + 16);
    unint64_t v19 = *(void *)(v16 + 24);
    if (v20 >= v19 >> 1) {
      unint64_t v16 = sub_232F3D670(v19 > 1, v20 + 1, 1, v16);
    }
    *(void *)(v16 + 16) = v20 + 1;
    sub_23307159C((uint64_t)v7, v16 + v13 + v20 * v15, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_233071788((uint64_t)v10, type metadata accessor for ModelsR4.DocumentReferenceContent);
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  unint64_t v11 = v26;
  if (v26 >> 62) {
    goto LABEL_17;
  }
LABEL_13:
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
LABEL_14:
  }
    swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_233071544()
{
  unint64_t result = qword_268758BA0;
  if (!qword_268758BA0)
  {
    type metadata accessor for ModelsR4.DocumentReference(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_268758BA0);
  }
  return result;
}

uint64_t sub_23307159C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_233071604(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_233071658(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2330716C0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_233071604(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23307172C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233071604(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_233071788(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_2330717E8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Extension();
  uint64_t v158 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  id v173 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v172 = (char *)&v147 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v147 - v8;
  sub_233072C50(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v167 = (uint64_t)&v147 - v11;
  uint64_t v12 = type metadata accessor for Coding();
  uint64_t v161 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v166 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v153 = (uint64_t)&v147 - v15;
  uint64_t v16 = type metadata accessor for Identifier();
  uint64_t v178 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  id v18 = (uint64_t *)((char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_233072C50(0, (unint64_t *)&unk_268758BB8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v147 - v20;
  uint64_t v150 = *(void *)(v1 + 32);
  int v151 = *(_DWORD *)(v1 + 40);
  int v156 = *(unsigned __int8 *)(v1 + 44);
  uint64_t v152 = *(void *)(v1 + 48);
  uint64_t v22 = *(void *)(v1 + 64);
  uint64_t v160 = *(void *)(v1 + 56);
  uint64_t v180 = *(void **)(v1 + 72);
  uint64_t v162 = *(void *)(v1 + 80);
  uint64_t v177 = *(void **)(v1 + 88);
  uint64_t v149 = *(void *)(v1 + 96);
  uint64_t v154 = *(void *)(v1 + 104);
  uint64_t v148 = *(void *)(v1 + 112);
  uint64_t v23 = *(void *)(v1 + 128);
  sub_233073430(v22, (uint64_t)&v147 - v20);
  uint64_t v24 = type metadata accessor for ModelsR4.HumanName(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v21, 1, v24) == 1)
  {
    sub_233072D44((uint64_t)v21, (unint64_t *)&unk_268758BB8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  }
  else
  {
    uint64_t v155 = sub_232FE6520(a1);
    uint64_t v26 = v25;
    sub_233072CE4((uint64_t)v21, type metadata accessor for ModelsR4.HumanName);
    uint64_t v159 = v26;
    if (v26) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v155 = 0;
  uint64_t v159 = 0xE000000000000000;
LABEL_5:
  uint64_t v27 = v166;
  uint64_t v28 = v162;
  uint64_t v29 = v180;
  uint64_t v170 = v23;
  id v191 = v9;
  uint64_t v181 = v12;
  uint64_t v169 = v16;
  if (v180)
  {
    uint64_t v30 = v180[2];
    if (v30)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v31 = v29 + 7;
      uint64_t v32 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v34 = *(v31 - 2);
        if (v34)
        {
          uint64_t v36 = *(v31 - 1);
          uint64_t v35 = *v31;
          BOOL v37 = *(v31 - 3) == 0x6C69616D65 && v34 == 0xE500000000000000;
          if (v37 || (sub_23309C220()) && v35)
          {
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v32 = sub_232F3CCE0(0, v32[2] + 1, 1, v32);
            }
            unint64_t v39 = v32[2];
            unint64_t v38 = v32[3];
            if (v39 >= v38 >> 1) {
              uint64_t v32 = sub_232F3CCE0((void *)(v38 > 1), v39 + 1, 1, v32);
            }
            id v32[2] = v39 + 1;
            uint64_t v33 = &v32[2 * v39];
            v33[4] = v36;
            void v33[5] = v35;
          }
          uint64_t v9 = v191;
        }
        v31 += 4;
        --v30;
      }
      while (v30);
      uint64_t v168 = v32;
      uint64_t v40 = v180;
      swift_bridgeObjectRelease_n();
      uint64_t v41 = v40[2];
      if (v41)
      {
        swift_bridgeObjectRetain_n();
        id v42 = v40 + 7;
        uint64_t v43 = (void *)MEMORY[0x263F8EE78];
        do
        {
          uint64_t v45 = *(v42 - 2);
          if (v45)
          {
            uint64_t v47 = *(v42 - 1);
            uint64_t v46 = *v42;
            BOOL v48 = *(v42 - 3) == 0x656E6F6870 && v45 == 0xE500000000000000;
            if (v48 || (sub_23309C220()) && v46)
            {
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v43 = sub_232F3CCE0(0, v43[2] + 1, 1, v43);
              }
              unint64_t v50 = v43[2];
              unint64_t v49 = v43[3];
              if (v50 >= v49 >> 1) {
                uint64_t v43 = sub_232F3CCE0((void *)(v49 > 1), v50 + 1, 1, v43);
              }
              v43[2] = v50 + 1;
              uint64_t v44 = &v43[2 * v50];
              v44[4] = v47;
              v44[5] = v46;
            }
            uint64_t v9 = v191;
          }
          v42 += 4;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v43 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v51 = (uint64_t)v168;
      uint64_t v23 = v170;
      uint64_t v27 = v166;
      uint64_t v16 = v169;
      uint64_t v28 = v162;
    }
    else
    {
      uint64_t v51 = MEMORY[0x263F8EE78];
      uint64_t v43 = (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v51 = 0;
  }
  uint64_t v168 = (void *)v51;
  uint64_t v165 = v43;
  if (v28)
  {
    uint64_t v176 = *(void *)(v28 + 16);
    if (v176)
    {
      uint64_t v175 = v28 + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
      uint64_t v179 = v27 + 8;
      long long v163 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v161 + 56);
      uint64_t v157 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
      uint64_t v174 = *(void *)(v178 + 72);
      swift_bridgeObjectRetain_n();
      uint64_t v52 = 0;
      uint64_t v53 = (void *)MEMORY[0x263F8EE78];
      long long v171 = xmmword_2330A1EB0;
      while (1)
      {
        sub_233072DA0(v175 + v174 * v52, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Identifier);
        uint64_t v54 = (void *)((char *)v18 + *(int *)(v16 + 28));
        uint64_t v55 = v54[1];
        if (v55) {
          break;
        }
        sub_233072CE4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_47:
        if (++v52 == v176)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v51 = (uint64_t)v168;
          uint64_t v43 = v165;
          goto LABEL_76;
        }
      }
      uint64_t v180 = v53;
      uint64_t v57 = v18[2];
      unint64_t v56 = v18[3];
      uint64_t v178 = *v54;
      if (v56)
      {
        if (v56 != 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_66:
          sub_233012A68();
          uint64_t v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = v171;
          *(void *)(v69 + 32) = v57;
          *(void *)(v69 + 40) = v56;
          *(void *)(v69 + 48) = v178;
          *(void *)(v69 + 56) = v55;
          sub_233072CE4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Identifier);
          uint64_t v53 = v180;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v53 = sub_232F3CE10(0, v53[2] + 1, 1, v53);
          }
          unint64_t v71 = v53[2];
          unint64_t v70 = v53[3];
          if (v71 >= v70 >> 1) {
            uint64_t v53 = sub_232F3CE10((void *)(v70 > 1), v71 + 1, 1, v53);
          }
          v53[2] = v71 + 1;
          v53[v71 + 4] = v69;
          goto LABEL_47;
        }
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v58 = v18[4];
        if (v58)
        {
          uint64_t v59 = *(void *)(v58 + 16);
          if (v59)
          {
            uint64_t v60 = v161;
            uint64_t v61 = v58 + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
            swift_bridgeObjectRetain();
            sub_232E967F8(v57, 0);
            swift_bridgeObjectRetain();
            uint64_t v62 = *(void *)(v60 + 72);
            uint64_t v63 = (uint64_t)v166;
            while (1)
            {
              sub_233072DA0(v61, v63, (uint64_t (*)(void))type metadata accessor for Coding);
              if (*(void *)&v179[*(int *)(v181 + 24)]) {
                break;
              }
              sub_233072CE4(v63, (uint64_t (*)(void))type metadata accessor for Coding);
              v61 += v62;
              if (!--v59) {
                goto LABEL_61;
              }
            }
            uint64_t v64 = v167;
            sub_232F65DAC(v63, v167);
            uint64_t v65 = *v163;
            uint64_t v66 = v64;
            uint64_t v67 = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
            sub_232E967F8(v57, 0);
            swift_bridgeObjectRetain();
LABEL_61:
            uint64_t v65 = *v163;
            uint64_t v64 = v167;
            uint64_t v66 = v167;
            uint64_t v67 = 1;
          }
          uint64_t v68 = v181;
          v65(v66, v67, 1, v181);
          uint64_t v23 = v170;
          uint64_t v16 = v169;
          swift_bridgeObjectRelease();
          if ((*v157)(v64, 1, v68) != 1)
          {
            uint64_t v72 = v153;
            sub_232F65DAC(v64, v153);
            uint64_t v73 = (uint64_t *)(v72 + *(int *)(v181 + 24));
            uint64_t v74 = *v73;
            unint64_t v56 = v73[1];
            swift_bridgeObjectRetain();
            uint64_t v75 = v72;
            uint64_t v16 = v169;
            sub_233072CE4(v75, (uint64_t (*)(void))type metadata accessor for Coding);
            sub_232E96840(v57, 0);
            uint64_t v9 = v191;
            if (v56)
            {
              uint64_t v57 = v74;
              goto LABEL_66;
            }
            goto LABEL_65;
          }
        }
        else
        {
          uint64_t v64 = v167;
          (*v163)(v167, 1, 1, v181);
          swift_bridgeObjectRetain();
          sub_232E967F8(v57, 0);
        }
        sub_233072D44(v64, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
        sub_232E96840(v57, 0);
        uint64_t v9 = v191;
      }
LABEL_65:
      uint64_t v57 = 0;
      unint64_t v56 = 0xE000000000000000;
      goto LABEL_66;
    }
    uint64_t v53 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v53 = 0;
  }
LABEL_76:
  if (v177)
  {
    uint64_t v76 = v177[2];
    if (v76)
    {
      uint64_t v77 = swift_bridgeObjectRetain();
      uint64_t v78 = (void *)MEMORY[0x263F8EE78];
      uint64_t v79 = 32;
      do
      {
        long long v80 = *(_OWORD *)(v77 + v79 + 112);
        long long v188 = *(_OWORD *)(v77 + v79 + 96);
        long long v189 = v80;
        uint64_t v190 = *(void *)(v77 + v79 + 128);
        long long v81 = *(_OWORD *)(v77 + v79 + 48);
        long long v184 = *(_OWORD *)(v77 + v79 + 32);
        long long v185 = v81;
        long long v82 = *(_OWORD *)(v77 + v79 + 80);
        long long v186 = *(_OWORD *)(v77 + v79 + 64);
        long long v187 = v82;
        long long v83 = *(_OWORD *)(v77 + v79 + 16);
        long long v182 = *(_OWORD *)(v77 + v79);
        long long v183 = v83;
        Swift::String v84 = Address.formattedAddressString()();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v78 = sub_232F3CCE0(0, v78[2] + 1, 1, v78);
        }
        unint64_t v86 = v78[2];
        unint64_t v85 = v78[3];
        uint64_t v87 = v78;
        if (v86 >= v85 >> 1) {
          uint64_t v87 = sub_232F3CCE0((void *)(v85 > 1), v86 + 1, 1, v78);
        }
        v87[2] = v86 + 1;
        uint64_t v78 = v87;
        *(Swift::String *)&v87[2 * v86 + 4] = v84;
        v79 += 136;
        --v76;
        uint64_t v77 = (uint64_t)v177;
      }
      while (v76);
      swift_bridgeObjectRelease();
      uint64_t v51 = (uint64_t)v168;
      uint64_t v43 = v165;
    }
    else
    {
      uint64_t v78 = (void *)MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v78 = 0;
  }
  uint64_t v177 = v78;
  if (v23)
  {
    uint64_t v88 = *(void *)(v23 + 16);
    uint64_t v180 = v53;
    if (v88)
    {
      uint64_t v89 = v23 + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
      uint64_t v181 = *(void *)(v158 + 72);
      swift_bridgeObjectRetain();
      uint64_t v90 = (void *)MEMORY[0x263F8EE78];
      uint64_t v178 = 0x80000002330B6B80;
      uint64_t v179 = (char *)0xD00000000000003CLL;
      do
      {
        sub_233072DA0(v89, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Extension);
        v91._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
        v91._object = (void *)0x80000002330B6B40;
        Swift::String_optional v94 = Extension.stringValueForExtension(with:)(v91);
        object = v94.value._object;
        uint64_t countAndFlagsBits = v94.value._countAndFlagsBits;
        if (v94.value._object
          || (v95._object = (void *)v178,
              v95._uint64_t countAndFlagsBits = (uint64_t)v179,
              Swift::String_optional v96 = Extension.stringValueForExtension(with:)(v95),
              object = v96.value._object,
              uint64_t countAndFlagsBits = v96.value._countAndFlagsBits,
              v96.value._object))
        {
          uint64_t v97 = countAndFlagsBits;
          uint64_t v98 = object;
          sub_233072CE4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Extension);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v90 = sub_232F3CCE0(0, v90[2] + 1, 1, v90);
          }
          unint64_t v100 = v90[2];
          unint64_t v99 = v90[3];
          if (v100 >= v99 >> 1) {
            uint64_t v90 = sub_232F3CCE0((void *)(v99 > 1), v100 + 1, 1, v90);
          }
          _OWORD v90[2] = v100 + 1;
          uint64_t v101 = &v90[2 * v100];
          v101[4] = v97;
          v101[5] = v98;
          uint64_t v9 = v191;
        }
        else
        {
          sub_233072CE4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Extension);
        }
        v89 += v181;
        --v88;
      }
      while (v88);
      uint64_t v23 = v170;
      swift_bridgeObjectRelease();
      uint64_t v53 = v180;
    }
    else
    {
      uint64_t v90 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v105 = (uint64_t)v172;
    if (v90[2])
    {
      uint64_t v106 = v90[5];
      uint64_t v176 = v90[4];
      uint64_t v174 = v106;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v176 = 0;
      uint64_t v174 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v107 = *(void *)(v23 + 16);
    if (v107)
    {
      uint64_t v108 = v23 + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
      id v191 = *(char **)(v158 + 72);
      swift_bridgeObjectRetain();
      uint64_t v109 = (void *)MEMORY[0x263F8EE78];
      uint64_t v181 = 0x80000002330B6BC0;
      uint64_t v179 = (char *)0x80000002330B6C10;
      uint64_t v110 = v107;
      do
      {
        sub_233072DA0(v108, v105, (uint64_t (*)(void))type metadata accessor for Extension);
        v111._uint64_t countAndFlagsBits = 0xD000000000000042;
        v111._object = (void *)v181;
        Swift::String_optional v114 = Extension.stringValueForExtension(with:)(v111);
        uint64_t v113 = v114.value._object;
        uint64_t v112 = v114.value._countAndFlagsBits;
        if (v114.value._object
          || (v115._uint64_t countAndFlagsBits = 0xD000000000000041,
              v115._object = v179,
              Swift::String_optional v116 = Extension.stringValueForExtension(with:)(v115),
              uint64_t v113 = v116.value._object,
              uint64_t v112 = v116.value._countAndFlagsBits,
              v116.value._object))
        {
          uint64_t v117 = v112;
          uint64_t v118 = v113;
          sub_233072CE4(v105, (uint64_t (*)(void))type metadata accessor for Extension);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v109 = sub_232F3CCE0(0, v109[2] + 1, 1, v109);
          }
          unint64_t v120 = v109[2];
          unint64_t v119 = v109[3];
          if (v120 >= v119 >> 1) {
            uint64_t v109 = sub_232F3CCE0((void *)(v119 > 1), v120 + 1, 1, v109);
          }
          v109[2] = v120 + 1;
          uint64_t v121 = &v109[2 * v120];
          v121[4] = v117;
          v121[5] = v118;
          uint64_t v105 = (uint64_t)v172;
        }
        else
        {
          sub_233072CE4(v105, (uint64_t (*)(void))type metadata accessor for Extension);
        }
        v108 += (uint64_t)v191;
        --v110;
      }
      while (v110);
      uint64_t v23 = v170;
      swift_bridgeObjectRelease();
      uint64_t v53 = v180;
    }
    else
    {
      uint64_t v109 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v122 = (uint64_t)v173;
    if (v109[2])
    {
      uint64_t v123 = v109[5];
      uint64_t v175 = v109[4];
      uint64_t v178 = v123;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v175 = 0;
      uint64_t v178 = 0;
    }
    swift_bridgeObjectRelease();
    if (v107)
    {
      uint64_t v124 = v23 + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
      id v191 = *(char **)(v158 + 72);
      swift_bridgeObjectRetain();
      uint64_t v125 = (void *)MEMORY[0x263F8EE78];
      uint64_t v181 = 0xD000000000000040;
      uint64_t v179 = (char *)0x80000002330B6CB0;
      do
      {
        sub_233072DA0(v124, v122, (uint64_t (*)(void))type metadata accessor for Extension);
        v126._uint64_t countAndFlagsBits = 0xD000000000000041;
        v126._object = (void *)0x80000002330B6C60;
        Swift::String_optional v129 = Extension.stringValueForExtension(with:)(v126);
        long long v128 = v129.value._object;
        uint64_t v127 = v129.value._countAndFlagsBits;
        if (v129.value._object
          || (v130._uint64_t countAndFlagsBits = v181,
              v130._object = v179,
              Swift::String_optional v131 = Extension.stringValueForExtension(with:)(v130),
              long long v128 = v131.value._object,
              uint64_t v127 = v131.value._countAndFlagsBits,
              v131.value._object))
        {
          uint64_t v132 = v127;
          unint64_t v133 = v128;
          sub_233072CE4(v122, (uint64_t (*)(void))type metadata accessor for Extension);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v125 = sub_232F3CCE0(0, v125[2] + 1, 1, v125);
          }
          unint64_t v135 = v125[2];
          unint64_t v134 = v125[3];
          if (v135 >= v134 >> 1) {
            uint64_t v125 = sub_232F3CCE0((void *)(v134 > 1), v135 + 1, 1, v125);
          }
          v125[2] = v135 + 1;
          unint64_t v136 = &v125[2 * v135];
          v136[4] = v132;
          v136[5] = v133;
          uint64_t v122 = (uint64_t)v173;
        }
        else
        {
          sub_233072CE4(v122, (uint64_t (*)(void))type metadata accessor for Extension);
        }
        v124 += (uint64_t)v191;
        --v107;
      }
      while (v107);
      swift_bridgeObjectRelease();
      uint64_t v53 = v180;
    }
    else
    {
      uint64_t v125 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v104 = v174;
    if (v125[2])
    {
      uint64_t v102 = v125[4];
      uint64_t v103 = v125[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = 0;
      uint64_t v103 = 0;
    }
    uint64_t v51 = (uint64_t)v168;
    uint64_t v43 = v165;
  }
  else
  {
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v175 = 0;
    uint64_t v178 = 0;
    uint64_t v176 = 0;
    uint64_t v104 = 0;
  }
  if (v156)
  {
    int v137 = 0;
    if (v51)
    {
LABEL_140:
      uint64_t v138 = v51;
      uint64_t v139 = *(void *)(v51 + 16);
      swift_bridgeObjectRetain();
      if (!v139)
      {
        swift_bridgeObjectRelease();
        uint64_t v138 = 0;
      }
      uint64_t v43 = v165;
      goto LABEL_147;
    }
  }
  else
  {
    *(void *)&long long v182 = v150;
    DWORD2(v182) = v151 & 0x1FF01FF;
    uint64_t v140 = v164;
    id v141 = FHIRDate.asMedicalDate()();
    uint64_t v164 = v140;
    if (v140)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (id)swift_bridgeObjectRelease();
    }
    int v137 = v141;
    uint64_t v51 = (uint64_t)v168;
    uint64_t v43 = v165;
    if (v168) {
      goto LABEL_140;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v138 = 0;
LABEL_147:
  uint64_t v143 = v154;
  if (v43 && !v43[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v143 = v154;
    uint64_t v43 = 0;
  }
  if (v143 == 1)
  {
    uint64_t v144 = 0;
    unint64_t v145 = 0;
  }
  else
  {
    *(void *)&long long v182 = v149;
    *((void *)&v182 + 1) = v143;
    *(void *)&long long v183 = v148;
    Swift::String_optional v146 = CodeableConcept.preferredDisplayString()();
    uint64_t v144 = v146.value._countAndFlagsBits;
    unint64_t v145 = v146.value._object;
  }
  sub_233072CA4();
  return sub_23301637C(v155, v159, v137, v152, v160, v138, (uint64_t)v43, (uint64_t)v53, (uint64_t)v177, v144, (uint64_t)v145, v176, v104, v175, v178, v102, v103);
}

void sub_233072C50(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_233072CA4()
{
  unint64_t result = qword_268758798;
  if (!qword_268758798)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_268758798);
  }
  return result;
}

uint64_t sub_233072CE4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_233072D44(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_233072C50(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_233072DA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233072E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  sub_233080D4C(0, &qword_268758C78, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v61 - v4;
  uint64_t v69 = type metadata accessor for ModelsDSTU2.HumanName(0);
  uint64_t v6 = MEMORY[0x270FA5388](v69);
  uint64_t v8 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (void *)((char *)v61 - v10);
  uint64_t v12 = (void *)MEMORY[0x263F8EE80];
  unint64_t v70 = (void *)MEMORY[0x263F8EE80];
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v63 = v9;
  if (!v13)
  {
LABEL_23:
    unint64_t v40 = 0;
    uint64_t v41 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v68 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    id v42 = (uint64_t *)&unk_26E69D638;
    uint64_t v43 = &unk_26E69D000;
    while (1)
    {
      if (v40 >= v43[196])
      {
        __break(1u);
        goto LABEL_39;
      }
      if (!v12[2]) {
        goto LABEL_25;
      }
      uint64_t v46 = *(v42 - 1);
      uint64_t v47 = *v42;
      swift_bridgeObjectRetain();
      unint64_t v48 = sub_232F393E0(v46, v47);
      if ((v49 & 1) == 0) {
        break;
      }
      unint64_t v50 = v43;
      uint64_t v51 = *(void *)(v12[7] + 8 * v48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (*(void *)(v51 + 16))
      {
        uint64_t v52 = v63;
        sub_2330815B0(v51 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80)), (uint64_t)v5, type metadata accessor for ModelsDSTU2.HumanName);
        uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
        uint64_t v53 = v5;
        uint64_t v54 = 0;
      }
      else
      {
        uint64_t v44 = *v41;
        uint64_t v53 = v5;
        uint64_t v54 = 1;
      }
      uint64_t v55 = v69;
      v44(v53, v54, 1, v69);
      swift_bridgeObjectRelease();
      if ((*v68)(v5, 1, v55) != 1)
      {
        swift_release();
        swift_arrayDestroy();
        uint64_t v59 = v62;
        sub_233081618((uint64_t)v5, v62, type metadata accessor for ModelsDSTU2.HumanName);
        uint64_t v56 = v59;
        uint64_t v57 = 0;
        uint64_t v58 = v69;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v56, v57, 1, v58);
      }
      uint64_t v45 = v69;
      uint64_t v43 = v50;
LABEL_26:
      ++v40;
      sub_233081680((uint64_t)v5, &qword_268758C78, type metadata accessor for ModelsDSTU2.HumanName);
      v42 += 2;
      if (v40 == 7)
      {
        swift_arrayDestroy();
        swift_release();
        uint64_t v56 = v62;
        uint64_t v57 = 1;
        uint64_t v58 = v45;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v56, v57, 1, v58);
      }
    }
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v44 = *v41;
    uint64_t v45 = v69;
    (*v41)(v5, 1, 1, v69);
    goto LABEL_26;
  }
  v61[0] = v5;
  v61[1] = a1;
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v9 + 72);
  uint64_t v68 = (unsigned int (**)(char *, uint64_t, uint64_t))v15;
  uint64_t v65 = v14 | 7;
  uint64_t v66 = v17 + v15;
  swift_bridgeObjectRetain();
  long long v64 = xmmword_2330A1880;
  uint64_t v67 = v8;
  while (1)
  {
    sub_2330815B0(v16, (uint64_t)v11, type metadata accessor for ModelsDSTU2.HumanName);
    uint64_t v19 = v11[1];
    uint64_t v20 = v19 ? *v11 : 0x7D656E6F6E7BLL;
    uint64_t v21 = v19 ? v11[1] : 0xE600000000000000;
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_232F393E0(v20, v21);
    uint64_t v24 = v12[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v12[3] < v26)
    {
      sub_232F5C758(v26, 1);
      uint64_t v12 = v70;
      unint64_t v28 = sub_232F393E0(v20, v21);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_41;
      }
      unint64_t v23 = v28;
    }
    if (v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = v12[7];
      sub_233081618((uint64_t)v11, (uint64_t)v8, type metadata accessor for ModelsDSTU2.HumanName);
      unint64_t v31 = *(void *)(v30 + 8 * v23);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v30 + 8 * v23) = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v31 = sub_232F3CF1C(0, *(void *)(v31 + 16) + 1, 1, v31);
        *(void *)(v30 + 8 * v23) = v31;
      }
      unint64_t v34 = *(void *)(v31 + 16);
      unint64_t v33 = *(void *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        unint64_t v31 = sub_232F3CF1C(v33 > 1, v34 + 1, 1, v31);
        *(void *)(v30 + 8 * v23) = v31;
      }
      *(void *)(v31 + 16) = v34 + 1;
      uint64_t v18 = (uint64_t)v68 + v31 + v34 * v17;
      uint64_t v8 = v67;
      sub_233081618((uint64_t)v67, v18, type metadata accessor for ModelsDSTU2.HumanName);
    }
    else
    {
      sub_233080D4C(0, &qword_2687570C8, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8E0F8]);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v64;
      sub_233081618((uint64_t)v11, (uint64_t)v68 + v35, type metadata accessor for ModelsDSTU2.HumanName);
      v12[(v23 >> 6) + 8] |= 1 << v23;
      uint64_t v36 = (uint64_t *)(v12[6] + 16 * v23);
      *uint64_t v36 = v20;
      v36[1] = v21;
      *(void *)(v12[7] + 8 * v23) = v35;
      uint64_t v37 = v12[2];
      BOOL v38 = __OFADD__(v37, 1);
      uint64_t v39 = v37 + 1;
      if (v38) {
        goto LABEL_40;
      }
      void v12[2] = v39;
    }
    v16 += v17;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v63;
      uint64_t v5 = (char *)v61[0];
      goto LABEL_23;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = sub_23309C340();
  __break(1u);
  return result;
}