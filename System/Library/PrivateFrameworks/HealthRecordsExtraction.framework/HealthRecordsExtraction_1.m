uint64_t sub_232F34B94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6973756C636E6F63 && a2 == 0xEA00000000006E6FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FC0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xED00006D726F4664 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_232F35110(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7574617453636F64 && a2 == 0xE900000000000073 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x726F68747561 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_232F35634(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232F3572C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65746E756F636E65 && a2 == 0xE900000000000072;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F69726570 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232F35824(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002330B4FE0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6465696C707041 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x646564726F636572 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x43656E6963636176 && a2 == 0xEB0000000065646FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x537972616D697270 && a2 == 0xED0000656372756FLL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65626D754E746F6CLL && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x746F706275537369 && a2 == 0xEB00000000746E65 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t sub_232F35F90(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000002330B5040 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002330B5060 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002330B5080 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B50A0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465746567726174 && a2 == 0xEF65736165736944)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_232F361B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FC0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002330B5000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002330B5020 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x61755165756C6176 && a2 == 0xED0000797469746ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEE0065676E615265 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t sub_232F368C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786966657270 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796C696D6166 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E65766967 && a2 == 0xE500000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x786966667573 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x646F69726570 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_232F36B60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_232F36C3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461446874726962 && a2 == 0xE900000000000065 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265646E6567 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F63656C6574 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x536C61746972616DLL && a2 == 0xED00007375746174 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1802398060 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_232F37130(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232F37274(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_232F3718C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_232F371F4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232EA3854(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_232F37274(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_232EA3854(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_232F372EC()
{
  if (!qword_268756F70)
  {
    type metadata accessor for ModelsR4.ResourceProxy(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756F70);
    }
  }
}

id ConditionRule.__allocating_init(definition:)(unint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ConditionRule.init(definition:)(a1, a2);
}

id ConditionRule.init(definition:)(unint64_t a1, unint64_t a2)
{
  uint64_t v56 = sub_23309AC20();
  uint64_t v6 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[OBJC_IVAR___HDHRConditionRule_keyPath];
  *(void *)v9 = 0;
  *((void *)v9 + 1) = 0xE000000000000000;
  v48 = v9;
  v10 = &v2[OBJC_IVAR___HDHRConditionRule_value];
  *(void *)v10 = 0;
  *((void *)v10 + 1) = 0xE000000000000000;
  v49 = v10;
  unint64_t v54 = a1;
  unint64_t v55 = a2;
  uint64_t v52 = 61;
  unint64_t v53 = 0xE100000000000000;
  unint64_t v11 = sub_232F379FC();
  v12 = v2;
  unint64_t v50 = v11;
  uint64_t v13 = sub_23309BD30();
  int64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    v46[2] = a1;
    v46[3] = a2;
    v46[4] = v3;
    v47 = v12;
    uint64_t v15 = v13;
    uint64_t v52 = MEMORY[0x263F8EE78];
    sub_232F39748(0, v14, 0);
    v16 = (void (**)(char *, uint64_t))(v6 + 8);
    v46[1] = v15;
    v17 = (unint64_t *)(v15 + 40);
    do
    {
      unint64_t v18 = *v17;
      unint64_t v54 = *(v17 - 1);
      unint64_t v55 = v18;
      swift_bridgeObjectRetain();
      sub_23309ABE0();
      uint64_t v19 = sub_23309BD40();
      uint64_t v21 = v20;
      (*v16)(v8, v56);
      swift_bridgeObjectRelease();
      v22 = (void *)v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_232F39748(0, v22[2] + 1, 1);
        v22 = (void *)v52;
      }
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_232F39748(v23 > 1, v24 + 1, 1);
        v22 = (void *)v52;
      }
      v17 += 2;
      v22[2] = v24 + 1;
      v25 = &v22[2 * v24];
      v25[4] = v19;
      v25[5] = v21;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    v12 = v47;
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = (void *)MEMORY[0x263F8EE78];
  }
  if (v22[2] == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = v22[2];
    if (v26)
    {
      uint64_t v28 = v22[4];
      unint64_t v27 = v22[5];
      uint64_t v29 = (uint64_t)&v22[2 * v26 + 4];
      uint64_t v31 = *(void *)(v29 - 16);
      unint64_t v30 = *(void *)(v29 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v28 = 0;
      unint64_t v30 = 0xE000000000000000;
      unint64_t v27 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0) {
      uint64_t v36 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (v36)
    {
      uint64_t v37 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0) {
        uint64_t v37 = v31 & 0xFFFFFFFFFFFFLL;
      }
      if (v37)
      {
        v38 = v48;
        *(void *)v48 = v28;
        *((void *)v38 + 1) = v27;
        swift_bridgeObjectRelease();
        v39 = v49;
        *(void *)v49 = v31;
        *((void *)v39 + 1) = v30;

        swift_bridgeObjectRelease();
        v40 = (objc_class *)type metadata accessor for ConditionRule();
        v51.receiver = v12;
        v51.super_class = v40;
        return objc_msgSendSuper2(&v51, sel_init);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232F398C8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2330A1880;
    *(void *)(inited + 32) = sub_23309B710();
    *(void *)(inited + 40) = v42;
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    unint64_t v34 = 0xD000000000000020;
    unint64_t v35 = 0x80000002330B5130;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_232F398C8(0, (unint64_t *)&qword_268756F90, (uint64_t (*)(uint64_t))sub_232F39768, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2330A1880;
    *(void *)(inited + 32) = sub_23309B710();
    *(void *)(inited + 40) = v33;
    unint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    sub_23309BE40();
    swift_bridgeObjectRelease();
    unint64_t v54 = 0xD000000000000011;
    unint64_t v55 = 0x80000002330B50F0;
    sub_23309B880();
    swift_bridgeObjectRelease();
    sub_23309B880();
    unint64_t v34 = v54;
    unint64_t v35 = v55;
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
  }
  *(void *)(inited + 48) = v34;
  *(void *)(inited + 56) = v35;
  sub_232F37A50(inited);
  id v43 = objc_allocWithZone(MEMORY[0x263F087E8]);
  v44 = (void *)sub_23309B6E0();
  v45 = (void *)sub_23309B640();
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 3, v45);

  swift_willThrow();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  type metadata accessor for ConditionRule();
  return (id)swift_deallocPartialClassInstance();
}

unint64_t sub_232F379FC()
{
  unint64_t result = qword_268756F88;
  if (!qword_268756F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F88);
  }
  return result;
}

unint64_t sub_232F37A50(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F3AA10(0, (unint64_t *)&qword_268757050, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8DFB0]);
  uint64_t v2 = sub_23309BFB0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_232F3A5B0(v6, (uint64_t)&v15, (uint64_t (*)(void))sub_232F39768);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_232F393E0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_232F3A680(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_232F37BB4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F3AA10(0, &qword_268756FE8, MEMORY[0x263F8D310], MEMORY[0x263F8DFB0]);
  uint64_t v2 = (void *)sub_23309BFB0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_232F393E0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_232F37CF8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F3A690();
  uint64_t v2 = (void *)sub_23309BFB0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_232F393E0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_232F37E10(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F3A4FC();
  uint64_t v2 = sub_23309BFB0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_232F3A5B0(v6, (uint64_t)&v15, (uint64_t (*)(void))sub_232F3A618);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_232F393E0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_232F3A680(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_232F37F4C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F3A83C();
  uint64_t v2 = sub_23309BFB0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_232F3A5B0(v6, (uint64_t)&v13, (uint64_t (*)(void))sub_232F3A924);
    uint64_t v7 = v13;
    unint64_t result = sub_232F39458(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_232F3A680(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_232F38078(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  sub_23309B830();
  return sub_23309B920();
}

uint64_t sub_232F38178(void *a1)
{
  uint64_t v2 = v1;
  id v3 = objc_msgSend(a1, sel_JSONObject);
  uint64_t v4 = MEMORY[0x263F8EE58];
  uint64_t v5 = sub_23309B650();

  if (!*(void *)(v5 + 16))
  {
    long long v19 = 0u;
    long long v20 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR___HDHRConditionRule_keyPath);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR___HDHRConditionRule_keyPath + 8);
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_232F393E0(v7, v6);
  if ((v9 & 1) == 0)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_232F397F8(*(void *)(v5 + 56) + 32 * v8, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v20 + 1))
  {
LABEL_10:
    sub_232F3992C((uint64_t)&v19, (uint64_t)&qword_268756FA0, v4 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
    goto LABEL_11;
  }
  sub_232F3A680(&v19, v21);
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR___HDHRConditionRule_value);
  swift_bridgeObjectRetain();
  char v11 = sub_23309B910();
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v12 = v10[1];
    *(void *)&long long v19 = *v10;
    *((void *)&v19 + 1) = v12;
    uint64_t v17 = 124;
    unint64_t v18 = 0xE100000000000000;
    sub_232F379FC();
    if (sub_23309BD80())
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v10[1];
      sub_232F397F8((uint64_t)v21, (uint64_t)&v19);
      swift_bridgeObjectRetain();
      char v15 = sub_232F3847C(v13, v14, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      sub_232F3992C((uint64_t)&v19, (uint64_t)&qword_268756FA0, v4 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return v15 & 1;
    }
  }
  sub_232F397F8((uint64_t)v21, (uint64_t)&v19);
  if (swift_dynamicCast())
  {
    if (v17 == *v10 && v18 == v10[1]) {
      char v15 = 1;
    }
    else {
      char v15 = sub_23309C220();
    }
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
LABEL_11:
  char v15 = 0;
  return v15 & 1;
}

uint64_t sub_232F3847C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_232F3A470(a3, (uint64_t)&v22);
  uint64_t v6 = MEMORY[0x263F8EE58];
  if (v23)
  {
    sub_232F3AA6C(0, &qword_268757048, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D488]);
    if (swift_dynamicCast())
    {
      uint64_t v7 = *(void *)(v20 + 16);
      if (v7)
      {
        uint64_t v8 = v20 + 32;
        uint64_t v9 = v6 + 8;
        while (1)
        {
          sub_232F397F8(v8, (uint64_t)&v22);
          char v10 = sub_232F3847C(a1, a2, &v22);
          sub_232F3992C((uint64_t)&v22, (uint64_t)&qword_268756FA0, v9, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
          if (v10) {
            break;
          }
          v8 += 32;
          if (!--v7)
          {
            swift_bridgeObjectRelease();
            uint64_t v6 = MEMORY[0x263F8EE58];
            goto LABEL_10;
          }
        }
LABEL_25:
        swift_bridgeObjectRelease();
        char v16 = 1;
        return v16 & 1;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_232F3992C((uint64_t)&v22, (uint64_t)&qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
  }
LABEL_10:
  sub_232F3A470(a3, (uint64_t)&v22);
  if (!v23)
  {
    uint64_t v13 = v6 + 8;
    uint64_t v14 = MEMORY[0x263F8D8F0];
    char v15 = &v22;
LABEL_21:
    sub_232F3992C((uint64_t)v15, (uint64_t)&qword_268756FA0, v13, v14, (uint64_t (*)(void))sub_232F3AA6C);
    goto LABEL_22;
  }
  sub_232F3AA10(0, &qword_268756FB0, v6 + 8, MEMORY[0x263F8D060]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    uint64_t v17 = sub_232F38820(a3);
    if (!v18)
    {
      char v16 = 0;
      return v16 & 1;
    }
    if (v17 != a1 || v18 != a2)
    {
      char v16 = sub_23309C220();
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
    goto LABEL_25;
  }
  if (*(void *)(v20 + 16) && (unint64_t v11 = sub_232F393E0(0x676E69646F63, 0xE600000000000000), (v12 & 1) != 0))
  {
    sub_232F397F8(*(void *)(v20 + 56) + 32 * v11, (uint64_t)&v20);
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
    uint64_t v13 = v6 + 8;
    uint64_t v14 = MEMORY[0x263F8D8F0];
    char v15 = &v20;
    goto LABEL_21;
  }
  sub_232F3A680(&v20, &v22);
  sub_232F397F8((uint64_t)&v22, (uint64_t)&v20);
  char v16 = sub_232F3847C(a1, a2, &v20);
  sub_232F3992C((uint64_t)&v20, (uint64_t)&qword_268756FA0, v6 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  return v16 & 1;
}

uint64_t sub_232F38820(uint64_t a1)
{
  sub_232F398C8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v23 - v3;
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3A470(a1, (uint64_t)&v24);
  if (!*((void *)&v25 + 1))
  {
    uint64_t v14 = MEMORY[0x263F8EE58] + 8;
    uint64_t v13 = (uint64_t *)&qword_268756FA0;
    uint64_t v15 = MEMORY[0x263F8D8F0];
    char v16 = (uint64_t (*)(void))sub_232F3AA6C;
    uint64_t v17 = (char *)&v24;
    goto LABEL_9;
  }
  uint64_t v9 = MEMORY[0x263F8EE58];
  sub_232F3AA10(0, &qword_268756FB0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D060]);
  if (swift_dynamicCast())
  {
    uint64_t v10 = v23[0];
    if (!*(void *)(v23[0] + 16)
      || (unint64_t v11 = sub_232F393E0(0x6D6574737973, 0xE600000000000000), (v12 & 1) == 0)
      || (sub_232F397F8(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v24), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_232F38C6C(v23[0], v23[1], 1, 1, (uint64_t)v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = &qword_268756520;
      uint64_t v14 = MEMORY[0x263F06EA8];
      uint64_t v15 = MEMORY[0x263F8D8F0];
      char v16 = (uint64_t (*)(void))sub_232F398C8;
      uint64_t v17 = v4;
LABEL_9:
      sub_232F3992C((uint64_t)v17, (uint64_t)v13, v14, v15, v16);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (*(void *)(v10 + 16) && (unint64_t v20 = sub_232F393E0(1701080931, 0xE400000000000000), (v21 & 1) != 0))
    {
      sub_232F397F8(*(void *)(v10 + 56) + 32 * v20, (uint64_t)&v24);
    }
    else
    {
      long long v24 = 0u;
      long long v25 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v25 + 1))
    {
      if (swift_dynamicCast())
      {
        sub_232F3A8DC(&qword_268756FB8, MEMORY[0x263F06EA8]);
        *(void *)&long long v24 = sub_23309C1E0();
        *((void *)&v24 + 1) = v22;
        sub_23309B880();
        sub_23309B880();
        swift_bridgeObjectRelease();
        uint64_t v18 = v24;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return v18;
      }
    }
    else
    {
      sub_232F3992C((uint64_t)&v24, (uint64_t)&qword_268756FA0, v9 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F3AA6C);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return 0;
}

uint64_t sub_232F38C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  LODWORD(v44) = a4;
  LODWORD(v43) = a3;
  uint64_t v47 = a5;
  uint64_t v7 = sub_23309AC80();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F398C8(0, &qword_268756FA8, MEMORY[0x263F06370], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v42 - v12;
  sub_232F398C8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v10);
  MEMORY[0x270FA5388](v14 - 8);
  char v16 = (char *)&v42 - v15;
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_23309AC20();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  long long v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  sub_23309ABE0();
  sub_232F379FC();
  sub_23309BD40();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  sub_23309AF50();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_232F3992C((uint64_t)v16, (uint64_t)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F398C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v47, 1, 1, v17);
  }
  uint64_t v26 = v47;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  sub_23309AC30();
  uint64_t v27 = v45;
  if ((v43 & 1) != 0 && !(*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v13, 1, v45)) {
    sub_23309AC70();
  }
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if ((v44 & 1) != 0 && !v28(v13, 1, v27))
  {
    uint64_t v31 = sub_23309AC50();
    uint64_t v33 = sub_232F38078(v31, v32);
    uint64_t v35 = v34;
    uint64_t v27 = v45;
    swift_bridgeObjectRelease();
    if (v35)
    {
      if (v33 == 47 && v35 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      char v36 = sub_23309C220();
      swift_bridgeObjectRelease();
      if (v36)
      {
LABEL_18:
        if (!v28(v13, 1, v27))
        {
          sub_23309AC50();
          if (v28(v13, 1, v27))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v37 = sub_232F3A3A4(1);
            uint64_t v43 = v39;
            uint64_t v44 = v38;
            uint64_t v41 = v40;
            swift_bridgeObjectRelease();
            MEMORY[0x237DB57D0](v37, v44, v43, v41);
            uint64_t v27 = v45;
            swift_bridgeObjectRelease();
            sub_23309AC60();
          }
        }
      }
    }
  }
  if (v28(v13, 1, v27))
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v26, 1, 1, v17);
  }
  else
  {
    uint64_t v29 = v46;
    unint64_t v30 = v42;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v42, v13, v27);
    sub_23309AC40();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v27);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  return sub_232F3992C((uint64_t)v13, (uint64_t)&qword_268756FA8, MEMORY[0x263F06370], MEMORY[0x263F8D8F0], (uint64_t (*)(void))sub_232F398C8);
}

id ConditionRule.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ConditionRule.init()()
{
}

id ConditionRule.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConditionRule();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_232F393E0(uint64_t a1, uint64_t a2)
{
  sub_23309C3D0();
  sub_23309B800();
  uint64_t v4 = sub_23309C420();
  return sub_232F394EC(a1, a2, v4);
}

unint64_t sub_232F39458(uint64_t a1)
{
  sub_23309B710();
  sub_23309C3D0();
  sub_23309B800();
  uint64_t v2 = sub_23309C420();
  swift_bridgeObjectRelease();
  return sub_232F395D0(a1, v2);
}

unint64_t sub_232F394EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23309C220() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23309C220() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_232F395D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_23309B710();
    uint64_t v8 = v7;
    if (v6 == sub_23309B710() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_23309C220();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_23309B710();
          uint64_t v15 = v14;
          if (v13 == sub_23309B710() && v15 == v16) {
            break;
          }
          char v18 = sub_23309C220();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_232F39748(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F39A8C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

void sub_232F39768()
{
  if (!qword_268756F98)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756F98);
    }
  }
}

uint64_t type metadata accessor for ConditionRule()
{
  return self;
}

uint64_t sub_232F397F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t method lookup function for ConditionRule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ConditionRule);
}

uint64_t dispatch thunk of ConditionRule.__allocating_init(definition:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ConditionRule.evaluate(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

void sub_232F398C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_232F3992C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_232F3998C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F39C18(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_232F399AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F39DC4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_232F399CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F3A140(a1, a2, a3, (void *)*v3, &qword_268757010, (uint64_t (*)(uint64_t))sub_232F3A798, (uint64_t (*)(void))sub_232F3A798);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_232F39A1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F39F70(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_232F39A3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_232F3A140(a1, a2, a3, (void *)*v3, &qword_268756FF0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(void))type metadata accessor for Extension);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_232F39A8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_232F3AA6C(0, &qword_268757058, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F39C18(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_232F3AA6C(0, &qword_268757040, (uint64_t)&type metadata for Parameter, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F39DC4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_232F3A990();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_232F3AA6C(0, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F39F70(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_232F398C8(0, &qword_268756FF8, (uint64_t (*)(uint64_t))sub_232F3A720, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_232F3A720();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3A140(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_232F398C8(0, a5, a6, MEMORY[0x263F8E0F8]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (char *)v17 + v21;
  uint64_t v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  long long v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3A3A4(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = result;
  uint64_t result = sub_23309B810();
  if (__OFSUB__(result, v1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_23309B840();
  return sub_23309B950();
}

uint64_t sub_232F3A470(uint64_t a1, uint64_t a2)
{
  sub_232F3AA6C(0, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_232F3A4FC()
{
  if (!qword_268756FC0)
  {
    sub_232F3A564();
    unint64_t v0 = sub_23309BFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756FC0);
    }
  }
}

unint64_t sub_232F3A564()
{
  unint64_t result = qword_268756FC8;
  if (!qword_268756FC8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268756FC8);
  }
  return result;
}

uint64_t sub_232F3A5B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_232F3A618()
{
  if (!qword_268756FD0)
  {
    sub_232F3A564();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756FD0);
    }
  }
}

_OWORD *sub_232F3A680(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_232F3A690()
{
  if (!qword_268756FD8)
  {
    sub_232F3AA10(255, (unint64_t *)&qword_268756FE0, MEMORY[0x263F8D310], MEMORY[0x263F8D060]);
    unint64_t v0 = sub_23309BFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756FD8);
    }
  }
}

void sub_232F3A720()
{
  if (!qword_268757000)
  {
    sub_232F3A800(255, &qword_268757008);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268757000);
    }
  }
}

void sub_232F3A798()
{
  if (!qword_268757018)
  {
    sub_232F3A800(255, &qword_268757020);
    unint64_t v0 = sub_23309B610();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757018);
    }
  }
}

uint64_t sub_232F3A800(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_232F3A83C()
{
  if (!qword_268757028)
  {
    type metadata accessor for VNImageOption(255);
    sub_232F3A8DC(&qword_268756668, type metadata accessor for VNImageOption);
    unint64_t v0 = sub_23309BFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757028);
    }
  }
}

uint64_t sub_232F3A8DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_232F3A924()
{
  if (!qword_268757030)
  {
    type metadata accessor for VNImageOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268757030);
    }
  }
}

void sub_232F3A990()
{
  if (!qword_268757038)
  {
    sub_232F3AA6C(255, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757038);
    }
  }
}

void sub_232F3AA10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x263F8D310], a3, MEMORY[0x263F8D320]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_232F3AA6C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_232F3AAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return MEMORY[0x270FA2498](sub_232F3AAE0, 0, 0);
}

uint64_t sub_232F3AAE0()
{
  uint64_t v8 = v0[6];
  uint64_t v1 = (*(uint64_t (**)(void, void, void, void))(v8 + 24))(v0[2], v0[3], v0[4], v0[5]);
  v0[8] = v1;
  int64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 32) + **(int **)(v8 + 32));
  long long v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *long long v2 = v0;
  v2[1] = sub_232F3AC00;
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  return v7(v1, v5, v4, v3);
}

uint64_t sub_232F3AC00(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_232F3AD90;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = sub_232F3AD28;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_232F3AD28()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 88);
  return v1(v2);
}

uint64_t sub_232F3AD90()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Bool __swiftcall HKSignedClinicalDataQRRepresentation.isSHC()()
{
  return objc_msgSend(v0, sel_sourceType) == (id)1;
}

unint64_t *HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()()
{
  unint64_t v2 = v1;
  uint64_t v95 = *MEMORY[0x263EF8340];
  unint64_t v3 = sub_23309B760();
  uint64_t v4 = *(void **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, sel_sourceType) != (id)1)
  {
    sub_232F3DA4C();
    swift_allocError();
    uint64_t v25 = 2;
LABEL_13:
    *(void *)uint64_t v24 = v25;
    *(_OWORD *)(v24 + 8) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    char v26 = 4;
LABEL_14:
    *(unsigned char *)(v24 + 40) = v26;
LABEL_15:
    swift_willThrow();
    return v0;
  }
  unint64_t v93 = 0;
  id v7 = objc_msgSend(v0, sel_orderedSegmentsWithError_, &v93);
  id v8 = (id)v93;
  if (!v7)
  {
    uint64_t v0 = (unint64_t *)(id)v93;
    uint64_t v27 = (void *)sub_23309AEC0();

    swift_willThrow();
    unint64_t v93 = (unint64_t)v27;
    id v28 = v27;
    sub_232F3DAA0();
    sub_232F3A800(0, &qword_268757078);
    if (swift_dynamicCast())
    {
      id v29 = v91;
      if (objc_msgSend(v91, sel_code) == (id)118)
      {

        sub_232F3DA4C();
        swift_allocError();
        *(_OWORD *)uint64_t v30 = 0u;
        *(_OWORD *)(v30 + 16) = 0u;
        *(void *)(v30 + 32) = 0;
        *(unsigned char *)(v30 + 40) = 4;
        swift_willThrow();
      }
    }
    return v0;
  }
  uint64_t v9 = v7;
  sub_232F3A800(0, (unint64_t *)&qword_268757080);
  unint64_t v10 = sub_23309B9A0();
  id v11 = v8;
  unint64_t v12 = v10;

  if (v10 >> 62) {
    goto LABEL_139;
  }
  uint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_5:
  unint64_t v86 = v3;
  unint64_t v87 = v2;
  v84 = v6;
  v85 = v4;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
    }
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    v88 = (char *)(v12 & 0xC000000000000001);
    unint64_t v16 = 0xE000000000000000;
    unint64_t v17 = v12;
    do
    {
      unint64_t v3 = v13;
      if (v88) {
        id v18 = (id)MEMORY[0x237DB5EA0](v14, v12);
      }
      else {
        id v18 = *(id *)(v12 + 8 * v14 + 32);
      }
      uint64_t v19 = v18;
      ++v14;
      id v20 = objc_msgSend(v18, sel_dataValue);
      unint64_t v21 = (void *)sub_23309B710();
      uint64_t v6 = v22;

      id v91 = v21;
      uint64_t v92 = (uint64_t)v6;
      uint64_t v89 = v15;
      unint64_t v90 = v16;
      swift_bridgeObjectRetain();
      unint64_t v2 = MEMORY[0x263F8D310];
      uint64_t v89 = sub_23309B940();
      unint64_t v90 = v23;
      sub_23309B860();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      unint64_t v15 = v89;
      unint64_t v16 = v90;
      unint64_t v12 = v17;
    }
    while (v13 != v14);
  }
  else
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease_n();
  unint64_t v93 = v15;
  unint64_t v94 = v16;
  BOOL v32 = (v16 & 0x2000000000000000) == 0;
  uint64_t v33 = HIBYTE(v16) & 0xF;
  unint64_t v34 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0) {
    unint64_t v12 = HIBYTE(v16) & 0xF;
  }
  else {
    unint64_t v12 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    v83 = (char *)&v91 + 2;
    v88 = (char *)&v91 + 3;
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      if (v32)
      {
        if (!v34) {
          goto LABEL_135;
        }
      }
      else if (!v33)
      {
        goto LABEL_136;
      }
      unint64_t v2 = v16 >> 60;
      unint64_t v3 = (v15 & 0x800000000000000) == 0;
      uint64_t v35 = sub_23309B920();
      unint64_t v37 = v36;
      sub_23309B840();
      if (v38) {
        goto LABEL_143;
      }
      uint64_t v0 = &v93;
      sub_23309B7A0();
      uint64_t v39 = HIBYTE(v37) & 0xF;
      uint64_t v40 = v35 & 0xFFFFFFFFFFFFLL;
      if ((v37 & 0x2000000000000000) != 0) {
        uint64_t v41 = HIBYTE(v37) & 0xF;
      }
      else {
        uint64_t v41 = v35 & 0xFFFFFFFFFFFFLL;
      }
      if (!v41)
      {
LABEL_127:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232F3DA4C();
        swift_allocError();
        *(void *)uint64_t v81 = v35;
        *(void *)(v81 + 8) = v37;
LABEL_130:
        *(unsigned char *)(v81 + 40) = 0;
        goto LABEL_15;
      }
      if ((v37 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v46 = (uint64_t)sub_232F3DAF8(v35, v37, 10);
        char v73 = v72;
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_127;
        }
      }
      else
      {
        if ((v37 & 0x2000000000000000) != 0)
        {
          id v91 = (id)v35;
          uint64_t v92 = v37 & 0xFFFFFFFFFFFFFFLL;
          if (v35 == 43)
          {
            if (!v39) {
              goto LABEL_142;
            }
            if (v39 != 1)
            {
              if ((BYTE1(v35) - 48) > 9u) {
                goto LABEL_64;
              }
              uint64_t v46 = (BYTE1(v35) - 48);
              if (v39 == 2) {
                goto LABEL_66;
              }
              if ((BYTE2(v35) - 48) > 9u) {
                goto LABEL_64;
              }
              uint64_t v46 = 10 * (BYTE1(v35) - 48) + (BYTE2(v35) - 48);
              uint64_t v47 = v39 - 3;
              if (v39 == 3) {
                goto LABEL_66;
              }
              uint64_t v48 = (unsigned __int8 *)v88;
              while (1)
              {
                unsigned int v49 = *v48 - 48;
                if (v49 > 9) {
                  goto LABEL_64;
                }
                uint64_t v50 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                  goto LABEL_64;
                }
                uint64_t v46 = v50 + v49;
                if (__OFADD__(v50, v49)) {
                  goto LABEL_64;
                }
                LOBYTE(v39) = 0;
                ++v48;
                if (!--v47) {
                  goto LABEL_67;
                }
              }
            }
          }
          else
          {
            if (v35 != 45)
            {
              if (!v39 || (v35 - 48) > 9u) {
                goto LABEL_64;
              }
              uint64_t v46 = (v35 - 48);
              if (v39 == 1) {
                goto LABEL_66;
              }
              if ((BYTE1(v35) - 48) > 9u) {
                goto LABEL_64;
              }
              uint64_t v46 = 10 * (v35 - 48) + (BYTE1(v35) - 48);
              uint64_t v64 = v39 - 2;
              if (v39 == 2) {
                goto LABEL_66;
              }
              v65 = (unsigned __int8 *)v83;
              while (1)
              {
                unsigned int v66 = *v65 - 48;
                if (v66 > 9) {
                  goto LABEL_64;
                }
                uint64_t v67 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                  goto LABEL_64;
                }
                uint64_t v46 = v67 + v66;
                if (__OFADD__(v67, v66)) {
                  goto LABEL_64;
                }
                LOBYTE(v39) = 0;
                ++v65;
                if (!--v64) {
                  goto LABEL_67;
                }
              }
            }
            if (!v39) {
              goto LABEL_141;
            }
            if (v39 != 1)
            {
              if ((BYTE1(v35) - 48) <= 9u)
              {
                if (v39 == 2)
                {
                  LOBYTE(v39) = 0;
                  uint64_t v46 = -(uint64_t)(BYTE1(v35) - 48);
                  goto LABEL_67;
                }
                if ((BYTE2(v35) - 48) <= 9u)
                {
                  uint64_t v46 = -10 * (BYTE1(v35) - 48) - (BYTE2(v35) - 48);
                  uint64_t v68 = v39 - 3;
                  if (v39 != 3)
                  {
                    v69 = (unsigned __int8 *)v88;
                    while (1)
                    {
                      unsigned int v70 = *v69 - 48;
                      if (v70 > 9) {
                        goto LABEL_64;
                      }
                      uint64_t v71 = 10 * v46;
                      if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63) {
                        goto LABEL_64;
                      }
                      uint64_t v46 = v71 - v70;
                      if (__OFSUB__(v71, v70)) {
                        goto LABEL_64;
                      }
                      LOBYTE(v39) = 0;
                      ++v69;
                      if (!--v68) {
                        goto LABEL_67;
                      }
                    }
                  }
LABEL_66:
                  LOBYTE(v39) = 0;
LABEL_67:
                  if (v39) {
                    goto LABEL_127;
                  }
                  goto LABEL_68;
                }
              }
LABEL_64:
              uint64_t v46 = 0;
              LOBYTE(v39) = 1;
              goto LABEL_67;
            }
          }
          uint64_t v46 = 0;
          goto LABEL_67;
        }
        unint64_t v42 = v87;
        if ((v35 & 0x1000000000000000) != 0) {
          uint64_t v43 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          uint64_t v43 = (unsigned __int8 *)sub_23309BEE0();
        }
        uint64_t v44 = sub_232F3DD94(v43, v40, 10);
        unint64_t v87 = v42;
        if (v45) {
          goto LABEL_127;
        }
        uint64_t v46 = (uint64_t)v44;
      }
LABEL_68:
      swift_bridgeObjectRelease();
      uint64_t v0 = (unint64_t *)v93;
      unint64_t v12 = v94;
      if ((v94 & 0x2000000000000000) != 0) {
        uint64_t v6 = (char *)(HIBYTE(v94) & 0xF);
      }
      else {
        uint64_t v6 = (char *)(v93 & 0xFFFFFFFFFFFFLL);
      }
      if (!v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232F3DA4C();
        swift_allocError();
        uint64_t v25 = 1;
        goto LABEL_13;
      }
      if ((v94 & 0x2000000000000000) != 0)
      {
        if ((v94 & 0xF00000000000000) == 0) {
          goto LABEL_138;
        }
      }
      else if ((v93 & 0xFFFFFFFFFFFFLL) == 0)
      {
        goto LABEL_137;
      }
      unint64_t v3 = sub_23309B920();
      unint64_t v2 = v51;
      sub_23309B840();
      if (v52) {
        goto LABEL_144;
      }
      uint64_t v0 = &v93;
      sub_23309B7A0();
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_232F3B994(v3, v2);
      if (v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232F3DA4C();
        swift_allocError();
        *(void *)uint64_t v81 = v3;
        *(void *)(v81 + 8) = v2;
        goto LABEL_130;
      }
      unint64_t v12 = v53;
      swift_bridgeObjectRelease();
      uint64_t v55 = 10 * v46;
      if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63)
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_23309BF80();
        goto LABEL_5;
      }
      BOOL v56 = __OFADD__(v55, v12);
      unint64_t v57 = v55 + v12;
      if (v56) {
        goto LABEL_132;
      }
      unint64_t v12 = v57 + 45;
      if (__OFADD__(v57, 45)) {
        goto LABEL_133;
      }
      if (HIDWORD(v12) || v12 >> 11 == 27 || WORD1(v12) > 0x10u)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232F3DA4C();
        swift_allocError();
        *(void *)uint64_t v24 = v12;
        char v26 = 1;
        goto LABEL_14;
      }
      if ((v12 & 0xFFFFFF80) != 0)
      {
        int v74 = (v12 & 0x3F) << 8;
        if (v12 >= 0x800)
        {
          unsigned int v75 = (v74 | (v12 >> 6) & 0x3F) << 8;
          if (WORD1(v12))
          {
            unsigned int v76 = ((v75 | (v12 >> 12) & 0x3F) << 8) | (v12 >> 18);
            int v77 = -2122219023;
          }
          else
          {
            unsigned int v76 = v75 | (v12 >> 12);
            int v77 = 8487393;
          }
          unsigned int v58 = v76 + v77;
        }
        else
        {
          unsigned int v58 = (v74 | (v12 >> 6)) + 33217;
        }
      }
      else
      {
        if (v12 > 0xFF) {
          goto LABEL_134;
        }
        unsigned int v58 = (v57 + 46);
      }
      id v91 = (id)((v58 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v58) >> 3)) & 7))));
      uint64_t v59 = MEMORY[0x237DB5830](&v91);
      uint64_t v61 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_232F3D224(0, v4[2] + 1, 1, v4);
      }
      unint64_t v3 = v4[2];
      unint64_t v62 = v4[3];
      unint64_t v2 = v3 + 1;
      if (v3 >= v62 >> 1) {
        uint64_t v4 = sub_232F3D224((void *)(v62 > 1), v3 + 1, 1, v4);
      }
      v4[2] = v2;
      v63 = &v4[2 * v3];
      v63[4] = v59;
      v63[5] = v61;
      unint64_t v15 = v93;
      unint64_t v16 = v94;
      BOOL v32 = (v94 & 0x2000000000000000) == 0;
      uint64_t v33 = HIBYTE(v94) & 0xF;
      unint64_t v34 = v93 & 0xFFFFFFFFFFFFLL;
      if ((v94 & 0x2000000000000000) != 0) {
        unint64_t v12 = HIBYTE(v94) & 0xF;
      }
      else {
        unint64_t v12 = v93 & 0xFFFFFFFFFFFFLL;
      }
      if (!v12) {
        goto LABEL_123;
      }
    }
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
LABEL_123:
  swift_bridgeObjectRelease();
  id v91 = v4;
  sub_232F3F278(0, &qword_268757088, MEMORY[0x263F8D120], MEMORY[0x263F8D488]);
  sub_232F3DBE0();
  sub_23309B930();
  v78 = v84;
  sub_23309B750();
  uint64_t v0 = (unint64_t *)sub_23309B720();
  unint64_t v80 = v79;
  swift_bridgeObjectRelease();
  ((void (*)(char *, unint64_t))v85[1])(v78, v86);
  if (v80 >> 60 == 15)
  {
    sub_232F3DA4C();
    swift_allocError();
    uint64_t v25 = 3;
    goto LABEL_13;
  }
  return v0;
}

uint64_t sub_232F3B994(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)sub_23309BEE0();
      }
      uint64_t v7 = (uint64_t)sub_232F3DD94(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        unint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              id v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)sub_232F3DAF8(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_232F3BBE4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v17 = 0;
    int v8 = 1;
    return v17 | (v8 << 8);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)sub_23309BEE0();
      }
      unsigned int v7 = sub_232F3E010(v6, v4, 10);
      int v8 = (v7 >> 8) & 1;
      goto LABEL_38;
    }
    v21[0] = a1;
    v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v9 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LOBYTE(v7) = BYTE1(a1) - 48;
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v13 = v3 - 2;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                unsigned int v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) + v15;
                if ((v7 >> 8)) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v14;
                if (!--v13) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LOBYTE(v7) = a1 - 48;
          if ((a1 - 48) <= 9u)
          {
            uint64_t v16 = v3 - 1;
            if (v16)
            {
              uint64_t v19 = (unsigned __int8 *)v21 + 1;
              while (1)
              {
                unsigned int v20 = *v19 - 48;
                if (v20 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) + v20;
                if ((v7 >> 8)) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v19;
                if (!--v16) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          char v9 = 0;
          unsigned int v7 = -(BYTE1(a1) - 48);
          if ((v7 & 0xFFFFFF00) == 0)
          {
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              id v11 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) - v12;
                if ((v7 & 0xFFFFFF00) != 0) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_38;
                }
              }
            }
LABEL_37:
            int v8 = 0;
            goto LABEL_38;
          }
LABEL_54:
          int v8 = 1;
          LOBYTE(v7) = v9;
          goto LABEL_38;
        }
LABEL_35:
        LOBYTE(v7) = 0;
        int v8 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  unsigned int v7 = sub_232F3DCB0(a1, a2, 10);
  swift_bridgeObjectRelease();
  int v8 = (v7 >> 8) & 1;
LABEL_39:
  if (v8) {
    unsigned __int8 v17 = 0;
  }
  else {
    unsigned __int8 v17 = v7;
  }
  return v17 | (v8 << 8);
}

uint64_t HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWT()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = sub_23309B760();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t result = (uint64_t)HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()();
  if (!v1)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    sub_23309B750();
    sub_23309B730();
    if (v8)
    {
      sub_232F3C104((uint64_t)v17);
      uint64_t result = sub_232E9AA4C(v6, v7);
      long long v9 = v17[11];
      a1[10] = v17[10];
      a1[11] = v9;
      long long v10 = v17[13];
      a1[12] = v17[12];
      a1[13] = v10;
      long long v11 = v17[7];
      a1[6] = v17[6];
      a1[7] = v11;
      long long v12 = v17[9];
      a1[8] = v17[8];
      a1[9] = v12;
      long long v13 = v17[3];
      a1[2] = v17[2];
      a1[3] = v13;
      long long v14 = v17[5];
      a1[4] = v17[4];
      a1[5] = v14;
      long long v15 = v17[1];
      *a1 = v17[0];
      a1[1] = v15;
    }
    else
    {
      sub_232F3DC5C();
      swift_allocError();
      *(void *)uint64_t v16 = 0;
      *(unsigned char *)(v16 + 8) = 3;
      swift_willThrow();
      return sub_232E9AA4C(v6, v7);
    }
  }
  return result;
}

uint64_t sub_232F3BFB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = sub_23309B760();
  MEMORY[0x270FA5388](v7 - 8);
  sub_23309B750();
  sub_23309B730();
  if (v8)
  {
    sub_232F3C104((uint64_t)v18);
    uint64_t result = sub_232E9AA4C(a1, a2);
    if (!v3)
    {
      long long v10 = v18[11];
      a3[10] = v18[10];
      a3[11] = v10;
      long long v11 = v18[13];
      a3[12] = v18[12];
      a3[13] = v11;
      long long v12 = v18[7];
      a3[6] = v18[6];
      a3[7] = v12;
      long long v13 = v18[9];
      a3[8] = v18[8];
      a3[9] = v13;
      long long v14 = v18[3];
      a3[2] = v18[2];
      a3[3] = v14;
      long long v15 = v18[5];
      a3[4] = v18[4];
      a3[5] = v15;
      long long v16 = v18[1];
      *a3 = v18[0];
      a3[1] = v16;
    }
  }
  else
  {
    sub_232F3DC5C();
    swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(unsigned char *)(v17 + 8) = 3;
    swift_willThrow();
    return sub_232E9AA4C(a1, a2);
  }
  return result;
}

uint64_t sub_232F3C104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v90 = a1;
  uint64_t v2 = sub_23309B3D0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_23309B3E0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3CAE0(&v73);
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  unsigned int v70 = v9;
  uint64_t v71 = v5;
  uint64_t v65 = v7;
  uint64_t v64 = v6;
  uint64_t v62 = v3;
  uint64_t v63 = v2;
  long long v10 = v73;
  uint64_t v69 = *((void *)&v74 + 1);
  uint64_t v66 = v74;
  uint64_t v11 = *((void *)&v75 + 1);
  uint64_t v60 = v75;
  swift_bridgeObjectRelease();
  sub_23309AB30();
  swift_allocObject();
  uint64_t v72 = sub_23309AB20();
  uint64_t v61 = v10;
  long long v84 = v10;
  uint64_t v68 = *((void *)&v10 + 1);
  uint64_t v82 = 45;
  unint64_t v83 = 0xE100000000000000;
  uint64_t v80 = 43;
  unint64_t v81 = 0xE100000000000000;
  sub_232F379FC();
  *(void *)&long long v84 = sub_23309BD50();
  *((void *)&v84 + 1) = v12;
  uint64_t v82 = 95;
  unint64_t v83 = 0xE100000000000000;
  uint64_t v80 = 47;
  unint64_t v81 = 0xE100000000000000;
  uint64_t v13 = sub_23309BD50();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  *(void *)&long long v73 = v13;
  *((void *)&v73 + 1) = v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 & 3;
  if (v16 <= 0) {
    uint64_t v17 = -(-v16 & 3);
  }
  if (v17 == 3 || v17 == 2)
  {
    sub_23309B880();
    uint64_t v18 = (uint64_t)v71;
    uint64_t v19 = (uint64_t)v70;
  }
  else
  {
    uint64_t v18 = (uint64_t)v71;
    uint64_t v19 = (uint64_t)v70;
    if (v17)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      swift_allocError();
      *unsigned int v20 = 0;
      v20[1] = 0;
LABEL_11:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v67 = v11;
  long long v21 = v73;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_23309AFC0();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    _OWORD *v25 = v21;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_232F3F108();
  sub_23309AB10();
  sub_232F3F15C(v22, v24);
  uint64_t v27 = v69;
  *(void *)&long long v84 = v66;
  *((void *)&v84 + 1) = v69;
  uint64_t v82 = 45;
  unint64_t v83 = 0xE100000000000000;
  uint64_t v80 = 43;
  unint64_t v81 = 0xE100000000000000;
  *(void *)&long long v84 = sub_23309BD50();
  *((void *)&v84 + 1) = v28;
  uint64_t v82 = 95;
  unint64_t v83 = 0xE100000000000000;
  uint64_t v80 = 47;
  unint64_t v81 = 0xE100000000000000;
  uint64_t v29 = sub_23309BD50();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  *(void *)&long long v73 = v29;
  *((void *)&v73 + 1) = v31;
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v33 = v32 & 3;
  if (v32 <= 0) {
    uint64_t v33 = -(-v32 & 3);
  }
  if (v33 == 3)
  {
    sub_23309B880();
    uint64_t v34 = v65;
  }
  else
  {
    uint64_t v34 = v65;
    if (v33 == 2)
    {
      sub_23309B880();
    }
    else if (v33)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      swift_allocError();
      *uint64_t v35 = 0;
      v35[1] = 0;
LABEL_23:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  long long v36 = v73;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_23309AFC0();
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    _OWORD *v40 = v36;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  if (v89)
  {
    sub_232E9A9F4(v37, v39);
    uint64_t v41 = v37;
    unint64_t v42 = v39;
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v19, *MEMORY[0x263F8CE20], v64);
    uint64_t v43 = v62;
    uint64_t v44 = v63;
    (*(void (**)(uint64_t, void, uint64_t))(v62 + 104))(v18, *MEMORY[0x263F8CE08], v63);
    uint64_t v45 = sub_23305BE00(v19, v18, v37, v39);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    uint64_t v71 = (char *)v45;
    uint64_t v47 = v18;
    unint64_t v49 = v48;
    v46(v47, v44);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v19, v64);
    uint64_t v41 = (uint64_t)v71;
    unint64_t v42 = v49;
  }
  sub_232F3F170();
  sub_232F3F220();
  sub_23309AB10();
  swift_release();
  sub_232F3F15C(v37, v39);
  uint64_t result = sub_232E9AA4C(v41, v42);
  char v50 = v85;
  uint64_t v51 = v86;
  uint64_t v52 = v87;
  char v53 = v89;
  long long v54 = v78;
  uint64_t v55 = v90;
  *(_OWORD *)(v90 + 144) = v77;
  *(_OWORD *)(v55 + 160) = v54;
  *(_OWORD *)(v55 + 176) = v79[0];
  *(_OWORD *)(v55 + 185) = *(_OWORD *)((char *)v79 + 9);
  long long v56 = v74;
  *(_OWORD *)(v55 + 80) = v73;
  *(_OWORD *)(v55 + 96) = v56;
  long long v57 = v76;
  *(_OWORD *)(v55 + 112) = v75;
  *(_OWORD *)(v55 + 128) = v57;
  *(unsigned char *)(v55 + 16) = v50;
  *(void *)(v55 + 24) = v51;
  *(void *)(v55 + 32) = v52;
  *(_OWORD *)(v55 + 40) = v88;
  *(unsigned char *)(v55 + 56) = v53;
  uint64_t v58 = v68;
  *(void *)uint64_t v55 = v61;
  *(void *)(v55 + 8) = v58;
  *(void *)(v55 + 64) = v66;
  *(void *)(v55 + 72) = v27;
  uint64_t v59 = v67;
  *(void *)(v55 + 208) = v60;
  *(void *)(v55 + 216) = v59;
  return result;
}

uint64_t sub_232F3CAE0@<X0>(void *a1@<X8>)
{
  sub_232F379FC();
  uint64_t v2 = sub_23309BD90();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v27 = (void *)MEMORY[0x263F8EE78];
    sub_232F39748(0, v3, 0);
    uint64_t v4 = v27;
    unint64_t v5 = (uint64_t *)(v2 + 56);
    do
    {
      uint64_t v6 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v8 = *(v5 - 1);
      uint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v10 = MEMORY[0x237DB57D0](v6, v7, v8, v9);
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      unint64_t v14 = v27[2];
      unint64_t v13 = v27[3];
      if (v14 >= v13 >> 1) {
        sub_232F39748(v13 > 1, v14 + 1, 1);
      }
      v27[2] = v14 + 1;
      uint64_t v15 = &v27[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v5 += 4;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = v4[2];
  if (v16 == 3)
  {
    uint64_t v19 = v4[4];
    uint64_t v21 = v4[5];
    uint64_t v20 = v4[6];
    uint64_t v23 = v4[7];
    uint64_t v17 = v4[8];
    uint64_t v24 = v4[9];
    swift_bridgeObjectRetain();
    uint64_t v22 = v23;
    uint64_t v18 = v24;
    goto LABEL_12;
  }
  if (v16 == 2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = v4[4];
    uint64_t v20 = v4[6];
    uint64_t v21 = v4[5];
    uint64_t v22 = v4[7];
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v19;
    a1[1] = v21;
    a1[2] = v20;
    a1[3] = v22;
    a1[4] = v17;
    a1[5] = v18;
    return result;
  }
  swift_bridgeObjectRelease();
  sub_232F3DC5C();
  swift_allocError();
  *(void *)uint64_t v26 = v16;
  *(unsigned char *)(v26 + 8) = 1;
  return swift_willThrow();
}

void *sub_232F3CCE0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_268757058, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_232F3E7A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_232F3CE10(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F038();
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_232F3E990(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_232F3CF1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570C8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName, type metadata accessor for ModelsDSTU2.HumanName, type metadata accessor for ModelsDSTU2.HumanName);
}

void *sub_232F3CF54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_2687570B8, (uint64_t)&type metadata for ModelsDSTU2.Patient, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_232F3E898(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_232F3D0A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570D8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName, type metadata accessor for ModelsR4.HumanName, type metadata accessor for ModelsR4.HumanName);
}

void *sub_232F3D0D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_2687570D0, (uint64_t)&type metadata for ModelsR4.Patient, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 152);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[19 * v8 + 4]) {
          memmove(v12, a4 + 4, 152 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_232F3EABC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_232F3D224(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_268757128, MEMORY[0x263F8D120], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_232F3EBB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_232F3D354(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_2687570F8, MEMORY[0x263F8D6C8], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_232F3ECA4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_232F3D484(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_232F3F278(0, &qword_2687570F0, (uint64_t)&type metadata for JSON, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_232F3ED90(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_232F3D5C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570A8, (void (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(void))type metadata accessor for Attachment, (uint64_t (*)(void))type metadata accessor for Attachment);
}

uint64_t sub_232F3D600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570A0, (void (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(void))type metadata accessor for Coding, (uint64_t (*)(void))type metadata accessor for Coding);
}

uint64_t sub_232F3D638(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570E8, MEMORY[0x263F07508], MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

uint64_t sub_232F3D670(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_232F3D6A8(a1, a2, a3, a4, &qword_2687570B0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent, type metadata accessor for ModelsR4.DocumentReferenceContent, type metadata accessor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_232F3D6A8(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, void (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_232F3EE88(0, a5, a6);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = sub_23309BF60();
    __break(1u);
    return result;
  }
  v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_232F3EEDC(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

void *sub_232F3D930(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_232F3F278(0, (unint64_t *)&qword_2687570E0, MEMORY[0x263F8E778], MEMORY[0x263F8E0F8]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_232F3D9B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_23309B900();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x237DB5900](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_232F3DA34(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_232F3DD94(a1, a2, a3);
}

unint64_t sub_232F3DA4C()
{
  unint64_t result = qword_268757068;
  if (!qword_268757068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757068);
  }
  return result;
}

unint64_t sub_232F3DAA0()
{
  unint64_t result = qword_268757070;
  if (!qword_268757070)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757070);
  }
  return result;
}

unsigned __int8 *sub_232F3DAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_23309B940();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_232F3E2B8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_23309BEE0();
  }
LABEL_7:
  uint64_t v11 = sub_232F3DD94(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t sub_232F3DBE0()
{
  unint64_t result = qword_268757090;
  if (!qword_268757090)
  {
    sub_232F3F278(255, &qword_268757088, MEMORY[0x263F8D120], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757090);
  }
  return result;
}

unint64_t sub_232F3DC5C()
{
  unint64_t result = qword_268757098;
  if (!qword_268757098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757098);
  }
  return result;
}

uint64_t sub_232F3DCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_23309B940();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_232F3E2B8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)sub_23309BEE0();
  }
LABEL_7:
  unsigned __int16 v11 = (unsigned __int16)sub_232F3E010(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

unsigned __int8 *sub_232F3DD94(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_232F3E010(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_232F3E2B8()
{
  unint64_t v0 = sub_23309B950();
  uint64_t v4 = sub_232F3E338(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_232F3E338(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_232F3E490(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = sub_232F3D930(v9, 0);
      unint64_t v12 = sub_232F3E590((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_23309BEE0();
LABEL_4:
        JUMPOUT(0x237DB5830);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x237DB5830](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x237DB5830]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t sub_232F3E490(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_232F3D9B8(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_232F3D9B8(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t sub_232F3E590(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_232F3D9B8(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_23309B8E0();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = sub_23309BEE0();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_232F3D9B8(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_23309B8B0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_232F3E7A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3E898(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3E990(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_232F3F278(0, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3EABC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 152 * a1 + 32;
    unint64_t v6 = a3 + 152 * v4;
    if (v5 >= v6 || v5 + 152 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3EBB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

char *sub_232F3ECA4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_23309BFD0();
  __break(1u);
  return result;
}

uint64_t sub_232F3ED90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

void sub_232F3EE88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309C1F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_232F3EEDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

void sub_232F3F038()
{
  if (!qword_2687570C0)
  {
    sub_232F3F278(255, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687570C0);
    }
  }
}

unint64_t sub_232F3F0B4()
{
  unint64_t result = qword_268757100;
  if (!qword_268757100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757100);
  }
  return result;
}

unint64_t sub_232F3F108()
{
  unint64_t result = qword_268757108;
  if (!qword_268757108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757108);
  }
  return result;
}

uint64_t sub_232F3F15C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_232E9AA4C(a1, a2);
  }
  return a1;
}

void sub_232F3F170()
{
  if (!qword_268757110)
  {
    sub_232F3F1CC();
    unint64_t v0 = type metadata accessor for SignedClinicalDataJWTPayload();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757110);
    }
  }
}

unint64_t sub_232F3F1CC()
{
  unint64_t result = qword_268757118;
  if (!qword_268757118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757118);
  }
  return result;
}

unint64_t sub_232F3F220()
{
  unint64_t result = qword_268757120;
  if (!qword_268757120)
  {
    sub_232F3F170();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757120);
  }
  return result;
}

void sub_232F3F278(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKSignedClinicalDataQRRepresentation.isEUDCC()()
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  if (objc_msgSend(v0, sel_sourceType) != (id)2) {
    goto LABEL_13;
  }
  v12[0] = 0;
  id v1 = objc_msgSend(v0, sel_orderedSegmentsWithError_, v12);
  id v2 = v12[0];
  if (!v1)
  {
    id v8 = v12[0];
    sub_23309AEC0();

    swift_willThrow();
    return v8 & 1;
  }
  unint64_t v3 = v1;
  sub_232F3FB1C();
  unint64_t v4 = sub_23309B9A0();
  id v5 = v2;

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_23309BF80();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_23309BF80();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_5;
      }
    }
    goto LABEL_12;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    LOBYTE(v8) = 0;
    return v8 & 1;
  }
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x237DB5EA0](0, v4);
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v6 = *(id *)(v4 + 32);
  }
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v7, sel_dataValue);
  sub_23309B710();

  LOBYTE(v8) = sub_23309B910();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id HKSignedClinicalDataQRRepresentation.asSignedClinicalDataEUDCCData()()
{
  v31[5] = *(id *)MEMORY[0x263EF8340];
  Swift::Bool v2 = HKSignedClinicalDataQRRepresentation.isEUDCC()();
  if (!v3)
  {
    if (!v2)
    {
LABEL_11:
      sub_232F3DA4C();
      swift_allocError();
      *(void *)uint64_t v13 = 2;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
LABEL_12:
      *(unsigned char *)(v13 + 40) = 4;
LABEL_14:
      swift_willThrow();
      return v1;
    }
    v31[0] = 0;
    id v4 = objc_msgSend(v0, sel_orderedSegmentsWithError_, v31);
    id v5 = v31[0];
    if (!v4)
    {
      id v14 = v31[0];
      sub_23309AEC0();

      goto LABEL_14;
    }
    id v1 = v4;
    sub_232F3FB1C();
    unint64_t v6 = sub_23309B9A0();
    id v7 = v5;

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_23309BF80();
      swift_bridgeObjectRelease();
      if (v30)
      {
LABEL_6:
        if ((v6 & 0xC000000000000001) != 0)
        {
          id v8 = (id)MEMORY[0x237DB5EA0](0, v6);
        }
        else
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          id v8 = *(id *)(v6 + 32);
        }
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        id v1 = objc_msgSend(v9, sel_dataValue);

        uint64_t v10 = sub_23309B710();
        unint64_t v12 = v11;

        if (sub_23309B810() < 4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_23309B810();
        swift_bridgeObjectRelease();
        if (!__OFSUB__(v16, 4))
        {
          unint64_t v17 = sub_232F3FCC4(v16 - 4, v10, v12);
          uint64_t v19 = v18;
          uint64_t v21 = v20;
          uint64_t v23 = v22;
          swift_bridgeObjectRelease();
          unint64_t v24 = MEMORY[0x237DB57D0](v17, v19, v21, v23);
          unint64_t v26 = v25;
          swift_bridgeObjectRelease();
          uint64_t v27 = sub_232FFB588(v24, v26);
          unint64_t v29 = v28;
          swift_bridgeObjectRelease();
          sub_232E9A9F4(v27, v29);
          id v1 = (id)sub_23305B438(1, v27, v29);
          sub_232E9AA4C(v27, v29);
          sub_232E9AA4C(v27, v29);
          return v1;
        }
LABEL_22:
        __break(1u);
      }
    }
    else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_232F3DA4C();
    swift_allocError();
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 32) = 0;
    goto LABEL_12;
  }
  return v1;
}

uint64_t sub_232F3F978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_232F3FBD8(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_232F3FB5C(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x232F3FAECLL);
  }
LABEL_16:
  uint64_t v14 = sub_23309B000();
  uint64_t v16 = v15;
  uint64_t result = sub_232E9AA4C(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

unint64_t sub_232F3FB1C()
{
  unint64_t result = qword_268757080;
  if (!qword_268757080)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268757080);
  }
  return result;
}

uint64_t sub_232F3FB5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x232F3FBC8);
  }
  return result;
}

uint64_t sub_232F3FBD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x232F3FCA4);
  }
  return result;
}

unint64_t sub_232F3FCC4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = sub_23309B840();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }
  return sub_23309B950();
}

uint64_t sub_232F3FD80(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_232F3FDD0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

id sub_232F3FDE8()
{
  uint64_t v1 = sub_23309B1F0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  char v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23309B190();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
  sub_232F40368();
  uint64_t v10 = (void *)sub_23309B990();
  id v11 = objc_msgSend(v9, sel_initWithCodings_, v10);

  id v12 = objc_msgSend(v0, sel_startDate);
  sub_23309B160();

  id v13 = objc_msgSend(v0, sel_UUID);
  sub_23309B1D0();

  uint64_t v14 = (void *)sub_23309B130();
  uint64_t v15 = (void *)sub_23309B1C0();
  id v16 = objc_msgSend(self, sel_itemWithPrimaryConceptCodingCollection_relevantDate_medicalRecordSampleID_, v11, v14, v15);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v16;
}

id sub_232F40038(void *a1)
{
  id v1 = a1;
  id v2 = sub_232F3FDE8();

  return v2;
}

id sub_232F4007C()
{
  uint64_t v1 = sub_23309B1F0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  char v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23309B190();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_232F40368();
  sub_23309B9A0();

  id v10 = objc_allocWithZone(MEMORY[0x263F0A4A8]);
  id v11 = (void *)sub_23309B990();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v10, sel_initWithCodings_, v11);

  id v13 = objc_msgSend(v0, sel_sortDate);
  id v14 = objc_msgSend(v13, sel_date);

  sub_23309B160();
  id v15 = objc_msgSend(v0, sel_UUID);
  sub_23309B1D0();

  id v16 = (void *)sub_23309B130();
  unint64_t v17 = (void *)sub_23309B1C0();
  id v18 = objc_msgSend(self, sel_itemWithPrimaryConceptCodingCollection_relevantDate_medicalRecordSampleID_, v12, v16, v17);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v18;
}

id sub_232F40324(void *a1)
{
  id v1 = a1;
  id v2 = sub_232F4007C();

  return v2;
}

unint64_t sub_232F40368()
{
  unint64_t result = qword_268757138;
  if (!qword_268757138)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268757138);
  }
  return result;
}

uint64_t SignedClinicalDataFileContent.VCContent.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C450();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v28, v28[3]);
    uint64_t v5 = sub_23309C230();
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    unint64_t v9 = 0xE000000000000000;
    *(void *)&v27[0] = 0;
    *((void *)&v27[0] + 1) = 0xE000000000000000;
    if ((v6 & 0x2000000000000000) != 0) {
      uint64_t v10 = HIBYTE(v6) & 0xF;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      uint64_t v29 = v3;
      swift_bridgeObjectRetain();
      uint64_t v11 = 0;
      while ((v8 & 0x1000000000000000) == 0)
      {
        if ((v8 & 0x2000000000000000) != 0)
        {
          *(void *)&v26[0] = v7;
          *((void *)&v26[0] + 1) = v8 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)v26 + v11);
          if (*((char *)v26 + v11) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                id v14 = (char *)v26 + v11;
LABEL_23:
                uint64_t v17 = 2;
                if ((v14[1] & 0x3F | ((v13 & 0x1F) << 6)) == 0x2E) {
                  goto LABEL_7;
                }
                break;
              case 0x1Bu:
                id v18 = (char *)v26 + v11;
LABEL_28:
                uint64_t v17 = 3;
                if ((((v13 & 0xF) << 12) | ((v18[1] & 0x3F) << 6) | v18[2] & 0x3F) == 0x2E) {
                  goto LABEL_7;
                }
                break;
              case 0x1Cu:
                uint64_t v19 = (char *)v26 + v11;
LABEL_31:
                uint64_t v17 = 4;
                if ((((v13 & 0xF) << 18) | ((v19[1] & 0x3F) << 12) | ((v19[2] & 0x3F) << 6) | v19[3] & 0x3F) == 0x2E) {
                  goto LABEL_7;
                }
                break;
              default:
                goto LABEL_19;
            }
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v7 & 0x1000000000000000) == 0) {
            uint64_t v12 = sub_23309BEE0();
          }
          int v13 = *(unsigned __int8 *)(v12 + v11);
          if (*(char *)(v12 + v11) < 0)
          {
            switch(__clz(v13 ^ 0xFF))
            {
              case 0x1Au:
                id v14 = (char *)(v11 + v12);
                goto LABEL_23;
              case 0x1Bu:
                id v18 = (char *)(v11 + v12);
                goto LABEL_28;
              case 0x1Cu:
                uint64_t v19 = (char *)(v11 + v12);
                goto LABEL_31;
              default:
                break;
            }
          }
        }
LABEL_19:
        uint64_t v17 = 1;
        if (v13 == 46) {
          goto LABEL_7;
        }
LABEL_8:
        v11 += v17;
        if (v11 >= v10)
        {
          swift_bridgeObjectRelease();
          unint64_t v9 = *((void *)&v27[0] + 1);
          unint64_t v20 = *(void *)&v27[0];
          uint64_t v3 = v29;
          goto LABEL_34;
        }
      }
      int v15 = sub_23309BE30();
      uint64_t v17 = v16;
      if (v15 != 46) {
        goto LABEL_8;
      }
LABEL_7:
      sub_23309B7D0();
      goto LABEL_8;
    }
    unint64_t v20 = 0;
LABEL_34:
    uint64_t v21 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v21 = v20;
    }
    uint64_t v22 = 7;
    if (((v9 >> 60) & ((v20 & 0x800000000000000) == 0)) != 0) {
      uint64_t v22 = 11;
    }
    unint64_t v23 = sub_232F41510(0xFuLL, v22 | (v21 << 16), v20, v9);
    swift_bridgeObjectRelease();
    if (v23 == 2)
    {
      sub_232F3C104((uint64_t)v27);
      v26[10] = v27[10];
      v26[11] = v27[11];
      v26[12] = v27[12];
      v26[13] = v27[13];
      v26[6] = v27[6];
      v26[7] = v27[7];
      v26[8] = v27[8];
      v26[9] = v27[9];
      v26[2] = v27[2];
      v26[3] = v27[3];
      v26[4] = v27[4];
      v26[5] = v27[5];
      v26[0] = v27[0];
      v26[1] = v27[1];
      nullsub_1(v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      sub_232F41778(v26, a2);
    }
    else
    {
      sub_232F41724();
      swift_allocError();
      *unint64_t v24 = v7;
      v24[1] = v8;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1(v3);
}

uint64_t SignedClinicalDataFileContent.VCContent.encode(to:)(void *a1)
{
  sub_232F41778(v1, v6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  sub_232F41778(v6, &v7);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_232F41808();
  sub_232F419AC();
  sub_23309C290();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t SignedClinicalDataFileContent.VCContent.getJWT()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_232F41778(v2, v12);
  sub_232F41778(v12, v13);
  long long v4 = v13[11];
  a1[10] = v13[10];
  a1[11] = v4;
  long long v5 = v13[13];
  a1[12] = v13[12];
  a1[13] = v5;
  long long v6 = v13[7];
  a1[6] = v13[6];
  a1[7] = v6;
  long long v7 = v13[9];
  a1[8] = v13[8];
  a1[9] = v7;
  long long v8 = v13[3];
  a1[2] = v13[2];
  a1[3] = v8;
  long long v9 = v13[5];
  a1[4] = v13[4];
  a1[5] = v9;
  long long v10 = v13[1];
  *a1 = v13[0];
  a1[1] = v10;
  return sub_232F41A04((uint64_t)v13);
}

uint64_t sub_232F408F4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataFileContent.VCContent.init(from:)(a1, a2);
}

uint64_t sub_232F4090C(void *a1)
{
  sub_232F41778(v1, v6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  sub_232F41778(v6, &v7);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_232F41808();
  sub_232F419AC();
  sub_23309C290();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t SignedClinicalDataFileContent.verifiableCredential.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_232F40A14()
{
  return 0xD000000000000014;
}

uint64_t sub_232F40A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F429F8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_232F40A5C(uint64_t a1)
{
  unint64_t v2 = sub_232F41B24();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F40A98(uint64_t a1)
{
  unint64_t v2 = sub_232F41B24();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SignedClinicalDataFileContent.encode(to:)(void *a1)
{
  sub_232F41BCC(0, &qword_268757168, (uint64_t (*)(void))sub_232F41B24, (uint64_t)&type metadata for SignedClinicalDataFileContent.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F41B24();
  sub_23309C480();
  v10[3] = v8;
  sub_232F42B08(0, &qword_268757178, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, MEMORY[0x263F8D488]);
  sub_232F41C34(&qword_268757180, (void (*)(void))sub_232F41B78);
  sub_23309C1B0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataFileContent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = a2;
  sub_232F41BCC(0, &qword_268757190, (uint64_t (*)(void))sub_232F41B24, (uint64_t)&type metadata for SignedClinicalDataFileContent.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F41B24();
  sub_23309C460();
  if (!v2)
  {
    long long v9 = v12;
    sub_232F42B08(0, &qword_268757178, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, MEMORY[0x263F8D488]);
    sub_232F41C34(&qword_268757198, (void (*)(void))sub_232F41CC4);
    sub_23309C0E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    void *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_232F40EC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SignedClinicalDataFileContent.init(from:)(a1, a2);
}

uint64_t sub_232F40EE0(void *a1)
{
  return SignedClinicalDataFileContent.encode(to:)(a1);
}

_OWORD *SignedClinicalDataFileContent.VCContent.asProcessingContext(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  sub_232F41D18();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41778(v2, v17);
  sub_232F41778(v17, v18);
  v16[10] = v24;
  v16[11] = v25;
  v16[12] = v26;
  v16[13] = v27;
  v16[6] = v20;
  v16[7] = v21;
  v16[8] = v22;
  v16[9] = v23;
  v16[2] = v18[2];
  v16[3] = v18[3];
  v16[4] = v18[4];
  v16[5] = v19;
  v16[0] = v18[0];
  v16[1] = v18[1];
  sub_232F41A04((uint64_t)v18);
  long long v9 = v16;
  uint64_t v10 = sub_232F410E8();
  if (!v3)
  {
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    long long v14 = v19;
    sub_232F41E94(a1, (uint64_t)v8);
    objc_allocWithZone(MEMORY[0x263F45C30]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v9 = sub_232F412FC(v12, v13, 1, (uint64_t)v8, v14, *((uint64_t *)&v14 + 1), 0, 0, 0, 0xF000000000000000, 0, a2);
  }
  sub_232F41D70((uint64_t)v17);
  return v9;
}

uint64_t sub_232F410E8()
{
  id v1 = v0;
  uint64_t v2 = sub_23309B760();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[1];
  uint64_t v14 = *v0;
  uint64_t v15 = v6;
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRelease();
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  sub_232F42A80((uint64_t)(v1 + 26), (uint64_t)v16);
  sub_232F42A80((uint64_t)v16, (uint64_t)v17);
  if (v17[1])
  {
    uint64_t v14 = v7;
    uint64_t v15 = v8;
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRelease();
  }
  sub_23309B750();
  uint64_t v9 = sub_23309B720();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 >> 60 == 15)
  {
    sub_232F3DC5C();
    swift_allocError();
    *(void *)uint64_t v12 = 1;
    *(unsigned char *)(v12 + 8) = 3;
    swift_willThrow();
  }
  return v9;
}

id sub_232F412FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = (void *)sub_23309B010();
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  long long v19 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a4, 1, v17) != 1)
  {
    long long v19 = (void *)sub_23309AF10();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a4, v17);
  }
  if (a6)
  {
    long long v20 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    unint64_t v21 = a10;
    if (a8)
    {
LABEL_5:
      long long v22 = (void *)sub_23309B6E0();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    long long v20 = 0;
    unint64_t v21 = a10;
    if (a8) {
      goto LABEL_5;
    }
  }
  long long v22 = 0;
LABEL_8:
  if (v21 >> 60 != 15)
  {
    long long v23 = (void *)sub_23309B010();
    sub_232F3F15C(a9, v21);
    uint64_t v24 = a11;
    if (a12) {
      goto LABEL_10;
    }
LABEL_12:
    long long v25 = 0;
    goto LABEL_13;
  }
  long long v23 = 0;
  uint64_t v24 = a11;
  if (!a12) {
    goto LABEL_12;
  }
LABEL_10:
  sub_232F3A564();
  long long v25 = (void *)sub_23309B640();
  swift_bridgeObjectRelease();
LABEL_13:
  id v26 = objc_msgSend(v29, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v16, a3, v19, v20, v22, v23, v24, v25);
  sub_232E9AA4C(a1, a2);

  return v26;
}

unint64_t sub_232F41510(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_232F428E8(a1, a3, a4);
  unint64_t result = sub_232F428E8(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_23309B7B0();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_23309BEE0();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_23309B7C0();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_23309BEE0();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_232F41724()
{
  unint64_t result = qword_268757140;
  if (!qword_268757140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757140);
  }
  return result;
}

_OWORD *sub_232F41778(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  long long v3 = a1[2];
  long long v4 = a1[3];
  long long v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  long long v6 = a1[6];
  long long v7 = a1[7];
  long long v8 = a1[9];
  a2[8] = a1[8];
  a2[9] = v8;
  a2[6] = v6;
  a2[7] = v7;
  long long v9 = a1[10];
  long long v10 = a1[11];
  long long v11 = a1[13];
  a2[12] = a1[12];
  a2[13] = v11;
  a2[10] = v9;
  a2[11] = v10;
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_232F41808()
{
  if (!qword_268757148)
  {
    sub_232F41BCC(255, (unint64_t *)&qword_268757110, (uint64_t (*)(void))sub_232F3F1CC, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
    sub_232F418C8();
    sub_232F4191C();
    unint64_t v0 = type metadata accessor for VCJWT();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757148);
    }
  }
}

unint64_t sub_232F418C8()
{
  unint64_t result = qword_268757150;
  if (!qword_268757150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757150);
  }
  return result;
}

unint64_t sub_232F4191C()
{
  unint64_t result = qword_268757158;
  if (!qword_268757158)
  {
    sub_232F41BCC(255, (unint64_t *)&qword_268757110, (uint64_t (*)(void))sub_232F3F1CC, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757158);
  }
  return result;
}

unint64_t sub_232F419AC()
{
  unint64_t result = qword_268757160;
  if (!qword_268757160)
  {
    sub_232F41808();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757160);
  }
  return result;
}

uint64_t sub_232F41A04(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_232F41ADC();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_232F41ADC()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_232F41B24()
{
  unint64_t result = qword_268757170;
  if (!qword_268757170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757170);
  }
  return result;
}

unint64_t sub_232F41B78()
{
  unint64_t result = qword_268757188;
  if (!qword_268757188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757188);
  }
  return result;
}

void sub_232F41BCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_232F41C34(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F42B08(255, &qword_268757178, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, MEMORY[0x263F8D488]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_232F41CC4()
{
  unint64_t result = qword_2687571A0;
  if (!qword_2687571A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687571A0);
  }
  return result;
}

void sub_232F41D18()
{
  if (!qword_268756520)
  {
    sub_23309AF80();
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756520);
    }
  }
}

uint64_t sub_232F41D70(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232F41E4C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_232F41E4C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F41E94(uint64_t a1, uint64_t a2)
{
  sub_232F41D18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent()
{
  return &type metadata for SignedClinicalDataFileContent;
}

uint64_t destroy for SignedClinicalDataFileContent.VCContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_232F41E4C();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v9 = *(void **)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  uint64_t v11 = *(void *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 176);
  uint64_t v17 = *(void *)(a2 + 192);
  uint64_t v18 = *(void *)(a2 + 184);
  char v16 = *(unsigned char *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v9;
  sub_232F41ADC();
  *(void *)(a1 + 160) = v10;
  *(void *)(a1 + 168) = v11;
  *(void *)(a1 + 176) = v12;
  *(void *)(a1 + 184) = v18;
  *(void *)(a1 + 192) = v17;
  *(unsigned char *)(a1 + 200) = v16;
  uint64_t v14 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v4;
  uint64_t v5 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a2 + 152);
  uint64_t v8 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v7;
  id v9 = v7;

  uint64_t v10 = *(void *)(a2 + 160);
  uint64_t v11 = *(void *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 184);
  uint64_t v14 = *(void *)(a2 + 192);
  char v15 = *(unsigned char *)(a2 + 200);
  sub_232F41ADC();
  *(void *)(a1 + 160) = v10;
  *(void *)(a1 + 168) = v11;
  *(void *)(a1 + 176) = v12;
  *(void *)(a1 + 184) = v13;
  *(void *)(a1 + 192) = v14;
  *(unsigned char *)(a1 + 200) = v15;
  sub_232F41E4C();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  swift_bridgeObjectRelease();
  id v9 = *(void **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);

  uint64_t v10 = *(void *)(a2 + 192);
  char v11 = *(unsigned char *)(a2 + 200);
  long long v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(void *)(a1 + 192) = v10;
  *(unsigned char *)(a1 + 200) = v11;
  sub_232F41E4C();
  uint64_t v13 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataFileContent.VCContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFileContent.VCContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent.VCContent()
{
  return &type metadata for SignedClinicalDataFileContent.VCContent;
}

void *initializeBufferWithCopyOfBuffer for SignedClinicalDataFileError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SignedClinicalDataFileError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SignedClinicalDataFileError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for SignedClinicalDataFileError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataFileError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFileError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileError()
{
  return &type metadata for SignedClinicalDataFileError;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataFileContent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x232F42694);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent.CodingKeys()
{
  return &type metadata for SignedClinicalDataFileContent.CodingKeys;
}

unint64_t sub_232F426D0()
{
  unint64_t result = qword_2687571A8;
  if (!qword_2687571A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687571A8);
  }
  return result;
}

unint64_t sub_232F42728()
{
  unint64_t result = qword_2687571B0;
  if (!qword_2687571B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687571B0);
  }
  return result;
}

unint64_t sub_232F42780()
{
  unint64_t result = qword_2687571B8;
  if (!qword_2687571B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687571B8);
  }
  return result;
}

unint64_t sub_232F427D4(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_23309BEE0();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

unint64_t sub_232F428E8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_232F42988(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_232F427D4(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_232F42988(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_232F3D9B8(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_232F429F8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000002330B52F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_23309C220();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_232F42A80(uint64_t a1, uint64_t a2)
{
  sub_232F42B08(0, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D310], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_232F42B08(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t *sub_232F42B58(uint64_t a1, uint64_t a2)
{
  if (a2 == 2) {
    return (unint64_t *)HKSignedClinicalDataQRRepresentation.asSignedClinicalDataEUDCCData()();
  }
  if (a2 == 1) {
    return HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()();
  }
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_23309B4B0();
  __swift_project_value_buffer(v3, (uint64_t)qword_268770F68);
  uint64_t v4 = sub_23309B4A0();
  os_log_type_t v5 = sub_23309BB80();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = v7;
    *(_DWORD *)uint64_t v6 = 136446466;
    type metadata accessor for HKSignedClinicalDataSourceType(0);
    sub_232F43118();
    uint64_t v8 = sub_23309B770();
    sub_232F62B64(v8, v9, &v10);
    sub_23309BD10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2050;
    sub_23309BD10();
    _os_log_impl(&dword_232E63000, v4, v5, "%{public}s unable to create processable data from QR representation, source type %{public}ld is not supported", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v7, -1, -1);
    MEMORY[0x237DB6EC0](v6, -1, -1);
  }

  type metadata accessor for HDHRExtractionError(0);
  sub_232F54C28(MEMORY[0x263F8EE78]);
  sub_232F43240((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  sub_23309AEA0();
  return (unint64_t *)swift_willThrow();
}

uint64_t sub_232F42DB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a3 == 2)
  {
    a4[3] = (uint64_t)&type metadata for SignedClinicalDataEUDCC;
    a4[4] = (uint64_t)&protocol witness table for SignedClinicalDataEUDCC;
    a4[5] = (uint64_t)&off_26E6AC060;
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = v12 + 16;
    *a4 = v12;
    sub_232E9A9F4(a1, a2);
    uint64_t result = SignedClinicalDataEUDCC.init(from:)(a1, a2, v13);
    if (!v4) {
      return result;
    }
    return __swift_deallocate_boxed_opaque_existential_2((uint64_t)a4);
  }
  if (a3 == 1)
  {
    sub_232F41808();
    a4[3] = v8;
    a4[4] = (uint64_t)&protocol witness table for VCJWT<A, B>;
    a4[5] = (uint64_t)&off_26E6A90F0;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = (_OWORD *)(v9 + 16);
    *a4 = v9;
    sub_232E9A9F4(a1, a2);
    uint64_t result = sub_232F3BFB8(a1, a2, v10);
    if (!v4) {
      return result;
    }
    return __swift_deallocate_boxed_opaque_existential_2((uint64_t)a4);
  }
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_23309B4B0();
  __swift_project_value_buffer(v14, (uint64_t)qword_268770F68);
  char v15 = sub_23309B4A0();
  os_log_type_t v16 = sub_23309BB80();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    type metadata accessor for HKSignedClinicalDataSourceType(0);
    sub_232F43118();
    uint64_t v19 = sub_23309B770();
    sub_232F62B64(v19, v20, &v21);
    sub_23309BD10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2050;
    sub_23309BD10();
    _os_log_impl(&dword_232E63000, v15, v16, "%{public}s unable to create processable from raw data, source type %{public}ld is not supported", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v18, -1, -1);
    MEMORY[0x237DB6EC0](v17, -1, -1);
  }

  type metadata accessor for HDHRExtractionError(0);
  sub_232F54C28(MEMORY[0x263F8EE78]);
  sub_232F43240((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  sub_23309AEA0();
  return swift_willThrow();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_232F43118()
{
  unint64_t result = qword_2687571C8;
  if (!qword_2687571C8)
  {
    type metadata accessor for HKSignedClinicalDataSourceType(255);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687571C8);
  }
  return result;
}

uint64_t sub_232F43154()
{
  sub_232E9AA4C(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_232E9AA4C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_232E9AA4C(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E9AA4C(*(void *)(v0 + 224), *(void *)(v0 + 232));
  return MEMORY[0x270FA0238](v0, 240, 7);
}

uint64_t __swift_deallocate_boxed_opaque_existential_2(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x237DB6EC0);
  }
  return result;
}

uint64_t sub_232F43240(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232F43288()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_232F41E4C();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 240, 7);
}

uint64_t sub_232F4330C()
{
  return sub_23309C420();
}

uint64_t sub_232F43394(char *a1, char *a2)
{
  return sub_233034D74(*a1, *a2);
}

uint64_t sub_232F433A0()
{
  return sub_232F4330C();
}

uint64_t sub_232F433A8()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F4341C()
{
  return sub_233036F64();
}

uint64_t sub_232F43424@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_232F43484(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000011;
  }
  else {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000002330ADB70;
  if (*v1) {
    unint64_t v3 = 0x80000002330ADB90;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_232F434C8(void *a1@<X8>)
{
  *a1 = &unk_26E69DBA0;
}

id HealthRecordsExtractionRouter.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id HealthRecordsExtractionRouter.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractionRouter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HealthRecordsExtractionRouter.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractionRouter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_232F4363C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_232F436DC(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_232F437C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_23309B710();
  uint64_t v9 = v8;
  if (v7 == sub_23309B710() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = sub_23309C220();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000002330ADB70 || (sub_23309C220() & 1) != 0) {
    return (uint64_t)objc_msgSend(a4, sel_isClinicalNoteRecord);
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000002330ADB90) {
    return 1;
  }
  return sub_23309C220();
}

uint64_t sub_232F43930()
{
  uint64_t v0 = sub_23309B710();
  uint64_t v2 = v1;
  if (v0 == sub_23309B710() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v5 = sub_23309C220();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      return MEMORY[0x263F8EE88];
    }
  }
  uint64_t v24 = MEMORY[0x263F8EE88];
  sub_2330386BC(&v23, 0);
  sub_2330386BC(&v23, 1);
  uint64_t v7 = v24;
  int64_t v8 = *(void *)(v24 + 16);
  if (v8)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_232F39748(0, v8, 0);
    uint64_t v9 = v23;
    uint64_t result = sub_232F4363C(v7);
    int64_t v10 = result;
    int v12 = v11;
    char v14 = v13 & 1;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(v7 + 32))
    {
      if (((*(void *)(v7 + 56 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_27;
      }
      if (*(_DWORD *)(v7 + 36) != v12) {
        goto LABEL_28;
      }
      if (*(unsigned char *)(*(void *)(v7 + 48) + v10)) {
        unint64_t v15 = 0xD000000000000011;
      }
      else {
        unint64_t v15 = 0xD000000000000010;
      }
      if (*(unsigned char *)(*(void *)(v7 + 48) + v10)) {
        unint64_t v16 = 0x80000002330ADB90;
      }
      else {
        unint64_t v16 = 0x80000002330ADB70;
      }
      uint64_t v23 = v9;
      unint64_t v18 = *(void *)(v9 + 16);
      unint64_t v17 = *(void *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_232F39748(v17 > 1, v18 + 1, 1);
        uint64_t v9 = v23;
      }
      *(void *)(v9 + 16) = v18 + 1;
      uint64_t v19 = v9 + 16 * v18;
      *(void *)(v19 + 32) = v15;
      *(void *)(v19 + 40) = v16;
      uint64_t result = sub_232F436DC(v10, v12, v14 & 1, v7);
      int64_t v10 = result;
      int v12 = v20;
      char v14 = v21 & 1;
      if (!--v8)
      {
        sub_232F43C20(result, v20, v21 & 1);
        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
LABEL_25:
    uint64_t v22 = sub_23303BDBC(v9);
    swift_bridgeObjectRelease();
    return v22;
  }
  return result;
}

uint64_t type metadata accessor for HealthRecordsExtractionRouter()
{
  return self;
}

uint64_t method lookup function for HealthRecordsExtractionRouter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HealthRecordsExtractionRouter);
}

uint64_t dispatch thunk of HealthRecordsExtractionRouter.supportedResourceTypes(release:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t sub_232F43C20(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FHIRResourceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F43CF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FHIRResourceType()
{
  return &type metadata for FHIRResourceType;
}

unint64_t sub_232F43D34()
{
  unint64_t result = qword_2687571D0;
  if (!qword_2687571D0)
  {
    sub_232F43D8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687571D0);
  }
  return result;
}

void sub_232F43D8C()
{
  if (!qword_2687571D8)
  {
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687571D8);
    }
  }
}

unint64_t sub_232F43DE8()
{
  unint64_t result = qword_2687571E0[0];
  if (!qword_2687571E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2687571E0);
  }
  return result;
}

uint64_t VCJWT.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14 = sub_23309B760();
  MEMORY[0x270FA5388](v14 - 8);
  sub_23309B750();
  uint64_t v15 = sub_23309B730();
  if (v16)
  {
    VCJWT.init(from:)(v15, a3, a4, a5, a6, a7);
  }
  else
  {
    sub_232F3DC5C();
    swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(unsigned char *)(v17 + 8) = 3;
    swift_willThrow();
  }
  return sub_232E9AA4C(a1, a2);
}

uint64_t VCJWT.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v98 = a4;
  uint64_t v99 = a5;
  uint64_t v92 = a6;
  uint64_t v95 = a3;
  uint64_t v90 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  id v91 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v96 = (char *)&v75 - v9;
  uint64_t v10 = sub_23309B3D0();
  uint64_t v94 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_23309B3E0();
  uint64_t v93 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = a2;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v75 - v21;
  uint64_t v23 = v112;
  static VCJWT.split(jwt:)(&v106);
  if (v23) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v80 = v16;
  unint64_t v81 = v12;
  uint64_t v84 = v13;
  uint64_t v112 = 0;
  uint64_t v24 = v10;
  unint64_t v79 = v20;
  uint64_t v25 = v98;
  char v85 = v22;
  uint64_t v82 = v17;
  uint64_t v27 = v106;
  uint64_t v26 = v107;
  uint64_t v83 = v108;
  uint64_t v88 = v109;
  uint64_t v78 = v110;
  uint64_t v87 = v111;
  swift_bridgeObjectRelease();
  sub_23309AB30();
  swift_allocObject();
  uint64_t v89 = sub_23309AB20();
  uint64_t v104 = v27;
  uint64_t v105 = v26;
  uint64_t v86 = v26;
  uint64_t v102 = 45;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 43;
  unint64_t v101 = 0xE100000000000000;
  sub_232F379FC();
  uint64_t v104 = sub_23309BD50();
  uint64_t v105 = v28;
  uint64_t v102 = 95;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 47;
  unint64_t v101 = 0xE100000000000000;
  uint64_t v29 = sub_23309BD50();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t v106 = v29;
  uint64_t v107 = v31;
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v33 = v32 & 3;
  if (v32 <= 0) {
    uint64_t v33 = -(-v32 & 3);
  }
  if (v33 == 3 || v33 == 2)
  {
    sub_23309B880();
  }
  else if (v33)
  {
    swift_bridgeObjectRelease();
    sub_232F3F0B4();
    swift_allocError();
    *uint64_t v34 = 0;
    v34[1] = 0;
LABEL_11:
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v77 = v27;
  uint64_t v35 = v106;
  uint64_t v36 = v107;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_23309AFC0();
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    uint64_t *v40 = v35;
    v40[1] = v36;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = v112;
  sub_23309AB10();
  uint64_t v112 = v42;
  if (v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_232F3F15C(v37, v39);
  }
  sub_232F3F15C(v37, v39);
  uint64_t v104 = v83;
  uint64_t v105 = v88;
  uint64_t v102 = 45;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 43;
  unint64_t v101 = 0xE100000000000000;
  uint64_t v104 = sub_23309BD50();
  uint64_t v105 = v43;
  uint64_t v102 = 95;
  unint64_t v103 = 0xE100000000000000;
  uint64_t v100 = 47;
  unint64_t v101 = 0xE100000000000000;
  uint64_t v44 = sub_23309BD50();
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  uint64_t v106 = v44;
  uint64_t v107 = v46;
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_23309B810();
  swift_bridgeObjectRelease();
  uint64_t v48 = v47 & 3;
  if (v47 <= 0) {
    uint64_t v48 = -(-v47 & 3);
  }
  if (v48 == 3)
  {
    sub_23309B880();
    uint64_t v49 = v97;
    uint64_t v50 = v84;
  }
  else
  {
    uint64_t v49 = v97;
    uint64_t v50 = v84;
    if (v48 == 2)
    {
      sub_23309B880();
    }
    else if (v48)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      swift_allocError();
      *uint64_t v51 = 0;
      v51[1] = 0;
LABEL_25:
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v52 = v106;
  uint64_t v53 = v107;
  swift_bridgeObjectRetain();
  uint64_t v54 = sub_23309AFC0();
  unint64_t v56 = v55;
  swift_bridgeObjectRelease();
  if (v56 >> 60 == 15)
  {
    sub_232F3F0B4();
    swift_allocError();
    *long long v57 = v52;
    v57[1] = v53;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 48))(&v106, v49, v25);
  if (v106)
  {
    sub_232E9A9F4(v54, v56);
    uint64_t v58 = v54;
    unint64_t v59 = v56;
  }
  else
  {
    uint64_t v60 = v54;
    uint64_t v61 = v93;
    uint64_t v62 = (uint64_t)v80;
    (*(void (**)(char *, void, uint64_t))(v93 + 104))(v80, *MEMORY[0x263F8CE20], v50);
    uint64_t v63 = v94;
    uint64_t v64 = (uint64_t)v81;
    (*(void (**)(char *, void, uint64_t))(v94 + 104))(v81, *MEMORY[0x263F8CE08], v24);
    uint64_t v76 = v60;
    uint64_t v65 = v112;
    uint64_t v66 = sub_23305BE00(v62, v64, v60, v56);
    uint64_t v112 = v65;
    if (v65)
    {
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v24);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v84);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v97);
      sub_232F3F15C(v76, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    unint64_t v68 = v67;
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    uint64_t v94 = v66;
    uint64_t v70 = v24;
    unint64_t v59 = v68;
    v69(v64, v70);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v84);
    uint64_t v49 = v97;
    uint64_t v54 = v76;
    uint64_t v58 = v94;
  }
  uint64_t v71 = v95;
  uint64_t v72 = v112;
  sub_23309AB10();
  uint64_t v112 = v72;
  if (v72)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_232F3F15C(v54, v56);
    sub_232E9AA4C(v58, v59);
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v85, v49);
  }
  else
  {
    swift_release();
    sub_232F3F15C(v54, v56);
    sub_232E9AA4C(v58, v59);
    uint64_t v73 = (uint64_t)v79;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v79, v85, v49);
    uint64_t v74 = (uint64_t)v91;
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v91, v96, v71);
    return VCJWT.init(header:payload:headerString:payloadString:signatureString:)(v73, v74, v77, v86, v83, v88, v78, v87, v92, v49, v71);
  }
}

uint64_t VCJWT.dataValue()()
{
  uint64_t v0 = sub_23309B760();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  VCJWT.stringValue()();
  sub_23309B750();
  uint64_t v4 = sub_23309B720();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    sub_232F3DC5C();
    swift_allocError();
    *(void *)uint64_t v7 = 1;
    *(unsigned char *)(v7 + 8) = 3;
    swift_willThrow();
  }
  return v4;
}

uint64_t VCJWT.headerString.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWT.header.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t VCJWT.payloadString.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VCJWT.payload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t VCJWT.signatureString.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VCJWT.init(header:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v67 = a6;
  uint64_t v64 = a7;
  uint64_t v77 = a4;
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v63 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_23309AC20();
  uint64_t v68 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v65 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_23309AB60();
  MEMORY[0x270FA5388](v18 - 8);
  sub_23309ABA0();
  swift_allocObject();
  sub_23309AB90();
  sub_23309AB40();
  sub_23309AB70();
  uint64_t v19 = v69;
  uint64_t v20 = sub_23309AB80();
  if (v19)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v70, v77);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  }
  else
  {
    long long v57 = v16;
    uint64_t v58 = a5;
    uint64_t v60 = v14;
    uint64_t v61 = v10;
    uint64_t v62 = a1;
    uint64_t v69 = a3;
    uint64_t v22 = v20;
    unint64_t v59 = v21;
    uint64_t v75 = sub_23309B020();
    uint64_t v76 = v23;
    uint64_t v24 = v65;
    sub_23309ABB0();
    sub_232F379FC();
    uint64_t v25 = sub_23309BD40();
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v68 + 8);
    v68 += 8;
    unint64_t v56 = v28;
    v28(v24, v66);
    swift_bridgeObjectRelease();
    uint64_t v75 = v25;
    uint64_t v76 = v27;
    uint64_t v73 = 43;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 45;
    unint64_t v72 = 0xE100000000000000;
    uint64_t v29 = sub_23309BD50();
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v75 = v29;
    uint64_t v76 = v31;
    uint64_t v73 = 47;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 95;
    unint64_t v72 = 0xE100000000000000;
    uint64_t v32 = sub_23309BD50();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    sub_232E9AA4C(v22, v59);
    uint64_t v54 = sub_23309AB80();
    unint64_t v53 = v35;
    uint64_t v75 = sub_23309B020();
    uint64_t v76 = v36;
    uint64_t v37 = v65;
    sub_23309ABB0();
    unint64_t v59 = 0;
    uint64_t v55 = v34;
    uint64_t v38 = sub_23309BD40();
    uint64_t v40 = v39;
    v56(v37, v66);
    swift_bridgeObjectRelease();
    uint64_t v75 = v38;
    uint64_t v76 = v40;
    uint64_t v68 = v32;
    uint64_t v73 = 43;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 45;
    unint64_t v72 = 0xE100000000000000;
    uint64_t v41 = sub_23309BD50();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v75 = v41;
    uint64_t v76 = v43;
    uint64_t v73 = 47;
    unint64_t v74 = 0xE100000000000000;
    uint64_t v71 = 95;
    unint64_t v72 = 0xE100000000000000;
    uint64_t v44 = sub_23309BD50();
    uint64_t v46 = v45;
    swift_release();
    swift_bridgeObjectRelease();
    sub_232E9AA4C(v54, v53);
    uint64_t v47 = (uint64_t)v57;
    uint64_t v48 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v57, v62, v69);
    uint64_t v49 = (uint64_t)v63;
    uint64_t v50 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v63, v70, v77);
    return VCJWT.init(header:payload:headerString:payloadString:signatureString:)(v47, v49, v68, v55, v44, v46, 0, 0, v64, v48, v50);
  }
}

uint64_t VCJWT.init(header:payload:headerString:payloadString:signatureString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = (int *)type metadata accessor for VCJWT();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(&a9[v18[13]], a1, a10);
  *(void *)a9 = a3;
  *((void *)a9 + 1) = a4;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(&a9[v18[15]], a2, a11);
  uint64_t v20 = &a9[v18[14]];
  *(void *)uint64_t v20 = a5;
  *((void *)v20 + 1) = a6;
  unint64_t v21 = &a9[v18[16]];
  *(void *)unint64_t v21 = a7;
  *((void *)v21 + 1) = a8;
  return result;
}

uint64_t static VCJWT.split(jwt:)@<X0>(void *a1@<X8>)
{
  sub_232F379FC();
  uint64_t v2 = sub_23309BD90();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v27 = (void *)MEMORY[0x263F8EE78];
    sub_232F39748(0, v3, 0);
    uint64_t v4 = v27;
    unint64_t v5 = (uint64_t *)(v2 + 56);
    do
    {
      uint64_t v6 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v8 = *(v5 - 1);
      uint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v10 = MEMORY[0x237DB57D0](v6, v7, v8, v9);
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      unint64_t v14 = v27[2];
      unint64_t v13 = v27[3];
      if (v14 >= v13 >> 1) {
        sub_232F39748(v13 > 1, v14 + 1, 1);
      }
      v27[2] = v14 + 1;
      uint64_t v15 = &v27[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v5 += 4;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = v4[2];
  if (v16 == 2)
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v18 = v4[4];
    uint64_t v20 = v4[6];
    uint64_t v17 = v4[5];
    uint64_t v23 = v4[7];
    goto LABEL_12;
  }
  if (v16 == 3)
  {
    uint64_t v18 = v4[4];
    uint64_t v17 = v4[5];
    uint64_t v20 = v4[6];
    uint64_t v19 = v4[7];
    uint64_t v22 = v4[8];
    uint64_t v21 = v4[9];
    swift_bridgeObjectRetain();
    uint64_t v23 = v19;
    uint64_t v24 = v21;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v20;
    a1[3] = v23;
    a1[4] = v22;
    a1[5] = v24;
    return result;
  }
  swift_bridgeObjectRelease();
  sub_232F3DC5C();
  swift_allocError();
  *(void *)uint64_t v26 = v16;
  *(unsigned char *)(v26 + 8) = 1;
  return swift_willThrow();
}

Swift::String __swiftcall VCJWT.stringValue()()
{
  uint64_t v2 = v0;
  Swift::String v4 = VCJWT.headerAndPayload()();
  uint64_t countAndFlagsBits = v4._countAndFlagsBits;
  object = v4._object;
  if (*(void *)(v1 + *(int *)(v2 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
  }
  uint64_t v6 = object;
  result._object = v6;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String __swiftcall VCJWT.headerAndPayload()()
{
  uint64_t v4 = *v0;
  unint64_t v5 = (void *)v0[1];
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRelease();
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t VCJWT.signature()(uint64_t a1)
{
  if (*(void *)(v1 + *(int *)(a1 + 64) + 8))
  {
    sub_232F379FC();
    sub_23309BD50();
    uint64_t v3 = sub_23309BD50();
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    uint64_t v15 = v3;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_23309B810();
    swift_bridgeObjectRelease();
    uint64_t v7 = v6 & 3;
    if (v6 <= 0) {
      uint64_t v7 = -(-v6 & 3);
    }
    if (v7 == 3 || v7 == 2)
    {
      sub_23309B880();
    }
    else if (v7)
    {
      swift_bridgeObjectRelease();
      sub_232F3F0B4();
      uint64_t v2 = swift_allocError();
      void *v8 = 0;
      v8[1] = 0;
LABEL_12:
      swift_willThrow();
      sub_232F3DC5C();
      swift_allocError();
      char v10 = 0;
      *(void *)uint64_t v9 = v2;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_23309AFC0();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    if (v12 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
    sub_232F3F0B4();
    uint64_t v2 = swift_allocError();
    *unint64_t v13 = v15;
    v13[1] = v5;
    goto LABEL_12;
  }
  sub_232F3DC5C();
  swift_allocError();
  char v10 = 3;
  *(void *)uint64_t v9 = 3;
LABEL_13:
  *(unsigned char *)(v9 + 8) = v10;
  swift_willThrow();
  return v2;
}

uint64_t VCJWT.signatureMessage()()
{
  uint64_t v0 = sub_23309B760();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  VCJWT.headerAndPayload()();
  sub_23309B750();
  uint64_t v4 = sub_23309B720();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    sub_232F3DC5C();
    swift_allocError();
    *(void *)uint64_t v7 = 1;
    *(unsigned char *)(v7 + 8) = 3;
    swift_willThrow();
  }
  return v4;
}

uint64_t VCJWT.assigningSignature(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v35 = *(void *)(a2 + 24);
  uint64_t v36 = a3;
  uint64_t v34 = *(void *)(v35 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v32 = *(void *)(v8 + 16);
  uint64_t v33 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_23309AC20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_23309B020();
  uint64_t v42 = v14;
  sub_23309ABB0();
  sub_232F379FC();
  uint64_t v15 = sub_23309BD40();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease();
  uint64_t v41 = v15;
  uint64_t v42 = v17;
  uint64_t v39 = 43;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v37 = 45;
  unint64_t v38 = 0xE100000000000000;
  uint64_t v18 = sub_23309BD50();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v41 = v18;
  uint64_t v42 = v20;
  uint64_t v39 = 47;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v37 = 95;
  unint64_t v38 = 0xE100000000000000;
  uint64_t v21 = sub_23309BD50();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t)v30;
  uint64_t v25 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v30, (char *)v4 + *(int *)(a2 + 52), v32);
  uint64_t v26 = (uint64_t)v33;
  uint64_t v27 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v33, (char *)v4 + *(int *)(a2 + 60), v35);
  VCJWT.init(header:payload:headerString:payloadString:signatureString:)(v24, v26, *v4, v4[1], *(uint64_t *)((char *)v4 + *(int *)(a2 + 56)), *(uint64_t *)((char *)v4 + *(int *)(a2 + 56) + 8), v21, v23, v36, v25, v27);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static VCJWT.== infix(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_23309C220(), result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = type metadata accessor for VCJWT();
    if ((sub_23309B6D0() & 1) == 0) {
      return 0;
    }
    uint64_t v8 = *(int *)(v7 + 56);
    uint64_t v9 = *(void *)((char *)a1 + v8);
    uint64_t v10 = *(void *)((char *)a1 + v8 + 8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    BOOL v12 = v9 == *v11 && v10 == v11[1];
    if (v12 || (char v13 = sub_23309C220(), result = 0, (v13 & 1) != 0))
    {
      if (sub_23309B6D0())
      {
        uint64_t v14 = *(int *)(v7 + 64);
        uint64_t v15 = (void *)((char *)a1 + v14);
        uint64_t v16 = *(void *)((char *)a1 + v14 + 8);
        uint64_t v17 = (void *)((char *)a2 + v14);
        uint64_t v18 = v17[1];
        if (v16)
        {
          if (v18)
          {
            BOOL v19 = *v15 == *v17 && v16 == v18;
            if (v19 || (sub_23309C220() & 1) != 0) {
              return 1;
            }
          }
        }
        else if (!v18)
        {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_232F4602C(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_232F4603C()
{
  return sub_23309C3E0();
}

uint64_t sub_232F46064(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7453726564616568 && a2 == 0xEC000000676E6972;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5364616F6C796170 && a2 == 0xED0000676E697274 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xEF676E6972745365)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_232F462DC()
{
  return sub_23309C420();
}

uint64_t sub_232F46324(char a1)
{
  uint64_t result = 0x7453726564616568;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x726564616568;
      break;
    case 2:
      uint64_t result = 0x5364616F6C796170;
      break;
    case 3:
      uint64_t result = 0x64616F6C796170;
      break;
    case 4:
      uint64_t result = 0x727574616E676973;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_232F463F0(char *a1, char *a2)
{
  return sub_232F4602C(*a1, *a2);
}

uint64_t sub_232F46408()
{
  return sub_232F462DC();
}

uint64_t sub_232F46418()
{
  return sub_232F4603C();
}

uint64_t sub_232F46428()
{
  return sub_23309C420();
}

uint64_t sub_232F46474()
{
  return sub_232F46324(*v0);
}

uint64_t sub_232F46484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F46064(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F464B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232F47E48();
  *a1 = result;
  return result;
}

uint64_t sub_232F464EC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_232F46540(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t VCJWT.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[5];
  uint64_t v13 = a2[4];
  uint64_t v14 = v3;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  v12[1] = v4;
  id v12[2] = v5;
  uint64_t v17 = v13;
  uint64_t v18 = v5;
  type metadata accessor for VCJWT.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = sub_23309C1D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C480();
  LOBYTE(v15) = 0;
  uint64_t v10 = v19;
  sub_23309C170();
  if (!v10)
  {
    LOBYTE(v15) = 1;
    sub_23309C1B0();
    LOBYTE(v15) = 2;
    sub_23309C170();
    LOBYTE(v15) = 3;
    sub_23309C1B0();
    LOBYTE(v15) = 4;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t VCJWT.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a6;
  uint64_t v46 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v44 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v15;
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  uint64_t v56 = v18;
  type metadata accessor for VCJWT.CodingKeys();
  swift_getWitnessTable();
  uint64_t v52 = sub_23309C100();
  uint64_t v47 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v20 = (char *)v40 - v19;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v45 = a3;
  uint64_t v50 = a4;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v43 = a5;
  uint64_t v21 = type metadata accessor for VCJWT();
  uint64_t v41 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (void *)((char *)v40 - v22);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v51 = v20;
  uint64_t v24 = (uint64_t)v57;
  sub_23309C460();
  if (v24) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v26 = v48;
  uint64_t v25 = v49;
  long long v57 = a1;
  LOBYTE(v53) = 0;
  *uint64_t v23 = sub_23309C0A0();
  v23[1] = v27;
  LOBYTE(v53) = 1;
  sub_23309C0E0();
  v40[1] = a2;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v23 + *(int *)(v21 + 52), v26, a2);
  LOBYTE(v53) = 2;
  uint64_t v28 = sub_23309C0A0();
  uint64_t v50 = 0;
  uint64_t v29 = v21;
  uint64_t v30 = (uint64_t *)((char *)v23 + *(int *)(v21 + 56));
  *uint64_t v30 = v28;
  v30[1] = v31;
  LOBYTE(v53) = 3;
  uint64_t v32 = v44;
  uint64_t v33 = v45;
  sub_23309C0E0();
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))((char *)v23 + *(int *)(v29 + 60), v32, v33);
  LOBYTE(v53) = 4;
  uint64_t v34 = sub_23309C040();
  uint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v52);
  uint64_t v37 = (uint64_t *)((char *)v23 + *(int *)(v29 + 64));
  *uint64_t v37 = v34;
  v37[1] = v36;
  uint64_t v38 = v41;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v41 + 16))(v42, v23, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 8))(v23, v29);
}

uint64_t sub_232F46DA4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return VCJWT.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_232F46DC8(void *a1, void *a2)
{
  return VCJWT.encode(to:)(a1, a2);
}

uint64_t sub_232F46DE0(void *a1, void *a2)
{
  return static VCJWT.== infix(_:_:)(a1, a2);
}

uint64_t sub_232F46DF0(uint64_t a1)
{
  return VCJWT.signature()(a1);
}

uint64_t sub_232F46E08()
{
  return VCJWT.signatureMessage()();
}

uint64_t type metadata accessor for VCJWT()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for VCJWT.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of VCJWTHeader.alg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VCJWTHeader.kid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of VCJWTHeader.zip.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of VCJWTPayload.nbf.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VCJWTPayload.exp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_232F46EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t sub_232F46EFC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_232F46FE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  uint64_t v8 = *(void *)(a3 + 24) - 8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(_DWORD *)(*(void *)v8 + 80);
  uint64_t v11 = *(void *)(*(void *)v8 + 64) + 7;
  if ((v10 | v6) > 7
    || ((*(_DWORD *)(*(void *)v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v11 + ((v10 + ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v27 = *(void *)(a3 + 24);
    uint64_t v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    uint64_t v16 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v17 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v18(v16, v17, v4);
    uint64_t v19 = (void *)((v7 + v16) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v7 + v17) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v19 = *v20;
    v19[1] = v20[1];
    uint64_t v21 = ((unint64_t)v19 + v10 + 16) & ~v10;
    uint64_t v22 = ((unint64_t)v20 + v10 + 16) & ~v10;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v27);
    uint64_t v24 = (void *)((v11 + v21) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)((v11 + v22) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v25;
    v24[1] = v25[1];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_232F47204(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((v7
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  return swift_bridgeObjectRelease();
}

void *sub_232F472F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  uint64_t v8 = *(void *)(v6 - 8) + 16;
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  swift_bridgeObjectRetain();
  v7(v10, v11, v6);
  uint64_t v12 = *(void *)(v8 + 48) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v18 = v16 + 16;
  uint64_t v19 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = ((unint64_t)v13 + v19 + 16) & ~v19;
  uint64_t v21 = ((unint64_t)v14 + v19 + 16) & ~v19;
  swift_bridgeObjectRetain();
  v17(v20, v21, v15);
  uint64_t v22 = *(void *)(v18 + 48) + 7;
  uint64_t v23 = (void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_232F47438(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = ((unint64_t)v12 + v16 + 16) & ~v16;
  uint64_t v18 = ((unint64_t)v13 + v16 + 16) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v17, v18);
  uint64_t v19 = *(void *)(v15 + 40) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_232F4759C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  uint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((unint64_t)v11 + v15 + 16) & ~v15;
  uint64_t v17 = ((unint64_t)v12 + v15 + 16) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  *(_OWORD *)((*(void *)(v14 + 32) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v14 + 32)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_232F476B4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = ((unint64_t)v13 + v17 + 16) & ~v17;
  uint64_t v19 = ((unint64_t)v14 + v17 + 16) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 24) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_232F477F8(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  uint64_t v14 = v10 + 16;
  if (v12 < a2)
  {
    unint64_t v15 = ((*(void *)(*(void *)(v6 - 8) + 64)
          + ((v14 + ((v13 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8)) & ~v10)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v12 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x232F47A00);
      case 4:
        int v19 = *(int *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_25:
        int v21 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v12 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v24 = ((unint64_t)a1 + v9 + 16) & ~v9;
    if (v5 == v12) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
    }
    else {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v14 + ((v13 + v24) & 0xFFFFFFFFFFFFFFF8)) & ~v10, v8, v6);
    }
  }
  else
  {
    unint64_t v23 = *((void *)a1 + 1);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    return (v23 + 1);
  }
}

void sub_232F47A14(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  uint64_t v15 = v11 + 16;
  size_t v16 = ((*(void *)(*(void *)(v8 - 8) + 64)
        + ((v11 + 16 + ((v14 + ((v10 + 16) & ~v10)) & 0xFFFFFFFFFFFFFFF8)) & ~v11)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v13 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v13;
    if (a2 <= v13)
    {
LABEL_20:
      uint64_t v22 = ~v11;
      switch(v20)
      {
        case 1:
          a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v16] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v12 & 0x80000000) != 0)
            {
              unint64_t v25 = (unint64_t)&a1[v10 + 16] & ~v10;
              if (v7 == v13)
              {
                uint64_t v26 = *(void (**)(unint64_t))(v6 + 56);
                v26(v25);
              }
              else
              {
                unint64_t v27 = (v15 + ((v14 + v25) & 0xFFFFFFFFFFFFFFF8)) & v22;
                uint64_t v28 = *(void (**)(unint64_t))(v9 + 56);
                v28(v27);
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v17 = a3 - v13;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
         + ((v11 + 16 + ((v14 + ((v10 + 16) & ~v10)) & 0xFFFFFFF8)) & ~v11)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v18 = v17 + 1;
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v13;
    if (a2 <= v13) {
      goto LABEL_20;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + 16 + ((v14 + ((v10 + 16) & ~v10)) & 0xFFFFFFF8)) & ~v11)
       + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v23 = v21;
  else {
    int v23 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + 16 + ((v14 + ((v10 + 16) & ~v10)) & 0xFFFFFFF8)) & ~v11)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v24 = ~v13 + a2;
    bzero(a1, v16);
    *(_DWORD *)a1 = v24;
  }
  switch(v20)
  {
    case 1:
      a1[v16] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v16] = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x232F47CD0);
    case 4:
      *(_DWORD *)&a1[v16] = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_232F47CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

unsigned char *sub_232F47D00(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F47DCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_232F47DF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_232F47E10()
{
  return swift_getWitnessTable();
}

uint64_t sub_232F47E2C()
{
  return swift_getWitnessTable();
}

uint64_t sub_232F47E48()
{
  return 5;
}

uint64_t FHIRDate.year.getter()
{
  return *(void *)v0;
}

uint64_t FHIRDate.year.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*FHIRDate.year.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDate.month.getter()
{
  return *(unsigned __int8 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 9) << 8);
}

uint64_t FHIRDate.month.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  *(unsigned char *)(v1 + 8) = result;
  *(unsigned char *)(v1 + 9) = BYTE1(result) & 1;
  if (((result >> 8) & 1) == 0 && result >= 0xDu)
  {
    *(unsigned char *)(v1 + 8) = v2;
    *(unsigned char *)(v1 + 9) = v3;
  }
  return result;
}

uint64_t *(*FHIRDate.month.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(v1 + 9);
  return sub_232F47F00;
}

uint64_t *sub_232F47F00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 9);
  unsigned int v5 = *((unsigned __int8 *)a1 + 8);
  uint64_t result = a1 + 1;
  unsigned int v4 = v5;
  char v6 = *(unsigned char *)(v1 + 8);
  char v7 = *(unsigned char *)(v1 + 9);
  *(unsigned char *)(v1 + 8) = v5;
  *(unsigned char *)(v1 + 9) = v2;
  if ((v2 & 1) == 0 && v4 >= 0xD)
  {
    *(unsigned char *)(v1 + 8) = v6;
    *(unsigned char *)(v1 + 9) = v7;
  }
  return result;
}

uint64_t FHIRDate.day.getter()
{
  return *(unsigned __int8 *)(v0 + 10) | (*(unsigned __int8 *)(v0 + 11) << 8);
}

uint64_t FHIRDate.day.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 10);
  char v3 = *(unsigned char *)(v1 + 11);
  *(unsigned char *)(v1 + 10) = result;
  *(unsigned char *)(v1 + 11) = BYTE1(result) & 1;
  if (((result >> 8) & 1) == 0 && result >= 0x20u)
  {
    *(unsigned char *)(v1 + 10) = v2;
    *(unsigned char *)(v1 + 11) = v3;
  }
  return result;
}

uint64_t *(*FHIRDate.day.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 10);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(v1 + 11);
  return sub_232F47FB4;
}

uint64_t *sub_232F47FB4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 9);
  unsigned int v5 = *((unsigned __int8 *)a1 + 8);
  uint64_t result = a1 + 1;
  unsigned int v4 = v5;
  char v6 = *(unsigned char *)(v1 + 10);
  char v7 = *(unsigned char *)(v1 + 11);
  *(unsigned char *)(v1 + 10) = v5;
  *(unsigned char *)(v1 + 11) = v2;
  if ((v2 & 1) == 0 && v4 >= 0x20)
  {
    *(unsigned char *)(v1 + 10) = v6;
    *(unsigned char *)(v1 + 11) = v7;
  }
  return result;
}

uint64_t FHIRDate.init(year:month:day:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  if (a2 > 0xCu) {
    int v4 = 1;
  }
  else {
    int v4 = (a2 >> 8) & 1;
  }
  int v5 = v4 | ((unsigned __int16)(a3 & 0x100) >> 8);
  if (a3 > 0x1Fu) {
    int v5 = 1;
  }
  if (v5) {
    char v6 = 0;
  }
  else {
    char v6 = a3;
  }
  *(void *)a4 = result;
  if (v4) {
    char v7 = 0;
  }
  else {
    char v7 = a2;
  }
  *(unsigned char *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 9) = v4;
  *(unsigned char *)(a4 + 10) = v6;
  *(unsigned char *)(a4 + 11) = v5;
  return result;
}

void FHIRDate.init(_:)(uint64_t a1@<X8>)
{
  id v3 = objc_allocWithZone(MEMORY[0x263F08B08]);
  int v4 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithString_, v4);

  uint64_t v6 = sub_232F48C70(v5, 1);
  unsigned int v8 = v7;

  if (!v1)
  {
    int v9 = (v8 >> 8) & 1;
    unsigned int v10 = HIWORD(v8);
    if (v8 > 0xCu) {
      int v9 = 1;
    }
    unsigned int v11 = v9 | ((v8 & 0x1000000) >> 24);
    if (BYTE2(v8) > 0x1Fu) {
      unsigned int v11 = 1;
    }
    if (v11) {
      LOBYTE(v10) = 0;
    }
    *(void *)a1 = v6;
    if (v9) {
      char v12 = 0;
    }
    else {
      char v12 = v8;
    }
    *(unsigned char *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 9) = v9;
    *(unsigned char *)(a1 + 10) = v10;
    *(unsigned char *)(a1 + 11) = v11;
  }
}

uint64_t static FHIRDate.parseComponents(from:expectAtEnd:)(void *a1, int a2)
{
  return sub_232F48C70(a1, a2);
}

uint64_t static FHIRDate.parse(from:expectAtEnd:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_232F48C70(a1, a2);
  if (!v3)
  {
    int v7 = (v6 >> 8) & 1;
    unsigned int v8 = HIWORD(v6);
    if (v6 > 0xCu) {
      int v7 = 1;
    }
    unsigned int v9 = v7 | ((v6 & 0x1000000) >> 24);
    if (BYTE2(v6) > 0x1Fu) {
      unsigned int v9 = 1;
    }
    if (v9) {
      LOBYTE(v8) = 0;
    }
    *(void *)a3 = result;
    if (v7) {
      char v10 = 0;
    }
    else {
      char v10 = v6;
    }
    *(unsigned char *)(a3 + 8) = v10;
    *(unsigned char *)(a3 + 9) = v7;
    *(unsigned char *)(a3 + 10) = v8;
    *(unsigned char *)(a3 + 11) = v9;
  }
  return result;
}

uint64_t FHIRDate.hash(into:)()
{
  char v1 = *(unsigned char *)(v0 + 9);
  char v2 = *(unsigned char *)(v0 + 11);
  sub_23309C3E0();
  if ((v1 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v2 & 1) == 0) {
    sub_23309C3F0();
  }
  return sub_23309C3F0();
}

uint64_t FHIRDate.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 9);
  char v2 = *(unsigned char *)(v0 + 11);
  sub_23309C3D0();
  sub_23309C3E0();
  if ((v1 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v2 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  return sub_23309C420();
}

uint64_t sub_232F48328()
{
  char v1 = *(unsigned char *)(v0 + 9);
  char v2 = *(unsigned char *)(v0 + 11);
  sub_23309C3E0();
  if ((v1 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v2 & 1) == 0) {
    sub_23309C3F0();
  }
  return sub_23309C3F0();
}

uint64_t sub_232F483AC()
{
  char v1 = *(unsigned char *)(v0 + 9);
  char v2 = *(unsigned char *)(v0 + 11);
  sub_23309C3D0();
  sub_23309C3E0();
  if ((v1 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v2 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  return sub_23309C420();
}

void FHIRDate.init(stringLiteral:)(uint64_t a1@<X8>)
{
  id v2 = objc_allocWithZone(MEMORY[0x263F08B08]);
  uint64_t v3 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initWithString_, v3);

  uint64_t v5 = sub_232F48C70(v4, 1);
  unsigned int v7 = v6;

  int v8 = (v7 >> 8) & 1;
  unsigned int v9 = HIWORD(v7);
  if (v7 > 0xCu) {
    int v8 = 1;
  }
  unsigned int v10 = v8 | ((v7 & 0x1000000) >> 24);
  if (BYTE2(v7) > 0x1Fu) {
    unsigned int v10 = 1;
  }
  if (v10) {
    LOBYTE(v9) = 0;
  }
  *(void *)a1 = v5;
  if (v8) {
    char v11 = 0;
  }
  else {
    char v11 = v7;
  }
  *(unsigned char *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 9) = v8;
  *(unsigned char *)(a1 + 10) = v9;
  *(unsigned char *)(a1 + 11) = v10;
}

void sub_232F48568(uint64_t a1@<X8>)
{
}

uint64_t FHIRDate.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C450();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    sub_23309C230();
    id v5 = objc_allocWithZone(MEMORY[0x263F08B08]);
    unsigned int v6 = (void *)sub_23309B6E0();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v5, sel_initWithString_, v6);

    uint64_t v8 = sub_232F48C70(v7, 1);
    unsigned int v10 = v9;

    if (v10 > 0xCu) {
      int v12 = 1;
    }
    else {
      int v12 = (v10 >> 8) & 1;
    }
    if (BYTE2(v10) > 0x1Fu) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = v12 | ((v10 & 0x1000000) >> 24);
    }
    if (v13) {
      char v14 = 0;
    }
    else {
      char v14 = BYTE2(v10);
    }
    if (v12) {
      LOBYTE(v10) = 0;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = v10;
    *(unsigned char *)(a2 + 9) = v12;
    *(unsigned char *)(a2 + 10) = v14;
    *(unsigned char *)(a2 + 11) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRDate.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRDate.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t FHIRDate.description.getter()
{
  uint64_t v1 = *v0;
  if (*((unsigned char *)v0 + 9))
  {
    sub_232F49988(0, &qword_2687572E8, (uint64_t (*)(uint64_t))sub_232F4970C, MEMORY[0x263F8E0F8]);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_2330A1880;
    uint64_t v3 = MEMORY[0x263F8D750];
    *(void *)(v2 + 56) = MEMORY[0x263F8D6C8];
    *(void *)(v2 + 64) = v3;
    *(void *)(v2 + 32) = v1;
  }
  else
  {
    char v4 = *((unsigned char *)v0 + 8);
    char v5 = *((unsigned char *)v0 + 10);
    char v6 = *((unsigned char *)v0 + 11);
    sub_232F49988(0, &qword_2687572E8, (uint64_t (*)(uint64_t))sub_232F4970C, MEMORY[0x263F8E0F8]);
    uint64_t v7 = swift_allocObject();
    if (v6)
    {
      *(_OWORD *)(v7 + 16) = xmmword_2330A1EB0;
      uint64_t v8 = MEMORY[0x263F8D750];
      *(void *)(v7 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v7 + 64) = v8;
      *(void *)(v7 + 32) = v1;
      uint64_t v9 = MEMORY[0x263F8E7C0];
      *(void *)(v7 + 96) = MEMORY[0x263F8E778];
      *(void *)(v7 + 104) = v9;
      *(unsigned char *)(v7 + 72) = v4;
    }
    else
    {
      *(_OWORD *)(v7 + 16) = xmmword_2330A1EA0;
      uint64_t v10 = MEMORY[0x263F8D750];
      *(void *)(v7 + 56) = MEMORY[0x263F8D6C8];
      *(void *)(v7 + 64) = v10;
      uint64_t v11 = MEMORY[0x263F8E778];
      *(void *)(v7 + 32) = v1;
      uint64_t v12 = MEMORY[0x263F8E7C0];
      *(void *)(v7 + 96) = v11;
      *(void *)(v7 + 104) = v12;
      *(unsigned char *)(v7 + 72) = v4;
      *(void *)(v7 + 136) = v11;
      *(void *)(v7 + 144) = v12;
      *(unsigned char *)(v7 + 112) = v5;
    }
  }
  return sub_23309B740();
}

uint64_t sub_232F489B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRDate.init(from:)(a1, a2);
}

uint64_t sub_232F489D0(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  FHIRDate.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_23309C260();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_232F48ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_232F48B14(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))sub_233063D88);
}

uint64_t sub_232F48AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_232F48B14(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))sub_233063EBC);
}

uint64_t sub_232F48AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_232F48B14(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))sub_2330640A0);
}

uint64_t sub_232F48B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  return a5(*(void *)a1, *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 10) << 16) | (*(unsigned __int8 *)(a1 + 9) << 8) | (*(unsigned __int8 *)(a1 + 11) << 24), *(void *)a2, *(unsigned __int8 *)(a2 + 8) | (*(unsigned __int8 *)(a2 + 10) << 16) | (*(unsigned __int8 *)(a2 + 9) << 8) | (*(unsigned __int8 *)(a2 + 11) << 24));
}

uint64_t _s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 9);
  if (*(unsigned char *)(a1 + 9))
  {
    if (!*(unsigned char *)(a2 + 9)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 11))
  {
    if (!*(unsigned char *)(a2 + 11)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10)) {
      char v4 = *(unsigned char *)(a2 + 11);
    }
    else {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t _s23HealthRecordsExtraction8FHIRDateV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < *(void *)a2) {
    return 1;
  }
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 9);
  if (*(unsigned char *)(a1 + 9)) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 8);
  }
  if (v5 >= v3) {
    int v6 = 1;
  }
  else {
    int v6 = *(unsigned __int8 *)(a2 + 9);
  }
  if (v6 != 1) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 9))
  {
    if (!*(unsigned char *)(a2 + 9)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 8) != v3) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 11)) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = *(unsigned __int8 *)(a1 + 10);
  }
  return (*(unsigned __int8 *)(a2 + 10) > v7) & ~*(unsigned __int8 *)(a2 + 11);
}

uint64_t sub_232F48C70(void *a1, int a2)
{
  int v112 = a2;
  uint64_t v3 = sub_23309AC20();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F49988(0, &qword_268757310, MEMORY[0x263F06278], MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v106 = (uint64_t)&v102 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v105 = (char *)&v102 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v107 = (char *)&v102 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v104 = (char *)&v102 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  int v21 = (char *)&v102 - v20;
  MEMORY[0x270FA5388](v19);
  int v23 = (char *)&v102 - v22;
  id v24 = objc_msgSend(a1, sel_charactersToBeSkipped);
  if (v24)
  {
    unint64_t v25 = v24;
    sub_23309ABF0();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v21, 1, 1, v3);
  }
  sub_232F499EC((uint64_t)v21, (uint64_t)v23);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  sub_23309ABC0();
  uint64_t v109 = sub_23309BCC0();
  uint64_t v26 = sub_23309BCD0();
  if (!v27) {
    goto LABEL_16;
  }
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  uint64_t result = sub_23309B810();
  if (result != 4
    || ((uint64_t v31 = HIBYTE(v29) & 0xF, v32 = v28 & 0xFFFFFFFFFFFFLL, (v29 & 0x2000000000000000) != 0)
      ? (uint64_t v33 = HIBYTE(v29) & 0xF)
      : (uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL),
        !v33))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if ((v29 & 0x1000000000000000) != 0)
  {
    uint64_t v36 = (uint64_t)sub_232F3DAF8(v28, v29, 10);
    char v38 = v101;
    goto LABEL_43;
  }
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((v28 & 0x1000000000000000) != 0) {
      uint64_t v34 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v34 = (unsigned __int8 *)sub_23309BEE0();
    }
    uint64_t v35 = v108;
    uint64_t v36 = (uint64_t)sub_232F3DA34(v34, v32, 10);
    uint64_t v108 = v35;
    char v38 = v37 & 1;
LABEL_43:
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0 && v36 >= 1)
    {
      sub_23309BCB0();
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      unint64_t v103 = (char *)v36;
      if (v52)
      {
        uint64_t v53 = sub_23309BCC0();
        uint64_t v54 = sub_23309BCD0();
        if (v55)
        {
          uint64_t v56 = v54;
          unint64_t v57 = v55;
          if (sub_23309B810() == 2)
          {
            __int16 v58 = sub_232F3BBE4(v56, v57);
            if ((v58 & 0x100) == 0)
            {
              int v59 = v58;
              if (v58 - 13 >= 0xFFFFFFF4)
              {
                sub_23309BCB0();
                uint64_t v61 = v60;
                swift_bridgeObjectRelease();
                if (v61)
                {
                  uint64_t v109 = sub_23309BCC0();
                  uint64_t v62 = sub_23309BCD0();
                  if (v63)
                  {
                    uint64_t v64 = v62;
                    unint64_t v65 = v63;
                    if (sub_23309B810() == 2)
                    {
                      __int16 v66 = sub_232F3BBE4(v64, v65);
                      if ((v66 & 0x100) == 0 && v66 - 32 >= 0xFFFFFFE1)
                      {
                        LODWORD(v109) = v66;
                        LODWORD(v107) = 0;
                        goto LABEL_58;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                    }
                  }
                  id v96 = objc_msgSend(a1, sel_string);
                  uint64_t v97 = sub_23309B710();
                  uint64_t v99 = v98;

                  sub_232F49A80();
                  swift_allocError();
                  *(void *)uint64_t v100 = v97;
                  *(void *)(v100 + 8) = v99;
                  *(void *)(v100 + 16) = v109;
                  *(unsigned char *)(v100 + 24) = 3;
                  swift_willThrow();
                  uint64_t v78 = *(void (**)(char *, uint64_t))(v4 + 8);
                  v78(v6, v3);
                  uint64_t v79 = (uint64_t)v23;
                  uint64_t v80 = (uint64_t)v104;
LABEL_64:
                  sub_232F49AD4(v79, v80);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v80, 1, v3) == 1)
                  {
                    uint64_t v45 = 0;
                  }
                  else
                  {
                    uint64_t v45 = (void *)sub_23309ABD0();
                    v78((char *)v80, v3);
                  }
LABEL_19:
                  objc_msgSend(a1, sel_setCharactersToBeSkipped_, v45);

                  sub_232F49B68((uint64_t)v23);
                  return (uint64_t)v23;
                }
                LODWORD(v109) = 0;
LABEL_57:
                LODWORD(v107) = 1;
LABEL_58:
                uint64_t v67 = sub_23309BCC0();
                if (v112 & 1) == 0 || (uint64_t v68 = v67, (objc_msgSend(a1, sel_isAtEnd)))
                {
                  int v112 = v59;
                  uint64_t v69 = *(void (**)(char *, uint64_t))(v4 + 8);
                  v69(v6, v3);
                  uint64_t v70 = (uint64_t)v23;
                  uint64_t v71 = v106;
                  sub_232F49AD4((uint64_t)v23, v106);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v71, 1, v3) == 1)
                  {
                    unint64_t v72 = 0;
                  }
                  else
                  {
                    uint64_t v81 = v71;
                    unint64_t v72 = (void *)sub_23309ABD0();
                    v69((char *)v81, v3);
                  }
                  int v23 = v103;
                  char v82 = (char)v107;
                  objc_msgSend(a1, sel_setCharactersToBeSkipped_, v72);

                  sub_232F49B68(v70);
                  LOBYTE(v110[0]) = v52 == 0;
                  char v111 = v82;
                  return (uint64_t)v23;
                }
                id v83 = objc_msgSend(a1, sel_string);
                uint64_t v84 = sub_23309B710();
                uint64_t v86 = v85;

                sub_232F49A80();
                swift_allocError();
                *(void *)uint64_t v87 = v84;
                *(void *)(v87 + 8) = v86;
                *(void *)(v87 + 16) = v68;
                *(unsigned char *)(v87 + 24) = 10;
                swift_willThrow();
                uint64_t v78 = *(void (**)(char *, uint64_t))(v4 + 8);
                v78(v6, v3);
                uint64_t v79 = (uint64_t)v23;
                uint64_t v80 = (uint64_t)v105;
                goto LABEL_64;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        id v73 = objc_msgSend(a1, sel_string);
        uint64_t v74 = sub_23309B710();
        uint64_t v76 = v75;

        sub_232F49A80();
        swift_allocError();
        *(void *)uint64_t v77 = v74;
        *(void *)(v77 + 8) = v76;
        *(void *)(v77 + 16) = v53;
        *(unsigned char *)(v77 + 24) = 2;
        swift_willThrow();
        uint64_t v78 = *(void (**)(char *, uint64_t))(v4 + 8);
        v78(v6, v3);
        uint64_t v79 = (uint64_t)v23;
        uint64_t v80 = (uint64_t)v107;
        goto LABEL_64;
      }
      LODWORD(v109) = 0;
      int v59 = 0;
      goto LABEL_57;
    }
LABEL_16:
    id v39 = objc_msgSend(a1, sel_string);
    uint64_t v40 = sub_23309B710();
    uint64_t v42 = v41;

    sub_232F49A80();
    swift_allocError();
    *(void *)uint64_t v43 = v40;
    *(void *)(v43 + 8) = v42;
    *(void *)(v43 + 16) = v109;
    *(unsigned char *)(v43 + 24) = 1;
    swift_willThrow();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v4 + 8);
    v44(v6, v3);
    sub_232F49AD4((uint64_t)v23, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
    {
      uint64_t v45 = 0;
    }
    else
    {
      uint64_t v45 = (void *)sub_23309ABD0();
      v44(v10, v3);
    }
    goto LABEL_19;
  }
  v110[0] = v28;
  v110[1] = v29 & 0xFFFFFFFFFFFFFFLL;
  if (v28 == 43)
  {
    if (!v31) {
      goto LABEL_95;
    }
    if (v31 == 1 || (BYTE1(v28) - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v46 = (BYTE1(v28) - 48);
    if (v31 == 2)
    {
LABEL_68:
      char v38 = 0;
      uint64_t v36 = v46;
      goto LABEL_43;
    }
    if ((BYTE2(v28) - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v36 = 10 * (BYTE1(v28) - 48) + (BYTE2(v28) - 48);
    uint64_t v47 = v31 - 3;
    if (v47)
    {
      uint64_t v48 = (unsigned __int8 *)v110 + 3;
      while (1)
      {
        unsigned int v49 = *v48 - 48;
        if (v49 > 9) {
          goto LABEL_42;
        }
        uint64_t v50 = 10 * v36;
        if ((unsigned __int128)(v36 * (__int128)10) >> 64 != (10 * v36) >> 63) {
          goto LABEL_42;
        }
        uint64_t v36 = v50 + v49;
        if (__OFADD__(v50, v49)) {
          goto LABEL_42;
        }
        char v38 = 0;
        ++v48;
        if (!--v47) {
          goto LABEL_43;
        }
      }
    }
LABEL_82:
    char v38 = 0;
    goto LABEL_43;
  }
  if (v28 != 45)
  {
    if (!v31 || (v28 - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v46 = (v28 - 48);
    if (v31 == 1) {
      goto LABEL_68;
    }
    if ((BYTE1(v28) - 48) > 9u) {
      goto LABEL_42;
    }
    uint64_t v36 = 10 * (v28 - 48) + (BYTE1(v28) - 48);
    uint64_t v88 = v31 - 2;
    if (v88)
    {
      uint64_t v89 = (unsigned __int8 *)v110 + 2;
      while (1)
      {
        unsigned int v90 = *v89 - 48;
        if (v90 > 9) {
          goto LABEL_42;
        }
        uint64_t v91 = 10 * v36;
        if ((unsigned __int128)(v36 * (__int128)10) >> 64 != (10 * v36) >> 63) {
          goto LABEL_42;
        }
        uint64_t v36 = v91 + v90;
        if (__OFADD__(v91, v90)) {
          goto LABEL_42;
        }
        char v38 = 0;
        ++v89;
        if (!--v88) {
          goto LABEL_43;
        }
      }
    }
    goto LABEL_82;
  }
  if (v31)
  {
    if (v31 != 1 && (BYTE1(v28) - 48) <= 9u)
    {
      if (v31 == 2)
      {
        char v38 = 0;
        uint64_t v36 = -(uint64_t)(BYTE1(v28) - 48);
        goto LABEL_43;
      }
      if ((BYTE2(v28) - 48) <= 9u)
      {
        uint64_t v36 = -10 * (BYTE1(v28) - 48) - (BYTE2(v28) - 48);
        uint64_t v92 = v31 - 3;
        if (!v92) {
          goto LABEL_82;
        }
        uint64_t v93 = (unsigned __int8 *)v110 + 3;
        while (1)
        {
          unsigned int v94 = *v93 - 48;
          if (v94 > 9) {
            break;
          }
          uint64_t v95 = 10 * v36;
          if ((unsigned __int128)(v36 * (__int128)10) >> 64 != (10 * v36) >> 63) {
            break;
          }
          uint64_t v36 = v95 - v94;
          if (__OFSUB__(v95, v94)) {
            break;
          }
          char v38 = 0;
          ++v93;
          if (!--v92) {
            goto LABEL_43;
          }
        }
      }
    }
LABEL_42:
    uint64_t v36 = 0;
    char v38 = 1;
    goto LABEL_43;
  }
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_232F4970C()
{
  unint64_t result = qword_2687572F0;
  if (!qword_2687572F0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687572F0);
  }
  return result;
}

unint64_t sub_232F49768()
{
  unint64_t result = qword_2687572F8;
  if (!qword_2687572F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687572F8);
  }
  return result;
}

unint64_t sub_232F497C0()
{
  unint64_t result = qword_268757300;
  if (!qword_268757300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757300);
  }
  return result;
}

uint64_t sub_232F49814()
{
  return MEMORY[0x263F8D388];
}

unint64_t sub_232F49824()
{
  unint64_t result = qword_268757308;
  if (!qword_268757308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757308);
  }
  return result;
}

uint64_t sub_232F49878()
{
  return MEMORY[0x263F8D398];
}

uint64_t sub_232F49884()
{
  return MEMORY[0x263F8D390];
}

uint64_t sub_232F49890@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 9);
  *a2 = *(unsigned char *)(result + 8);
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_232F498A4(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2 = *result;
  unsigned __int8 v3 = result[1];
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 9) = v3;
  if ((v3 & 1) == 0 && v2 >= 0xD)
  {
    *(unsigned char *)(a2 + 8) = v4;
    *(unsigned char *)(a2 + 9) = v5;
  }
  return result;
}

uint64_t sub_232F498D4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 11);
  *a2 = *(unsigned char *)(result + 10);
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_232F498E8(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2 = *result;
  unsigned __int8 v3 = result[1];
  char v4 = *(unsigned char *)(a2 + 10);
  char v5 = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a2 + 10) = v2;
  *(unsigned char *)(a2 + 11) = v3;
  if ((v3 & 1) == 0 && v2 >= 0x20)
  {
    *(unsigned char *)(a2 + 10) = v4;
    *(unsigned char *)(a2 + 11) = v5;
  }
  return result;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FHIRDate(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FHIRDate(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FHIRDate()
{
  return &type metadata for FHIRDate;
}

void sub_232F49988(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_232F499EC(uint64_t a1, uint64_t a2)
{
  sub_232F49988(0, &qword_268757310, MEMORY[0x263F06278], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_232F49A80()
{
  unint64_t result = qword_268757318;
  if (!qword_268757318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757318);
  }
  return result;
}

uint64_t sub_232F49AD4(uint64_t a1, uint64_t a2)
{
  sub_232F49988(0, &qword_268757310, MEMORY[0x263F06278], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F49B68(uint64_t a1)
{
  sub_232F49988(0, &qword_268757310, MEMORY[0x263F06278], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of FHIRHumanName.use.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Range.low.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F49C18(v1, a1);
}

uint64_t sub_232F49C18(uint64_t a1, uint64_t a2)
{
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Range.high.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Range() + 20);
  return sub_232F49C18(v3, a1);
}

uint64_t type metadata accessor for Range()
{
  uint64_t result = qword_268757358;
  if (!qword_268757358) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Range.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Quantity();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v15 - v10;
  sub_232F49C18(v1, (uint64_t)&v15 - v10);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v12(v11, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v11, (uint64_t)v5);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v13 = type metadata accessor for Range();
  sub_232F49C18(v1 + *(int *)(v13 + 20), (uint64_t)v9);
  if (v12(v9, 1, v2) == 1) {
    return sub_23309C3F0();
  }
  sub_232F49F68((uint64_t)v9, (uint64_t)v5);
  sub_23309C3F0();
  Quantity.hash(into:)();
  return sub_232F4B484((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Quantity);
}

uint64_t sub_232F49F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Quantity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F49FD0()
{
  if (*v0) {
    return 1751607656;
  }
  else {
    return 7827308;
  }
}

uint64_t sub_232F49FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F4DAE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F4A024(uint64_t a1)
{
  unint64_t v2 = sub_232F4B270();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F4A060(uint64_t a1)
{
  unint64_t v2 = sub_232F4B270();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Range.encode(to:)(void *a1)
{
  sub_232F4B2C4(0, &qword_268757320, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F4B270();
  sub_23309C480();
  v9[15] = 0;
  type metadata accessor for Quantity();
  sub_232F4B5D8(&qword_268756AD8, (void (*)(uint64_t))type metadata accessor for Quantity);
  sub_23309C150();
  if (!v1)
  {
    type metadata accessor for Range();
    v9[14] = 1;
    sub_23309C150();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Range.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Quantity();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v15 - v10;
  sub_23309C3D0();
  sub_232F49C18(v1, (uint64_t)v11);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v12(v11, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v11, (uint64_t)v5);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v13 = type metadata accessor for Range();
  sub_232F49C18(v1 + *(int *)(v13 + 20), (uint64_t)v9);
  if (v12(v9, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v9, (uint64_t)v5);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  return sub_23309C420();
}

uint64_t Range.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  int v23 = (char *)&v20 - v8;
  sub_232F4B2C4(0, &qword_268757330, MEMORY[0x263F8E040]);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = type metadata accessor for Range();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F4B270();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v20 = v13;
  int v21 = v15;
  type metadata accessor for Quantity();
  char v27 = 0;
  sub_232F4B5D8(&qword_2687568A0, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v17 = (uint64_t)v23;
  uint64_t v16 = v24;
  sub_23309C080();
  sub_232F4B328(v17, (uint64_t)v21);
  char v26 = 1;
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v16);
  uint64_t v18 = (uint64_t)v21;
  sub_232F4B328((uint64_t)v7, (uint64_t)&v21[*(int *)(v20 + 20)]);
  sub_232F4B420(v18, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_232F4B484(v18, (uint64_t (*)(void))type metadata accessor for Range);
}

uint64_t sub_232F4A82C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Range.init(from:)(a1, a2);
}

uint64_t sub_232F4A844(void *a1)
{
  return Range.encode(to:)(a1);
}

uint64_t sub_232F4A860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for Quantity();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  sub_232F49C18(v4, (uint64_t)&v17 - v13);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v15(v14, 1, v5) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v14, (uint64_t)v8);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  sub_232F49C18(v4 + *(int *)(a2 + 20), (uint64_t)v12);
  if (v15(v12, 1, v5) == 1) {
    return sub_23309C3F0();
  }
  sub_232F49F68((uint64_t)v12, (uint64_t)v8);
  sub_23309C3F0();
  Quantity.hash(into:)();
  return sub_232F4B484((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Quantity);
}

uint64_t sub_232F4AAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - v12;
  sub_23309C3D0();
  sub_232F49C18(v2, (uint64_t)v13);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v14(v13, 1, v4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v13, (uint64_t)v7);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  sub_232F49C18(v2 + *(int *)(a2 + 20), (uint64_t)v11);
  if (v14(v11, 1, v4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F49F68((uint64_t)v11, (uint64_t)v7);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F4B484((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  return sub_23309C420();
}

BOOL _s23HealthRecordsExtraction5RangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v45 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F4DBB4();
  uint64_t v8 = v7;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v50 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v42[-v11];
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v47 = &v42[-v18];
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v48 = &v42[-v20];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  int v23 = &v42[-v22];
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  char v26 = &v42[-v25];
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = &v42[-v27];
  uint64_t v46 = a1;
  sub_232F49C18(a1, (uint64_t)&v42[-v27]);
  uint64_t v49 = a2;
  sub_232F49C18(a2, (uint64_t)v26);
  uint64_t v29 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_232F49C18((uint64_t)v28, (uint64_t)v12);
  sub_232F49C18((uint64_t)v26, v29);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v30((uint64_t)v12, 1, v4) != 1)
  {
    sub_232F49C18((uint64_t)v12, (uint64_t)v23);
    if (v30(v29, 1, v4) != 1)
    {
      uint64_t v44 = v16;
      uint64_t v32 = v45;
      sub_232F49F68(v29, (uint64_t)v45);
      int v43 = static Quantity.== infix(_:_:)(v23, v32);
      uint64_t v33 = (uint64_t)v32;
      uint64_t v16 = v44;
      sub_232F4B484(v33, (uint64_t (*)(void))type metadata accessor for Quantity);
      sub_232F4B3A8((uint64_t)v26);
      sub_232F4B3A8((uint64_t)v28);
      sub_232F4B484((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Quantity);
      sub_232F4B3A8((uint64_t)v12);
      if ((v43 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    sub_232F4B3A8((uint64_t)v26);
    sub_232F4B3A8((uint64_t)v28);
    sub_232F4B484((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Quantity);
LABEL_6:
    uint64_t v31 = (uint64_t)v12;
LABEL_14:
    sub_232F4B484(v31, (uint64_t (*)(void))sub_232F4DBB4);
    return 0;
  }
  sub_232F4B3A8((uint64_t)v26);
  sub_232F4B3A8((uint64_t)v28);
  if (v30(v29, 1, v4) != 1) {
    goto LABEL_6;
  }
  sub_232F4B3A8((uint64_t)v12);
LABEL_8:
  uint64_t v34 = type metadata accessor for Range();
  uint64_t v35 = v48;
  sub_232F49C18(v46 + *(int *)(v34 + 20), (uint64_t)v48);
  uint64_t v36 = v47;
  sub_232F49C18(v49 + *(int *)(v34 + 20), (uint64_t)v47);
  char v37 = v50;
  uint64_t v38 = (uint64_t)&v50[*(int *)(v8 + 48)];
  sub_232F49C18((uint64_t)v35, (uint64_t)v50);
  sub_232F49C18((uint64_t)v36, v38);
  if (v30((uint64_t)v37, 1, v4) == 1)
  {
    sub_232F4B3A8((uint64_t)v36);
    sub_232F4B3A8((uint64_t)v35);
    if (v30(v38, 1, v4) == 1)
    {
      sub_232F4B3A8((uint64_t)v37);
      return 1;
    }
    goto LABEL_13;
  }
  sub_232F49C18((uint64_t)v37, (uint64_t)v16);
  if (v30(v38, 1, v4) == 1)
  {
    sub_232F4B3A8((uint64_t)v36);
    sub_232F4B3A8((uint64_t)v35);
    sub_232F4B484((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
LABEL_13:
    uint64_t v31 = (uint64_t)v37;
    goto LABEL_14;
  }
  uint64_t v40 = v45;
  sub_232F49F68(v38, (uint64_t)v45);
  char v41 = static Quantity.== infix(_:_:)(v16, v40);
  sub_232F4B484((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_232F4B3A8((uint64_t)v36);
  sub_232F4B3A8((uint64_t)v35);
  sub_232F4B484((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Quantity);
  sub_232F4B3A8((uint64_t)v37);
  return (v41 & 1) != 0;
}

unint64_t sub_232F4B270()
{
  unint64_t result = qword_268757328;
  if (!qword_268757328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757328);
  }
  return result;
}

void sub_232F4B2C4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F4B270();
    unint64_t v7 = a3(a1, &type metadata for Range.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_232F4B328(uint64_t a1, uint64_t a2)
{
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F4B3A8(uint64_t a1)
{
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_232F4B420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Range();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F4B484(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_232F4B4E4(void *a1)
{
  a1[1] = sub_232F4B5D8(&qword_268757338, (void (*)(uint64_t))type metadata accessor for Range);
  a1[2] = sub_232F4B5D8(&qword_268757340, (void (*)(uint64_t))type metadata accessor for Range);
  uint64_t result = sub_232F4B5D8(&qword_268757348, (void (*)(uint64_t))type metadata accessor for Range);
  a1[3] = result;
  return result;
}

uint64_t sub_232F4B590()
{
  return sub_232F4B5D8(&qword_268757350, (void (*)(uint64_t))type metadata accessor for Range);
}

uint64_t sub_232F4B5D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Range(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Quantity();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(void, void, void))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v44 = v9;
      uint64_t v46 = v8;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
      uint64_t v12 = a2[4];
      a1[3] = a2[3];
      a1[4] = v12;
      uint64_t v13 = a2[6];
      a1[5] = a2[5];
      a1[6] = v13;
      uint64_t v14 = *(int *)(v7 + 28);
      __dst = (char *)a1 + v14;
      uint64_t v42 = (char *)a2 + v14;
      uint64_t v15 = sub_23309AF80();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v42, 1, v15))
      {
        sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(__dst, v42, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v42, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      uint64_t v19 = *(int *)(v7 + 32);
      uint64_t v20 = (uint64_t *)((char *)a1 + v19);
      uint64_t v21 = (uint64_t *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      uint64_t v8 = v46;
      int v23 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v46 + 56);
      swift_bridgeObjectRetain();
      v23(a1, 0, 1, v7);
      uint64_t v9 = v44;
    }
    uint64_t v24 = *(int *)(a3 + 20);
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    char v26 = (uint64_t *)((char *)a2 + v24);
    if (v9(v26, 1, v7))
    {
      sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(void *)((char *)v25 + 13) = *(void *)((char *)v26 + 13);
      uint64_t v28 = v26[4];
      v25[3] = v26[3];
      v25[4] = v28;
      uint64_t v29 = v26[6];
      v25[5] = v26[5];
      v25[6] = v29;
      uint64_t v30 = *(int *)(v7 + 28);
      int v43 = (char *)v25 + v30;
      uint64_t v45 = (char *)v26 + v30;
      uint64_t v47 = v8;
      uint64_t v31 = sub_23309AF80();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v33(v45, 1, v31))
      {
        sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(v43, v45, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v43, v45, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v43, 0, 1, v31);
      }
      uint64_t v35 = *(int *)(v7 + 32);
      uint64_t v36 = (void *)((char *)v25 + v35);
      char v37 = (void *)((char *)v26 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      id v39 = *(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain();
      v39(v25, 0, 1, v7);
    }
  }
  return a1;
}

void sub_232F4BAD0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for Range(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = a1 + *(int *)(v4 + 28);
    uint64_t v7 = sub_23309AF80();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v9, 1, v4);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(v4 + 28);
    uint64_t v12 = sub_23309AF80();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for Range(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(void, void, void))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    char v41 = v8;
    uint64_t v44 = v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
    uint64_t v10 = a2[4];
    a1[3] = a2[3];
    a1[4] = v10;
    uint64_t v11 = a2[6];
    a1[5] = a2[5];
    a1[6] = v11;
    uint64_t v12 = *(int *)(v6 + 28);
    __dst = (char *)a1 + v12;
    uint64_t v13 = (char *)a2 + v12;
    uint64_t v14 = sub_23309AF80();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(v6 + 32);
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v7 = v44;
    uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56);
    swift_bridgeObjectRetain();
    v22(a1, 0, 1, v6);
    uint64_t v8 = v41;
  }
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  if (v8(v25, 1, v6))
  {
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *(void *)((char *)v24 + 13) = *(void *)((char *)v25 + 13);
    uint64_t v27 = v25[4];
    v24[3] = v25[3];
    v24[4] = v27;
    uint64_t v28 = v25[6];
    v24[5] = v25[5];
    v24[6] = v28;
    uint64_t v29 = *(int *)(v6 + 28);
    int v43 = (char *)v24 + v29;
    uint64_t v45 = v7;
    uint64_t v42 = (char *)v25 + v29;
    uint64_t v30 = sub_23309AF80();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v42, 1, v30))
    {
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v43, v42, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v43, v42, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v43, 0, 1, v30);
    }
    uint64_t v34 = *(int *)(v6 + 32);
    uint64_t v35 = (void *)((char *)v24 + v34);
    uint64_t v36 = (void *)((char *)v25 + v34);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = *(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56);
    swift_bridgeObjectRetain();
    v38(v24, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for Range(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      unint64_t v72 = a3;
      long long v11 = *(_OWORD *)a2;
      *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
      *(_OWORD *)a1 = v11;
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      uint64_t v12 = *(int *)(v6 + 28);
      uint64_t v75 = a1;
      uint64_t v69 = v6;
      __dst = (char *)a1 + v12;
      uint64_t v13 = (char *)a2 + v12;
      uint64_t v14 = sub_23309AF80();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v16(v13, 1, v14))
      {
        sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      a1 = v75;
      uint64_t v6 = v69;
      uint64_t v30 = *(int *)(v69 + 32);
      uint64_t v31 = (void *)((char *)v75 + v30);
      uint64_t v32 = (void *)((char *)a2 + v30);
      *uint64_t v31 = *v32;
      v31[1] = v32[1];
      uint64_t v33 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      v33(v75, 0, 1, v69);
      goto LABEL_19;
    }
LABEL_7:
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_20;
  }
  if (v10)
  {
    sub_232F4B484((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Quantity);
    goto LABEL_7;
  }
  unint64_t v72 = a3;
  uint64_t v74 = v7;
  long long v19 = *(_OWORD *)a2;
  *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v19;
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(int *)(v6 + 28);
  uint64_t v76 = a1;
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = sub_23309AF80();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v70 = v21;
  LODWORD(v21) = v25(v21, 1, v23);
  int v26 = v25(v22, 1, v23);
  if (v21)
  {
    if (!v26)
    {
      (*(void (**)(void *, char *, uint64_t))(v24 + 16))(v70, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v70, 0, 1, v23);
      goto LABEL_18;
    }
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    size_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
    uint64_t v29 = v70;
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, char *, uint64_t))(v24 + 24))(v70, v22, v23);
      goto LABEL_18;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v70, v23);
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    size_t v28 = *(void *)(*(void *)(v34 - 8) + 64);
    uint64_t v29 = v70;
  }
  memcpy(v29, v22, v28);
LABEL_18:
  uint64_t v7 = v74;
  a1 = v76;
  uint64_t v35 = *(int *)(v6 + 32);
  uint64_t v36 = (void *)((char *)v76 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  a3 = v72;
LABEL_20:
  uint64_t v38 = a3[5];
  id v39 = (void *)((char *)a1 + v38);
  uint64_t v40 = (void *)((char *)a2 + v38);
  int v41 = v8((void *)((char *)a1 + v38), 1, v6);
  int v42 = v8(v40, 1, v6);
  if (!v41)
  {
    if (v42)
    {
      sub_232F4B484((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_26;
    }
    uint64_t v78 = a1;
    long long v51 = *(_OWORD *)v40;
    *(void *)((char *)v39 + 13) = *(void *)((char *)v40 + 13);
    *(_OWORD *)id v39 = v51;
    v39[3] = v40[3];
    v39[4] = v40[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39[5] = v40[5];
    v39[6] = v40[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v52 = *(int *)(v6 + 28);
    uint64_t v53 = (char *)v39 + v52;
    uint64_t v54 = (char *)v40 + v52;
    uint64_t v55 = sub_23309AF80();
    uint64_t v56 = *(void *)(v55 - 8);
    unint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    int v58 = v57(v53, 1, v55);
    int v59 = v57(v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_35:
        uint64_t v65 = *(int *)(v6 + 32);
        __int16 v66 = (void *)((char *)v39 + v65);
        uint64_t v67 = (void *)((char *)v40 + v65);
        *__int16 v66 = *v67;
        v66[1] = v67[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return v78;
      }
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 24))(v53, v54, v55);
        goto LABEL_35;
      }
      (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v55);
    }
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v53, v54, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_35;
  }
  if (v42)
  {
LABEL_26:
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v39, v40, *(void *)(*(void *)(v50 - 8) + 64));
    return a1;
  }
  uint64_t v77 = a1;
  long long v43 = *(_OWORD *)v40;
  *(void *)((char *)v39 + 13) = *(void *)((char *)v40 + 13);
  *(_OWORD *)id v39 = v43;
  v39[3] = v40[3];
  v39[4] = v40[4];
  v39[5] = v40[5];
  v39[6] = v40[6];
  uint64_t v44 = *(int *)(v6 + 28);
  id v73 = (char *)v39 + v44;
  uint64_t v45 = (char *)v40 + v44;
  uint64_t v46 = sub_23309AF80();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v73, v45, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v73, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v73, 0, 1, v46);
  }
  a1 = v77;
  uint64_t v60 = *(int *)(v6 + 32);
  uint64_t v61 = (void *)((char *)v39 + v60);
  uint64_t v62 = (void *)((char *)v40 + v60);
  *uint64_t v61 = *v62;
  v61[1] = v62[1];
  unint64_t v63 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  v63(v39, 0, 1, v6);
  return a1;
}

_OWORD *initializeWithTake for Range(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v28 = v7;
    *a1 = *a2;
    *(void *)((char *)a1 + 13) = *(void *)((char *)a2 + 13);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    uint64_t v10 = *(int *)(v6 + 28);
    long long v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_23309AF80();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
    uint64_t v7 = v28;
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v6);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (_OWORD *)((char *)a1 + v16);
  uint64_t v18 = (_OWORD *)((char *)a2 + v16);
  if (v8(v18, 1, v6))
  {
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v7;
    _OWORD *v17 = *v18;
    *(void *)((char *)v17 + 13) = *(void *)((char *)v18 + 13);
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)((char *)v18 + 24);
    *(_OWORD *)((char *)v17 + 40) = *(_OWORD *)((char *)v18 + 40);
    uint64_t v21 = *(int *)(v6 + 28);
    uint64_t v22 = (char *)v17 + v21;
    uint64_t v23 = (char *)v18 + v21;
    uint64_t v24 = sub_23309AF80();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *(_OWORD *)((char *)v17 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v18 + *(int *)(v6 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

uint64_t assignWithTake for Range(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Quantity();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_232F4B484(a1, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_7;
    }
    unint64_t v72 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
    uint64_t v19 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v19;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = *(int *)(v6 + 28);
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (void *)(a2 + v21);
    uint64_t v24 = sub_23309AF80();
    uint64_t v68 = *(void *)(v24 - 8);
    uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v68 + 48);
    uint64_t v69 = v22;
    LODWORD(v22) = v25(v22, 1, v24);
    int v26 = v25(v23, 1, v24);
    if (v22)
    {
      if (!v26)
      {
        (*(void (**)(void *, void *, uint64_t))(v68 + 32))(v69, v23, v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v24);
        goto LABEL_18;
      }
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
      uint64_t v29 = v69;
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(void *, void *, uint64_t))(v68 + 40))(v69, v23, v24);
        goto LABEL_18;
      }
      (*(void (**)(void *, uint64_t))(v68 + 8))(v69, v24);
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v28 = *(void *)(*(void *)(v30 - 8) + 64);
      uint64_t v29 = v69;
    }
    memcpy(v29, v23, v28);
LABEL_18:
    a3 = v72;
    uint64_t v31 = *(int *)(v6 + 32);
    uint64_t v32 = (void *)(a1 + v31);
    uint64_t v33 = (uint64_t *)(a2 + v31);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    *uint64_t v32 = v35;
    v32[1] = v34;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v71 = a3;
  uint64_t v11 = v7;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v12 = *(int *)(v6 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_23309AF80();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + *(int *)(v6 + 32)) = *(_OWORD *)(a2 + *(int *)(v6 + 32));
  uint64_t v7 = v11;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v6);
  a3 = v71;
LABEL_19:
  uint64_t v36 = a3[5];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  int v39 = v8(a1 + v36, 1, v6);
  int v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (v40)
    {
      sub_232F4B484(v37, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_25;
    }
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    *(void *)(v37 + 13) = *(void *)(v38 + 13);
    uint64_t v49 = *(void *)(v38 + 32);
    *(void *)(v37 + 24) = *(void *)(v38 + 24);
    *(void *)(v37 + 32) = v49;
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void *)(v38 + 48);
    *(void *)(v37 + 40) = *(void *)(v38 + 40);
    *(void *)(v37 + 48) = v50;
    swift_bridgeObjectRelease();
    uint64_t v51 = *(int *)(v6 + 28);
    uint64_t v52 = (void *)(v37 + v51);
    uint64_t v53 = (void *)(v38 + v51);
    uint64_t v54 = sub_23309AF80();
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v56 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v55 + 48);
    uint64_t v70 = v52;
    LODWORD(v52) = v56(v52, 1, v54);
    int v57 = v56(v53, 1, v54);
    if (v52)
    {
      if (!v57)
      {
        (*(void (**)(void *, void *, uint64_t))(v55 + 32))(v70, v53, v54);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v70, 0, 1, v54);
        goto LABEL_36;
      }
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v59 = *(void *)(*(void *)(v58 - 8) + 64);
      uint64_t v60 = v70;
    }
    else
    {
      if (!v57)
      {
        (*(void (**)(void *, void *, uint64_t))(v55 + 40))(v70, v53, v54);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v55 + 8))(v70, v54);
      sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      size_t v59 = *(void *)(*(void *)(v61 - 8) + 64);
      uint64_t v60 = v70;
    }
    memcpy(v60, v53, v59);
LABEL_36:
    uint64_t v62 = *(int *)(v6 + 32);
    unint64_t v63 = (void *)(v37 + v62);
    uint64_t v64 = (uint64_t *)(v38 + v62);
    uint64_t v66 = *v64;
    uint64_t v65 = v64[1];
    void *v63 = v66;
    v63[1] = v65;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v40)
  {
LABEL_25:
    sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy((void *)v37, (const void *)v38, *(void *)(*(void *)(v48 - 8) + 64));
    return a1;
  }
  uint64_t v41 = v7;
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(void *)(v37 + 13) = *(void *)(v38 + 13);
  *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
  *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
  uint64_t v42 = *(int *)(v6 + 28);
  long long v43 = (void *)(v37 + v42);
  uint64_t v44 = (const void *)(v38 + v42);
  uint64_t v45 = sub_23309AF80();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_232F4BAD0(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *(_OWORD *)(v37 + *(int *)(v6 + 32)) = *(_OWORD *)(v38 + *(int *)(v6 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F4D704);
}

uint64_t sub_232F4D704(uint64_t a1, uint64_t a2)
{
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Range(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F4D7A0);
}

uint64_t sub_232F4D7A0(uint64_t a1, uint64_t a2)
{
  sub_232F4BAD0(0, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_232F4D82C()
{
  sub_232F4BAD0(319, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Range.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F4D9A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Range.CodingKeys()
{
  return &type metadata for Range.CodingKeys;
}

unint64_t sub_232F4D9DC()
{
  unint64_t result = qword_268757368;
  if (!qword_268757368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757368);
  }
  return result;
}

unint64_t sub_232F4DA34()
{
  unint64_t result = qword_268757370;
  if (!qword_268757370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757370);
  }
  return result;
}

unint64_t sub_232F4DA8C()
{
  unint64_t result = qword_268757378;
  if (!qword_268757378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757378);
  }
  return result;
}

uint64_t sub_232F4DAE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7827308 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_232F4DBB4()
{
  if (!qword_268756F60)
  {
    sub_232F4BAD0(255, &qword_268756578, (void (*)(uint64_t))type metadata accessor for Quantity);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756F60);
    }
  }
}

void *sub_232F4DC34()
{
  sub_232F41D18();
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(v0, sel_sourceType);
  id v6 = objc_msgSend(v0, sel_rawContent);
  uint64_t v7 = sub_23309B030();
  unint64_t v9 = v8;

  sub_232F42DB8(v7, v9, (uint64_t)v5, v24);
  sub_232E9AA4C(v7, v9);
  if (!v1)
  {
    uint64_t v10 = v25;
    uint64_t v11 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    id v12 = objc_msgSend(v0, sel_rawContent);
    uint64_t v13 = sub_23309B030();
    unint64_t v15 = v14;

    id v16 = objc_msgSend(v0, sel_sourceURL);
    if (v16)
    {
      uint64_t v17 = v16;
      sub_23309AF30();

      uint64_t v18 = sub_23309AF80();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 0, 1, v18);
    }
    else
    {
      uint64_t v19 = sub_23309AF80();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v4, 1, 1, v19);
    }
    id v20 = objc_msgSend(v0, sel_metadata);
    if (v20)
    {
      uint64_t v21 = v20;
      sub_232F3A564();
      uint64_t v22 = sub_23309B650();
    }
    else
    {
      uint64_t v22 = 0;
    }
    unint64_t v0 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v15, v4, v22, v10, v11);
    sub_232F4E608((uint64_t)v4, (uint64_t (*)(void))sub_232F41D18);
    swift_bridgeObjectRelease();
    sub_232E9AA4C(v13, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  return v0;
}

uint64_t HDHRSOriginalSignedClinicalDataRecord.convert()()
{
  v1[8] = v0;
  sub_232F41D18();
  v1[9] = swift_task_alloc();
  uint64_t v2 = sub_23309B190();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  type metadata accessor for ExtractionContext();
  v1[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_232F4DFF4, 0, 0);
}

uint64_t sub_232F4DFF4()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = objc_msgSend(v1, sel_receivedDate);
  sub_23309B160();

  id v3 = objc_msgSend(v1, sel_sourceURL);
  uint64_t v4 = *(void *)(v0 + 72);
  if (v3)
  {
    id v5 = v3;
    sub_23309AF30();

    uint64_t v6 = sub_23309AF80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = sub_23309AF80();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
  }
  id v8 = objc_msgSend(*(id *)(v0 + 64), sel_metadata);
  if (v8)
  {
    unint64_t v9 = v8;
    sub_232F3A564();
    uint64_t v10 = sub_23309B650();
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  unint64_t v15 = *(void **)(v0 + 64);
  uint64_t v14 = *(void *)(v0 + 72);
  sub_232FFAE90(v11, v14, 0, 1, v10, *(char **)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_232F4E608(v14, (uint64_t (*)(void))sub_232F41D18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  id v16 = objc_msgSend(v15, sel_sourceType);
  id v17 = objc_msgSend(v15, sel_rawContent);
  uint64_t v18 = sub_23309B030();
  unint64_t v20 = v19;

  sub_232F42DB8(v18, v20, (uint64_t)v16, (uint64_t *)(v0 + 16));
  sub_232E9AA4C(v18, v20);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v21);
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 32) + **(int **)(v22 + 32));
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_232F4E388;
  uint64_t v24 = *(void *)(v0 + 104);
  uint64_t v25 = *(void *)(v0 + 64);
  return v27(v25, v24, v21, v22);
}

uint64_t sub_232F4E388(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_232F4E560;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    id v5 = sub_232F4E4B0;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_232F4E4B0()
{
  sub_232F4E608(v0[13], (uint64_t (*)(void))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[16];
  return v1(v2);
}

uint64_t sub_232F4E560()
{
  sub_232F4E608(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_232F4E608(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_232F4E668(id a1)
{
  uint64_t v2 = sub_23309B300();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23309B190();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309B1F0();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41D18();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v44, sel_signatureStatus) == a1)
  {
    id v14 = v44;
    return v14;
  }
  else
  {
    id v16 = objc_msgSend(v44, sel_rawContent);
    uint64_t v17 = sub_23309B030();
    uint64_t v42 = v18;
    uint64_t v43 = v17;

    id v41 = objc_msgSend(v44, sel_sourceType);
    id v19 = objc_msgSend(v44, sel_sourceURL);
    if (v19)
    {
      unint64_t v20 = v19;
      sub_23309AF30();

      uint64_t v21 = sub_23309AF80();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 0, 1, v21);
    }
    else
    {
      uint64_t v22 = sub_23309AF80();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v13, 1, 1, v22);
    }
    id v23 = objc_msgSend(v44, sel_issuerIdentifier);
    uint64_t v24 = sub_23309B710();
    uint64_t v26 = v25;

    id v27 = objc_msgSend(v44, sel_credentialTypes);
    uint64_t v28 = sub_23309B9A0();

    id v29 = objc_msgSend(v44, sel_syncIdentifier);
    sub_23309B1D0();

    id v30 = objc_msgSend(v44, sel_metadata);
    if (v30)
    {
      uint64_t v31 = v30;
      sub_232F3A564();
      uint64_t v32 = sub_23309B650();
    }
    else
    {
      uint64_t v32 = 0;
    }
    id v33 = objc_msgSend(v44, sel_receivedDate);
    sub_23309B160();

    id v34 = objc_msgSend(v44, sel_receivedDateTimeZone);
    sub_23309B2E0();

    id v35 = objc_allocWithZone(MEMORY[0x263F45C28]);
    uint64_t v39 = v32;
    uint64_t v40 = (uint64_t)v7;
    unint64_t v37 = v42;
    uint64_t v36 = v43;
    id v38 = sub_233098B78(v43, v42, (uint64_t)v41, (uint64_t)v13, v24, v26, v28, (uint64_t)v10, v39, v40, (uint64_t)v4, (uint64_t)a1);
    sub_232E9AA4C(v36, v37);
    return v38;
  }
}

unint64_t JWKError.errorDescription.getter()
{
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000001DLL;
      sub_23309B770();
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309B880();
      sub_232F4EE70(0, &qword_268757390);
      sub_23309B770();
      sub_23309B880();
      swift_bridgeObjectRelease();
      return v2;
    case 2:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0x1000000000000017;
      sub_23309B880();
      goto LABEL_7;
    case 3:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 10256610;
      sub_232F4EE70(0, &qword_268757388);
      sub_23309B770();
      sub_23309B880();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 4:
      unint64_t v2 = 0;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      goto LABEL_7;
    case 5:
      unint64_t result = 0xD000000000000012;
      switch(*(void *)v0)
      {
        case 1:
        case 3:
          unint64_t result = 0xD000000000000010;
          break;
        case 2:
          unint64_t result = 0xD000000000000011;
          break;
        case 4:
          unint64_t result = 0xD000000000000020;
          break;
        case 5:
          unint64_t result = 0xD00000000000001FLL;
          break;
        case 6:
          unint64_t result = 0xD000000000000015;
          break;
        case 7:
          unint64_t result = 0xD000000000000015;
          break;
        case 8:
          unint64_t result = 0xD00000000000001FLL;
          break;
        default:
          return result;
      }
      return result;
    default:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0x687469772079654BLL;
      sub_23309B880();
LABEL_7:
      sub_23309B880();
      return v2;
  }
}

void sub_232F4EE70(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_23309BD00();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t _s23HealthRecordsExtraction8JWKErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1u:
      if (v7 != 1) {
        goto LABEL_142;
      }
      uint64_t v10 = 4281170;
      int v11 = *(void *)a1;
      if (!*(void *)a1)
      {
        unint64_t v13 = 0xE300000000000000;
        uint64_t v12 = 4281170;
        int v14 = *(void *)a2;
        if (*(void *)a2) {
          goto LABEL_17;
        }
LABEL_52:
        unint64_t v16 = 0xE300000000000000;
        if (v12 != 4281170) {
          goto LABEL_55;
        }
        goto LABEL_53;
      }
      if (v11 == 1) {
        uint64_t v12 = 17221;
      }
      else {
        uint64_t v12 = 5262159;
      }
      if (v11 == 1) {
        unint64_t v13 = 0xE200000000000000;
      }
      else {
        unint64_t v13 = 0xE300000000000000;
      }
      int v14 = *(void *)a2;
      if (!*(void *)a2) {
        goto LABEL_52;
      }
LABEL_17:
      if (v14 == 1) {
        uint64_t v15 = 17221;
      }
      else {
        uint64_t v15 = 5262159;
      }
      if (v14 == 1) {
        unint64_t v16 = 0xE200000000000000;
      }
      else {
        unint64_t v16 = 0xE300000000000000;
      }
      if (v12 != v15) {
        goto LABEL_55;
      }
LABEL_53:
      if (v13 == v16)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_56;
      }
LABEL_55:
      char v27 = sub_23309C220();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_56:
      if (BYTE1(v3) == 3)
      {
        char v9 = 1;
        sub_232F4F6D4(v3, v2, 1u);
        sub_232F4F6D4(v6, v5, 1u);
        if (BYTE1(v6) != 3) {
          goto LABEL_144;
        }
        return v9 & 1;
      }
      if (BYTE1(v6) == 3)
      {
LABEL_60:
        sub_232F4F6D4(v3, v2, 1u);
        uint64_t v24 = v6;
        uint64_t v25 = v5;
        unsigned __int8 v26 = 1;
        goto LABEL_143;
      }
      if (BYTE1(v3))
      {
        if (BYTE1(v3) == 1)
        {
          unint64_t v50 = 0xE200000000000000;
          uint64_t v51 = 17221;
        }
        else
        {
          unint64_t v50 = 0xE300000000000000;
          uint64_t v51 = 5262159;
        }
      }
      else
      {
        unint64_t v50 = 0xE300000000000000;
        uint64_t v51 = 4281170;
      }
      if (BYTE1(v6))
      {
        if (BYTE1(v6) == 1)
        {
          unint64_t v55 = 0xE200000000000000;
          uint64_t v10 = 17221;
        }
        else
        {
          unint64_t v55 = 0xE300000000000000;
          uint64_t v10 = 5262159;
        }
      }
      else
      {
        unint64_t v55 = 0xE300000000000000;
      }
      if (v51 == v10 && v50 == v55)
      {
        swift_bridgeObjectRelease_n();
        char v9 = 1;
        sub_232F4F6D4(v3, v2, 1u);
        sub_232F4F6D4(v6, v5, 1u);
      }
      else
      {
        char v56 = sub_23309C220();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v9 = 1;
        sub_232F4F6D4(v3, v2, 1u);
        sub_232F4F6D4(v6, v5, 1u);
        if ((v56 & 1) == 0) {
LABEL_144:
        }
          char v9 = 0;
      }
      return v9 & 1;
    case 2u:
      if (v7 != 2) {
        goto LABEL_31;
      }
      if (v3 == v6 && v2 == v5) {
        char v9 = 1;
      }
      else {
        char v9 = sub_23309C220();
      }
      sub_232F4F6A8(v6, v5, 2u);
      sub_232F4F6A8(v3, v2, 2u);
      sub_232F4F6D4(v3, v2, 2u);
      sub_232F4F6D4(v6, v5, 2u);
      return v9 & 1;
    case 3u:
      if (v7 != 3) {
        goto LABEL_142;
      }
      int v18 = *(void *)a1;
      int v19 = *(void *)a2;
      if (v18 == 3)
      {
        sub_232F4F6D4(*(void *)a1, v2, 3u);
        sub_232F4F6D4(v6, v5, 3u);
        if (v19 != 3) {
          goto LABEL_144;
        }
      }
      else
      {
        if (v19 == 3)
        {
          sub_232F4F6D4(*(void *)a1, v2, 3u);
          uint64_t v24 = v6;
          uint64_t v25 = v5;
          unsigned __int8 v26 = 3;
          goto LABEL_143;
        }
        unint64_t v28 = 0xE900000000000031;
        uint64_t v29 = 0x6B36353270636573;
        unint64_t v30 = 0xE500000000000000;
        uint64_t v31 = 0x3635322D50;
        if (v18 != 1)
        {
          uint64_t v31 = 0x39313535326445;
          unint64_t v30 = 0xE700000000000000;
        }
        if (*(void *)a1) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0x6B36353270636573;
        }
        if (v18) {
          unint64_t v33 = v30;
        }
        else {
          unint64_t v33 = 0xE900000000000031;
        }
        if (*(void *)a2)
        {
          if (v19 == 1)
          {
            unint64_t v28 = 0xE500000000000000;
            uint64_t v29 = 0x3635322D50;
          }
          else
          {
            unint64_t v28 = 0xE700000000000000;
            uint64_t v29 = 0x39313535326445;
          }
        }
        if (v32 == v29 && v33 == v28)
        {
          swift_bridgeObjectRelease_n();
          sub_232F4F6D4(v3, v2, 3u);
          uint64_t v23 = v6;
          uint64_t v52 = v5;
          unsigned __int8 v53 = 3;
LABEL_169:
          sub_232F4F6D4(v23, v52, v53);
          char v9 = 1;
          return v9 & 1;
        }
        char v54 = sub_23309C220();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232F4F6D4(v3, v2, 3u);
        sub_232F4F6D4(v6, v5, 3u);
        if ((v54 & 1) == 0) {
          goto LABEL_144;
        }
      }
      char v9 = 1;
      return v9 & 1;
    case 4u:
      if (v7 != 4) {
        goto LABEL_142;
      }
      char v20 = sub_233034A38(*(void *)a1, *(void *)a2);
      sub_232F4F6D4(v3, v2, 4u);
      sub_232F4F6D4(v6, v5, 4u);
      return v20 & 1;
    case 5u:
      switch(v3)
      {
        case 1:
          if (v7 != 5 || v6 != 1 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          char v9 = 1;
          sub_232F4F6D4(1, 0, 5u);
          return v9 & 1;
        case 2:
          if (v7 != 5 || v6 != 2 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 2;
          goto LABEL_168;
        case 3:
          if (v7 != 5 || v6 != 3 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 3;
          goto LABEL_168;
        case 4:
          if (v7 != 5 || v6 != 4 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 4;
          goto LABEL_168;
        case 5:
          if (v7 != 5 || v6 != 5 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 5;
          goto LABEL_168;
        case 6:
          if (v7 != 5 || v6 != 6 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 6;
          goto LABEL_168;
        case 7:
          if (v7 != 5 || v6 != 7 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 7;
          goto LABEL_168;
        case 8:
          if (v7 != 5 || v6 != 8 || v5 != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 8;
          goto LABEL_168;
        default:
          if (v7 != 5 || (v5 | v6) != 0) {
            goto LABEL_142;
          }
          sub_232F4F6D4(*(void *)a1, v2, 5u);
          uint64_t v23 = 0;
LABEL_168:
          uint64_t v52 = 0;
          unsigned __int8 v53 = 5;
          break;
      }
      goto LABEL_169;
    default:
      if (!*(unsigned char *)(a2 + 16))
      {
        if (v3 == v6 && v2 == v5) {
          char v9 = 1;
        }
        else {
          char v9 = sub_23309C220();
        }
        sub_232F4F6A8(v6, v5, 0);
        sub_232F4F6A8(v3, v2, 0);
        sub_232F4F6D4(v3, v2, 0);
        sub_232F4F6D4(v6, v5, 0);
        return v9 & 1;
      }
LABEL_31:
      swift_bridgeObjectRetain();
LABEL_142:
      sub_232F4F6A8(v6, v5, v7);
      sub_232F4F6D4(v3, v2, v4);
      uint64_t v24 = v6;
      uint64_t v25 = v5;
      unsigned __int8 v26 = v7;
LABEL_143:
      sub_232F4F6D4(v24, v25, v26);
      goto LABEL_144;
  }
}

unint64_t sub_232F4F650()
{
  unint64_t result = qword_268757398;
  if (!qword_268757398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757398);
  }
  return result;
}

uint64_t sub_232F4F6A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((a3 | 2) == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for JWKError(uint64_t a1)
{
  return sub_232F4F6D4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_232F4F6D4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((a3 | 2) == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8JWKErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_232F4F6A8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JWKError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_232F4F6A8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_232F4F6D4(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for JWKError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_232F4F6D4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JWKError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JWKError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_232F4F87C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_232F4F894(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JWKError()
{
  return &type metadata for JWKError;
}

HealthRecordsExtraction::SignatureAlgorithm_optional __swiftcall SignatureAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_23309C010();
  result.value = swift_bridgeObjectRelease();
  char v5 = 4;
  if (v3 < 4) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t SignatureAlgorithm.rawValue.getter()
{
  uint64_t result = 0x4B3635325345;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x3635325345;
      break;
    case 2:
      uint64_t result = 0x4153446445;
      break;
    case 3:
      uint64_t result = 0x3635325350;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232F4F99C()
{
  return sub_23309C420();
}

uint64_t sub_232F4FA6C()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F4FB24()
{
  return sub_23309C420();
}

HealthRecordsExtraction::SignatureAlgorithm_optional sub_232F4FBF0(Swift::String *a1)
{
  return SignatureAlgorithm.init(rawValue:)(*a1);
}

void sub_232F4FBFC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x4B3635325345;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x3635325345;
      goto LABEL_3;
    case 2:
      *a1 = 0x4153446445;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x3635325350;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_232F4FC8C()
{
  return sub_23309B970();
}

uint64_t sub_232F4FCEC()
{
  return sub_23309B960();
}

uint64_t sub_232F4FD3C(unsigned __int8 *a1, char *a2)
{
  return sub_233034A38(*a1, *a2);
}

void SignatureAlgorithm.curve.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t SignatureAlgorithm.linkedDataSignatureSuite.getter()
{
  unint64_t result = 0xD000000000000021;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4B6265576E6F734ALL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232F4FE00()
{
  unint64_t result = qword_2687573A0;
  if (!qword_2687573A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573A0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SignatureAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F4FF20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignatureAlgorithm()
{
  return &type metadata for SignatureAlgorithm;
}

unint64_t sub_232F4FF58()
{
  unint64_t result = qword_2687573A8;
  if (!qword_2687573A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573A8);
  }
  return result;
}

uint64_t Address.use.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.type.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.text.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.line.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Address.city.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.district.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.state.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.postalCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.country.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.hash(into:)()
{
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[10];
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[16];
  if (v0[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_23309C3F0();
    if (v1)
    {
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  sub_23309C3F0();
  if (v3)
  {
LABEL_4:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  sub_23309C3F0();
  if (v2)
  {
LABEL_5:
    sub_23309C3F0();
    sub_23309C3E0();
    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        v7 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    if (v4) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  sub_23309C3F0();
  if (v4)
  {
LABEL_10:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_15:
  sub_23309C3F0();
LABEL_16:
  if (v5)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_23309C3F0();
    if (v9)
    {
LABEL_18:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_19;
      }
LABEL_25:
      sub_23309C3F0();
      if (v11) {
        goto LABEL_20;
      }
      return sub_23309C3F0();
    }
  }
  sub_23309C3F0();
  if (!v10) {
    goto LABEL_25;
  }
LABEL_19:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v11) {
    return sub_23309C3F0();
  }
LABEL_20:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F50468(char a1)
{
  uint64_t result = 6648693;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 1954047348;
      break;
    case 3:
      uint64_t result = 1701734764;
      break;
    case 4:
      uint64_t result = 2037672291;
      break;
    case 5:
      uint64_t result = 0x7463697274736964;
      break;
    case 6:
      uint64_t result = 0x6574617473;
      break;
    case 7:
      uint64_t result = 0x6F436C6174736F70;
      break;
    case 8:
      uint64_t result = 0x7972746E756F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232F50560()
{
  return sub_232F50468(*v0);
}

uint64_t sub_232F50568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F525B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_232F50590(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_232F5059C(uint64_t a1)
{
  unint64_t v2 = sub_232F51B1C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F505D8(uint64_t a1)
{
  unint64_t v2 = sub_232F51B1C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Address.encode(to:)(void *a1)
{
  sub_232F51BC8(0, &qword_2687573B0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = v1[2];
  uint64_t v22 = v1[3];
  uint64_t v23 = v8;
  uint64_t v9 = v1[4];
  uint64_t v20 = v1[5];
  uint64_t v21 = v9;
  uint64_t v10 = v1[6];
  v18[10] = v1[7];
  uint64_t v19 = v10;
  uint64_t v11 = v1[8];
  uint64_t v12 = v1[9];
  v18[8] = v1[10];
  v18[9] = v11;
  uint64_t v13 = v1[11];
  v18[6] = v1[12];
  v18[7] = v12;
  uint64_t v14 = v1[13];
  v18[4] = v1[14];
  _OWORD v18[5] = v13;
  v18[2] = v1[15];
  v18[3] = v14;
  v18[1] = v1[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F51B1C();
  sub_23309C480();
  LOBYTE(v26) = 0;
  uint64_t v15 = v24;
  sub_23309C110();
  if (!v15)
  {
    uint64_t v16 = v19;
    LOBYTE(v26) = 1;
    sub_23309C110();
    LOBYTE(v26) = 2;
    sub_23309C110();
    uint64_t v26 = v16;
    char v25 = 3;
    sub_232F51B70();
    sub_232F51C2C(&qword_268756B08);
    sub_23309C150();
    LOBYTE(v26) = 4;
    sub_23309C110();
    LOBYTE(v26) = 5;
    sub_23309C110();
    LOBYTE(v26) = 6;
    sub_23309C110();
    LOBYTE(v26) = 7;
    sub_23309C110();
    LOBYTE(v26) = 8;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Address.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Address.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_232F51BC8(0, &qword_2687573C0, MEMORY[0x263F8E040]);
  uint64_t v58 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v40 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F51B1C();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  uint64_t v56 = a2;
  LOBYTE(v68[0]) = 0;
  uint64_t v10 = sub_23309C040();
  uint64_t v12 = v11;
  uint64_t v55 = v10;
  LOBYTE(v68[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = (uint64_t)a1;
  uint64_t v54 = sub_23309C040();
  LOBYTE(v68[0]) = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_23309C040();
  uint64_t v57 = v15;
  uint64_t v53 = v16;
  uint64_t v18 = v17;
  sub_232F51B70();
  LOBYTE(v59) = 3;
  sub_232F51C2C(&qword_268756B18);
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v19 = v68[0];
  LOBYTE(v68[0]) = 4;
  uint64_t v52 = v19;
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_23309C040();
  LOBYTE(v68[0]) = 5;
  uint64_t v51 = v21;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_23309C040();
  uint64_t v49 = v23;
  uint64_t v50 = v18;
  uint64_t v46 = v22;
  LOBYTE(v68[0]) = 6;
  swift_bridgeObjectRetain();
  uint64_t v47 = 0;
  uint64_t v45 = sub_23309C040();
  LOBYTE(v68[0]) = 7;
  uint64_t v48 = v24;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_23309C040();
  uint64_t v42 = v20;
  uint64_t v43 = v25;
  char v69 = 8;
  uint64_t v44 = v26;
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_23309C040();
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v58);
  *(void *)&long long v59 = v55;
  *((void *)&v59 + 1) = v12;
  *(void *)&long long v60 = v54;
  *((void *)&v60 + 1) = v57;
  *(void *)&long long v61 = v53;
  *((void *)&v61 + 1) = v18;
  *(void *)&long long v62 = v52;
  *((void *)&v62 + 1) = v42;
  *(void *)&long long v63 = v51;
  *((void *)&v63 + 1) = v46;
  *(void *)&long long v64 = v49;
  *((void *)&v64 + 1) = v45;
  *(void *)&long long v65 = v48;
  *((void *)&v65 + 1) = v43;
  *(void *)&long long v66 = v44;
  *((void *)&v66 + 1) = v27;
  uint64_t v41 = v27;
  uint64_t v67 = v29;
  sub_232F51C8C((uint64_t)&v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v49;
  swift_bridgeObjectRelease();
  uint64_t v32 = v48;
  swift_bridgeObjectRelease();
  uint64_t v33 = v44;
  swift_bridgeObjectRelease();
  long long v34 = v66;
  uint64_t v35 = v56;
  *(_OWORD *)(v56 + 96) = v65;
  *(_OWORD *)(v35 + 112) = v34;
  *(void *)(v35 + 128) = v67;
  long long v36 = v62;
  *(_OWORD *)(v35 + 32) = v61;
  *(_OWORD *)(v35 + 48) = v36;
  long long v37 = v64;
  *(_OWORD *)(v35 + 64) = v63;
  *(_OWORD *)(v35 + 80) = v37;
  long long v38 = v60;
  *(_OWORD *)uint64_t v35 = v59;
  *(_OWORD *)(v35 + 16) = v38;
  __swift_destroy_boxed_opaque_existential_1(v13);
  v68[0] = v55;
  v68[1] = v12;
  v68[2] = v54;
  v68[3] = v57;
  v68[4] = v53;
  v68[5] = v30;
  v68[6] = v52;
  v68[7] = v42;
  v68[8] = v51;
  v68[9] = v46;
  v68[10] = v31;
  v68[11] = v45;
  v68[12] = v32;
  v68[13] = v43;
  v68[14] = v33;
  v68[15] = v41;
  v68[16] = v29;
  return sub_232F51D34((uint64_t)v68);
}

uint64_t sub_232F5116C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Address.init(from:)(a1, a2);
}

uint64_t sub_232F51184(void *a1)
{
  return Address.encode(to:)(a1);
}

uint64_t sub_232F5119C()
{
  return sub_23309C420();
}

uint64_t sub_232F511E0()
{
  return sub_23309C420();
}

Swift::String __swiftcall Address.formattedAddressString()()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    uint64_t v2 = v0[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = v0[6];
    uint64_t v32 = v0[8];
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[16];
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFEB18]), sel_init);
    if (v3)
    {
      uint64_t v8 = v3;
      uint64_t v9 = *(void *)(v3 + 16);
      if (v9)
      {
        uint64_t v30 = v4;
        uint64_t v31 = v6;
        uint64_t v10 = v8 + 40;
        swift_bridgeObjectRetain_n();
        uint64_t v11 = 1;
        do
        {
          swift_bridgeObjectRetain();
          id v12 = objc_msgSend(v7, sel_street);
          uint64_t v13 = sub_23309B710();
          unint64_t v15 = v14;

          swift_bridgeObjectRelease();
          uint64_t v16 = HIBYTE(v15) & 0xF;
          if ((v15 & 0x2000000000000000) == 0) {
            uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
          }
          if (v16)
          {
            id v17 = objc_msgSend(v7, sel_street);
            sub_23309B710();

            sub_23309B880();
            sub_23309B880();
            uint64_t v18 = (void *)sub_23309B6E0();
            swift_bridgeObjectRelease();
            objc_msgSend(v7, sel_setStreet_, v18);
            swift_bridgeObjectRelease();

            if (v9 == v11) {
              goto LABEL_15;
            }
          }
          else
          {
            uint64_t v19 = (void *)sub_23309B6E0();
            objc_msgSend(v7, sel_setStreet_, v19);
            swift_bridgeObjectRelease();

            if (v9 == v11) {
              goto LABEL_15;
            }
          }
          v10 += 16;
        }
        while (!__OFADD__(v11++, 1));
        __break(1u);
LABEL_15:
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v31;
        uint64_t v4 = v30;
      }
    }
    if (v32)
    {
      uint64_t v21 = (void *)sub_23309B6E0();
      objc_msgSend(v7, sel_setCity_, v21);
    }
    if (v4)
    {
      uint64_t v22 = (void *)sub_23309B6E0();
      objc_msgSend(v7, sel_setState_, v22);
    }
    if (v5)
    {
      uint64_t v23 = (void *)sub_23309B6E0();
      objc_msgSend(v7, sel_setPostalCode_, v23);
    }
    if (v6)
    {
      uint64_t v24 = (void *)sub_23309B6E0();
      objc_msgSend(v7, sel_setCountry_, v24);
    }
    id v25 = objc_msgSend(self, sel_stringFromPostalAddress_style_, v7, 0);
    uint64_t v2 = sub_23309B710();
    uint64_t v1 = v26;
  }
  uint64_t v27 = v2;
  uint64_t v28 = v1;
  result._object = v28;
  result._uint64_t countAndFlagsBits = v27;
  return result;
}

BOOL _s23HealthRecordsExtraction7AddressV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[4];
  uint64_t v157 = a1[2];
  uint64_t v159 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v5 = (void *)a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[12];
  uint64_t v153 = a1[11];
  uint64_t v13 = a1[13];
  uint64_t v12 = a1[14];
  uint64_t v14 = a1[15];
  uint64_t v15 = a1[16];
  uint64_t v16 = a2[1];
  uint64_t v155 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v154 = a2[4];
  uint64_t v18 = (void *)a2[6];
  uint64_t v20 = a2[7];
  uint64_t v19 = a2[8];
  uint64_t v22 = a2[9];
  uint64_t v21 = a2[10];
  uint64_t v24 = a2[11];
  uint64_t v23 = a2[12];
  uint64_t v26 = a2[13];
  uint64_t v25 = a2[14];
  uint64_t v28 = a2[15];
  uint64_t v27 = a2[16];
  if (!v3)
  {
    uint64_t v152 = a2[5];
    if (v16) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v16) {
    return 0;
  }
  uint64_t v152 = a2[5];
  if (*a1 == *a2 && v3 == v16) {
    goto LABEL_8;
  }
  uint64_t v123 = a1[9];
  uint64_t v127 = a2[7];
  uint64_t v142 = a2[16];
  uint64_t v147 = a1[15];
  uint64_t v134 = a1[8];
  uint64_t v138 = a1[7];
  uint64_t v29 = a1[16];
  uint64_t v112 = a1[13];
  uint64_t v30 = a2[15];
  v116 = (void *)a1[6];
  uint64_t v119 = a2[10];
  uint64_t v31 = a1[14];
  uint64_t v107 = a2[14];
  uint64_t v108 = a1[4];
  uint64_t v110 = a2[11];
  uint64_t v32 = a2[13];
  uint64_t v33 = a1[12];
  uint64_t v34 = a2[12];
  uint64_t v35 = a1[10];
  uint64_t v131 = a2[8];
  uint64_t v36 = a2[9];
  char v37 = sub_23309C220();
  uint64_t v22 = v36;
  uint64_t v21 = v119;
  uint64_t v9 = v123;
  uint64_t v10 = v35;
  uint64_t v7 = v138;
  uint64_t v27 = v142;
  uint64_t v23 = v34;
  uint64_t v11 = v33;
  uint64_t v20 = v127;
  uint64_t v19 = v131;
  uint64_t v26 = v32;
  uint64_t v4 = v108;
  uint64_t v24 = v110;
  uint64_t v25 = v107;
  uint64_t v12 = v31;
  uint64_t v5 = v116;
  uint64_t v28 = v30;
  uint64_t v13 = v112;
  uint64_t v15 = v29;
  uint64_t v8 = v134;
  uint64_t v14 = v147;
  char v38 = v37;
  BOOL result = 0;
  if (v38)
  {
LABEL_8:
    if (v159)
    {
      if (!v17) {
        return 0;
      }
      if (v157 != v155 || v159 != v17)
      {
        uint64_t v124 = v9;
        uint64_t v128 = v20;
        uint64_t v143 = v27;
        uint64_t v148 = v14;
        uint64_t v135 = v8;
        uint64_t v40 = v15;
        uint64_t v113 = v13;
        v114 = v18;
        uint64_t v41 = v28;
        v117 = v5;
        uint64_t v120 = v21;
        uint64_t v42 = v12;
        uint64_t v43 = v25;
        uint64_t v109 = v4;
        uint64_t v111 = v24;
        uint64_t v44 = v26;
        uint64_t v45 = v11;
        uint64_t v46 = v23;
        uint64_t v47 = v10;
        uint64_t v139 = v7;
        uint64_t v48 = v22;
        char v49 = sub_23309C220();
        uint64_t v22 = v48;
        uint64_t v7 = v139;
        uint64_t v27 = v143;
        uint64_t v21 = v120;
        uint64_t v9 = v124;
        uint64_t v10 = v47;
        uint64_t v20 = v128;
        uint64_t v23 = v46;
        uint64_t v11 = v45;
        uint64_t v26 = v44;
        uint64_t v4 = v109;
        uint64_t v24 = v111;
        uint64_t v25 = v43;
        uint64_t v12 = v42;
        uint64_t v18 = v114;
        uint64_t v5 = v117;
        uint64_t v28 = v41;
        uint64_t v13 = v113;
        uint64_t v15 = v40;
        uint64_t v8 = v135;
        uint64_t v14 = v148;
        char v50 = v49;
        BOOL result = 0;
        if ((v50 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v6)
    {
      if (!v152) {
        return 0;
      }
      if (v4 != v154 || v6 != v152)
      {
        uint64_t v125 = v9;
        uint64_t v129 = v20;
        uint64_t v144 = v27;
        uint64_t v149 = v14;
        uint64_t v136 = v8;
        uint64_t v51 = v15;
        uint64_t v52 = v28;
        v115 = v18;
        v118 = v5;
        uint64_t v53 = v12;
        uint64_t v54 = v25;
        uint64_t v55 = v26;
        uint64_t v56 = v11;
        uint64_t v160 = v23;
        uint64_t v140 = v7;
        uint64_t v57 = v10;
        uint64_t v121 = v21;
        uint64_t v132 = v19;
        uint64_t v58 = v22;
        char v59 = sub_23309C220();
        uint64_t v22 = v58;
        uint64_t v21 = v121;
        uint64_t v9 = v125;
        uint64_t v10 = v57;
        uint64_t v7 = v140;
        uint64_t v27 = v144;
        uint64_t v23 = v160;
        uint64_t v11 = v56;
        uint64_t v26 = v55;
        uint64_t v25 = v54;
        uint64_t v12 = v53;
        uint64_t v18 = v115;
        uint64_t v5 = v118;
        uint64_t v28 = v52;
        uint64_t v20 = v129;
        uint64_t v19 = v132;
        uint64_t v15 = v51;
        uint64_t v8 = v136;
        uint64_t v14 = v149;
        char v60 = v59;
        BOOL result = 0;
        if ((v60 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v152)
    {
      return 0;
    }
    if (v5)
    {
      if (!v18) {
        return 0;
      }
      long long v61 = v5;
      long long v62 = v18;
      uint64_t v145 = v27;
      uint64_t v150 = v14;
      uint64_t v137 = v8;
      uint64_t v63 = v15;
      uint64_t v130 = v20;
      uint64_t v64 = v28;
      uint64_t v65 = v12;
      uint64_t v66 = v25;
      uint64_t v67 = v26;
      uint64_t v68 = v11;
      uint64_t v161 = v23;
      uint64_t v141 = v7;
      uint64_t v69 = v9;
      uint64_t v158 = v10;
      uint64_t v133 = v19;
      uint64_t v70 = v21;
      uint64_t v156 = v22;
      char v71 = sub_232E90100(v61, v62);
      uint64_t v22 = v156;
      uint64_t v10 = v158;
      uint64_t v21 = v70;
      uint64_t v9 = v69;
      uint64_t v7 = v141;
      uint64_t v27 = v145;
      uint64_t v23 = v161;
      uint64_t v11 = v68;
      uint64_t v26 = v67;
      uint64_t v25 = v66;
      uint64_t v12 = v65;
      uint64_t v28 = v64;
      uint64_t v20 = v130;
      uint64_t v19 = v133;
      uint64_t v15 = v63;
      uint64_t v8 = v137;
      uint64_t v14 = v150;
      if ((v71 & 1) == 0) {
        return 0;
      }
    }
    else if (v18)
    {
      return 0;
    }
    if (v8)
    {
      if (!v19) {
        return 0;
      }
      if (v7 != v20 || v8 != v19)
      {
        uint64_t v126 = v9;
        uint64_t v146 = v27;
        uint64_t v151 = v14;
        uint64_t v72 = v15;
        uint64_t v73 = v28;
        uint64_t v74 = v12;
        uint64_t v75 = v25;
        uint64_t v76 = v26;
        uint64_t v77 = v11;
        uint64_t v162 = v23;
        uint64_t v78 = v10;
        uint64_t v122 = v21;
        uint64_t v79 = v22;
        char v80 = sub_23309C220();
        uint64_t v22 = v79;
        uint64_t v21 = v122;
        uint64_t v9 = v126;
        uint64_t v10 = v78;
        uint64_t v23 = v162;
        uint64_t v11 = v77;
        uint64_t v26 = v76;
        uint64_t v25 = v75;
        uint64_t v12 = v74;
        uint64_t v28 = v73;
        uint64_t v27 = v146;
        uint64_t v14 = v151;
        uint64_t v15 = v72;
        char v81 = v80;
        BOOL result = 0;
        if ((v81 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v19)
    {
      return 0;
    }
    if (v10)
    {
      if (!v21) {
        return 0;
      }
      if (v9 != v22 || v10 != v21)
      {
        uint64_t v82 = v14;
        uint64_t v83 = v15;
        uint64_t v84 = v27;
        uint64_t v85 = v28;
        uint64_t v86 = v12;
        uint64_t v87 = v25;
        uint64_t v88 = v26;
        uint64_t v89 = v11;
        uint64_t v163 = v23;
        char v90 = sub_23309C220();
        uint64_t v23 = v163;
        uint64_t v11 = v89;
        uint64_t v26 = v88;
        uint64_t v25 = v87;
        uint64_t v12 = v86;
        uint64_t v28 = v85;
        uint64_t v27 = v84;
        uint64_t v15 = v83;
        uint64_t v14 = v82;
        char v91 = v90;
        BOOL result = 0;
        if ((v91 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v21)
    {
      return 0;
    }
    if (v11)
    {
      if (!v23) {
        return 0;
      }
      if (v153 != v24 || v11 != v23)
      {
        uint64_t v92 = v14;
        uint64_t v93 = v15;
        uint64_t v94 = v27;
        uint64_t v95 = v28;
        uint64_t v96 = v12;
        uint64_t v97 = v25;
        uint64_t v98 = v26;
        char v99 = sub_23309C220();
        uint64_t v26 = v98;
        uint64_t v25 = v97;
        uint64_t v12 = v96;
        uint64_t v28 = v95;
        uint64_t v27 = v94;
        uint64_t v15 = v93;
        uint64_t v14 = v92;
        char v100 = v99;
        BOOL result = 0;
        if ((v100 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v23)
    {
      return 0;
    }
    if (v12)
    {
      if (!v25) {
        return 0;
      }
      if (v13 != v26 || v12 != v25)
      {
        uint64_t v101 = v14;
        uint64_t v102 = v15;
        uint64_t v103 = v27;
        uint64_t v104 = v28;
        char v105 = sub_23309C220();
        uint64_t v28 = v104;
        uint64_t v27 = v103;
        uint64_t v15 = v102;
        uint64_t v14 = v101;
        char v106 = v105;
        BOOL result = 0;
        if ((v106 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v25)
    {
      return 0;
    }
    if (v15) {
      return v27 && (v14 == v28 && v15 == v27 || (sub_23309C220() & 1) != 0);
    }
    return !v27;
  }
  return result;
}

unint64_t sub_232F51B1C()
{
  unint64_t result = qword_2687573B8;
  if (!qword_2687573B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573B8);
  }
  return result;
}

void sub_232F51B70()
{
  if (!qword_268756B00)
  {
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268756B00);
    }
  }
}

void sub_232F51BC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F51B1C();
    unint64_t v7 = a3(a1, &type metadata for Address.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_232F51C2C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F51B70();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232F51C8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_232F51D34(uint64_t a1)
{
  return a1;
}

unint64_t sub_232F51DDC(void *a1)
{
  a1[1] = sub_232EA478C();
  a1[2] = sub_232EBDFBC();
  unint64_t result = sub_232F51E14();
  a1[3] = result;
  return result;
}

unint64_t sub_232F51E14()
{
  unint64_t result = qword_2687573C8;
  if (!qword_2687573C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573C8);
  }
  return result;
}

unint64_t sub_232F51E6C()
{
  unint64_t result = qword_2687573D0;
  if (!qword_2687573D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573D0);
  }
  return result;
}

uint64_t destroy for Address()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Address(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Address(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Address(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Address(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Address()
{
  return &type metadata for Address;
}

uint64_t getEnumTagSinglePayload for Address.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Address.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *__n128 result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F52474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Address.CodingKeys()
{
  return &type metadata for Address.CodingKeys;
}

unint64_t sub_232F524B0()
{
  unint64_t result = qword_2687573D8;
  if (!qword_2687573D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573D8);
  }
  return result;
}

unint64_t sub_232F52508()
{
  unint64_t result = qword_2687573E0;
  if (!qword_2687573E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573E0);
  }
  return result;
}

unint64_t sub_232F52560()
{
  unint64_t result = qword_2687573E8;
  if (!qword_2687573E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573E8);
  }
  return result;
}

uint64_t sub_232F525B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701734764 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 2037672291 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7463697274736964 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F436C6174736F70 && a2 == 0xEA00000000006564 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t FHIRDateParserErrorPosition.init(string:location:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t FHIRDateParserErrorPosition.string.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRDateParserErrorPosition.location.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t FHIRDateParserErrorPosition.description.getter()
{
  return 0;
}

BOOL static FHIRDateParserErrorPosition.== infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return (v3 ^ v2) < 0x4000;
  }
  char v5 = sub_23309C220();
  BOOL result = 0;
  if (v5) {
    return (v3 ^ v2) < 0x4000;
  }
  return result;
}

BOOL sub_232F52A9C(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return (v3 ^ v2) < 0x4000;
  }
  char v5 = sub_23309C220();
  BOOL result = 0;
  if (v5) {
    return (v3 ^ v2) < 0x4000;
  }
  return result;
}

unint64_t FHIRDateParserError.errorDescription.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000010;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 1;
      break;
    case 2:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000011;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 2;
      break;
    case 3:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0x2064696C61766E49;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 3;
      break;
    case 4:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000010;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 4;
      break;
    case 5:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000012;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 5;
      break;
    case 6:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000012;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 6;
      break;
    case 7:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD00000000000001CLL;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 7;
      break;
    case 8:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD00000000000001ALL;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 8;
      break;
    case 9:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD00000000000001CLL;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 9;
      break;
    case 0xA:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD00000000000001CLL;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 10;
      break;
    default:
      sub_23309BE40();
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000015;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BF50();
      sub_23309B880();
      swift_bridgeObjectRetain();
      sub_23309B880();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
      uint64_t v6 = v3;
      unsigned __int8 v7 = 0;
      break;
  }
  sub_232F534CC(v4, v5, v6, v7);
  sub_23309B880();
  sub_23309B880();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_232F534CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xAu) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_232F534F0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FHIRDateParserErrorPosition(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for FHIRDateParserErrorPosition(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateParserErrorPosition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRDateParserErrorPosition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FHIRDateParserErrorPosition()
{
  return &type metadata for FHIRDateParserErrorPosition;
}

uint64_t sub_232F5366C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 0xAu) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FHIRDateParserError(uint64_t a1)
{
  return sub_232F534CC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_232F5366C(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  sub_232F5366C(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_232F534CC(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_232F534CC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateParserError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRDateParserError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_232F5385C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_232F53864(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FHIRDateParserError()
{
  return &type metadata for FHIRDateParserError;
}

unsigned char *storeEnumTagSinglePayload for VCJWTSigningError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F53948);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VCJWTSigningError()
{
  return &type metadata for VCJWTSigningError;
}

uint64_t Parameters.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameters.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Parameters.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t Parameters.parameter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Parameters.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameters.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_23309C3F0();
    if (v4) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E96978(a1, v3);
  swift_bridgeObjectRelease();
  if (!v4) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F53B44()
{
  uint64_t v1 = 0x6574656D61726170;
  if (*v0 != 1) {
    uint64_t v1 = 0x65676175676E616CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F736572;
  }
}

uint64_t sub_232F53BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F55698(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F53BD4(uint64_t a1)
{
  unint64_t v2 = sub_232F55008();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F53C10(uint64_t a1)
{
  unint64_t v2 = sub_232F55008();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Parameters.encode(to:)(void *a1)
{
  sub_232F55108(0, &qword_2687573F0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = v1[2];
  v11[2] = v1[3];
  uint64_t v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F55008();
  sub_23309C480();
  char v17 = 0;
  uint64_t v9 = v13;
  sub_23309C170();
  if (!v9)
  {
    uint64_t v14 = v12;
    char v16 = 1;
    sub_232F5505C();
    sub_232F551A8(&qword_268757408, (void (*)(void))sub_232F550B4);
    sub_23309C150();
    char v15 = 2;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Parameters.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E96978((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t Parameters.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v21 = a2;
  sub_232F55108(0, &qword_268757418, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v23 = &type metadata for Parameters;
  sub_232F5516C();
  sub_23309B770();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F55008();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v6;
    LOBYTE(v23) = 0;
    uint64_t v11 = sub_23309C0A0();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_232F5505C();
    char v22 = 1;
    sub_232F551A8(&qword_268757428, (void (*)(void))sub_232F55214);
    sub_23309C080();
    uint64_t v20 = v11;
    uint64_t v14 = v23;
    LOBYTE(v23) = 2;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_23309C040();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    uint64_t v18 = v21;
    *uint64_t v21 = v20;
    v18[1] = v13;
    v18[2] = (uint64_t)v14;
    v18[3] = v15;
    v18[4] = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F5426C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Parameters.init(from:)(a1, a2);
}

uint64_t sub_232F54284(void *a1)
{
  return Parameters.encode(to:)(a1);
}

uint64_t sub_232F542A4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E96978((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t Parameters.asSignedClinicalDataProcessingContexts(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a1;
  sub_232F41D18();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v57 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_23309B760();
  MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9 && (uint64_t v10 = *(void *)(v9 + 16)) != 0)
  {
    uint64_t v51 = v7;
    uint64_t v56 = a2;
    uint64_t v58 = v3;
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    uint64_t v67 = MEMORY[0x263F8EE78];
    uint64_t v52 = swift_bridgeObjectRetain();
    uint64_t v12 = (_OWORD *)(v52 + 56);
    uint64_t v68 = "HealthRecordsExtraction";
    do
    {
      uint64_t v17 = *((void *)v12 - 2);
      if (v17)
      {
        if ((long long v59 = *(v12 - 1),
              uint64_t v18 = *((void *)v12 - 3),
              long long v19 = *v12,
              long long v61 = v12[1],
              long long v62 = v19,
              long long v60 = v12[2],
              v18 == 0xD000000000000014)
          && v17 == 0x80000002330B52F0
          || (sub_23309C220() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v66[0] = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_232F3998C(0, v11[2] + 1, 1);
            uint64_t v11 = *(void **)&v66[0];
          }
          long long v13 = v59;
          unint64_t v15 = v11[2];
          unint64_t v14 = v11[3];
          if (v15 >= v14 >> 1)
          {
            sub_232F3998C(v14 > 1, v15 + 1, 1);
            long long v13 = v59;
            uint64_t v11 = *(void **)&v66[0];
          }
          v11[2] = v15 + 1;
          uint64_t v16 = &v11[9 * v15];
          v16[4] = v18;
          *(_OWORD *)(v16 + 5) = v13;
          *(_OWORD *)(v16 + 7) = v62;
          *(_OWORD *)(v16 + 9) = v61;
          *(_OWORD *)(v16 + 11) = v60;
        }
      }
      uint64_t v12 = (_OWORD *)((char *)v12 + 72);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v22 = v11[2];
    if (v22)
    {
      uint64_t v23 = v11[5];
      unint64_t v24 = v11[7];
      uint64_t v25 = v11[9];
      uint64_t v27 = v11[11];
      uint64_t v26 = (const char *)v11[12];
      uint64_t v28 = v58;
      if (v24)
      {
        uint64_t v47 = (void (**)(char *, uint64_t))(v51 + 1);
        uint64_t v29 = 48;
        do
        {
          uint64_t v30 = HIBYTE(v24) & 0xF;
          if ((v24 & 0x2000000000000000) == 0) {
            uint64_t v30 = *(void *)((char *)v11 + v29) & 0xFFFFFFFFFFFFLL;
          }
          if (!v30) {
            break;
          }
          uint64_t v51 = (void *)((char *)v11 + v29);
          uint64_t v52 = v29;
          *(void *)&long long v62 = v22;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_232F3C104((uint64_t)v66);
          if (v28) {
            goto LABEL_35;
          }
          uint64_t v68 = v26;
          *(void *)&long long v59 = v27;
          v64[10] = v66[10];
          v64[11] = v66[11];
          v64[12] = v66[12];
          long long v65 = v66[13];
          v64[6] = v66[6];
          v64[7] = v66[7];
          v64[8] = v66[8];
          v64[9] = v66[9];
          v64[2] = v66[2];
          v64[3] = v66[3];
          v64[4] = v66[4];
          v64[5] = v66[5];
          v64[0] = v66[0];
          v64[1] = v66[1];
          long long v63 = v66[0];
          swift_bridgeObjectRetain();
          sub_23309B880();
          swift_bridgeObjectRetain();
          sub_23309B880();
          swift_bridgeObjectRelease();
          *(void *)&long long v61 = v25;
          *(void *)&long long v60 = v24;
          if (*((void *)&v65 + 1))
          {
            swift_bridgeObjectRetain();
            sub_23309B880();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_23309B880();
            swift_bridgeObjectRelease();
          }
          uint64_t v31 = v54;
          sub_23309B750();
          uint64_t v32 = sub_23309B720();
          unint64_t v34 = v33;
          swift_bridgeObjectRelease();
          (*v47)(v31, v55);
          if (v34 >> 60 == 15)
          {
            sub_232F3DC5C();
            swift_allocError();
            *(void *)uint64_t v46 = 1;
            *(unsigned char *)(v46 + 8) = 3;
            swift_willThrow();
            sub_232F41D70((uint64_t)v64);
            swift_release();
            goto LABEL_36;
          }
          uint64_t v50 = v23;
          uint64_t v58 = 0;
          uint64_t v35 = sub_23309AF80();
          uint64_t v36 = *(void *)(v35 - 8);
          char v37 = v57;
          (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v57, v53, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v49 = v32;
          uint64_t v48 = sub_23309B010();
          char v38 = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35) != 1)
          {
            uint64_t v39 = v57;
            char v38 = (void *)sub_23309AF10();
            (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
          }
          uint64_t v40 = (void *)sub_23309B6E0();
          swift_bridgeObjectRelease();
          if (v56)
          {
            sub_232F3A564();
            uint64_t v41 = (void *)sub_23309B640();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v41 = 0;
          }
          uint64_t v28 = v58;
          id v42 = objc_allocWithZone(MEMORY[0x263F45C30]);
          uint64_t v43 = (void *)v48;
          id v44 = objc_msgSend(v42, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v48, 1, v38, v40, 0, 0, 0, v41);
          sub_232F3F15C(v49, v34);

          sub_232F41D70((uint64_t)v64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v45 = v44;
          MEMORY[0x237DB59C0]();
          if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_23309B9D0();
          }
          sub_23309B9E0();
          sub_23309B9C0();

          uint64_t v22 = v62 - 1;
          if ((void)v62 == 1) {
            goto LABEL_37;
          }
          uint64_t v29 = v52 + 72;
          uint64_t v23 = v51[8];
          unint64_t v24 = v51[10];
          uint64_t v25 = v51[12];
          uint64_t v27 = v51[14];
          uint64_t v26 = (const char *)v51[15];
        }
        while (v24);
      }
      type metadata accessor for HDHRExtractionError(0);
      *(void *)&v64[0] = 203;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_232F54C28(MEMORY[0x263F8EE78]);
      sub_232F55268();
      sub_23309AEA0();
      swift_willThrow();
LABEL_35:
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
LABEL_37:
      swift_release();
      return v67;
    }
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    *(void *)&v64[0] = 202;
    sub_232F54C28(MEMORY[0x263F8EE78]);
    sub_232F55268();
    sub_23309AEA0();
    return swift_willThrow();
  }
}

unint64_t sub_232F54C28(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_232F55814();
  uint64_t v2 = sub_23309BFB0();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_232F55880(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_232F54D50(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_232F3A680(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_232F54D50(uint64_t a1, uint64_t a2)
{
  sub_23309C3D0();
  sub_23309B800();
  uint64_t v4 = sub_23309C420();
  return sub_232F54DC8(a1, a2, v4);
}

unint64_t sub_232F54DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_23309C220() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_23309C220() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_23309C220()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

BOOL _s23HealthRecordsExtraction10ParametersV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_23309C220(), BOOL result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = swift_bridgeObjectRetain();
      char v12 = sub_232E8FDA0(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v4) {
      return v7 && (v3 == v5 && v4 == v7 || (sub_23309C220() & 1) != 0);
    }
    return !v7;
  }
  return result;
}

unint64_t sub_232F55008()
{
  unint64_t result = qword_2687573F8;
  if (!qword_2687573F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687573F8);
  }
  return result;
}

void sub_232F5505C()
{
  if (!qword_268757400)
  {
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757400);
    }
  }
}

unint64_t sub_232F550B4()
{
  unint64_t result = qword_268757410;
  if (!qword_268757410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757410);
  }
  return result;
}

void sub_232F55108(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F55008();
    unint64_t v7 = a3(a1, &type metadata for Parameters.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_232F5516C()
{
  unint64_t result = qword_268757420;
  if (!qword_268757420)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757420);
  }
  return result;
}

uint64_t sub_232F551A8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F5505C();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_232F55214()
{
  unint64_t result = qword_268757430;
  if (!qword_268757430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757430);
  }
  return result;
}

unint64_t sub_232F55268()
{
  unint64_t result = qword_268756508;
  if (!qword_268756508)
  {
    type metadata accessor for HDHRExtractionError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756508);
  }
  return result;
}

unint64_t sub_232F552C0(void *a1)
{
  a1[1] = sub_232F552F8();
  a1[2] = sub_232F5534C();
  unint64_t result = sub_232F553A0();
  a1[3] = result;
  return result;
}

unint64_t sub_232F552F8()
{
  unint64_t result = qword_268757438;
  if (!qword_268757438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757438);
  }
  return result;
}

unint64_t sub_232F5534C()
{
  unint64_t result = qword_268757440;
  if (!qword_268757440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757440);
  }
  return result;
}

unint64_t sub_232F553A0()
{
  unint64_t result = qword_268757448;
  if (!qword_268757448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757448);
  }
  return result;
}

unint64_t sub_232F553F4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F552F8();
  unint64_t result = sub_232F5534C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_232F55428()
{
  unint64_t result = qword_268757450;
  if (!qword_268757450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757450);
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameters()
{
  return &type metadata for Parameters;
}

unsigned char *storeEnumTagSinglePayload for Parameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F55558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameters.CodingKeys()
{
  return &type metadata for Parameters.CodingKeys;
}

unint64_t sub_232F55594()
{
  unint64_t result = qword_268757458;
  if (!qword_268757458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757458);
  }
  return result;
}

unint64_t sub_232F555EC()
{
  unint64_t result = qword_268757460;
  if (!qword_268757460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757460);
  }
  return result;
}

unint64_t sub_232F55644()
{
  unint64_t result = qword_268757468;
  if (!qword_268757468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757468);
  }
  return result;
}

uint64_t sub_232F55698(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xE900000000000072 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void sub_232F55814()
{
  if (!qword_268757050)
  {
    unint64_t v0 = sub_23309BFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757050);
    }
  }
}

uint64_t sub_232F55880(uint64_t a1, uint64_t a2)
{
  sub_232F39768();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

HealthRecordsExtraction::KeyManagementAlgorithm_optional __swiftcall KeyManagementAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_23309C010();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *BOOL v2 = v5;
  return result;
}

uint64_t KeyManagementAlgorithm.rawValue.getter()
{
  if (*v0) {
    return 0x53452D48444345;
  }
  else {
    return 0x5045414F2D415352;
  }
}

uint64_t sub_232F55984(char *a1, char *a2)
{
  return sub_233034CCC(*a1, *a2);
}

unint64_t sub_232F55994()
{
  unint64_t result = qword_268757470;
  if (!qword_268757470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757470);
  }
  return result;
}

uint64_t sub_232F559E8()
{
  return sub_23309C420();
}

uint64_t sub_232F55A6C()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F55ADC()
{
  return sub_23309C420();
}

HealthRecordsExtraction::KeyManagementAlgorithm_optional sub_232F55B5C(Swift::String *a1)
{
  return KeyManagementAlgorithm.init(rawValue:)(*a1);
}

void sub_232F55B68(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x5045414F2D415352;
  if (*v1) {
    uint64_t v2 = 0x53452D48444345;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_232F55BA8()
{
  return sub_23309B970();
}

uint64_t sub_232F55C08()
{
  return sub_23309B960();
}

unsigned char *storeEnumTagSinglePayload for KeyManagementAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F55D24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyManagementAlgorithm()
{
  return &type metadata for KeyManagementAlgorithm;
}

unint64_t sub_232F55D5C()
{
  unint64_t result = qword_268757478;
  if (!qword_268757478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757478);
  }
  return result;
}

void **sub_232F55DB0(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  unsigned int v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned int v6 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    unsigned int v6 = a1;
    uint64_t v7 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    uint64_t v8 = (char *)v6 + v7;
    char v9 = (char *)a2 + v7;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)((char *)a2 + v7);
    *((void *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
    uint64_t v10 = type metadata accessor for ExtractionContext();
    uint64_t v11 = *(int *)(v10 + 28);
    id v44 = &v8[v11];
    char v12 = &v9[v11];
    uint64_t v13 = sub_23309B190();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    uint64_t v15 = v4;
    v14(v44, v12, v13);
    uint64_t v16 = (int *)v10;
    uint64_t v17 = *(int *)(v10 + 32);
    uint64_t v18 = &v8[v17];
    long long v19 = &v9[v17];
    uint64_t v20 = sub_23309AF80();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_232F41D18();
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = v16[9];
    unint64_t v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)unint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    *(void *)&v8[v16[10]] = *(void *)&v9[v16[10]];
    *(void *)&v8[v16[11]] = *(void *)&v9[v16[11]];
    uint64_t v27 = a3[5];
    uint64_t v28 = a3[6];
    uint64_t v29 = (void **)((char *)v6 + v27);
    uint64_t v30 = (void **)((char *)a2 + v27);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = (void **)((char *)v6 + v28);
    unint64_t v33 = (void **)((char *)a2 + v28);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = a3[7];
    uint64_t v36 = a3[8];
    char v37 = *(void **)((char *)a2 + v35);
    *(void **)((char *)v6 + v35) = v37;
    char v38 = (uint64_t *)((char *)v6 + v36);
    uint64_t v39 = (char *)a2 + v36;
    uint64_t v40 = *(uint64_t *)((char *)a2 + v36);
    unint64_t v41 = *((void *)v39 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v42 = v37;
    sub_232E9A9F4(v40, v41);
    uint64_t *v38 = v40;
    v38[1] = v41;
  }
  return v6;
}

uint64_t sub_232F56058(id *a1, uint64_t a2)
{
  unsigned int v4 = (char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v5 = type metadata accessor for ExtractionContext();
  unsigned int v6 = &v4[*(int *)(v5 + 28)];
  uint64_t v7 = sub_23309B190();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = &v4[*(int *)(v5 + 32)];
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v11 = (uint64_t *)((char *)a1 + *(int *)(a2 + 32));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  return sub_232E9AA4C(v12, v13);
}

void **sub_232F561E4(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  id v44 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  id v15 = v5;
  v14(v11, v12, v13);
  uint64_t v16 = v9[8];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  uint64_t v19 = sub_23309AF80();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_232F41D18();
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v22 = v9[9];
  uint64_t v23 = &v7[v22];
  unint64_t v24 = &v8[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v26 = a3[5];
  uint64_t v27 = a3[6];
  uint64_t v28 = (void **)((char *)a1 + v26);
  uint64_t v29 = (void **)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void **)((char *)a1 + v27);
  uint64_t v32 = (void **)((char *)a2 + v27);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a3[7];
  uint64_t v35 = a3[8];
  uint64_t v36 = *(void **)((char *)a2 + v34);
  *(void **)((char *)v44 + v34) = v36;
  char v37 = (uint64_t *)((char *)v44 + v35);
  char v38 = (char *)a2 + v35;
  uint64_t v39 = *(uint64_t *)((char *)a2 + v35);
  unint64_t v40 = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v41 = v36;
  sub_232E9A9F4(v39, v40);
  *char v37 = v39;
  v37[1] = v40;
  return v44;
}

void **sub_232F5643C(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  *a1 = *a2;
  id v7 = v5;

  uint64_t v8 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v9 = (void **)((char *)a1 + v8);
  uint64_t v50 = a2;
  uint64_t v10 = (char *)a2 + v8;
  void *v9 = *(void **)((char *)a2 + v8);
  v9[1] = *(void **)((char *)a2 + v8 + 8);
  v9[2] = *(void **)((char *)a2 + v8 + 16);
  uint64_t v11 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v12 = v11[7];
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[8];
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = &v10[v16];
  uint64_t v19 = sub_23309AF80();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  uint64_t v48 = v17;
  LODWORD(v17) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (v17)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 16))(v48, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v48, 0, 1, v19);
      goto LABEL_9;
    }
    sub_232F41D18();
    size_t v24 = *(void *)(*(void *)(v23 - 8) + 64);
    uint64_t v25 = v48;
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 24))(v48, v18, v19);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v48, v19);
    sub_232F41D18();
    size_t v24 = *(void *)(*(void *)(v26 - 8) + 64);
    uint64_t v25 = v48;
  }
  memcpy(v25, v18, v24);
LABEL_9:
  uint64_t v27 = v11[9];
  uint64_t v28 = (void *)((char *)v9 + v27);
  uint64_t v29 = &v10[v27];
  *uint64_t v28 = *(void *)v29;
  v28[1] = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v9 + v11[10]) = *(void *)&v10[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v9 + v11[11]) = *(void *)&v10[v11[11]];
  swift_retain();
  swift_release();
  uint64_t v30 = a3[5];
  uint64_t v31 = (void **)((char *)a1 + v30);
  uint64_t v32 = (void **)((char *)v50 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[6];
  uint64_t v34 = (void **)((char *)a1 + v33);
  uint64_t v35 = (void **)((char *)v50 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[7];
  char v37 = *(void **)((char *)v50 + v36);
  char v38 = *(void **)((char *)a1 + v36);
  *(void **)((char *)a1 + v36) = v37;
  id v39 = v37;

  uint64_t v40 = a3[8];
  id v41 = (uint64_t *)((char *)a1 + v40);
  id v42 = (uint64_t *)((char *)v50 + v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_232E9A9F4(*v42, v44);
  uint64_t v45 = *v41;
  unint64_t v46 = v41[1];
  *id v41 = v43;
  v41[1] = v44;
  sub_232E9AA4C(v45, v46);
  return a1;
}

void *sub_232F56784(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  id v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)id v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void *)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_232F41D18();
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v20 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  uint64_t v21 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  return a1;
}

void **sub_232F56970(void **a1, void **a2, int *a3)
{
  uint64_t v5 = *a1;
  *a1 = *a2;

  uint64_t v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  id v7 = (char *)a1 + v6;
  uint64_t v48 = a2;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)id v7 = *(_OWORD *)((char *)a2 + v6);
  *((void *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for ExtractionContext();
  uint64_t v10 = v9[7];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = sub_23309B190();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = sub_23309AF80();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  unint64_t v46 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v15)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v46, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v17);
      goto LABEL_9;
    }
    sub_232F41D18();
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = v46;
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v46, v16, v17);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v46, v17);
    sub_232F41D18();
    size_t v22 = *(void *)(*(void *)(v24 - 8) + 64);
    uint64_t v23 = v46;
  }
  memcpy(v23, v16, v22);
LABEL_9:
  uint64_t v25 = v9[9];
  uint64_t v26 = &v7[v25];
  uint64_t v27 = &v8[v25];
  uint64_t v29 = *(void *)v27;
  uint64_t v28 = *((void *)v27 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  swift_bridgeObjectRelease();
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  swift_release();
  uint64_t v30 = a3[5];
  uint64_t v31 = (void **)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)((char *)v48 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[6];
  uint64_t v36 = (void **)((char *)a1 + v35);
  char v37 = (uint64_t *)((char *)v48 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[7];
  id v41 = *(void **)((char *)a1 + v40);
  *(void **)((char *)a1 + v40) = *(void **)((char *)v48 + v40);

  uint64_t v42 = a3[8];
  uint64_t v43 = *(uint64_t *)((char *)a1 + v42);
  unint64_t v44 = *(unint64_t *)((char *)a1 + v42 + 8);
  *(_OWORD *)((char *)a1 + v42) = *(_OWORD *)((char *)v48 + v42);
  sub_232E9AA4C(v43, v44);
  return a1;
}

uint64_t sub_232F56C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F56C6C);
}

uint64_t sub_232F56C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RecordExtractionContext();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_232F56D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F56D44);
}

uint64_t sub_232F56D44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RecordExtractionContext();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for FHIRExtractionContext()
{
  uint64_t result = qword_268757480;
  if (!qword_268757480) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_232F56E50()
{
  uint64_t result = type metadata accessor for RecordExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_232F56F08@<X0>(uint64_t a1@<X8>)
{
  sub_232F41D18();
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = type metadata accessor for FHIRExtractionContext();
  unint64_t v10 = (uint64_t *)(v1 + *(int *)(v9 + 24));
  uint64_t v11 = v10[1];
  uint64_t v23 = a1;
  if (v11) {
    uint64_t v22 = *v10;
  }
  else {
    uint64_t v22 = 0x2964692D6F6E28;
  }
  uint64_t v12 = v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  uint64_t v13 = type metadata accessor for ExtractionContext();
  sub_232F41E94(v12 + *(int *)(v13 + 32), (uint64_t)v8);
  uint64_t v14 = sub_23309AF80();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v8, 1, v14) == 1)
  {
    swift_bridgeObjectRetain();
    sub_232F571C0((uint64_t)v8);
    uint64_t v17 = (uint64_t *)(v1 + *(int *)(v9 + 20));
    uint64_t v18 = v17[1];
    uint64_t v24 = *v17;
    uint64_t v25 = v18;
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRetain();
    sub_23309B880();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23309AF50();
    int v19 = v16(v6, 1, v14);
    uint64_t v20 = v23;
    if (v19 == 1)
    {
      sub_23309AF00();
      swift_bridgeObjectRelease();
      return sub_232F571C0((uint64_t)v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v6, v14);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23, v8, v14);
    swift_bridgeObjectRetain();
    sub_23309AF20();
    sub_23309AF20();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_232F571C0(uint64_t a1)
{
  sub_232F41D18();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Array<A>.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x270FA2498](sub_232F57240, 0, 0);
}

uint64_t sub_232F57240()
{
  if (sub_23309BAA0())
  {
    uint64_t v1 = *(void *)(v0[3] + 16);
  }
  else
  {
    uint64_t v2 = (uint64_t *)v0[4];
    uint64_t v3 = *v2;
    uint64_t v1 = *(void *)(v0[3] + 16);
    if (v3 < MEMORY[0x237DB5A30](v2[1], v1))
    {
      *(void *)v0[4] = v3 + 1;
      sub_23309BA10();
      uint64_t v4 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v4 = 1;
LABEL_6:
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v0[2], v4, 1, v1);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_232F57334(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_232F573EC;
  v6[2] = a1;
  return MEMORY[0x270FA2498](sub_232F57240, 0, 0);
}

uint64_t sub_232F573EC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_232F574E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  void *v12 = v6;
  v12[1] = sub_232F575B0;
  return MEMORY[0x270FA1E90](a1, a2, a3, a5, a6);
}

uint64_t sub_232F575B0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t Array<A>.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_232F576B4()
{
  return MEMORY[0x263F8E658];
}

uint64_t sub_232F576C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_232F576DC@<X0>(void *a1@<X8>)
{
  Array<A>.makeAsyncIterator()(*v1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F57718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for Array<A>.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of SignatureVerifiable.algorithm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SignatureVerifiable.signingKeyID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SignatureVerifiable.signature()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SignatureVerifiable.signatureMessage()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SignatureVerifiable.signatureStatus(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SignatureVerifiable.verifySignature(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_232F5781C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *a1;
  (*(void (**)(uint64_t *))(a3 + 48))(&v8);
  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_23309B4B0();
  __swift_project_value_buffer(v3, (uint64_t)qword_268770F68);
  uint64_t v4 = sub_23309B4A0();
  os_log_type_t v5 = sub_23309BBA0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_232E63000, v4, v5, "SignedClinicalDataSignatureVerifiable: signature appears to be valid", v6, 2u);
    MEMORY[0x237DB6EC0](v6, -1, -1);
  }

  return 2;
}

uint64_t SignedClinicalDataSubject.FHIRBundle.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v3)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C(a1, v3);
      goto LABEL_6;
    }
LABEL_10:
    sub_23309C3F0();
    if (v4) {
      goto LABEL_7;
    }
    return sub_23309C3F0();
  }
  if (!v3) {
    goto LABEL_10;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0(a1, v3);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v4) {
    return sub_23309C3F0();
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t SignedClinicalDataSubject.FHIRBundle.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (v1)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C((uint64_t)v5, v1);
      goto LABEL_6;
    }
LABEL_8:
    sub_23309C3F0();
    if (v2) {
      goto LABEL_7;
    }
LABEL_9:
    sub_23309C3F0();
    return sub_23309C420();
  }
  if (!v1) {
    goto LABEL_8;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v5, v1);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232F580E4(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 40)) {
    return ModelsR4.Bundle.hash(into:)(a1);
  }
  else {
    return ModelsDSTU2.Bundle.hash(into:)(a1);
  }
}

uint64_t sub_232F58148()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v3)
  {
    if (v1)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C((uint64_t)v5, v1);
      goto LABEL_6;
    }
LABEL_8:
    sub_23309C3F0();
    if (v2) {
      goto LABEL_7;
    }
LABEL_9:
    sub_23309C3F0();
    return sub_23309C420();
  }
  if (!v1) {
    goto LABEL_8;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v5, v1);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232F58264(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233034BB0(*a1, *a2);
}

uint64_t sub_232F58270()
{
  return sub_23309C420();
}

uint64_t sub_232F58314()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F583A4()
{
  return sub_23309C420();
}

uint64_t sub_232F58444@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232F5A1CC();
  *a1 = result;
  return result;
}

void sub_232F58474(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 0xEB000000006E6F69;
  uint64_t v5 = 0x7372655672696866;
  if (v2 != 1)
  {
    uint64_t v5 = 0x646E754272696866;
    unint64_t v4 = 0xEA0000000000656CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 25705;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_232F584D4()
{
  uint64_t v1 = 0x7372655672696866;
  if (*v0 != 1) {
    uint64_t v1 = 0x646E754272696866;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_232F58530@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_232F5A1CC();
  *a1 = result;
  return result;
}

uint64_t sub_232F58558(uint64_t a1)
{
  unint64_t v2 = sub_232F5973C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F58594(uint64_t a1)
{
  unint64_t v2 = sub_232F5973C();
  return MEMORY[0x270FA00B8](a1, v2);
}

id SignedClinicalDataSubject.fhirVersion.getter()
{
  return *v0;
}

uint64_t SignedClinicalDataSubject.fhirBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  char v6 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 8);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  return sub_232F41ADC();
}

__n128 SignedClinicalDataSubject.init(fhirVersion:fhirBundle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  *(void *)a3 = a1;
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 24) = v6;
  *(void *)(a3 + 40) = v3;
  *(unsigned char *)(a3 + 48) = v4;
  return result;
}

void SignedClinicalDataSubject.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  sub_232F59838(0, &qword_268757528, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v36 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F5973C();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  LOBYTE(v41) = 1;
  uint64_t v10 = sub_23309C0A0();
  uint64_t v12 = v11;
  sub_232F3A800(0, &qword_268757538);
  swift_bridgeObjectRetain();
  id v13 = sub_232F58AF4();
  uint64_t v37 = v10;
  uint64_t v38 = a2;
  id v40 = v13;
  id v39 = objc_msgSend(v40, sel_FHIRRelease);
  uint64_t v14 = sub_23309B710();
  uint64_t v16 = v15;
  if (v14 == sub_23309B710() && v16 == v17)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  char v19 = sub_23309C220();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    char v46 = 2;
    sub_232F597E4();
    sub_23309C0E0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v28 = 0;
    uint64_t v29 = v41;
    uint64_t v30 = v42;
    uint64_t v31 = v43;
    uint64_t v32 = v44;
    goto LABEL_17;
  }
  id v39 = objc_msgSend(v40, sel_FHIRRelease);
  uint64_t v20 = sub_23309B710();
  uint64_t v22 = v21;
  if (v20 == sub_23309B710() && v22 == v23)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v25 = sub_23309C220();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_232F59790();
      swift_allocError();
      *uint64_t v26 = v37;
      v26[1] = v12;
      swift_willThrow();
      id v27 = v40;

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      return;
    }
  }
  swift_bridgeObjectRelease();
  char v46 = 2;
  sub_232EBE4C8();
  sub_23309C0E0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v29 = v41;
  uint64_t v30 = v42;
  uint64_t v31 = v43;
  uint64_t v32 = v44;
  char v28 = 1;
LABEL_17:
  uint64_t v33 = v45;
  id v34 = v40;
  sub_232F41ADC();

  uint64_t v35 = v38;
  void *v38 = v34;
  v35[1] = v29;
  v35[2] = v30;
  v35[3] = v31;
  v35[4] = v32;
  v35[5] = v33;
  *((unsigned char *)v35 + 48) = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  sub_232F41E4C();
}

id sub_232F58AF4()
{
  v5[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  v5[0] = 0;
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_versionFromVersionString_error_, v0, v5);

  if (v1)
  {
    id v2 = v5[0];
  }
  else
  {
    id v3 = v5[0];
    sub_23309AEC0();

    swift_willThrow();
  }
  return v1;
}

uint64_t SignedClinicalDataSubject.encode(to:)(void *a1)
{
  sub_232F59838(0, &qword_268757550, MEMORY[0x263F8E0C0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v10 = *(void **)v1;
  uint64_t v9 = *(void *)(v1 + 8);
  uint64_t v20 = *(void *)(v1 + 16);
  uint64_t v21 = v9;
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v18 = *(void *)(v1 + 32);
  uint64_t v19 = v11;
  uint64_t v22 = *(void *)(v1 + 40);
  int v28 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F5973C();
  sub_23309C480();
  id v12 = objc_msgSend(v10, sel_description);
  sub_23309B710();

  LOBYTE(v23) = 1;
  sub_23309C110();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v20;
    uint64_t v14 = v21;
    uint64_t v16 = v18;
    uint64_t v17 = v19;
    swift_bridgeObjectRelease();
    uint64_t v23 = v14;
    uint64_t v24 = v15;
    uint64_t v25 = v17;
    uint64_t v26 = v16;
    uint64_t v27 = v22;
    char v29 = 2;
    if (v28) {
      sub_232EBE51C();
    }
    else {
      sub_232F5989C();
    }
    sub_23309C150();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t SignedClinicalDataSubject.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 48);
  id v6 = *(id *)v1;
  sub_23309BC00();

  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v3)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C(a1, v3);
      goto LABEL_6;
    }
LABEL_10:
    sub_23309C3F0();
    if (v4) {
      goto LABEL_7;
    }
    return sub_23309C3F0();
  }
  if (!v3) {
    goto LABEL_10;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0(a1, v3);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v4) {
    return sub_23309C3F0();
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t static SignedClinicalDataSubject.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_232F3A800(0, (unint64_t *)&qword_268757560);
  if (sub_23309BBF0())
  {
    v18[0] = v15;
    v18[1] = v14;
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = v2;
    char v19 = v3;
    v16[0] = v4;
    v16[1] = v6;
    v16[2] = v5;
    v16[3] = v7;
    v16[4] = v8;
    char v17 = v9;
    char v10 = _s23HealthRecordsExtraction25SignedClinicalDataSubjectV10FHIRBundleO2eeoiySbAE_AEtFZ_0(v18, v16);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t SignedClinicalDataSubject.hashValue.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 48);
  sub_23309C3D0();
  id v5 = v1;
  sub_23309BC00();

  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (v2)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C((uint64_t)v7, v2);
      goto LABEL_6;
    }
LABEL_8:
    sub_23309C3F0();
    if (v3) {
      goto LABEL_7;
    }
LABEL_9:
    sub_23309C3F0();
    return sub_23309C420();
  }
  if (!v2) {
    goto LABEL_8;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v7, v2);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

void sub_232F59188(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_232F591A0(void *a1)
{
  return SignedClinicalDataSubject.encode(to:)(a1);
}

uint64_t sub_232F591C0()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 48);
  sub_23309C3D0();
  id v5 = v1;
  sub_23309BC00();

  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (v2)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C((uint64_t)v7, v2);
      goto LABEL_6;
    }
LABEL_8:
    sub_23309C3F0();
    if (v3) {
      goto LABEL_7;
    }
LABEL_9:
    sub_23309C3F0();
    return sub_23309C420();
  }
  if (!v2) {
    goto LABEL_8;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v7, v2);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_9;
  }
LABEL_7:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232F592F0(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_232F3A800(0, (unint64_t *)&qword_268757560);
  if (sub_23309BBF0())
  {
    v18[0] = v15;
    v18[1] = v14;
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = v2;
    char v19 = v3;
    v16[0] = v4;
    v16[1] = v6;
    v16[2] = v5;
    v16[3] = v7;
    v16[4] = v8;
    char v17 = v9;
    char v10 = static SignedClinicalDataSubject.FHIRBundle.== infix(_:_:)(v18, v16);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t _s23HealthRecordsExtraction25SignedClinicalDataSubjectV10FHIRBundleO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  if (a1[5])
  {
    if (a2[5])
    {
      uint64_t v18 = *a1;
      uint64_t v19 = v2;
      uint64_t v20 = v4;
      uint64_t v21 = v3;
      uint64_t v22 = v5;
      uint64_t v13 = v6;
      uint64_t v14 = v7;
      uint64_t v15 = v9;
      uint64_t v16 = v8;
      uint64_t v17 = v10;
      sub_232F41ADC();
      sub_232F41ADC();
      sub_232F41ADC();
      sub_232F41ADC();
      char v11 = _s23HealthRecordsExtraction8ModelsR4V6BundleV2eeoiySbAE_AEtFZ_0(&v18, &v13);
      sub_232F41E4C();
      sub_232F41E4C();
      sub_232F41E4C();
LABEL_7:
      sub_232F41E4C();
      return v11 & 1;
    }
  }
  else if ((a2[5] & 1) == 0)
  {
    uint64_t v18 = *a1;
    uint64_t v19 = v2;
    uint64_t v20 = v4;
    uint64_t v21 = v3;
    uint64_t v22 = v5;
    uint64_t v13 = v6;
    uint64_t v14 = v7;
    uint64_t v15 = v9;
    uint64_t v16 = v8;
    uint64_t v17 = v10;
    sub_232F41ADC();
    sub_232F41ADC();
    sub_232F41ADC();
    sub_232F41ADC();
    char v11 = static ModelsDSTU2.Bundle.== infix(_:_:)(&v18, &v13);
    sub_232F41E4C();
    sub_232F41E4C();
    sub_232F41E4C();
    goto LABEL_7;
  }
  sub_232F41ADC();
  sub_232F41ADC();
  sub_232F41E4C();
  sub_232F41E4C();
  char v11 = 0;
  return v11 & 1;
}

unint64_t sub_232F5973C()
{
  unint64_t result = qword_268757530;
  if (!qword_268757530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757530);
  }
  return result;
}

unint64_t sub_232F59790()
{
  unint64_t result = qword_268757540;
  if (!qword_268757540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757540);
  }
  return result;
}

unint64_t sub_232F597E4()
{
  unint64_t result = qword_268757548;
  if (!qword_268757548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757548);
  }
  return result;
}

void sub_232F59838(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F5973C();
    unint64_t v7 = a3(a1, &type metadata for SignedClinicalDataSubject.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_232F5989C()
{
  unint64_t result = qword_268757558;
  if (!qword_268757558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757558);
  }
  return result;
}

unint64_t sub_232F598F4()
{
  unint64_t result = qword_268757568;
  if (!qword_268757568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757568);
  }
  return result;
}

unint64_t sub_232F59948(void *a1)
{
  a1[1] = sub_232F59980();
  a1[2] = sub_232F599D4();
  unint64_t result = sub_232F59A28();
  a1[3] = result;
  return result;
}

unint64_t sub_232F59980()
{
  unint64_t result = qword_268757570;
  if (!qword_268757570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757570);
  }
  return result;
}

unint64_t sub_232F599D4()
{
  unint64_t result = qword_268757578;
  if (!qword_268757578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757578);
  }
  return result;
}

unint64_t sub_232F59A28()
{
  unint64_t result = qword_268757580;
  if (!qword_268757580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757580);
  }
  return result;
}

unint64_t sub_232F59A80()
{
  unint64_t result = qword_268757588;
  if (!qword_268757588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757588);
  }
  return result;
}

uint64_t destroy for SignedClinicalDataSubject(id *a1)
{
  return sub_232F41E4C();
}

uint64_t initializeWithCopy for SignedClinicalDataSubject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  id v10 = v3;
  sub_232F41ADC();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataSubject(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *a2;
  id v6 = v4;

  uint64_t v7 = v2[1];
  uint64_t v8 = v2[2];
  char v9 = v2[3];
  id v10 = v2[4];
  char v11 = v2[5];
  LOBYTE(v2) = *((unsigned char *)v2 + 48);
  sub_232F41ADC();
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = (_BYTE)v2;
  sub_232F41E4C();
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataSubject(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 40);
  char v6 = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  sub_232F41E4C();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataSubject(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataSubject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject()
{
  return &type metadata for SignedClinicalDataSubject;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.DecodingError()
{
  return &type metadata for SignedClinicalDataSubject.DecodingError;
}

uint64_t destroy for SignedClinicalDataSubject.FHIRBundle()
{
  return sub_232F41E4C();
}

uint64_t initializeWithCopy for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  char v8 = *((unsigned char *)a2 + 40);
  sub_232F41ADC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  char v8 = *((unsigned char *)a2 + 40);
  sub_232F41ADC();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  sub_232F41E4C();
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  sub_232F41E4C();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataSubject.FHIRBundle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_232F59F9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_232F59FA4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.FHIRBundle()
{
  return &type metadata for SignedClinicalDataSubject.FHIRBundle;
}

unsigned char *storeEnumTagSinglePayload for SignedClinicalDataSubject.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F5A08CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.CodingKeys()
{
  return &type metadata for SignedClinicalDataSubject.CodingKeys;
}

unint64_t sub_232F5A0C8()
{
  unint64_t result = qword_268757590;
  if (!qword_268757590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757590);
  }
  return result;
}

unint64_t sub_232F5A120()
{
  unint64_t result = qword_268757598;
  if (!qword_268757598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757598);
  }
  return result;
}

unint64_t sub_232F5A178()
{
  unint64_t result = qword_2687575A0;
  if (!qword_2687575A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687575A0);
  }
  return result;
}

uint64_t sub_232F5A1CC()
{
  unint64_t v0 = sub_23309C010();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t KeyedDecodingContainer.decodeIntOrDouble(to:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_23309BEB0();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_23309BEC0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_23309C0D0();
  if (!v2) {
    return v12;
  }
  id v28 = v2;
  id v13 = v2;
  sub_232F3DAA0();
  if (swift_dynamicCast())
  {
    unsigned int v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
    if (v14 == *MEMORY[0x263F8DCB0])
    {
      unsigned int v23 = v14;

      (*(void (**)(char *, uint64_t))(v9 + 96))(v11, v8);
      uint64_t v22 = *(char **)v11;
      sub_232F5A658();
      uint64_t v16 = v15;
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v7, &v11[*(int *)(v15 + 48)], v25);
      sub_23309C0C0();
      uint64_t v19 = v25;
      if (v17 > -9.22337204e18 && v17 < 9.22337204e18 && v17 == trunc(v17))
      {
        uint64_t v3 = (uint64_t)v17;
        (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);

        return v3;
      }
      swift_allocError();
      uint64_t v21 = v20;
      uint64_t v22 = (char *)v20 + *(int *)(v16 + 48);
      *uint64_t v20 = a2;
      sub_23309BE90();
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      sub_23309BE40();
      sub_23309B880();
      sub_23309BEA0();
      uint64_t v3 = v19;
      sub_23309B880();
      swift_bridgeObjectRelease();
      sub_23309BE80();
      (*(void (**)(void *, void, uint64_t))(v9 + 104))(v21, v23, v8);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }

  return v3;
}

void sub_232F5A658()
{
  if (!qword_2687575A8)
  {
    sub_232F5A6C8();
    sub_23309BEB0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2687575A8);
    }
  }
}

unint64_t sub_232F5A6C8()
{
  unint64_t result = qword_2687575B0;
  if (!qword_2687575B0)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687575B0);
  }
  return result;
}

double KeyedDecodingContainer.decodeIntOrDouble(to:forKey:)()
{
  uint64_t v2 = sub_23309BEB0();
  uint64_t v19 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_23309BEC0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (void *)((char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23309C0C0();
  if (!v0) {
    return v9;
  }
  id v20 = v0;
  id v10 = v0;
  sub_232F3DAA0();
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v1;
  }
  int v11 = (*(uint64_t (**)(void *, uint64_t))(v6 + 88))(v8, v5);
  if (v11 != *MEMORY[0x263F8DCB0])
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    goto LABEL_7;
  }
  int v18 = v11;

  (*(void (**)(void *, uint64_t))(v6 + 96))(v8, v5);
  void v17[2] = *v8;
  sub_232F5A658();
  v17[1] = v12;
  id v13 = (char *)v8 + *(int *)(v12 + 48);
  uint64_t v14 = v19;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v4, v13, v2);
  uint64_t v16 = sub_23309C0D0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v2);
  double v1 = (double)v16;

  return v1;
}

uint64_t sub_232F5AA38()
{
  uint64_t v0 = sub_23309AB60();
  MEMORY[0x270FA5388](v0);
  sub_23309ABA0();
  swift_allocObject();
  uint64_t v1 = sub_23309AB90();
  uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F06130];
  sub_232F5D514(0, &qword_268757650, MEMORY[0x263F06130], MEMORY[0x263F8E0F8]);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2330A1EB0;
  sub_23309AB40();
  sub_23309AB50();
  sub_232F5DFE8(&qword_268757658, MEMORY[0x263F06130]);
  sub_232F5D514(0, &qword_268757660, v2, MEMORY[0x263F8D488]);
  sub_232F5E030();
  sub_23309BDD0();
  uint64_t result = sub_23309AB70();
  qword_268770F60 = v1;
  return result;
}

void JSON.value.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      id v16 = *(id *)v1;
      *(void *)(a1 + 24) = sub_232F3A800(0, &qword_2687575C8);
      *(void *)a1 = v16;
      id v4 = v16;
      break;
    case 2:
      uint64_t v5 = *(void *)(v1 + 8);
      *(void *)(a1 + 24) = MEMORY[0x263F8D310];
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRetain();
      break;
    case 3:
      int64_t v6 = *(void *)(v2 + 16);
      uint64_t v7 = MEMORY[0x263F8EE78];
      if (v6)
      {
        uint64_t v19 = MEMORY[0x263F8EE78];
        double v17 = (char *)v2;
        sub_232F399AC(0, v6, 0);
        uint64_t v7 = v19;
        uint64_t v8 = (uint64_t)v17;
        double v9 = v17 + 48;
        uint64_t v10 = MEMORY[0x263F8EE58] + 8;
        do
        {
          JSON.value.getter(v18, v8);
          uint64_t v19 = v7;
          unint64_t v12 = *(void *)(v7 + 16);
          unint64_t v11 = *(void *)(v7 + 24);
          if (v12 >= v11 >> 1)
          {
            sub_232F399AC(v11 > 1, v12 + 1, 1);
            uint64_t v7 = v19;
          }
          *(void *)(v7 + 16) = v12 + 1;
          uint64_t v8 = sub_232F5D4A0((uint64_t)v18, v7 + 32 * v12 + 32, (uint64_t)&qword_268756FA0, v10, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_232F5D9C8);
          v9 += 24;
          --v6;
        }
        while (v6);
      }
      sub_232F5D39C();
      *(void *)(a1 + 24) = v15;
      *(void *)a1 = v7;
      break;
    case 4:
      uint64_t v13 = sub_232F5D120(*(void *)v1);
      sub_232F5DF50(0, &qword_2687575B8, MEMORY[0x263F8D060]);
      *(void *)(a1 + 24) = v14;
      *(void *)a1 = v13;
      break;
    case 5:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      break;
    default:
      *(void *)(a1 + 24) = MEMORY[0x263F8D4F8];
      *(unsigned char *)a1 = v2 & 1;
      break;
  }
}

uint64_t JSON.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_232F3A470(a1, (uint64_t)v61);
  if (!v62)
  {
    sub_232F5D41C(a1);
    uint64_t result = sub_232F5D41C((uint64_t)v61);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    char v6 = 5;
LABEL_10:
    *(unsigned char *)(a2 + 16) = v6;
    return result;
  }
  sub_232F3A680(v61, v63);
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  uint64_t v4 = MEMORY[0x263F8EE58];
  if (swift_dynamicCast())
  {
    sub_232F5D41C(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(void *)a2 = LOBYTE(v60[0]);
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  if (swift_dynamicCast())
  {
    id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithLongLong_, *(void *)&v60[0]);
LABEL_9:
    id v8 = v7;
    sub_232F5D41C(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  if (swift_dynamicCast())
  {
    id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedLongLong_, *(void *)&v60[0]);
    goto LABEL_9;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  type metadata accessor for Decimal(0);
  if (swift_dynamicCast())
  {
    id v9 = objc_allocWithZone(MEMORY[0x263F087B0]);
    *(_DWORD *)long long v61 = v60[0];
    *(_OWORD *)&v61[4] = *(_OWORD *)((char *)v60 + 4);
    id v7 = objc_msgSend(v9, sel_initWithDecimal_, v61);
    goto LABEL_9;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  if (swift_dynamicCast())
  {
    id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *(double *)v60);
    goto LABEL_9;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  if (swift_dynamicCast())
  {
    sub_232F5D41C(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(_OWORD *)a2 = v60[0];
    char v6 = 2;
    goto LABEL_10;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  sub_232F5D9C8(0, &qword_268757048, v4 + 8, MEMORY[0x263F8D488]);
  if (swift_dynamicCast())
  {
    uint64_t v10 = *(void *)(*(void *)&v60[0] + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)&v60[0] + 32;
      swift_bridgeObjectRetain();
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
      do
      {
        sub_232F397F8(v11, (uint64_t)v61);
        sub_232F397F8((uint64_t)v61, (uint64_t)v60);
        JSON.init(_:)(&v58, v60);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        unsigned __int8 v14 = v59;
        if (v59 != 255)
        {
          long long v57 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v12 = sub_232F3D484(0, v12[2] + 1, 1, v12);
          }
          unint64_t v16 = v12[2];
          unint64_t v15 = v12[3];
          if (v16 >= v15 >> 1) {
            unint64_t v12 = sub_232F3D484((void *)(v15 > 1), v16 + 1, 1, v12);
          }
          id v12[2] = v16 + 1;
          uint64_t v13 = &v12[3 * v16];
          *((_OWORD *)v13 + 2) = v57;
          *((unsigned char *)v13 + 48) = v14;
        }
        v11 += 32;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v12 = (void *)MEMORY[0x263F8EE78];
    }
    sub_232F5D41C(a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = 0;
    char v6 = 3;
    goto LABEL_10;
  }
  sub_232F397F8((uint64_t)v63, (uint64_t)v61);
  sub_232F5DEF4(0, &qword_268756FB0, v4 + 8, MEMORY[0x263F8D060]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_232F5D41C(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    char v6 = -1;
    goto LABEL_10;
  }
  int64_t v17 = 0;
  uint64_t v18 = *(void *)&v60[0];
  uint64_t v55 = *(void *)&v60[0] + 64;
  uint64_t v19 = 1 << *(unsigned char *)(*(void *)&v60[0] + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(*(void *)&v60[0] + 64);
  int64_t v56 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v51 = *(void *)&v60[0] + 104;
  uint64_t v22 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_33;
    }
    int64_t v28 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v28 >= v56)
    {
      int64_t v30 = v17;
LABEL_39:
      unint64_t v21 = 0;
      int64_t v17 = v30;
      memset(v60, 0, sizeof(v60));
      goto LABEL_40;
    }
    unint64_t v29 = *(void *)(v55 + 8 * v28);
    if (!v29)
    {
      int64_t v30 = v17 + 1;
      if (v17 + 2 >= v56) {
        goto LABEL_39;
      }
      unint64_t v29 = *(void *)(v55 + 8 * (v17 + 2));
      if (v29)
      {
        int64_t v28 = v17 + 2;
      }
      else
      {
        int64_t v30 = v17 + 2;
        if (v17 + 3 >= v56) {
          goto LABEL_39;
        }
        unint64_t v29 = *(void *)(v55 + 8 * (v17 + 3));
        if (v29)
        {
          int64_t v28 = v17 + 3;
        }
        else
        {
          int64_t v28 = v17 + 4;
          int64_t v30 = v17 + 3;
          if (v17 + 4 >= v56) {
            goto LABEL_39;
          }
          unint64_t v29 = *(void *)(v55 + 8 * v28);
          if (!v29)
          {
            while (v56 - 5 != v17)
            {
              unint64_t v29 = *(void *)(v51 + 8 * v17++);
              if (v29)
              {
                int64_t v28 = v17 + 4;
                goto LABEL_37;
              }
            }
            int64_t v30 = v56 - 1;
            goto LABEL_39;
          }
        }
      }
    }
LABEL_37:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v17 = v28;
LABEL_33:
    uint64_t v25 = *(void *)(v18 + 56);
    uint64_t v26 = (void *)(*(void *)(v18 + 48) + 16 * v24);
    uint64_t v27 = v26[1];
    *(void *)&v60[0] = *v26;
    *((void *)&v60[0] + 1) = v27;
    sub_232F397F8(v25 + 32 * v24, (uint64_t)&v60[1]);
    swift_bridgeObjectRetain();
LABEL_40:
    sub_232F5D4A0((uint64_t)v60, (uint64_t)v61, (uint64_t)&unk_2687575D0, (uint64_t)sub_232F5D578, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_232F5D514);
    uint64_t v31 = *(void *)&v61[8];
    if (!*(void *)&v61[8])
    {
      sub_232F5D41C(a1);
      swift_release();
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      *(void *)a2 = v22;
      *(void *)(a2 + 8) = 0;
      char v6 = 4;
      goto LABEL_10;
    }
    uint64_t v32 = *(void *)v61;
    sub_232F3A680(&v61[16], v60);
    JSON.init(_:)(&v58, v60);
    char v33 = v59;
    if (v59 == 255)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v53 = *((void *)&v58 + 1);
      uint64_t v54 = (void *)v58;
      sub_232EBCE74((id)v58, *((uint64_t *)&v58 + 1), v59);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v60[0] = v22;
      unint64_t v35 = sub_232F393E0(v32, v31);
      uint64_t v36 = v22[2];
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_73;
      }
      if (v22[3] >= v38)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v22 = *(void **)&v60[0];
          if (v34) {
            goto LABEL_54;
          }
        }
        else
        {
          char v50 = v34;
          sub_232F5D7CC();
          uint64_t v22 = *(void **)&v60[0];
          if (v50) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        char v49 = v34;
        sub_232F5CAC8(v38, isUniquelyReferenced_nonNull_native);
        unint64_t v39 = sub_232F393E0(v32, v31);
        if ((v49 & 1) != (v40 & 1)) {
          goto LABEL_75;
        }
        unint64_t v35 = v39;
        uint64_t v22 = *(void **)&v60[0];
        if (v49)
        {
LABEL_54:
          uint64_t v48 = v22[7] + 24 * v35;
          sub_232EBCF30(*(void **)v48, *(void *)(v48 + 8), *(unsigned char *)(v48 + 16));
          uint64_t v44 = v54;
          *(void *)uint64_t v48 = v54;
          *(void *)(v48 + 8) = v53;
          *(unsigned char *)(v48 + 16) = v33;
          uint64_t v43 = v53;
          goto LABEL_55;
        }
      }
      v22[(v35 >> 6) + 8] |= 1 << v35;
      uint64_t v41 = (uint64_t *)(v22[6] + 16 * v35);
      *uint64_t v41 = v32;
      v41[1] = v31;
      uint64_t v42 = v22[7] + 24 * v35;
      uint64_t v43 = v53;
      uint64_t v44 = v54;
      *(void *)uint64_t v42 = v54;
      *(void *)(v42 + 8) = v53;
      *(unsigned char *)(v42 + 16) = v33;
      uint64_t v45 = v22[2];
      BOOL v46 = __OFADD__(v45, 1);
      uint64_t v47 = v45 + 1;
      if (v46) {
        goto LABEL_74;
      }
      v22[2] = v47;
      swift_bridgeObjectRetain();
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_232EBCF1C(v44, v43, v33);
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = sub_23309C340();
  __break(1u);
  return result;
}

uint64_t JSON.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C450();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v36, v37);
    if (sub_23309C250())
    {
      double v5 = 0.0;
      unint64_t v6 = 0;
      char v7 = 5;
LABEL_4:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      *(double *)a2 = v5;
      *(void *)(a2 + 8) = v6;
      *(unsigned char *)(a2 + 16) = v7;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    __swift_project_boxed_opaque_existential_1(v36, v37);
    sub_232F5BD7C(MEMORY[0x263F8D4F8], (uint64_t)&v32);
    if (LOBYTE(v32) != 2)
    {
      unint64_t v6 = 0;
      char v7 = 0;
      *(void *)&double v5 = LOBYTE(v32) & 1;
      goto LABEL_4;
    }
    __swift_project_boxed_opaque_existential_1(v36, v37);
    sub_232F5BD7C(MEMORY[0x263F8E5C0], (uint64_t)&v32);
    if (v33 == 1)
    {
      __swift_project_boxed_opaque_existential_1(v36, v37);
      sub_232F5BD7C(MEMORY[0x263F8E970], (uint64_t)&v32);
      if (v33 == 1)
      {
        __swift_project_boxed_opaque_existential_1(v36, v37);
        type metadata accessor for Decimal(0);
        uint64_t v10 = v9;
        sub_232F5DFE8(&qword_2687575E0, type metadata accessor for Decimal);
        sub_232F5BD7C(v10, (uint64_t)&v32);
        if (v35)
        {
          __swift_project_boxed_opaque_existential_1(v36, v37);
          sub_232F5BD7C(MEMORY[0x263F8D538], (uint64_t)&v32);
          if (v33)
          {
            __swift_project_boxed_opaque_existential_1(v36, v37);
            sub_232F5BD7C(MEMORY[0x263F8D310], (uint64_t)&v32);
            unint64_t v6 = v33;
            if (v33)
            {
              double v5 = v32;
              char v7 = 2;
            }
            else
            {
              __swift_project_boxed_opaque_existential_1(v36, v37);
              sub_232F5D9C8(0, &qword_2687575E8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D488]);
              uint64_t v23 = v22;
              sub_232F5DAB0(&qword_2687575F0, (void (*)(void))sub_232EBCE0C);
              sub_232F5BD7C(v23, (uint64_t)&v32);
              double v5 = v32;
              if (v32 == 0.0)
              {
                __swift_project_boxed_opaque_existential_1(v36, v37);
                sub_232F5DEF4(0, &qword_2687575F8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D060]);
                uint64_t v25 = v24;
                sub_232F5DA14(&qword_268757600, (void (*)(void))sub_232EBCE0C);
                sub_232F5BD7C(v25, (uint64_t)&v32);
                double v5 = v32;
                if (v32 == 0.0)
                {
                  uint64_t v26 = sub_23309BEC0();
                  swift_allocError();
                  int64_t v28 = v27;
                  sub_232F5A658();
                  *int64_t v28 = &type metadata for JSON;
                  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
                  sub_23309C440();
                  sub_23309BE80();
                  (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x263F8DCB0], v26);
                  swift_willThrow();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
                  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
                }
                unint64_t v6 = 0;
                char v7 = 4;
              }
              else
              {
                unint64_t v6 = 0;
                char v7 = 3;
              }
            }
            goto LABEL_4;
          }
          id v21 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v32);
          goto LABEL_21;
        }
        int v15 = LODWORD(v32);
        __int16 v16 = v33;
        __int16 v17 = v34;
        uint64_t v18 = HIDWORD(*(void *)&v32);
        uint64_t v19 = HIWORD(*(void *)&v32);
        unint64_t v20 = v33 >> 16;
        unint64_t v29 = HIDWORD(v33);
        unint64_t v30 = HIWORD(v33);
        unsigned int v31 = HIWORD(v34);
        id v12 = objc_allocWithZone(MEMORY[0x263F087B0]);
        uint64_t v13 = sel_initWithDecimal_;
        LODWORD(v32) = v15;
        WORD2(v32) = v18;
        HIWORD(v32) = v19;
        LOWORD(v33) = v16;
        WORD1(v33) = v20;
        WORD2(v33) = v29;
        HIWORD(v33) = v30;
        LOWORD(v34) = v17;
        HIWORD(v34) = v31;
        unsigned __int8 v14 = &v32;
LABEL_20:
        id v21 = objc_msgSend(v12, v13, v14);
LABEL_21:
        double v5 = *(double *)&v21;
        unint64_t v6 = 0;
        char v7 = 1;
        goto LABEL_4;
      }
      double v11 = v32;
      id v12 = objc_allocWithZone(NSNumber);
      uint64_t v13 = sel_initWithUnsignedLongLong_;
    }
    else
    {
      double v11 = v32;
      id v12 = objc_allocWithZone(NSNumber);
      uint64_t v13 = sel_initWithLongLong_;
    }
    unsigned __int8 v14 = *(double **)&v11;
    goto LABEL_20;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_232F5BD7C(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_23309BEC0();
  uint64_t v14 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23309C240();
  if (v2)
  {
    id v15 = v2;
    id v8 = v2;
    sub_232F3DAA0();
    if (swift_dynamicCast())
    {
      uint64_t v9 = v14;
      if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v7, v5) == *MEMORY[0x263F8DCB0])
      {

        (*(void (**)(char *, uint64_t))(v9 + 96))(v7, v5);
        sub_232F5A658();
        double v11 = &v7[*(int *)(v10 + 48)];
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
        uint64_t v12 = sub_23309BEB0();
        (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);

        return;
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v5);
    }
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  }
}

uint64_t JSON.encode(to:)(void *a1)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23309C470();
  switch(v4)
  {
    case 1:
      self;
      uint64_t v5 = (void *)swift_dynamicCastObjCClass();
      id v6 = v2;
      if (v5)
      {
        objc_msgSend(v5, sel_decimalValue);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
        type metadata accessor for Decimal(0);
        sub_232F5DFE8(&qword_268757618, type metadata accessor for Decimal);
        sub_23309C290();
      }
      else
      {
        id v8 = v6;
        if (*(unsigned char *)objc_msgSend(v8, sel_objCType) == 100)
        {
          objc_msgSend(v8, sel_doubleValue);
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
          sub_23309C280();
        }
        else
        {
          id v9 = v8;
          if (*(unsigned char *)objc_msgSend(v9, sel_objCType) == 81)
          {
            objc_msgSend(v9, sel_unsignedLongLongValue);
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
            sub_23309C2B0();
          }
          else
          {
            objc_msgSend(v9, sel_longLongValue);
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
            sub_23309C2A0();
          }
        }
      }
      sub_232EBCF30(v2, v3, 1);
      break;
    case 2:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      sub_23309C260();
      break;
    case 3:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      sub_232F5D9C8(0, &qword_2687575E8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D488]);
      sub_232F5DAB0(&qword_268757610, (void (*)(void))sub_232EBCEC8);
      goto LABEL_8;
    case 4:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      sub_232F5DEF4(0, &qword_2687575F8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D060]);
      sub_232F5DA14(&qword_268757608, (void (*)(void))sub_232EBCEC8);
LABEL_8:
      sub_23309C290();
      break;
    case 5:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      sub_23309C2C0();
      break;
    default:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
      sub_23309C270();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_232F5C42C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return JSON.init(from:)(a1, a2);
}

uint64_t sub_232F5C444(void *a1)
{
  return JSON.encode(to:)(a1);
}

uint64_t sub_232F5C45C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_232F3A4FC();
  uint64_t v6 = sub_23309BFA0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unsigned int v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unsigned int v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      id v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_232F3A680(v24, v35);
      }
      else
      {
        sub_232F397F8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_23309C3D0();
      sub_23309B800();
      uint64_t result = sub_23309C420();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      id v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *id v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_232F3A680(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_232F5C758(uint64_t a1, char a2)
{
  return sub_232F5C7A8(a1, a2, &qword_268757620, &qword_268757628, type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_232F5C780(uint64_t a1, char a2)
{
  return sub_232F5C7A8(a1, a2, &qword_268757630, &qword_2687568D8, type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_232F5C7A8(uint64_t a1, char a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v8 = *v5;
  sub_232F5DC50(0, a3, a4, a5);
  char v39 = a2;
  uint64_t v9 = sub_23309BFA0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_40;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v38 = v8 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v22 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v37) {
      break;
    }
    uint64_t v25 = (void *)(v8 + 64);
    unint64_t v26 = *(void *)(v38 + 8 * v24);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v16);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v37)
        {
LABEL_33:
          swift_release();
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v26 = *(void *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v16 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_42;
            }
            if (v16 >= v37) {
              goto LABEL_33;
            }
            unint64_t v26 = *(void *)(v38 + 8 * v16);
            ++v27;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v16 = v27;
      }
    }
LABEL_30:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_31:
    uint64_t v32 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v23);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = *(void *)(*(void *)(v8 + 56) + 8 * v23);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23309C3D0();
    sub_23309B800();
    uint64_t result = sub_23309C420();
    uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      unint64_t v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    id v21 = (void *)(*(void *)(v10 + 48) + 16 * v20);
    *id v21 = v34;
    v21[1] = v33;
    *(void *)(*(void *)(v10 + 56) + 8 * v20) = v35;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v25 = (void *)(v8 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
  if (v36 >= 64) {
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v36;
  }
  *(void *)(v8 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v6 = v10;
  return result;
}

uint64_t sub_232F5CAC8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_232F5DEF4(0, &qword_268757640, (uint64_t)&type metadata for JSON, MEMORY[0x263F8DFB0]);
  char v40 = a2;
  uint64_t v6 = sub_23309BFA0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v34 = *(void **)v32;
      uint64_t v33 = *(void *)(v32 + 8);
      char v35 = *(unsigned char *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_232EBCE74(v34, v33, v35);
      }
      sub_23309C3D0();
      sub_23309B800();
      uint64_t result = sub_23309C420();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(unsigned char *)(v19 + 16) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_232F5CE14(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_232F5DCCC();
  char v38 = a2;
  uint64_t v6 = sub_23309BFA0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_23309C3D0();
    sub_23309B800();
    uint64_t result = sub_23309C420();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_232F5D120(uint64_t a1)
{
  sub_232F5DF50(0, &qword_268757648, MEMORY[0x263F8DFB0]);
  uint64_t result = sub_23309BF90();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v27 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 64;
  uint64_t v25 = MEMORY[0x263F8EE58] + 8;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = swift_bridgeObjectRetain();
    JSON.value.getter(v26, v18);
    *(void *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v19 = (void *)(v3[6] + 16 * i);
    *unint64_t v19 = v16;
    v19[1] = v17;
    uint64_t result = sub_232F5D4A0((uint64_t)v26, v3[7] + 32 * i, (uint64_t)&qword_268756FA0, v25, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_232F5D9C8);
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v22;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v24) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v24) {
        return (uint64_t)v3;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v24) {
          return (uint64_t)v3;
        }
        unint64_t v13 = *(void *)(v23 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v24) {
    return (uint64_t)v3;
  }
  unint64_t v13 = *(void *)(v23 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v24) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_232F5D39C()
{
  if (!qword_2687575C0)
  {
    sub_232F5D9C8(255, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687575C0);
    }
  }
}

uint64_t sub_232F5D41C(uint64_t a1)
{
  sub_232F5D9C8(0, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_232F5D4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void sub_232F5D514(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_232F5D578()
{
  if (!qword_2687575D8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2687575D8);
    }
  }
}

void *sub_232F5D5E8()
{
  uint64_t v1 = v0;
  sub_232F3A4FC();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23309BF90();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_232F397F8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    BOOL v21 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v21 = v19;
    v21[1] = v18;
    sub_232F3A680(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_232F5D7CC()
{
  uint64_t v1 = v0;
  sub_232F5DEF4(0, &qword_268757640, (uint64_t)&type metadata for JSON, MEMORY[0x263F8DFB0]);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23309BF90();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    int64_t v22 = *(void **)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    int64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    char v25 = *(unsigned char *)(v21 + 16);
    *int64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(unsigned char *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    uint64_t result = sub_232EBCE74(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_232F5D9C8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_232F5DA14(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F5DEF4(255, &qword_2687575F8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D060]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232F5DAB0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232F5D9C8(255, &qword_2687575E8, (uint64_t)&type metadata for JSON, MEMORY[0x263F8D488]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void destroy for JSON(uint64_t a1)
{
}

uint64_t _s23HealthRecordsExtraction4JSONOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_232EBCE74(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSON(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_232EBCE74(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_232EBCF30(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSON(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_232EBCF30(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for JSON()
{
  return &type metadata for JSON;
}

void sub_232F5DC50(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_232F5D514(255, a3, a4, MEMORY[0x263F8D488]);
    unint64_t v5 = sub_23309BFC0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_232F5DCCC()
{
  if (!qword_268757638)
  {
    sub_232F3A800(255, &qword_268757008);
    unint64_t v0 = sub_23309BFC0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757638);
    }
  }
}

id sub_232F5DD44()
{
  uint64_t v1 = v0;
  sub_232F5DCCC();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_23309BF90();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_232F5DEF4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x263F8D310], a3, MEMORY[0x263F8D320]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_232F5DF50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, uint64_t, void))
{
  if (!*a2)
  {
    sub_232F5D9C8(255, &qword_268756FA0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
    unint64_t v7 = a3(a1, MEMORY[0x263F8D310], v6, MEMORY[0x263F8D320]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_232F5DFE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_232F5E030()
{
  unint64_t result = qword_268757668;
  if (!qword_268757668)
  {
    sub_232F5D514(255, &qword_268757660, MEMORY[0x263F06130], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757668);
  }
  return result;
}

uint64_t sub_232F5E0B8()
{
  sub_232F61F20(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v30 - v2;
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Coding();
  uint64_t v31 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F61F20(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v11 - 8);
  int64_t v13 = (char *)&v30 - v12;
  uint64_t result = *(void *)(v0 + 56);
  if (result)
  {
    uint64_t v36 = *(void *)(result + 16);
    if (!v36) {
      return 0;
    }
    uint64_t v35 = result + 32;
    uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v48 = (void (**)(char *, uint64_t))(v5 + 8);
    char v49 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v34 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
    uint64_t v32 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
    uint64_t v30 = result;
    swift_bridgeObjectRetain_n();
    uint64_t v15 = 0;
    uint64_t v16 = v13;
    id v33 = v13;
    uint64_t v41 = v3;
    uint64_t v42 = v8;
    while (1)
    {
      uint64_t v18 = v35 + 24 * v15;
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v40 = *(void *)(v18 + 8);
      uint64_t v44 = qword_268757688;
      if (v19)
      {
        uint64_t v47 = off_268757678;
        uint64_t v20 = *(void *)(v19 + 16);
        uint64_t v37 = v15;
        uint64_t v39 = v19;
        if (v20)
        {
          uint64_t v43 = qword_268757670;
          uint64_t v38 = qword_268757680;
          uint64_t v21 = v31;
          uint64_t v22 = v19 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v50 = *(void *)(v21 + 72);
          unint64_t v23 = v45;
          while (1)
          {
            sub_232F62048(v22, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Coding);
            sub_232F61FDC((uint64_t)v10, (uint64_t)v3, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
            if ((*v23)(v3, 1, v4) == 1)
            {
              sub_232F62160((uint64_t)v3, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
            }
            else
            {
              (*v49)(v7, v3, v4);
              int64_t v24 = (uint64_t *)&v10[*(int *)(v8 + 20)];
              uint64_t v25 = v24[1];
              if (v25)
              {
                uint64_t v46 = *v24;
                uint64_t v53 = sub_23309AEE0();
                uint64_t v54 = v26;
                uint64_t v51 = v43;
                uint64_t v52 = (uint64_t)v47;
                sub_232F379FC();
                uint64_t v27 = sub_23309BD60();
                swift_bridgeObjectRelease();
                if (v27)
                {
                  (*v48)(v7, v4);
                  uint64_t v3 = v41;
                  uint64_t v8 = v42;
                  unint64_t v23 = v45;
                }
                else
                {
                  uint64_t v53 = v46;
                  uint64_t v54 = v25;
                  uint64_t v51 = v38;
                  uint64_t v52 = v44;
                  uint64_t v28 = sub_23309BD60();
                  (*v48)(v7, v4);
                  uint64_t v3 = v41;
                  uint64_t v8 = v42;
                  unint64_t v23 = v45;
                  if (!v28)
                  {
                    uint64_t v17 = (uint64_t)v33;
                    sub_232F61F74((uint64_t)v10, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Coding);
                    (*v34)(v17, 0, 1, v8);
                    goto LABEL_20;
                  }
                }
              }
              else
              {
                (*v48)(v7, v4);
              }
            }
            sub_232F621BC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Coding);
            v22 += v50;
            if (!--v20) {
              goto LABEL_19;
            }
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_19:
        uint64_t v17 = (uint64_t)v33;
        (*v34)((uint64_t)v33, 1, 1, v8);
LABEL_20:
        swift_bridgeObjectRelease();
        int v29 = (*v32)(v17, 1, v8);
        uint64_t v15 = v37;
        if (v29 != 1)
        {
          sub_232F62160(v17, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        uint64_t v17 = (uint64_t)v16;
        (*v34)((uint64_t)v16, 1, 1, v8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      ++v15;
      uint64_t v16 = (char *)v17;
      sub_232F62160(v17, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v15 == v36)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_232F5E7C4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_232F5E7E4, 0, 0);
}

id sub_232F5E7E4()
{
  uint64_t v1 = v0[3];
  long long v9 = *(_OWORD *)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v2 = sub_233001A34();
  v0[4] = v2;
  sub_232F3A800(0, (unint64_t *)&qword_2687576B0);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_diagnosticTestReportTypeForIdentifier_, *MEMORY[0x263F09500], v9, v10);
  v0[5] = result;
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v0[2];
    uint64_t v6 = v5 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    if ((*(unsigned char *)(v6 + 16) & 4) != 0)
    {

      uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
      return (id)v8(v2);
    }
    else
    {
      v0[6] = *(void *)(v6 + *(int *)(type metadata accessor for ExtractionContext() + 44));
      swift_retain();
      unint64_t v7 = (void *)swift_task_alloc();
      v0[7] = v7;
      *unint64_t v7 = v0;
      v7[1] = sub_232F5E978;
      return (id)sub_232FDDCD0(v2, (uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_232F5E978(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 32);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  swift_release();

  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  return v5(a1);
}

uint64_t sub_232F5EAC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v211 = a1;
  sub_232F61F20(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v3 - 8);
  v218 = (char *)&v203 - v4;
  uint64_t v5 = type metadata accessor for RecordExtractionContext();
  MEMORY[0x270FA5388](v5 - 8);
  v216 = (uint64_t *)((char *)&v203 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Reference();
  uint64_t v207 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  v238 = (uint64_t *)((char *)&v203 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v232 = type metadata accessor for Attachment();
  uint64_t v209 = *(void *)(v232 - 8);
  MEMORY[0x270FA5388](v232);
  v236 = (char *)&v203 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = (void (*)(uint64_t, uint64_t))sub_23309B120();
  v222 = (void (**)(void, void))*((void *)v223 - 1);
  MEMORY[0x270FA5388](v223);
  uint64_t v221 = (uint64_t)&v203 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = sub_23309B190();
  uint64_t v230 = *(void *)(v226 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v226);
  uint64_t v219 = (uint64_t)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v240 = (uint64_t)&v203 - v14;
  MEMORY[0x270FA5388](v13);
  v220 = (char *)&v203 - v15;
  uint64_t v16 = type metadata accessor for FHIRDateTime();
  v245 = *(void **)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v214 = (uint64_t)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v215 = (uint64_t)&v203 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v234 = (uint64_t)&v203 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v242 = (uint64_t)&v203 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v244 = (uint64_t)&v203 - v26;
  MEMORY[0x270FA5388](v25);
  v229 = (char *)&v203 - v27;
  uint64_t v28 = sub_23309AD60();
  uint64_t v29 = MEMORY[0x270FA5388](v28 - 8);
  v210 = (char *)&v203 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  v208 = (char *)&v203 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  v225 = (char *)&v203 - v34;
  MEMORY[0x270FA5388](v33);
  v237 = (char *)&v203 - v35;
  sub_232F61F20(0, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  v239 = (char *)&v203 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v203 - v39;
  uint64_t v41 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  uint64_t v42 = MEMORY[0x270FA5388](v41);
  v228 = (char *)&v203 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v45 = (char *)&v203 - v44;
  sub_232F61F20(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v47 = MEMORY[0x270FA5388](v46 - 8);
  v217 = (char *)&v203 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x270FA5388](v47);
  uint64_t v212 = (uint64_t)&v203 - v50;
  uint64_t v51 = MEMORY[0x270FA5388](v49);
  uint64_t v213 = (uint64_t)&v203 - v52;
  uint64_t v53 = MEMORY[0x270FA5388](v51);
  v235 = (char *)&v203 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  uint64_t v224 = (uint64_t)&v203 - v56;
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  *(void *)&long long v241 = (char *)&v203 - v58;
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  uint64_t v243 = (uint64_t)&v203 - v60;
  uint64_t v61 = MEMORY[0x270FA5388](v59);
  long long v63 = (char *)&v203 - v62;
  MEMORY[0x270FA5388](v61);
  long long v65 = (char *)&v203 - v64;
  uint64_t v227 = v2 + *(int *)(v41 + 44);
  sub_232F61FDC(v227, (uint64_t)v63, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v233 = v2;
  uint64_t v66 = v2;
  uint64_t v67 = v245;
  sub_232F62048(v66, (uint64_t)v45, type metadata accessor for ModelsR4.DiagnosticReport);
  uint64_t v68 = (char *)(v67 + 6);
  v246 = (uint64_t (*)(char *, uint64_t, uint64_t))v67[6];
  int v69 = v246(v63, 1, v16);
  v231 = (int *)v41;
  if (v69 == 1)
  {
    sub_232F61FDC((uint64_t)&v45[*(int *)(v41 + 48)], (uint64_t)v40, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    sub_232F621BC((uint64_t)v45, type metadata accessor for ModelsR4.DiagnosticReport);
    uint64_t v70 = type metadata accessor for Period();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v40, 1, v70) == 1)
    {
      sub_232F62160((uint64_t)v40, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      uint64_t v71 = v16;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v67[7])(v65, 1, 1, v16);
    }
    else
    {
      sub_232F61FDC((uint64_t)v40, (uint64_t)v65, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F621BC((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for Period);
      uint64_t v71 = v16;
    }
    uint64_t v73 = v241;
    sub_232F62160((uint64_t)v63, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    int v74 = v246(v65, 1, v71);
    uint64_t v72 = v243;
    uint64_t v75 = (uint64_t)v239;
    if (v74 == 1)
    {
      sub_232F62160((uint64_t)v65, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v237 = 0;
      uint64_t v76 = v247;
      goto LABEL_18;
    }
  }
  else
  {
    sub_232F621BC((uint64_t)v45, type metadata accessor for ModelsR4.DiagnosticReport);
    sub_232F61F74((uint64_t)v63, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    ((void (*)(char *, void, uint64_t, uint64_t))v67[7])(v65, 0, 1, v16);
    uint64_t v71 = v16;
    uint64_t v72 = v243;
  }
  if (*((void *)v65 + 7) == 1)
  {
    if (v65[19])
    {
      if (v65[17]) {
        uint64_t v77 = 3;
      }
      else {
        uint64_t v77 = 2;
      }
    }
    else
    {
      uint64_t v77 = 1;
    }
  }
  else
  {
    uint64_t v77 = 0;
  }
  uint64_t v78 = sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  uint64_t v79 = (uint64_t)v237;
  FHIRDateTime.asDateComponents()();
  char v80 = (uint64_t *)&v65[*(int *)(v71 + 32)];
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  swift_bridgeObjectRetain();
  uint64_t v83 = v82;
  uint64_t v84 = v81;
  uint64_t v85 = v78;
  uint64_t v86 = v247;
  uint64_t v87 = (char *)sub_233017340(v79, v83, v84, v77);
  uint64_t v76 = v86;
  if (v86)
  {
    uint64_t v88 = (uint64_t)v65;
    goto LABEL_34;
  }
  v237 = v87;
  sub_232F621BC((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v75 = (uint64_t)v239;
  uint64_t v73 = v241;
LABEL_18:
  sub_232F61FDC(v227, v73, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v89 = v233;
  uint64_t v90 = (uint64_t)v228;
  sub_232F62048(v233, (uint64_t)v228, type metadata accessor for ModelsR4.DiagnosticReport);
  if (v246((char *)v73, 1, v71) == 1)
  {
    sub_232F61FDC(v90 + v231[12], v75, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    sub_232F621BC(v90, type metadata accessor for ModelsR4.DiagnosticReport);
    uint64_t v91 = type metadata accessor for Period();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 48))(v75, 1, v91) == 1)
    {
      sub_232F62160(v75, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v67[7])(v72, 1, 1, v71);
    }
    else
    {
      sub_232F61FDC(v75 + *(int *)(v91 + 20), v72, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F621BC(v75, (uint64_t (*)(void))type metadata accessor for Period);
    }
    sub_232F62160(v241, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v246((char *)v72, 1, v71) == 1)
    {
      sub_232F62160(v72, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      id v204 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    sub_232F621BC(v90, type metadata accessor for ModelsR4.DiagnosticReport);
    sub_232F61F74(v73, v72, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v67[7])(v72, 0, 1, v71);
  }
  if (*(void *)(v72 + 56) == 1)
  {
    if (*(unsigned char *)(v72 + 19))
    {
      if (*(unsigned char *)(v72 + 17)) {
        uint64_t v92 = 3;
      }
      else {
        uint64_t v92 = 2;
      }
    }
    else
    {
      uint64_t v92 = 1;
    }
  }
  else
  {
    uint64_t v92 = 0;
  }
  uint64_t v93 = sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  uint64_t v94 = (uint64_t)v225;
  uint64_t v95 = v243;
  FHIRDateTime.asDateComponents()();
  uint64_t v96 = (uint64_t *)(v95 + *(int *)(v71 + 32));
  uint64_t v98 = *v96;
  uint64_t v97 = v96[1];
  swift_bridgeObjectRetain();
  uint64_t v99 = v97;
  uint64_t v85 = v93;
  id v100 = sub_233017340(v94, v98, v99, v92);
  if (v76)
  {

    uint64_t v88 = v95;
    goto LABEL_34;
  }
  id v204 = v100;
  sub_232F621BC(v95, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v67 = v245;
LABEL_37:
  uint64_t v102 = (char *)objc_msgSend(self, sel_FHIRDiagnosticReportStatus);
  uint64_t v103 = *(void *)(v89 + 40);
  uint64_t v104 = *(void *)(v89 + 48);
  uint64_t v105 = sub_23309B710();
  v250[0] = v102;
  v250[1] = v103;
  v250[2] = v104;
  v250[3] = v105;
  v250[5] = 0;
  v250[6] = 0;
  v225 = v106;
  v250[4] = v106;
  uint64_t v107 = *(void *)(v89 + 56);
  v228 = v102;
  uint64_t v227 = v104;
  v247 = v76;
  uint64_t v203 = v71;
  swift_bridgeObjectRetain();
  if (v107) {
    uint64_t v205 = Array<A>.asCodingCollectionArray()(v107);
  }
  else {
    uint64_t v205 = 0;
  }
  uint64_t v108 = *(void *)(v89 + 80);
  long long v248 = *(_OWORD *)(v89 + 64);
  uint64_t v249 = v108;
  uint64_t v109 = v89;
  uint64_t v110 = (void *)sub_233001A34();
  uint64_t v111 = v220;
  sub_23309B0B0();
  uint64_t v112 = v221;
  sub_23304E504(v221);
  sub_23309B0A0();
  v222[1](v112, v223);
  uint64_t v113 = *(void (**)(char *, uint64_t))(v230 + 8);
  uint64_t v114 = v230 + 8;
  v113(v111, v226);
  uint64_t v85 = (uint64_t)v229;
  v115 = v247;
  FHIRDateTime.init(_:)((uint64_t)v229);
  if (v115)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return v85;
  }
  v223 = (void (*)(uint64_t, uint64_t))v113;
  v222 = (void (**)(void, void))v110;
  v116 = *(char **)(v109 + v231[15]);
  v247 = 0;
  if (v116)
  {
    sub_232F62048(v85, v244, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    v117 = v116;
    uint64_t v118 = *((void *)v116 + 2);
    uint64_t v119 = v203;
    v220 = v117;
    if (v118)
    {
      uint64_t v230 = v114;
      uint64_t v120 = (uint64_t)&v117[(*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80)];
      uint64_t v243 = *(void *)(v209 + 72);
      swift_bridgeObjectRetain();
      long long v241 = xmmword_2330A1880;
      v239 = (char *)0x80000002330B57C0;
      uint64_t v121 = v232;
      uint64_t v122 = (uint64_t)v236;
      uint64_t v123 = (uint64_t)v235;
      v206 = v68;
      while (1)
      {
        sub_232F62048(v120, v122, (uint64_t (*)(void))type metadata accessor for Attachment);
        sub_232F61FDC(v122 + *(int *)(v121 + 40), v123, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if (v246((char *)v123, 1, v119) != 1) {
          break;
        }
        sub_232F62160(v123, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_46:
        sub_232F621BC(v122, (uint64_t (*)(void))type metadata accessor for Attachment);
        v120 += v243;
        if (!--v118) {
          goto LABEL_57;
        }
      }
      uint64_t v124 = v242;
      sub_232F61F74(v123, v242, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v125 = v247;
      FHIRDateTime.asNSDate()(v240);
      if (v125)
      {
        uint64_t v126 = v119;
        v247 = 0;
        sub_232F620B0();
        uint64_t v128 = swift_allocObject();
        *(_OWORD *)(v128 + 16) = v241;
        *(void *)&long long v248 = 0;
        *((void *)&v248 + 1) = 0xE000000000000000;
        sub_23309BE40();
        swift_bridgeObjectRelease();
        *(void *)&long long v248 = 0xD000000000000014;
        *((void *)&v248 + 1) = v239;
        FHIRDateTime.description.getter();
        sub_23309B880();
        swift_bridgeObjectRelease();
        sub_23309B880();
        uint64_t v124 = v242;
        FHIRDateTime.description.getter();
        sub_23309B880();
        swift_bridgeObjectRelease();
        sub_23309B880();
        v250[9] = v125;
        id v129 = v125;
        sub_232F3FD80(0, (unint64_t *)&qword_268757070);
        sub_23309B770();
        sub_23309B880();
        uint64_t v130 = v244;
        swift_bridgeObjectRelease();
        long long v131 = v248;
        *(void *)(v128 + 56) = MEMORY[0x263F8D310];
        *(_OWORD *)(v128 + 32) = v131;
        sub_23309C3C0();

        swift_bridgeObjectRelease();
        uint64_t v119 = v126;
        uint64_t v121 = v232;
      }
      else
      {
        uint64_t v127 = v219;
        FHIRDateTime.asNSDate()(v219);
        v247 = 0;
        uint64_t v136 = v240;
        uint64_t v221 = sub_23309B170();
        uint64_t v137 = v226;
        uint64_t v138 = v223;
        v223(v127, v226);
        v138(v136, v137);
        uint64_t v119 = v203;
        uint64_t v132 = v124;
        uint64_t v130 = v244;
        uint64_t v133 = v244;
        if (v221 == -1) {
          goto LABEL_52;
        }
      }
      uint64_t v132 = v130;
      uint64_t v133 = v124;
LABEL_52:
      sub_232F621BC(v132, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v134 = v133;
      uint64_t v135 = v234;
      sub_232F61F74(v134, v234, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      sub_232F61F74(v135, v130, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v122 = (uint64_t)v236;
      uint64_t v67 = v245;
      uint64_t v123 = (uint64_t)v235;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain();
LABEL_57:
    uint64_t v140 = v224;
    sub_232F61F74(v244, v224, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v67[7])(v140, 0, 1, v119);
    uint64_t v142 = (uint64_t)v218;
    uint64_t v141 = (uint64_t)v229;
    id v143 = v228;
    uint64_t v139 = v233;
  }
  else
  {
    uint64_t v139 = v109;
    uint64_t v140 = v224;
    uint64_t v119 = v203;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v67[7])(v224, 1, 1, v203);
    uint64_t v141 = v85;
    uint64_t v142 = (uint64_t)v218;
    id v143 = v228;
  }
  uint64_t v144 = v213;
  sub_232F61FDC(v140, v213, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v145 = v214;
  sub_232F62048(v141, v214, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v146 = v119;
  if (v246((char *)v144, 1, v119) == 1)
  {
    uint64_t v147 = v145;
    uint64_t v148 = v215;
    sub_232F61F74(v147, v215, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    sub_232F62160(v144, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  }
  else
  {
    sub_232F621BC(v145, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    uint64_t v148 = v215;
    sub_232F61F74(v144, v215, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  }
  uint64_t v149 = v247;
  BOOL v150 = _s23HealthRecordsExtraction12FHIRDateTimeV1loiySbAC_ACtFZ_0();
  uint64_t v151 = v148;
  BOOL v152 = v150;
  sub_232F621BC(v151, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  if (!v152) {
    goto LABEL_64;
  }
  uint64_t v153 = v212;
  sub_232F61FDC(v224, v212, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v246((char *)v153, 1, v146) == 1)
  {
    sub_232F62160(v153, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_64:
    uint64_t v154 = 0;
    uint64_t v155 = (uint64_t)v217;
    goto LABEL_65;
  }
  if (*(void *)(v153 + 56) == 1)
  {
    if (*(unsigned char *)(v153 + 19))
    {
      uint64_t v163 = v146;
      if (*(unsigned char *)(v153 + 17)) {
        uint64_t v164 = 3;
      }
      else {
        uint64_t v164 = 2;
      }
    }
    else
    {
      uint64_t v163 = v146;
      uint64_t v164 = 1;
    }
  }
  else
  {
    uint64_t v163 = v146;
    uint64_t v164 = 0;
  }
  uint64_t v193 = sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  uint64_t v194 = (uint64_t)v208;
  uint64_t v195 = v212;
  FHIRDateTime.asDateComponents()();
  v196 = (uint64_t *)(v195 + *(int *)(v163 + 32));
  uint64_t v198 = *v196;
  uint64_t v197 = v196[1];
  swift_bridgeObjectRetain();
  uint64_t v199 = v198;
  uint64_t v200 = v197;
  uint64_t v85 = v193;
  v201 = v247;
  v202 = sub_233017340(v194, v199, v200, v164);
  if (v201)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_232F62160(v224, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F621BC((uint64_t)v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    sub_232F621BC(v212, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    return v85;
  }
  uint64_t v154 = v202;
  sub_232F621BC(v212, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v155 = (uint64_t)v217;
  uint64_t v142 = (uint64_t)v218;
  uint64_t v146 = v163;
  uint64_t v149 = 0;
LABEL_65:
  sub_232F61FDC(v139 + v231[13], v155, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  int v156 = v246((char *)v155, 1, v146);
  v245 = v154;
  if (v156 != 1)
  {
    uint64_t v160 = v146;
    if (*(void *)(v155 + 56) == 1)
    {
      if (*(unsigned char *)(v155 + 19))
      {
        uint64_t v161 = v149;
        if (*(unsigned char *)(v155 + 17)) {
          uint64_t v162 = 3;
        }
        else {
          uint64_t v162 = 2;
        }
      }
      else
      {
        uint64_t v161 = v149;
        uint64_t v162 = 1;
      }
    }
    else
    {
      uint64_t v161 = v149;
      uint64_t v162 = 0;
    }
    uint64_t v165 = sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
    uint64_t v166 = (uint64_t)v210;
    uint64_t v167 = (uint64_t)v217;
    FHIRDateTime.asDateComponents()();
    v168 = (uint64_t *)(v167 + *(int *)(v160 + 32));
    uint64_t v170 = *v168;
    uint64_t v169 = v168[1];
    swift_bridgeObjectRetain();
    uint64_t v171 = v169;
    uint64_t v85 = v165;
    v172 = sub_233017340(v166, v170, v171, v162);
    if (!v161)
    {
      uint64_t v158 = (uint64_t (*)(char *, uint64_t, uint64_t))v172;
      v247 = 0;
      sub_232F621BC(v167, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      uint64_t v159 = v224;
      uint64_t v142 = (uint64_t)v218;
      goto LABEL_83;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_232F62160(v224, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F621BC((uint64_t)v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    uint64_t v88 = v167;
LABEL_34:
    sub_232F621BC(v88, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    return v85;
  }
  v247 = v149;
  sub_232F62160(v155, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v157 = v154;
  uint64_t v158 = (uint64_t (*)(char *, uint64_t, uint64_t))v154;
  uint64_t v159 = v224;
LABEL_83:
  uint64_t v173 = *(void *)(v139 + v231[14]);
  if (v173)
  {
    v246 = v158;
    uint64_t v174 = *(void *)(v173 + 16);
    if (v174)
    {
      uint64_t v175 = v173 + ((*(unsigned __int8 *)(v207 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v207 + 80));
      uint64_t v176 = *(void *)(v207 + 72);
      swift_bridgeObjectRetain_n();
      v177 = (void *)MEMORY[0x263F8EE78];
      do
      {
        v179 = v238;
        sub_232F62048(v175, (uint64_t)v238, (uint64_t (*)(void))type metadata accessor for Reference);
        uint64_t v180 = *v179;
        uint64_t v181 = v179[1];
        swift_bridgeObjectRetain();
        sub_232F621BC((uint64_t)v179, (uint64_t (*)(void))type metadata accessor for Reference);
        if (v181)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v177 = sub_232F3CCE0(0, v177[2] + 1, 1, v177);
          }
          unint64_t v183 = v177[2];
          unint64_t v182 = v177[3];
          if (v183 >= v182 >> 1) {
            v177 = sub_232F3CCE0((void *)(v182 > 1), v183 + 1, 1, v177);
          }
          v177[2] = v183 + 1;
          v178 = &v177[2 * v183];
          v178[4] = v180;
          v178[5] = v181;
        }
        v175 += v176;
        --v174;
      }
      while (v174);
      swift_bridgeObjectRelease_n();
      uint64_t v142 = (uint64_t)v218;
      uint64_t v159 = v224;
      id v143 = v228;
    }
    else
    {
      v177 = (void *)MEMORY[0x263F8EE78];
    }
    id v185 = v222;
    uint64_t v184 = v211;
    uint64_t v158 = v246;
  }
  else
  {
    v177 = 0;
    uint64_t v184 = v211;
    id v185 = v222;
  }
  uint64_t v186 = MEMORY[0x263F8EE78];
  sub_232F62048(v184, (uint64_t)v216, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  if (*(void *)(v233 + v231[16] + 8))
  {
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v187 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56))(v142, 0, 1, v187);
  }
  else
  {
    uint64_t v188 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 56))(v142, 1, 1, v188);
  }
  if (v205) {
    uint64_t v189 = v205;
  }
  else {
    uint64_t v189 = v186;
  }
  sub_232F3A800(0, &qword_2687576C0);
  uint64_t v190 = v189;
  id v191 = v237;
  id v192 = v204;
  uint64_t v85 = (uint64_t)sub_23303DFF0(v216, v142, (uint64_t)v250, (uint64_t)v185, v190, (uint64_t)v158, (uint64_t)v237, (uint64_t)v204, (uint64_t)v177);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_232F62160(v159, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F621BC((uint64_t)v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  return v85;
}

uint64_t sub_232F609AC(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  sub_232F61F20(0, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
  v2[11] = swift_task_alloc();
  type metadata accessor for RecordExtractionContext();
  v2[12] = swift_task_alloc();
  sub_23309AD60();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  sub_232F61F20(0, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for ModelsR4.DiagnosticReport(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_232F61F20(0, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  unsigned char v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for FHIRDateTime();
  v2[26] = v3;
  v2[27] = *(void *)(v3 - 8);
  v2[28] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_232F60C3C, 0, 0);
}

uint64_t sub_232F60C3C()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[25];
  sub_232F61FDC(v0[10] + *(int *)(v0[18] + 52), v3, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    sub_232F62160(v0[25], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F6210C();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_2330A31D0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(unsigned char *)(v5 + 32) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v58 = (uint64_t (*)(void))v0[1];
    return v58();
  }
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[18];
  uint64_t v10 = v0[10];
  sub_232F61F74(v0[25], v0[28], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v11 = v10 + *(int *)(v9 + 44);
  sub_232F61FDC(v11, v7, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F62048(v10, v8, type metadata accessor for ModelsR4.DiagnosticReport);
  if (v4(v7, 1, v6) == 1)
  {
    uint64_t v12 = v0[20];
    uint64_t v13 = v0[17];
    sub_232F61FDC(v12 + *(int *)(v0[18] + 48), v13, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    sub_232F621BC(v12, type metadata accessor for ModelsR4.DiagnosticReport);
    uint64_t v14 = type metadata accessor for Period();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
    {
      uint64_t v15 = v0[26];
      uint64_t v16 = v0[27];
      uint64_t v17 = v0[24];
      sub_232F62160(v0[17], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, 1, 1, v15);
    }
    else
    {
      uint64_t v22 = v0[17];
      sub_232F61FDC(v22, v0[24], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F621BC(v22, (uint64_t (*)(void))type metadata accessor for Period);
    }
    uint64_t v23 = v0[26];
    uint64_t v24 = v0[24];
    sub_232F62160(v0[23], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v4(v24, 1, v23) == 1)
    {
      sub_232F62160(v0[24], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
      id v25 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v18 = v0[26];
    uint64_t v19 = v0[27];
    uint64_t v21 = v0[23];
    uint64_t v20 = v0[24];
    sub_232F621BC(v0[20], type metadata accessor for ModelsR4.DiagnosticReport);
    sub_232F61F74(v21, v20, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v20, 0, 1, v18);
  }
  uint64_t v26 = v0[24];
  if (*(void *)(v26 + 56) == 1)
  {
    if (*(unsigned char *)(v26 + 19))
    {
      if (*(unsigned char *)(v26 + 17)) {
        uint64_t v27 = 3;
      }
      else {
        uint64_t v27 = 2;
      }
    }
    else
    {
      uint64_t v27 = 1;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v0[26];
  uint64_t v29 = v0[15];
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v30 = (uint64_t *)(v26 + *(int *)(v28 + 32));
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  swift_bridgeObjectRetain();
  id v25 = sub_233017340(v29, v31, v32, v27);
  sub_232F621BC(v0[24], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_18:
  v0[29] = v25;
  uint64_t v33 = v0[26];
  uint64_t v34 = v0[21];
  uint64_t v35 = v0[19];
  uint64_t v36 = v0[10];
  sub_232F61FDC(v11, v34, &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F62048(v36, v35, type metadata accessor for ModelsR4.DiagnosticReport);
  if (v4(v34, 1, v33) != 1)
  {
    uint64_t v43 = v0[26];
    uint64_t v44 = v0[27];
    uint64_t v46 = v0[21];
    uint64_t v45 = v0[22];
    sub_232F621BC(v0[19], type metadata accessor for ModelsR4.DiagnosticReport);
    sub_232F61F74(v46, v45, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
LABEL_25:
    uint64_t v51 = v0[22];
    if (*(void *)(v51 + 56) == 1)
    {
      if (*(unsigned char *)(v51 + 19))
      {
        if (*(unsigned char *)(v51 + 17)) {
          uint64_t v52 = 3;
        }
        else {
          uint64_t v52 = 2;
        }
      }
      else
      {
        uint64_t v52 = 1;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    uint64_t v53 = v0[26];
    uint64_t v54 = v0[14];
    sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
    FHIRDateTime.asDateComponents()();
    uint64_t v55 = (uint64_t *)(v51 + *(int *)(v53 + 32));
    uint64_t v56 = *v55;
    uint64_t v57 = v55[1];
    swift_bridgeObjectRetain();
    id v50 = sub_233017340(v54, v56, v57, v52);
    sub_232F621BC(v0[22], (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    goto LABEL_36;
  }
  uint64_t v37 = v0[19];
  uint64_t v38 = v0[16];
  sub_232F61FDC(v37 + *(int *)(v0[18] + 48), v38, &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
  sub_232F621BC(v37, type metadata accessor for ModelsR4.DiagnosticReport);
  uint64_t v39 = type metadata accessor for Period();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
    uint64_t v40 = v0[26];
    uint64_t v41 = v0[27];
    uint64_t v42 = v0[22];
    sub_232F62160(v0[16], &qword_268756730, (void (*)(uint64_t))type metadata accessor for Period);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v40);
  }
  else
  {
    uint64_t v47 = v0[16];
    sub_232F61FDC(v47 + *(int *)(v39 + 20), v0[22], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F621BC(v47, (uint64_t (*)(void))type metadata accessor for Period);
  }
  uint64_t v48 = v0[26];
  uint64_t v49 = v0[22];
  sub_232F62160(v0[21], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v4(v49, 1, v48) != 1) {
    goto LABEL_25;
  }
  sub_232F62160(v0[22], &qword_268756548, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  id v50 = 0;
LABEL_36:
  v0[30] = 0;
  v0[31] = v50;
  uint64_t v60 = v0[18];
  uint64_t v61 = v0[12];
  uint64_t v62 = v0[9];
  uint64_t v63 = v0[10];
  id v64 = objc_msgSend(self, sel_FHIRDiagnosticReportStatus);
  v0[32] = v64;
  uint64_t v66 = *(void *)(v63 + 40);
  uint64_t v65 = *(void *)(v63 + 48);
  v0[33] = v65;
  uint64_t v67 = sub_23309B710();
  v0[34] = v68;
  v0[2] = v64;
  v0[3] = v66;
  v0[4] = v65;
  v0[5] = v67;
  v0[7] = 0;
  v0[8] = 0;
  v0[6] = v68;
  sub_232F62048(v62, v61, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  uint64_t v69 = v0[11];
  if (*(void *)(v63 + *(int *)(v60 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23309B200();
    uint64_t v70 = sub_23309B230();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
  }
  else
  {
    uint64_t v71 = sub_23309B230();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v69, 1, 1, v71);
    swift_bridgeObjectRetain();
  }
  uint64_t v72 = v0[10];
  v0[35] = *(void *)(v72 + 88);
  v0[36] = *(void *)(v72 + 96);
  swift_bridgeObjectRetain();
  uint64_t v73 = swift_task_alloc();
  v0[37] = v73;
  *(void *)uint64_t v73 = v0;
  *(void *)(v73 + 8) = sub_232F61734;
  *(_OWORD *)(v73 + 16) = *(_OWORD *)(v0 + 9);
  return MEMORY[0x270FA2498](sub_232F5E7E4, 0, 0);
}

uint64_t sub_232F61734(uint64_t a1)
{
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](sub_232F61834, 0, 0);
}

uint64_t sub_232F61834()
{
  uint64_t v1 = *(void *)(v0 + 224);
  if (*(void *)(v1 + 56) == 1)
  {
    if (*(unsigned char *)(v1 + 19))
    {
      if (*(unsigned char *)(v1 + 17)) {
        uint64_t v2 = 3;
      }
      else {
        uint64_t v2 = 2;
      }
    }
    else
    {
      uint64_t v2 = 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 104);
  sub_232F3A800(0, (unint64_t *)&qword_2687576C8);
  FHIRDateTime.asDateComponents()();
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v4 + 32));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_bridgeObjectRetain();
  id v9 = sub_233017340(v5, v7, v8, v2);
  uint64_t v10 = *(void **)(v0 + 304);
  uint64_t v11 = *(void *)(v0 + 288);
  if (v3)
  {
    uint64_t v12 = *(void **)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v14 = *(void **)(v0 + 232);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_232F62160(v16, (unint64_t *)&qword_2687576B8, MEMORY[0x263F07690]);
    sub_232F621BC(v15, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
    sub_232F621BC(v13, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    uint64_t v19 = v9;
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void **)(v0 + 248);
    uint64_t v27 = *(void **)(v0 + 256);
    uint64_t v22 = *(void **)(v0 + 232);
    uint64_t v28 = *(void *)(v0 + 224);
    uint64_t v23 = *(void **)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 88);
    sub_232F3A800(0, &qword_2687576E8);
    id v25 = sub_233034240(v23, v24, v20, v11, (uint64_t)v10, (uint64_t)v22, (uint64_t)v21, v0 + 16, (uint64_t)v19);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_232F621BC(v28, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(id))(v0 + 8);
    return v26(v25);
  }
}

uint64_t sub_232F61C68(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_232F5E0B8() & 1) == 0 && (uint64_t v6 = *(void *)(v1 + *(int *)(v3 + 60))) != 0 && *(void *)(v6 + 16))
  {
    unint64_t v7 = sub_232FDBC6C(a1, 0, v6);
    uint64_t v9 = v8;
    if ((sub_232E92414(v7, v6) & 1) == 0)
    {
      sub_232F62048(v1, (uint64_t)v5, type metadata accessor for ModelsR4.DiagnosticReport);
      uint64_t v13 = *(int *)(v3 + 60);
      swift_bridgeObjectRelease();
      *(void *)&v5[v13] = v7;
      *((void *)&v16 + 1) = v3;
      unint64_t v17 = sub_232F61EC8();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      sub_232F62048((uint64_t)v5, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ModelsR4.DiagnosticReport);
      type metadata accessor for DownloadableAttachmentExtractionResult();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      sub_232F61F74((uint64_t)&v15, v11 + 24, (uint64_t (*)(void))sub_232F61E60);
      sub_232F621BC((uint64_t)v5, type metadata accessor for ModelsR4.DiagnosticReport);
      return v11;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for DownloadableAttachmentExtractionResult();
    long long v15 = 0u;
    long long v16 = 0u;
    unint64_t v17 = 0;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = v9;
  }
  else
  {
    type metadata accessor for DownloadableAttachmentExtractionResult();
    long long v15 = 0u;
    long long v16 = 0u;
    unint64_t v17 = 0;
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = 0;
  }
  sub_232F61F74((uint64_t)&v15, v10 + 24, (uint64_t (*)(void))sub_232F61E60);
  return v11;
}

void sub_232F61E60()
{
  if (!qword_268757690)
  {
    sub_232F3FD80(255, (unint64_t *)&qword_268757698);
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757690);
    }
  }
}

unint64_t sub_232F61EC8()
{
  unint64_t result = qword_2687576A0;
  if (!qword_2687576A0)
  {
    type metadata accessor for ModelsR4.DiagnosticReport(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_2687576A0);
  }
  return result;
}

void sub_232F61F20(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_232F61F74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_232F61FDC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_232F61F20(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_232F62048(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_232F620B0()
{
  if (!qword_2687576D0)
  {
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, &qword_2687576D0);
    }
  }
}

unint64_t sub_232F6210C()
{
  unint64_t result = qword_2687576E0;
  if (!qword_2687576E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687576E0);
  }
  return result;
}

uint64_t sub_232F62160(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_232F61F20(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232F621BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t VCJWT.sign(with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  char v11;
  unsigned char *v12;
  uint64_t v14;

  uint64_t v7 = a3[4];
  uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = a3[2];
  v8((uint64_t *)((char *)&v14 + 1), v9, v7);
  if (BYTE1(v14) == 1) {
    return sub_233051998(a1, a2, v9, a3[3], v7, a3[5], a4);
  }
  v8(&v14, v9, v7);
  uint64_t v11 = v14;
  sub_232F62328();
  swift_allocError();
  void *v12 = v11;
  return swift_willThrow();
}

unint64_t sub_232F62328()
{
  unint64_t result = qword_2687576F0;
  if (!qword_2687576F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687576F0);
  }
  return result;
}

uint64_t VCJWT.algorithm.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 32))(*(void *)(a1 + 16));
}

uint64_t VCJWT.signingKeyID.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 40))(*(void *)(a1 + 16));
}

uint64_t VCJWT.signatureStatus(using:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_JWKSData);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = sub_23309B030();
    unint64_t v7 = v6;

    sub_23309AB30();
    swift_allocObject();
    sub_23309AB20();
    sub_232F63150();
    sub_23309AB10();
    swift_release();
    sub_232E9AA4C(v5, v7);
    uint64_t v15 = sub_232F5781C((uint64_t *)&v27, a2, (uint64_t)&protocol witness table for VCJWT<A, B>);
    swift_bridgeObjectRelease();
    return v15;
  }
  sub_232F4F650();
  uint64_t v8 = (void *)swift_allocError();
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 16) = 5;
  swift_willThrow();
  id v29 = v8;
  id v10 = v8;
  sub_232F3DAA0();
  if (swift_dynamicCast())
  {
    if (v28 == 5 && v27 == 0)
    {

      if (qword_2687563A0 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_23309B4B0();
      __swift_project_value_buffer(v11, (uint64_t)qword_268770F68);
      uint64_t v12 = sub_23309B4A0();
      os_log_type_t v13 = sub_23309BBA0();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl(&dword_232E63000, v12, v13, "SignedClinicalDataJWT: not attempting to verify signature because there is no JWKS data", v14, 2u);
        MEMORY[0x237DB6EC0](v14, -1, -1);
      }

      return 0;
    }
    sub_232F4F6D4(v27, *((uint64_t *)&v27 + 1), v28);
  }

  if (qword_2687563A0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_23309B4B0();
  __swift_project_value_buffer(v16, (uint64_t)qword_268770F68);
  id v17 = v8;
  id v18 = v8;
  uint64_t v19 = sub_23309B4A0();
  os_log_type_t v20 = sub_23309BB80();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(void *)&long long v27 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    id v29 = v8;
    id v23 = v8;
    uint64_t v24 = sub_23309B770();
    id v29 = (id)sub_232F62B64(v24, v25, (uint64_t *)&v27);
    sub_23309BD10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_232E63000, v19, v20, "SignedClinicalDataJWT: signature invalid because: %s", v21, 0xCu);
    uint64_t v15 = 1;
    swift_arrayDestroy();
    MEMORY[0x237DB6EC0](v22, -1, -1);
    MEMORY[0x237DB6EC0](v21, -1, -1);
  }
  else
  {

    return 1;
  }
  return v15;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VCJWT.verifySignature(using:)(HealthRecordsExtraction::VCJWKSet using)
{
  void (*v27)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32[8];
  uint64_t v33;
  uint64_t v34[5];
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  _OWORD v42[2];
  uint64_t v43;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)using.keys._rawValue;
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v5 + 16);
  if (!v11)
  {
LABEL_11:
    sub_232F4F650();
    swift_allocError();
    *(void *)uint64_t v26 = v8;
    *(void *)(v26 + 8) = v10;
    *(unsigned char *)(v26 + 16) = 2;
LABEL_12:
    swift_willThrow();
    return;
  }
  long long v12 = *(_OWORD *)(v5 + 128);
  uint64_t v40 = *(_OWORD *)(v5 + 112);
  uint64_t v41 = v12;
  v42[0] = *(_OWORD *)(v5 + 144);
  *(void *)&v42[1] = *(void *)(v5 + 160);
  long long v13 = *(_OWORD *)(v5 + 48);
  long long v14 = *(_OWORD *)(v5 + 80);
  long long v15 = *(_OWORD *)(v5 + 96);
  uint64_t v37 = *(_OWORD *)(v5 + 64);
  uint64_t v38 = v14;
  uint64_t v39 = v15;
  uint64_t v35 = *(_OWORD *)(v5 + 32);
  uint64_t v36 = v13;
  uint64_t v16 = v5 + 168;
  uint64_t v17 = v11 - 1;
  uint64_t v18 = *((void *)&v12 + 1);
  if (!*((void *)&v12 + 1)) {
    goto LABEL_8;
  }
LABEL_3:
  BOOL v19 = (void)v41 == v8 && v18 == v10;
  if (!v19 && (sub_23309C220() & 1) == 0)
  {
LABEL_8:
    while (v17)
    {
      uint64_t v35 = *(_OWORD *)v16;
      long long v20 = *(_OWORD *)(v16 + 16);
      long long v21 = *(_OWORD *)(v16 + 32);
      long long v22 = *(_OWORD *)(v16 + 64);
      uint64_t v38 = *(_OWORD *)(v16 + 48);
      uint64_t v39 = v22;
      uint64_t v36 = v20;
      uint64_t v37 = v21;
      long long v23 = *(_OWORD *)(v16 + 80);
      long long v24 = *(_OWORD *)(v16 + 96);
      long long v25 = *(_OWORD *)(v16 + 112);
      *(void *)&v42[1] = *(void *)(v16 + 128);
      uint64_t v41 = v24;
      v42[0] = v25;
      uint64_t v40 = v23;
      v16 += 136;
      --v17;
      uint64_t v18 = *((void *)&v24 + 1);
      if (*((void *)&v24 + 1)) {
        goto LABEL_3;
      }
    }
    goto LABEL_11;
  }
  sub_232F631A4((uint64_t)&v35);
  if (*(void *)&v42[1]
    && *(_OWORD *)((char *)v42 + 8) != __PAIR128__(0xE300000000000000, 6777203)
    && (sub_23309C220() & 1) == 0)
  {
    sub_232F63238((uint64_t)&v35);
    sub_232F4F650();
    swift_allocError();
    *(void *)uint64_t v31 = v8;
    *(void *)(v31 + 8) = v10;
    *(unsigned char *)(v31 + 16) = 0;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  long long v27 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 32);
  v27((long long *)&v43, v7, v6);
  if (v43 != 1)
  {
    sub_232F63238((uint64_t)&v35);
    v27(v32, v7, v6);
    id v29 = LOBYTE(v32[0]);
    sub_232F632CC();
    swift_allocError();
    *(void *)uint64_t v30 = v29;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0;
    *(void *)(v30 + 24) = 0;
    *(unsigned char *)(v30 + 32) = 1;
    goto LABEL_12;
  }
  v34[3] = v4;
  v34[4] = (uint64_t)&protocol witness table for VCJWT<A, B>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v3, v4);
  v32[6] = v41;
  v32[7] = v42[0];
  uint64_t v33 = *(void *)&v42[1];
  v32[2] = v37;
  v32[3] = v38;
  v32[4] = v39;
  v32[5] = v40;
  v32[0] = v35;
  v32[1] = v36;
  sub_232F63500(v34, v32, 1);
  sub_232F63238((uint64_t)&v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

void sub_232F62B4C(HealthRecordsExtraction::VCJWKSet a1)
{
}

uint64_t sub_232F62B64(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_232F62C38(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_232F397F8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_232F397F8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_232F62C38(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23309BD20();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_232F62DF4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_23309BEE0();
  if (!v8)
  {
    sub_23309BF60();
    __break(1u);
LABEL_17:
    uint64_t result = sub_23309BFD0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_232F62DF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_232F62E8C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_232F63004(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_232F63004(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_232F62E8C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_232F3D930(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_23309BE50();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_23309BF60();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_23309B8A0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_23309BFD0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_23309BF60();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_232F63004(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_232F63320();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  long long v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_23309BFD0();
  __break(1u);
  return result;
}

unint64_t sub_232F63150()
{
  unint64_t result = qword_2687576F8;
  if (!qword_2687576F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687576F8);
  }
  return result;
}

uint64_t sub_232F631A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_232F63238(uint64_t a1)
{
  return a1;
}

unint64_t sub_232F632CC()
{
  unint64_t result = qword_268757700;
  if (!qword_268757700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757700);
  }
  return result;
}

void sub_232F63320()
{
  if (!qword_2687570E0)
  {
    unint64_t v0 = sub_23309C1F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687570E0);
    }
  }
}

uint64_t sub_232F63378(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_23309B560();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1;
  unint64_t v16 = a2;
  sub_232E9A9F4(a1, a2);
  sub_232F639B8();
  uint64_t result = sub_23309B550();
  if (!v4)
  {
    uint64_t v15 = a3;
    unint64_t v16 = a4;
    if ((sub_23309B570() & 1) == 0)
    {
      sub_232F632CC();
      swift_allocError();
      *(void *)uint64_t v14 = 2;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      *(unsigned char *)(v14 + 32) = 4;
      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t sub_232F63500(void *a1, long long *a2, int a3)
{
  LODWORD(v63) = a3;
  uint64_t v6 = sub_23309B590();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  if (!v3)
  {
    uint64_t v51 = v9;
    uint64_t v49 = v6;
    char v14 = v63;
    uint64_t v50 = v7;
    unint64_t v52 = v13;
    uint64_t v53 = result;
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
    unint64_t v19 = v18;
    long long v20 = a2;
    long long v21 = a2[7];
    long long v60 = a2[6];
    long long v61 = v21;
    uint64_t v62 = *((void *)a2 + 16);
    long long v22 = a2[3];
    long long v56 = a2[2];
    long long v57 = v22;
    long long v23 = a2[5];
    long long v58 = a2[4];
    long long v59 = v23;
    long long v24 = a2[1];
    long long v54 = *a2;
    long long v55 = v24;
    *(void *)&long long v54 = VCJWK.asRawECPublicKey()();
    *((void *)&v54 + 1) = v25;
    uint64_t v26 = v54;
    unint64_t v27 = v25;
    sub_232E9A9F4(v54, v25);
    unsigned __int8 v28 = v51;
    sub_23309B580();
    uint64_t v47 = v26;
    unint64_t v48 = v27;
    uint64_t v29 = v53;
    unint64_t v30 = v52;
    sub_232F63378(v53, v52, v17, v19);
    if (v14)
    {
      uint64_t v46 = v17;
      unint64_t v63 = v19;
      uint64_t v31 = a1[3];
      uint64_t v32 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v31);
      uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
      uint64_t v35 = v34;
      long long v36 = v20[7];
      long long v60 = v20[6];
      long long v61 = v36;
      uint64_t v62 = *((void *)v20 + 16);
      long long v37 = v20[3];
      long long v56 = v20[2];
      long long v57 = v37;
      long long v38 = v20[5];
      long long v58 = v20[4];
      long long v59 = v38;
      long long v39 = v20[1];
      long long v54 = *v20;
      long long v55 = v39;
      Swift::String v40 = VCJWK.calculateThumbprint()();
      if (v41)
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v49);
        sub_232E9AA4C(v47, v48);
        sub_232E9AA4C(v46, v63);
        sub_232E9AA4C(v53, v52);
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = v53;
        uint64_t v43 = v50;
        uint64_t v44 = v49;
        if (v40._countAndFlagsBits == v33 && v40._object == v35 || (sub_23309C220() & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v44);
          sub_232E9AA4C(v47, v48);
          sub_232E9AA4C(v46, v63);
          sub_232E9AA4C(v42, v52);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        else
        {
          sub_232F632CC();
          swift_allocError();
          *(Swift::String *)uint64_t v45 = v40;
          *(void *)(v45 + 16) = v33;
          *(void *)(v45 + 24) = v35;
          *(unsigned char *)(v45 + 32) = 3;
          swift_willThrow();
          sub_232E9AA4C(v46, v63);
          sub_232E9AA4C(v42, v52);
          sub_232E9AA4C(v47, v48);
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v28, v44);
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v49);
      sub_232E9AA4C(v47, v48);
      sub_232E9AA4C(v17, v19);
      return sub_232E9AA4C(v29, v30);
    }
  }
  return result;
}

unint64_t sub_232F639B8()
{
  unint64_t result = qword_268757708;
  if (!qword_268757708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757708);
  }
  return result;
}

uint64_t Coding.system.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F41E94(v1, a1);
}

uint64_t Coding.code.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Coding() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for Coding()
{
  uint64_t result = qword_268757758;
  if (!qword_268757758) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Coding.display.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Coding() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Coding.version.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Coding() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

int *Coding.init(system:code:display:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  sub_232F63BA8(a1, a8);
  uint64_t result = (int *)type metadata accessor for Coding();
  uint64_t v16 = (void *)(a8 + result[5]);
  *uint64_t v16 = a2;
  v16[1] = a3;
  uint64_t v17 = (void *)(a8 + result[6]);
  void *v17 = a4;
  v17[1] = a5;
  unint64_t v18 = (void *)(a8 + result[7]);
  *unint64_t v18 = a6;
  v18[1] = a7;
  return result;
}

uint64_t sub_232F63BA8(uint64_t a1, uint64_t a2)
{
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Coding.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_23309AF80();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - v7;
  sub_232F41E94(v1, (uint64_t)&v11 - v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23309C3F0();
    sub_232F65B8C(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v9 = (int *)type metadata accessor for Coding();
  if (*(void *)(v1 + v9[5] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*(void *)(v1 + v9[6] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (!*(void *)(v1 + v9[7] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F63F04()
{
  uint64_t result = 0x6D6574737973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701080931;
      break;
    case 2:
      uint64_t result = 0x79616C70736964;
      break;
    case 3:
      uint64_t result = 0x6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232F63F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F66E98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F63FB0(uint64_t a1)
{
  unint64_t v2 = sub_232F65B38();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F63FEC(uint64_t a1)
{
  unint64_t v2 = sub_232F65B38();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Coding.encode(to:)(void *a1)
{
  sub_232F65BD4(0, &qword_268757710, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F65B38();
  sub_23309C480();
  v9[15] = 0;
  sub_23309AF80();
  sub_232F65B8C(&qword_268757720, MEMORY[0x263F06EA8]);
  sub_23309C150();
  if (!v1)
  {
    type metadata accessor for Coding();
    v9[14] = 1;
    sub_23309C110();
    v9[13] = 2;
    sub_23309C110();
    v9[12] = 3;
    sub_23309C110();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Coding.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t Coding.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v27 - v5;
  sub_232F65BD4(0, &qword_268757728, MEMORY[0x263F8E040]);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = (int *)type metadata accessor for Coding();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F65B38();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v27 = a1;
  uint64_t v13 = v29;
  sub_23309AF80();
  char v34 = 0;
  sub_232F65B8C(&qword_268757730, MEMORY[0x263F06EA8]);
  uint64_t v14 = v30;
  sub_23309C080();
  uint64_t v15 = (uint64_t)v12;
  sub_232F63BA8((uint64_t)v6, (uint64_t)v12);
  char v33 = 1;
  uint64_t v16 = sub_23309C040();
  uint64_t v17 = (uint64_t *)&v12[v10[5]];
  uint64_t *v17 = v16;
  v17[1] = v18;
  char v32 = 2;
  uint64_t v19 = sub_23309C040();
  long long v20 = (uint64_t *)&v12[v10[6]];
  *long long v20 = v19;
  v20[1] = v21;
  char v31 = 3;
  uint64_t v22 = sub_23309C040();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v14);
  unint64_t v25 = (uint64_t *)(v15 + v10[7]);
  uint64_t *v25 = v22;
  v25[1] = v24;
  sub_232F65C38(v15, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_232F65C9C(v15, (uint64_t (*)(void))type metadata accessor for Coding);
}

uint64_t sub_232F646B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Coding.init(from:)(a1, a2);
}

uint64_t sub_232F646C8(void *a1)
{
  return Coding.encode(to:)(a1);
}

uint64_t sub_232F646E0()
{
  return sub_23309C420();
}

uint64_t sub_232F64724()
{
  return sub_23309C420();
}

BOOL Coding.isConcept(system:code:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_23309AEE0();
  uint64_t v15 = v14;
  sub_232F41E94(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_232F65D50((uint64_t)v8, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    BOOL v16 = 0;
  }
  else
  {
    uint64_t v23 = a3;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v17 = (uint64_t *)(v3 + *(int *)(type metadata accessor for Coding() + 20));
    uint64_t v18 = v17[1];
    if (v18)
    {
      uint64_t v22 = *v17;
      uint64_t v26 = sub_23309AEE0();
      uint64_t v27 = v19;
      uint64_t v24 = v13;
      uint64_t v25 = v15;
      sub_232F379FC();
      uint64_t v20 = sub_23309BD60();
      swift_bridgeObjectRelease();
      if (v20)
      {
        BOOL v16 = 0;
      }
      else
      {
        uint64_t v26 = v22;
        uint64_t v27 = v18;
        uint64_t v24 = a2;
        uint64_t v25 = v23;
        BOOL v16 = sub_23309BD60() == 0;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      BOOL v16 = 0;
    }
  }
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Bool __swiftcall Coding.isConcept(system:code:)(Swift::String system, Swift::String code)
{
  object = code._object;
  uint64_t countAndFlagsBits = code._countAndFlagsBits;
  uint64_t v5 = system._object;
  uint64_t v6 = system._countAndFlagsBits;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F41E94(v2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_232F65D50((uint64_t)v9, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    LOBYTE(v14) = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v15 = (uint64_t *)(v2 + *(int *)(type metadata accessor for Coding() + 20));
    uint64_t v16 = v15[1];
    if (v16)
    {
      uint64_t v21 = *v15;
      uint64_t v24 = sub_23309AEE0();
      uint64_t v25 = v17;
      uint64_t v22 = v6;
      uint64_t v23 = v5;
      sub_232F379FC();
      uint64_t v18 = sub_23309BD60();
      swift_bridgeObjectRelease();
      if (v18)
      {
        LOBYTE(v14) = 0;
      }
      else
      {
        uint64_t v24 = v21;
        uint64_t v25 = v16;
        uint64_t v22 = countAndFlagsBits;
        uint64_t v23 = object;
        BOOL v14 = sub_23309BD60() == 0;
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      LOBYTE(v14) = 0;
    }
  }
  return v14;
}

Swift::Bool __swiftcall Coding.isConcept(codings:)(Swift::OpaquePointer codings)
{
  rawValue = codings._rawValue;
  uint64_t v2 = type metadata accessor for Coding();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F65CFC(0, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v39 - v7;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  BOOL v14 = (char *)&v39 - v13;
  uint64_t v15 = sub_23309AF80();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v51 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v39 - v19;
  sub_232F41E94(v1, (uint64_t)v14);
  long long v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v55 = v16 + 48;
  if (v54(v14, 1, v15) == 1)
  {
    sub_232F65D50((uint64_t)v14, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    return 0;
  }
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v50 = v16 + 32;
  v49(v20, v14, v15);
  uint64_t v21 = (uint64_t *)(v1 + *(int *)(v2 + 20));
  uint64_t v43 = v21[1];
  if (!v43)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    return 0;
  }
  uint64_t v46 = v15;
  uint64_t v22 = rawValue[2];
  if (!v22) {
    goto LABEL_19;
  }
  uint64_t v53 = v20;
  uint64_t v39 = v16;
  Swift::String v40 = v8;
  uint64_t v23 = *v21;
  uint64_t v41 = v3;
  uint64_t v42 = v23;
  uint64_t v24 = (uint64_t)rawValue + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  unint64_t v48 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v52 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v25 = v46;
  uint64_t v47 = v2;
  do
  {
    sub_232F65C38(v24, (uint64_t)v5);
    uint64_t v26 = sub_23309AEE0();
    uint64_t v28 = v27;
    sub_232F41E94((uint64_t)v5, (uint64_t)v12);
    if (v54(v12, 1, v25) == 1)
    {
      sub_232F65D50((uint64_t)v12, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    uint64_t v29 = v51;
    v49(v51, v12, v25);
    uint64_t v30 = (uint64_t *)&v5[*(int *)(v2 + 20)];
    uint64_t v31 = v30[1];
    if (!v31)
    {
      (*v48)(v29, v25);
      uint64_t v2 = v47;
      goto LABEL_7;
    }
    uint64_t v45 = *v30;
    uint64_t v58 = sub_23309AEE0();
    uint64_t v59 = v32;
    uint64_t v56 = v26;
    uint64_t v57 = v28;
    sub_232F379FC();
    uint64_t v33 = sub_23309BD60();
    swift_bridgeObjectRelease();
    if (v33)
    {
      BOOL v34 = 0;
    }
    else
    {
      uint64_t v58 = v45;
      uint64_t v59 = v31;
      uint64_t v56 = v42;
      uint64_t v57 = v43;
      BOOL v34 = sub_23309BD60() == 0;
    }
    uint64_t v2 = v47;
    uint64_t v35 = *v48;
    uint64_t v25 = v46;
    (*v48)(v51, v46);
    swift_bridgeObjectRelease();
    if (v34)
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = (uint64_t)v40;
      sub_232F65DAC((uint64_t)v5, (uint64_t)v40);
      Swift::Bool v37 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v36, 0, 1, v2);
      sub_232F65D50(v36, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
      v35(v53, v25);
      return v37;
    }
LABEL_8:
    sub_232F65C9C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Coding);
    v24 += v52;
    --v22;
  }
  while (v22);
  swift_bridgeObjectRelease();
  uint64_t v8 = v40;
  uint64_t v3 = v41;
  uint64_t v20 = v53;
  uint64_t v16 = v39;
LABEL_19:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  sub_232F65D50((uint64_t)v8, &qword_268756F50, (void (*)(uint64_t))type metadata accessor for Coding);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v46);
  return 0;
}

uint64_t Coding.description.getter()
{
  uint64_t v1 = v0;
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v28 - v3;
  long long v32 = xmmword_2330A1EA0;
  sub_232F41E94(v1, (uint64_t)v28 - v3);
  uint64_t v5 = sub_23309AF80();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_232F65D50((uint64_t)v4, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    unint64_t v7 = 0xE400000000000000;
    uint64_t v8 = 1701080931;
  }
  else
  {
    uint64_t v8 = sub_23309AEE0();
    unint64_t v7 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v33 = v8;
  unint64_t v34 = v7;
  uint64_t v10 = (int *)type metadata accessor for Coding();
  uint64_t v11 = (uint64_t *)(v1 + v10[5]);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v35 = v13;
  v36[0] = v12;
  v36[1] = 0x79616C70736964;
  v36[2] = 0xE700000000000000;
  BOOL v14 = (void *)(v1 + v10[6]);
  uint64_t v15 = v14[1];
  void v36[3] = *v14;
  v36[4] = v15;
  v36[5] = 0x6E6F6973726576;
  v36[6] = 0xE700000000000000;
  uint64_t v16 = (void *)(v1 + v10[7]);
  uint64_t v17 = v16[1];
  v36[7] = *v16;
  v36[8] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  uint64_t v19 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v21 = &v31[v18 * 8];
    if (v36[v18])
    {
      unint64_t v22 = *((void *)v21 + 5);
      uint64_t v29 = *((void *)v21 + 4);
      unint64_t v30 = v22;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_23309B880();
      sub_23309B880();
      sub_23309B880();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = v29;
      unint64_t v24 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = sub_232F3CCE0(0, v19[2] + 1, 1, v19);
      }
      unint64_t v26 = v19[2];
      unint64_t v25 = v19[3];
      if (v26 >= v25 >> 1) {
        uint64_t v19 = sub_232F3CCE0((void *)(v25 > 1), v26 + 1, 1, v19);
      }
      v19[2] = v26 + 1;
      uint64_t v20 = &v19[2 * v26];
      v20[4] = v23;
      v20[5] = v24;
    }
    v18 += 4;
  }
  while (v18 != 12);
  sub_232F65E10();
  swift_arrayDestroy();
  uint64_t v29 = 0x28676E69646F43;
  unint64_t v30 = 0xE700000000000000;
  v28[1] = v19;
  sub_232F65E94(0, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D488]);
  sub_232F65EE4();
  sub_23309B6C0();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  sub_23309B880();
  return v29;
}

uint64_t _s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F6703C();
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v49 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v49 = a1;
  sub_232F41E94(a1, (uint64_t)&v49 - v19);
  uint64_t v50 = a2;
  sub_232F41E94(a2, (uint64_t)v18);
  uint64_t v21 = (uint64_t)&v11[*(int *)(v9 + 56)];
  sub_232F41E94((uint64_t)v20, (uint64_t)v11);
  sub_232F41E94((uint64_t)v18, v21);
  unint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v11, 1, v4) == 1)
  {
    uint64_t v23 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_232F65D50((uint64_t)v18, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_232F65D50((uint64_t)v20, (unint64_t *)&qword_268756520, v23);
    if (v22(v21, 1, v4) == 1)
    {
      sub_232F65D50((uint64_t)v11, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      goto LABEL_10;
    }
LABEL_6:
    sub_232F65C9C((uint64_t)v11, (uint64_t (*)(void))sub_232F6703C);
    return 0;
  }
  sub_232F41E94((uint64_t)v11, (uint64_t)v15);
  if (v22(v21, 1, v4) == 1)
  {
    unint64_t v24 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_232F65D50((uint64_t)v18, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_232F65D50((uint64_t)v20, (unint64_t *)&qword_268756520, v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v21, v4);
  sub_232F65B8C((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
  char v26 = sub_23309B6D0();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v4);
  uint64_t v28 = (void (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_232F65D50((uint64_t)v18, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  sub_232F65D50((uint64_t)v20, (unint64_t *)&qword_268756520, v28);
  v27(v15, v4);
  sub_232F65D50((uint64_t)v11, (unint64_t *)&qword_268756520, v28);
  if ((v26 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v29 = (int *)type metadata accessor for Coding();
  uint64_t v30 = v29[5];
  uint64_t v32 = v49;
  uint64_t v31 = v50;
  uint64_t v33 = (void *)(v49 + v30);
  uint64_t v34 = *(void *)(v49 + v30 + 8);
  uint64_t v35 = (void *)(v50 + v30);
  uint64_t v36 = v35[1];
  if (v34)
  {
    if (!v36) {
      return 0;
    }
    if (*v33 != *v35 || v34 != v36)
    {
      char v37 = sub_23309C220();
      uint64_t result = 0;
      if ((v37 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v36)
  {
    return 0;
  }
  uint64_t v38 = v29[6];
  uint64_t v39 = (void *)(v32 + v38);
  uint64_t v40 = *(void *)(v32 + v38 + 8);
  uint64_t v41 = (void *)(v31 + v38);
  uint64_t v42 = v41[1];
  if (!v40)
  {
    if (!v42) {
      goto LABEL_24;
    }
    return 0;
  }
  if (!v42) {
    return 0;
  }
  if (*v39 == *v41 && v40 == v42 || (char v43 = sub_23309C220(), result = 0, (v43 & 1) != 0))
  {
LABEL_24:
    uint64_t v44 = v29[7];
    uint64_t v45 = (void *)(v32 + v44);
    uint64_t v46 = *(void *)(v32 + v44 + 8);
    uint64_t v47 = (void *)(v31 + v44);
    uint64_t v48 = v47[1];
    if (v46)
    {
      if (v48 && (*v45 == *v47 && v46 == v48 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v48)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_232F65B38()
{
  unint64_t result = qword_268757718;
  if (!qword_268757718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757718);
  }
  return result;
}

uint64_t sub_232F65B8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_232F65BD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F65B38();
    unint64_t v7 = a3(a1, &type metadata for Coding.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_232F65C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F65C9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_232F65CFC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_232F65D50(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_232F65CFC(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232F65DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Coding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_232F65E10()
{
  if (!qword_268757738)
  {
    sub_232F65E94(255, (unint64_t *)&qword_2687571C0, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268757738);
    }
  }
}

void sub_232F65E94(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_232F65EE4()
{
  unint64_t result = qword_268757740;
  if (!qword_268757740)
  {
    sub_232F65E94(255, (unint64_t *)&qword_268756B00, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757740);
  }
  return result;
}

uint64_t sub_232F65F58(void *a1)
{
  a1[1] = sub_232F65B8C(&qword_268756480, (void (*)(uint64_t))type metadata accessor for Coding);
  a1[2] = sub_232F65B8C(&qword_268756468, (void (*)(uint64_t))type metadata accessor for Coding);
  uint64_t result = sub_232F65B8C(&qword_268757748, (void (*)(uint64_t))type metadata accessor for Coding);
  a1[3] = result;
  return result;
}

uint64_t sub_232F66004()
{
  return sub_232F65B8C(&qword_268757750, (void (*)(uint64_t))type metadata accessor for Coding);
}

uint64_t *initializeBufferWithCopyOfBuffer for Coding(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_23309AF80();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = (uint64_t *)((char *)a1 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (uint64_t *)((char *)a1 + v12);
    uint64_t v17 = (uint64_t *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Coding(uint64_t a1)
{
  uint64_t v2 = sub_23309AF80();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23309AF80();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  uint64_t v14 = &a1[v10];
  uint64_t v15 = &a2[v10];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23309AF80();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23309AF80();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for Coding(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_23309AF80();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[6];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = &a1[v22];
  unint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Coding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F669FC);
}

uint64_t sub_232F669FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Coding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F66AFC);
}

void sub_232F66AFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_232F65CFC(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

void sub_232F66BD8()
{
  sub_232F65CFC(319, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for Coding.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F66D58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Coding.CodingKeys()
{
  return &type metadata for Coding.CodingKeys;
}

unint64_t sub_232F66D94()
{
  unint64_t result = qword_268757768;
  if (!qword_268757768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757768);
  }
  return result;
}

unint64_t sub_232F66DEC()
{
  unint64_t result = qword_268757770;
  if (!qword_268757770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757770);
  }
  return result;
}

unint64_t sub_232F66E44()
{
  unint64_t result = qword_268757778;
  if (!qword_268757778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757778);
  }
  return result;
}

uint64_t sub_232F66E98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D6574737973 && a2 == 0xE600000000000000;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C70736964 && a2 == 0xE700000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void sub_232F6703C()
{
  if (!qword_268756528)
  {
    sub_232F65CFC(255, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_268756528);
    }
  }
}

uint64_t ExtractionRulesKeyPathComponent.name.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtractionRulesKeyPathComponent.parenthesisContent.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent);
  swift_bridgeObjectRetain();
  return v1;
}

id ExtractionRulesKeyPathComponent.__allocating_init(name:parenthesisContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  unint64_t v10 = &v9[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
  *(void *)unint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  int v11 = &v9[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
  *(void *)int v11 = a3;
  *((void *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id ExtractionRulesKeyPathComponent.init(name:parenthesisContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = &v4[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_name];
  *(void *)uint64_t v5 = a1;
  *((void *)v5 + 1) = a2;
  char v6 = &v4[OBJC_IVAR___HDHRExtractionRulesKeyPathComponent_parenthesisContent];
  *(void *)char v6 = a3;
  *((void *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathComponent();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for ExtractionRulesKeyPathComponent()
{
  return self;
}

id ExtractionRulesKeyPathComponent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ExtractionRulesKeyPathComponent.init()()
{
}

id ExtractionRulesKeyPathComponent.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtractionRulesKeyPathComponent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ExtractionRulesKeyPathComponent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ExtractionRulesKeyPathComponent);
}

uint64_t dispatch thunk of ExtractionRulesKeyPathComponent.__allocating_init(name:parenthesisContent:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t Error.hdhr_friendlyDescription.getter(uint64_t a1, uint64_t a2)
{
  v25[1] = a2;
  sub_232F67898(0, &qword_268757790, MEMORY[0x263F8DCD0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v25 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v5);
  int v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  objc_super v13 = (char *)v25 - v12;
  uint64_t v14 = sub_23309BEC0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v13, v2, a1);
  int v19 = swift_dynamicCast();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v19)
  {
    v20(v7, 0, 1, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v7, v14);
    uint64_t v21 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    v20(v7, 1, 1, v14);
    sub_232F6783C((uint64_t)v7, &qword_268757790, MEMORY[0x263F8DCD0]);
    v18(v11, v2, a1);
    sub_232F677E4();
    if (swift_dynamicCast())
    {
      sub_232F3FDD0(&v26, (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v29[3]);
      uint64_t v21 = sub_23309AD70();
      uint64_t v23 = v22;
      sub_232EA35E0((uint64_t)v29, (uint64_t)&v26);
      if (!v23)
      {
        __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
        uint64_t v21 = sub_23309C370();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
    else
    {
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      sub_232F6783C((uint64_t)&v26, &qword_268757798, (void (*)(uint64_t))sub_232F677E4);
      return sub_23309C370();
    }
  }
  return v21;
}

unint64_t sub_232F677E4()
{
  unint64_t result = qword_268757130;
  if (!qword_268757130)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757130);
  }
  return result;
}

uint64_t sub_232F6783C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_232F67898(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_232F67898(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_23309BD00();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_232F678EC()
{
  uint64_t v0 = sub_23309B4B0();
  __swift_allocate_value_buffer(v0, qword_268770F68);
  __swift_project_value_buffer(v0, (uint64_t)qword_268770F68);
  _HKInitializeLogging();
  id v1 = (id)*MEMORY[0x263F09908];
  return sub_23309B4C0();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t UnknownResource.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_232F6893C(0, &qword_2687577A0, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v21 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F67C54();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v27 = 0;
    uint64_t v10 = sub_23309C0A0();
    uint64_t v13 = v12;
    uint64_t v24 = v10;
    char v26 = 1;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_23309C040();
    uint64_t v16 = v15;
    uint64_t v23 = v14;
    char v25 = 2;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_23309C040();
    uint64_t v19 = v18;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v22 = v17;
    v20(v9, v6);
    swift_bridgeObjectRetain();
    *a2 = v24;
    a2[1] = v13;
    a2[2] = v23;
    a2[3] = v16;
    a2[4] = v22;
    a2[5] = v19;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_232F67C54()
{
  unint64_t result = qword_2687577A8;
  if (!qword_2687577A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577A8);
  }
  return result;
}

uint64_t UnknownResource.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*UnknownResource.id.modify())()
{
  return nullsub_1;
}

uint64_t UnknownResource.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnknownResource.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F67E98()
{
  uint64_t v1 = 25705;
  if (*v0 != 1) {
    uint64_t v1 = 0x65676175676E616CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F736572;
  }
}

uint64_t sub_232F67EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F68FA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F67F18(uint64_t a1)
{
  unint64_t v2 = sub_232F67C54();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F67F54(uint64_t a1)
{
  unint64_t v2 = sub_232F67C54();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UnknownResource.encode(to:)(void *a1)
{
  sub_232F6893C(0, &qword_2687577B0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v12 - v6;
  uint64_t v8 = v1[2];
  uint64_t v12[3] = v1[3];
  v12[4] = v8;
  uint64_t v9 = v1[4];
  v12[1] = v1[5];
  id v12[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F67C54();
  sub_23309C480();
  char v15 = 0;
  uint64_t v10 = v12[5];
  sub_23309C170();
  if (!v10)
  {
    char v14 = 1;
    sub_23309C110();
    char v13 = 2;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t UnknownResource.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232F68250()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232F68280@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return UnknownResource.init(from:)(a1, a2);
}

uint64_t sub_232F68298(void *a1)
{
  return UnknownResource.encode(to:)(a1);
}

uint64_t sub_232F682B8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t UnknownResource.description.getter()
{
  return 0x100000000000001CLL;
}

uint64_t sub_232F68454()
{
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 40);
  *(void *)(v1 + 32) = *(void *)(v0 + 24);
  *(void *)(v1 + 40) = v2;
  return MEMORY[0x270FA2498](sub_232F68484, 0, 0);
}

uint64_t sub_232F68484()
{
  id v1 = objc_msgSend(self, sel_textSystem);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23309BE40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)sub_23309B6E0();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(self, sel_medicalCodingWithSystem_codingVersion_code_displayString_, v1, 0, 0, v2, 0x100000000000001CLL, 0x80000002330B5A70);

  id v4 = objc_msgSend(self, sel_collectionWithCoding_, v3);
  uint64_t v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

uint64_t sub_232F68640(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  type metadata accessor for RecordExtractionContext();
  *(void *)(v2 + 24) = swift_task_alloc();
  *(_OWORD *)(v2 + 32) = *(_OWORD *)v1;
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v2 + 48) = *(void *)(v1 + 24);
  *(void *)(v2 + 56) = v3;
  return MEMORY[0x270FA2498](sub_232F686E4, 0, 0);
}

uint64_t sub_232F686E4()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (uint64_t *)v0[3];
  sub_232F690FC();
  sub_232F6913C(v2, (uint64_t)v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23309BE40();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23309B880();
  swift_bridgeObjectRelease();
  sub_23309B880();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v3 = sub_233040E60(v1, 0x100000000000001CLL, 0x80000002330B5A70);
  swift_task_dealloc();
  id v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t _s23HealthRecordsExtraction15UnknownResourceV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_23309C220(), uint64_t result = 0, (v10 & 1) != 0))
  {
    if (v4)
    {
      if (!v6) {
        return 0;
      }
      if (v2 != v7 || v4 != v6)
      {
        char v12 = sub_23309C220();
        uint64_t result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v5)
    {
      if (v8 && (v3 == v9 && v5 == v8 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_232F6893C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232F67C54();
    unint64_t v7 = a3(a1, &type metadata for UnknownResource.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_232F689A0(void *a1)
{
  a1[1] = sub_232F689D8();
  a1[2] = sub_232F68A2C();
  unint64_t result = sub_232F68A80();
  a1[3] = result;
  return result;
}

unint64_t sub_232F689D8()
{
  unint64_t result = qword_2687577B8;
  if (!qword_2687577B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577B8);
  }
  return result;
}

unint64_t sub_232F68A2C()
{
  unint64_t result = qword_2687577C0;
  if (!qword_2687577C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577C0);
  }
  return result;
}

unint64_t sub_232F68A80()
{
  unint64_t result = qword_2687577C8;
  if (!qword_2687577C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577C8);
  }
  return result;
}

unint64_t sub_232F68AD4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F689D8();
  unint64_t result = sub_232F68A2C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_232F68B08()
{
  unint64_t result = qword_2687577D0;
  if (!qword_2687577D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577D0);
  }
  return result;
}

uint64_t destroy for UnknownResource()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for UnknownResource(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UnknownResource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for UnknownResource(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnknownResource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnknownResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownResource()
{
  return &type metadata for UnknownResource;
}

unsigned char *storeEnumTagSinglePayload for UnknownResource.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F68E64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnknownResource.CodingKeys()
{
  return &type metadata for UnknownResource.CodingKeys;
}

unint64_t sub_232F68EA0()
{
  unint64_t result = qword_2687577D8;
  if (!qword_2687577D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577D8);
  }
  return result;
}

unint64_t sub_232F68EF8()
{
  unint64_t result = qword_2687577E0;
  if (!qword_2687577E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687577E0);
  }
  return result;
}

unint64_t sub_232F68F50()
{
  unint64_t result = qword_2687577E8;
  if (!qword_2687577E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_2687577E8);
  }
  return result;
}

uint64_t sub_232F68FA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_232F690FC()
{
  unint64_t result = qword_268757800;
  if (!qword_268757800)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268757800);
  }
  return result;
}

uint64_t sub_232F6913C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecordExtractionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_232F691A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_232F69858();
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v32 = (char *)&v78 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F3A800(0, &qword_268757808);
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_vaccinationRecordTypeForIdentifier_, *MEMORY[0x263F0A028]);
  if (!result)
  {
    __break(1u);
    return result;
  }
  id v93 = result;
  if (a4)
  {
    uint64_t v81 = sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v81 = 0;
  }
  uint64_t v34 = a8[1];
  uint64_t v35 = a8[2];
  uint64_t v94 = a6;
  id v95 = a7;
  id v84 = a8;
  if (v34 == 0xD000000000000010 && v35 == 0x80000002330B5A90) {
    int v91 = 1;
  }
  else {
    int v91 = sub_23309C220();
  }
  uint64_t v36 = (uint64_t *)((char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20));
  uint64_t v37 = type metadata accessor for ExtractionContext();
  uint64_t v92 = (char *)v36 + *(int *)(v37 + 28);
  uint64_t v38 = sub_23309B130();
  uint64_t v89 = *a1;
  uint64_t v90 = (void *)v38;
  uint64_t v96 = a2;
  sub_232F698B0(a2, (uint64_t)v32);
  uint64_t v39 = sub_23309B230();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v32, 1, v39) != 1)
  {
    uint64_t v41 = sub_23309B210();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v39);
  }
  uint64_t v88 = (void *)v41;
  uint64_t v42 = *v36;
  id v43 = objc_msgSend(self, sel_localDevice);
  uint64_t v44 = *(uint64_t *)((char *)v36 + *(int *)(v37 + 40));
  id v87 = v43;
  if (v44)
  {
    uint64_t v45 = swift_bridgeObjectRetain();
    sub_233020734(v45);
    swift_bridgeObjectRelease();
    uint64_t v80 = sub_23309B640();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v80 = 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = sub_23309B6E0();
  swift_bridgeObjectRelease();
  unint64_t v47 = v36[1];
  sub_232F3A800(0, (unint64_t *)&qword_268757138);
  uint64_t v48 = sub_23309B990();
  swift_bridgeObjectRelease();
  uint64_t v85 = v42;
  uint64_t v86 = (void *)v46;
  if (a10)
  {
    uint64_t v79 = sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v49 = a14;
    if (a12)
    {
LABEL_16:
      id v99 = (id)sub_23309B6E0();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v79 = 0;
    uint64_t v49 = a14;
    if (a12) {
      goto LABEL_16;
    }
  }
  id v99 = 0;
LABEL_19:
  uint64_t v97 = a1;
  if (v49)
  {
    id v102 = (id)sub_23309B6E0();
    swift_bridgeObjectRelease();
    uint64_t v50 = a17;
    if (a16) {
      goto LABEL_21;
    }
LABEL_24:
    id v101 = 0;
    uint64_t v51 = a19;
    if (v50) {
      goto LABEL_22;
    }
LABEL_25:
    id v100 = 0;
    goto LABEL_26;
  }
  id v102 = 0;
  uint64_t v50 = a17;
  if (!a16) {
    goto LABEL_24;
  }
LABEL_21:
  id v101 = (id)sub_23309B6E0();
  swift_bridgeObjectRelease();
  uint64_t v51 = a19;
  if (!v50) {
    goto LABEL_25;
  }
LABEL_22:
  id v100 = (id)sub_23309B990();
  swift_bridgeObjectRelease();
LABEL_26:
  if (v51)
  {
    id v98 = (id)sub_23309B6E0();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v98 = 0;
  }
  id v52 = sub_233042B90();
  if (a22)
  {
    uint64_t v53 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v53 = 0;
  }
  if (a23)
  {
    sub_232F69974();
    long long v54 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v54 = 0;
  }
  if (a24)
  {
    sub_232F69974();
    uint64_t v55 = (void *)sub_23309B990();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = 0;
  }
  id v82 = v55;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v77 = v55;
  id v84 = v54;
  uint64_t v75 = v53;
  uint64_t v76 = v54;
  LOBYTE(v74) = a21 & 1;
  id v83 = v52;
  id v73 = v52;
  LOBYTE(v72) = a20 & 1;
  uint64_t v57 = (void *)v79;
  id v71 = v95;
  uint64_t v58 = (void *)v48;
  uint64_t v69 = (v47 >> 2) & 1;
  uint64_t v70 = v48;
  id v95 = v53;
  uint64_t v59 = v86;
  long long v60 = (void *)v80;
  long long v61 = v87;
  uint64_t v62 = v93;
  unint64_t v63 = (void *)v81;
  id v64 = v90;
  uint64_t v65 = v88;
  id v66 = objc_retainAutoreleasedReturnValue(objc_msgSend(ObjCClassFromMetadata, sel_vaccinationRecordWithType_note_enteredInError_modifiedDate_originIdentifier_locale_extractionVersion_device_metadata_country_state_vaccinationCodings_expirationDate_doseNumber_doseQuantity_lotNumber_performer_bodySiteCodings_reaction_notGiven_administrationDate_statusCoding_patientReported_routeCodings_reasonsCodings_reasonsNotGivenCodings_, v93, v81, v91 & 1, v90, v89, v88, v85, v87, v80, v86, v69, v70, v71, v79, v99, v102,
            v101,
            v100,
            v98,
            v72,
            v94,
            v73,
            v74,
            v75,
            v76,
            v77));

  id v67 = v66;
  uint64_t v68 = (void *)sub_23309B130();
  objc_msgSend(v67, sel_setCreationDate_, v68);

  sub_232F69914(v96, (uint64_t (*)(void))sub_232F69858);
  sub_232F69914((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for RecordExtractionContext);
  return v67;
}

void sub_232F69858()
{
  if (!qword_2687576B8)
  {
    sub_23309B230();
    unint64_t v0 = sub_23309BD00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687576B8);
    }
  }
}

uint64_t sub_232F698B0(uint64_t a1, uint64_t a2)
{
  sub_232F69858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_232F69914(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_232F69974()
{
  if (!qword_268757810)
  {
    sub_232F3A800(255, (unint64_t *)&qword_268757138);
    unint64_t v0 = sub_23309BA00();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268757810);
    }
  }
}

uint64_t ModelsDSTU2.Bundle.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_23309C3F0();
    if (v4) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0(a1, v3);
  swift_bridgeObjectRelease();
  if (!v4) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

__n128 ModelsDSTU2.ResourceProxy.get()@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F803C0(v2, (uint64_t)v6, type metadata accessor for ModelsDSTU2.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      a1[3] = type metadata accessor for ModelsDSTU2.Condition(0);
      a1[4] = sub_232F7C748(&qword_268757838, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      char v12 = type metadata accessor for ModelsDSTU2.Condition;
      goto LABEL_7;
    case 2u:
      a1[3] = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      a1[4] = sub_232F7C748(&qword_268757830, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      char v12 = type metadata accessor for ModelsDSTU2.DiagnosticReport;
      goto LABEL_7;
    case 3u:
      a1[3] = type metadata accessor for ModelsDSTU2.Immunization(0);
      a1[4] = sub_232F7C748(&qword_268757828, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      char v12 = type metadata accessor for ModelsDSTU2.Immunization;
      goto LABEL_7;
    case 4u:
      a1[3] = type metadata accessor for ModelsDSTU2.Observation(0);
      a1[4] = sub_232F7C748(&qword_268757820, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      char v12 = type metadata accessor for ModelsDSTU2.Observation;
LABEL_7:
      sub_232FD80BC((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, v12);
      break;
    case 5u:
      a1[3] = (uint64_t)&type metadata for ModelsDSTU2.Patient;
      a1[4] = sub_232F7C624();
      uint64_t v13 = swift_allocObject();
      *a1 = v13;
      long long v14 = *((_OWORD *)v6 + 7);
      *(_OWORD *)(v13 + 112) = *((_OWORD *)v6 + 6);
      *(_OWORD *)(v13 + 128) = v14;
      *(_OWORD *)(v13 + 144) = *((_OWORD *)v6 + 8);
      long long v15 = *((_OWORD *)v6 + 3);
      *(_OWORD *)(v13 + 48) = *((_OWORD *)v6 + 2);
      *(_OWORD *)(v13 + 64) = v15;
      long long v16 = *((_OWORD *)v6 + 5);
      *(_OWORD *)(v13 + 80) = *((_OWORD *)v6 + 4);
      *(_OWORD *)(v13 + 96) = v16;
      __n128 result = *((__n128 *)v6 + 1);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)v6;
      *(__n128 *)(v13 + 32) = result;
      break;
    case 6u:
      long long v17 = *(_OWORD *)v6;
      __n128 v21 = *((__n128 *)v6 + 1);
      long long v22 = v17;
      uint64_t v19 = *((void *)v6 + 4);
      uint64_t v18 = *((void *)v6 + 5);
      a1[3] = (uint64_t)&type metadata for UnknownResource;
      a1[4] = sub_232E9B608();
      uint64_t v20 = swift_allocObject();
      *a1 = v20;
      __n128 result = v21;
      *(_OWORD *)(v20 + 16) = v22;
      *(__n128 *)(v20 + 32) = result;
      *(void *)(v20 + 48) = v19;
      *(void *)(v20 + 56) = v18;
      break;
    default:
      long long v7 = *(_OWORD *)v6;
      __n128 v21 = *((__n128 *)v6 + 1);
      long long v22 = v7;
      uint64_t v8 = *((void *)v6 + 4);
      a1[3] = (uint64_t)&type metadata for ModelsDSTU2.Bundle;
      a1[4] = sub_232F7C7D0();
      uint64_t v9 = swift_allocObject();
      *a1 = v9;
      __n128 result = v21;
      *(_OWORD *)(v9 + 16) = v22;
      *(__n128 *)(v9 + 32) = result;
      *(void *)(v9 + 48) = v8;
      break;
  }
  return result;
}

uint64_t ModelsDSTU2.ResourceProxy.get<A>(if:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F803C0(v3, (uint64_t)v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v30 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Condition(0);
      unint64_t v31 = sub_232F7C748(&qword_268757838, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
      long long v14 = type metadata accessor for ModelsDSTU2.Condition;
      goto LABEL_7;
    case 2u:
      uint64_t v30 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      unint64_t v31 = sub_232F7C748(&qword_268757830, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
      long long v14 = type metadata accessor for ModelsDSTU2.DiagnosticReport;
      goto LABEL_7;
    case 3u:
      uint64_t v30 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Immunization(0);
      unint64_t v31 = sub_232F7C748(&qword_268757828, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
      long long v14 = type metadata accessor for ModelsDSTU2.Immunization;
      goto LABEL_7;
    case 4u:
      uint64_t v30 = (ValueMetadata *)type metadata accessor for ModelsDSTU2.Observation(0);
      unint64_t v31 = sub_232F7C748(&qword_268757820, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
      long long v14 = type metadata accessor for ModelsDSTU2.Observation;
LABEL_7:
      sub_232FD80BC((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, v14);
      break;
    case 5u:
      uint64_t v30 = &type metadata for ModelsDSTU2.Patient;
      unint64_t v31 = sub_232F7C624();
      long long v15 = (_OWORD *)swift_allocObject();
      v29[0] = (uint64_t)v15;
      long long v16 = *((_OWORD *)v8 + 7);
      v15[7] = *((_OWORD *)v8 + 6);
      v15[8] = v16;
      v15[9] = *((_OWORD *)v8 + 8);
      long long v17 = *((_OWORD *)v8 + 3);
      v15[3] = *((_OWORD *)v8 + 2);
      void v15[4] = v17;
      long long v18 = *((_OWORD *)v8 + 5);
      v15[5] = *((_OWORD *)v8 + 4);
      v15[6] = v18;
      long long v19 = *((_OWORD *)v8 + 1);
      v15[1] = *(_OWORD *)v8;
      v15[2] = v19;
      break;
    case 6u:
      long long v20 = *(_OWORD *)v8;
      long long v27 = *((_OWORD *)v8 + 1);
      long long v28 = v20;
      uint64_t v22 = *((void *)v8 + 4);
      uint64_t v21 = *((void *)v8 + 5);
      uint64_t v30 = &type metadata for UnknownResource;
      unint64_t v31 = sub_232E9B608();
      uint64_t v23 = swift_allocObject();
      v29[0] = v23;
      long long v24 = v27;
      *(_OWORD *)(v23 + 16) = v28;
      *(_OWORD *)(v23 + 32) = v24;
      *(void *)(v23 + 48) = v22;
      *(void *)(v23 + 56) = v21;
      break;
    default:
      long long v9 = *(_OWORD *)v8;
      long long v27 = *((_OWORD *)v8 + 1);
      long long v28 = v9;
      uint64_t v10 = *((void *)v8 + 4);
      uint64_t v30 = &type metadata for ModelsDSTU2.Bundle;
      unint64_t v31 = sub_232F7C7D0();
      uint64_t v11 = swift_allocObject();
      v29[0] = v11;
      long long v12 = v27;
      *(_OWORD *)(v11 + 16) = v28;
      *(_OWORD *)(v11 + 32) = v12;
      *(void *)(v11 + 48) = v10;
      break;
  }
  sub_232E9BAB0();
  int v25 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v25 ^ 1u, 1, a1);
}

uint64_t sub_232F6A23C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_232F6A290@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_232F6A2E8(uint64_t a1)
{
  unint64_t v2 = sub_232F7C86C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F6A324(uint64_t a1)
{
  unint64_t v2 = sub_232F7C86C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.ResourceProxy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  sub_232F80428(0, &qword_268757848, (uint64_t (*)(void))sub_232F7C86C, (uint64_t)&type metadata for ModelsDSTU2.ResourceProxy.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v64 = v3;
  uint64_t v61 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v56 - v4;
  uint64_t v59 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v6 = MEMORY[0x270FA5388](v59);
  uint64_t v57 = (char **)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v58 = (char *)&v56 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v62 = (char *)&v56 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v14 = (char *)&v56 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  long long v17 = (char *)&v56 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  long long v20 = (char *)&v56 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v56 - v22;
  MEMORY[0x270FA5388](v21);
  int v25 = (char *)&v56 - v24;
  uint64_t v26 = a1[3];
  uint64_t v76 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  sub_232F7C86C();
  unint64_t v63 = v5;
  uint64_t v27 = (uint64_t)v65;
  sub_23309C460();
  if (!v27)
  {
    long long v28 = v23;
    uint64_t v56 = v20;
    uint64_t v29 = (uint64_t)v62;
    uint64_t v65 = v25;
    uint64_t v30 = v64;
    unint64_t v31 = v63;
    uint64_t v32 = sub_23309C0A0();
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    BOOL v38 = v32 == 0x656C646E7542 && v33 == 0xE600000000000000;
    if (v38 || (sub_23309C220() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v76;
      sub_232EA35E0((uint64_t)v76, (uint64_t)v75);
      ModelsDSTU2.Bundle.init(from:)(v75, (uint64_t *)&v66);
      uint64_t v39 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
      uint64_t v40 = *((void *)&v66 + 1);
      uint64_t v41 = v68;
      *(void *)long long v28 = v66;
      *((void *)v28 + 1) = v40;
      *((_OWORD *)v28 + 1) = v67;
      *((void *)v28 + 4) = v41;
      swift_storeEnumTagMultiPayload();
      uint64_t v42 = (uint64_t)v28;
      goto LABEL_11;
    }
    BOOL v44 = v36 == 0x6F697469646E6F43 && v37 == 0xE90000000000006ELL;
    if (v44 || (sub_23309C220() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = v60;
      uint64_t v34 = (uint64_t)v76;
      sub_232EA35E0((uint64_t)v76, (uint64_t)&v66);
      uint64_t v45 = (uint64_t)v56;
      ModelsDSTU2.Condition.init(from:)(&v66, (uint64_t)v56);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
      swift_storeEnumTagMultiPayload();
      uint64_t v39 = (uint64_t)v65;
      sub_232FD80BC(v45, (uint64_t)v65, type metadata accessor for ModelsDSTU2.ResourceProxy);
      goto LABEL_13;
    }
    if (v36 == 0xD000000000000010 && v37 == 0x80000002330A3710 || (sub_23309C220() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = (uint64_t)v65;
      uint64_t v34 = (uint64_t)v76;
      sub_232EA35E0((uint64_t)v76, (uint64_t)&v66);
      ModelsDSTU2.DiagnosticReport.init(from:)(&v66, (uint64_t)v17);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
      swift_storeEnumTagMultiPayload();
      uint64_t v42 = (uint64_t)v17;
      goto LABEL_11;
    }
    if (v36 == 0x617A696E756D6D49 && v37 == 0xEC0000006E6F6974 || (sub_23309C220() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v76;
      sub_232EA35E0((uint64_t)v76, (uint64_t)&v66);
      uint64_t v46 = v14;
      ModelsDSTU2.Immunization.init(from:)(&v66, (uint64_t)v14);
      uint64_t v39 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
    }
    else
    {
      if ((v36 != 0x746176726573624FLL || v37 != 0xEB000000006E6F69) && (sub_23309C220() & 1) == 0)
      {
        if (v36 == 0x746E6569746150 && v37 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v47 = sub_23309C220();
          swift_bridgeObjectRelease();
          if ((v47 & 1) == 0)
          {
            sub_232EA35E0((uint64_t)v76, (uint64_t)v75);
            UnknownResource.init(from:)(v75, (uint64_t *)&v66);
            (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
            uint64_t v53 = *((void *)&v66 + 1);
            uint64_t v54 = (uint64_t)v57;
            *uint64_t v57 = v66;
            *(void *)(v54 + 8) = v53;
            long long v55 = v68;
            *(_OWORD *)(v54 + 16) = v67;
            *(_OWORD *)(v54 + 32) = v55;
            swift_storeEnumTagMultiPayload();
            uint64_t v39 = (uint64_t)v65;
            sub_232FD80BC(v54, (uint64_t)v65, type metadata accessor for ModelsDSTU2.ResourceProxy);
            uint64_t v34 = (uint64_t)v76;
            goto LABEL_12;
          }
        }
        uint64_t v34 = (uint64_t)v76;
        sub_232EA35E0((uint64_t)v76, (uint64_t)v75);
        ModelsDSTU2.Patient.init(from:)(v75, &v66);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
        long long v48 = v73;
        uint64_t v49 = v58;
        *((_OWORD *)v58 + 6) = v72;
        v49[7] = v48;
        v49[8] = v74;
        long long v50 = v69;
        v49[2] = v68;
        v49[3] = v50;
        long long v51 = v71;
        v49[4] = v70;
        v49[5] = v51;
        long long v52 = v67;
        _OWORD *v49 = v66;
        v49[1] = v52;
        swift_storeEnumTagMultiPayload();
        uint64_t v42 = (uint64_t)v49;
        uint64_t v39 = (uint64_t)v65;
LABEL_11:
        sub_232FD80BC(v42, v39, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_12:
        uint64_t v43 = v60;
LABEL_13:
        sub_232FD80BC(v39, v43, type metadata accessor for ModelsDSTU2.ResourceProxy);
        return __swift_destroy_boxed_opaque_existential_1(v34);
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v76;
      sub_232EA35E0((uint64_t)v76, (uint64_t)&v66);
      uint64_t v46 = (char *)v29;
      ModelsDSTU2.Observation.init(from:)(&v66, v29);
      uint64_t v39 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v30);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = (uint64_t)v46;
    goto LABEL_11;
  }
  uint64_t v34 = (uint64_t)v76;
  return __swift_destroy_boxed_opaque_existential_1(v34);
}

uint64_t ModelsDSTU2.Bundle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v20 = a2;
  sub_232F80428(0, &qword_268757858, (uint64_t (*)(void))sub_232F7C8C0, (uint64_t)&type metadata for ModelsDSTU2.Bundle.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v21 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v23 = &type metadata for ModelsDSTU2.Bundle;
  sub_232F7C914();
  sub_23309B770();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7C8C0();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v5;
    LOBYTE(v23) = 0;
    uint64_t v9 = v21;
    uint64_t v11 = sub_23309C0A0();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_232F7CA40(0, &qword_268757870, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    char v22 = 1;
    sub_232F7C970();
    sub_23309C080();
    uint64_t v19 = v11;
    long long v14 = v23;
    LOBYTE(v23) = 2;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_23309C040();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
    swift_bridgeObjectRetain();
    uint64_t v18 = v20;
    *long long v20 = v19;
    v18[1] = v13;
    v18[2] = (uint64_t)v14;
    v18[3] = v15;
    void v18[4] = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.Condition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v86 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v88 = (uint64_t)&v82 - v7;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v87 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v82 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v82 - v14;
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v3);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v82 - v17;
  sub_232F80428(0, &qword_268757888, (uint64_t (*)(void))sub_232F7CAA4, (uint64_t)&type metadata for ModelsDSTU2.Condition.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v89 = *(void *)(v19 - 8);
  uint64_t v90 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v82 - v20;
  uint64_t v22 = type metadata accessor for ModelsDSTU2.Condition(0);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  int v25 = (uint64_t *)((char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = (int *)v23;
  *(void *)&long long v96 = v23;
  sub_232F7CB4C(0, &qword_268757898, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  uint64_t *v25 = sub_23309B770();
  v25[1] = v26;
  uint64_t v92 = a1;
  id v93 = v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CAA4();
  int v91 = v21;
  uint64_t v27 = v95;
  sub_23309C460();
  if (v27)
  {
    uint64_t v95 = v27;
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    int v37 = 0;
    LODWORD(v83) = 0;
    LODWORD(v84) = 0;
    LODWORD(v85) = 0;
    LODWORD(v86) = 0;
    LODWORD(v87) = 0;
    LODWORD(v88) = 0;
    LODWORD(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
  }
  else
  {
    uint64_t v28 = (uint64_t)v18;
    uint64_t v29 = (uint64_t)v15;
    id v84 = v13;
    uint64_t v30 = v89;
    LOBYTE(v96) = 0;
    uint64_t v41 = sub_23309C0A0();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    BOOL v44 = v93;
    *id v93 = v41;
    v44[1] = v43;
    char v98 = 1;
    sub_232E95F10();
    sub_23309C080();
    uint64_t v45 = v94;
    v44[2] = v96;
    type metadata accessor for Reference();
    LOBYTE(v96) = 2;
    sub_232F7C748(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_23309C080();
    sub_232F80074(v28, (uint64_t)v44 + v45[6], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    type metadata accessor for FHIRDateTime();
    LOBYTE(v96) = 3;
    uint64_t v46 = sub_232F7C748(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    uint64_t v83 = v46;
    sub_232F80074(v29, (uint64_t)v44 + v45[7], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    char v98 = 4;
    sub_232EA391C();
    sub_23309C0E0();
    uint64_t v47 = v97;
    long long v48 = (char *)v44 + v45[8];
    *(_OWORD *)long long v48 = v96;
    *((void *)v48 + 2) = v47;
    char v98 = 5;
    sub_23309C080();
    uint64_t v49 = v97;
    long long v50 = (char *)v44 + v45[9];
    *(_OWORD *)long long v50 = v96;
    *((void *)v50 + 2) = v49;
    LOBYTE(v96) = 6;
    uint64_t v51 = sub_23309C040();
    long long v52 = (uint64_t *)((char *)v44 + v45[10]);
    *long long v52 = v51;
    v52[1] = v53;
    LOBYTE(v96) = 7;
    uint64_t v54 = sub_23309C0A0();
    long long v55 = (uint64_t *)((char *)v44 + v45[11]);
    *long long v55 = v54;
    v55[1] = v56;
    char v98 = 8;
    sub_23309C080();
    uint64_t v95 = 0;
    uint64_t v57 = v97;
    uint64_t v58 = (char *)v44 + v45[12];
    *(_OWORD *)uint64_t v58 = v96;
    *((void *)v58 + 2) = v57;
    sub_232EBDA84(0, &qword_268756758);
    char v98 = 9;
    sub_232EA3970();
    uint64_t v59 = v95;
    sub_23309C080();
    uint64_t v95 = v59;
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
      LODWORD(v84) = 0;
      LODWORD(v85) = 0;
      LODWORD(v86) = 0;
      LODWORD(v87) = 0;
      LODWORD(v88) = 0;
      LODWORD(v89) = 0;
      LODWORD(v90) = 0;
      LODWORD(v91) = 0;
      int v31 = 1;
      int v32 = 1;
      int v33 = 1;
      int v34 = 1;
      int v35 = 1;
      int v36 = 1;
      int v37 = 1;
      LODWORD(v83) = 1;
    }
    else
    {
      *(uint64_t *)((char *)v93 + v94[13]) = v96;
      LOBYTE(v96) = 10;
      sub_23309C080();
      uint64_t v95 = 0;
      sub_232F80074((uint64_t)v84, (uint64_t)v93 + v94[14], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      type metadata accessor for Period();
      LOBYTE(v96) = 11;
      sub_232F7C748(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
      uint64_t v60 = v95;
      sub_23309C080();
      uint64_t v95 = v60;
      if (v60)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
        LODWORD(v86) = 0;
        LODWORD(v87) = 0;
        LODWORD(v88) = 0;
        LODWORD(v89) = 0;
        LODWORD(v90) = 0;
        LODWORD(v91) = 0;
        int v31 = 1;
        int v32 = 1;
        int v33 = 1;
        int v34 = 1;
        int v35 = 1;
        int v36 = 1;
        int v37 = 1;
        LODWORD(v83) = 1;
        LODWORD(v84) = 1;
        LODWORD(v85) = 1;
      }
      else
      {
        sub_232F80074(v88, (uint64_t)v93 + v94[15], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        LOBYTE(v96) = 12;
        uint64_t v61 = v95;
        uint64_t v62 = sub_23309C040();
        uint64_t v95 = v61;
        if (v61)
        {
          (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
          LODWORD(v87) = 0;
          LODWORD(v88) = 0;
          LODWORD(v89) = 0;
          LODWORD(v90) = 0;
          LODWORD(v91) = 0;
          int v31 = 1;
          int v32 = 1;
          int v33 = 1;
          int v34 = 1;
          int v35 = 1;
          int v36 = 1;
          int v37 = 1;
          LODWORD(v83) = 1;
          LODWORD(v84) = 1;
          LODWORD(v85) = 1;
          LODWORD(v86) = 1;
        }
        else
        {
          uint64_t v64 = (uint64_t *)((char *)v93 + v94[16]);
          *uint64_t v64 = v62;
          v64[1] = v63;
          LOBYTE(v96) = 13;
          uint64_t v65 = v95;
          sub_23309C080();
          uint64_t v95 = v65;
          if (v65)
          {
            (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
            LODWORD(v88) = 0;
            LODWORD(v89) = 0;
            LODWORD(v90) = 0;
            LODWORD(v91) = 0;
            int v31 = 1;
            int v32 = 1;
            int v33 = 1;
            int v34 = 1;
            int v35 = 1;
            int v36 = 1;
            int v37 = 1;
            LODWORD(v83) = 1;
            LODWORD(v84) = 1;
            LODWORD(v85) = 1;
            LODWORD(v86) = 1;
            LODWORD(v87) = 1;
          }
          else
          {
            sub_232F80074(v87, (uint64_t)v93 + v94[17], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            LOBYTE(v96) = 14;
            uint64_t v66 = v95;
            sub_23309C080();
            uint64_t v95 = v66;
            if (v66)
            {
              (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
              LODWORD(v89) = 0;
              LODWORD(v90) = 0;
              LODWORD(v91) = 0;
              int v31 = 1;
              int v32 = 1;
              int v33 = 1;
              int v34 = 1;
              int v35 = 1;
              int v36 = 1;
              int v37 = 1;
              LODWORD(v83) = 1;
              LODWORD(v84) = 1;
              LODWORD(v85) = 1;
              LODWORD(v86) = 1;
              LODWORD(v87) = 1;
              LODWORD(v88) = 1;
            }
            else
            {
              sub_232F80074(v86, (uint64_t)v93 + v94[18], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
              LOBYTE(v96) = 15;
              uint64_t v67 = v95;
              uint64_t v68 = sub_23309C040();
              uint64_t v95 = v67;
              if (v67)
              {
                (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
                LODWORD(v90) = 0;
                LODWORD(v91) = 0;
                int v31 = 1;
                int v32 = 1;
                int v33 = 1;
                int v34 = 1;
                int v35 = 1;
                int v36 = 1;
                int v37 = 1;
                LODWORD(v83) = 1;
                LODWORD(v84) = 1;
                LODWORD(v85) = 1;
                LODWORD(v86) = 1;
                LODWORD(v87) = 1;
                LODWORD(v88) = 1;
                LODWORD(v89) = 1;
              }
              else
              {
                long long v70 = (uint64_t *)((char *)v93 + v94[19]);
                *long long v70 = v68;
                v70[1] = v69;
                LOBYTE(v96) = 16;
                uint64_t v71 = v95;
                uint64_t v72 = sub_23309C040();
                uint64_t v95 = v71;
                if (v71)
                {
                  (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
                  LODWORD(v91) = 0;
                  int v31 = 1;
                  int v32 = 1;
                  int v33 = 1;
                  int v34 = 1;
                  int v35 = 1;
                  int v36 = 1;
                  int v37 = 1;
                  LODWORD(v83) = 1;
                  LODWORD(v84) = 1;
                  LODWORD(v85) = 1;
                  LODWORD(v86) = 1;
                  LODWORD(v87) = 1;
                  LODWORD(v88) = 1;
                  LODWORD(v89) = 1;
                  LODWORD(v90) = 1;
                }
                else
                {
                  long long v74 = (uint64_t *)((char *)v93 + v94[20]);
                  *long long v74 = v72;
                  v74[1] = v73;
                  LOBYTE(v96) = 17;
                  uint64_t v75 = v95;
                  uint64_t v76 = sub_23309C040();
                  uint64_t v95 = v75;
                  if (!v75)
                  {
                    uint64_t v78 = v76;
                    uint64_t v79 = v77;
                    (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
                    uint64_t v80 = (uint64_t)v93;
                    uint64_t v81 = (uint64_t *)((char *)v93 + v94[21]);
                    *uint64_t v81 = v78;
                    v81[1] = v79;
                    sub_232F803C0(v80, v85, type metadata accessor for ModelsDSTU2.Condition);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
                    return sub_232F7CB8C(v80, type metadata accessor for ModelsDSTU2.Condition);
                  }
                  (*(void (**)(char *, uint64_t))(v30 + 8))(v91, v90);
                  int v31 = 1;
                  int v32 = 1;
                  int v33 = 1;
                  int v34 = 1;
                  int v35 = 1;
                  int v36 = 1;
                  int v37 = 1;
                  LODWORD(v83) = 1;
                  LODWORD(v84) = 1;
                  LODWORD(v85) = 1;
                  LODWORD(v86) = 1;
                  LODWORD(v87) = 1;
                  LODWORD(v88) = 1;
                  LODWORD(v89) = 1;
                  LODWORD(v90) = 1;
                  LODWORD(v91) = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v38 = v93;
  uint64_t v39 = v94;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
  uint64_t result = swift_bridgeObjectRelease();
  if (v31)
  {
    uint64_t result = sub_232EA390C(v38[2]);
    if (!v32)
    {
LABEL_6:
      if (!v33) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[6], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!v33)
  {
LABEL_7:
    if (!v34) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[7], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v34)
  {
LABEL_8:
    if (!v35) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_9:
    if (!v36) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = sub_232E96840(*(uint64_t *)((char *)v38 + v39[9]), *(uint64_t *)((char *)v38 + v39[9] + 8));
  if (!v36)
  {
LABEL_10:
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    if (!v83) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v83)
  {
LABEL_12:
    if (!v84) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = sub_232E96840(*(uint64_t *)((char *)v38 + v39[12]), *(uint64_t *)((char *)v38 + v39[12] + 8));
  if (!v84)
  {
LABEL_13:
    if (!v85) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v85)
  {
LABEL_14:
    if (!v86) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[14], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v86)
  {
LABEL_15:
    if (!v87) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[15], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v87)
  {
LABEL_16:
    if (!v88) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v88)
  {
LABEL_17:
    if (!v89) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[17], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v89)
  {
LABEL_18:
    if (!v90) {
      goto LABEL_19;
    }
LABEL_35:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v91) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_34:
  uint64_t result = sub_232F80004((uint64_t)v38 + v39[18], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v90) {
    goto LABEL_35;
  }
LABEL_19:
  if (!v91) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.DiagnosticReport.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v46 = (char *)&v42 - v5;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  BOOL v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v42 - v9;
  sub_232F80428(0, &qword_2687578A0, (uint64_t (*)(void))sub_232F7CAF8, (uint64_t)&type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v47 = v11;
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v15;
  *(void *)&long long v52 = v15;
  sub_232F7CB4C(0, &qword_2687578B0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  *(void *)uint64_t v17 = sub_23309B770();
  *((void *)v17 + 1) = v18;
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  uint64_t v19 = a1[3];
  uint64_t v49 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_232F7CAF8();
  long long v48 = v13;
  uint64_t v20 = v50;
  sub_23309C460();
  if (v20)
  {
    uint64_t v50 = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = (uint64_t)v46;
    LOBYTE(v52) = 0;
    uint64_t v23 = sub_23309C0A0();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v17 = v23;
    *((void *)v17 + 1) = v25;
    LOBYTE(v52) = 1;
    uint64_t v26 = sub_23309C040();
    uint64_t v27 = (uint64_t)v49;
    *((void *)v17 + 2) = v26;
    *((void *)v17 + 3) = v28;
    LOBYTE(v52) = 2;
    *((void *)v17 + 4) = sub_23309C0A0();
    *((void *)v17 + 5) = v29;
    char v54 = 3;
    sub_232EA391C();
    sub_23309C0E0();
    uint64_t v30 = v53;
    *((_OWORD *)v17 + 3) = v52;
    *((void *)v17 + 8) = v30;
    LOBYTE(v52) = 4;
    *((void *)v17 + 9) = sub_23309C040();
    *((void *)v17 + 10) = v31;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v52) = 5;
    uint64_t v32 = sub_232F7C748(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    uint64_t v50 = v32;
    uint64_t v33 = v51;
    sub_232F80074((uint64_t)v10, (uint64_t)&v17[*(int *)(v51 + 36)], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v52) = 6;
    sub_232F7C748(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C080();
    uint64_t v34 = v33;
    sub_232F80074(v21, (uint64_t)&v17[*(int *)(v33 + 40)], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v52) = 7;
    uint64_t v35 = (uint64_t)v44;
    sub_23309C080();
    sub_232F80074(v35, (uint64_t)&v17[*(int *)(v34 + 44)], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v52) = 8;
    uint64_t v36 = v47;
    uint64_t v37 = sub_23309C040();
    uint64_t v50 = 0;
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    MEMORY[8](v48, v36);
    uint64_t v41 = &v17[*(int *)(v51 + 48)];
    *(void *)uint64_t v41 = v38;
    *((void *)v41 + 1) = v40;
    sub_232F803C0((uint64_t)v17, v43, type metadata accessor for ModelsDSTU2.DiagnosticReport);
    __swift_destroy_boxed_opaque_existential_1(v27);
    return sub_232F7CB8C((uint64_t)v17, type metadata accessor for ModelsDSTU2.DiagnosticReport);
  }
}

uint64_t ModelsDSTU2.Immunization.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v62 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v60 - v7;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v60 - v10;
  sub_232F80428(0, &qword_2687578B8, (uint64_t (*)(void))sub_232F7CBEC, (uint64_t)&type metadata for ModelsDSTU2.Immunization.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v15 = type metadata accessor for ModelsDSTU2.Immunization(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = (int *)v16;
  *(void *)&long long v70 = v16;
  sub_232F7CB4C(0, &qword_2687578C8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  *uint64_t v18 = sub_23309B770();
  v18[1] = v19;
  v18[2] = 0;
  v18[3] = 0;
  uint64_t v67 = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CBEC();
  uint64_t v65 = v14;
  uint64_t v20 = v68;
  sub_23309C460();
  uint64_t v66 = a1;
  if (v20)
  {
    uint64_t v68 = v20;
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    LODWORD(v65) = 0;
  }
  else
  {
    uint64_t v21 = (uint64_t)v11;
    uint64_t v60 = v8;
    uint64_t v22 = v63;
    LOBYTE(v70) = 0;
    uint64_t v34 = sub_23309C0A0();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v37 = v67;
    *uint64_t v67 = v34;
    v37[1] = v36;
    LOBYTE(v70) = 1;
    v37[2] = sub_23309C040();
    v37[3] = v38;
    char v72 = 2;
    sub_232E95F10();
    sub_23309C080();
    v37[4] = v70;
    LOBYTE(v70) = 3;
    v37[5] = sub_23309C0A0();
    v37[6] = v39;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v70) = 4;
    sub_232F7C748(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    uint64_t v40 = v69;
    sub_232F80074(v21, (uint64_t)v37 + v69[8], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    char v72 = 5;
    sub_232EA4058();
    sub_23309C080();
    int v41 = DWORD2(v70);
    char v42 = BYTE12(v70);
    uint64_t v43 = (char *)v37 + v40[9];
    *(void *)uint64_t v43 = v70;
    *((_DWORD *)v43 + 2) = v41;
    v43[12] = v42;
    sub_232F7CA40(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    char v72 = 6;
    sub_232EA39F0();
    sub_23309C080();
    *(uint64_t *)((char *)v37 + v40[10]) = v70;
    LOBYTE(v70) = 7;
    *((unsigned char *)v37 + v40[11]) = sub_23309C0B0() & 1;
    sub_232EBDA84(0, &qword_2687578D0);
    char v72 = 8;
    sub_232F7CC40();
    sub_23309C080();
    uint64_t v68 = 0;
    *(uint64_t *)((char *)v37 + v69[12]) = v70;
    char v72 = 9;
    sub_232EA391C();
    uint64_t v44 = v68;
    sub_23309C0E0();
    uint64_t v68 = v44;
    if (v44)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v65, v64);
      int v28 = 0;
      int v29 = 0;
      int v30 = 0;
      LODWORD(v65) = 0;
      int v23 = 1;
      int v24 = 1;
      int v25 = 1;
      int v26 = 1;
      int v27 = 1;
    }
    else
    {
      uint64_t v45 = v71;
      uint64_t v46 = (char *)v67 + v69[13];
      *(_OWORD *)uint64_t v46 = v70;
      *((void *)v46 + 2) = v45;
      LOBYTE(v70) = 10;
      char v47 = sub_23309C0B0();
      uint64_t v68 = 0;
      *((unsigned char *)v67 + v69[14]) = v47 & 1;
      type metadata accessor for Reference();
      LOBYTE(v70) = 11;
      sub_232F7C748(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
      uint64_t v48 = v68;
      sub_23309C080();
      uint64_t v68 = v48;
      if (v48)
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v65, v64);
        int v29 = 0;
        int v30 = 0;
        LODWORD(v65) = 0;
        int v23 = 1;
        int v24 = 1;
        int v25 = 1;
        int v26 = 1;
        int v27 = 1;
        int v28 = 1;
      }
      else
      {
        sub_232F80074((uint64_t)v60, (uint64_t)v67 + v69[15], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
        LOBYTE(v70) = 12;
        uint64_t v49 = v68;
        uint64_t v50 = sub_23309C040();
        uint64_t v68 = v49;
        if (v49)
        {
          (*(void (**)(char *, uint64_t))(v22 + 8))(v65, v64);
          int v30 = 0;
          LODWORD(v65) = 0;
          int v23 = 1;
          int v24 = 1;
          int v25 = 1;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
        }
        else
        {
          long long v52 = (uint64_t *)((char *)v67 + v69[16]);
          *long long v52 = v50;
          v52[1] = v51;
          LOBYTE(v70) = 13;
          sub_23309C080();
          uint64_t v68 = 0;
          sub_232F80074(v62, (uint64_t)v67 + v69[17], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
          LOBYTE(v70) = 14;
          uint64_t v53 = v68;
          uint64_t v54 = sub_23309C040();
          uint64_t v68 = v53;
          if (!v53)
          {
            uint64_t v56 = v54;
            uint64_t v57 = v55;
            (*(void (**)(char *, uint64_t))(v22 + 8))(v65, v64);
            uint64_t v58 = (uint64_t)v67;
            uint64_t v59 = (uint64_t *)((char *)v67 + v69[18]);
            *uint64_t v59 = v56;
            v59[1] = v57;
            sub_232F803C0(v58, v61, type metadata accessor for ModelsDSTU2.Immunization);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
            return sub_232F7CB8C(v58, type metadata accessor for ModelsDSTU2.Immunization);
          }
          (*(void (**)(char *, uint64_t))(v22 + 8))(v65, v64);
          int v23 = 1;
          int v24 = 1;
          int v25 = 1;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
          int v30 = 1;
          LODWORD(v65) = 1;
        }
      }
    }
  }
  uint64_t v31 = v67;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v23)
  {
    uint64_t result = sub_232EA390C(v31[4]);
    if (!v24)
    {
LABEL_6:
      uint64_t v33 = v69;
      if (!v25) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v33 = v69;
  if (!v25)
  {
LABEL_7:
    if (!v26) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = sub_232F80004((uint64_t)v31 + v33[8], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v26)
  {
LABEL_8:
    if (!v27) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_9:
    if (!v28) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_10:
    if (!v29) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_11:
    if (!v30) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v65) {
      return result;
    }
    return sub_232F80004((uint64_t)v31 + v33[17], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  }
LABEL_20:
  uint64_t result = sub_232F80004((uint64_t)v31 + v33[15], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v30) {
    goto LABEL_21;
  }
LABEL_12:
  if (!v65) {
    return result;
  }
  return sub_232F80004((uint64_t)v31 + v33[17], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsDSTU2.Observation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v66 = (uint64_t)v63 - v5;
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v63 - v7;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v63 - v13;
  sub_232F80428(0, &qword_2687578E8, (uint64_t (*)(void))sub_232F7CD14, (uint64_t)&type metadata for ModelsDSTU2.Observation.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v69 = v15;
  uint64_t v67 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v63 - v16;
  uint64_t v18 = type metadata accessor for ModelsDSTU2.Observation(0);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (void *)((char *)v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = (int *)v19;
  *(void *)&long long v74 = v19;
  sub_232F7CB4C(0, &qword_2687578F8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  *uint64_t v21 = sub_23309B770();
  v21[1] = v22;
  _OWORD v21[2] = 0;
  void v21[3] = 0;
  long long v70 = a1;
  uint64_t v71 = v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CD14();
  uint64_t v68 = v17;
  uint64_t v23 = v72;
  sub_23309C460();
  if (v23)
  {
    uint64_t v72 = v23;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    LODWORD(v65) = 0;
    LODWORD(v66) = 0;
    LODWORD(v67) = 0;
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
  }
  else
  {
    uint64_t v24 = (uint64_t)v14;
    uint64_t v25 = (uint64_t)v8;
    uint64_t v64 = v12;
    LOBYTE(v74) = 0;
    uint64_t v37 = sub_23309C0A0();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v40 = v71;
    *uint64_t v71 = v37;
    v40[1] = v39;
    LOBYTE(v74) = 1;
    void v40[2] = sub_23309C040();
    v40[3] = v41;
    char v76 = 2;
    sub_232E95F10();
    sub_23309C080();
    v40[4] = v74;
    LOBYTE(v74) = 3;
    v40[5] = sub_23309C0A0();
    v40[6] = v42;
    char v76 = 4;
    unint64_t v43 = sub_232EA391C();
    sub_23309C080();
    uint64_t v44 = v75;
    *(_OWORD *)(v40 + 7) = v74;
    v40[9] = v44;
    char v76 = 5;
    sub_23309C0E0();
    uint64_t v45 = v75;
    *((_OWORD *)v40 + 5) = v74;
    v40[12] = v45;
    LOBYTE(v74) = 6;
    v40[13] = sub_23309C040();
    v40[14] = v46;
    uint64_t v47 = type metadata accessor for FHIRDateTime();
    LOBYTE(v74) = 7;
    _OWORD v63[2] = sub_232F7C748(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v63[3] = v47;
    sub_23309C080();
    v63[1] = v43;
    sub_232F80074(v24, (uint64_t)v40 + v73[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v74) = 8;
    sub_232F7C748(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C080();
    uint64_t v72 = 0;
    sub_232F80074(v25, (uint64_t)v40 + v73[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v74) = 9;
    uint64_t v48 = v72;
    sub_23309C080();
    uint64_t v72 = v48;
    if (v48)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
      int v33 = 0;
      LODWORD(v65) = 0;
      LODWORD(v66) = 0;
      LODWORD(v67) = 0;
      LODWORD(v68) = 0;
      LODWORD(v69) = 0;
      int v26 = 1;
      int v27 = 1;
      int v28 = 1;
      int v29 = 1;
      int v30 = 1;
      int v31 = 1;
      int v32 = 1;
    }
    else
    {
      sub_232F80074((uint64_t)v64, (uint64_t)v71 + v73[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F7CA40(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
      char v76 = 10;
      sub_232EA3C24();
      uint64_t v49 = v72;
      sub_23309C080();
      uint64_t v72 = v49;
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
        LODWORD(v65) = 0;
        LODWORD(v66) = 0;
        LODWORD(v67) = 0;
        LODWORD(v68) = 0;
        LODWORD(v69) = 0;
        int v26 = 1;
        int v27 = 1;
        int v28 = 1;
        int v29 = 1;
        int v30 = 1;
        int v31 = 1;
        int v32 = 1;
        int v33 = 1;
      }
      else
      {
        *(uint64_t *)((char *)v71 + v73[14]) = v74;
        LOBYTE(v74) = 11;
        uint64_t v50 = sub_23309C040();
        uint64_t v72 = 0;
        uint64_t v51 = (uint64_t *)((char *)v71 + v73[15]);
        *uint64_t v51 = v50;
        v51[1] = v52;
        char v76 = 12;
        sub_23309C080();
        uint64_t v72 = 0;
        uint64_t v53 = v75;
        uint64_t v54 = (char *)v71 + v73[16];
        *(_OWORD *)uint64_t v54 = v74;
        *((void *)v54 + 2) = v53;
        type metadata accessor for Quantity();
        LOBYTE(v74) = 13;
        sub_232F7C748(&qword_2687568A0, (void (*)(uint64_t))type metadata accessor for Quantity);
        uint64_t v55 = v72;
        sub_23309C080();
        uint64_t v72 = v55;
        if (v55)
        {
          (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
          LODWORD(v68) = 0;
          LODWORD(v69) = 0;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
          int v30 = 1;
          int v31 = 1;
          int v32 = 1;
          int v33 = 1;
          LODWORD(v65) = 1;
          LODWORD(v66) = 1;
          LODWORD(v67) = 1;
        }
        else
        {
          sub_232F80074(v66, (uint64_t)v71 + v73[17], &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
          sub_232F7CA40(0, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
          char v76 = 14;
          sub_232EA4318();
          uint64_t v56 = v72;
          sub_23309C080();
          uint64_t v72 = v56;
          if (!v56)
          {
            *(uint64_t *)((char *)v71 + v73[18]) = v74;
            LOBYTE(v74) = 15;
            uint64_t v57 = sub_23309C040();
            uint64_t v72 = 0;
            uint64_t v58 = v57;
            uint64_t v60 = v59;
            (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
            uint64_t v61 = (uint64_t)v71;
            uint64_t v62 = (uint64_t *)((char *)v71 + v73[19]);
            *uint64_t v62 = v58;
            v62[1] = v60;
            sub_232F803C0(v61, v65, type metadata accessor for ModelsDSTU2.Observation);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
            return sub_232F7CB8C(v61, type metadata accessor for ModelsDSTU2.Observation);
          }
          (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
          LODWORD(v69) = 0;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
          int v30 = 1;
          int v31 = 1;
          int v32 = 1;
          int v33 = 1;
          LODWORD(v65) = 1;
          LODWORD(v66) = 1;
          LODWORD(v67) = 1;
          LODWORD(v68) = 1;
        }
      }
    }
  }
  uint64_t v34 = v71;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v26)
  {
    uint64_t result = sub_232EA390C(v34[4]);
    if (!v27)
    {
LABEL_6:
      if (!v28) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_7:
    if (!v29) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = sub_232E96840(v34[7], v34[8]);
  if (!v29)
  {
LABEL_8:
    if (!v30) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_9:
    uint64_t v36 = v73;
    if (!v31) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v36 = v73;
  if (!v31)
  {
LABEL_10:
    if (!v32) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_232F80004((uint64_t)v34 + v36[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v32)
  {
LABEL_11:
    if (!v33) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = sub_232F80004((uint64_t)v34 + v36[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v33)
  {
LABEL_12:
    if (!v65) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = sub_232F80004((uint64_t)v34 + v36[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v65)
  {
LABEL_13:
    if (!v66) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v66)
  {
LABEL_14:
    if (!v67) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v67)
  {
LABEL_15:
    if (!v68) {
      goto LABEL_16;
    }
LABEL_29:
    uint64_t result = sub_232F80004((uint64_t)v34 + v36[17], &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
    if (!v69) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_28:
  uint64_t result = sub_232E96840(*(uint64_t *)((char *)v34 + v36[16]), *(uint64_t *)((char *)v34 + v36[16] + 8));
  if (v68) {
    goto LABEL_29;
  }
LABEL_16:
  if (!v69) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.Patient.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v67 = a2;
  sub_232F80428(0, &qword_268757900, (uint64_t (*)(void))sub_232F7CD68, (uint64_t)&type metadata for ModelsDSTU2.Patient.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v72 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v53 - v6;
  id v84 = &type metadata for ModelsDSTU2.Patient;
  sub_232F7CDBC();
  sub_23309B770();
  uint64_t v8 = a1[3];
  long long v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  sub_232F7CD68();
  uint64_t v73 = v7;
  sub_23309C460();
  if (v2)
  {
    uint64_t v108 = v2;
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    LODWORD(v72) = 0;
    LODWORD(v73) = 0;
  }
  else
  {
    LOBYTE(v84) = 0;
    uint64_t v15 = sub_23309C0A0();
    uint64_t v17 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v84) = 1;
    uint64_t v18 = sub_23309C040();
    uint64_t v20 = v19;
    uint64_t v62 = v18;
    LOBYTE(v75) = 2;
    sub_232EA4058();
    swift_bridgeObjectRetain();
    sub_23309C080();
    *((void *)&v60 + 1) = v17;
    uint64_t v61 = v20;
    *(void *)&long long v60 = v15;
    uint64_t v21 = v84;
    LODWORD(v20) = v85;
    LODWORD(v15) = BYTE4(v85);
    char v107 = BYTE4(v85);
    LOBYTE(v84) = 3;
    uint64_t v22 = sub_23309C040();
    uint64_t v24 = v23;
    int v56 = v15;
    uint64_t v57 = v22;
    int v58 = v20;
    uint64_t v59 = v21;
    sub_232F7CA40(0, &qword_268757628, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8D488]);
    LOBYTE(v75) = 4;
    sub_232F7CE18();
    swift_bridgeObjectRetain();
    sub_23309C0E0();
    uint64_t v66 = v24;
    uint64_t v25 = v84;
    sub_232EBDA84(0, &qword_2687568F0);
    LOBYTE(v75) = 5;
    sub_232EA4568();
    swift_bridgeObjectRetain();
    sub_23309C080();
    uint64_t v65 = v25;
    int v26 = v84;
    sub_232F7CA40(0, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
    LOBYTE(v75) = 6;
    sub_232EA463C();
    swift_bridgeObjectRetain();
    sub_23309C080();
    uint64_t v71 = v26;
    int v27 = v84;
    sub_232EBDA84(0, &qword_268756920);
    LOBYTE(v75) = 7;
    sub_232EA470C();
    swift_bridgeObjectRetain();
    sub_23309C080();
    long long v70 = v27;
    int v28 = v84;
    LOBYTE(v75) = 8;
    sub_232EA391C();
    swift_bridgeObjectRetain();
    sub_23309C080();
    uint64_t v108 = 0;
    uint64_t v69 = (uint64_t)v28;
    uint64_t v30 = (uint64_t)v84;
    uint64_t v29 = v85;
    uint64_t v31 = v86;
    sub_232F7CA40(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    LOBYTE(v75) = 9;
    *(void *)&long long v64 = v30;
    *((void *)&v64 + 1) = v29;
    uint64_t v63 = v31;
    sub_232E967F8(v30, v29);
    sub_232EA3B54();
    uint64_t v32 = v108;
    sub_23309C080();
    uint64_t v108 = v32;
    if (v32)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v73, v72);
      sub_232E96840(v64, *((uint64_t *)&v64 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LODWORD(v73) = 0;
      int v9 = 1;
      int v10 = 1;
      int v11 = 1;
      int v12 = 1;
      int v13 = 1;
      LODWORD(v72) = 1;
    }
    else
    {
      char v104 = 10;
      uint64_t v68 = v84;
      swift_bridgeObjectRetain();
      uint64_t v33 = v108;
      uint64_t v34 = sub_23309C040();
      uint64_t v108 = v33;
      if (!v33)
      {
        uint64_t v36 = v34;
        uint64_t v37 = v35;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v73, v72);
        uint64_t v38 = *((void *)&v60 + 1);
        long long v75 = v60;
        *(void *)&long long v76 = v62;
        *((void *)&v76 + 1) = v61;
        *(void *)&long long v77 = v59;
        DWORD2(v77) = v58;
        BYTE12(v77) = v56;
        uint64_t v39 = v66;
        *(void *)&long long v78 = v57;
        *((void *)&v78 + 1) = v66;
        uint64_t v40 = *((void *)&v64 + 1);
        *(void *)&long long v79 = v65;
        *((void *)&v79 + 1) = v71;
        *(void *)&long long v80 = v70;
        *((void *)&v80 + 1) = v69;
        uint64_t v41 = v64;
        long long v81 = v64;
        *(void *)&long long v82 = v63;
        *((void *)&v82 + 1) = v68;
        uint64_t v54 = v37;
        uint64_t v55 = v36;
        *(void *)&long long v83 = v36;
        *((void *)&v83 + 1) = v37;
        sub_232F7CEE8((uint64_t)&v75);
        swift_bridgeObjectRelease();
        sub_232E96840(v41, v40);
        uint64_t v42 = v38;
        swift_bridgeObjectRelease();
        uint64_t v43 = v61;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = v65;
        swift_bridgeObjectRelease();
        uint64_t v45 = v71;
        swift_bridgeObjectRelease();
        uint64_t v46 = v70;
        swift_bridgeObjectRelease();
        uint64_t v47 = v69;
        swift_bridgeObjectRelease();
        long long v48 = v82;
        uint64_t v49 = v67;
        v67[6] = v81;
        v49[7] = v48;
        v49[8] = v83;
        long long v50 = v78;
        v49[2] = v77;
        v49[3] = v50;
        long long v51 = v80;
        v49[4] = v79;
        v49[5] = v51;
        long long v52 = v76;
        _OWORD *v49 = v75;
        v49[1] = v52;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        id v84 = (ValueMetadata *)v60;
        uint64_t v85 = v42;
        uint64_t v86 = v62;
        uint64_t v87 = v43;
        uint64_t v88 = v59;
        int v89 = v58;
        char v90 = v107;
        __int16 v91 = v105;
        char v92 = v106;
        uint64_t v93 = v57;
        uint64_t v94 = v39;
        uint64_t v95 = v44;
        long long v96 = v45;
        uint64_t v97 = v46;
        uint64_t v98 = v47;
        long long v99 = v64;
        uint64_t v100 = v63;
        id v101 = v68;
        uint64_t v102 = v55;
        uint64_t v103 = v54;
        return sub_232F7CFAC((uint64_t)&v84);
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v73, v72);
      swift_bridgeObjectRelease();
      sub_232E96840(v64, *((uint64_t *)&v64 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v9 = 1;
      int v10 = 1;
      int v11 = 1;
      int v12 = 1;
      int v13 = 1;
      LODWORD(v72) = 1;
      LODWORD(v73) = 1;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9) {
    swift_bridgeObjectRelease();
  }
  if (v10)
  {
    swift_bridgeObjectRelease();
    if (!v11) {
      goto LABEL_8;
    }
  }
  else if (!v11)
  {
LABEL_8:
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t result = v69;
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = v69;
  if (!v13)
  {
LABEL_10:
    if (v72) {
      goto LABEL_11;
    }
LABEL_17:
    if (!v73) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_16:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_17;
  }
LABEL_11:
  uint64_t result = sub_232E96840(v64, *((uint64_t *)&v64 + 1));
  if (!v73) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsDSTU2.ResourceProxy.encode(to:)()
{
  ModelsDSTU2.ResourceProxy.get()(v1);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23309B670();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t ModelsDSTU2.ResourceProxy.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Observation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ModelsDSTU2.Immunization(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModelsDSTU2.Condition(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F803C0(v1, (uint64_t)v17, type metadata accessor for ModelsDSTU2.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_232FD80BC((uint64_t)v17, (uint64_t)v14, type metadata accessor for ModelsDSTU2.Condition);
      sub_23309C3E0();
      ModelsDSTU2.Condition.hash(into:)(a1);
      return sub_232F7CB8C((uint64_t)v14, type metadata accessor for ModelsDSTU2.Condition);
    case 2u:
      sub_232FD80BC((uint64_t)v17, (uint64_t)v11, type metadata accessor for ModelsDSTU2.DiagnosticReport);
      sub_23309C3E0();
      ModelsDSTU2.DiagnosticReport.hash(into:)(a1);
      return sub_232F7CB8C((uint64_t)v11, type metadata accessor for ModelsDSTU2.DiagnosticReport);
    case 3u:
      sub_232FD80BC((uint64_t)v17, (uint64_t)v8, type metadata accessor for ModelsDSTU2.Immunization);
      sub_23309C3E0();
      ModelsDSTU2.Immunization.hash(into:)(a1);
      return sub_232F7CB8C((uint64_t)v8, type metadata accessor for ModelsDSTU2.Immunization);
    case 4u:
      sub_232FD80BC((uint64_t)v17, (uint64_t)v5, type metadata accessor for ModelsDSTU2.Observation);
      sub_23309C3E0();
      ModelsDSTU2.Observation.hash(into:)(a1);
      return sub_232F7CB8C((uint64_t)v5, type metadata accessor for ModelsDSTU2.Observation);
    case 5u:
      long long v21 = *((_OWORD *)v17 + 7);
      long long v33 = *((_OWORD *)v17 + 6);
      long long v34 = v21;
      long long v35 = *((_OWORD *)v17 + 8);
      long long v22 = *((_OWORD *)v17 + 3);
      long long v29 = *((_OWORD *)v17 + 2);
      long long v30 = v22;
      long long v23 = *((_OWORD *)v17 + 5);
      long long v31 = *((_OWORD *)v17 + 4);
      long long v32 = v23;
      long long v24 = *((_OWORD *)v17 + 1);
      long long v27 = *(_OWORD *)v17;
      long long v28 = v24;
      sub_23309C3E0();
      v26[6] = v33;
      v26[7] = v34;
      v26[8] = v35;
      _OWORD v26[2] = v29;
      v26[3] = v30;
      void v26[4] = v31;
      v26[5] = v32;
      v26[0] = v27;
      v26[1] = v28;
      ModelsDSTU2.Patient.hash(into:)(a1);
      return sub_232F7CFAC((uint64_t)&v27);
    case 6u:
      uint64_t v25 = *((void *)v17 + 3);
      uint64_t v19 = *((void *)v17 + 5);
      sub_23309C3E0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (!v25) {
        goto LABEL_13;
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      goto LABEL_11;
    default:
      uint64_t v18 = *((void *)v17 + 2);
      uint64_t v19 = *((void *)v17 + 4);
      sub_23309C3E0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v18)
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E9A5B0(a1, v18);
LABEL_11:
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_12;
        }
      }
      else
      {
LABEL_13:
        sub_23309C3F0();
        if (v19)
        {
LABEL_12:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
  }
}

uint64_t ModelsDSTU2.ResourceProxy.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t sub_232F6F9CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.ResourceProxy.init(from:)(a1, a2);
}

uint64_t sub_232F6F9E4()
{
  ModelsDSTU2.ResourceProxy.get()(v1);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23309B670();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t sub_232F6FA60(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t sub_232F6FA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.ResourceProxy.hash(into:));
}

uint64_t ModelsDSTU2.Bundle.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Bundle.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Bundle.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t sub_232F6FB20@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_232F6FB80@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_232F6FBE4(uint64_t a1)
{
  unint64_t v2 = sub_232F7FFB0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F6FC20(uint64_t a1)
{
  unint64_t v2 = sub_232F7FFB0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  long long v33 = (char *)&v31 - v4;
  sub_232F80428(0, &qword_268757928, (uint64_t (*)(void))sub_232F7FFB0, (uint64_t)&type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v34 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  MEMORY[0x270FA5388](v9);
  int v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7FFB0();
  uint64_t v12 = v35;
  sub_23309C460();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = (uint64_t)v33;
  LOBYTE(v36) = 0;
  uint64_t v15 = (uint64_t)v11;
  *int v11 = sub_23309C040();
  v11[1] = v16;
  type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  LOBYTE(v36) = 1;
  sub_232F7C748(&qword_268757938, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  sub_23309C080();
  sub_232F80074(v13, (uint64_t)v11 + *(int *)(v9 + 20), &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  char v39 = 1;
  sub_232EBCE0C();
  uint64_t v35 = 0;
  sub_23309C080();
  uint64_t v17 = v6;
  uint64_t v18 = (uint64_t)a1;
  long long v31 = v8;
  long long v33 = v17;
  uint64_t v19 = v36;
  uint64_t v20 = v37;
  int v21 = v38;
  if (qword_268756398 != -1) {
    swift_once();
  }
  if (v21 == 255) {
    long long v22 = 0;
  }
  else {
    long long v22 = v19;
  }
  if (v21 == 255) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v20;
  }
  if (v21 == 255) {
    char v24 = 5;
  }
  else {
    char v24 = v21;
  }
  uint64_t v36 = v22;
  uint64_t v37 = v23;
  unsigned __int8 v38 = v24;
  sub_232EBCE60(v19, v20, v21);
  sub_232EBCEC8();
  uint64_t v25 = sub_23309AB80();
  uint64_t v26 = v32;
  uint64_t v27 = v25;
  uint64_t v35 = v28;
  sub_232EBCF1C(v19, v20, v21);
  sub_232EBCF1C(v19, v20, v21);
  (*(void (**)(char *, char *))(v34 + 8))(v31, v33);
  long long v29 = (uint64_t *)(v15 + *(int *)(v9 + 24));
  uint64_t v30 = v35;
  *long long v29 = v27;
  v29[1] = v30;
  sub_232F803C0(v15, v26, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  __swift_destroy_boxed_opaque_existential_1(v18);
  return sub_232F7CB8C(v15, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.fullURL.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.resource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 20), a1, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.rawResourceData.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0) + 24);
  uint64_t v2 = *(void *)v1;
  sub_232E9A9F4(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v15 - v8;
  if (*(void *)(v1 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v10 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_232F802EC(v1 + *(int *)(v10 + 20), (uint64_t)v9, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v9, (uint64_t)v6, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_23309C3F0();
    ModelsDSTU2.ResourceProxy.hash(into:)(a1);
    sub_232F7CB8C((uint64_t)v6, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  int v11 = (uint64_t *)(v1 + *(int *)(v10 + 24));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_232E9A9F4(*v11, v13);
  sub_23309B040();
  return sub_232E9AA4C(v12, v13);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.encode(to:)(void *a1)
{
  sub_232F80428(0, &qword_268757940, (uint64_t (*)(void))sub_232F7FFB0, (uint64_t)&type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7FFB0();
  sub_23309C480();
  char v11 = 0;
  sub_23309C110();
  if (!v1)
  {
    type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
    char v10 = 1;
    type metadata accessor for ModelsDSTU2.ResourceProxy(0);
    sub_232F7C748(&qword_268757948, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.Bundle.BundleEntry.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v11[-v6 - 8];
  sub_23309C3D0();
  if (*(void *)(v0 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v8 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  sub_232F802EC(v0 + *(int *)(v8 + 20), (uint64_t)v7, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v7, (uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_23309C3F0();
    ModelsDSTU2.ResourceProxy.hash(into:)((uint64_t)v11);
    sub_232F7CB8C((uint64_t)v4, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  sub_23309B040();
  return sub_23309C420();
}

uint64_t sub_232F708F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Bundle.BundleEntry.init(from:)(a1, a2);
}

uint64_t sub_232F70910(void *a1)
{
  return ModelsDSTU2.Bundle.BundleEntry.encode(to:)(a1);
}

uint64_t sub_232F7092C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = (char *)&v13 - v10;
  if (*(void *)(v2 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  sub_232F802EC(v2 + *(int *)(a2 + 20), (uint64_t)v11, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v11, (uint64_t)v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_23309C3F0();
    ModelsDSTU2.ResourceProxy.hash(into:)(a1);
    sub_232F7CB8C((uint64_t)v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  return sub_23309B040();
}

uint64_t sub_232F70B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v13[-v9 - 8];
  sub_23309C3D0();
  if (*(void *)(v2 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  sub_232F802EC(v2 + *(int *)(a2 + 20), (uint64_t)v10, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v10, (uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_23309C3F0();
    ModelsDSTU2.ResourceProxy.hash(into:)((uint64_t)v13);
    sub_232F7CB8C((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
  }
  sub_23309B040();
  return sub_23309C420();
}

uint64_t ModelsDSTU2.Bundle.entry.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Bundle.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232F70E00(uint64_t a1)
{
  unint64_t v2 = sub_232F7C8C0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F70E3C(uint64_t a1)
{
  unint64_t v2 = sub_232F7C8C0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Bundle.encode(to:)(void *a1)
{
  sub_232F80428(0, &qword_268757950, (uint64_t (*)(void))sub_232F7C8C0, (uint64_t)&type metadata for ModelsDSTU2.Bundle.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = v1[2];
  v11[2] = v1[3];
  uint64_t v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7C8C0();
  sub_23309C480();
  char v17 = 0;
  uint64_t v9 = v13;
  sub_23309C170();
  if (!v9)
  {
    uint64_t v14 = v12;
    char v16 = 1;
    sub_232F7CA40(0, &qword_268757870, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232F800F4();
    sub_23309C150();
    char v15 = 2;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.Bundle.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232F71194@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsDSTU2.Bundle.init(from:)(a1, a2);
}

uint64_t sub_232F711AC(void *a1)
{
  return ModelsDSTU2.Bundle.encode(to:)(a1);
}

uint64_t sub_232F711CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A5B0((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t (*ModelsDSTU2.Condition.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Condition.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = v2;
  return sub_232EBD054(v2);
}

uint64_t ModelsDSTU2.Condition.asserter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 24), a1, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsDSTU2.Condition.dateRecorded.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 28), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Condition.code.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 32));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Condition.category.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ModelsDSTU2.Condition.clinicalStatus.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.verificationStatus.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.severity.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ModelsDSTU2.Condition.bodySite.getter()
{
  type metadata accessor for ModelsDSTU2.Condition(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Condition.onsetDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 56), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Condition.onsetPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F73934(type metadata accessor for ModelsDSTU2.Condition, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsDSTU2.Condition.onsetString.getter()
{
  return sub_232F739A4(type metadata accessor for ModelsDSTU2.Condition);
}

uint64_t ModelsDSTU2.Condition.abatementDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F73A20(type metadata accessor for ModelsDSTU2.Condition, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t ModelsDSTU2.Condition.abatementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Condition(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 72), a1, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.Condition.abatementString.getter()
{
  return sub_232F7568C(type metadata accessor for ModelsDSTU2.Condition);
}

uint64_t ModelsDSTU2.Condition.notes.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 80));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Condition(0) + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Condition.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v44 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = type metadata accessor for Reference();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v7);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v43 - v18;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v2 + 16);
  if (v20 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v20);
      uint64_t v21 = v20;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v21 = 0;
    }
    sub_232EA390C(v21);
  }
  long long v22 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
  sub_232F802EC(v2 + v22[6], (uint64_t)v19, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13) == 1)
  {
    sub_23309C3F0();
    goto LABEL_15;
  }
  sub_232FD80BC((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*((void *)v16 + 1))
  {
    sub_23309C3F0();
    if (*((void *)v16 + 3)) {
      goto LABEL_11;
    }
LABEL_13:
    sub_23309C3F0();
    goto LABEL_14;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*((void *)v16 + 3)) {
    goto LABEL_13;
  }
LABEL_11:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_14:
  sub_232EB2488(a1);
  sub_232F7CB8C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_15:
  sub_232EB2E40();
  uint64_t v23 = v2 + v22[8];
  uint64_t v24 = *(void *)(v23 + 16);
  if (*(void *)(v23 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v24)
    {
LABEL_17:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v24);
      swift_bridgeObjectRelease_n();
      goto LABEL_20;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_17;
    }
  }
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t *)(v2 + v22[9]);
  uint64_t v26 = v25[1];
  if (v26 == 1)
  {
    sub_23309C3F0();
    goto LABEL_28;
  }
  uint64_t v27 = *v25;
  uint64_t v28 = v25[2];
  sub_23309C3F0();
  if (!v26)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_24;
    }
LABEL_26:
    sub_23309C3F0();
    uint64_t v29 = v27;
    uint64_t v30 = v26;
    goto LABEL_27;
  }
  sub_23309C3F0();
  sub_232E967F8(v27, v26);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_26;
  }
LABEL_24:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v27;
  uint64_t v30 = v26;
LABEL_27:
  sub_232E96840(v29, v30);
LABEL_28:
  if (*(void *)(v2 + v22[10] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  long long v31 = (uint64_t *)(v2 + v22[12]);
  uint64_t v32 = v31[1];
  if (v32 == 1)
  {
    sub_23309C3F0();
    uint64_t v33 = v46;
    goto LABEL_39;
  }
  uint64_t v34 = *v31;
  uint64_t v35 = v31[2];
  sub_23309C3F0();
  uint64_t v33 = v46;
  if (!v32)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v35) {
      goto LABEL_35;
    }
LABEL_37:
    sub_23309C3F0();
    uint64_t v36 = v34;
    uint64_t v37 = v32;
    goto LABEL_38;
  }
  sub_23309C3F0();
  sub_232E967F8(v34, v32);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v35) {
    goto LABEL_37;
  }
LABEL_35:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v35);
  swift_bridgeObjectRelease();
  uint64_t v36 = v34;
  uint64_t v37 = v32;
LABEL_38:
  sub_232E96840(v36, v37);
LABEL_39:
  uint64_t v38 = *(void *)(v2 + v22[13]);
  sub_23309C3F0();
  if (v38)
  {
    swift_bridgeObjectRetain();
    sub_232E978F0(a1, v38);
    swift_bridgeObjectRelease();
  }
  uint64_t v39 = v45;
  sub_232EB2E40();
  sub_232F802EC(v2 + v22[15], (uint64_t)v12, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  if (v40(v12, 1, v33) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232F7CB8C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
  }
  if (*(void *)(v2 + v22[16] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    uint64_t v33 = v46;
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v41 = (uint64_t)v44;
  sub_232EB2E40();
  sub_232F802EC(v2 + v22[18], v41, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v40((char *)v41, 1, v33) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC(v41, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232F7CB8C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
  }
  if (*(void *)(v2 + v22[19] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*(void *)(v2 + v22[20] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (!*(void *)(v2 + v22[21] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232F72164(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 1635018093;
      break;
    case 2:
      unint64_t result = 0x7265747265737361;
      break;
    case 3:
      unint64_t result = 0x6F63655265746164;
      break;
    case 4:
      unint64_t result = 1701080931;
      break;
    case 5:
      unint64_t result = 0x79726F6765746163;
      break;
    case 6:
      unint64_t result = 0x6C6163696E696C63;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x7974697265766573;
      break;
    case 9:
      unint64_t result = 0x6574695379646F62;
      break;
    case 10:
      unint64_t result = 0x7461447465736E6FLL;
      break;
    case 11:
      unint64_t result = 0x7265507465736E6FLL;
      break;
    case 12:
      unint64_t result = 0x7274537465736E6FLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
    case 15:
      unint64_t result = 0x6E656D6574616261;
      break;
    case 16:
      unint64_t result = 0x7365746F6ELL;
      break;
    case 17:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232F723B8()
{
  return sub_232F72164(*v0);
}

uint64_t sub_232F723C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD6220(a1, a2);
  *a3 = result;
  return result;
}

void sub_232F723E8(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_232F723F4(uint64_t a1)
{
  unint64_t v2 = sub_232F7CAA4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F72430(uint64_t a1)
{
  unint64_t v2 = sub_232F7CAA4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Condition.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232F80428(0, &qword_268757968, (uint64_t (*)(void))sub_232F7CAA4, (uint64_t)&type metadata for ModelsDSTU2.Condition.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v20 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CAA4();
  sub_23309C480();
  LOBYTE(v21) = 0;
  sub_23309C170();
  if (!v2)
  {
    *(void *)&long long v21 = *(void *)(v3 + 16);
    char v23 = 1;
    sub_232E95F64();
    sub_23309C150();
    uint64_t v10 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
    LOBYTE(v21) = 2;
    type metadata accessor for Reference();
    sub_232F7C748(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_23309C150();
    LOBYTE(v21) = 3;
    uint64_t v11 = type metadata accessor for FHIRDateTime();
    sub_232F7C748(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    v20[1] = v11;
    uint64_t v12 = (long long *)(v3 + v10[8]);
    uint64_t v13 = *((void *)v12 + 2);
    long long v21 = *v12;
    uint64_t v22 = v13;
    char v23 = 4;
    sub_232EBD064();
    sub_23309C1B0();
    uint64_t v14 = (long long *)(v3 + v10[9]);
    uint64_t v15 = *((void *)v14 + 2);
    long long v21 = *v14;
    uint64_t v22 = v15;
    char v23 = 5;
    sub_23309C150();
    LOBYTE(v21) = 6;
    sub_23309C110();
    LOBYTE(v21) = 7;
    sub_23309C170();
    char v16 = (long long *)(v3 + v10[12]);
    uint64_t v17 = *((void *)v16 + 2);
    long long v21 = *v16;
    uint64_t v22 = v17;
    char v23 = 8;
    sub_23309C150();
    *(void *)&long long v21 = *(void *)(v3 + v10[13]);
    char v23 = 9;
    sub_232EBDA84(0, &qword_268756758);
    sub_232EBD0B8();
    sub_23309C150();
    LOBYTE(v21) = 10;
    sub_23309C150();
    LOBYTE(v21) = 11;
    uint64_t v18 = type metadata accessor for Period();
    sub_232F7C748(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    v20[0] = v18;
    sub_23309C150();
    LOBYTE(v21) = 12;
    sub_23309C110();
    LOBYTE(v21) = 13;
    sub_23309C150();
    LOBYTE(v21) = 14;
    sub_23309C150();
    LOBYTE(v21) = 15;
    sub_23309C110();
    LOBYTE(v21) = 16;
    sub_23309C110();
    LOBYTE(v21) = 17;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Condition.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t sub_232F72ABC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 84));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_232F72AF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Condition.init(from:)(a1, a2);
}

uint64_t sub_232F72B0C(void *a1)
{
  return ModelsDSTU2.Condition.encode(to:)(a1);
}

uint64_t sub_232F72B24(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t sub_232F72B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.Condition.hash(into:));
}

uint64_t (*ModelsDSTU2.DiagnosticReport.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsDSTU2.DiagnosticReport.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.DiagnosticReport.status.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.code.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  *a1 = v1[6];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.DiagnosticReport.conclusion.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 36), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.DiagnosticReport.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F76980(type metadata accessor for ModelsDSTU2.DiagnosticReport, a1);
}

uint64_t ModelsDSTU2.DiagnosticReport.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F75444(type metadata accessor for ModelsDSTU2.DiagnosticReport, a1);
}

uint64_t ModelsDSTU2.DiagnosticReport.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.DiagnosticReport(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.DiagnosticReport.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Period();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - v8;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v1[3])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v10 = v1[8];
  if (v1[7])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_6:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v10);
      swift_bridgeObjectRelease_n();
      goto LABEL_9;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_6;
    }
  }
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRelease();
  if (v1[10])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v11 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  sub_232EB2E40();
  sub_232F802EC((uint64_t)v1 + *(int *)(v11 + 40), (uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232F7CB8C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
  }
  sub_232EB2E40();
  if (!*(void *)((char *)v1 + *(int *)(v11 + 48) + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232F73100(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 0x737574617473;
      break;
    case 3:
      unint64_t result = 1701080931;
      break;
    case 4:
      unint64_t result = 0x6973756C636E6F63;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x7669746365666665;
      break;
    case 7:
      unint64_t result = 0x646575737369;
      break;
    case 8:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232F73220()
{
  return sub_232F73100(*v0);
}

uint64_t sub_232F73228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD6A00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F73250(uint64_t a1)
{
  unint64_t v2 = sub_232F7CAF8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F7328C(uint64_t a1)
{
  unint64_t v2 = sub_232F7CAF8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.DiagnosticReport.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232F80428(0, &qword_268757970, (uint64_t (*)(void))sub_232F7CAF8, (uint64_t)&type metadata for ModelsDSTU2.DiagnosticReport.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CAF8();
  sub_23309C480();
  LOBYTE(v14) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_23309C110();
    LOBYTE(v14) = 2;
    sub_23309C170();
    uint64_t v10 = *(void *)(v3 + 64);
    long long v14 = *(_OWORD *)(v3 + 48);
    uint64_t v15 = v10;
    char v16 = 3;
    sub_232EBD064();
    sub_23309C1B0();
    LOBYTE(v14) = 4;
    sub_23309C110();
    uint64_t v11 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
    LOBYTE(v14) = 5;
    type metadata accessor for FHIRDateTime();
    sub_232F7C748(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    v13[1] = v3 + *(int *)(v11 + 40);
    LOBYTE(v14) = 6;
    type metadata accessor for Period();
    sub_232F7C748(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
    LOBYTE(v14) = 7;
    sub_23309C150();
    LOBYTE(v14) = 8;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.DiagnosticReport.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_232F73678@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.DiagnosticReport.init(from:)(a1, a2);
}

uint64_t sub_232F73690(void *a1)
{
  return ModelsDSTU2.DiagnosticReport.encode(to:)(a1);
}

uint64_t sub_232F736A8(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_232F736C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.DiagnosticReport.hash(into:));
}

uint64_t sub_232F736DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*ModelsDSTU2.Immunization.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsDSTU2.Immunization.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Immunization.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Immunization(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 32), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Immunization.expirationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for ModelsDSTU2.Immunization(0);
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  uint64_t v5 = *v4;
  int v6 = *((_DWORD *)v4 + 2);
  LOBYTE(v4) = *((unsigned char *)v4 + 12);
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = (_BYTE)v4;
  return result;
}

uint64_t ModelsDSTU2.Immunization.note.getter()
{
  type metadata accessor for ModelsDSTU2.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.reported.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 44));
}

uint64_t ModelsDSTU2.Immunization.vaccinationProtocol.getter()
{
  type metadata accessor for ModelsDSTU2.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.vaccineCode.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 52));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Immunization.wasNotGiven.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 56));
}

uint64_t ModelsDSTU2.Immunization.manufacture.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F73934(type metadata accessor for ModelsDSTU2.Immunization, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_232F73934@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F802EC(v4 + *(int *)(v8 + 60), a4, a2, a3);
}

uint64_t ModelsDSTU2.Immunization.lotNumber.getter()
{
  return sub_232F739A4(type metadata accessor for ModelsDSTU2.Immunization);
}

uint64_t sub_232F739A4(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.Immunization.performer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F73A20(type metadata accessor for ModelsDSTU2.Immunization, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_232F73A20@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F802EC(v4 + *(int *)(v8 + 68), a4, a2, a3);
}

uint64_t ModelsDSTU2.Immunization.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Immunization(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Immunization.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v31 = type metadata accessor for Reference();
  uint64_t v4 = *(void *)(v31 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v31);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v28 - v13;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 24))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v15 = *(void *)(v1 + 32);
  if (v15 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v15)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v15);
      uint64_t v16 = v15;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v16 = 0;
    }
    sub_232EA390C(v16);
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v17 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
  sub_232EB2E40();
  uint64_t v18 = v1 + v17[9];
  if ((*(unsigned char *)(v18 + 12) & 1) == 0)
  {
    int v19 = *(_DWORD *)(v18 + 8);
    sub_23309C3F0();
    sub_23309C3E0();
    if ((v19 & 0x100) == 0) {
      sub_23309C3F0();
    }
    sub_23309C3F0();
    if ((v19 & 0x1000000) == 0) {
      sub_23309C3F0();
    }
  }
  sub_23309C3F0();
  uint64_t v20 = *(void *)(v1 + v17[10]);
  sub_23309C3F0();
  if (v20)
  {
    swift_bridgeObjectRetain();
    sub_232E97280(a1, v20);
    swift_bridgeObjectRelease();
  }
  sub_23309C3F0();
  uint64_t v21 = *(void *)(v1 + v17[12]);
  uint64_t v29 = v7;
  sub_23309C3F0();
  if (v21) {
    sub_232E9A8F4(a1, v21);
  }
  uint64_t v22 = v1 + v17[13];
  uint64_t v23 = *(void *)(v22 + 16);
  if (*(void *)(v22 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v23)
    {
LABEL_21:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v23);
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_21;
    }
  }
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();
  sub_23309C3F0();
  sub_232F802EC(v1 + v17[15], (uint64_t)v14, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v24(v14, 1, v31) == 1)
  {
    sub_23309C3F0();
    goto LABEL_32;
  }
  sub_232FD80BC((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*((void *)v9 + 1))
  {
    sub_23309C3F0();
    if (*((void *)v9 + 3)) {
      goto LABEL_28;
    }
LABEL_30:
    sub_23309C3F0();
    goto LABEL_31;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*((void *)v9 + 3)) {
    goto LABEL_30;
  }
LABEL_28:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_31:
  sub_232EB2488(a1);
  sub_232F7CB8C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_32:
  if (*(void *)(v1 + v17[16] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v25 = v30;
  sub_232F802EC(v2 + v17[17], v30, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v24((char *)v25, 1, v31) == 1)
  {
    sub_23309C3F0();
    goto LABEL_43;
  }
  uint64_t v26 = (uint64_t)v29;
  sub_232FD80BC(v25, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*(void *)(v26 + 8))
  {
    sub_23309C3F0();
    if (*(void *)(v26 + 24)) {
      goto LABEL_39;
    }
LABEL_41:
    sub_23309C3F0();
    goto LABEL_42;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*(void *)(v26 + 24)) {
    goto LABEL_41;
  }
LABEL_39:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_42:
  sub_232EB2488(a1);
  sub_232F7CB8C(v26, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_43:
  if (!*(void *)(v2 + v17[18] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232F74260(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 1635018093;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 1702125924;
      break;
    case 5:
      unint64_t result = 0x6974617269707865;
      break;
    case 6:
      unint64_t result = 1702129518;
      break;
    case 7:
      unint64_t result = 0x646574726F706572;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0x43656E6963636176;
      break;
    case 10:
      unint64_t result = 0x6947746F4E736177;
      break;
    case 11:
      unint64_t result = 0x74636166756E616DLL;
      break;
    case 12:
      unint64_t result = 0x65626D754E746F6CLL;
      break;
    case 13:
      unint64_t result = 0x656D726F66726570;
      break;
    case 14:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232F7443C()
{
  return sub_232F74260(*v0);
}

uint64_t sub_232F74444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD6DB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_232F7446C(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_232F74478(uint64_t a1)
{
  unint64_t v2 = sub_232F7CBEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F744B4(uint64_t a1)
{
  unint64_t v2 = sub_232F7CBEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Immunization.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232F80428(0, &qword_268757978, (uint64_t (*)(void))sub_232F7CBEC, (uint64_t)&type metadata for ModelsDSTU2.Immunization.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CBEC();
  sub_23309C480();
  LOBYTE(v17) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v17) = 1;
    sub_23309C110();
    *(void *)&long long v17 = *(void *)(v3 + 32);
    char v19 = 2;
    sub_232E95F64();
    sub_23309C150();
    LOBYTE(v17) = 3;
    sub_23309C170();
    uint64_t v10 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
    LOBYTE(v17) = 4;
    type metadata accessor for FHIRDateTime();
    sub_232F7C748(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    uint64_t v11 = (uint64_t *)(v3 + v10[9]);
    uint64_t v12 = *v11;
    int v13 = *((_DWORD *)v11 + 2);
    LOBYTE(v11) = *((unsigned char *)v11 + 12);
    *(void *)&long long v17 = v12;
    DWORD2(v17) = v13;
    BYTE12(v17) = (_BYTE)v11;
    char v19 = 5;
    sub_232EBD66C();
    sub_23309C150();
    *(void *)&long long v17 = *(void *)(v3 + v10[10]);
    char v19 = 6;
    sub_232F7CA40(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232EBD138();
    sub_23309C150();
    LOBYTE(v17) = 7;
    sub_23309C180();
    *(void *)&long long v17 = *(void *)(v3 + v10[12]);
    char v19 = 8;
    sub_232EBDA84(0, &qword_2687578D0);
    sub_232F801C4();
    sub_23309C150();
    long long v14 = (long long *)(v3 + v10[13]);
    uint64_t v15 = *((void *)v14 + 2);
    long long v17 = *v14;
    uint64_t v18 = v15;
    char v19 = 9;
    sub_232EBD064();
    sub_23309C1B0();
    LOBYTE(v17) = 10;
    sub_23309C180();
    LOBYTE(v17) = 11;
    type metadata accessor for Reference();
    sub_232F7C748(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_23309C150();
    LOBYTE(v17) = 12;
    sub_23309C110();
    LOBYTE(v17) = 13;
    sub_23309C150();
    LOBYTE(v17) = 14;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Immunization.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_232F74A74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Immunization.init(from:)(a1, a2);
}

uint64_t sub_232F74A8C(void *a1)
{
  return ModelsDSTU2.Immunization.encode(to:)(a1);
}

uint64_t sub_232F74AA4(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_232F74AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.Immunization.hash(into:));
}

uint64_t sub_232F74AD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 72));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.doseSequence.getter()
{
  return *(void *)v0;
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.seriesDoses.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23309C3E0();
  if (v1 == 1) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  return sub_23309C3E0();
}

uint64_t static ModelsDSTU2.ImmunizationVaccinationProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_232F74BC8()
{
  if (*v0) {
    return 0x6F44736569726573;
  }
  else {
    return 0x7571655365736F64;
  }
}

uint64_t sub_232F74C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD73DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232F74C3C(uint64_t a1)
{
  unint64_t v2 = sub_232F80298();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F74C78(uint64_t a1)
{
  unint64_t v2 = sub_232F80298();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.encode(to:)(void *a1)
{
  sub_232F80428(0, &qword_268757990, (uint64_t (*)(void))sub_232F80298, (uint64_t)&type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v10 - v6;
  v10[0] = *(void *)(v1 + 8);
  int v11 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F80298();
  sub_23309C480();
  char v13 = 0;
  uint64_t v8 = v10[1];
  sub_23309C1A0();
  if (!v8)
  {
    char v12 = 1;
    sub_23309C140();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23309C3D0();
  sub_23309C3E0();
  sub_23309C3F0();
  if (v1 != 1) {
    sub_23309C3E0();
  }
  return sub_23309C420();
}

uint64_t ModelsDSTU2.ImmunizationVaccinationProtocol.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  sub_232F80428(0, &qword_2687579A0, (uint64_t (*)(void))sub_232F80298, (uint64_t)&type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F80298();
  sub_23309C460();
  if (!v2)
  {
    uint64_t v9 = v16;
    char v18 = 0;
    uint64_t v10 = sub_23309C0D0();
    char v17 = 1;
    uint64_t v12 = sub_23309C070();
    char v14 = v13;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)uint64_t v9 = v10;
    *(void *)(v9 + 8) = v12;
    *(unsigned char *)(v9 + 16) = v14 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_232F750C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.ImmunizationVaccinationProtocol.init(from:)(a1, a2);
}

uint64_t sub_232F750D8(void *a1)
{
  return ModelsDSTU2.ImmunizationVaccinationProtocol.encode(to:)(a1);
}

uint64_t sub_232F750F0()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23309C3D0();
  sub_23309C3E0();
  sub_23309C3F0();
  if (v1 != 1) {
    sub_23309C3E0();
  }
  return sub_23309C420();
}

uint64_t sub_232F75170()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23309C3E0();
  if (v1 == 1) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  return sub_23309C3E0();
}

uint64_t sub_232F751CC()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23309C3D0();
  sub_23309C3E0();
  sub_23309C3F0();
  if (v1 != 1) {
    sub_23309C3E0();
  }
  return sub_23309C420();
}

uint64_t sub_232F75248(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a2 + 16)) {
        return 1;
      }
    }
    else
    {
      if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t ModelsDSTU2.Observation.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Observation.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Observation.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*ModelsDSTU2.Observation.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Observation.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *a1 = v2;
  return sub_232EBD054(v2);
}

uint64_t ModelsDSTU2.Observation.status.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.category.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[7];
  uint64_t v3 = v1[8];
  uint64_t v4 = v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsDSTU2.Observation.code.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[12];
  *a1 = v1[10];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.comments.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F75444(type metadata accessor for ModelsDSTU2.Observation, a1);
}

uint64_t sub_232F75444@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return sub_232F802EC(v2 + *(int *)(v4 + 44), a2, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Observation.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Observation(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 48), a1, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.Observation.issued.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.Observation(0);
  return sub_232F802EC(v1 + *(int *)(v3 + 52), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsDSTU2.Observation.performer.getter()
{
  type metadata accessor for ModelsDSTU2.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.valueString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsDSTU2.Observation(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Observation.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsDSTU2.Observation(0) + 64));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ModelsDSTU2.Observation.valueQuantity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F73A20(type metadata accessor for ModelsDSTU2.Observation, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, a1);
}

uint64_t ModelsDSTU2.Observation.referenceRange.getter()
{
  type metadata accessor for ModelsDSTU2.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Observation.language.getter()
{
  return sub_232F7568C(type metadata accessor for ModelsDSTU2.Observation);
}

uint64_t sub_232F7568C(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 76));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.Observation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v36 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v37 = (uint64_t)&v36 - v8;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v6);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v36 - v14;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v2[3])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v16 = v2[4];
  if (v16 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v16)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v16);
      uint64_t v17 = v16;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v17 = 0;
    }
    sub_232EA390C(v17);
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v18 = v2[8];
  if (v18 == 1)
  {
    sub_23309C3F0();
    uint64_t v19 = v2[12];
    if (v2[11]) {
      goto LABEL_12;
    }
LABEL_20:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
  uint64_t v20 = v2[7];
  uint64_t v21 = v2[9];
  sub_23309C3F0();
  if (v18)
  {
    sub_23309C3F0();
    sub_232E967F8(v20, v18);
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_16:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v21);
      swift_bridgeObjectRelease();
      uint64_t v22 = v20;
      uint64_t v23 = v18;
      goto LABEL_19;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_16;
    }
  }
  sub_23309C3F0();
  uint64_t v22 = v20;
  uint64_t v23 = v18;
LABEL_19:
  sub_232E96840(v22, v23);
  uint64_t v19 = v2[12];
  if (!v2[11]) {
    goto LABEL_20;
  }
LABEL_12:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_13:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E95864(a1, v19);
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
LABEL_21:
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  if (v2[14])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v24 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
  sub_232EB2E40();
  sub_232F802EC((uint64_t)v2 + v24[12], (uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232FD80BC((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232F7CB8C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Period);
  }
  sub_232EB2E40();
  uint64_t v25 = *(void *)((char *)v2 + v24[14]);
  sub_23309C3F0();
  if (v25)
  {
    swift_bridgeObjectRetain();
    sub_232E985C0(a1, v25);
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v2 + v24[15] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v26 = (void *)((char *)v2 + v24[16]);
  uint64_t v27 = v26[1];
  if (v27 == 1)
  {
    sub_23309C3F0();
    goto LABEL_41;
  }
  uint64_t v28 = *v26;
  uint64_t v29 = v26[2];
  sub_23309C3F0();
  if (!v27)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v29) {
      goto LABEL_37;
    }
LABEL_39:
    sub_23309C3F0();
    uint64_t v30 = v28;
    uint64_t v31 = v27;
    goto LABEL_40;
  }
  sub_23309C3F0();
  sub_232E967F8(v28, v27);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_39;
  }
LABEL_37:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = v28;
  uint64_t v31 = v27;
LABEL_40:
  sub_232E96840(v30, v31);
LABEL_41:
  uint64_t v32 = v37;
  sub_232F802EC((uint64_t)v2 + v24[17], v37, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v32, 1, v39) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v33 = v36;
    sub_232FD80BC(v32, v36, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232F7CB8C(v33, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v34 = *(void *)((char *)v2 + v24[18]);
  sub_23309C3F0();
  if (v34)
  {
    swift_bridgeObjectRetain();
    sub_232E9980C(a1, v34);
    swift_bridgeObjectRelease();
  }
  if (!*(void *)((char *)v2 + v24[19] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232F75F7C(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 1635018093;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0x79726F6765746163;
      break;
    case 5:
      unint64_t result = 1701080931;
      break;
    case 6:
      unint64_t result = 0x73746E656D6D6F63;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x7669746365666665;
      break;
    case 9:
      unint64_t result = 0x646575737369;
      break;
    case 10:
      unint64_t result = 0x656D726F66726570;
      break;
    case 11:
      unint64_t result = 0x72745365756C6176;
      break;
    case 12:
      unint64_t result = 0xD000000000000014;
      break;
    case 13:
      unint64_t result = 0x61755165756C6176;
      break;
    case 14:
      unint64_t result = 0x636E657265666572;
      break;
    case 15:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232F76180()
{
  return sub_232F75F7C(*v0);
}

uint64_t sub_232F76188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD7500(a1, a2);
  *a3 = result;
  return result;
}

void sub_232F761B0(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_232F761BC(uint64_t a1)
{
  unint64_t v2 = sub_232F7CD14();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F761F8(uint64_t a1)
{
  unint64_t v2 = sub_232F7CD14();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Observation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232F80428(0, &qword_2687579A8, (uint64_t (*)(void))sub_232F7CD14, (uint64_t)&type metadata for ModelsDSTU2.Observation.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F7CD14();
  sub_23309C480();
  LOBYTE(v17) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v17) = 1;
    sub_23309C110();
    *(void *)&long long v17 = *(void *)(v3 + 32);
    char v19 = 2;
    sub_232E95F64();
    sub_23309C150();
    LOBYTE(v17) = 3;
    sub_23309C170();
    uint64_t v10 = *(void *)(v3 + 72);
    long long v17 = *(_OWORD *)(v3 + 56);
    uint64_t v18 = v10;
    char v19 = 4;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v11 = *(void *)(v3 + 96);
    long long v17 = *(_OWORD *)(v3 + 80);
    uint64_t v18 = v11;
    char v19 = 5;
    sub_23309C1B0();
    LOBYTE(v17) = 6;
    sub_23309C110();
    uint64_t v16 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
    LOBYTE(v17) = 7;
    type metadata accessor for FHIRDateTime();
    sub_232F7C748(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    uint64_t v15 = v3 + v16[12];
    LOBYTE(v17) = 8;
    type metadata accessor for Period();
    sub_232F7C748(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
    LOBYTE(v17) = 9;
    sub_23309C150();
    *(void *)&long long v17 = *(void *)(v3 + v16[14]);
    char v19 = 10;
    sub_232F7CA40(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232EBD2D8();
    sub_23309C150();
    LOBYTE(v17) = 11;
    sub_23309C110();
    uint64_t v12 = (long long *)(v3 + v16[16]);
    uint64_t v13 = *((void *)v12 + 2);
    long long v17 = *v12;
    uint64_t v18 = v13;
    char v19 = 12;
    sub_23309C150();
    LOBYTE(v17) = 13;
    type metadata accessor for Quantity();
    sub_232F7C748(&qword_268756AD8, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_23309C150();
    *(void *)&long long v17 = *(void *)(v3 + v16[18]);
    char v19 = 14;
    sub_232F7CA40(0, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
    sub_232EBD960();
    sub_23309C150();
    LOBYTE(v17) = 15;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.Observation.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_232F76878@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.Observation.init(from:)(a1, a2);
}

uint64_t sub_232F76890(void *a1)
{
  return ModelsDSTU2.Observation.encode(to:)(a1);
}

uint64_t sub_232F768A8(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_232F768C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.Observation.hash(into:));
}

uint64_t sub_232F768DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 76));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsDSTU2.HumanName.prefix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.family.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.given.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.suffix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.HumanName.text.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.HumanName.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F76980(type metadata accessor for ModelsDSTU2.HumanName, a1);
}

uint64_t sub_232F76980@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return sub_232F802EC(v2 + *(int *)(v4 + 40), a2, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsDSTU2.HumanName.hash(into:)()
{
  uint64_t v22 = type metadata accessor for Period();
  uint64_t v1 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v21 - v5;
  if (v0[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v7 = v0[2];
    if (v7) {
      goto LABEL_3;
    }
LABEL_25:
    sub_23309C3F0();
    uint64_t v10 = v0[3];
    if (v10) {
      goto LABEL_8;
    }
LABEL_26:
    sub_23309C3F0();
    uint64_t v13 = v0[4];
    if (v13) {
      goto LABEL_13;
    }
LABEL_27:
    sub_23309C3F0();
    uint64_t v16 = v0[5];
    if (v16) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  sub_23309C3F0();
  uint64_t v7 = v0[2];
  if (!v7) {
    goto LABEL_25;
  }
LABEL_3:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v0[3];
  if (!v10) {
    goto LABEL_26;
  }
LABEL_8:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v10 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v0[4];
  if (!v13) {
    goto LABEL_27;
  }
LABEL_13:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = v13 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v15 += 16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v0[5];
  if (v16)
  {
LABEL_18:
    sub_23309C3F0();
    sub_23309C3E0();
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = v16 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        v18 += 16;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
    }
    if (v0[7]) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
LABEL_28:
  sub_23309C3F0();
  if (v0[7])
  {
LABEL_23:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_29:
  sub_23309C3F0();
LABEL_30:
  uint64_t v19 = type metadata accessor for ModelsDSTU2.HumanName(0);
  sub_232F802EC((uint64_t)v0 + *(int *)(v19 + 40), (uint64_t)v6, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v22) == 1) {
    return sub_23309C3F0();
  }
  sub_232FD80BC((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Period);
  sub_23309C3F0();
  sub_232EB2E40();
  sub_232EB2E40();
  return sub_232F7CB8C((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Period);
}

uint64_t sub_232F76E68()
{
  uint64_t result = 6648693;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x786966657270;
      break;
    case 2:
      uint64_t result = 0x796C696D6166;
      break;
    case 3:
      uint64_t result = 0x6E65766967;
      break;
    case 4:
      uint64_t result = 0x786966667573;
      break;
    case 5:
      uint64_t result = 1954047348;
      break;
    case 6:
      uint64_t result = 0x646F69726570;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232F76F28(uint64_t a1)
{
  unint64_t v2 = sub_232F8036C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F76F64(uint64_t a1)
{
  unint64_t v2 = sub_232F8036C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.HumanName.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232F80428(0, &qword_2687579B0, (uint64_t (*)(void))sub_232F8036C, (uint64_t)&type metadata for ModelsDSTU2.HumanName.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232F8036C();
  sub_23309C480();
  LOBYTE(v13) = 0;
  sub_23309C110();
  if (!v2)
  {
    uint64_t v13 = v3[2];
    char v12 = 1;
    sub_232EBDA84(0, (unint64_t *)&qword_268756B00);
    sub_232EBDACC(&qword_268756B08);
    sub_23309C150();
    uint64_t v13 = v3[3];
    char v12 = 2;
    sub_23309C150();
    uint64_t v13 = v3[4];
    char v12 = 3;
    sub_23309C150();
    uint64_t v13 = v3[5];
    char v12 = 4;
    sub_23309C150();
    LOBYTE(v13) = 5;
    sub_23309C110();
    type metadata accessor for ModelsDSTU2.HumanName(0);
    LOBYTE(v13) = 6;
    type metadata accessor for Period();
    sub_232F7C748(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsDSTU2.HumanName.hashValue.getter()
{
  return sub_232F772F8((void (*)(unsigned char *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t sub_232F772F8(void (*a1)(unsigned char *))
{
  sub_23309C3D0();
  a1(v3);
  return sub_23309C420();
}

uint64_t ModelsDSTU2.HumanName.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v23 - v4;
  sub_232F80428(0, &qword_2687579C0, (uint64_t (*)(void))sub_232F8036C, (uint64_t)&type metadata for ModelsDSTU2.HumanName.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for ModelsDSTU2.HumanName(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[3];
  uint64_t v26 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_232F8036C();
  uint64_t v13 = v8;
  uint64_t v14 = v27;
  sub_23309C460();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  uint64_t v15 = v9;
  uint64_t v27 = v5;
  uint64_t v17 = v24;
  uint64_t v16 = v25;
  LOBYTE(v29) = 0;
  uint64_t v18 = v13;
  *uint64_t v11 = sub_23309C040();
  v11[1] = v19;
  sub_232EBDA84(0, (unint64_t *)&qword_268756B00);
  char v28 = 1;
  sub_232EBDACC(&qword_268756B18);
  sub_23309C080();
  v11[2] = v29;
  char v28 = 2;
  sub_23309C080();
  void v11[3] = v29;
  char v28 = 3;
  sub_23309C080();
  v11[4] = v29;
  char v28 = 4;
  sub_23309C080();
  v11[5] = v29;
  LOBYTE(v29) = 5;
  v11[6] = sub_23309C040();
  v11[7] = v20;
  type metadata accessor for Period();
  LOBYTE(v29) = 6;
  sub_232F7C748(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
  uint64_t v21 = (uint64_t)v27;
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v16);
  sub_232F80074(v21, (uint64_t)v11 + *(int *)(v15 + 40), &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F803C0((uint64_t)v11, v23, type metadata accessor for ModelsDSTU2.HumanName);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return sub_232F7CB8C((uint64_t)v11, type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_232F77920@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsDSTU2.HumanName.init(from:)(a1, a2);
}

uint64_t sub_232F77938(void *a1)
{
  return ModelsDSTU2.HumanName.encode(to:)(a1);
}

uint64_t sub_232F77950(uint64_t a1, uint64_t a2)
{
  return sub_232F77968(a1, a2, (void (*)(unsigned char *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t sub_232F77968(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  sub_23309C3D0();
  a3(v5);
  return sub_23309C420();
}

uint64_t sub_232F779B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F779CC(a1, a2, a3, (void (*)(unsigned char *))ModelsDSTU2.HumanName.hash(into:));
}

uint64_t sub_232F779CC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_23309C3D0();
  a4(v6);
  return sub_23309C420();
}

uint64_t ModelsDSTU2.Patient.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Patient.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsDSTU2.Patient.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsDSTU2.Patient.id.modify())()
{
  return nullsub_1;
}

void ModelsDSTU2.Patient.birthDate.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 40);
  char v3 = *(unsigned char *)(v1 + 44);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 12) = v3;
}

uint64_t ModelsDSTU2.Patient.gender.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.name.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.telecom.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.address.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.maritalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsDSTU2.Patient.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsDSTU2.Patient.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsDSTU2.Patient.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsDSTU2.HumanName(0);
  uint64_t v42 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v40 = *(void *)(v1 + 16);
  uint64_t v38 = *(void *)(v1 + 32);
  int v45 = *(_DWORD *)(v1 + 40);
  int v44 = *(unsigned __int8 *)(v1 + 44);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v41 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 72);
  uint64_t v50 = *(void *)(v1 + 64);
  uint64_t v46 = *(void *)(v1 + 80);
  uint64_t v47 = *(void *)(v1 + 88);
  uint64_t v39 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 112);
  uint64_t v10 = *(void *)(v1 + 120);
  uint64_t v48 = *(void *)(v1 + 104);
  uint64_t v49 = v10;
  uint64_t v11 = *(void *)(v1 + 136);
  uint64_t v43 = *(void *)(v1 + 128);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3F0();
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v11;
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  int v16 = v45;
  if (v44)
  {
    uint64_t v17 = v47;
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3E0();
    if ((v16 & 0x100) == 0) {
      sub_23309C3F0();
    }
    uint64_t v17 = v47;
    sub_23309C3F0();
    if ((v16 & 0x1000000) == 0) {
      sub_23309C3F0();
    }
  }
  sub_23309C3F0();
  sub_23309C3F0();
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v50;
  sub_23309C3E0();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    uint64_t v21 = *(void *)(v42 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_232F803C0(v20, (uint64_t)v5, type metadata accessor for ModelsDSTU2.HumanName);
      ModelsDSTU2.HumanName.hash(into:)();
      sub_232F7CB8C((uint64_t)v5, type metadata accessor for ModelsDSTU2.HumanName);
      v20 += v21;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  sub_23309C3F0();
  if (v14)
  {
    swift_bridgeObjectRetain();
    sub_232E984B8(a1, v14);
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v48;
  uint64_t v22 = v49;
  uint64_t v24 = v46;
  if (v46)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E9800C(a1, v24);
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_19;
    }
LABEL_29:
    sub_23309C3F0();
    if (v23 == 1) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  sub_23309C3F0();
  if (!v17) {
    goto LABEL_29;
  }
LABEL_19:
  sub_23309C3F0();
  uint64_t v25 = *(void *)(v17 + 16);
  sub_23309C3E0();
  if (v25)
  {
    swift_bridgeObjectRetain();
    long long v26 = *(_OWORD *)(v17 + 144);
    long long v57 = *(_OWORD *)(v17 + 128);
    long long v58 = v26;
    uint64_t v59 = *(void *)(v17 + 160);
    long long v27 = *(_OWORD *)(v17 + 80);
    long long v53 = *(_OWORD *)(v17 + 64);
    long long v54 = v27;
    long long v28 = *(_OWORD *)(v17 + 112);
    long long v55 = *(_OWORD *)(v17 + 96);
    long long v56 = v28;
    long long v29 = *(_OWORD *)(v17 + 48);
    long long v51 = *(_OWORD *)(v17 + 32);
    long long v52 = v29;
    Address.hash(into:)();
    uint64_t v30 = v25 - 1;
    if (v30)
    {
      uint64_t v31 = (long long *)(v17 + 168);
      do
      {
        long long v32 = v31[7];
        long long v57 = v31[6];
        long long v58 = v32;
        uint64_t v59 = *((void *)v31 + 16);
        long long v33 = v31[3];
        long long v53 = v31[2];
        long long v54 = v33;
        long long v34 = v31[5];
        long long v55 = v31[4];
        long long v56 = v34;
        long long v35 = v31[1];
        long long v51 = *v31;
        long long v52 = v35;
        Address.hash(into:)();
        uint64_t v31 = (long long *)((char *)v31 + 136);
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
  }
  if (v23 == 1)
  {
LABEL_25:
    sub_23309C3F0();
    if (!v22) {
      goto LABEL_26;
    }
LABEL_36:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E96B88(a1, v22);
    swift_bridgeObjectRelease();
    if (!v12) {
      return sub_23309C3F0();
    }
    goto LABEL_37;
  }
LABEL_30:
  sub_23309C3F0();
  if (v23)
  {
    sub_23309C3F0();
    uint64_t v37 = v39;
    sub_232E967F8(v39, v23);
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_32;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    uint64_t v37 = v39;
    if (v13)
    {
LABEL_32:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v13);
      swift_bridgeObjectRelease();
      sub_232E96840(v37, v23);
      if (v22) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
  }
  sub_23309C3F0();
  sub_232E96840(v37, v23);
  if (v22) {
    goto LABEL_36;
  }
LABEL_26:
  sub_23309C3F0();
  if (!v12) {
    return sub_23309C3F0();
  }
LABEL_37:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232F781A4(char a1)
{
  uint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 0x7461446874726962;
      break;
    case 3:
      uint64_t result = 0x7265646E6567;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    case 5:
      uint64_t result = 0x6D6F63656C6574;
      break;
    case 6:
      uint64_t result = 0x696669746E656469;
      break;
    case 7:
      uint64_t result = 0x73736572646461;
      break;
    case 8:
      uint64_t result = 0x536C61746972616DLL;
      break;
    case 9:
      uint64_t result = 0x6F69736E65747865;
      break;
    case 10:
      uint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232F78308()
{
  return sub_232F781A4(*v0);
}

uint64_t sub_232F78310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232FD7BC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_232F78338(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_232F78344(uint64_t a1)
{
  unint64_t v2 = sub_232F7CD68();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232F78380(uint64_t a1)
{
  unint64_t v2 = sub_232F7CD68();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsDSTU2.Patient.encode(to:)(void *a1)
{
  sub_232F80428(0, &qword_2687579C8, (uint64_t (*)(void))sub_232F7CD68, (uint64_t)&type metadata for ModelsDSTU2.Patient.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v34 = *(void *)(v1 + 24);
  uint64_t v35 = v6;
  uint64_t v33 = *(void *)(v1 + 32);
  int v40 = *(_DWORD *)(v1 + 40);
  int v32 = *(unsigned __int8 *)(v1 + 44);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v30 = *(void *)(v1 + 56);
  uint64_t v31 = v7;
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v28 = *(void *)(v1 + 72);
  uint64_t v29 = v8;
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v26 = *(void *)(v1 + 88);
  uint64_t v27 = v9;
  uint64_t v10 = *(void *)(v1 + 104);
  uint64_t v23 = *(void *)(v1 + 96);
  uint64_t v24 = v10;
  uint64_t v25 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 120);
  _OWORD v21[2] = *(void *)(v1 + 128);
  uint64_t v22 = v11;
  v21[1] = *(void *)(v1 + 136);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1;
  uint64_t v15 = (char *)v21 - v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_232F7CD68();
  sub_23309C480();
  LOBYTE(v37) = 0;
  uint64_t v16 = v36;
  sub_23309C170();
  if (!v16)
  {
    char v17 = v32;
    int v18 = v40;
    uint64_t v19 = v33;
    LOBYTE(v37) = 1;
    sub_23309C110();
    uint64_t v37 = v19;
    LODWORD(v38) = v18;
    BYTE4(v38) = v17;
    char v41 = 2;
    sub_232EBD66C();
    sub_23309C150();
    uint64_t v36 = v5;
    LOBYTE(v37) = 3;
    sub_23309C110();
    uint64_t v37 = v29;
    char v41 = 4;
    sub_232F7CA40(0, &qword_268757628, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8D488]);
    sub_232F80490();
    sub_23309C1B0();
    uint64_t v37 = v28;
    char v41 = 5;
    sub_232EBDA84(0, &qword_2687568F0);
    sub_232EBDD98();
    sub_23309C150();
    uint64_t v37 = v27;
    char v41 = 6;
    sub_232F7CA40(0, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
    sub_232EBDE6C();
    sub_23309C150();
    uint64_t v37 = v26;
    char v41 = 7;
    sub_232EBDA84(0, &qword_268756920);
    sub_232EBDF3C();
    sub_23309C150();
    uint64_t v37 = v23;
    uint64_t v38 = v24;
    uint64_t v39 = v25;
    char v41 = 8;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v37 = v22;
    char v41 = 9;
    sub_232F7CA40(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_232EBD208();
    sub_23309C150();
    LOBYTE(v37) = 10;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v15, v4);
}

uint64_t ModelsDSTU2.Patient.hashValue.getter()
{
  sub_23309C3D0();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232F78958@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ModelsDSTU2.Patient.init(from:)(a1, a2);
}

uint64_t sub_232F78970(void *a1)
{
  return ModelsDSTU2.Patient.encode(to:)(a1);
}

uint64_t sub_232F78988()
{
  sub_23309C3D0();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232F789CC()
{
  sub_23309C3D0();
  ModelsDSTU2.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232F78A08()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V9HumanNameV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v39 - v10;
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  int v18 = (char *)&v39 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v22) {
    return 0;
  }
  if (*a1 == *a2 && v21 == v22 || (char v23 = sub_23309C220(), result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v25 = (void *)a1[2];
    uint64_t v26 = (void *)a2[2];
    if (v25)
    {
      if (!v26 || (sub_232E90100(v25, v26) & 1) == 0) {
        return 0;
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v27 = (void *)a1[3];
    uint64_t v28 = (void *)a2[3];
    if (v27)
    {
      if (!v28 || (sub_232E90100(v27, v28) & 1) == 0) {
        return 0;
      }
    }
    else if (v28)
    {
      return 0;
    }
    uint64_t v29 = (void *)a1[4];
    uint64_t v30 = (void *)a2[4];
    if (v29)
    {
      if (!v30 || (sub_232E90100(v29, v30) & 1) == 0) {
        return 0;
      }
    }
    else if (v30)
    {
      return 0;
    }
    uint64_t v31 = (void *)a1[5];
    int v32 = (void *)a2[5];
    if (v31)
    {
      if (!v32 || (sub_232E90100(v31, v32) & 1) == 0) {
        return 0;
      }
    }
    else if (v32)
    {
      return 0;
    }
    uint64_t v33 = a1[7];
    uint64_t v34 = a2[7];
    if (v33)
    {
      if (!v34) {
        return 0;
      }
      if (a1[6] != a2[6] || v33 != v34)
      {
        char v35 = sub_23309C220();
        BOOL result = 0;
        if ((v35 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v34)
    {
      return 0;
    }
    uint64_t v40 = type metadata accessor for ModelsDSTU2.HumanName(0);
    sub_232F802EC((uint64_t)a1 + *(int *)(v40 + 40), (uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F802EC((uint64_t)a2 + *(int *)(v40 + 40), (uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    uint64_t v36 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_232F802EC((uint64_t)v20, (uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F802EC((uint64_t)v18, v36, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v37((uint64_t)v11, 1, v4) == 1)
    {
      sub_232F80004((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232F80004((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      if (v37(v36, 1, v4) == 1)
      {
        sub_232F80004((uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        return 1;
      }
      goto LABEL_40;
    }
    sub_232F802EC((uint64_t)v11, (uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v37(v36, 1, v4) == 1)
    {
      sub_232F80004((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232F80004((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232F7CB8C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Period);
LABEL_40:
      sub_232FD8060((uint64_t)v11, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 0;
    }
    sub_232FD80BC(v36, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Period);
    char v38 = static Period.== infix(_:_:)(v15, v7);
    sub_232F7CB8C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Period);
    sub_232F80004((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F80004((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F7CB8C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Period);
    sub_232F80004((uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return (v38 & 1) != 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V7PatientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 44);
  uint64_t v44 = *(void *)(a1 + 48);
  uint64_t v46 = *(void *)(a1 + 56);
  uint64_t v42 = *(void *)(a1 + 64);
  uint64_t v40 = *(void *)(a1 + 72);
  uint64_t v38 = *(void *)(a1 + 80);
  uint64_t v35 = *(void *)(a1 + 96);
  uint64_t v36 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v28 = *(void *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  int v10 = *(_DWORD *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 44);
  uint64_t v43 = *(void *)(a2 + 48);
  uint64_t v45 = *(void *)(a2 + 56);
  uint64_t v41 = *(void *)(a2 + 64);
  uint64_t v39 = *(void *)(a2 + 72);
  uint64_t v37 = *(void *)(a2 + 80);
  uint64_t v34 = *(void *)(a2 + 88);
  uint64_t v32 = *(void *)(a2 + 104);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 112);
  uint64_t v27 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 136);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v12 = sub_23309C220(), BOOL result = 0, (v12 & 1) != 0))
  {
    if (v3)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v3 != v7)
      {
        char v14 = sub_23309C220();
        BOOL result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v6)
    {
      if ((v11 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v50 = v4;
      LODWORD(v51) = v5;
      BYTE4(v51) = 0;
      if (v11) {
        return 0;
      }
      uint64_t v47 = v9;
      LOWORD(v48) = v10 & 0x1FF;
      BYTE2(v48) = BYTE2(v10);
      BYTE3(v48) = HIBYTE(v10) & 1;
      if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v50, (uint64_t)&v47) & 1) == 0) {
        return 0;
      }
    }
    if (v46)
    {
      if (!v45) {
        return 0;
      }
      if (v44 != v43 || v46 != v45)
      {
        char v15 = sub_23309C220();
        BOOL result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v45)
    {
      return 0;
    }
    if ((sub_232E94310(v42, v41) & 1) == 0) {
      return 0;
    }
    if (v40)
    {
      if (!v39 || (sub_232E903B8(v40, v39) & 1) == 0) {
        return 0;
      }
    }
    else if (v39)
    {
      return 0;
    }
    if (v38)
    {
      if (!v37) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = swift_bridgeObjectRetain();
      char v17 = sub_232E904A8(v16, v37);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        return 0;
      }
    }
    else if (v37)
    {
      return 0;
    }
    if (v36)
    {
      uint64_t v18 = v35;
      if (!v34 || !sub_232E904FC(v36, v34)) {
        return 0;
      }
    }
    else
    {
      uint64_t v18 = v35;
      if (v34) {
        return 0;
      }
    }
    if (v33 == 1)
    {
      uint64_t v19 = v32;
      if (v32 == 1)
      {
LABEL_48:
        if (v28)
        {
          if (!v27) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v21 = swift_bridgeObjectRetain();
          char v22 = sub_232E8FFD0(v21, v27);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0) {
            return 0;
          }
        }
        else if (v27)
        {
          return 0;
        }
        if (v26) {
          return v25 && (v24 == v23 && v26 == v25 || (sub_23309C220() & 1) != 0);
        }
        return !v25;
      }
    }
    else
    {
      uint64_t v50 = v18;
      uint64_t v51 = v33;
      uint64_t v52 = v31;
      if (v32 != 1)
      {
        uint64_t v47 = v29;
        uint64_t v48 = v32;
        uint64_t v49 = v30;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v20 = static CodeableConcept.== infix(_:_:)(&v50, &v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232E96840(v18, v33);
        if ((v20 & 1) == 0) {
          return 0;
        }
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = 1;
    }
    sub_232E967F8(v29, v19);
    sub_232E96840(v18, v33);
    sub_232E96840(v29, v19);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV0F5EntryV2eeoiySbAG_AGtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, &qword_268756560, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v34 - v10;
  sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  char v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v34 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v34 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  if (!v22) {
    goto LABEL_14;
  }
  if (*a1 == *a2 && v21 == v22 || (char v23 = sub_23309C220(), v24 = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v39 = v15;
    uint64_t v35 = v7;
    uint64_t v25 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
    uint64_t v26 = *(int *)(v25 + 20);
    uint64_t v37 = a1;
    sub_232F802EC((uint64_t)a1 + v26, (uint64_t)v20, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v36 = v25;
    uint64_t v27 = *(int *)(v25 + 20);
    uint64_t v38 = a2;
    sub_232F802EC((uint64_t)a2 + v27, (uint64_t)v18, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_232F802EC((uint64_t)v20, (uint64_t)v11, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232F802EC((uint64_t)v18, v28, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v29((uint64_t)v11, 1, v4) == 1)
    {
      sub_232F80004((uint64_t)v18, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_232F80004((uint64_t)v20, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (v29(v28, 1, v4) == 1)
      {
        sub_232F80004((uint64_t)v11, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_17:
        char v24 = sub_232FFE1E4(*(void *)((char *)v37 + *(int *)(v36 + 24)), *(void *)((char *)v37 + *(int *)(v36 + 24) + 8), *(void *)((char *)v38 + *(int *)(v36 + 24)), *(void *)((char *)v38 + *(int *)(v36 + 24) + 8));
        return v24 & 1;
      }
      goto LABEL_13;
    }
    uint64_t v30 = (uint64_t)v39;
    sub_232F802EC((uint64_t)v11, (uint64_t)v39, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if (v29(v28, 1, v4) == 1)
    {
      sub_232F80004((uint64_t)v18, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_232F80004((uint64_t)v20, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      sub_232F7CB8C(v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_13:
      sub_232FD8060((uint64_t)v11, &qword_268756560, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      goto LABEL_14;
    }
    uint64_t v32 = (uint64_t)v35;
    sub_232FD80BC(v28, (uint64_t)v35, type metadata accessor for ModelsDSTU2.ResourceProxy);
    char v33 = _s23HealthRecordsExtraction11ModelsDSTU2V13ResourceProxyO2eeoiySbAE_AEtFZ_0(v30, v32);
    sub_232F7CB8C(v32, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232F80004((uint64_t)v18, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232F80004((uint64_t)v20, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232F7CB8C(v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232F80004((uint64_t)v11, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    if (v33) {
      goto LABEL_17;
    }
LABEL_14:
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V16DiagnosticReportV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v100 = *(void *)(v4 - 8);
  uint64_t v101 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v95 = (uint64_t)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v102 = (char *)&v88 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v98 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v88 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v88 - v16;
  uint64_t v18 = type metadata accessor for FHIRDateTime();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v104 = v18;
  uint64_t v105 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v99 = (uint64_t)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v103 = v21;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  char v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v88 - v25;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  uint64_t v28 = MEMORY[0x270FA5388](v27 - 8);
  uint64_t v94 = (uint64_t)&v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v96 = (uint64_t)&v88 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v97 = (uint64_t)&v88 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v88 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  uint64_t v39 = (char *)&v88 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v88 - v40;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v42 = sub_23309C220(), result = 0, (v42 & 1) != 0))
  {
    uint64_t v44 = *(void *)(a1 + 24);
    uint64_t v45 = *(void *)(a2 + 24);
    if (v44)
    {
      if (!v45) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v44 != v45)
      {
        char v46 = sub_23309C220();
        uint64_t result = 0;
        if ((v46 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v45)
    {
      return 0;
    }
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40))
    {
      char v47 = sub_23309C220();
      uint64_t result = 0;
      if ((v47 & 1) == 0) {
        return result;
      }
    }
    uint64_t v48 = *(void *)(a1 + 64);
    long long v108 = *(_OWORD *)(a1 + 48);
    uint64_t v109 = v48;
    uint64_t v49 = *(void *)(a2 + 64);
    long long v106 = *(_OWORD *)(a2 + 48);
    uint64_t v107 = v49;
    if ((static CodeableConcept.== infix(_:_:)(&v108, &v106) & 1) == 0) {
      return 0;
    }
    uint64_t v50 = *(void *)(a1 + 80);
    uint64_t v51 = *(void *)(a2 + 80);
    if (v50)
    {
      if (!v51) {
        return 0;
      }
      if (*(void *)(a1 + 72) != *(void *)(a2 + 72) || v50 != v51)
      {
        char v52 = sub_23309C220();
        uint64_t result = 0;
        if ((v52 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v51)
    {
      return 0;
    }
    __int16 v91 = v17;
    char v90 = v24;
    uint64_t v53 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
    sub_232F802EC(a1 + *(int *)(v53 + 36), (uint64_t)v41, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    char v92 = (int *)v53;
    sub_232F802EC(a2 + *(int *)(v53 + 36), (uint64_t)v39, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v54 = (uint64_t)&v26[*(int *)(v103 + 48)];
    sub_232F802EC((uint64_t)v41, (uint64_t)v26, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v93 = v54;
    sub_232F802EC((uint64_t)v39, v54, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v56 = v105 + 48;
    long long v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    if (v55((uint64_t)v26, 1, v104) == 1)
    {
      sub_232F80004((uint64_t)v39, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F80004((uint64_t)v41, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if (v55(v93, 1, v104) == 1)
      {
        sub_232F80004((uint64_t)v26, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_29:
        uint64_t v105 = v56;
        uint64_t v93 = (uint64_t)v55;
        uint64_t v61 = v92;
        uint64_t v62 = (uint64_t)v91;
        sub_232F802EC(a1 + v92[10], (uint64_t)v91, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        sub_232F802EC(a2 + v61[10], (uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v26 = v102;
        uint64_t v63 = (uint64_t)&v102[*(int *)(v7 + 48)];
        sub_232F802EC(v62, (uint64_t)v102, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        sub_232F802EC((uint64_t)v15, v63, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v64 = v101;
        uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
        if (v65((uint64_t)v26, 1, v101) == 1)
        {
          sub_232F80004((uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232F80004(v62, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v65(v63, 1, v64) == 1)
          {
            sub_232F80004((uint64_t)v26, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
LABEL_40:
            uint64_t v71 = v92;
            uint64_t v72 = v97;
            sub_232F802EC(a1 + v92[11], v97, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v73 = v96;
            sub_232F802EC(a2 + v71[11], v96, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v74 = (uint64_t)v90;
            uint64_t v75 = (uint64_t)&v90[*(int *)(v103 + 48)];
            sub_232F802EC(v72, (uint64_t)v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v76 = v74;
            sub_232F802EC(v73, v75, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v77 = v74;
            uint64_t v78 = v104;
            long long v79 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v93;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v77, 1, v104) == 1)
            {
              sub_232F80004(v73, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              uint64_t v76 = (uint64_t)v90;
              sub_232F80004(v72, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v79(v75, 1, v78) == 1)
              {
                sub_232F80004(v76, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_47:
                uint64_t v83 = v92[12];
                id v84 = (void *)(a1 + v83);
                uint64_t v85 = *(void *)(a1 + v83 + 8);
                uint64_t v86 = (void *)(a2 + v83);
                uint64_t v87 = v86[1];
                if (v85)
                {
                  if (v87 && (*v84 == *v86 && v85 == v87 || (sub_23309C220() & 1) != 0)) {
                    return 1;
                  }
                }
                else if (!v87)
                {
                  return 1;
                }
                return 0;
              }
            }
            else
            {
              uint64_t v80 = v94;
              sub_232F802EC(v76, v94, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v79(v75, 1, v78) != 1)
              {
                uint64_t v81 = v99;
                sub_232FD80BC(v75, v99, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                char v82 = static FHIRDateTime.== infix(_:_:)(v80, v81);
                sub_232F7CB8C(v81, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232F80004(v73, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232F80004(v72, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232F7CB8C(v80, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232F80004(v76, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v82 & 1) == 0) {
                  return 0;
                }
                goto LABEL_47;
              }
              sub_232F80004(v73, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232F80004(v72, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232F7CB8C(v80, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            long long v57 = (unint64_t *)&qword_268756550;
            long long v58 = &qword_268756548;
            uint64_t v67 = type metadata accessor for FHIRDateTime;
            uint64_t v68 = v76;
LABEL_36:
            sub_232FD8060(v68, v57, v58, (uint64_t (*)(uint64_t))v67);
            return 0;
          }
        }
        else
        {
          uint64_t v66 = v98;
          sub_232F802EC((uint64_t)v26, v98, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v65(v63, 1, v64) != 1)
          {
            uint64_t v69 = v95;
            sub_232FD80BC(v63, v95, (uint64_t (*)(void))type metadata accessor for Period);
            char v70 = static Period.== infix(_:_:)(v66, v69);
            sub_232F7CB8C(v69, (uint64_t (*)(void))type metadata accessor for Period);
            sub_232F80004((uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_232F80004(v62, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_232F7CB8C(v66, (uint64_t (*)(void))type metadata accessor for Period);
            sub_232F80004((uint64_t)v26, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            if ((v70 & 1) == 0) {
              return 0;
            }
            goto LABEL_40;
          }
          sub_232F80004((uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232F80004(v62, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232F7CB8C(v66, (uint64_t (*)(void))type metadata accessor for Period);
        }
        long long v57 = &qword_268756F58;
        long long v58 = &qword_268756730;
        uint64_t v59 = type metadata accessor for Period;
LABEL_35:
        uint64_t v67 = v59;
        uint64_t v68 = (uint64_t)v26;
        goto LABEL_36;
      }
    }
    else
    {
      sub_232F802EC((uint64_t)v26, (uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      uint64_t v105 = v56;
      if (v55(v93, 1, v104) != 1)
      {
        uint64_t v60 = v99;
        sub_232FD80BC(v93, v99, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        LODWORD(v93) = static FHIRDateTime.== infix(_:_:)(v36, v60);
        int v89 = type metadata accessor for FHIRDateTime;
        sub_232F7CB8C(v60, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_232F80004((uint64_t)v39, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_232F80004((uint64_t)v41, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_232F7CB8C((uint64_t)v36, (uint64_t (*)(void))v89);
        sub_232F80004((uint64_t)v26, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v56 = v105;
        if ((v93 & 1) == 0) {
          return 0;
        }
        goto LABEL_29;
      }
      sub_232F80004((uint64_t)v39, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F80004((uint64_t)v41, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232F7CB8C((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
    long long v57 = (unint64_t *)&qword_268756550;
    long long v58 = &qword_268756548;
    uint64_t v59 = type metadata accessor for FHIRDateTime;
    goto LABEL_35;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V9ConditionV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v211 = type metadata accessor for Period();
  uint64_t v208 = *(void *)(v211 - 8);
  MEMORY[0x270FA5388](v211);
  uint64_t v204 = (uint64_t)&v197 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v210 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v202 = (uint64_t)&v197 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v213 = (uint64_t)&v197 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v199 = (uint64_t)&v197 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v200 = (uint64_t)&v197 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v201 = (uint64_t)&v197 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v209 = (uint64_t)&v197 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v214 = (uint64_t)&v197 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v215 = (uint64_t)&v197 - v21;
  uint64_t v22 = type metadata accessor for FHIRDateTime();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v222 = v22;
  uint64_t v223 = v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v219 = (uint64_t)&v197 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v221 = v25;
  uint64_t v26 = MEMORY[0x270FA5388](v25);
  uint64_t v207 = (uint64_t)&v197 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v218 = (char *)&v197 - v29;
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v197 - v30;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  uint64_t v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v203 = (uint64_t)&v197 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v205 = (uint64_t)&v197 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v206 = (uint64_t)&v197 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v212 = (uint64_t)&v197 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v216 = (uint64_t)&v197 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  v217 = (char *)&v197 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v220 = (uint64_t)&v197 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v224 = (uint64_t)&v197 - v48;
  MEMORY[0x270FA5388](v47);
  uint64_t v228 = (uint64_t)&v197 - v49;
  uint64_t v50 = type metadata accessor for Reference();
  uint64_t v227 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  char v52 = (int **)((char *)&v197 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232FD8124(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v54 = v53;
  MEMORY[0x270FA5388](v53);
  uint64_t v56 = (char *)&v197 - v55;
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v9);
  uint64_t v58 = MEMORY[0x270FA5388](v57 - 8);
  uint64_t v60 = (int **)((char *)&v197 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = MEMORY[0x270FA5388](v58);
  uint64_t v63 = (char *)&v197 - v62;
  MEMORY[0x270FA5388](v61);
  uint64_t v65 = (char *)&v197 - v64;
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v66 = sub_23309C220();
    uint64_t result = 0;
    if ((v66 & 1) == 0) {
      return result;
    }
  }
  v225 = a1;
  uint64_t v226 = a2;
  uint64_t v68 = a1[2];
  uint64_t v69 = a2[2];
  if (v68 == 1)
  {
    if (v69 == 1) {
      goto LABEL_6;
    }
LABEL_11:
    sub_232EBD054(v69);
    sub_232EA390C(v68);
    sub_232EA390C(v69);
    return 0;
  }
  if (v69 == 1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v68)
  {
    if (!v69)
    {
      sub_232EBD054(v68);
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_232EBD054(v68);
    sub_232EBD054(v68);
    sub_232EBD054(v69);
    uint64_t v75 = swift_bridgeObjectRetain();
    LODWORD(v198) = sub_232E94C94(v75, v69);
    swift_bridgeObjectRelease();
    sub_232EA390C(v69);
    swift_bridgeObjectRelease();
    sub_232EA390C(v68);
    if ((v198 & 1) == 0) {
      return 0;
    }
  }
  else if (v69)
  {
    return 0;
  }
LABEL_6:
  uint64_t v198 = (uint64_t)v31;
  uint64_t v70 = type metadata accessor for ModelsDSTU2.Condition(0);
  sub_232F802EC((uint64_t)v225 + *(int *)(v70 + 24), (uint64_t)v65, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v197 = (int *)v70;
  sub_232F802EC((uint64_t)v226 + *(int *)(v70 + 24), (uint64_t)v63, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v71 = (uint64_t)&v56[*(int *)(v54 + 48)];
  sub_232F802EC((uint64_t)v65, (uint64_t)v56, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232F802EC((uint64_t)v63, v71, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v227 + 48);
  if (v72((uint64_t)v56, 1, v50) == 1)
  {
    sub_232F80004((uint64_t)v63, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232F80004((uint64_t)v65, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    int v73 = v72(v71, 1, v50);
    uint64_t v74 = v228;
    if (v73 == 1)
    {
      sub_232F80004((uint64_t)v56, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      goto LABEL_22;
    }
LABEL_18:
    sub_232FD8060((uint64_t)v56, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    return 0;
  }
  sub_232F802EC((uint64_t)v56, (uint64_t)v60, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  int v76 = v72(v71, 1, v50);
  uint64_t v74 = v228;
  if (v76 == 1)
  {
    sub_232F80004((uint64_t)v63, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232F80004((uint64_t)v65, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232F7CB8C((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for Reference);
    goto LABEL_18;
  }
  sub_232FD80BC(v71, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Reference);
  BOOL v77 = static Reference.== infix(_:_:)(v60, v52);
  sub_232F7CB8C((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232F80004((uint64_t)v63, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232F80004((uint64_t)v65, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232F7CB8C((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232F80004((uint64_t)v56, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!v77) {
    return 0;
  }
LABEL_22:
  uint64_t v78 = v197;
  sub_232F802EC((uint64_t)v225 + v197[7], v74, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v79 = v224;
  sub_232F802EC((uint64_t)v226 + v78[7], v224, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v80 = v198;
  uint64_t v81 = v198 + *(int *)(v221 + 48);
  sub_232F802EC(v74, v198, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F802EC(v79, v81, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v82 = v222;
  uint64_t v83 = v223 + 48;
  id v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48);
  if (v84(v80, 1, v222) == 1)
  {
    sub_232F80004(v79, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v74, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v84(v81, 1, v82) == 1)
    {
      sub_232F80004(v198, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      goto LABEL_31;
    }
LABEL_27:
    uint64_t v86 = (unint64_t *)&qword_268756550;
    uint64_t v87 = &qword_268756548;
    uint64_t v88 = type metadata accessor for FHIRDateTime;
    int v89 = (char *)&v229 + 8;
LABEL_28:
    sub_232FD8060(*((void *)v89 - 32), v86, v87, (uint64_t (*)(uint64_t))v88);
    return 0;
  }
  uint64_t v85 = v220;
  sub_232F802EC(v80, v220, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v84(v81, 1, v82) == 1)
  {
    sub_232F80004(v224, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v228, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F7CB8C(v85, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    goto LABEL_27;
  }
  char v90 = v84;
  uint64_t v91 = v85;
  uint64_t v92 = v219;
  sub_232FD80BC(v81, v219, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  char v93 = static FHIRDateTime.== infix(_:_:)(v91, v92);
  sub_232F7CB8C(v92, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v224, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F80004(v228, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v94 = v91;
  id v84 = v90;
  sub_232F7CB8C(v94, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v80, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((v93 & 1) == 0) {
    return 0;
  }
LABEL_31:
  uint64_t v95 = v78[8];
  uint64_t v96 = *(void *)((char *)v225 + v95 + 16);
  long long v231 = *(_OWORD *)((char *)v225 + v95);
  uint64_t v232 = v96;
  uint64_t v97 = (char *)v226 + v95;
  uint64_t v98 = *((void *)v97 + 2);
  long long v229 = *(_OWORD *)v97;
  uint64_t v230 = v98;
  if ((static CodeableConcept.== infix(_:_:)(&v231, &v229) & 1) == 0) {
    return 0;
  }
  uint64_t v223 = v83;
  uint64_t v99 = v78[9];
  uint64_t v101 = *(void *)((char *)v225 + v99);
  uint64_t v100 = *(void *)((char *)v225 + v99 + 8);
  uint64_t v102 = *(void *)((char *)v225 + v99 + 16);
  uint64_t v103 = (void *)((char *)v226 + v99);
  uint64_t v105 = *v103;
  uint64_t v104 = v103[1];
  uint64_t v106 = v103[2];
  if (v100 == 1)
  {
    if (v104 != 1) {
      goto LABEL_37;
    }
  }
  else
  {
    *(void *)&long long v231 = v101;
    *((void *)&v231 + 1) = v100;
    uint64_t v232 = v102;
    if (v104 == 1) {
      goto LABEL_36;
    }
    *(void *)&long long v229 = v105;
    *((void *)&v229 + 1) = v104;
    uint64_t v230 = v106;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v107 = static CodeableConcept.== infix(_:_:)(&v231, &v229);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v101, v100);
    if ((v107 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v108 = v78[10];
  uint64_t v109 = (void *)((char *)v225 + v108);
  uint64_t v110 = *(void *)((char *)v225 + v108 + 8);
  uint64_t v111 = (void *)((char *)v226 + v108);
  uint64_t v112 = v111[1];
  if (v110)
  {
    if (!v112) {
      return 0;
    }
    if (*v109 != *v111 || v110 != v112)
    {
      char v113 = sub_23309C220();
      uint64_t result = 0;
      if ((v113 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v112)
  {
    return 0;
  }
  uint64_t v114 = v78[11];
  v115 = (void *)((char *)v225 + v114);
  uint64_t v116 = *(void *)((char *)v225 + v114 + 8);
  v117 = (void *)((char *)v226 + v114);
  if (*v115 != *v117 || v116 != v117[1])
  {
    char v118 = sub_23309C220();
    uint64_t result = 0;
    if ((v118 & 1) == 0) {
      return result;
    }
  }
  uint64_t v119 = v78[12];
  uint64_t v101 = *(void *)((char *)v225 + v119);
  uint64_t v100 = *(void *)((char *)v225 + v119 + 8);
  uint64_t v120 = *(void *)((char *)v225 + v119 + 16);
  uint64_t v121 = (void *)((char *)v226 + v119);
  uint64_t v105 = *v121;
  uint64_t v104 = v121[1];
  uint64_t v122 = v121[2];
  if (v100 == 1)
  {
    uint64_t v123 = v222;
    if (v104 == 1) {
      goto LABEL_56;
    }
LABEL_37:
    sub_232E967F8(v105, v104);
    sub_232E96840(v101, v100);
    sub_232E96840(v105, v104);
    return 0;
  }
  *(void *)&long long v231 = v101;
  *((void *)&v231 + 1) = v100;
  uint64_t v232 = v120;
  uint64_t v123 = v222;
  if (v104 == 1)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_37;
  }
  *(void *)&long long v229 = v105;
  *((void *)&v229 + 1) = v104;
  uint64_t v230 = v122;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v124 = static CodeableConcept.== infix(_:_:)(&v231, &v229);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v101, v100);
  if ((v124 & 1) == 0) {
    return 0;
  }
LABEL_56:
  uint64_t v125 = v197[13];
  uint64_t v126 = *(void *)((char *)v226 + v125);
  if (*(void *)((char *)v225 + v125))
  {
    uint64_t v127 = (uint64_t)v217;
    uint64_t v128 = (uint64_t)v218;
    if (!v126) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v129 = swift_bridgeObjectRetain();
    char v130 = sub_232E91178(v129, v126);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v127 = (uint64_t)v217;
    uint64_t v128 = (uint64_t)v218;
    if (v126) {
      return 0;
    }
  }
  long long v131 = v197;
  sub_232F802EC((uint64_t)v225 + v197[14], v127, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v132 = v216;
  sub_232F802EC((uint64_t)v226 + v131[14], v216, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v133 = v128 + *(int *)(v221 + 48);
  sub_232F802EC(v127, v128, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F802EC(v132, v133, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v84(v128, 1, v123) == 1)
  {
    sub_232F80004(v132, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v127, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v84(v133, 1, v123) == 1)
    {
      sub_232F80004(v128, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      goto LABEL_68;
    }
LABEL_66:
    sub_232FD8060(v128, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    return 0;
  }
  uint64_t v134 = v212;
  sub_232F802EC(v128, v212, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v84(v133, 1, v123) == 1)
  {
    sub_232F80004(v216, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v127, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F7CB8C(v134, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    goto LABEL_66;
  }
  uint64_t v135 = v127;
  uint64_t v136 = v134;
  uint64_t v137 = v219;
  sub_232FD80BC(v133, v219, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  char v138 = static FHIRDateTime.== infix(_:_:)(v136, v137);
  sub_232F7CB8C(v137, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v216, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F80004(v135, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F7CB8C(v136, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v128, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((v138 & 1) == 0) {
    return 0;
  }
LABEL_68:
  uint64_t v139 = v197;
  uint64_t v140 = v215;
  sub_232F802EC((uint64_t)v225 + v197[15], v215, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v141 = v214;
  sub_232F802EC((uint64_t)v226 + v139[15], v214, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v142 = v213;
  uint64_t v143 = v213 + *(int *)(v210 + 48);
  sub_232F802EC(v140, v213, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F802EC(v141, v143, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
  uint64_t v145 = v211;
  if (v144(v142, 1, v211) == 1)
  {
    sub_232F80004(v214, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F80004(v215, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v144(v143, 1, v145) == 1)
    {
      sub_232F80004(v142, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      goto LABEL_75;
    }
LABEL_73:
    sub_232FD8060(v142, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return 0;
  }
  sub_232F802EC(v142, v209, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v144(v143, 1, v145) == 1)
  {
    sub_232F80004(v214, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F80004(v215, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F7CB8C(v209, (uint64_t (*)(void))type metadata accessor for Period);
    uint64_t v142 = v213;
    goto LABEL_73;
  }
  uint64_t v146 = v204;
  sub_232FD80BC(v143, v204, (uint64_t (*)(void))type metadata accessor for Period);
  uint64_t v147 = v209;
  char v148 = static Period.== infix(_:_:)(v209, v146);
  sub_232F7CB8C(v146, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232F80004(v214, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F80004(v215, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F7CB8C(v147, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232F80004(v213, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((v148 & 1) == 0) {
    return 0;
  }
LABEL_75:
  uint64_t v149 = v197[16];
  BOOL v150 = (void *)((char *)v225 + v149);
  uint64_t v151 = *(void *)((char *)v225 + v149 + 8);
  BOOL v152 = (void *)((char *)v226 + v149);
  uint64_t v153 = v152[1];
  if (v151)
  {
    if (!v153) {
      return 0;
    }
    uint64_t v155 = v225;
    uint64_t v154 = v226;
    int v156 = v197;
    uint64_t v157 = v84;
    if (*v150 != *v152 || v151 != v153)
    {
      char v158 = sub_23309C220();
      uint64_t result = 0;
      if ((v158 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v155 = v225;
    uint64_t v154 = v226;
    int v156 = v197;
    uint64_t v157 = v84;
    if (v153) {
      return 0;
    }
  }
  uint64_t v159 = v206;
  sub_232F802EC((uint64_t)v155 + v156[17], v206, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v160 = v205;
  sub_232F802EC((uint64_t)v154 + v156[17], v205, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v161 = v207;
  uint64_t v162 = v207 + *(int *)(v221 + 48);
  sub_232F802EC(v159, v207, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F802EC(v160, v162, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v157(v161, 1, v222) == 1)
  {
    sub_232F80004(v205, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v206, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (v84(v162, 1, v222) == 1)
    {
      sub_232F80004(v207, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  sub_232F802EC(v207, v203, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (v84(v162, 1, v222) == 1)
  {
    sub_232F80004(v205, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F80004(v206, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232F7CB8C(v203, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_87:
    uint64_t v86 = (unint64_t *)&qword_268756550;
    uint64_t v87 = &qword_268756548;
    uint64_t v88 = type metadata accessor for FHIRDateTime;
    int v89 = (char *)&v233;
    goto LABEL_28;
  }
  uint64_t v163 = v219;
  sub_232FD80BC(v162, v219, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  uint64_t v164 = v203;
  char v165 = static FHIRDateTime.== infix(_:_:)(v203, v163);
  sub_232F7CB8C(v163, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v205, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F80004(v206, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232F7CB8C(v164, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_232F80004(v207, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((v165 & 1) == 0) {
    return 0;
  }
LABEL_89:
  uint64_t v166 = v197;
  uint64_t v167 = v201;
  sub_232F802EC((uint64_t)v225 + v197[18], v201, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v168 = v200;
  sub_232F802EC((uint64_t)v226 + v166[18], v200, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v169 = v202;
  uint64_t v170 = v202 + *(int *)(v210 + 48);
  sub_232F802EC(v167, v202, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F802EC(v168, v170, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v144(v169, 1, v211) == 1)
  {
    sub_232F80004(v200, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F80004(v201, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v144(v170, 1, v211) == 1)
    {
      sub_232F80004(v202, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      goto LABEL_96;
    }
    goto LABEL_94;
  }
  sub_232F802EC(v202, v199, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v144(v170, 1, v211) == 1)
  {
    sub_232F80004(v200, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F80004(v201, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F7CB8C(v199, (uint64_t (*)(void))type metadata accessor for Period);
LABEL_94:
    uint64_t v86 = &qword_268756F58;
    uint64_t v87 = &qword_268756730;
    uint64_t v88 = type metadata accessor for Period;
    int v89 = (char *)&v231 + 8;
    goto LABEL_28;
  }
  uint64_t v171 = v204;
  sub_232FD80BC(v170, v204, (uint64_t (*)(void))type metadata accessor for Period);
  uint64_t v172 = v199;
  char v173 = static Period.== infix(_:_:)(v199, v171);
  sub_232F7CB8C(v171, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232F80004(v200, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F80004(v201, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F7CB8C(v172, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232F80004(v202, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((v173 & 1) == 0) {
    return 0;
  }
LABEL_96:
  uint64_t v174 = v197[19];
  uint64_t v175 = (void *)((char *)v225 + v174);
  uint64_t v176 = *(void *)((char *)v225 + v174 + 8);
  v177 = (void *)((char *)v226 + v174);
  uint64_t v178 = v177[1];
  if (v176)
  {
    if (!v178) {
      return 0;
    }
    uint64_t v180 = v225;
    v179 = v226;
    uint64_t v181 = v197;
    if (*v175 != *v177 || v176 != v178)
    {
      char v182 = sub_23309C220();
      uint64_t result = 0;
      if ((v182 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v180 = v225;
    v179 = v226;
    uint64_t v181 = v197;
    if (v178) {
      return 0;
    }
  }
  uint64_t v183 = v181[20];
  uint64_t v184 = (void *)((char *)v180 + v183);
  uint64_t v185 = *(void *)((char *)v180 + v183 + 8);
  uint64_t v186 = (void *)((char *)v179 + v183);
  uint64_t v187 = v186[1];
  if (!v185)
  {
    uint64_t v189 = v225;
    uint64_t v188 = v226;
    uint64_t v190 = v197;
    if (!v187) {
      goto LABEL_110;
    }
    return 0;
  }
  if (!v187) {
    return 0;
  }
  uint64_t v189 = v225;
  uint64_t v188 = v226;
  uint64_t v190 = v197;
  if (*v184 == *v186 && v185 == v187 || (v191 = sub_23309C220(), uint64_t result = 0, (v191 & 1) != 0))
  {
LABEL_110:
    uint64_t v192 = v190[21];
    uint64_t v193 = (void *)((char *)v189 + v192);
    uint64_t v194 = *(void *)((char *)v189 + v192 + 8);
    uint64_t v195 = (void *)((char *)v188 + v192);
    uint64_t v196 = v195[1];
    if (v194)
    {
      if (v196 && (*v193 == *v195 && v194 == v196 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v196)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_23309C220(), BOOL result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = swift_bridgeObjectRetain();
      char v12 = sub_232E94364(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v4) {
      return v7 && (v3 == v5 && v4 == v7 || (sub_23309C220() & 1) != 0);
    }
    return !v7;
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.ResourceProxy(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757AD0);
}

uint64_t sub_232F7C5DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_232F7C624()
{
  unint64_t result = qword_268757818;
  if (!qword_268757818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757818);
  }
  return result;
}

uint64_t sub_232F7C678()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 160, 7);
}

uint64_t type metadata accessor for ModelsDSTU2.Observation(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757B20);
}

uint64_t type metadata accessor for ModelsDSTU2.Immunization(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757B10);
}

uint64_t sub_232F7C748(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.DiagnosticReport(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757B00);
}

uint64_t type metadata accessor for ModelsDSTU2.Condition(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757AF0);
}

unint64_t sub_232F7C7D0()
{
  unint64_t result = qword_268757840;
  if (!qword_268757840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757840);
  }
  return result;
}

uint64_t sub_232F7C824()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

unint64_t sub_232F7C86C()
{
  unint64_t result = qword_268757850;
  if (!qword_268757850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757850);
  }
  return result;
}

unint64_t sub_232F7C8C0()
{
  unint64_t result = qword_268757860;
  if (!qword_268757860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757860);
  }
  return result;
}

unint64_t sub_232F7C914()
{
  unint64_t result = qword_268757868;
  if (!qword_268757868)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757868);
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757AE0);
}

unint64_t sub_232F7C970()
{
  unint64_t result = qword_268757878;
  if (!qword_268757878)
  {
    sub_232F7CA40(255, &qword_268757870, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232F7C748(&qword_268757880, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757878);
  }
  return result;
}

void sub_232F7CA40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_232F7CAA4()
{
  unint64_t result = qword_268757890;
  if (!qword_268757890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757890);
  }
  return result;
}

unint64_t sub_232F7CAF8()
{
  unint64_t result = qword_2687578A8;
  if (!qword_2687578A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687578A8);
  }
  return result;
}

uint64_t sub_232F7CB4C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_232F7CB8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_232F7CBEC()
{
  unint64_t result = qword_2687578C0;
  if (!qword_2687578C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687578C0);
  }
  return result;
}

unint64_t sub_232F7CC40()
{
  unint64_t result = qword_2687578D8;
  if (!qword_2687578D8)
  {
    sub_232EBDA84(255, &qword_2687578D0);
    sub_232F7CCC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687578D8);
  }
  return result;
}

unint64_t sub_232F7CCC0()
{
  unint64_t result = qword_2687578E0;
  if (!qword_2687578E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687578E0);
  }
  return result;
}

unint64_t sub_232F7CD14()
{
  unint64_t result = qword_2687578F0;
  if (!qword_2687578F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687578F0);
  }
  return result;
}

unint64_t sub_232F7CD68()
{
  unint64_t result = qword_268757908;
  if (!qword_268757908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757908);
  }
  return result;
}

unint64_t sub_232F7CDBC()
{
  unint64_t result = qword_268757910;
  if (!qword_268757910)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268757910);
  }
  return result;
}

uint64_t type metadata accessor for ModelsDSTU2.HumanName(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268757B30);
}

unint64_t sub_232F7CE18()
{
  unint64_t result = qword_268757918;
  if (!qword_268757918)
  {
    sub_232F7CA40(255, &qword_268757628, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8D488]);
    sub_232F7C748(&qword_268757920, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757918);
  }
  return result;
}

uint64_t sub_232F7CEE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_232E967F8(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_232F7CFAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V13ResourceProxyO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = a1;
  *(void *)&long long v87 = a2;
  uint64_t v2 = type metadata accessor for ModelsDSTU2.Observation(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v83 = (uint64_t *)((char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for ModelsDSTU2.Immunization(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v82 = (uint64_t *)((char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v81 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ModelsDSTU2.Condition(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v80 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (long long *)((char *)&v79 - v15);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v85 = (uint64_t *)((char *)&v79 - v18);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  id v84 = (uint64_t *)((char *)&v79 - v20);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v79 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (uint64_t *)((char *)&v79 - v25);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (uint64_t *)((char *)&v79 - v27);
  sub_232FD819C();
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v32 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (uint64_t)&v32[*(int *)(v30 + 56)];
  sub_232F803C0(v86, (uint64_t)v32, type metadata accessor for ModelsDSTU2.ResourceProxy);
  sub_232F803C0(v87, v33, type metadata accessor for ModelsDSTU2.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_232F803C0((uint64_t)v32, (uint64_t)v26, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v37 = v80;
        sub_232FD80BC(v33, (uint64_t)v80, type metadata accessor for ModelsDSTU2.Condition);
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V9ConditionV2eeoiySbAE_AEtFZ_0(v26, v37);
        sub_232F7CB8C((uint64_t)v37, type metadata accessor for ModelsDSTU2.Condition);
        uint64_t v39 = (uint64_t)v26;
        uint64_t v40 = type metadata accessor for ModelsDSTU2.Condition;
        goto LABEL_14;
      }
      sub_232F7CB8C((uint64_t)v26, type metadata accessor for ModelsDSTU2.Condition);
      goto LABEL_26;
    case 2u:
      sub_232F803C0((uint64_t)v32, (uint64_t)v23, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v41 = v81;
        sub_232FD80BC(v33, v81, type metadata accessor for ModelsDSTU2.DiagnosticReport);
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V16DiagnosticReportV2eeoiySbAE_AEtFZ_0((uint64_t)v23, v41);
        uint64_t v42 = type metadata accessor for ModelsDSTU2.DiagnosticReport;
        sub_232F7CB8C(v41, type metadata accessor for ModelsDSTU2.DiagnosticReport);
        uint64_t v39 = (uint64_t)v23;
        goto LABEL_13;
      }
      sub_232F7CB8C((uint64_t)v23, type metadata accessor for ModelsDSTU2.DiagnosticReport);
      goto LABEL_26;
    case 3u:
      uint64_t v43 = v84;
      sub_232F803C0((uint64_t)v32, (uint64_t)v84, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v44 = v82;
        sub_232FD80BC(v33, (uint64_t)v82, type metadata accessor for ModelsDSTU2.Immunization);
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V12ImmunizationV2eeoiySbAE_AEtFZ_0(v43, v44);
        uint64_t v45 = type metadata accessor for ModelsDSTU2.Immunization;
        goto LABEL_12;
      }
      uint64_t v72 = type metadata accessor for ModelsDSTU2.Immunization;
      goto LABEL_23;
    case 4u:
      uint64_t v43 = v85;
      sub_232F803C0((uint64_t)v32, (uint64_t)v85, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v44 = v83;
        sub_232FD80BC(v33, (uint64_t)v83, type metadata accessor for ModelsDSTU2.Observation);
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V11ObservationV2eeoiySbAE_AEtFZ_0((uint64_t)v43, (uint64_t)v44);
        uint64_t v45 = type metadata accessor for ModelsDSTU2.Observation;
LABEL_12:
        uint64_t v42 = v45;
        sub_232F7CB8C((uint64_t)v44, v45);
        uint64_t v39 = (uint64_t)v43;
LABEL_13:
        uint64_t v40 = v42;
LABEL_14:
        sub_232F7CB8C(v39, v40);
        goto LABEL_29;
      }
      uint64_t v72 = type metadata accessor for ModelsDSTU2.Observation;
LABEL_23:
      sub_232F7CB8C((uint64_t)v43, v72);
      goto LABEL_26;
    case 5u:
      sub_232F803C0((uint64_t)v32, (uint64_t)v16, type metadata accessor for ModelsDSTU2.ResourceProxy);
      long long v46 = v16[7];
      long long v103 = v16[6];
      long long v104 = v46;
      long long v105 = v16[8];
      long long v47 = v16[3];
      long long v99 = v16[2];
      long long v100 = v47;
      long long v48 = v16[5];
      long long v101 = v16[4];
      long long v102 = v48;
      long long v49 = v16[1];
      long long v97 = *v16;
      long long v98 = v49;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        long long v50 = *(_OWORD *)(v33 + 80);
        long long v51 = *(_OWORD *)(v33 + 112);
        long long v94 = *(_OWORD *)(v33 + 96);
        long long v95 = v51;
        long long v52 = *(_OWORD *)(v33 + 112);
        long long v96 = *(_OWORD *)(v33 + 128);
        long long v53 = *(_OWORD *)(v33 + 16);
        long long v54 = *(_OWORD *)(v33 + 48);
        v91[1] = *(_OWORD *)(v33 + 32);
        v91[2] = v54;
        long long v55 = *(_OWORD *)(v33 + 48);
        long long v56 = *(_OWORD *)(v33 + 80);
        long long v92 = *(_OWORD *)(v33 + 64);
        long long v93 = v56;
        long long v57 = *(_OWORD *)(v33 + 16);
        long long v90 = *(_OWORD *)v33;
        v91[0] = v57;
        long long v58 = v16[7];
        v89[6] = v16[6];
        v89[7] = v58;
        v89[8] = v16[8];
        long long v59 = v16[3];
        v89[2] = v16[2];
        v89[3] = v59;
        long long v60 = v16[5];
        v89[4] = v16[4];
        v89[5] = v60;
        long long v61 = v16[1];
        v89[0] = *v16;
        v89[1] = v61;
        v88[6] = v94;
        v88[7] = v52;
        v88[8] = *(_OWORD *)(v33 + 128);
        v88[2] = v91[1];
        v88[3] = v55;
        v88[4] = v92;
        v88[5] = v50;
        v88[0] = v90;
        v88[1] = v53;
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V7PatientV2eeoiySbAE_AEtFZ_0((uint64_t)v89, (uint64_t)v88);
        sub_232F7CFAC((uint64_t)&v90);
        sub_232F7CFAC((uint64_t)&v97);
        goto LABEL_29;
      }
      sub_232F7CFAC((uint64_t)&v97);
      goto LABEL_26;
    case 6u:
      sub_232F803C0((uint64_t)v32, (uint64_t)v13, type metadata accessor for ModelsDSTU2.ResourceProxy);
      uint64_t v62 = v13[1];
      uint64_t v63 = v13[3];
      uint64_t v64 = v13[5];
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_25;
      }
      uint64_t v65 = v13[4];
      uint64_t v66 = v13[2];
      uint64_t v67 = *v13;
      uint64_t v68 = *(void *)v33;
      uint64_t v69 = *(void *)(v33 + 8);
      uint64_t v70 = *(void *)(v33 + 16);
      uint64_t v71 = *(void *)(v33 + 40);
      *(void *)&long long v97 = v67;
      *((void *)&v97 + 1) = v62;
      *(void *)&long long v98 = v66;
      *((void *)&v98 + 1) = v63;
      *(void *)&long long v99 = v65;
      *((void *)&v99 + 1) = v64;
      *(void *)&long long v90 = v68;
      *((void *)&v90 + 1) = v69;
      *(void *)&v91[0] = v70;
      long long v87 = *(_OWORD *)(v33 + 24);
      *(_OWORD *)((char *)v91 + 8) = v87;
      *((void *)&v91[1] + 1) = v71;
      char v38 = _s23HealthRecordsExtraction15UnknownResourceV2eeoiySbAC_ACtFZ_0(&v97, &v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_28;
    default:
      sub_232F803C0((uint64_t)v32, (uint64_t)v28, type metadata accessor for ModelsDSTU2.ResourceProxy);
      uint64_t v35 = v28[1];
      uint64_t v34 = v28[2];
      uint64_t v36 = v28[4];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_26:
        sub_232F7CB8C((uint64_t)v32, (uint64_t (*)(void))sub_232FD819C);
        char v38 = 0;
      }
      else
      {
        uint64_t v73 = v28[3];
        uint64_t v74 = *v28;
        uint64_t v75 = *(void *)v33;
        uint64_t v76 = *(void *)(v33 + 8);
        uint64_t v77 = *(void *)(v33 + 32);
        *(void *)&long long v97 = v74;
        *((void *)&v97 + 1) = v35;
        *(void *)&long long v98 = v34;
        *((void *)&v98 + 1) = v73;
        *(void *)&long long v99 = v36;
        *(void *)&long long v90 = v75;
        *((void *)&v90 + 1) = v76;
        long long v87 = *(_OWORD *)(v33 + 16);
        v91[0] = v87;
        *(void *)&v91[1] = v77;
        char v38 = _s23HealthRecordsExtraction11ModelsDSTU2V6BundleV2eeoiySbAE_AEtFZ_0(&v97, &v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_29:
        sub_232F7CB8C((uint64_t)v32, type metadata accessor for ModelsDSTU2.ResourceProxy);
      }
      return v38 & 1;
  }
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V12ImmunizationV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v122 = type metadata accessor for Reference();
  uint64_t v120 = *(void *)(v122 - 8);
  MEMORY[0x270FA5388](v122);
  v115 = (int **)((char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232FD8124(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v121 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v118 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v125 = (uint64_t)&v111 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v114 = (int **)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v116 = (uint64_t)&v111 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v117 = (uint64_t)&v111 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v119 = (int **)((char *)&v111 - v18);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v123 = (uint64_t)&v111 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v124 = (uint64_t)&v111 - v21;
  uint64_t v22 = type metadata accessor for FHIRDateTime();
  uint64_t v126 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v26 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v111 - v27;
  uint64_t v29 = a2;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  uint64_t v31 = MEMORY[0x270FA5388](v30 - 8);
  uint64_t v33 = (char *)&v111 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v111 - v35;
  MEMORY[0x270FA5388](v34);
  char v38 = (char *)&v111 - v37;
  if (*a1 == *v29 && a1[1] == v29[1] || (v39 = sub_23309C220(), uint64_t result = 0, (v39 & 1) != 0))
  {
    uint64_t v41 = a1[3];
    uint64_t v42 = v29[3];
    if (v41)
    {
      if (!v42) {
        return 0;
      }
      if (a1[2] != v29[2] || v41 != v42)
      {
        char v43 = sub_23309C220();
        uint64_t result = 0;
        if ((v43 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v42)
    {
      return 0;
    }
    uint64_t v44 = a1[4];
    char v113 = v29;
    uint64_t v45 = v29[4];
    if (v44 == 1)
    {
      if (v45 == 1) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v45 != 1)
      {
        if (v44)
        {
          if (!v45)
          {
            sub_232EBD054(v44);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v44);
          sub_232EBD054(v44);
          sub_232EBD054(v45);
          uint64_t v54 = swift_bridgeObjectRetain();
          LODWORD(v112) = sub_232E94C94(v54, v45);
          swift_bridgeObjectRelease();
          sub_232EA390C(v45);
          swift_bridgeObjectRelease();
          sub_232EA390C(v44);
          if ((v112 & 1) == 0) {
            return 0;
          }
        }
        else if (v45)
        {
          return 0;
        }
LABEL_13:
        long long v46 = v113;
        if (a1[5] != v113[5] || a1[6] != v113[6])
        {
          char v47 = sub_23309C220();
          uint64_t result = 0;
          if ((v47 & 1) == 0) {
            return result;
          }
        }
        uint64_t v48 = type metadata accessor for ModelsDSTU2.Immunization(0);
        long long v49 = a1;
        long long v50 = (int *)v48;
        uint64_t v51 = *(int *)(v48 + 32);
        uint64_t v112 = v49;
        sub_232F802EC((uint64_t)v49 + v51, (uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v111 = v50;
        sub_232F802EC((uint64_t)v46 + v50[8], (uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v52 = (uint64_t)&v28[*(int *)(v26 + 48)];
        sub_232F802EC((uint64_t)v38, (uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_232F802EC((uint64_t)v36, v52, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        long long v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
        if (v53((uint64_t)v28, 1, v22) == 1)
        {
          sub_232F80004((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232F80004((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v53(v52, 1, v22) == 1)
          {
            sub_232F80004((uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_32:
            long long v56 = v111;
            uint64_t v57 = v111[9];
            uint64_t v58 = (uint64_t)v112 + v57;
            char v59 = *((unsigned char *)v112 + v57 + 12);
            long long v60 = v113;
            long long v61 = (char *)v113 + v57;
            char v62 = v61[12];
            if (v59)
            {
              if ((v61[12] & 1) == 0) {
                return 0;
              }
            }
            else
            {
              uint64_t v63 = *(void *)v61;
              int v64 = *((_DWORD *)v61 + 2);
              int v65 = *(_DWORD *)(v58 + 8);
              *(void *)&long long v129 = *(void *)v58;
              DWORD2(v129) = v65;
              BYTE12(v129) = 0;
              if (v62) {
                return 0;
              }
              *(void *)&long long v127 = v63;
              WORD4(v127) = v64 & 0x1FF;
              BYTE10(v127) = BYTE2(v64);
              BYTE11(v127) = HIBYTE(v64) & 1;
              if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v129, (uint64_t)&v127) & 1) == 0) {
                return 0;
              }
            }
            uint64_t v66 = v56[10];
            uint64_t v67 = *(void *)((char *)v60 + v66);
            if (*(void *)((char *)v112 + v66))
            {
              if (!v67) {
                return 0;
              }
              swift_bridgeObjectRetain();
              uint64_t v68 = swift_bridgeObjectRetain();
              char v69 = sub_232E92468(v68, v67);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v69 & 1) == 0) {
                return 0;
              }
LABEL_43:
              uint64_t v70 = v113;
              if (*((unsigned __int8 *)v112 + v56[11]) != *((unsigned __int8 *)v113 + v56[11])) {
                return 0;
              }
              uint64_t v71 = v56[12];
              uint64_t v72 = *(void *)((char *)v112 + v71);
              uint64_t v73 = *(void *)((char *)v113 + v71);
              if (v72)
              {
                if (!v73 || (sub_232E94C18(v72, v73) & 1) == 0) {
                  return 0;
                }
              }
              else if (v73)
              {
                return 0;
              }
              uint64_t v74 = v56[13];
              uint64_t v75 = v112;
              uint64_t v76 = *(void *)((char *)v112 + v74 + 16);
              long long v129 = *(_OWORD *)((char *)v112 + v74);
              uint64_t v130 = v76;
              uint64_t v77 = (long long *)((char *)v70 + v74);
              uint64_t v78 = *((void *)v77 + 2);
              long long v127 = *v77;
              uint64_t v128 = v78;
              if ((static CodeableConcept.== infix(_:_:)(&v129, &v127) & 1) == 0
                || *((unsigned __int8 *)v75 + v56[14]) != *((unsigned __int8 *)v70 + v56[14]))
              {
                return 0;
              }
              uint64_t v79 = v124;
              sub_232F802EC((uint64_t)v75 + v56[15], v124, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              uint64_t v80 = v123;
              sub_232F802EC((uint64_t)v70 + v56[15], v123, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              uint64_t v81 = v125;
              uint64_t v82 = v125 + *(int *)(v121 + 48);
              sub_232F802EC(v79, v125, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              sub_232F802EC(v80, v82, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              uint64_t v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
              uint64_t v84 = v81;
              uint64_t v85 = v122;
              if (v83(v84, 1, v122) == 1)
              {
                sub_232F80004(v123, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_232F80004(v124, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                if (v83(v82, 1, v85) == 1)
                {
                  sub_232F80004(v125, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  goto LABEL_60;
                }
              }
              else
              {
                uint64_t v86 = v119;
                sub_232F802EC(v125, (uint64_t)v119, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                if (v83(v82, 1, v85) != 1)
                {
                  long long v87 = v115;
                  sub_232FD80BC(v82, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for Reference);
                  BOOL v88 = _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(v86, v87);
                  sub_232F7CB8C((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for Reference);
                  sub_232F80004(v123, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232F80004(v124, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232F7CB8C((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for Reference);
                  sub_232F80004(v125, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (!v88) {
                    return 0;
                  }
LABEL_60:
                  uint64_t v89 = v111[16];
                  long long v90 = (void *)((char *)v112 + v89);
                  uint64_t v91 = *(void *)((char *)v112 + v89 + 8);
                  long long v92 = (void *)((char *)v113 + v89);
                  uint64_t v93 = v92[1];
                  if (v91)
                  {
                    if (!v93) {
                      return 0;
                    }
                    long long v94 = v113;
                    long long v95 = v112;
                    if (*v90 != *v92 || v91 != v93)
                    {
                      char v96 = sub_23309C220();
                      uint64_t result = 0;
                      if ((v96 & 1) == 0) {
                        return result;
                      }
                    }
                  }
                  else
                  {
                    long long v94 = v113;
                    long long v95 = v112;
                    if (v93) {
                      return 0;
                    }
                  }
                  long long v97 = v95;
                  long long v98 = v111;
                  uint64_t v99 = v117;
                  sub_232F802EC((uint64_t)v97 + v111[17], v117, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  uint64_t v100 = v116;
                  sub_232F802EC((uint64_t)v94 + v98[17], v116, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  uint64_t v101 = v118;
                  uint64_t v102 = v118 + *(int *)(v121 + 48);
                  sub_232F802EC(v99, v118, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232F802EC(v100, v102, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v83(v101, 1, v122) == 1)
                  {
                    sub_232F80004(v116, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_232F80004(v117, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (v83(v102, 1, v122) == 1)
                    {
                      sub_232F80004(v118, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      goto LABEL_74;
                    }
                  }
                  else
                  {
                    sub_232F802EC(v118, (uint64_t)v114, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (v83(v102, 1, v122) != 1)
                    {
                      long long v103 = v115;
                      sub_232FD80BC(v102, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for Reference);
                      long long v104 = v114;
                      BOOL v105 = _s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(v114, v103);
                      sub_232F7CB8C((uint64_t)v103, (uint64_t (*)(void))type metadata accessor for Reference);
                      sub_232F80004(v116, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_232F80004(v117, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_232F7CB8C((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for Reference);
                      sub_232F80004(v118, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      if (!v105) {
                        return 0;
                      }
LABEL_74:
                      uint64_t v106 = v111[18];
                      char v107 = (void *)((char *)v112 + v106);
                      uint64_t v108 = *(void *)((char *)v112 + v106 + 8);
                      uint64_t v109 = (void *)((char *)v113 + v106);
                      uint64_t v110 = v109[1];
                      if (v108)
                      {
                        if (!v110 || (*v107 != *v109 || v108 != v110) && (sub_23309C220() & 1) == 0) {
                          return 0;
                        }
                      }
                      else if (v110)
                      {
                        return 0;
                      }
                      return 1;
                    }
                    sub_232F80004(v116, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_232F80004(v117, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_232F7CB8C((uint64_t)v114, (uint64_t (*)(void))type metadata accessor for Reference);
                  }
                  sub_232FD8060(v118, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  return 0;
                }
                sub_232F80004(v123, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_232F80004(v124, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_232F7CB8C((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for Reference);
              }
              sub_232FD8060(v125, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
              return 0;
            }
            if (!v67) {
              goto LABEL_43;
            }
            return 0;
          }
        }
        else
        {
          sub_232F802EC((uint64_t)v28, (uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v53(v52, 1, v22) != 1)
          {
            sub_232FD80BC(v52, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            char v55 = static FHIRDateTime.== infix(_:_:)(v33, v24);
            sub_232F7CB8C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232F80004((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F80004((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F7CB8C((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232F80004((uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v55 & 1) == 0) {
              return 0;
            }
            goto LABEL_32;
          }
          sub_232F80004((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232F80004((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232F7CB8C((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        }
        sub_232FD8060((uint64_t)v28, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v45);
    sub_232EA390C(v44);
    sub_232EA390C(v45);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction11ModelsDSTU2V11ObservationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v147 = type metadata accessor for Quantity();
  uint64_t v144 = *(void *)(v147 - 8);
  MEMORY[0x270FA5388](v147);
  uint64_t v141 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, (unint64_t *)&qword_268756F60, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v142 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v148 = (uint64_t)&v135 - v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v143 = (uint64_t)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v145 = (uint64_t)&v135 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v146 = (uint64_t)&v135 - v13;
  uint64_t v14 = type metadata accessor for Period();
  uint64_t v154 = *(void *)(v14 - 8);
  uint64_t v155 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v149 = (uint64_t)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v156 = (uint64_t)&v135 - v18;
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v7);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v152 = (uint64_t)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v135 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v157 = (uint64_t)&v135 - v25;
  uint64_t v26 = type metadata accessor for FHIRDateTime();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v159 = v26;
  uint64_t v160 = v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v153 = (uint64_t)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232FD8124(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v158 = v29;
  uint64_t v30 = MEMORY[0x270FA5388](v29);
  uint64_t v151 = (uint64_t)&v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v135 - v32;
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v7);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v37 = (char *)&v135 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v35);
  uint64_t v150 = (uint64_t)&v135 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v42 = (char *)&v135 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40);
  uint64_t v45 = (char *)&v135 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43);
  uint64_t v48 = (char *)&v135 - v47;
  MEMORY[0x270FA5388](v46);
  long long v50 = (char *)&v135 - v49;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (char v51 = sub_23309C220(), result = 0, (v51 & 1) != 0))
  {
    uint64_t v53 = *(void *)(a1 + 24);
    uint64_t v54 = *(void *)(a2 + 24);
    if (v53)
    {
      if (!v54) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v53 != v54)
      {
        char v55 = sub_23309C220();
        uint64_t result = 0;
        if ((v55 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v54)
    {
      return 0;
    }
    uint64_t v140 = v42;
    uint64_t v139 = v37;
    uint64_t v56 = *(void *)(a1 + 32);
    uint64_t v57 = *(void *)(a2 + 32);
    if (v56 == 1)
    {
      if (v57 == 1) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v57 != 1)
      {
        if (v56)
        {
          uint64_t v65 = *(void *)(a1 + 32);
          if (!v57)
          {
            sub_232EBD054(v65);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v65);
          sub_232EBD054(v56);
          sub_232EBD054(v57);
          uint64_t v66 = swift_bridgeObjectRetain();
          LODWORD(v138) = sub_232E94C94(v66, v57);
          swift_bridgeObjectRelease();
          sub_232EA390C(v57);
          swift_bridgeObjectRelease();
          sub_232EA390C(v56);
          if ((v138 & 1) == 0) {
            return 0;
          }
        }
        else if (v57)
        {
          return 0;
        }
LABEL_13:
        if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || *(void *)(a1 + 48) != *(void *)(a2 + 48))
        {
          char v58 = sub_23309C220();
          uint64_t result = 0;
          if ((v58 & 1) == 0) {
            return result;
          }
        }
        char v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + 56);
        uint64_t v60 = *(void *)(a1 + 64);
        uint64_t v61 = *(void *)(a1 + 72);
        uint64_t v62 = *(void *)(a2 + 56);
        uint64_t v63 = *(void *)(a2 + 64);
        uint64_t v64 = *(void *)(a2 + 72);
        uint64_t v138 = v61;
        uint64_t v137 = v59;
        if (v60 == 1)
        {
          if (v63 == 1) {
            goto LABEL_32;
          }
        }
        else
        {
          *(void *)&long long v163 = v59;
          *((void *)&v163 + 1) = v60;
          uint64_t v164 = v61;
          if (v63 != 1)
          {
            *(void *)&long long v161 = v62;
            *((void *)&v161 + 1) = v63;
            uint64_t v162 = v64;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            LODWORD(v136) = static CodeableConcept.== infix(_:_:)(&v163, &v161);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_232E96840((uint64_t)v137, v60);
            if ((v136 & 1) == 0) {
              return 0;
            }
LABEL_32:
            uint64_t v69 = *(void *)(a1 + 96);
            long long v163 = *(_OWORD *)(a1 + 80);
            uint64_t v164 = v69;
            uint64_t v70 = *(void *)(a2 + 96);
            long long v161 = *(_OWORD *)(a2 + 80);
            uint64_t v162 = v70;
            if ((static CodeableConcept.== infix(_:_:)(&v163, &v161) & 1) == 0) {
              return 0;
            }
            uint64_t v71 = *(void *)(a1 + 112);
            uint64_t v72 = *(void *)(a2 + 112);
            if (v71)
            {
              if (!v72) {
                return 0;
              }
              if (*(void *)(a1 + 104) != *(void *)(a2 + 104) || v71 != v72)
              {
                char v73 = sub_23309C220();
                uint64_t result = 0;
                if ((v73 & 1) == 0) {
                  return result;
                }
              }
            }
            else if (v72)
            {
              return 0;
            }
            uint64_t v74 = type metadata accessor for ModelsDSTU2.Observation(0);
            sub_232F802EC(a1 + *(int *)(v74 + 44), (uint64_t)v50, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v136 = (int *)v74;
            sub_232F802EC(a2 + *(int *)(v74 + 44), (uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v75 = (uint64_t)&v33[*(int *)(v158 + 48)];
            sub_232F802EC((uint64_t)v50, (uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v138 = v75;
            sub_232F802EC((uint64_t)v48, v75, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v76 = v159;
            uint64_t v77 = v160 + 48;
            uint64_t v137 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
            if (v137((uint64_t)v33, 1, v159) == 1)
            {
              uint64_t v160 = v77;
              sub_232F80004((uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232F80004((uint64_t)v50, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v137(v138, 1, v159) == 1)
              {
                sub_232F80004((uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_50;
              }
            }
            else
            {
              sub_232F802EC((uint64_t)v33, (uint64_t)v45, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v137(v138, 1, v76) != 1)
              {
                uint64_t v160 = v77;
                uint64_t v78 = v153;
                sub_232FD80BC(v138, v153, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                LODWORD(v138) = static FHIRDateTime.== infix(_:_:)(v45, v78);
                sub_232F7CB8C(v78, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232F80004((uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232F80004((uint64_t)v50, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232F7CB8C((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232F80004((uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v138 & 1) == 0) {
                  return 0;
                }
LABEL_50:
                uint64_t v79 = v136;
                uint64_t v80 = v157;
                sub_232F802EC(a1 + v136[12], v157, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_232F802EC(a2 + v79[12], (uint64_t)v24, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v81 = v156;
                uint64_t v82 = v156 + *(int *)(v17 + 48);
                sub_232F802EC(v80, v156, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_232F802EC((uint64_t)v24, v82, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v83 = v155;
                uint64_t v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48);
                if (v84(v81, 1, v155) == 1)
                {
                  sub_232F80004((uint64_t)v24, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232F80004(v80, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v84(v82, 1, v83) == 1)
                  {
                    sub_232F80004(v81, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    goto LABEL_57;
                  }
                }
                else
                {
                  uint64_t v85 = v152;
                  sub_232F802EC(v81, v152, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v84(v82, 1, v83) != 1)
                  {
                    uint64_t v86 = v149;
                    sub_232FD80BC(v82, v149, (uint64_t (*)(void))type metadata accessor for Period);
                    BOOL v87 = _s23HealthRecordsExtraction6PeriodV2eeoiySbAC_ACtFZ_0(v85, v86);
                    sub_232F7CB8C(v86, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232F80004((uint64_t)v24, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232F80004(v157, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232F7CB8C(v85, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232F80004(v81, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if (!v87) {
                      return 0;
                    }
LABEL_57:
                    BOOL v88 = v136;
                    uint64_t v89 = (uint64_t)v140;
                    sub_232F802EC(a1 + v136[13], (uint64_t)v140, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v90 = v150;
                    sub_232F802EC(a2 + v88[13], v150, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v91 = v151;
                    uint64_t v92 = v151 + *(int *)(v158 + 48);
                    sub_232F802EC(v89, v151, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_232F802EC(v90, v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v93 = v159;
                    long long v94 = v137;
                    if (v137(v91, 1, v159) == 1)
                    {
                      sub_232F80004(v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232F80004(v89, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v94(v92, 1, v93) == 1)
                      {
                        sub_232F80004(v91, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_64;
                      }
                    }
                    else
                    {
                      uint64_t v95 = (uint64_t)v139;
                      sub_232F802EC(v91, (uint64_t)v139, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v94(v92, 1, v93) != 1)
                      {
                        uint64_t v96 = v153;
                        sub_232FD80BC(v92, v153, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        char v97 = static FHIRDateTime.== infix(_:_:)(v95, v96);
                        sub_232F7CB8C(v96, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232F80004(v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232F80004((uint64_t)v140, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232F7CB8C(v95, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232F80004(v91, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v97 & 1) == 0) {
                          return 0;
                        }
LABEL_64:
                        uint64_t v98 = v136[14];
                        uint64_t v99 = *(void *)(a2 + v98);
                        if (*(void *)(a1 + v98))
                        {
                          if (!v99) {
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          uint64_t v100 = swift_bridgeObjectRetain();
                          char v101 = sub_232E90BE8(v100, v99);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v101 & 1) == 0) {
                            return 0;
                          }
                        }
                        else if (v99)
                        {
                          return 0;
                        }
                        uint64_t v102 = v136[15];
                        long long v103 = (void *)(a1 + v102);
                        uint64_t v104 = *(void *)(a1 + v102 + 8);
                        BOOL v105 = (void *)(a2 + v102);
                        uint64_t v106 = v105[1];
                        if (v104)
                        {
                          if (!v106) {
                            return 0;
                          }
                          if (*v103 != *v105 || v104 != v106)
                          {
                            char v107 = sub_23309C220();
                            uint64_t result = 0;
                            if ((v107 & 1) == 0) {
                              return result;
                            }
                          }
                        }
                        else if (v106)
                        {
                          return 0;
                        }
                        uint64_t v108 = v136[16];
                        uint64_t v110 = *(void *)(a1 + v108);
                        uint64_t v109 = *(void *)(a1 + v108 + 8);
                        uint64_t v111 = *(void *)(a1 + v108 + 16);
                        uint64_t v112 = (uint64_t *)(a2 + v108);
                        uint64_t v114 = *v112;
                        uint64_t v113 = v112[1];
                        uint64_t v115 = v112[2];
                        if (v109 == 1)
                        {
                          if (v113 == 1) {
                            goto LABEL_83;
                          }
                        }
                        else
                        {
                          *(void *)&long long v163 = v110;
                          *((void *)&v163 + 1) = v109;
                          uint64_t v164 = v111;
                          if (v113 != 1)
                          {
                            *(void *)&long long v161 = v114;
                            *((void *)&v161 + 1) = v113;
                            uint64_t v162 = v115;
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain_n();
                            char v116 = static CodeableConcept.== infix(_:_:)(&v163, &v161);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_232E96840(v110, v109);
                            if ((v116 & 1) == 0) {
                              return 0;
                            }
LABEL_83:
                            uint64_t v117 = v136;
                            uint64_t v118 = v146;
                            sub_232F802EC(a1 + v136[17], v146, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v119 = v145;
                            sub_232F802EC(a2 + v117[17], v145, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v120 = v148;
                            uint64_t v121 = v148 + *(int *)(v142 + 48);
                            sub_232F802EC(v118, v148, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            sub_232F802EC(v119, v121, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
                            if (v122(v120, 1, v147) == 1)
                            {
                              sub_232F80004(v145, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232F80004(v146, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v122(v121, 1, v147) == 1)
                              {
                                sub_232F80004(v148, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
LABEL_90:
                                uint64_t v126 = v136[18];
                                uint64_t v127 = *(void *)(a2 + v126);
                                if (*(void *)(a1 + v126))
                                {
                                  if (!v127) {
                                    return 0;
                                  }
                                  swift_bridgeObjectRetain();
                                  uint64_t v128 = swift_bridgeObjectRetain();
                                  char v129 = sub_232E93404(v128, v127);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if ((v129 & 1) == 0) {
                                    return 0;
                                  }
                                }
                                else if (v127)
                                {
                                  return 0;
                                }
                                uint64_t v130 = v136[19];
                                long long v131 = (void *)(a1 + v130);
                                uint64_t v132 = *(void *)(a1 + v130 + 8);
                                uint64_t v133 = (void *)(a2 + v130);
                                uint64_t v134 = v133[1];
                                if (v132)
                                {
                                  if (v134 && (*v131 == *v133 && v132 == v134 || (sub_23309C220() & 1) != 0)) {
                                    return 1;
                                  }
                                }
                                else if (!v134)
                                {
                                  return 1;
                                }
                                return 0;
                              }
                            }
                            else
                            {
                              sub_232F802EC(v148, v143, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v122(v121, 1, v147) != 1)
                              {
                                uint64_t v123 = v141;
                                sub_232FD80BC(v121, v141, (uint64_t (*)(void))type metadata accessor for Quantity);
                                uint64_t v124 = v143;
                                BOOL v125 = _s23HealthRecordsExtraction8QuantityV2eeoiySbAC_ACtFZ_0(v143, v123);
                                sub_232F7CB8C(v123, (uint64_t (*)(void))type metadata accessor for Quantity);
                                sub_232F80004(v145, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_232F80004(v146, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_232F7CB8C(v124, (uint64_t (*)(void))type metadata accessor for Quantity);
                                sub_232F80004(v148, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                if (!v125) {
                                  return 0;
                                }
                                goto LABEL_90;
                              }
                              sub_232F80004(v145, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232F80004(v146, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232F7CB8C(v143, (uint64_t (*)(void))type metadata accessor for Quantity);
                            }
                            sub_232FD8060(v148, (unint64_t *)&qword_268756F60, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        sub_232E967F8(v114, v113);
                        sub_232E96840(v110, v109);
                        sub_232E96840(v114, v113);
                        return 0;
                      }
                      sub_232F80004(v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232F80004((uint64_t)v140, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232F7CB8C(v95, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                    }
                    sub_232FD8060(v91, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_232F80004((uint64_t)v24, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232F80004(v157, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232F7CB8C(v85, (uint64_t (*)(void))type metadata accessor for Period);
                }
                sub_232FD8060(v81, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                return 0;
              }
              sub_232F80004((uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232F80004((uint64_t)v50, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232F7CB8C((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            sub_232FD8060((uint64_t)v33, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          uint64_t v67 = v62;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v62 = v67;
        }
        uint64_t v68 = v62;
        sub_232E967F8(v62, v63);
        sub_232E96840((uint64_t)v137, v60);
        sub_232E96840(v68, v63);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v57);
    sub_232EA390C(v56);
    sub_232EA390C(v57);
    return 0;
  }
  return result;
}

unint64_t sub_232F7FFB0()
{
  unint64_t result = qword_268757930;
  if (!qword_268757930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757930);
  }
  return result;
}

uint64_t sub_232F80004(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_232F7CA40(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232F80074(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232F7CA40(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t sub_232F800F4()
{
  unint64_t result = qword_268757958;
  if (!qword_268757958)
  {
    sub_232F7CA40(255, &qword_268757870, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232F7C748(&qword_268757960, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757958);
  }
  return result;
}

unint64_t sub_232F801C4()
{
  unint64_t result = qword_268757980;
  if (!qword_268757980)
  {
    sub_232EBDA84(255, &qword_2687578D0);
    sub_232F80244();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757980);
  }
  return result;
}

unint64_t sub_232F80244()
{
  unint64_t result = qword_268757988;
  if (!qword_268757988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757988);
  }
  return result;
}

unint64_t sub_232F80298()
{
  unint64_t result = qword_268757998;
  if (!qword_268757998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757998);
  }
  return result;
}

uint64_t sub_232F802EC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232F7CA40(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

unint64_t sub_232F8036C()
{
  unint64_t result = qword_2687579B8;
  if (!qword_2687579B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687579B8);
  }
  return result;
}

uint64_t sub_232F803C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_232F80428(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_232F80490()
{
  unint64_t result = qword_2687579D0;
  if (!qword_2687579D0)
  {
    sub_232F7CA40(255, &qword_268757628, type metadata accessor for ModelsDSTU2.HumanName, MEMORY[0x263F8D488]);
    sub_232F7C748(&qword_2687579D8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687579D0);
  }
  return result;
}

uint64_t sub_232F80560(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757938, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  a1[2] = sub_232F7C748(&qword_268757948, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  uint64_t result = sub_232F7C748(&qword_2687579E0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
  a1[3] = result;
  return result;
}

uint64_t sub_232F8060C()
{
  return sub_232F7C748(&qword_2687579E8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.ResourceProxy);
}

uint64_t sub_232F80654(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757880, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  a1[2] = sub_232F7C748(&qword_268757960, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  uint64_t result = sub_232F7C748(&qword_2687579F0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  a1[3] = result;
  return result;
}

uint64_t sub_232F80700()
{
  return sub_232F7C748(&qword_2687579F8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
}

uint64_t sub_232F80748(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232F81168(a1, a2, a3, (uint64_t (*)(void))sub_232F597E4, (uint64_t (*)(void))sub_232F5989C, (uint64_t (*)(void))sub_232F80788);
}

unint64_t sub_232F80788()
{
  unint64_t result = qword_268757A00;
  if (!qword_268757A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757A00);
  }
  return result;
}

uint64_t sub_232F807DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F81364(a1, a2, a3, (uint64_t (*)(void))sub_232F597E4, (uint64_t (*)(void))sub_232F5989C);
}

unint64_t sub_232F8080C()
{
  unint64_t result = qword_268757A08;
  if (!qword_268757A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757A08);
  }
  return result;
}

uint64_t sub_232F80860(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757A10, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  a1[2] = sub_232F7C748(&qword_268757A18, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  uint64_t result = sub_232F7C748(&qword_268757A20, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  a1[3] = result;
  return result;
}

uint64_t sub_232F8090C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F7C748(&qword_268757A10, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  uint64_t result = sub_232F7C748(&qword_268757A18, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232F80990()
{
  return sub_232F7C748(&qword_268757A28, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Condition);
}

uint64_t sub_232F809D8(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757A30, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  a1[2] = sub_232F7C748(&qword_268757A38, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  uint64_t result = sub_232F7C748(&qword_268757A40, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  a1[3] = result;
  return result;
}

uint64_t sub_232F80A84(uint64_t a1)
{
  uint64_t result = sub_232F7C748(&qword_268757830, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232F80ADC()
{
  return sub_232F7C748(&qword_268757A48, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
}

uint64_t sub_232F80B24(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F7C748(&qword_268757A30, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  uint64_t result = sub_232F7C748(&qword_268757A38, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.DiagnosticReport);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232F80BA8(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757A50, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  a1[2] = sub_232F7C748(&qword_268757A58, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  uint64_t result = sub_232F7C748(&qword_268757A60, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  a1[3] = result;
  return result;
}

uint64_t sub_232F80C54(uint64_t a1)
{
  uint64_t result = sub_232F7C748(&qword_268757828, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232F80CAC()
{
  return sub_232F7C748(&qword_268757A68, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
}

uint64_t sub_232F80CF4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F7C748(&qword_268757A50, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  uint64_t result = sub_232F7C748(&qword_268757A58, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Immunization);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232F80D78(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232F81168(a1, a2, a3, (uint64_t (*)(void))sub_232F7CCC0, (uint64_t (*)(void))sub_232F80244, (uint64_t (*)(void))sub_232F80DB8);
}

unint64_t sub_232F80DB8()
{
  unint64_t result = qword_268757A70;
  if (!qword_268757A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757A70);
  }
  return result;
}

unint64_t sub_232F80E10()
{
  unint64_t result = qword_268757A78;
  if (!qword_268757A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757A78);
  }
  return result;
}

uint64_t sub_232F80E64(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757A80, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  a1[2] = sub_232F7C748(&qword_268757A88, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  uint64_t result = sub_232F7C748(&qword_268757A90, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  a1[3] = result;
  return result;
}

uint64_t sub_232F80F10(uint64_t a1)
{
  uint64_t result = sub_232F7C748(&qword_268757820, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232F80F68()
{
  return sub_232F7C748(&qword_268757A98, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
}

uint64_t sub_232F80FB0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232F7C748(&qword_268757A80, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  uint64_t result = sub_232F7C748(&qword_268757A88, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.Observation);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232F81034(void *a1)
{
  a1[1] = sub_232F7C748(&qword_268757920, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
  a1[2] = sub_232F7C748(&qword_2687579D8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
  uint64_t result = sub_232F7C748(&qword_268757AA0, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
  a1[3] = result;
  return result;
}

uint64_t sub_232F810E0()
{
  return sub_232F7C748(&qword_268757AA8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_232F81128(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232F81168(a1, a2, a3, (uint64_t (*)(void))sub_232F811BC, (uint64_t (*)(void))sub_232F81210, (uint64_t (*)(void))sub_232F81264);
}

uint64_t sub_232F81168(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_232F811BC()
{
  unint64_t result = qword_268757AB0;
  if (!qword_268757AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757AB0);
  }
  return result;
}

unint64_t sub_232F81210()
{
  unint64_t result = qword_268757AB8;
  if (!qword_268757AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757AB8);
  }
  return result;
}

unint64_t sub_232F81264()
{
  unint64_t result = qword_268757AC0;
  if (!qword_268757AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757AC0);
  }
  return result;
}

unint64_t sub_232F812B8(uint64_t a1)
{
  unint64_t result = sub_232F7C624();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_232F812E4()
{
  unint64_t result = qword_268757AC8;
  if (!qword_268757AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268757AC8);
  }
  return result;
}

uint64_t sub_232F81338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F81364(a1, a2, a3, (uint64_t (*)(void))sub_232F811BC, (uint64_t (*)(void))sub_232F81210);
}

uint64_t sub_232F81364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2()
{
  return &type metadata for ModelsDSTU2;
}

void *initializeBufferWithCopyOfBuffer for ModelsDSTU2.ResourceProxy(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        uint64_t v10 = a2[2];
        swift_bridgeObjectRetain();
        if (v10 != 1) {
          swift_bridgeObjectRetain();
        }
        a1[2] = v10;
        uint64_t v11 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v12 = v11[6];
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        uint64_t v15 = type metadata accessor for Reference();
        uint64_t v16 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v15 - 8);
        v545 = v11;
        if (v16[6](v14, 1, v15))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          uint64_t v70 = v14[1];
          *uint64_t v13 = *v14;
          v13[1] = v70;
          uint64_t v71 = v14[3];
          void v13[2] = v14[2];
          v13[3] = v71;
          uint64_t v72 = *(int *)(v15 + 24);
          v553 = v13;
          __srca = (void (**)(void *, void, uint64_t, uint64_t))v16;
          v541 = (void *)((char *)v13 + v72);
          char v73 = (void *)((char *)v14 + v72);
          uint64_t v74 = type metadata accessor for Identifier();
          uint64_t v75 = *(void *)(v74 - 8);
          uint64_t v76 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v75 + 48);
          swift_bridgeObjectRetain();
          uint64_t v77 = v73;
          swift_bridgeObjectRetain();
          if (v76(v73, 1, v74))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v541, v73, *(void *)(*(void *)(v78 - 8) + 64));
            uint64_t v79 = __srca;
          }
          else
          {
            uint64_t v105 = v73[1];
            void *v541 = *v73;
            v541[1] = v105;
            uint64_t v106 = v73[3];
            swift_bridgeObjectRetain();
            __dsta = (char *)v73;
            if (v106 == 1)
            {
              *((_OWORD *)v541 + 1) = *((_OWORD *)v73 + 1);
              v541[4] = v73[4];
            }
            else
            {
              v541[2] = v73[2];
              v541[3] = v106;
              v541[4] = v73[4];
              swift_bridgeObjectRetain();
              uint64_t v77 = v73;
              swift_bridgeObjectRetain();
            }
            uint64_t v168 = v74;
            uint64_t v79 = __srca;
            uint64_t v169 = *(int *)(v74 + 24);
            v523 = (char *)v541 + v169;
            uint64_t v170 = (char *)v77 + v169;
            uint64_t v171 = sub_23309AF80();
            uint64_t v172 = *(void *)(v171 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v172 + 48))(v170, 1, v171))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v523, v170, *(void *)(*(void *)(v173 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v523, v170, v171);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v172 + 56))(v523, 0, 1, v171);
            }
            uint64_t v343 = *(int *)(v168 + 28);
            v344 = (void *)((char *)v541 + v343);
            v345 = &__dsta[v343];
            uint64_t v346 = *((void *)v345 + 1);
            void *v344 = *(void *)v345;
            v344[1] = v346;
            v347 = *(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56);
            swift_bridgeObjectRetain();
            v347(v541, 0, 1, v168);
          }
          v79[7](v553, 0, 1, v15);
          uint64_t v11 = v545;
        }
        uint64_t v348 = v11[7];
        v349 = (char *)a1 + v348;
        v350 = (char *)a2 + v348;
        uint64_t v351 = type metadata accessor for FHIRDateTime();
        v544 = *(void **)(v351 - 8);
        v352 = (unsigned int (*)(void, void, void))v544[6];
        __srce = v352;
        if (v352(v350, 1, v351))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v349, v350, *(void *)(*(void *)(v353 - 8) + 64));
        }
        else
        {
          unsigned char *v349 = *v350;
          *((void *)v349 + 1) = *((void *)v350 + 1);
          *((_DWORD *)v349 + 4) = *((_DWORD *)v350 + 4);
          uint64_t v354 = *((void *)v350 + 7);
          if (v354 == 1)
          {
            long long v355 = *(_OWORD *)(v350 + 40);
            *(_OWORD *)(v349 + 24) = *(_OWORD *)(v350 + 24);
            *(_OWORD *)(v349 + 40) = v355;
            *((void *)v349 + 7) = *((void *)v350 + 7);
          }
          else
          {
            v349[24] = v350[24];
            *(_WORD *)(v349 + 25) = *(_WORD *)(v350 + 25);
            *(_OWORD *)(v349 + 28) = *(_OWORD *)(v350 + 28);
            *((_DWORD *)v349 + 11) = *((_DWORD *)v350 + 11);
            *((void *)v349 + 6) = *((void *)v350 + 6);
            *((void *)v349 + 7) = v354;
            swift_bridgeObjectRetain();
          }
          uint64_t v356 = *(int *)(v351 + 28);
          v357 = &v349[v356];
          v358 = &v350[v356];
          uint64_t v359 = sub_23309B300();
          uint64_t v360 = *(void *)(v359 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v360 + 48))(v358, 1, v359))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v357, v358, *(void *)(*(void *)(v361 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v360 + 16))(v357, v358, v359);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v360 + 56))(v357, 0, 1, v359);
          }
          v352 = (unsigned int (*)(void, void, void))__srce;
          uint64_t v362 = *(int *)(v351 + 32);
          v363 = &v349[v362];
          v364 = &v350[v362];
          uint64_t v365 = v364[1];
          void *v363 = *v364;
          v363[1] = v365;
          v366 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
          swift_bridgeObjectRetain();
          v366(v349, 0, 1, v351);
          uint64_t v11 = v545;
        }
        uint64_t v367 = v11[8];
        v368 = (void *)((char *)a1 + v367);
        v369 = (void *)((char *)a2 + v367);
        uint64_t v370 = v369[1];
        void *v368 = *v369;
        v368[1] = v370;
        v368[2] = v369[2];
        uint64_t v371 = v11[9];
        v372 = (char *)a1 + v371;
        v373 = (char *)a2 + v371;
        uint64_t v374 = *(void *)((char *)a2 + v371 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v374 == 1)
        {
          *(_OWORD *)v372 = *(_OWORD *)v373;
          *((void *)v372 + 2) = *((void *)v373 + 2);
        }
        else
        {
          *(void *)v372 = *(void *)v373;
          *((void *)v372 + 1) = v374;
          *((void *)v372 + 2) = *((void *)v373 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v375 = v11[10];
        v376 = (void *)((char *)a1 + v375);
        v377 = (void *)((char *)a2 + v375);
        uint64_t v378 = v377[1];
        void *v376 = *v377;
        v376[1] = v378;
        uint64_t v379 = v11[11];
        v380 = (void *)((char *)a1 + v379);
        v381 = (void *)((char *)a2 + v379);
        uint64_t v382 = v381[1];
        void *v380 = *v381;
        v380[1] = v382;
        uint64_t v383 = v11[12];
        v384 = (char *)a1 + v383;
        v385 = (char *)a2 + v383;
        uint64_t v386 = *(void *)((char *)a2 + v383 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v386 == 1)
        {
          *(_OWORD *)v384 = *(_OWORD *)v385;
          *((void *)v384 + 2) = *((void *)v385 + 2);
        }
        else
        {
          *(void *)v384 = *(void *)v385;
          *((void *)v384 + 1) = v386;
          *((void *)v384 + 2) = *((void *)v385 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)((char *)a1 + v11[13]) = *(void *)((char *)a2 + v11[13]);
        uint64_t v387 = v11[14];
        v388 = (char *)a1 + v387;
        v389 = (char *)a2 + v387;
        swift_bridgeObjectRetain();
        if (v352(v389, 1, v351))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v388, v389, *(void *)(*(void *)(v390 - 8) + 64));
        }
        else
        {
          unsigned char *v388 = *v389;
          *((void *)v388 + 1) = *((void *)v389 + 1);
          *((_DWORD *)v388 + 4) = *((_DWORD *)v389 + 4);
          uint64_t v391 = *((void *)v389 + 7);
          if (v391 == 1)
          {
            long long v392 = *(_OWORD *)(v389 + 40);
            *(_OWORD *)(v388 + 24) = *(_OWORD *)(v389 + 24);
            *(_OWORD *)(v388 + 40) = v392;
            *((void *)v388 + 7) = *((void *)v389 + 7);
          }
          else
          {
            v388[24] = v389[24];
            *(_WORD *)(v388 + 25) = *(_WORD *)(v389 + 25);
            *(_OWORD *)(v388 + 28) = *(_OWORD *)(v389 + 28);
            *((_DWORD *)v388 + 11) = *((_DWORD *)v389 + 11);
            *((void *)v388 + 6) = *((void *)v389 + 6);
            *((void *)v388 + 7) = v391;
            swift_bridgeObjectRetain();
          }
          uint64_t v393 = *(int *)(v351 + 28);
          v394 = &v388[v393];
          v395 = &v389[v393];
          uint64_t v396 = sub_23309B300();
          uint64_t v397 = *(void *)(v396 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v397 + 48))(v395, 1, v396))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v394, v395, *(void *)(*(void *)(v398 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v397 + 16))(v394, v395, v396);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v397 + 56))(v394, 0, 1, v396);
          }
          v352 = (unsigned int (*)(void, void, void))__srce;
          uint64_t v399 = *(int *)(v351 + 32);
          v400 = &v388[v399];
          v401 = &v389[v399];
          uint64_t v402 = v401[1];
          void *v400 = *v401;
          v400[1] = v402;
          v403 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
          swift_bridgeObjectRetain();
          v403(v388, 0, 1, v351);
          uint64_t v11 = v545;
        }
        uint64_t v404 = v11[15];
        v405 = (char *)a1 + v404;
        v406 = (char *)a2 + v404;
        uint64_t v407 = type metadata accessor for Period();
        v525 = *(void **)(v407 - 8);
        v408 = (unsigned int (*)(void, void, void))v525[6];
        if (v408(v406, 1, v407))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v405, v406, *(void *)(*(void *)(v409 - 8) + 64));
        }
        else
        {
          v519 = v408;
          if (v352(v406, 1, v351))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v405, v406, *(void *)(*(void *)(v410 - 8) + 64));
          }
          else
          {
            unsigned char *v405 = *v406;
            *((void *)v405 + 1) = *((void *)v406 + 1);
            *((_DWORD *)v405 + 4) = *((_DWORD *)v406 + 4);
            uint64_t v411 = *((void *)v406 + 7);
            uint64_t v412 = v407;
            if (v411 == 1)
            {
              long long v413 = *(_OWORD *)(v406 + 40);
              *(_OWORD *)(v405 + 24) = *(_OWORD *)(v406 + 24);
              *(_OWORD *)(v405 + 40) = v413;
              *((void *)v405 + 7) = *((void *)v406 + 7);
            }
            else
            {
              v405[24] = v406[24];
              *(_WORD *)(v405 + 25) = *(_WORD *)(v406 + 25);
              *(_OWORD *)(v405 + 28) = *(_OWORD *)(v406 + 28);
              *((_DWORD *)v405 + 11) = *((_DWORD *)v406 + 11);
              *((void *)v405 + 6) = *((void *)v406 + 6);
              *((void *)v405 + 7) = v411;
              swift_bridgeObjectRetain();
            }
            uint64_t v414 = *(int *)(v351 + 28);
            v415 = &v405[v414];
            v416 = &v406[v414];
            uint64_t v417 = sub_23309B300();
            uint64_t v418 = *(void *)(v417 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v418 + 48))(v416, 1, v417))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v415, v416, *(void *)(*(void *)(v419 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v418 + 16))(v415, v416, v417);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v418 + 56))(v415, 0, 1, v417);
            }
            uint64_t v407 = v412;
            uint64_t v420 = *(int *)(v351 + 32);
            v421 = &v405[v420];
            v422 = &v406[v420];
            uint64_t v423 = v422[1];
            void *v421 = *v422;
            v421[1] = v423;
            v352 = (unsigned int (*)(void, void, void))__srce;
            v424 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
            swift_bridgeObjectRetain();
            v424(v405, 0, 1, v351);
            uint64_t v11 = v545;
          }
          uint64_t v425 = *(int *)(v407 + 20);
          v426 = &v405[v425];
          v427 = &v406[v425];
          if (v352(v427, 1, v351))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v426, v427, *(void *)(*(void *)(v428 - 8) + 64));
          }
          else
          {
            unsigned char *v426 = *v427;
            *((void *)v426 + 1) = *((void *)v427 + 1);
            *((_DWORD *)v426 + 4) = *((_DWORD *)v427 + 4);
            uint64_t v429 = *((void *)v427 + 7);
            v514 = (void *)v407;
            if (v429 == 1)
            {
              long long v430 = *(_OWORD *)(v427 + 40);
              *(_OWORD *)(v426 + 24) = *(_OWORD *)(v427 + 24);
              *(_OWORD *)(v426 + 40) = v430;
              *((void *)v426 + 7) = *((void *)v427 + 7);
            }
            else
            {
              v426[24] = v427[24];
              *(_WORD *)(v426 + 25) = *(_WORD *)(v427 + 25);
              *(_OWORD *)(v426 + 28) = *(_OWORD *)(v427 + 28);
              *((_DWORD *)v426 + 11) = *((_DWORD *)v427 + 11);
              *((void *)v426 + 6) = *((void *)v427 + 6);
              *((void *)v426 + 7) = v429;
              swift_bridgeObjectRetain();
            }
            uint64_t v431 = *(int *)(v351 + 28);
            v512 = &v426[v431];
            v432 = &v427[v431];
            uint64_t v433 = sub_23309B300();
            uint64_t v434 = *(void *)(v433 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v512, v432, *(void *)(*(void *)(v435 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v434 + 16))(v512, v432, v433);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v434 + 56))(v512, 0, 1, v433);
            }
            v352 = (unsigned int (*)(void, void, void))__srce;
            uint64_t v407 = (uint64_t)v514;
            uint64_t v436 = *(int *)(v351 + 32);
            v437 = &v426[v436];
            v438 = &v427[v436];
            uint64_t v439 = v438[1];
            void *v437 = *v438;
            v437[1] = v439;
            v440 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
            swift_bridgeObjectRetain();
            v440(v426, 0, 1, v351);
            uint64_t v11 = v545;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v525[7])(v405, 0, 1, v407);
          v408 = v519;
        }
        uint64_t v441 = v11[16];
        v442 = (void *)((char *)a1 + v441);
        v443 = (void *)((char *)a2 + v441);
        uint64_t v444 = v443[1];
        void *v442 = *v443;
        v442[1] = v444;
        uint64_t v445 = v11[17];
        v446 = (char *)a1 + v445;
        v447 = (char *)a2 + v445;
        swift_bridgeObjectRetain();
        if (v352(v447, 1, v351))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v446, v447, *(void *)(*(void *)(v448 - 8) + 64));
        }
        else
        {
          unsigned char *v446 = *v447;
          *((void *)v446 + 1) = *((void *)v447 + 1);
          *((_DWORD *)v446 + 4) = *((_DWORD *)v447 + 4);
          uint64_t v449 = *((void *)v447 + 7);
          v520 = v408;
          uint64_t v450 = v407;
          if (v449 == 1)
          {
            long long v451 = *(_OWORD *)(v447 + 40);
            *(_OWORD *)(v446 + 24) = *(_OWORD *)(v447 + 24);
            *(_OWORD *)(v446 + 40) = v451;
            *((void *)v446 + 7) = *((void *)v447 + 7);
          }
          else
          {
            v446[24] = v447[24];
            *(_WORD *)(v446 + 25) = *(_WORD *)(v447 + 25);
            *(_OWORD *)(v446 + 28) = *(_OWORD *)(v447 + 28);
            *((_DWORD *)v446 + 11) = *((_DWORD *)v447 + 11);
            *((void *)v446 + 6) = *((void *)v447 + 6);
            *((void *)v446 + 7) = v449;
            swift_bridgeObjectRetain();
          }
          uint64_t v452 = *(int *)(v351 + 28);
          v453 = &v446[v452];
          v454 = &v447[v452];
          uint64_t v455 = sub_23309B300();
          uint64_t v456 = *(void *)(v455 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v456 + 48))(v454, 1, v455))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v453, v454, *(void *)(*(void *)(v457 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v456 + 16))(v453, v454, v455);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v456 + 56))(v453, 0, 1, v455);
          }
          uint64_t v407 = v450;
          uint64_t v458 = *(int *)(v351 + 32);
          v459 = &v446[v458];
          v460 = &v447[v458];
          uint64_t v461 = v460[1];
          void *v459 = *v460;
          v459[1] = v461;
          v462 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
          swift_bridgeObjectRetain();
          v462(v446, 0, 1, v351);
          uint64_t v11 = v545;
          v352 = (unsigned int (*)(void, void, void))__srce;
          v408 = v520;
        }
        uint64_t v463 = v11[18];
        v464 = (char *)a1 + v463;
        v465 = (char *)a2 + v463;
        if (v408((char *)a2 + v463, 1, v407))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v464, v465, *(void *)(*(void *)(v466 - 8) + 64));
        }
        else
        {
          if (v352(v465, 1, v351))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v464, v465, *(void *)(*(void *)(v467 - 8) + 64));
          }
          else
          {
            unsigned char *v464 = *v465;
            *((void *)v464 + 1) = *((void *)v465 + 1);
            *((_DWORD *)v464 + 4) = *((_DWORD *)v465 + 4);
            uint64_t v468 = *((void *)v465 + 7);
            uint64_t v469 = v407;
            if (v468 == 1)
            {
              long long v470 = *(_OWORD *)(v465 + 40);
              *(_OWORD *)(v464 + 24) = *(_OWORD *)(v465 + 24);
              *(_OWORD *)(v464 + 40) = v470;
              *((void *)v464 + 7) = *((void *)v465 + 7);
            }
            else
            {
              v464[24] = v465[24];
              *(_WORD *)(v464 + 25) = *(_WORD *)(v465 + 25);
              *(_OWORD *)(v464 + 28) = *(_OWORD *)(v465 + 28);
              *((_DWORD *)v464 + 11) = *((_DWORD *)v465 + 11);
              *((void *)v464 + 6) = *((void *)v465 + 6);
              *((void *)v464 + 7) = v468;
              swift_bridgeObjectRetain();
            }
            uint64_t v471 = *(int *)(v351 + 28);
            v472 = &v464[v471];
            v473 = &v465[v471];
            uint64_t v474 = sub_23309B300();
            uint64_t v475 = *(void *)(v474 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v475 + 48))(v473, 1, v474))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v472, v473, *(void *)(*(void *)(v476 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v475 + 16))(v472, v473, v474);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v475 + 56))(v472, 0, 1, v474);
            }
            v352 = (unsigned int (*)(void, void, void))__srce;
            uint64_t v407 = v469;
            uint64_t v477 = *(int *)(v351 + 32);
            v478 = &v464[v477];
            v479 = &v465[v477];
            uint64_t v480 = v479[1];
            void *v478 = *v479;
            v478[1] = v480;
            v481 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
            swift_bridgeObjectRetain();
            v481(v464, 0, 1, v351);
            uint64_t v11 = v545;
          }
          uint64_t v482 = *(int *)(v407 + 20);
          v483 = &v464[v482];
          v484 = &v465[v482];
          if (v352(v484, 1, v351))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v483, v484, *(void *)(*(void *)(v485 - 8) + 64));
          }
          else
          {
            unsigned char *v483 = *v484;
            *((void *)v483 + 1) = *((void *)v484 + 1);
            *((_DWORD *)v483 + 4) = *((_DWORD *)v484 + 4);
            uint64_t v486 = *((void *)v484 + 7);
            v515 = (void *)v407;
            if (v486 == 1)
            {
              long long v487 = *(_OWORD *)(v484 + 40);
              *(_OWORD *)(v483 + 24) = *(_OWORD *)(v484 + 24);
              *(_OWORD *)(v483 + 40) = v487;
              *((void *)v483 + 7) = *((void *)v484 + 7);
            }
            else
            {
              v483[24] = v484[24];
              *(_WORD *)(v483 + 25) = *(_WORD *)(v484 + 25);
              *(_OWORD *)(v483 + 28) = *(_OWORD *)(v484 + 28);
              *((_DWORD *)v483 + 11) = *((_DWORD *)v484 + 11);
              *((void *)v483 + 6) = *((void *)v484 + 6);
              *((void *)v483 + 7) = v486;
              swift_bridgeObjectRetain();
            }
            uint64_t v488 = *(int *)(v351 + 28);
            v556 = &v483[v488];
            v489 = &v484[v488];
            uint64_t v490 = sub_23309B300();
            uint64_t v491 = *(void *)(v490 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v491 + 48))(v489, 1, v490))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v556, v489, *(void *)(*(void *)(v492 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v491 + 16))(v556, v489, v490);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v491 + 56))(v556, 0, 1, v490);
            }
            uint64_t v493 = *(int *)(v351 + 32);
            v494 = &v483[v493];
            v495 = &v484[v493];
            uint64_t v496 = v495[1];
            void *v494 = *v495;
            v494[1] = v496;
            v497 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v544[7];
            swift_bridgeObjectRetain();
            v497(v483, 0, 1, v351);
            uint64_t v407 = (uint64_t)v515;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v525[7])(v464, 0, 1, v407);
        }
        uint64_t v498 = v11[19];
        v499 = (void *)((char *)a1 + v498);
        v500 = (void *)((char *)a2 + v498);
        uint64_t v501 = v500[1];
        void *v499 = *v500;
        v499[1] = v501;
        uint64_t v502 = v11[20];
        v503 = (void *)((char *)a1 + v502);
        v504 = (void *)((char *)a2 + v502);
        uint64_t v505 = v504[1];
        void *v503 = *v504;
        v503[1] = v505;
        uint64_t v506 = v11[21];
        v507 = (void *)((char *)a1 + v506);
        v508 = (void *)((char *)a2 + v506);
        uint64_t v509 = v508[1];
        void *v507 = *v508;
        v507[1] = v509;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        uint64_t v19 = a2[3];
        a1[2] = a2[2];
        a1[3] = v19;
        uint64_t v20 = a2[5];
        a1[4] = a2[4];
        a1[5] = v20;
        uint64_t v21 = a2[7];
        a1[6] = a2[6];
        a1[7] = v21;
        uint64_t v22 = a2[9];
        a1[8] = a2[8];
        a1[9] = v22;
        a1[10] = a2[10];
        v539 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        v546 = a1;
        uint64_t v23 = v539[9];
        __dst = (char *)a1 + v23;
        v551 = (char *)a2;
        uint64_t v24 = (char *)a2 + v23;
        uint64_t v25 = type metadata accessor for FHIRDateTime();
        __src = *(void **)(v25 - 8);
        uint64_t v26 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__src[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26(v24, 1, v25))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
          uint64_t v29 = v539;
          a1 = v546;
        }
        else
        {
          unsigned char *__dst = *v24;
          *((void *)__dst + 1) = *((void *)v24 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v24 + 4);
          uint64_t v80 = *((void *)v24 + 7);
          if (v80 == 1)
          {
            long long v81 = *(_OWORD *)(v24 + 40);
            *(_OWORD *)(__dst + 24) = *(_OWORD *)(v24 + 24);
            *(_OWORD *)(__dst + 40) = v81;
            *((void *)__dst + 7) = *((void *)v24 + 7);
          }
          else
          {
            __dst[24] = v24[24];
            *(_WORD *)(__dst + 25) = *(_WORD *)(v24 + 25);
            *(_OWORD *)(__dst + 28) = *(_OWORD *)(v24 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v24 + 11);
            *((void *)__dst + 6) = *((void *)v24 + 6);
            *((void *)__dst + 7) = v80;
            swift_bridgeObjectRetain();
          }
          a1 = v546;
          uint64_t v86 = v25;
          uint64_t v87 = *(int *)(v25 + 28);
          BOOL v88 = &__dst[v87];
          uint64_t v89 = v27;
          uint64_t v90 = &v27[v87];
          uint64_t v91 = sub_23309B300();
          uint64_t v92 = *(void *)(v91 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v88, v90, *(void *)(*(void *)(v93 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v92 + 16))(v88, v90, v91);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v92 + 56))(v88, 0, 1, v91);
          }
          uint64_t v25 = v86;
          uint64_t v107 = *(int *)(v86 + 32);
          uint64_t v108 = &__dst[v107];
          uint64_t v109 = &v89[v107];
          uint64_t v110 = v109[1];
          *uint64_t v108 = *v109;
          v108[1] = v110;
          uint64_t v111 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
          swift_bridgeObjectRetain();
          v111(__dst, 0, 1, v25);
          uint64_t v29 = v539;
        }
        uint64_t v112 = v29[10];
        uint64_t v113 = (char *)a1 + v112;
        uint64_t v114 = (char *)a2 + v112;
        uint64_t v115 = type metadata accessor for Period();
        uint64_t v116 = *(void *)(v115 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          if (v26(v114, 1, v25))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v113, v114, *(void *)(*(void *)(v118 - 8) + 64));
          }
          else
          {
            *uint64_t v113 = *v114;
            *((void *)v113 + 1) = *((void *)v114 + 1);
            *((_DWORD *)v113 + 4) = *((_DWORD *)v114 + 4);
            uint64_t v161 = *((void *)v114 + 7);
            v522 = v26;
            if (v161 == 1)
            {
              long long v162 = *(_OWORD *)(v114 + 40);
              *(_OWORD *)(v113 + 24) = *(_OWORD *)(v114 + 24);
              *(_OWORD *)(v113 + 40) = v162;
              *((void *)v113 + 7) = *((void *)v114 + 7);
            }
            else
            {
              v113[24] = v114[24];
              *(_WORD *)(v113 + 25) = *(_WORD *)(v114 + 25);
              *(_OWORD *)(v113 + 28) = *(_OWORD *)(v114 + 28);
              *((_DWORD *)v113 + 11) = *((_DWORD *)v114 + 11);
              *((void *)v113 + 6) = *((void *)v114 + 6);
              *((void *)v113 + 7) = v161;
              swift_bridgeObjectRetain();
            }
            uint64_t v174 = v25;
            uint64_t v175 = *(int *)(v25 + 28);
            uint64_t v176 = &v113[v175];
            v177 = &v114[v175];
            uint64_t v178 = sub_23309B300();
            uint64_t v179 = *(void *)(v178 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v179 + 16))(v176, v177, v178);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
            }
            uint64_t v25 = v174;
            uint64_t v192 = *(int *)(v174 + 32);
            uint64_t v193 = &v113[v192];
            uint64_t v194 = &v114[v192];
            uint64_t v195 = v194[1];
            *uint64_t v193 = *v194;
            v193[1] = v195;
            uint64_t v196 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
            swift_bridgeObjectRetain();
            v196(v113, 0, 1, v174);
            uint64_t v29 = v539;
            uint64_t v26 = v522;
          }
          uint64_t v197 = *(int *)(v115 + 20);
          uint64_t v198 = &v113[v197];
          uint64_t v199 = &v114[v197];
          if (v26(v199, 1, v25))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
          }
          else
          {
            *uint64_t v198 = *v199;
            *((void *)v198 + 1) = *((void *)v199 + 1);
            *((_DWORD *)v198 + 4) = *((_DWORD *)v199 + 4);
            uint64_t v201 = *((void *)v199 + 7);
            v524 = v26;
            if (v201 == 1)
            {
              long long v202 = *(_OWORD *)(v199 + 40);
              *(_OWORD *)(v198 + 24) = *(_OWORD *)(v199 + 24);
              *(_OWORD *)(v198 + 40) = v202;
              *((void *)v198 + 7) = *((void *)v199 + 7);
            }
            else
            {
              v198[24] = v199[24];
              *(_WORD *)(v198 + 25) = *(_WORD *)(v199 + 25);
              *(_OWORD *)(v198 + 28) = *(_OWORD *)(v199 + 28);
              *((_DWORD *)v198 + 11) = *((_DWORD *)v199 + 11);
              *((void *)v198 + 6) = *((void *)v199 + 6);
              *((void *)v198 + 7) = v201;
              swift_bridgeObjectRetain();
            }
            __dstd = (int *)v25;
            uint64_t v203 = *(int *)(v25 + 28);
            uint64_t v204 = &v198[v203];
            uint64_t v205 = &v199[v203];
            uint64_t v206 = sub_23309B300();
            uint64_t v207 = *(void *)(v206 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v204, v205, *(void *)(*(void *)(v208 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v207 + 16))(v204, v205, v206);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
            }
            uint64_t v25 = (uint64_t)__dstd;
            uint64_t v255 = __dstd[8];
            v256 = &v198[v255];
            v257 = &v199[v255];
            uint64_t v258 = v257[1];
            void *v256 = *v257;
            v256[1] = v258;
            v259 = (void (*)(unsigned char *, void, uint64_t, int *))__src[7];
            swift_bridgeObjectRetain();
            v259(v198, 0, 1, __dstd);
            uint64_t v29 = v539;
            uint64_t v26 = v524;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
        }
        uint64_t v260 = v29[11];
        v261 = (char *)a1 + v260;
        v262 = &v551[v260];
        if (v26(&v551[v260], 1, v25))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v261, v262, *(void *)(*(void *)(v263 - 8) + 64));
          v264 = v551;
        }
        else
        {
          char *v261 = *v262;
          *((void *)v261 + 1) = *((void *)v262 + 1);
          *((_DWORD *)v261 + 4) = *((_DWORD *)v262 + 4);
          uint64_t v265 = *((void *)v262 + 7);
          if (v265 == 1)
          {
            long long v266 = *(_OWORD *)(v262 + 40);
            *(_OWORD *)(v261 + 24) = *(_OWORD *)(v262 + 24);
            *(_OWORD *)(v261 + 40) = v266;
            *((void *)v261 + 7) = *((void *)v262 + 7);
          }
          else
          {
            v261[24] = v262[24];
            *(_WORD *)(v261 + 25) = *(_WORD *)(v262 + 25);
            *(_OWORD *)(v261 + 28) = *(_OWORD *)(v262 + 28);
            *((_DWORD *)v261 + 11) = *((_DWORD *)v262 + 11);
            *((void *)v261 + 6) = *((void *)v262 + 6);
            *((void *)v261 + 7) = v265;
            swift_bridgeObjectRetain();
          }
          v264 = v551;
          uint64_t v267 = v25;
          uint64_t v268 = *(int *)(v25 + 28);
          v269 = &v261[v268];
          v270 = &v262[v268];
          uint64_t v271 = sub_23309B300();
          uint64_t v272 = *(void *)(v271 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v269, v270, *(void *)(*(void *)(v273 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v269, v270, v271);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v269, 0, 1, v271);
          }
          uint64_t v274 = *(int *)(v267 + 32);
          v275 = &v261[v274];
          v276 = &v262[v274];
          uint64_t v277 = *((void *)v276 + 1);
          *(void *)v275 = *(void *)v276;
          *((void *)v275 + 1) = v277;
          v278 = (void (*)(char *, void, uint64_t, uint64_t))__src[7];
          swift_bridgeObjectRetain();
          v278(v261, 0, 1, v267);
        }
        uint64_t v279 = v29[12];
        v280 = (void *)((char *)a1 + v279);
        v281 = &v264[v279];
        uint64_t v282 = *((void *)v281 + 1);
        void *v280 = *(void *)v281;
        v280[1] = v282;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v30 = a2[1];
        *a1 = *a2;
        a1[1] = v30;
        uint64_t v31 = a2[3];
        a1[2] = a2[2];
        a1[3] = v31;
        uint64_t v32 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v33 = a2[5];
        uint64_t v34 = a2[6];
        a1[4] = v32;
        a1[5] = v33;
        a1[6] = v34;
        uint64_t v35 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v36 = v35[8];
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = type metadata accessor for FHIRDateTime();
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v41 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48);
        swift_bridgeObjectRetain();
        if (v41(v38, 1, v39))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          *uint64_t v37 = *v38;
          *((void *)v37 + 1) = *((void *)v38 + 1);
          *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
          uint64_t v82 = *((void *)v38 + 7);
          if (v82 == 1)
          {
            long long v83 = *(_OWORD *)(v38 + 40);
            *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
            *(_OWORD *)(v37 + 40) = v83;
            *((void *)v37 + 7) = *((void *)v38 + 7);
          }
          else
          {
            v37[24] = v38[24];
            *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
            *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
            *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
            *((void *)v37 + 6) = *((void *)v38 + 6);
            *((void *)v37 + 7) = v82;
            swift_bridgeObjectRetain();
          }
          uint64_t v94 = *(int *)(v39 + 28);
          v548 = &v37[v94];
          uint64_t v95 = &v38[v94];
          uint64_t v96 = sub_23309B300();
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v548, v95, *(void *)(*(void *)(v98 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 16))(v548, v95, v96);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56))(v548, 0, 1, v96);
          }
          uint64_t v119 = *(int *)(v39 + 32);
          uint64_t v120 = &v37[v119];
          uint64_t v121 = &v38[v119];
          uint64_t v122 = v121[1];
          *uint64_t v120 = *v121;
          v120[1] = v122;
          uint64_t v123 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56);
          swift_bridgeObjectRetain();
          v123(v37, 0, 1, v39);
        }
        uint64_t v124 = v35[9];
        BOOL v125 = (void *)((char *)a1 + v124);
        uint64_t v126 = (void *)((char *)a2 + v124);
        *BOOL v125 = *v126;
        *(void *)((char *)v125 + 5) = *(void *)((char *)v126 + 5);
        *(void *)((char *)a1 + v35[10]) = *(void *)((char *)a2 + v35[10]);
        *((unsigned char *)a1 + v35[11]) = *((unsigned char *)a2 + v35[11]);
        *(void *)((char *)a1 + v35[12]) = *(void *)((char *)a2 + v35[12]);
        uint64_t v127 = v35[13];
        uint64_t v128 = (void *)((char *)a1 + v127);
        char v129 = (void *)((char *)a2 + v127);
        uint64_t v130 = v35;
        uint64_t v131 = v129[1];
        *uint64_t v128 = *v129;
        v128[1] = v131;
        v128[2] = v129[2];
        *((unsigned char *)a1 + v130[14]) = *((unsigned char *)a2 + v130[14]);
        v549 = a1;
        v554 = v130;
        uint64_t v132 = v130[15];
        uint64_t v133 = (void *)((char *)a1 + v132);
        uint64_t v134 = (void *)((char *)a2 + v132);
        uint64_t v135 = type metadata accessor for Reference();
        v542 = *(void **)(v135 - 8);
        uint64_t v136 = (unsigned int (*)(void, void, void))v542[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v136(v134, 1, v135))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
          a1 = v549;
          uint64_t v138 = v554;
        }
        else
        {
          v521 = v136;
          __dstb = v133;
          uint64_t v139 = v134[1];
          *uint64_t v133 = *v134;
          v133[1] = v139;
          uint64_t v140 = v134[3];
          v133[2] = v134[2];
          v133[3] = v140;
          uint64_t v141 = *(int *)(v135 + 24);
          uint64_t v142 = (void *)((char *)v133 + v141);
          uint64_t v143 = (void *)((char *)v134 + v141);
          uint64_t v144 = type metadata accessor for Identifier();
          uint64_t v145 = *(void **)(v144 - 8);
          uint64_t v146 = (unsigned int (*)(void *, uint64_t, uint64_t))v145[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v146(v143, 1, v144))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v142, v143, *(void *)(*(void *)(v147 - 8) + 64));
            uint64_t v148 = __dstb;
            uint64_t v136 = (unsigned int (*)(void, void, void))v521;
            a1 = v549;
            uint64_t v138 = v554;
          }
          else
          {
            v513 = v145;
            uint64_t v516 = v144;
            uint64_t v163 = v143[1];
            *uint64_t v142 = *v143;
            v142[1] = v163;
            uint64_t v164 = v143[3];
            swift_bridgeObjectRetain();
            char v165 = v142;
            a1 = v549;
            uint64_t v138 = v554;
            if (v164 == 1)
            {
              *((_OWORD *)v165 + 1) = *((_OWORD *)v143 + 1);
              v165[4] = v143[4];
            }
            else
            {
              v165[2] = v143[2];
              v165[3] = v164;
              v165[4] = v143[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v136 = (unsigned int (*)(void, void, void))v521;
            uint64_t v181 = *(int *)(v516 + 24);
            __srcb = (char *)v165;
            v511 = (char *)v165 + v181;
            char v182 = (char *)v143 + v181;
            uint64_t v183 = sub_23309AF80();
            uint64_t v184 = *(void *)(v183 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v511, v182, *(void *)(*(void *)(v185 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v184 + 16))(v511, v182, v183);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v184 + 56))(v511, 0, 1, v183);
            }
            uint64_t v209 = *(int *)(v516 + 28);
            uint64_t v210 = &__srcb[v209];
            uint64_t v211 = (void *)((char *)v143 + v209);
            uint64_t v212 = v211[1];
            *(void *)uint64_t v210 = *v211;
            *((void *)v210 + 1) = v212;
            uint64_t v213 = (void (*)(char *, void, uint64_t, uint64_t))v513[7];
            swift_bridgeObjectRetain();
            v213(__srcb, 0, 1, v516);
            uint64_t v148 = __dstb;
          }
          ((void (*)(void *, void, uint64_t, uint64_t))v542[7])(v148, 0, 1, v135);
        }
        uint64_t v214 = v138[16];
        uint64_t v215 = (void *)((char *)a1 + v214);
        uint64_t v216 = (void *)((char *)a2 + v214);
        uint64_t v217 = v216[1];
        *uint64_t v215 = *v216;
        v215[1] = v217;
        uint64_t v218 = v138[17];
        uint64_t v219 = (void *)((char *)a1 + v218);
        uint64_t v220 = (void *)((char *)a2 + v218);
        swift_bridgeObjectRetain();
        if (v136(v220, 1, v135))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v219, v220, *(void *)(*(void *)(v221 - 8) + 64));
        }
        else
        {
          uint64_t v222 = v220[1];
          *uint64_t v219 = *v220;
          v219[1] = v222;
          uint64_t v223 = v220[3];
          v219[2] = v220[2];
          v219[3] = v223;
          __srcc = (void *)v135;
          uint64_t v224 = *(int *)(v135 + 24);
          v550 = (void *)((char *)v219 + v224);
          v225 = (void *)((char *)v220 + v224);
          uint64_t v226 = type metadata accessor for Identifier();
          uint64_t v227 = *(void *)(v226 - 8);
          uint64_t v228 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v227 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v228(v225, 1, v226))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v550, v225, *(void *)(*(void *)(v229 - 8) + 64));
            uint64_t v230 = __srcc;
          }
          else
          {
            uint64_t v517 = v227;
            uint64_t v231 = v225[1];
            void *v550 = *v225;
            v550[1] = v231;
            uint64_t v232 = v225[3];
            swift_bridgeObjectRetain();
            __dste = (char *)v225;
            if (v232 == 1)
            {
              *((_OWORD *)v550 + 1) = *((_OWORD *)v225 + 1);
              v550[4] = v225[4];
            }
            else
            {
              v550[2] = v225[2];
              v550[3] = v232;
              v550[4] = v225[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v230 = __srcc;
            uint64_t v233 = *(int *)(v226 + 24);
            uint64_t v234 = (char *)v550 + v233;
            v235 = (char *)v225 + v233;
            uint64_t v236 = sub_23309AF80();
            uint64_t v237 = *(void *)(v236 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48))(v235, 1, v236))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v234, v235, *(void *)(*(void *)(v238 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v237 + 16))(v234, v235, v236);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v237 + 56))(v234, 0, 1, v236);
            }
            uint64_t v283 = *(int *)(v226 + 28);
            v284 = (void *)((char *)v550 + v283);
            v285 = &__dste[v283];
            uint64_t v286 = *((void *)v285 + 1);
            void *v284 = *(void *)v285;
            v284[1] = v286;
            v287 = *(void (**)(void *, void, uint64_t, uint64_t))(v517 + 56);
            swift_bridgeObjectRetain();
            v287(v550, 0, 1, v226);
          }
          ((void (*)(void *, void, uint64_t, void *))v542[7])(v219, 0, 1, v230);
          uint64_t v138 = v554;
        }
        uint64_t v288 = v138[18];
        v289 = (void *)((char *)a1 + v288);
        v290 = (void *)((char *)a2 + v288);
        uint64_t v291 = v290[1];
        void *v289 = *v290;
        v289[1] = v291;
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v43 = a2[1];
        *a1 = *a2;
        a1[1] = v43;
        uint64_t v44 = a2[3];
        a1[2] = a2[2];
        a1[3] = v44;
        uint64_t v45 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v45 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v47 = a2[5];
        uint64_t v46 = a2[6];
        a1[4] = v45;
        a1[5] = v47;
        a1[6] = v46;
        uint64_t v48 = a2[8];
        swift_bridgeObjectRetain();
        if (v48 == 1)
        {
          *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
          a1[9] = a2[9];
        }
        else
        {
          a1[7] = a2[7];
          a1[8] = v48;
          a1[9] = a2[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v59 = a2[11];
        a1[10] = a2[10];
        a1[11] = v59;
        uint64_t v60 = a2[13];
        a1[12] = a2[12];
        a1[13] = v60;
        a1[14] = a2[14];
        uint64_t v61 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v62 = v61[11];
        uint64_t v63 = (char *)a1 + v62;
        uint64_t v64 = (char *)a2 + v62;
        uint64_t v65 = type metadata accessor for FHIRDateTime();
        v540 = *(void **)(v65 - 8);
        uint64_t v66 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v540[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v552 = v66;
        v547 = v61;
        if (v66(v64, 1, v65))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          uint64_t v68 = v540;
        }
        else
        {
          unsigned char *v63 = *v64;
          *((void *)v63 + 1) = *((void *)v64 + 1);
          *((_DWORD *)v63 + 4) = *((_DWORD *)v64 + 4);
          uint64_t v84 = *((void *)v64 + 7);
          if (v84 == 1)
          {
            long long v85 = *(_OWORD *)(v64 + 40);
            *(_OWORD *)(v63 + 24) = *(_OWORD *)(v64 + 24);
            *(_OWORD *)(v63 + 40) = v85;
            *((void *)v63 + 7) = *((void *)v64 + 7);
          }
          else
          {
            v63[24] = v64[24];
            *(_WORD *)(v63 + 25) = *(_WORD *)(v64 + 25);
            *(_OWORD *)(v63 + 28) = *(_OWORD *)(v64 + 28);
            *((_DWORD *)v63 + 11) = *((_DWORD *)v64 + 11);
            *((void *)v63 + 6) = *((void *)v64 + 6);
            *((void *)v63 + 7) = v84;
            swift_bridgeObjectRetain();
          }
          uint64_t v99 = *(int *)(v65 + 28);
          uint64_t v100 = &v63[v99];
          char v101 = &v64[v99];
          uint64_t v102 = sub_23309B300();
          uint64_t v103 = *(void *)(v102 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v103 + 16))(v100, v101, v102);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
          }
          uint64_t v61 = v547;
          uint64_t v149 = *(int *)(v65 + 32);
          uint64_t v150 = &v63[v149];
          uint64_t v151 = &v64[v149];
          uint64_t v152 = v151[1];
          *uint64_t v150 = *v151;
          v150[1] = v152;
          uint64_t v153 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v540[7];
          swift_bridgeObjectRetain();
          v153(v63, 0, 1, v65);
          uint64_t v68 = v540;
        }
        uint64_t v154 = v61[12];
        uint64_t v155 = (char *)a1 + v154;
        uint64_t v156 = (char *)a2 + v154;
        uint64_t v157 = type metadata accessor for Period();
        uint64_t v158 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v157 - 8);
        if (v158[6](v156, 1, v157))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v155, v156, *(void *)(*(void *)(v159 - 8) + 64));
        }
        else
        {
          __dstc = v158;
          if (v552(v156, 1, v65))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v155, v156, *(void *)(*(void *)(v160 - 8) + 64));
          }
          else
          {
            *uint64_t v155 = *v156;
            *((void *)v155 + 1) = *((void *)v156 + 1);
            *((_DWORD *)v155 + 4) = *((_DWORD *)v156 + 4);
            uint64_t v166 = *((void *)v156 + 7);
            if (v166 == 1)
            {
              long long v167 = *(_OWORD *)(v156 + 40);
              *(_OWORD *)(v155 + 24) = *(_OWORD *)(v156 + 24);
              *(_OWORD *)(v155 + 40) = v167;
              *((void *)v155 + 7) = *((void *)v156 + 7);
            }
            else
            {
              v155[24] = v156[24];
              *(_WORD *)(v155 + 25) = *(_WORD *)(v156 + 25);
              *(_OWORD *)(v155 + 28) = *(_OWORD *)(v156 + 28);
              *((_DWORD *)v155 + 11) = *((_DWORD *)v156 + 11);
              *((void *)v155 + 6) = *((void *)v156 + 6);
              *((void *)v155 + 7) = v166;
              swift_bridgeObjectRetain();
            }
            uint64_t v186 = *(int *)(v65 + 28);
            uint64_t v187 = &v155[v186];
            uint64_t v188 = &v156[v186];
            uint64_t v189 = sub_23309B300();
            uint64_t v190 = *(void *)(v189 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v187, v188, *(void *)(*(void *)(v191 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v190 + 16))(v187, v188, v189);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v190 + 56))(v187, 0, 1, v189);
            }
            uint64_t v239 = *(int *)(v65 + 32);
            uint64_t v240 = &v155[v239];
            long long v241 = &v156[v239];
            uint64_t v242 = v241[1];
            *uint64_t v240 = *v241;
            v240[1] = v242;
            uint64_t v243 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v540[7];
            swift_bridgeObjectRetain();
            v243(v155, 0, 1, v65);
            uint64_t v68 = v540;
            uint64_t v61 = v547;
          }
          uint64_t v244 = *(int *)(v157 + 20);
          v245 = &v155[v244];
          v246 = &v156[v244];
          if (v552(v246, 1, v65))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v245, v246, *(void *)(*(void *)(v247 - 8) + 64));
          }
          else
          {
            unsigned char *v245 = *v246;
            *((void *)v245 + 1) = *((void *)v246 + 1);
            *((_DWORD *)v245 + 4) = *((_DWORD *)v246 + 4);
            uint64_t v248 = *((void *)v246 + 7);
            if (v248 == 1)
            {
              long long v249 = *(_OWORD *)(v246 + 40);
              *(_OWORD *)(v245 + 24) = *(_OWORD *)(v246 + 24);
              *(_OWORD *)(v245 + 40) = v249;
              *((void *)v245 + 7) = *((void *)v246 + 7);
            }
            else
            {
              v245[24] = v246[24];
              *(_WORD *)(v245 + 25) = *(_WORD *)(v246 + 25);
              *(_OWORD *)(v245 + 28) = *(_OWORD *)(v246 + 28);
              *((_DWORD *)v245 + 11) = *((_DWORD *)v246 + 11);
              *((void *)v245 + 6) = *((void *)v246 + 6);
              *((void *)v245 + 7) = v248;
              swift_bridgeObjectRetain();
            }
            uint64_t v250 = *(int *)(v65 + 28);
            v518 = &v245[v250];
            v251 = &v246[v250];
            uint64_t v252 = sub_23309B300();
            uint64_t v253 = *(void *)(v252 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v253 + 48))(v251, 1, v252))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v518, v251, *(void *)(*(void *)(v254 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v253 + 16))(v518, v251, v252);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v253 + 56))(v518, 0, 1, v252);
            }
            uint64_t v61 = v547;
            uint64_t v292 = *(int *)(v65 + 32);
            v293 = &v245[v292];
            v294 = &v246[v292];
            uint64_t v295 = v294[1];
            void *v293 = *v294;
            v293[1] = v295;
            v296 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v540[7];
            swift_bridgeObjectRetain();
            v296(v245, 0, 1, v65);
            uint64_t v68 = v540;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))__dstc + 7))(v155, 0, 1, v157);
        }
        uint64_t v297 = v61[13];
        v298 = (char *)a1 + v297;
        v299 = (char *)a2 + v297;
        if (v552((unsigned char *)a2 + v297, 1, v65))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v298, v299, *(void *)(*(void *)(v300 - 8) + 64));
        }
        else
        {
          unsigned char *v298 = *v299;
          *((void *)v298 + 1) = *((void *)v299 + 1);
          *((_DWORD *)v298 + 4) = *((_DWORD *)v299 + 4);
          uint64_t v301 = *((void *)v299 + 7);
          if (v301 == 1)
          {
            long long v302 = *(_OWORD *)(v299 + 40);
            *(_OWORD *)(v298 + 24) = *(_OWORD *)(v299 + 24);
            *(_OWORD *)(v298 + 40) = v302;
            *((void *)v298 + 7) = *((void *)v299 + 7);
          }
          else
          {
            v298[24] = v299[24];
            *(_WORD *)(v298 + 25) = *(_WORD *)(v299 + 25);
            *(_OWORD *)(v298 + 28) = *(_OWORD *)(v299 + 28);
            *((_DWORD *)v298 + 11) = *((_DWORD *)v299 + 11);
            *((void *)v298 + 6) = *((void *)v299 + 6);
            *((void *)v298 + 7) = v301;
            swift_bridgeObjectRetain();
          }
          uint64_t v303 = *(int *)(v65 + 28);
          v304 = &v298[v303];
          v305 = &v299[v303];
          uint64_t v306 = sub_23309B300();
          uint64_t v307 = *(void *)(v306 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v307 + 48))(v305, 1, v306))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v304, v305, *(void *)(*(void *)(v308 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v307 + 16))(v304, v305, v306);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v307 + 56))(v304, 0, 1, v306);
          }
          uint64_t v61 = v547;
          uint64_t v309 = *(int *)(v65 + 32);
          v310 = &v298[v309];
          v311 = &v299[v309];
          uint64_t v312 = v311[1];
          void *v310 = *v311;
          v310[1] = v312;
          v313 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v68[7];
          swift_bridgeObjectRetain();
          v313(v298, 0, 1, v65);
        }
        *(void *)((char *)a1 + v61[14]) = *(void *)((char *)a2 + v61[14]);
        uint64_t v314 = v61[15];
        v315 = (void *)((char *)a1 + v314);
        v316 = (void *)((char *)a2 + v314);
        uint64_t v317 = v316[1];
        void *v315 = *v316;
        v315[1] = v317;
        uint64_t v318 = v61[16];
        v319 = (char *)a1 + v318;
        v320 = (char *)a2 + v318;
        uint64_t v321 = *(void *)((char *)a2 + v318 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v321 == 1)
        {
          *(_OWORD *)v319 = *(_OWORD *)v320;
          *((void *)v319 + 2) = *((void *)v320 + 2);
        }
        else
        {
          *(void *)v319 = *(void *)v320;
          *((void *)v319 + 1) = v321;
          *((void *)v319 + 2) = *((void *)v320 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v322 = v61[17];
        v323 = (void *)((char *)a1 + v322);
        v324 = (void *)((char *)a2 + v322);
        uint64_t v325 = type metadata accessor for Quantity();
        v326 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v325 - 8);
        if (v326[6](v324, 1, v325))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v323, v324, *(void *)(*(void *)(v327 - 8) + 64));
        }
        else
        {
          v555 = v326;
          *(_OWORD *)v323 = *(_OWORD *)v324;
          *(void *)((char *)v323 + 13) = *(void *)((char *)v324 + 13);
          uint64_t v328 = v324[4];
          v323[3] = v324[3];
          v323[4] = v328;
          uint64_t v329 = v324[6];
          v323[5] = v324[5];
          v323[6] = v329;
          uint64_t v330 = *(int *)(v325 + 28);
          __srcd = (char *)v324 + v330;
          v543 = (char *)v323 + v330;
          uint64_t v331 = sub_23309AF80();
          uint64_t v332 = *(void *)(v331 - 8);
          __dstf = *(unsigned int (**)(char *, uint64_t, uint64_t))(v332 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__dstf(__srcd, 1, v331))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v543, __srcd, *(void *)(*(void *)(v333 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v332 + 16))(v543, __srcd, v331);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v332 + 56))(v543, 0, 1, v331);
          }
          uint64_t v334 = *(int *)(v325 + 32);
          v335 = (void *)((char *)v323 + v334);
          v336 = (void *)((char *)v324 + v334);
          uint64_t v337 = v336[1];
          void *v335 = *v336;
          v335[1] = v337;
          v338 = (void (*)(void *, void, uint64_t, uint64_t))v555[7];
          swift_bridgeObjectRetain();
          v338(v323, 0, 1, v325);
          uint64_t v61 = v547;
        }
        *(void *)((char *)a1 + v61[18]) = *(void *)((char *)a2 + v61[18]);
        uint64_t v339 = v61[19];
        v340 = (void *)((char *)a1 + v339);
        v341 = (void *)((char *)a2 + v339);
        uint64_t v342 = v341[1];
        void *v340 = *v341;
        v340[1] = v342;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v49 = a2[1];
        *a1 = *a2;
        a1[1] = v49;
        uint64_t v50 = a2[3];
        a1[2] = a2[2];
        a1[3] = v50;
        a1[4] = a2[4];
        *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
        uint64_t v51 = a2[7];
        a1[6] = a2[6];
        a1[7] = v51;
        uint64_t v52 = a2[9];
        a1[8] = a2[8];
        a1[9] = v52;
        uint64_t v53 = a2[11];
        a1[10] = a2[10];
        a1[11] = v53;
        uint64_t v54 = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v54 == 1)
        {
          *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
          a1[14] = a2[14];
        }
        else
        {
          a1[12] = a2[12];
          a1[13] = v54;
          a1[14] = a2[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v69 = a2[16];
        a1[15] = a2[15];
        a1[16] = v69;
        a1[17] = a2[17];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v55 = a2[1];
        *a1 = *a2;
        a1[1] = v55;
        uint64_t v56 = a2[3];
        a1[2] = a2[2];
        a1[3] = v56;
        uint64_t v57 = a2[4];
        uint64_t v58 = a2[5];
        a1[4] = v57;
        a1[5] = v58;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = a2[3];
        a1[2] = a2[2];
        a1[3] = v7;
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.ResourceProxy(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 6:
      goto LABEL_2;
    case 1:
      swift_bridgeObjectRelease();
      if (a1[2] != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v3 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
      uint64_t v4 = (char *)a1 + v3[6];
      uint64_t v5 = type metadata accessor for Reference();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v6 = &v4[*(int *)(v5 + 24)];
        uint64_t v7 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v6 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v8 = &v6[*(int *)(v7 + 24)];
          uint64_t v9 = sub_23309AF80();
          uint64_t v10 = *(void *)(v9 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v11 = (char *)a1 + v3[7];
      uint64_t v12 = type metadata accessor for FHIRDateTime();
      uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
      if (!v13(v11, 1, v12))
      {
        if (*((void *)v11 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v14 = &v11[*(int *)(v12 + 28)];
        uint64_t v15 = sub_23309B300();
        uint64_t v16 = *(void *)(v15 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
          (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)((char *)a1 + v3[9] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)((char *)a1 + v3[12] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = (char *)a1 + v3[14];
      if (!v13(v17, 1, v12))
      {
        if (*((void *)v17 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v18 = &v17[*(int *)(v12 + 28)];
        uint64_t v19 = sub_23309B300();
        uint64_t v20 = *(void *)(v19 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
          (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v21 = (char *)a1 + v3[15];
      uint64_t v22 = type metadata accessor for Period();
      uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48);
      if (!v23(v21, 1, v22))
      {
        if (!v13(v21, 1, v12))
        {
          if (*((void *)v21 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v24 = &v21[*(int *)(v12 + 28)];
          uint64_t v25 = sub_23309B300();
          uint64_t v106 = *(void *)(v25 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v24, 1, v25)) {
            (*(void (**)(char *, uint64_t))(v106 + 8))(v24, v25);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v26 = &v21[*(int *)(v22 + 20)];
        if (!v13(v26, 1, v12))
        {
          if (*((void *)v26 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v27 = &v26[*(int *)(v12 + 28)];
          uint64_t v28 = sub_23309B300();
          uint64_t v107 = *(void *)(v28 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v27, 1, v28)) {
            (*(void (**)(char *, uint64_t))(v107 + 8))(v27, v28);
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v29 = (char *)a1 + v3[17];
      if (!v13(v29, 1, v12))
      {
        uint64_t v108 = v13;
        if (*((void *)v29 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v30 = &v29[*(int *)(v12 + 28)];
        uint64_t v31 = sub_23309B300();
        uint64_t v32 = *(void *)(v31 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
          (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v108;
      }
      uint64_t v33 = (char *)a1 + v3[18];
      if (!v23(v33, 1, v22))
      {
        if (!v13(v33, 1, v12))
        {
          if (*((void *)v33 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v34 = &v33[*(int *)(v12 + 28)];
          uint64_t v35 = sub_23309B300();
          uint64_t v36 = *(void *)(v35 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
            (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v37 = &v33[*(int *)(v22 + 20)];
        if (!v13(v37, 1, v12))
        {
          if (*((void *)v37 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v38 = &v37[*(int *)(v12 + 28)];
          uint64_t v39 = sub_23309B300();
          uint64_t v40 = *(void *)(v39 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39)) {
            (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
          }
          swift_bridgeObjectRelease();
        }
      }
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_146;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v41 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      uint64_t v42 = (char *)a1 + v41[9];
      uint64_t v43 = type metadata accessor for FHIRDateTime();
      uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48);
      if (!v44(v42, 1, v43))
      {
        if (*((void *)v42 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v45 = &v42[*(int *)(v43 + 28)];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v48 = (char *)a1 + v41[10];
      uint64_t v49 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v48, 1, v49))
      {
        if (!v44(v48, 1, v43))
        {
          if (*((void *)v48 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v50 = &v48[*(int *)(v43 + 28)];
          uint64_t v51 = sub_23309B300();
          uint64_t v52 = *(void *)(v51 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
            (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v51);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v53 = &v48[*(int *)(v49 + 20)];
        if (!v44(v53, 1, v43))
        {
          if (*((void *)v53 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v54 = &v53[*(int *)(v43 + 28)];
          uint64_t v55 = sub_23309B300();
          uint64_t v56 = *(void *)(v55 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55)) {
            (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v57 = (char *)a1 + v41[11];
      if (!v44(v57, 1, v43))
      {
        if (*((void *)v57 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v58 = &v57[*(int *)(v43 + 28)];
        uint64_t v59 = sub_23309B300();
        uint64_t v60 = *(void *)(v59 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59)) {
          (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v59);
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_146;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v61 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
      uint64_t v62 = (char *)a1 + v61[8];
      uint64_t v63 = type metadata accessor for FHIRDateTime();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v62, 1, v63))
      {
        if (*((void *)v62 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v64 = &v62[*(int *)(v63 + 28)];
        uint64_t v65 = sub_23309B300();
        uint64_t v66 = *(void *)(v65 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
          (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v67 = (char *)a1 + v61[15];
      uint64_t v68 = type metadata accessor for Reference();
      uint64_t v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48);
      if (!v69(v67, 1, v68))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = &v67[*(int *)(v68 + 24)];
        uint64_t v71 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48))(v70, 1, v71))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v70 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v72 = &v70[*(int *)(v71 + 24)];
          uint64_t v73 = sub_23309AF80();
          uint64_t v74 = *(void *)(v73 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73)) {
            (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v73);
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v75 = (char *)a1 + v61[17];
      if (!v69(v75, 1, v68))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v76 = &v75[*(int *)(v68 + 24)];
        uint64_t v77 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v76, 1, v77))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v76 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v78 = &v76[*(int *)(v77 + 24)];
          uint64_t v79 = sub_23309AF80();
          uint64_t v80 = *(void *)(v79 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79)) {
            (*(void (**)(char *, uint64_t))(v80 + 8))(v78, v79);
          }
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_146;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (a1[8] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v81 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
      uint64_t v82 = (char *)a1 + v81[11];
      uint64_t v83 = type metadata accessor for FHIRDateTime();
      uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v83 - 8) + 48);
      if (!v84(v82, 1, v83))
      {
        if (*((void *)v82 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        long long v85 = &v82[*(int *)(v83 + 28)];
        uint64_t v86 = sub_23309B300();
        uint64_t v87 = *(void *)(v86 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86)) {
          (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v86);
        }
        swift_bridgeObjectRelease();
      }
      BOOL v88 = (char *)a1 + v81[12];
      uint64_t v89 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v89 - 8) + 48))(v88, 1, v89))
      {
        if (!v84(v88, 1, v83))
        {
          if (*((void *)v88 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v90 = &v88[*(int *)(v83 + 28)];
          uint64_t v91 = sub_23309B300();
          uint64_t v92 = *(void *)(v91 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91)) {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v93 = &v88[*(int *)(v89 + 20)];
        if (!v84(v93, 1, v83))
        {
          if (*((void *)v93 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v94 = &v93[*(int *)(v83 + 28)];
          uint64_t v95 = sub_23309B300();
          uint64_t v96 = *(void *)(v95 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95)) {
            (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v95);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v97 = (char *)a1 + v81[13];
      if (!v84(v97, 1, v83))
      {
        if (*((void *)v97 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v98 = &v97[*(int *)(v83 + 28)];
        uint64_t v99 = sub_23309B300();
        uint64_t v100 = *(void *)(v99 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99)) {
          (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v99);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)((char *)a1 + v81[16] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      char v101 = (char *)a1 + v81[17];
      uint64_t v102 = type metadata accessor for Quantity();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v102 - 8) + 48))(v101, 1, v102))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v103 = &v101[*(int *)(v102 + 28)];
        uint64_t v104 = sub_23309AF80();
        uint64_t v105 = *(void *)(v104 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104)) {
          (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v104);
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_145;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_145:
      swift_bridgeObjectRelease();
LABEL_146:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ModelsDSTU2.ResourceProxy(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[2];
      swift_bridgeObjectRetain();
      if (v7 != 1) {
        swift_bridgeObjectRetain();
      }
      a1[2] = v7;
      uint64_t v8 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
      uint64_t v9 = v8[6];
      uint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (void *)((char *)a2 + v9);
      uint64_t v12 = type metadata accessor for Reference();
      uint64_t v13 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v12 - 8);
      if (v13[6](v11, 1, v12))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        v537 = v13;
        v514 = v10;
        v524 = v8;
        uint64_t v65 = v11[1];
        void *v10 = *v11;
        v10[1] = v65;
        uint64_t v66 = v11[3];
        void v10[2] = v11[2];
        v10[3] = v66;
        uint64_t v67 = *(int *)(v12 + 24);
        v529 = (void *)((char *)v10 + v67);
        uint64_t v68 = (void *)((char *)v11 + v67);
        uint64_t v69 = type metadata accessor for Identifier();
        uint64_t v70 = *(void *)(v69 - 8);
        uint64_t v71 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v70 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v71(v68, 1, v69))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v529, v68, *(void *)(*(void *)(v72 - 8) + 64));
          uint64_t v73 = v514;
          uint64_t v8 = v524;
        }
        else
        {
          uint64_t v505 = v70;
          uint64_t v97 = v68[1];
          void *v529 = *v68;
          v529[1] = v97;
          uint64_t v98 = v68[3];
          swift_bridgeObjectRetain();
          if (v98 == 1)
          {
            *((_OWORD *)v529 + 1) = *((_OWORD *)v68 + 1);
            v529[4] = v68[4];
          }
          else
          {
            v529[2] = v68[2];
            v529[3] = v98;
            v529[4] = v68[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v158 = v68;
          uint64_t v73 = v514;
          uint64_t v8 = v524;
          v518 = v158;
          v526 = (int *)v69;
          uint64_t v159 = *(int *)(v69 + 24);
          uint64_t v160 = (char *)v529 + v159;
          uint64_t v161 = (char *)v158 + v159;
          uint64_t v162 = sub_23309AF80();
          uint64_t v163 = *(void *)(v162 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v160, v161, v162);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
          }
          uint64_t v182 = v526[7];
          uint64_t v183 = (void *)((char *)v529 + v182);
          uint64_t v184 = (void *)((char *)v518 + v182);
          uint64_t v185 = v184[1];
          *uint64_t v183 = *v184;
          v183[1] = v185;
          uint64_t v186 = *(void (**)(void *, void, uint64_t, int *))(v505 + 56);
          swift_bridgeObjectRetain();
          v186(v529, 0, 1, v526);
        }
        (*((void (**)(void *, void, uint64_t, uint64_t))v537 + 7))(v73, 0, 1, v12);
      }
      uint64_t v187 = v8[7];
      uint64_t v188 = (char *)a1 + v187;
      uint64_t v189 = (char *)a2 + v187;
      uint64_t v190 = type metadata accessor for FHIRDateTime();
      v527 = *(void **)(v190 - 8);
      v539 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v527[6];
      if (v539(v189, 1, v190))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v188, v189, *(void *)(*(void *)(v191 - 8) + 64));
      }
      else
      {
        *uint64_t v188 = *v189;
        *((void *)v188 + 1) = *((void *)v189 + 1);
        *((_DWORD *)v188 + 4) = *((_DWORD *)v189 + 4);
        uint64_t v192 = *((void *)v189 + 7);
        if (v192 == 1)
        {
          long long v193 = *(_OWORD *)(v189 + 40);
          *(_OWORD *)(v188 + 24) = *(_OWORD *)(v189 + 24);
          *(_OWORD *)(v188 + 40) = v193;
          *((void *)v188 + 7) = *((void *)v189 + 7);
        }
        else
        {
          v188[24] = v189[24];
          *(_WORD *)(v188 + 25) = *(_WORD *)(v189 + 25);
          *(_OWORD *)(v188 + 28) = *(_OWORD *)(v189 + 28);
          *((_DWORD *)v188 + 11) = *((_DWORD *)v189 + 11);
          *((void *)v188 + 6) = *((void *)v189 + 6);
          *((void *)v188 + 7) = v192;
          swift_bridgeObjectRetain();
        }
        uint64_t v194 = *(int *)(v190 + 28);
        uint64_t v195 = &v188[v194];
        uint64_t v196 = &v189[v194];
        uint64_t v197 = sub_23309B300();
        uint64_t v198 = *(void *)(v197 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v198 + 48))(v196, 1, v197))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v195, v196, *(void *)(*(void *)(v199 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v198 + 16))(v195, v196, v197);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
        }
        uint64_t v200 = *(int *)(v190 + 32);
        uint64_t v201 = &v188[v200];
        long long v202 = &v189[v200];
        uint64_t v203 = v202[1];
        void *v201 = *v202;
        v201[1] = v203;
        uint64_t v204 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
        swift_bridgeObjectRetain();
        v204(v188, 0, 1, v190);
      }
      uint64_t v205 = v8[8];
      uint64_t v206 = (void *)((char *)a1 + v205);
      uint64_t v207 = (void *)((char *)a2 + v205);
      uint64_t v208 = v207[1];
      void *v206 = *v207;
      v206[1] = v208;
      v206[2] = v207[2];
      uint64_t v209 = v8[9];
      uint64_t v210 = (char *)a1 + v209;
      uint64_t v211 = (char *)a2 + v209;
      uint64_t v212 = *(void *)((char *)a2 + v209 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v212 == 1)
      {
        *(_OWORD *)uint64_t v210 = *(_OWORD *)v211;
        *((void *)v210 + 2) = *((void *)v211 + 2);
      }
      else
      {
        *(void *)uint64_t v210 = *(void *)v211;
        *((void *)v210 + 1) = v212;
        *((void *)v210 + 2) = *((void *)v211 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v213 = v8[10];
      uint64_t v214 = (void *)((char *)a1 + v213);
      uint64_t v215 = (void *)((char *)a2 + v213);
      uint64_t v216 = v215[1];
      *uint64_t v214 = *v215;
      v214[1] = v216;
      uint64_t v217 = v8[11];
      uint64_t v218 = (void *)((char *)a1 + v217);
      uint64_t v219 = (void *)((char *)a2 + v217);
      uint64_t v220 = v219[1];
      void *v218 = *v219;
      v218[1] = v220;
      uint64_t v221 = v8[12];
      uint64_t v222 = (char *)a1 + v221;
      uint64_t v223 = (char *)a2 + v221;
      uint64_t v224 = *(void *)((char *)a2 + v221 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v224 == 1)
      {
        *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
        *((void *)v222 + 2) = *((void *)v223 + 2);
      }
      else
      {
        *(void *)uint64_t v222 = *(void *)v223;
        *((void *)v222 + 1) = v224;
        *((void *)v222 + 2) = *((void *)v223 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v225 = v539;
      *(void *)((char *)a1 + v8[13]) = *(void *)((char *)a2 + v8[13]);
      uint64_t v226 = v8[14];
      uint64_t v227 = (char *)a1 + v226;
      uint64_t v228 = (char *)a2 + v226;
      swift_bridgeObjectRetain();
      if (v539(v228, 1, v190))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v227, v228, *(void *)(*(void *)(v229 - 8) + 64));
      }
      else
      {
        *uint64_t v227 = *v228;
        *((void *)v227 + 1) = *((void *)v228 + 1);
        *((_DWORD *)v227 + 4) = *((_DWORD *)v228 + 4);
        uint64_t v230 = *((void *)v228 + 7);
        if (v230 == 1)
        {
          long long v231 = *(_OWORD *)(v228 + 40);
          *(_OWORD *)(v227 + 24) = *(_OWORD *)(v228 + 24);
          *(_OWORD *)(v227 + 40) = v231;
          *((void *)v227 + 7) = *((void *)v228 + 7);
        }
        else
        {
          v227[24] = v228[24];
          *(_WORD *)(v227 + 25) = *(_WORD *)(v228 + 25);
          *(_OWORD *)(v227 + 28) = *(_OWORD *)(v228 + 28);
          *((_DWORD *)v227 + 11) = *((_DWORD *)v228 + 11);
          *((void *)v227 + 6) = *((void *)v228 + 6);
          *((void *)v227 + 7) = v230;
          swift_bridgeObjectRetain();
        }
        uint64_t v232 = *(int *)(v190 + 28);
        uint64_t v233 = &v227[v232];
        uint64_t v234 = &v228[v232];
        uint64_t v235 = sub_23309B300();
        uint64_t v236 = *(void *)(v235 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v236 + 48))(v234, 1, v235))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v233, v234, *(void *)(*(void *)(v237 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v236 + 16))(v233, v234, v235);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v236 + 56))(v233, 0, 1, v235);
        }
        uint64_t v238 = *(int *)(v190 + 32);
        uint64_t v239 = &v227[v238];
        uint64_t v240 = &v228[v238];
        uint64_t v241 = v240[1];
        void *v239 = *v240;
        v239[1] = v241;
        uint64_t v242 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
        swift_bridgeObjectRetain();
        v242(v227, 0, 1, v190);
        v225 = v539;
      }
      uint64_t v243 = v8[15];
      uint64_t v244 = (char *)a1 + v243;
      v245 = (char *)a2 + v243;
      uint64_t v246 = type metadata accessor for Period();
      uint64_t v508 = *(void *)(v246 - 8);
      uint64_t v247 = *(unsigned int (**)(void, void, void))(v508 + 48);
      if (v247(v245, 1, v246))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v244, v245, *(void *)(*(void *)(v248 - 8) + 64));
      }
      else
      {
        __dstb = v247;
        if (v225(v245, 1, v190))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v244, v245, *(void *)(*(void *)(v249 - 8) + 64));
        }
        else
        {
          *uint64_t v244 = *v245;
          *((void *)v244 + 1) = *((void *)v245 + 1);
          *((_DWORD *)v244 + 4) = *((_DWORD *)v245 + 4);
          uint64_t v250 = *((void *)v245 + 7);
          if (v250 == 1)
          {
            long long v251 = *(_OWORD *)(v245 + 40);
            *(_OWORD *)(v244 + 24) = *(_OWORD *)(v245 + 24);
            *(_OWORD *)(v244 + 40) = v251;
            *((void *)v244 + 7) = *((void *)v245 + 7);
          }
          else
          {
            v244[24] = v245[24];
            *(_WORD *)(v244 + 25) = *(_WORD *)(v245 + 25);
            *(_OWORD *)(v244 + 28) = *(_OWORD *)(v245 + 28);
            *((_DWORD *)v244 + 11) = *((_DWORD *)v245 + 11);
            *((void *)v244 + 6) = *((void *)v245 + 6);
            *((void *)v244 + 7) = v250;
            swift_bridgeObjectRetain();
          }
          uint64_t v252 = *(int *)(v190 + 28);
          uint64_t v491 = &v244[v252];
          uint64_t v253 = &v245[v252];
          uint64_t v254 = sub_23309B300();
          uint64_t v255 = *(void *)(v254 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v255 + 48))(v253, 1, v254))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v491, v253, *(void *)(*(void *)(v256 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v255 + 16))(v491, v253, v254);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v255 + 56))(v491, 0, 1, v254);
          }
          uint64_t v318 = *(int *)(v190 + 32);
          v319 = &v244[v318];
          v320 = &v245[v318];
          uint64_t v321 = v320[1];
          void *v319 = *v320;
          v319[1] = v321;
          uint64_t v322 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
          swift_bridgeObjectRetain();
          v322(v244, 0, 1, v190);
          v225 = v539;
        }
        uint64_t v323 = *(int *)(v246 + 20);
        v324 = &v244[v323];
        uint64_t v325 = &v245[v323];
        if (v225(v325, 1, v190))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v324, v325, *(void *)(*(void *)(v326 - 8) + 64));
        }
        else
        {
          unsigned char *v324 = *v325;
          *((void *)v324 + 1) = *((void *)v325 + 1);
          *((_DWORD *)v324 + 4) = *((_DWORD *)v325 + 4);
          uint64_t v327 = *((void *)v325 + 7);
          if (v327 == 1)
          {
            long long v328 = *(_OWORD *)(v325 + 40);
            *(_OWORD *)(v324 + 24) = *(_OWORD *)(v325 + 24);
            *(_OWORD *)(v324 + 40) = v328;
            *((void *)v324 + 7) = *((void *)v325 + 7);
          }
          else
          {
            v324[24] = v325[24];
            *(_WORD *)(v324 + 25) = *(_WORD *)(v325 + 25);
            *(_OWORD *)(v324 + 28) = *(_OWORD *)(v325 + 28);
            *((_DWORD *)v324 + 11) = *((_DWORD *)v325 + 11);
            *((void *)v324 + 6) = *((void *)v325 + 6);
            *((void *)v324 + 7) = v327;
            swift_bridgeObjectRetain();
          }
          uint64_t v329 = *(int *)(v190 + 28);
          uint64_t v492 = &v324[v329];
          uint64_t v330 = &v325[v329];
          uint64_t v331 = sub_23309B300();
          uint64_t v489 = *(void *)(v331 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v489 + 48))(v330, 1, v331))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v492, v330, *(void *)(*(void *)(v332 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v489 + 16))(v492, v330, v331);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v489 + 56))(v492, 0, 1, v331);
          }
          uint64_t v415 = *(int *)(v190 + 32);
          v416 = &v324[v415];
          uint64_t v417 = &v325[v415];
          uint64_t v418 = v417[1];
          void *v416 = *v417;
          v416[1] = v418;
          uint64_t v419 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
          swift_bridgeObjectRetain();
          v419(v324, 0, 1, v190);
          v225 = v539;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v508 + 56))(v244, 0, 1, v246);
        uint64_t v247 = (unsigned int (*)(void, void, void))__dstb;
      }
      uint64_t v420 = v8[16];
      v421 = (void *)((char *)a1 + v420);
      v422 = (void *)((char *)a2 + v420);
      uint64_t v423 = v422[1];
      void *v421 = *v422;
      v421[1] = v423;
      uint64_t v424 = v8[17];
      uint64_t v425 = (char *)a1 + v424;
      v426 = (char *)a2 + v424;
      swift_bridgeObjectRetain();
      if (v225(v426, 1, v190))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v425, v426, *(void *)(*(void *)(v427 - 8) + 64));
      }
      else
      {
        *uint64_t v425 = *v426;
        *((void *)v425 + 1) = *((void *)v426 + 1);
        *((_DWORD *)v425 + 4) = *((_DWORD *)v426 + 4);
        uint64_t v428 = *((void *)v426 + 7);
        uint64_t v495 = v246;
        __dste = v247;
        if (v428 == 1)
        {
          long long v429 = *(_OWORD *)(v426 + 40);
          *(_OWORD *)(v425 + 24) = *(_OWORD *)(v426 + 24);
          *(_OWORD *)(v425 + 40) = v429;
          *((void *)v425 + 7) = *((void *)v426 + 7);
        }
        else
        {
          v425[24] = v426[24];
          *(_WORD *)(v425 + 25) = *(_WORD *)(v426 + 25);
          *(_OWORD *)(v425 + 28) = *(_OWORD *)(v426 + 28);
          *((_DWORD *)v425 + 11) = *((_DWORD *)v426 + 11);
          *((void *)v425 + 6) = *((void *)v426 + 6);
          *((void *)v425 + 7) = v428;
          swift_bridgeObjectRetain();
        }
        uint64_t v430 = *(int *)(v190 + 28);
        uint64_t v431 = &v425[v430];
        v432 = &v426[v430];
        uint64_t v433 = sub_23309B300();
        uint64_t v434 = *(void *)(v433 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v431, v432, *(void *)(*(void *)(v435 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v434 + 16))(v431, v432, v433);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v434 + 56))(v431, 0, 1, v433);
        }
        uint64_t v246 = v495;
        uint64_t v436 = *(int *)(v190 + 32);
        v437 = &v425[v436];
        v438 = &v426[v436];
        uint64_t v439 = v438[1];
        void *v437 = *v438;
        v437[1] = v439;
        v440 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
        swift_bridgeObjectRetain();
        v440(v425, 0, 1, v190);
        v225 = v539;
        uint64_t v247 = (unsigned int (*)(void, void, void))__dste;
      }
      uint64_t v441 = v8[18];
      v442 = (char *)a1 + v441;
      v443 = (char *)a2 + v441;
      if (v247((char *)a2 + v441, 1, v246))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v442, v443, *(void *)(*(void *)(v444 - 8) + 64));
      }
      else
      {
        if (v225(v443, 1, v190))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v442, v443, *(void *)(*(void *)(v445 - 8) + 64));
        }
        else
        {
          unsigned char *v442 = *v443;
          *((void *)v442 + 1) = *((void *)v443 + 1);
          *((_DWORD *)v442 + 4) = *((_DWORD *)v443 + 4);
          uint64_t v446 = *((void *)v443 + 7);
          uint64_t v496 = v246;
          if (v446 == 1)
          {
            long long v447 = *(_OWORD *)(v443 + 40);
            *(_OWORD *)(v442 + 24) = *(_OWORD *)(v443 + 24);
            *(_OWORD *)(v442 + 40) = v447;
            *((void *)v442 + 7) = *((void *)v443 + 7);
          }
          else
          {
            v442[24] = v443[24];
            *(_WORD *)(v442 + 25) = *(_WORD *)(v443 + 25);
            *(_OWORD *)(v442 + 28) = *(_OWORD *)(v443 + 28);
            *((_DWORD *)v442 + 11) = *((_DWORD *)v443 + 11);
            *((void *)v442 + 6) = *((void *)v443 + 6);
            *((void *)v442 + 7) = v446;
            swift_bridgeObjectRetain();
          }
          uint64_t v448 = *(int *)(v190 + 28);
          uint64_t v449 = &v442[v448];
          uint64_t v450 = &v443[v448];
          uint64_t v451 = sub_23309B300();
          uint64_t v452 = *(void *)(v451 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v452 + 48))(v450, 1, v451))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v449, v450, *(void *)(*(void *)(v453 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v452 + 16))(v449, v450, v451);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v452 + 56))(v449, 0, 1, v451);
          }
          uint64_t v246 = v496;
          uint64_t v454 = *(int *)(v190 + 32);
          uint64_t v455 = &v442[v454];
          uint64_t v456 = &v443[v454];
          uint64_t v457 = v456[1];
          *uint64_t v455 = *v456;
          v455[1] = v457;
          uint64_t v458 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
          swift_bridgeObjectRetain();
          v458(v442, 0, 1, v190);
          v225 = v539;
        }
        uint64_t v459 = *(int *)(v246 + 20);
        v460 = &v442[v459];
        uint64_t v461 = &v443[v459];
        if (v225(v461, 1, v190))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v460, v461, *(void *)(*(void *)(v462 - 8) + 64));
        }
        else
        {
          unsigned char *v460 = *v461;
          *((void *)v460 + 1) = *((void *)v461 + 1);
          *((_DWORD *)v460 + 4) = *((_DWORD *)v461 + 4);
          uint64_t v463 = *((void *)v461 + 7);
          uint64_t v497 = v246;
          if (v463 == 1)
          {
            long long v464 = *(_OWORD *)(v461 + 40);
            *(_OWORD *)(v460 + 24) = *(_OWORD *)(v461 + 24);
            *(_OWORD *)(v460 + 40) = v464;
            *((void *)v460 + 7) = *((void *)v461 + 7);
          }
          else
          {
            v460[24] = v461[24];
            *(_WORD *)(v460 + 25) = *(_WORD *)(v461 + 25);
            *(_OWORD *)(v460 + 28) = *(_OWORD *)(v461 + 28);
            *((_DWORD *)v460 + 11) = *((_DWORD *)v461 + 11);
            *((void *)v460 + 6) = *((void *)v461 + 6);
            *((void *)v460 + 7) = v463;
            swift_bridgeObjectRetain();
          }
          uint64_t v465 = *(int *)(v190 + 28);
          v541 = &v460[v465];
          uint64_t v466 = &v461[v465];
          uint64_t v467 = sub_23309B300();
          uint64_t v468 = *(void *)(v467 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v468 + 48))(v466, 1, v467))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v541, v466, *(void *)(*(void *)(v469 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v468 + 16))(v541, v466, v467);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v468 + 56))(v541, 0, 1, v467);
          }
          uint64_t v246 = v497;
          uint64_t v470 = *(int *)(v190 + 32);
          uint64_t v471 = &v460[v470];
          v472 = &v461[v470];
          uint64_t v473 = v472[1];
          *uint64_t v471 = *v472;
          v471[1] = v473;
          uint64_t v474 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v527[7];
          swift_bridgeObjectRetain();
          v474(v460, 0, 1, v190);
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v508 + 56))(v442, 0, 1, v246);
      }
      uint64_t v475 = v8[19];
      uint64_t v476 = (void *)((char *)a1 + v475);
      uint64_t v477 = (void *)((char *)a2 + v475);
      uint64_t v478 = v477[1];
      *uint64_t v476 = *v477;
      v476[1] = v478;
      uint64_t v479 = v8[20];
      uint64_t v480 = (void *)((char *)a1 + v479);
      v481 = (void *)((char *)a2 + v479);
      uint64_t v482 = v481[1];
      *uint64_t v480 = *v481;
      v480[1] = v482;
      uint64_t v483 = v8[21];
      v484 = (void *)((char *)a1 + v483);
      uint64_t v485 = (void *)((char *)a2 + v483);
      uint64_t v486 = v485[1];
      void *v484 = *v485;
      v484[1] = v486;
      goto LABEL_229;
    case 2u:
      uint64_t v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      uint64_t v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      uint64_t v17 = a2[5];
      a1[4] = a2[4];
      a1[5] = v17;
      uint64_t v18 = a2[7];
      a1[6] = a2[6];
      a1[7] = v18;
      uint64_t v19 = a2[9];
      a1[8] = a2[8];
      a1[9] = v19;
      a1[10] = a2[10];
      uint64_t v513 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      uint64_t v20 = *(int *)(v513 + 36);
      __dst = (char *)a1 + v20;
      uint64_t v21 = (char *)a2 + v20;
      uint64_t v22 = type metadata accessor for FHIRDateTime();
      uint64_t v504 = *(void *)(v22 - 8);
      uint64_t v23 = *(unsigned int (**)(void, void, void))(v504 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v523 = (int *)v22;
      if (v23(v21, 1, v22))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
        uint64_t v25 = (int *)v513;
      }
      else
      {
        unsigned char *__dst = *v21;
        *((void *)__dst + 1) = *((void *)v21 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v21 + 4);
        uint64_t v74 = *((void *)v21 + 7);
        uint64_t v493 = v23;
        if (v74 == 1)
        {
          long long v75 = *(_OWORD *)(v21 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v21 + 24);
          *(_OWORD *)(__dst + 40) = v75;
          *((void *)__dst + 7) = *((void *)v21 + 7);
        }
        else
        {
          __dst[24] = v21[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v21 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v21 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v21 + 11);
          *((void *)__dst + 6) = *((void *)v21 + 6);
          *((void *)__dst + 7) = v74;
          swift_bridgeObjectRetain();
        }
        uint64_t v25 = (int *)v513;
        uint64_t v80 = *(int *)(v22 + 28);
        long long v81 = &__dst[v80];
        uint64_t v82 = &v21[v80];
        uint64_t v83 = sub_23309B300();
        uint64_t v84 = *(void *)(v83 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v84 + 16))(v81, v82, v83);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
        }
        uint64_t v99 = v523[8];
        uint64_t v100 = &__dst[v99];
        char v101 = &v21[v99];
        uint64_t v102 = v101[1];
        *uint64_t v100 = *v101;
        v100[1] = v102;
        uint64_t v103 = *(void (**)(unsigned char *, void, uint64_t, int *))(v504 + 56);
        swift_bridgeObjectRetain();
        v103(__dst, 0, 1, v523);
        uint64_t v23 = v493;
      }
      uint64_t v104 = v25[10];
      uint64_t v105 = (char *)a1 + v104;
      uint64_t v106 = (char *)a2 + v104;
      uint64_t v107 = type metadata accessor for Period();
      uint64_t v108 = *(void **)(v107 - 8);
      if ((*((unsigned int (**)(unsigned char *, uint64_t, uint64_t))v108 + 6))(v106, 1, v107))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
        uint64_t v110 = v523;
      }
      else
      {
        uint64_t v110 = v523;
        if (v23(v106, 1, v523))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v105, v106, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          *uint64_t v105 = *v106;
          *((void *)v105 + 1) = *((void *)v106 + 1);
          *((_DWORD *)v105 + 4) = *((_DWORD *)v106 + 4);
          uint64_t v151 = *((void *)v106 + 7);
          v533 = v108;
          if (v151 == 1)
          {
            long long v152 = *(_OWORD *)(v106 + 40);
            *(_OWORD *)(v105 + 24) = *(_OWORD *)(v106 + 24);
            *(_OWORD *)(v105 + 40) = v152;
            *((void *)v105 + 7) = *((void *)v106 + 7);
          }
          else
          {
            v105[24] = v106[24];
            *(_WORD *)(v105 + 25) = *(_WORD *)(v106 + 25);
            *(_OWORD *)(v105 + 28) = *(_OWORD *)(v106 + 28);
            *((_DWORD *)v105 + 11) = *((_DWORD *)v106 + 11);
            *((void *)v105 + 6) = *((void *)v106 + 6);
            *((void *)v105 + 7) = v151;
            swift_bridgeObjectRetain();
          }
          uint64_t v165 = v523[7];
          uint64_t v166 = &v105[v165];
          long long v167 = &v106[v165];
          uint64_t v168 = sub_23309B300();
          uint64_t v169 = *(void *)(v168 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v166, v167, *(void *)(*(void *)(v170 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v169 + 16))(v166, v167, v168);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
          }
          uint64_t v257 = v523[8];
          uint64_t v258 = &v105[v257];
          v259 = &v106[v257];
          uint64_t v260 = v259[1];
          *uint64_t v258 = *v259;
          v258[1] = v260;
          v261 = *(void (**)(unsigned char *, void, uint64_t, int *))(v504 + 56);
          swift_bridgeObjectRetain();
          v261(v105, 0, 1, v523);
          uint64_t v110 = v523;
          uint64_t v108 = v533;
        }
        uint64_t v262 = *(int *)(v107 + 20);
        uint64_t v263 = &v105[v262];
        v264 = &v106[v262];
        if (v23(v264, 1, v110))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v263, v264, *(void *)(*(void *)(v265 - 8) + 64));
        }
        else
        {
          *uint64_t v263 = *v264;
          *((void *)v263 + 1) = *((void *)v264 + 1);
          *((_DWORD *)v263 + 4) = *((_DWORD *)v264 + 4);
          uint64_t v266 = *((void *)v264 + 7);
          v534 = v108;
          if (v266 == 1)
          {
            long long v267 = *(_OWORD *)(v264 + 40);
            *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
            *(_OWORD *)(v263 + 40) = v267;
            *((void *)v263 + 7) = *((void *)v264 + 7);
          }
          else
          {
            v263[24] = v264[24];
            *(_WORD *)(v263 + 25) = *(_WORD *)(v264 + 25);
            *(_OWORD *)(v263 + 28) = *(_OWORD *)(v264 + 28);
            *((_DWORD *)v263 + 11) = *((_DWORD *)v264 + 11);
            *((void *)v263 + 6) = *((void *)v264 + 6);
            *((void *)v263 + 7) = v266;
            swift_bridgeObjectRetain();
          }
          uint64_t v268 = v110[7];
          __dstc = &v263[v268];
          v269 = &v264[v268];
          uint64_t v270 = sub_23309B300();
          uint64_t v271 = *(void *)(v270 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstc, v269, *(void *)(*(void *)(v272 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v271 + 16))(__dstc, v269, v270);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v271 + 56))(__dstc, 0, 1, v270);
          }
          uint64_t v333 = v523[8];
          uint64_t v334 = &v263[v333];
          v335 = &v264[v333];
          uint64_t v336 = v335[1];
          *uint64_t v334 = *v335;
          v334[1] = v336;
          uint64_t v337 = *(void (**)(unsigned char *, void, uint64_t, int *))(v504 + 56);
          swift_bridgeObjectRetain();
          v337(v263, 0, 1, v523);
          uint64_t v110 = v523;
          uint64_t v108 = v534;
        }
        (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v108 + 7))(v105, 0, 1, v107);
        uint64_t v25 = (int *)v513;
      }
      uint64_t v338 = v25[11];
      uint64_t v339 = (char *)a1 + v338;
      v340 = (char *)a2 + v338;
      if (v23((char *)a2 + v338, 1, v110))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v339, v340, *(void *)(*(void *)(v341 - 8) + 64));
      }
      else
      {
        *uint64_t v339 = *v340;
        *((void *)v339 + 1) = *((void *)v340 + 1);
        *((_DWORD *)v339 + 4) = *((_DWORD *)v340 + 4);
        uint64_t v342 = *((void *)v340 + 7);
        if (v342 == 1)
        {
          long long v343 = *(_OWORD *)(v340 + 40);
          *(_OWORD *)(v339 + 24) = *(_OWORD *)(v340 + 24);
          *(_OWORD *)(v339 + 40) = v343;
          *((void *)v339 + 7) = *((void *)v340 + 7);
        }
        else
        {
          v339[24] = v340[24];
          *(_WORD *)(v339 + 25) = *(_WORD *)(v340 + 25);
          *(_OWORD *)(v339 + 28) = *(_OWORD *)(v340 + 28);
          *((_DWORD *)v339 + 11) = *((_DWORD *)v340 + 11);
          *((void *)v339 + 6) = *((void *)v340 + 6);
          *((void *)v339 + 7) = v342;
          swift_bridgeObjectRetain();
        }
        uint64_t v344 = v110[7];
        v345 = &v339[v344];
        uint64_t v346 = &v340[v344];
        uint64_t v347 = sub_23309B300();
        uint64_t v348 = *(void *)(v347 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v348 + 48))(v346, 1, v347))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v345, v346, *(void *)(*(void *)(v349 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v348 + 16))(v345, v346, v347);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v348 + 56))(v345, 0, 1, v347);
        }
        uint64_t v350 = v523[8];
        uint64_t v351 = &v339[v350];
        v352 = &v340[v350];
        uint64_t v353 = v352[1];
        *uint64_t v351 = *v352;
        v351[1] = v353;
        uint64_t v354 = *(void (**)(unsigned char *, void, uint64_t, int *))(v504 + 56);
        swift_bridgeObjectRetain();
        v354(v339, 0, 1, v523);
      }
      uint64_t v355 = v25[12];
      goto LABEL_172;
    case 3u:
      uint64_t v26 = a2[1];
      *a1 = *a2;
      a1[1] = v26;
      uint64_t v27 = a2[3];
      a1[2] = a2[2];
      a1[3] = v27;
      uint64_t v28 = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v28 != 1) {
        swift_bridgeObjectRetain();
      }
      uint64_t v29 = a2[5];
      uint64_t v30 = a2[6];
      a1[4] = v28;
      a1[5] = v29;
      a1[6] = v30;
      uint64_t v31 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
      uint64_t v32 = v31[8];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = type metadata accessor for FHIRDateTime();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        *uint64_t v33 = *v34;
        *((void *)v33 + 1) = *((void *)v34 + 1);
        *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
        uint64_t v76 = *((void *)v34 + 7);
        if (v76 == 1)
        {
          long long v77 = *(_OWORD *)(v34 + 40);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
          *(_OWORD *)(v33 + 40) = v77;
          *((void *)v33 + 7) = *((void *)v34 + 7);
        }
        else
        {
          v33[24] = v34[24];
          *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
          *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
          *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
          *((void *)v33 + 6) = *((void *)v34 + 6);
          *((void *)v33 + 7) = v76;
          swift_bridgeObjectRetain();
        }
        uint64_t v86 = *(int *)(v35 + 28);
        v530 = &v33[v86];
        uint64_t v87 = &v34[v86];
        uint64_t v88 = sub_23309B300();
        uint64_t v89 = *(void *)(v88 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v530, v87, *(void *)(*(void *)(v90 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v89 + 16))(v530, v87, v88);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v89 + 56))(v530, 0, 1, v88);
        }
        uint64_t v112 = *(int *)(v35 + 32);
        uint64_t v113 = &v33[v112];
        uint64_t v114 = &v34[v112];
        uint64_t v115 = v114[1];
        *uint64_t v113 = *v114;
        v113[1] = v115;
        uint64_t v116 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56);
        swift_bridgeObjectRetain();
        v116(v33, 0, 1, v35);
      }
      uint64_t v117 = v31[9];
      uint64_t v118 = (void *)((char *)a1 + v117);
      uint64_t v119 = (void *)((char *)a2 + v117);
      void *v118 = *v119;
      *(void *)((char *)v118 + 5) = *(void *)((char *)v119 + 5);
      *(void *)((char *)a1 + v31[10]) = *(void *)((char *)a2 + v31[10]);
      *((unsigned char *)a1 + v31[11]) = *((unsigned char *)a2 + v31[11]);
      *(void *)((char *)a1 + v31[12]) = *(void *)((char *)a2 + v31[12]);
      uint64_t v120 = v31[13];
      uint64_t v121 = (void *)((char *)a1 + v120);
      uint64_t v122 = (void *)((char *)a2 + v120);
      uint64_t v123 = v122[1];
      *uint64_t v121 = *v122;
      v121[1] = v123;
      v121[2] = v122[2];
      *((unsigned char *)a1 + v31[14]) = *((unsigned char *)a2 + v31[14]);
      v531 = a1;
      v538 = v31;
      uint64_t v124 = v31[15];
      BOOL v125 = (void *)((char *)a1 + v124);
      uint64_t v126 = (void *)((char *)a2 + v124);
      uint64_t v127 = type metadata accessor for Reference();
      v525 = *(void **)(v127 - 8);
      uint64_t v128 = (unsigned int (*)(void, void, void))v525[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v128(v126, 1, v127))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
        a1 = v531;
      }
      else
      {
        uint64_t v506 = v128;
        uint64_t v516 = v127;
        uint64_t v130 = v126[1];
        *BOOL v125 = *v126;
        v125[1] = v130;
        uint64_t v131 = v126[3];
        v125[2] = v126[2];
        v125[3] = v131;
        uint64_t v132 = *(int *)(v127 + 24);
        __dsta = v125;
        uint64_t v133 = (void *)((char *)v125 + v132);
        uint64_t v134 = (void *)((char *)v126 + v132);
        uint64_t v135 = type metadata accessor for Identifier();
        uint64_t v136 = *(void **)(v135 - 8);
        uint64_t v137 = (unsigned int (*)(void *, uint64_t, uint64_t))v136[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v137(v134, 1, v135))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v133, v134, *(void *)(*(void *)(v138 - 8) + 64));
          uint64_t v128 = v506;
          uint64_t v127 = v516;
          a1 = v531;
          uint64_t v31 = v538;
        }
        else
        {
          uint64_t v490 = v136;
          uint64_t v494 = v135;
          uint64_t v153 = v134[1];
          *uint64_t v133 = *v134;
          v133[1] = v153;
          uint64_t v154 = v134[3];
          swift_bridgeObjectRetain();
          uint64_t v155 = v133;
          a1 = v531;
          uint64_t v31 = v538;
          if (v154 == 1)
          {
            *((_OWORD *)v155 + 1) = *((_OWORD *)v134 + 1);
            v155[4] = v134[4];
          }
          else
          {
            v155[2] = v134[2];
            v155[3] = v154;
            v155[4] = v134[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v127 = v516;
          uint64_t v171 = *(int *)(v494 + 24);
          v519 = v155;
          uint64_t v488 = (char *)v155 + v171;
          uint64_t v172 = (char *)v134 + v171;
          uint64_t v173 = sub_23309AF80();
          uint64_t v174 = *(void *)(v173 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v488, v172, *(void *)(*(void *)(v175 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v488, v172, v173);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(v488, 0, 1, v173);
          }
          uint64_t v128 = v506;
          uint64_t v273 = *(int *)(v494 + 28);
          uint64_t v274 = (void *)((char *)v519 + v273);
          v275 = (void *)((char *)v134 + v273);
          uint64_t v276 = v275[1];
          *uint64_t v274 = *v275;
          v274[1] = v276;
          uint64_t v509 = (void (*)(void *, void, uint64_t, uint64_t))v490[7];
          swift_bridgeObjectRetain();
          v509(v519, 0, 1, v494);
        }
        ((void (*)(void *, void, uint64_t, uint64_t))v525[7])(__dsta, 0, 1, v127);
      }
      uint64_t v277 = v31[16];
      v278 = (void *)((char *)a1 + v277);
      uint64_t v279 = (void *)((char *)a2 + v277);
      uint64_t v280 = v279[1];
      void *v278 = *v279;
      v278[1] = v280;
      uint64_t v281 = v31[17];
      uint64_t v282 = (void *)((char *)a1 + v281);
      uint64_t v283 = (void *)((char *)a2 + v281);
      swift_bridgeObjectRetain();
      if (v128(v283, 1, v127))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v282, v283, *(void *)(*(void *)(v284 - 8) + 64));
      }
      else
      {
        uint64_t v285 = v283[1];
        *uint64_t v282 = *v283;
        v282[1] = v285;
        uint64_t v286 = v283[3];
        v282[2] = v283[2];
        v282[3] = v286;
        uint64_t v520 = v127;
        uint64_t v287 = *(int *)(v127 + 24);
        v535 = (void *)((char *)v282 + v287);
        uint64_t v288 = (void *)((char *)v283 + v287);
        uint64_t v289 = type metadata accessor for Identifier();
        uint64_t v290 = *(void *)(v289 - 8);
        uint64_t v291 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v290 + 48);
        uint64_t v292 = v288;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v291(v288, 1, v289))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v535, v288, *(void *)(*(void *)(v293 - 8) + 64));
        }
        else
        {
          uint64_t v510 = v290;
          uint64_t v294 = v288[1];
          void *v535 = *v288;
          v535[1] = v294;
          uint64_t v295 = v288[3];
          swift_bridgeObjectRetain();
          if (v295 == 1)
          {
            *((_OWORD *)v535 + 1) = *((_OWORD *)v288 + 1);
            v535[4] = v288[4];
          }
          else
          {
            v535[2] = v288[2];
            v535[3] = v295;
            v535[4] = v288[4];
            swift_bridgeObjectRetain();
            uint64_t v292 = v288;
            swift_bridgeObjectRetain();
          }
          uint64_t v296 = *(int *)(v289 + 24);
          uint64_t v297 = (char *)v535 + v296;
          v298 = (char *)v292 + v296;
          uint64_t v299 = sub_23309AF80();
          uint64_t v300 = *(void *)(v299 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v300 + 48))(v298, 1, v299))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v297, v298, *(void *)(*(void *)(v301 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v300 + 16))(v297, v298, v299);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
          }
          uint64_t v356 = *(int *)(v289 + 28);
          v357 = (void *)((char *)v535 + v356);
          v358 = (void *)((char *)v288 + v356);
          uint64_t v359 = v358[1];
          void *v357 = *v358;
          v357[1] = v359;
          uint64_t v360 = *(void (**)(void *, void, uint64_t, uint64_t))(v510 + 56);
          swift_bridgeObjectRetain();
          v360(v535, 0, 1, v289);
        }
        ((void (*)(void *, void, uint64_t, uint64_t))v525[7])(v282, 0, 1, v520);
        uint64_t v31 = v538;
      }
      uint64_t v355 = v31[18];
LABEL_172:
      uint64_t v361 = (void *)((char *)a1 + v355);
      uint64_t v362 = (void *)((char *)a2 + v355);
      uint64_t v363 = v362[1];
      *uint64_t v361 = *v362;
      v361[1] = v363;
      goto LABEL_231;
    case 4u:
      uint64_t v39 = a2[1];
      *a1 = *a2;
      a1[1] = v39;
      uint64_t v40 = a2[3];
      a1[2] = a2[2];
      a1[3] = v40;
      uint64_t v41 = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41 != 1) {
        swift_bridgeObjectRetain();
      }
      uint64_t v43 = a2[5];
      uint64_t v42 = a2[6];
      a1[4] = v41;
      a1[5] = v43;
      a1[6] = v42;
      uint64_t v44 = a2[8];
      swift_bridgeObjectRetain();
      if (v44 == 1)
      {
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        a1[9] = a2[9];
      }
      else
      {
        a1[7] = a2[7];
        a1[8] = v44;
        a1[9] = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v55 = a2[11];
      a1[10] = a2[10];
      a1[11] = v55;
      uint64_t v56 = a2[13];
      a1[12] = a2[12];
      a1[13] = v56;
      a1[14] = a2[14];
      uint64_t v57 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
      uint64_t v58 = v57[11];
      uint64_t v59 = (char *)a1 + v58;
      uint64_t v60 = (char *)a2 + v58;
      uint64_t v61 = type metadata accessor for FHIRDateTime();
      v536 = *(void **)(v61 - 8);
      uint64_t v62 = (unsigned int (*)(void, void, void))v536[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v62(v60, 1, v61))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        *uint64_t v59 = *v60;
        *((void *)v59 + 1) = *((void *)v60 + 1);
        *((_DWORD *)v59 + 4) = *((_DWORD *)v60 + 4);
        uint64_t v78 = *((void *)v60 + 7);
        v515 = v62;
        if (v78 == 1)
        {
          long long v79 = *(_OWORD *)(v60 + 40);
          *(_OWORD *)(v59 + 24) = *(_OWORD *)(v60 + 24);
          *(_OWORD *)(v59 + 40) = v79;
          *((void *)v59 + 7) = *((void *)v60 + 7);
        }
        else
        {
          v59[24] = v60[24];
          *(_WORD *)(v59 + 25) = *(_WORD *)(v60 + 25);
          *(_OWORD *)(v59 + 28) = *(_OWORD *)(v60 + 28);
          *((_DWORD *)v59 + 11) = *((_DWORD *)v60 + 11);
          *((void *)v59 + 6) = *((void *)v60 + 6);
          *((void *)v59 + 7) = v78;
          swift_bridgeObjectRetain();
        }
        uint64_t v91 = *(int *)(v61 + 28);
        uint64_t v92 = &v59[v91];
        uint64_t v93 = &v60[v91];
        uint64_t v94 = sub_23309B300();
        uint64_t v95 = *(void *)(v94 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v95 + 16))(v92, v93, v94);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
        uint64_t v139 = *(int *)(v61 + 32);
        uint64_t v140 = &v59[v139];
        uint64_t v141 = &v60[v139];
        uint64_t v142 = v141[1];
        *uint64_t v140 = *v141;
        v140[1] = v142;
        uint64_t v143 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v536[7];
        swift_bridgeObjectRetain();
        v143(v59, 0, 1, v61);
        uint64_t v62 = v515;
      }
      uint64_t v144 = v57[12];
      uint64_t v145 = (char *)a1 + v144;
      uint64_t v146 = (char *)a2 + v144;
      uint64_t v147 = type metadata accessor for Period();
      uint64_t v148 = *(void *)(v147 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
      }
      else
      {
        v532 = v57;
        if (v62(v146, 1, v61))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v145, v146, *(void *)(*(void *)(v150 - 8) + 64));
        }
        else
        {
          *uint64_t v145 = *v146;
          *((void *)v145 + 1) = *((void *)v146 + 1);
          *((_DWORD *)v145 + 4) = *((_DWORD *)v146 + 4);
          uint64_t v156 = *((void *)v146 + 7);
          uint64_t v517 = v62;
          uint64_t v507 = v148;
          if (v156 == 1)
          {
            long long v157 = *(_OWORD *)(v146 + 40);
            *(_OWORD *)(v145 + 24) = *(_OWORD *)(v146 + 24);
            *(_OWORD *)(v145 + 40) = v157;
            *((void *)v145 + 7) = *((void *)v146 + 7);
          }
          else
          {
            v145[24] = v146[24];
            *(_WORD *)(v145 + 25) = *(_WORD *)(v146 + 25);
            *(_OWORD *)(v145 + 28) = *(_OWORD *)(v146 + 28);
            *((_DWORD *)v145 + 11) = *((_DWORD *)v146 + 11);
            *((void *)v145 + 6) = *((void *)v146 + 6);
            *((void *)v145 + 7) = v156;
            swift_bridgeObjectRetain();
          }
          uint64_t v176 = *(int *)(v61 + 28);
          v177 = &v145[v176];
          uint64_t v178 = &v146[v176];
          uint64_t v179 = sub_23309B300();
          uint64_t v180 = *(void *)(v179 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v180 + 48))(v178, 1, v179))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v177, v178, *(void *)(*(void *)(v181 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v180 + 16))(v177, v178, v179);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
          }
          uint64_t v302 = *(int *)(v61 + 32);
          uint64_t v303 = &v145[v302];
          v304 = &v146[v302];
          uint64_t v305 = v304[1];
          *uint64_t v303 = *v304;
          v303[1] = v305;
          uint64_t v306 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v536[7];
          swift_bridgeObjectRetain();
          v306(v145, 0, 1, v61);
          uint64_t v148 = v507;
          uint64_t v62 = v517;
        }
        uint64_t v307 = *(int *)(v147 + 20);
        uint64_t v308 = &v145[v307];
        uint64_t v309 = &v146[v307];
        if (v62(v309, 1, v61))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v308, v309, *(void *)(*(void *)(v310 - 8) + 64));
        }
        else
        {
          *uint64_t v308 = *v309;
          *((void *)v308 + 1) = *((void *)v309 + 1);
          *((_DWORD *)v308 + 4) = *((_DWORD *)v309 + 4);
          uint64_t v311 = *((void *)v309 + 7);
          v521 = v62;
          uint64_t v511 = v148;
          if (v311 == 1)
          {
            long long v312 = *(_OWORD *)(v309 + 40);
            *(_OWORD *)(v308 + 24) = *(_OWORD *)(v309 + 24);
            *(_OWORD *)(v308 + 40) = v312;
            *((void *)v308 + 7) = *((void *)v309 + 7);
          }
          else
          {
            v308[24] = v309[24];
            *(_WORD *)(v308 + 25) = *(_WORD *)(v309 + 25);
            *(_OWORD *)(v308 + 28) = *(_OWORD *)(v309 + 28);
            *((_DWORD *)v308 + 11) = *((_DWORD *)v309 + 11);
            *((void *)v308 + 6) = *((void *)v309 + 6);
            *((void *)v308 + 7) = v311;
            swift_bridgeObjectRetain();
          }
          uint64_t v313 = *(int *)(v61 + 28);
          __dstd = &v308[v313];
          uint64_t v314 = &v309[v313];
          uint64_t v315 = sub_23309B300();
          uint64_t v316 = *(void *)(v315 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v316 + 48))(v314, 1, v315))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstd, v314, *(void *)(*(void *)(v317 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v316 + 16))(__dstd, v314, v315);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v316 + 56))(__dstd, 0, 1, v315);
          }
          uint64_t v364 = *(int *)(v61 + 32);
          uint64_t v365 = &v308[v364];
          v366 = &v309[v364];
          uint64_t v367 = v366[1];
          *uint64_t v365 = *v366;
          v365[1] = v367;
          v368 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v536[7];
          swift_bridgeObjectRetain();
          v368(v308, 0, 1, v61);
          uint64_t v148 = v511;
          uint64_t v62 = v521;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
        uint64_t v57 = v532;
      }
      uint64_t v369 = v57[13];
      uint64_t v370 = (char *)a1 + v369;
      uint64_t v371 = (char *)a2 + v369;
      if (v62((char *)a2 + v369, 1, v61))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v370, v371, *(void *)(*(void *)(v372 - 8) + 64));
      }
      else
      {
        *uint64_t v370 = *v371;
        *((void *)v370 + 1) = *((void *)v371 + 1);
        *((_DWORD *)v370 + 4) = *((_DWORD *)v371 + 4);
        uint64_t v373 = *((void *)v371 + 7);
        if (v373 == 1)
        {
          long long v374 = *(_OWORD *)(v371 + 40);
          *(_OWORD *)(v370 + 24) = *(_OWORD *)(v371 + 24);
          *(_OWORD *)(v370 + 40) = v374;
          *((void *)v370 + 7) = *((void *)v371 + 7);
        }
        else
        {
          v370[24] = v371[24];
          *(_WORD *)(v370 + 25) = *(_WORD *)(v371 + 25);
          *(_OWORD *)(v370 + 28) = *(_OWORD *)(v371 + 28);
          *((_DWORD *)v370 + 11) = *((_DWORD *)v371 + 11);
          *((void *)v370 + 6) = *((void *)v371 + 6);
          *((void *)v370 + 7) = v373;
          swift_bridgeObjectRetain();
        }
        uint64_t v375 = *(int *)(v61 + 28);
        v376 = &v370[v375];
        v377 = &v371[v375];
        uint64_t v378 = sub_23309B300();
        uint64_t v379 = *(void *)(v378 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v379 + 48))(v377, 1, v378))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v376, v377, *(void *)(*(void *)(v380 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v379 + 16))(v376, v377, v378);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v379 + 56))(v376, 0, 1, v378);
        }
        uint64_t v381 = *(int *)(v61 + 32);
        uint64_t v382 = &v370[v381];
        uint64_t v383 = &v371[v381];
        uint64_t v384 = v383[1];
        *uint64_t v382 = *v383;
        v382[1] = v384;
        v385 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v536[7];
        swift_bridgeObjectRetain();
        v385(v370, 0, 1, v61);
      }
      *(void *)((char *)a1 + v57[14]) = *(void *)((char *)a2 + v57[14]);
      uint64_t v386 = v57[15];
      uint64_t v387 = (void *)((char *)a1 + v386);
      v388 = (void *)((char *)a2 + v386);
      uint64_t v389 = v388[1];
      *uint64_t v387 = *v388;
      v387[1] = v389;
      uint64_t v390 = v57[16];
      uint64_t v391 = (char *)a1 + v390;
      long long v392 = (char *)a2 + v390;
      uint64_t v393 = *(void *)((char *)a2 + v390 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v393 == 1)
      {
        *(_OWORD *)uint64_t v391 = *(_OWORD *)v392;
        *((void *)v391 + 2) = *((void *)v392 + 2);
      }
      else
      {
        *(void *)uint64_t v391 = *(void *)v392;
        *((void *)v391 + 1) = v393;
        *((void *)v391 + 2) = *((void *)v392 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v394 = v57[17];
      v395 = (void *)((char *)a1 + v394);
      uint64_t v396 = (void *)((char *)a2 + v394);
      uint64_t v397 = type metadata accessor for Quantity();
      uint64_t v398 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v397 - 8);
      if (v398[6](v396, 1, v397))
      {
        sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
        memcpy(v395, v396, *(void *)(*(void *)(v399 - 8) + 64));
      }
      else
      {
        v540 = v398;
        *(_OWORD *)v395 = *(_OWORD *)v396;
        *(void *)((char *)v395 + 13) = *(void *)((char *)v396 + 13);
        uint64_t v400 = v396[4];
        v395[3] = v396[3];
        v395[4] = v400;
        uint64_t v401 = v396[6];
        v395[5] = v396[5];
        v395[6] = v401;
        uint64_t v402 = *(int *)(v397 + 28);
        v522 = (char *)v396 + v402;
        v528 = (char *)v395 + v402;
        uint64_t v403 = sub_23309AF80();
        uint64_t v404 = *(void *)(v403 - 8);
        v512 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v404 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v512(v522, 1, v403))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v528, v522, *(void *)(*(void *)(v405 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v404 + 16))(v528, v522, v403);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v404 + 56))(v528, 0, 1, v403);
        }
        uint64_t v406 = *(int *)(v397 + 32);
        uint64_t v407 = (void *)((char *)v395 + v406);
        v408 = (void *)((char *)v396 + v406);
        uint64_t v409 = v408[1];
        *uint64_t v407 = *v408;
        v407[1] = v409;
        uint64_t v410 = (void (*)(void *, void, uint64_t, uint64_t))v540[7];
        swift_bridgeObjectRetain();
        v410(v395, 0, 1, v397);
      }
      *(void *)((char *)a1 + v57[18]) = *(void *)((char *)a2 + v57[18]);
      uint64_t v411 = v57[19];
      uint64_t v412 = (void *)((char *)a1 + v411);
      long long v413 = (void *)((char *)a2 + v411);
      uint64_t v414 = v413[1];
      *uint64_t v412 = *v413;
      v412[1] = v414;
      goto LABEL_230;
    case 5u:
      uint64_t v45 = a2[1];
      *a1 = *a2;
      a1[1] = v45;
      uint64_t v46 = a2[3];
      a1[2] = a2[2];
      a1[3] = v46;
      a1[4] = a2[4];
      *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
      uint64_t v47 = a2[7];
      a1[6] = a2[6];
      a1[7] = v47;
      uint64_t v48 = a2[9];
      a1[8] = a2[8];
      a1[9] = v48;
      uint64_t v49 = a2[11];
      a1[10] = a2[10];
      a1[11] = v49;
      uint64_t v50 = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v50 == 1)
      {
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        a1[14] = a2[14];
      }
      else
      {
        a1[12] = a2[12];
        a1[13] = v50;
        a1[14] = a2[14];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v64 = a2[16];
      a1[15] = a2[15];
      a1[16] = v64;
      a1[17] = a2[17];
      goto LABEL_230;
    case 6u:
      uint64_t v51 = a2[1];
      *a1 = *a2;
      a1[1] = v51;
      uint64_t v52 = a2[3];
      a1[2] = a2[2];
      a1[3] = v52;
      uint64_t v53 = a2[4];
      uint64_t v54 = a2[5];
      a1[4] = v53;
      a1[5] = v54;
      goto LABEL_229;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = a2[3];
      a1[2] = a2[2];
      a1[3] = v5;
      a1[4] = a2[4];
LABEL_229:
      swift_bridgeObjectRetain();
LABEL_230:
      swift_bridgeObjectRetain();
LABEL_231:
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
  }
}

void *assignWithCopy for ModelsDSTU2.ResourceProxy(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_232F7CB8C((uint64_t)a1, type metadata accessor for ModelsDSTU2.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = a2[2];
        swift_bridgeObjectRetain();
        if (v4 != 1) {
          swift_bridgeObjectRetain();
        }
        a1[2] = v4;
        uint64_t v5 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v6 = v5[6];
        uint64_t v7 = (void *)((char *)a1 + v6);
        uint64_t v8 = (void *)((char *)a2 + v6);
        uint64_t v9 = type metadata accessor for Reference();
        uint64_t v10 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v9 - 8);
        v512 = v5;
        if (v10[6](v8, 1, v9))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          uint64_t v507 = (void (**)(void *, void, uint64_t, uint64_t))v10;
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          uint64_t v40 = *(int *)(v9 + 24);
          uint64_t v491 = v7;
          uint64_t v501 = (void *)((char *)v7 + v40);
          uint64_t v41 = (void *)((char *)v8 + v40);
          uint64_t v42 = type metadata accessor for Identifier();
          uint64_t v43 = *(void *)(v42 - 8);
          uint64_t v44 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v44(v41, 1, v42))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v501, v41, *(void *)(*(void *)(v45 - 8) + 64));
            uint64_t v46 = v491;
          }
          else
          {
            uint64_t v482 = v43;
            *uint64_t v501 = *v41;
            v501[1] = v41[1];
            uint64_t v77 = v41[3];
            swift_bridgeObjectRetain();
            if (v77 == 1)
            {
              long long v78 = *((_OWORD *)v41 + 1);
              v501[4] = v41[4];
              *((_OWORD *)v501 + 1) = v78;
            }
            else
            {
              v501[2] = v41[2];
              v501[3] = v41[3];
              v501[4] = v41[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v136 = (char *)v41;
            uint64_t v46 = v491;
            uint64_t v495 = (int *)v42;
            uint64_t v137 = *(int *)(v42 + 24);
            uint64_t v138 = (char *)v501 + v137;
            __dstb = v136;
            uint64_t v139 = &v136[v137];
            uint64_t v140 = sub_23309AF80();
            uint64_t v141 = *(void *)(v140 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
            }
            uint64_t v164 = v495[7];
            uint64_t v165 = (void *)((char *)v501 + v164);
            uint64_t v166 = &__dstb[v164];
            *uint64_t v165 = *(void *)v166;
            v165[1] = *((void *)v166 + 1);
            long long v167 = *(void (**)(void *, void, uint64_t, int *))(v482 + 56);
            swift_bridgeObjectRetain();
            v167(v501, 0, 1, v495);
          }
          v507[7](v46, 0, 1, v9);
        }
        uint64_t v168 = v5[7];
        uint64_t v169 = (char *)a1 + v168;
        uint64_t v170 = (char *)a2 + v168;
        uint64_t v171 = type metadata accessor for FHIRDateTime();
        uint64_t v172 = *(void **)(v171 - 8);
        uint64_t v511 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v172[6];
        if (v511(v170, 1, v171))
        {
          uint64_t v173 = v172;
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v169, v170, *(void *)(*(void *)(v174 - 8) + 64));
        }
        else
        {
          *uint64_t v169 = *v170;
          uint64_t v175 = *((void *)v170 + 1);
          *((_DWORD *)v169 + 4) = *((_DWORD *)v170 + 4);
          *((void *)v169 + 1) = v175;
          if (*((void *)v170 + 7) == 1)
          {
            long long v176 = *(_OWORD *)(v170 + 24);
            long long v177 = *(_OWORD *)(v170 + 40);
            *((void *)v169 + 7) = *((void *)v170 + 7);
            *(_OWORD *)(v169 + 24) = v176;
            *(_OWORD *)(v169 + 40) = v177;
          }
          else
          {
            v169[24] = v170[24];
            v169[25] = v170[25];
            v169[26] = v170[26];
            long long v178 = *(_OWORD *)(v170 + 28);
            *((_DWORD *)v169 + 11) = *((_DWORD *)v170 + 11);
            *(_OWORD *)(v169 + 28) = v178;
            *((void *)v169 + 6) = *((void *)v170 + 6);
            *((void *)v169 + 7) = *((void *)v170 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v179 = *(int *)(v171 + 28);
          uint64_t v180 = &v169[v179];
          uint64_t v181 = &v170[v179];
          uint64_t v182 = sub_23309B300();
          uint64_t v183 = *(void *)(v182 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v183 + 16))(v180, v181, v182);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v183 + 56))(v180, 0, 1, v182);
          }
          uint64_t v5 = v512;
          uint64_t v185 = *(int *)(v171 + 32);
          uint64_t v186 = &v169[v185];
          uint64_t v187 = &v170[v185];
          *uint64_t v186 = *v187;
          v186[1] = v187[1];
          uint64_t v173 = v172;
          uint64_t v188 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v172[7];
          swift_bridgeObjectRetain();
          v188(v169, 0, 1, v171);
        }
        uint64_t v189 = v5[8];
        uint64_t v190 = (void *)((char *)a1 + v189);
        uint64_t v191 = (void *)((char *)a2 + v189);
        *uint64_t v190 = *v191;
        v190[1] = v191[1];
        v190[2] = v191[2];
        uint64_t v192 = v5[9];
        long long v193 = (char *)a1 + v192;
        uint64_t v194 = (char *)a2 + v192;
        uint64_t v195 = *(void *)((char *)a2 + v192 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v195 == 1)
        {
          long long v196 = *(_OWORD *)v194;
          *((void *)v193 + 2) = *((void *)v194 + 2);
          *(_OWORD *)long long v193 = v196;
        }
        else
        {
          *(void *)long long v193 = *(void *)v194;
          *((void *)v193 + 1) = *((void *)v194 + 1);
          *((void *)v193 + 2) = *((void *)v194 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v197 = v5[10];
        uint64_t v198 = (void *)((char *)a1 + v197);
        uint64_t v199 = (void *)((char *)a2 + v197);
        *uint64_t v198 = *v199;
        v198[1] = v199[1];
        uint64_t v200 = v5[11];
        uint64_t v201 = (void *)((char *)a1 + v200);
        long long v202 = (void *)((char *)a2 + v200);
        void *v201 = *v202;
        v201[1] = v202[1];
        uint64_t v203 = v5[12];
        uint64_t v204 = (char *)a1 + v203;
        uint64_t v205 = (char *)a2 + v203;
        uint64_t v206 = *(void *)((char *)a2 + v203 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v496 = v173;
        if (v206 == 1)
        {
          long long v207 = *(_OWORD *)v205;
          *((void *)v204 + 2) = *((void *)v205 + 2);
          *(_OWORD *)uint64_t v204 = v207;
        }
        else
        {
          *(void *)uint64_t v204 = *(void *)v205;
          *((void *)v204 + 1) = *((void *)v205 + 1);
          *((void *)v204 + 2) = *((void *)v205 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v208 = v511;
        *(void *)((char *)a1 + v5[13]) = *(void *)((char *)a2 + v5[13]);
        uint64_t v209 = v5[14];
        uint64_t v210 = (char *)a1 + v209;
        uint64_t v211 = (char *)a2 + v209;
        swift_bridgeObjectRetain();
        if (v511(v211, 1, v171))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v210, v211, *(void *)(*(void *)(v212 - 8) + 64));
        }
        else
        {
          unsigned char *v210 = *v211;
          uint64_t v213 = *((void *)v211 + 1);
          *((_DWORD *)v210 + 4) = *((_DWORD *)v211 + 4);
          *((void *)v210 + 1) = v213;
          if (*((void *)v211 + 7) == 1)
          {
            long long v214 = *(_OWORD *)(v211 + 24);
            long long v215 = *(_OWORD *)(v211 + 40);
            *((void *)v210 + 7) = *((void *)v211 + 7);
            *(_OWORD *)(v210 + 24) = v214;
            *(_OWORD *)(v210 + 40) = v215;
          }
          else
          {
            v210[24] = v211[24];
            v210[25] = v211[25];
            v210[26] = v211[26];
            long long v216 = *(_OWORD *)(v211 + 28);
            *((_DWORD *)v210 + 11) = *((_DWORD *)v211 + 11);
            *(_OWORD *)(v210 + 28) = v216;
            *((void *)v210 + 6) = *((void *)v211 + 6);
            *((void *)v210 + 7) = *((void *)v211 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v217 = *(int *)(v171 + 28);
          uint64_t v218 = &v210[v217];
          uint64_t v219 = &v211[v217];
          uint64_t v220 = sub_23309B300();
          uint64_t v221 = *(void *)(v220 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v218, v219, *(void *)(*(void *)(v222 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v221 + 16))(v218, v219, v220);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
          }
          uint64_t v5 = v512;
          uint64_t v223 = *(int *)(v171 + 32);
          uint64_t v224 = &v210[v223];
          v225 = &v211[v223];
          *uint64_t v224 = *v225;
          v224[1] = v225[1];
          uint64_t v226 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
          swift_bridgeObjectRetain();
          v226(v210, 0, 1, v171);
          uint64_t v208 = v511;
        }
        uint64_t v227 = v5[15];
        uint64_t v228 = (char *)a1 + v227;
        uint64_t v229 = (char *)a2 + v227;
        uint64_t v230 = type metadata accessor for Period();
        __srcb = *(void **)(v230 - 8);
        uint64_t v486 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__srcb[6];
        if (v486(v229, 1, v230))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v228, v229, *(void *)(*(void *)(v231 - 8) + 64));
        }
        else
        {
          if (v208(v229, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v228, v229, *(void *)(*(void *)(v232 - 8) + 64));
          }
          else
          {
            unsigned char *v228 = *v229;
            uint64_t v233 = *((void *)v229 + 1);
            *((_DWORD *)v228 + 4) = *((_DWORD *)v229 + 4);
            *((void *)v228 + 1) = v233;
            if (*((void *)v229 + 7) == 1)
            {
              long long v234 = *(_OWORD *)(v229 + 24);
              long long v235 = *(_OWORD *)(v229 + 40);
              *((void *)v228 + 7) = *((void *)v229 + 7);
              *(_OWORD *)(v228 + 24) = v234;
              *(_OWORD *)(v228 + 40) = v235;
            }
            else
            {
              v228[24] = v229[24];
              v228[25] = v229[25];
              v228[26] = v229[26];
              long long v236 = *(_OWORD *)(v229 + 28);
              *((_DWORD *)v228 + 11) = *((_DWORD *)v229 + 11);
              *(_OWORD *)(v228 + 28) = v236;
              *((void *)v228 + 6) = *((void *)v229 + 6);
              *((void *)v228 + 7) = *((void *)v229 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v237 = *(int *)(v171 + 28);
            uint64_t v471 = &v228[v237];
            uint64_t v238 = &v229[v237];
            uint64_t v239 = sub_23309B300();
            uint64_t v240 = *(void *)(v239 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v471, v238, *(void *)(*(void *)(v241 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v240 + 16))(v471, v238, v239);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v240 + 56))(v471, 0, 1, v239);
            }
            uint64_t v301 = *(int *)(v171 + 32);
            uint64_t v302 = &v228[v301];
            uint64_t v303 = &v229[v301];
            *uint64_t v302 = *v303;
            v302[1] = v303[1];
            v304 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
            swift_bridgeObjectRetain();
            v304(v228, 0, 1, v171);
            uint64_t v208 = v511;
          }
          uint64_t v305 = *(int *)(v230 + 20);
          uint64_t v306 = &v228[v305];
          uint64_t v307 = &v229[v305];
          if (v208(v307, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v306, v307, *(void *)(*(void *)(v308 - 8) + 64));
          }
          else
          {
            *uint64_t v306 = *v307;
            uint64_t v309 = *((void *)v307 + 1);
            *((_DWORD *)v306 + 4) = *((_DWORD *)v307 + 4);
            *((void *)v306 + 1) = v309;
            if (*((void *)v307 + 7) == 1)
            {
              long long v310 = *(_OWORD *)(v307 + 24);
              long long v311 = *(_OWORD *)(v307 + 40);
              *((void *)v306 + 7) = *((void *)v307 + 7);
              *(_OWORD *)(v306 + 24) = v310;
              *(_OWORD *)(v306 + 40) = v311;
            }
            else
            {
              v306[24] = v307[24];
              v306[25] = v307[25];
              v306[26] = v307[26];
              long long v312 = *(_OWORD *)(v307 + 28);
              *((_DWORD *)v306 + 11) = *((_DWORD *)v307 + 11);
              *(_OWORD *)(v306 + 28) = v312;
              *((void *)v306 + 6) = *((void *)v307 + 6);
              *((void *)v306 + 7) = *((void *)v307 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v313 = *(int *)(v171 + 28);
            v472 = &v306[v313];
            uint64_t v314 = &v307[v313];
            uint64_t v315 = sub_23309B300();
            uint64_t v316 = *(void *)(v315 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v316 + 48))(v314, 1, v315))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v472, v314, *(void *)(*(void *)(v317 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v316 + 16))(v472, v314, v315);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v316 + 56))(v472, 0, 1, v315);
            }
            uint64_t v395 = *(int *)(v171 + 32);
            uint64_t v396 = &v306[v395];
            uint64_t v397 = &v307[v395];
            *uint64_t v396 = *v397;
            v396[1] = v397[1];
            uint64_t v398 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
            swift_bridgeObjectRetain();
            v398(v306, 0, 1, v171);
            uint64_t v208 = v511;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__srcb[7])(v228, 0, 1, v230);
          uint64_t v5 = v512;
        }
        uint64_t v399 = v5[16];
        uint64_t v400 = (void *)((char *)a1 + v399);
        uint64_t v401 = (void *)((char *)a2 + v399);
        void *v400 = *v401;
        v400[1] = v401[1];
        uint64_t v402 = v5[17];
        uint64_t v403 = (char *)a1 + v402;
        uint64_t v404 = (char *)a2 + v402;
        swift_bridgeObjectRetain();
        if (v208(v404, 1, v171))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v403, v404, *(void *)(*(void *)(v405 - 8) + 64));
        }
        else
        {
          *uint64_t v403 = *v404;
          uint64_t v406 = *((void *)v404 + 1);
          *((_DWORD *)v403 + 4) = *((_DWORD *)v404 + 4);
          *((void *)v403 + 1) = v406;
          uint64_t v407 = v230;
          if (*((void *)v404 + 7) == 1)
          {
            long long v408 = *(_OWORD *)(v404 + 24);
            long long v409 = *(_OWORD *)(v404 + 40);
            *((void *)v403 + 7) = *((void *)v404 + 7);
            *(_OWORD *)(v403 + 24) = v408;
            *(_OWORD *)(v403 + 40) = v409;
          }
          else
          {
            v403[24] = v404[24];
            v403[25] = v404[25];
            v403[26] = v404[26];
            long long v410 = *(_OWORD *)(v404 + 28);
            *((_DWORD *)v403 + 11) = *((_DWORD *)v404 + 11);
            *(_OWORD *)(v403 + 28) = v410;
            *((void *)v403 + 6) = *((void *)v404 + 6);
            *((void *)v403 + 7) = *((void *)v404 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v411 = *(int *)(v171 + 28);
          uint64_t v412 = &v403[v411];
          long long v413 = &v404[v411];
          uint64_t v414 = sub_23309B300();
          uint64_t v415 = *(void *)(v414 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v415 + 48))(v413, 1, v414))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v412, v413, *(void *)(*(void *)(v416 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v415 + 16))(v412, v413, v414);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v415 + 56))(v412, 0, 1, v414);
          }
          uint64_t v230 = v407;
          uint64_t v417 = *(int *)(v171 + 32);
          uint64_t v418 = &v403[v417];
          uint64_t v419 = &v404[v417];
          *uint64_t v418 = *v419;
          v418[1] = v419[1];
          uint64_t v420 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
          swift_bridgeObjectRetain();
          v420(v403, 0, 1, v171);
          uint64_t v208 = v511;
          uint64_t v5 = v512;
        }
        uint64_t v421 = v5[18];
        v422 = (char *)a1 + v421;
        uint64_t v423 = (char *)a2 + v421;
        if (v486((unsigned char *)a2 + v421, 1, v230))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v422, v423, *(void *)(*(void *)(v424 - 8) + 64));
        }
        else
        {
          if (v208(v423, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v422, v423, *(void *)(*(void *)(v425 - 8) + 64));
          }
          else
          {
            unsigned char *v422 = *v423;
            uint64_t v426 = *((void *)v423 + 1);
            *((_DWORD *)v422 + 4) = *((_DWORD *)v423 + 4);
            *((void *)v422 + 1) = v426;
            uint64_t v427 = v230;
            if (*((void *)v423 + 7) == 1)
            {
              long long v428 = *(_OWORD *)(v423 + 24);
              long long v429 = *(_OWORD *)(v423 + 40);
              *((void *)v422 + 7) = *((void *)v423 + 7);
              *(_OWORD *)(v422 + 24) = v428;
              *(_OWORD *)(v422 + 40) = v429;
            }
            else
            {
              v422[24] = v423[24];
              v422[25] = v423[25];
              v422[26] = v423[26];
              long long v430 = *(_OWORD *)(v423 + 28);
              *((_DWORD *)v422 + 11) = *((_DWORD *)v423 + 11);
              *(_OWORD *)(v422 + 28) = v430;
              *((void *)v422 + 6) = *((void *)v423 + 6);
              *((void *)v422 + 7) = *((void *)v423 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v431 = *(int *)(v171 + 28);
            v432 = &v422[v431];
            uint64_t v433 = &v423[v431];
            uint64_t v434 = sub_23309B300();
            uint64_t v435 = *(void *)(v434 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v435 + 48))(v433, 1, v434))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v432, v433, *(void *)(*(void *)(v436 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v435 + 16))(v432, v433, v434);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v435 + 56))(v432, 0, 1, v434);
            }
            uint64_t v230 = v427;
            uint64_t v437 = *(int *)(v171 + 32);
            v438 = &v422[v437];
            uint64_t v439 = &v423[v437];
            void *v438 = *v439;
            v438[1] = v439[1];
            v440 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
            swift_bridgeObjectRetain();
            v440(v422, 0, 1, v171);
            uint64_t v208 = v511;
          }
          uint64_t v441 = *(int *)(v230 + 20);
          v442 = &v422[v441];
          v443 = &v423[v441];
          if (v208(v443, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v442, v443, *(void *)(*(void *)(v444 - 8) + 64));
          }
          else
          {
            unsigned char *v442 = *v443;
            uint64_t v445 = *((void *)v443 + 1);
            *((_DWORD *)v442 + 4) = *((_DWORD *)v443 + 4);
            *((void *)v442 + 1) = v445;
            uint64_t v469 = (void *)v230;
            if (*((void *)v443 + 7) == 1)
            {
              long long v446 = *(_OWORD *)(v443 + 24);
              long long v447 = *(_OWORD *)(v443 + 40);
              *((void *)v442 + 7) = *((void *)v443 + 7);
              *(_OWORD *)(v442 + 24) = v446;
              *(_OWORD *)(v442 + 40) = v447;
            }
            else
            {
              v442[24] = v443[24];
              v442[25] = v443[25];
              v442[26] = v443[26];
              long long v448 = *(_OWORD *)(v443 + 28);
              *((_DWORD *)v442 + 11) = *((_DWORD *)v443 + 11);
              *(_OWORD *)(v442 + 28) = v448;
              *((void *)v442 + 6) = *((void *)v443 + 6);
              *((void *)v442 + 7) = *((void *)v443 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v449 = *(int *)(v171 + 28);
            uint64_t v450 = &v442[v449];
            uint64_t v451 = &v443[v449];
            uint64_t v452 = sub_23309B300();
            uint64_t v453 = *(void *)(v452 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v453 + 48))(v451, 1, v452))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v450, v451, *(void *)(*(void *)(v454 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v453 + 16))(v450, v451, v452);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v453 + 56))(v450, 0, 1, v452);
            }
            uint64_t v230 = (uint64_t)v469;
            uint64_t v455 = *(int *)(v171 + 32);
            uint64_t v456 = &v442[v455];
            uint64_t v457 = &v443[v455];
            *uint64_t v456 = *v457;
            v456[1] = v457[1];
            uint64_t v458 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v496[7];
            swift_bridgeObjectRetain();
            v458(v442, 0, 1, v171);
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__srcb[7])(v422, 0, 1, v230);
          uint64_t v5 = v512;
        }
        uint64_t v459 = v5[19];
        v460 = (void *)((char *)a1 + v459);
        uint64_t v461 = (void *)((char *)a2 + v459);
        void *v460 = *v461;
        v460[1] = v461[1];
        uint64_t v462 = v5[20];
        uint64_t v463 = (void *)((char *)a1 + v462);
        long long v464 = (void *)((char *)a2 + v462);
        *uint64_t v463 = *v464;
        v463[1] = v464[1];
        uint64_t v465 = v5[21];
        uint64_t v466 = (void *)((char *)a1 + v465);
        uint64_t v467 = (void *)((char *)a2 + v465);
        *uint64_t v466 = *v467;
        v466[1] = v467[1];
        goto LABEL_230;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        v500 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v12 = v500[9];
        __dst = (char *)a1 + v12;
        uint64_t v13 = (char *)a2 + v12;
        uint64_t v14 = type metadata accessor for FHIRDateTime();
        uint64_t v490 = *(void **)(v14 - 8);
        uint64_t v15 = (unsigned int (*)(void, void, void))v490[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v506 = (int *)v14;
        if (v15(v13, 1, v14))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
          uint64_t v17 = v500;
        }
        else
        {
          unsigned char *__dst = *v13;
          uint64_t v47 = *((void *)v13 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v13 + 4);
          *((void *)__dst + 1) = v47;
          __src = v15;
          if (*((void *)v13 + 7) == 1)
          {
            long long v48 = *(_OWORD *)(v13 + 24);
            long long v49 = *(_OWORD *)(v13 + 40);
            *((void *)__dst + 7) = *((void *)v13 + 7);
            *(_OWORD *)(__dst + 24) = v48;
            *(_OWORD *)(__dst + 40) = v49;
          }
          else
          {
            __dst[24] = v13[24];
            __dst[25] = v13[25];
            __dst[26] = v13[26];
            long long v56 = *(_OWORD *)(v13 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v13 + 11);
            *(_OWORD *)(__dst + 28) = v56;
            *((void *)__dst + 6) = *((void *)v13 + 6);
            *((void *)__dst + 7) = *((void *)v13 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v17 = v500;
          uint64_t v57 = *(int *)(v14 + 28);
          uint64_t v58 = &__dst[v57];
          uint64_t v59 = v13;
          uint64_t v60 = &v13[v57];
          uint64_t v61 = sub_23309B300();
          uint64_t v62 = *(void *)(v61 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v58, v60, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v62 + 16))(v58, v60, v61);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
          }
          uint64_t v79 = v506[8];
          uint64_t v80 = &__dst[v79];
          long long v81 = &v59[v79];
          *uint64_t v80 = *v81;
          v80[1] = v81[1];
          uint64_t v82 = (void (*)(unsigned char *, void, uint64_t, int *))v490[7];
          swift_bridgeObjectRetain();
          v82(__dst, 0, 1, v506);
          uint64_t v15 = (unsigned int (*)(void, void, void))__src;
        }
        uint64_t v83 = v17[10];
        uint64_t v84 = (char *)a1 + v83;
        uint64_t v85 = (char *)a2 + v83;
        uint64_t v86 = type metadata accessor for Period();
        uint64_t v87 = *(void *)(v86 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
          uint64_t v89 = v506;
        }
        else
        {
          uint64_t v89 = v506;
          if (v15(v85, 1, v506))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v84, v85, *(void *)(*(void *)(v90 - 8) + 64));
          }
          else
          {
            unsigned char *v84 = *v85;
            uint64_t v127 = *((void *)v85 + 1);
            *((_DWORD *)v84 + 4) = *((_DWORD *)v85 + 4);
            *((void *)v84 + 1) = v127;
            uint64_t v484 = v87;
            if (*((void *)v85 + 7) == 1)
            {
              long long v128 = *(_OWORD *)(v85 + 24);
              long long v129 = *(_OWORD *)(v85 + 40);
              *((void *)v84 + 7) = *((void *)v85 + 7);
              *(_OWORD *)(v84 + 24) = v128;
              *(_OWORD *)(v84 + 40) = v129;
            }
            else
            {
              v84[24] = v85[24];
              v84[25] = v85[25];
              v84[26] = v85[26];
              long long v143 = *(_OWORD *)(v85 + 28);
              *((_DWORD *)v84 + 11) = *((_DWORD *)v85 + 11);
              *(_OWORD *)(v84 + 28) = v143;
              *((void *)v84 + 6) = *((void *)v85 + 6);
              *((void *)v84 + 7) = *((void *)v85 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v144 = v506[7];
            uint64_t v145 = &v84[v144];
            uint64_t v146 = &v85[v144];
            uint64_t v147 = sub_23309B300();
            uint64_t v148 = *(void *)(v147 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v148 + 16))(v145, v146, v147);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
            }
            uint64_t v242 = v506[8];
            uint64_t v243 = &v84[v242];
            uint64_t v244 = &v85[v242];
            *uint64_t v243 = *v244;
            v243[1] = v244[1];
            v245 = (void (*)(unsigned char *, void, uint64_t, int *))v490[7];
            swift_bridgeObjectRetain();
            v245(v84, 0, 1, v506);
            uint64_t v89 = v506;
            uint64_t v87 = v484;
          }
          uint64_t v246 = *(int *)(v86 + 20);
          uint64_t v247 = &v84[v246];
          uint64_t v248 = &v85[v246];
          if (v15(v248, 1, v89))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v247, v248, *(void *)(*(void *)(v249 - 8) + 64));
          }
          else
          {
            unsigned char *v247 = *v248;
            uint64_t v250 = *((void *)v248 + 1);
            *((_DWORD *)v247 + 4) = *((_DWORD *)v248 + 4);
            *((void *)v247 + 1) = v250;
            uint64_t v487 = v87;
            if (*((void *)v248 + 7) == 1)
            {
              long long v251 = *(_OWORD *)(v248 + 24);
              long long v252 = *(_OWORD *)(v248 + 40);
              *((void *)v247 + 7) = *((void *)v248 + 7);
              *(_OWORD *)(v247 + 24) = v251;
              *(_OWORD *)(v247 + 40) = v252;
            }
            else
            {
              v247[24] = v248[24];
              v247[25] = v248[25];
              v247[26] = v248[26];
              long long v253 = *(_OWORD *)(v248 + 28);
              *((_DWORD *)v247 + 11) = *((_DWORD *)v248 + 11);
              *(_OWORD *)(v247 + 28) = v253;
              *((void *)v247 + 6) = *((void *)v248 + 6);
              *((void *)v247 + 7) = *((void *)v248 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v254 = v89[7];
            __dstc = &v247[v254];
            uint64_t v255 = &v248[v254];
            uint64_t v256 = sub_23309B300();
            uint64_t v257 = *(void *)(v256 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v257 + 48))(v255, 1, v256))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dstc, v255, *(void *)(*(void *)(v258 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v257 + 16))(__dstc, v255, v256);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v257 + 56))(__dstc, 0, 1, v256);
            }
            uint64_t v318 = v506[8];
            v319 = &v247[v318];
            v320 = &v248[v318];
            void *v319 = *v320;
            v319[1] = v320[1];
            uint64_t v321 = (void (*)(unsigned char *, void, uint64_t, int *))v490[7];
            swift_bridgeObjectRetain();
            v321(v247, 0, 1, v506);
            uint64_t v89 = v506;
            uint64_t v87 = v487;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
          uint64_t v17 = v500;
        }
        uint64_t v322 = v17[11];
        uint64_t v323 = (char *)a1 + v322;
        v324 = (char *)a2 + v322;
        if (v15((char *)a2 + v322, 1, v89))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v323, v324, *(void *)(*(void *)(v325 - 8) + 64));
        }
        else
        {
          unsigned char *v323 = *v324;
          uint64_t v326 = *((void *)v324 + 1);
          *((_DWORD *)v323 + 4) = *((_DWORD *)v324 + 4);
          *((void *)v323 + 1) = v326;
          if (*((void *)v324 + 7) == 1)
          {
            long long v327 = *(_OWORD *)(v324 + 24);
            long long v328 = *(_OWORD *)(v324 + 40);
            *((void *)v323 + 7) = *((void *)v324 + 7);
            *(_OWORD *)(v323 + 24) = v327;
            *(_OWORD *)(v323 + 40) = v328;
          }
          else
          {
            v323[24] = v324[24];
            v323[25] = v324[25];
            v323[26] = v324[26];
            long long v329 = *(_OWORD *)(v324 + 28);
            *((_DWORD *)v323 + 11) = *((_DWORD *)v324 + 11);
            *(_OWORD *)(v323 + 28) = v329;
            *((void *)v323 + 6) = *((void *)v324 + 6);
            *((void *)v323 + 7) = *((void *)v324 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v330 = v89[7];
          uint64_t v331 = &v323[v330];
          uint64_t v332 = &v324[v330];
          uint64_t v333 = sub_23309B300();
          uint64_t v334 = *(void *)(v333 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v334 + 48))(v332, 1, v333))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v331, v332, *(void *)(*(void *)(v335 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v334 + 16))(v331, v332, v333);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v334 + 56))(v331, 0, 1, v333);
          }
          uint64_t v336 = v506[8];
          uint64_t v337 = &v323[v336];
          uint64_t v338 = &v324[v336];
          *uint64_t v337 = *v338;
          v337[1] = v338[1];
          uint64_t v339 = (void (*)(unsigned char *, void, uint64_t, int *))v490[7];
          swift_bridgeObjectRetain();
          v339(v323, 0, 1, v506);
        }
        uint64_t v340 = v17[12];
        goto LABEL_173;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v18 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v18 != 1) {
          swift_bridgeObjectRetain();
        }
        a1[4] = v18;
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v19 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v20 = v19[8];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for FHIRDateTime();
        uint64_t v24 = *(void *)(v23 - 8);
        uint64_t v25 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
        swift_bridgeObjectRetain();
        if (v25(v22, 1, v23))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          *uint64_t v21 = *v22;
          uint64_t v50 = *((void *)v22 + 1);
          *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
          *((void *)v21 + 1) = v50;
          if (*((void *)v22 + 7) == 1)
          {
            long long v51 = *(_OWORD *)(v22 + 24);
            long long v52 = *(_OWORD *)(v22 + 40);
            *((void *)v21 + 7) = *((void *)v22 + 7);
            *(_OWORD *)(v21 + 24) = v51;
            *(_OWORD *)(v21 + 40) = v52;
          }
          else
          {
            v21[24] = v22[24];
            v21[25] = v22[25];
            v21[26] = v22[26];
            long long v64 = *(_OWORD *)(v22 + 28);
            *((_DWORD *)v21 + 11) = *((_DWORD *)v22 + 11);
            *(_OWORD *)(v21 + 28) = v64;
            *((void *)v21 + 6) = *((void *)v22 + 6);
            *((void *)v21 + 7) = *((void *)v22 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v65 = *(int *)(v23 + 28);
          uint64_t v508 = &v21[v65];
          uint64_t v66 = &v22[v65];
          uint64_t v67 = sub_23309B300();
          uint64_t v68 = *(void *)(v67 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v508, v66, *(void *)(*(void *)(v69 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v68 + 16))(v508, v66, v67);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v68 + 56))(v508, 0, 1, v67);
          }
          uint64_t v91 = *(int *)(v23 + 32);
          uint64_t v92 = &v21[v91];
          uint64_t v93 = &v22[v91];
          *uint64_t v92 = *v93;
          v92[1] = v93[1];
          uint64_t v94 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56);
          swift_bridgeObjectRetain();
          v94(v21, 0, 1, v23);
        }
        uint64_t v95 = v19[9];
        uint64_t v96 = (void *)((char *)a1 + v95);
        uint64_t v97 = (void *)((char *)a2 + v95);
        uint64_t v98 = *v97;
        *(void *)((char *)v96 + 5) = *(uint64_t *)((char *)v97 + 5);
        void *v96 = v98;
        *(void *)((char *)a1 + v19[10]) = *(void *)((char *)a2 + v19[10]);
        *((unsigned char *)a1 + v19[11]) = *((unsigned char *)a2 + v19[11]);
        *(void *)((char *)a1 + v19[12]) = *(void *)((char *)a2 + v19[12]);
        uint64_t v99 = v19[13];
        uint64_t v100 = (void *)((char *)a1 + v99);
        char v101 = (void *)((char *)a2 + v99);
        *uint64_t v100 = *v101;
        v100[1] = v101[1];
        v100[2] = v101[2];
        *((unsigned char *)a1 + v19[14]) = *((unsigned char *)a2 + v19[14]);
        v514 = v19;
        uint64_t v102 = v19[15];
        uint64_t v103 = (void *)((char *)a1 + v102);
        uint64_t v104 = (void *)((char *)a2 + v102);
        uint64_t v105 = type metadata accessor for Reference();
        uint64_t v509 = *(void **)(v105 - 8);
        uint64_t v106 = (unsigned int (*)(void, void, void))v509[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v106(v104, 1, v105))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
          uint64_t v108 = v514;
        }
        else
        {
          __dsta = v103;
          uint64_t v483 = v106;
          *uint64_t v103 = *v104;
          v103[1] = v104[1];
          v103[2] = v104[2];
          v103[3] = v104[3];
          uint64_t v109 = *(int *)(v105 + 24);
          uint64_t v493 = (void *)((char *)v103 + v109);
          uint64_t v502 = (void *)v105;
          uint64_t v110 = (void *)((char *)v104 + v109);
          uint64_t v111 = type metadata accessor for Identifier();
          uint64_t v112 = *(void **)(v111 - 8);
          uint64_t v113 = (unsigned int (*)(void *, uint64_t, uint64_t))v112[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v113(v110, 1, v111))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v493, v110, *(void *)(*(void *)(v114 - 8) + 64));
            uint64_t v105 = (uint64_t)v502;
            uint64_t v115 = __dsta;
            uint64_t v108 = v514;
          }
          else
          {
            uint64_t v470 = v112;
            __srca = (int *)v111;
            *uint64_t v493 = *v110;
            v493[1] = v110[1];
            uint64_t v130 = v110;
            uint64_t v131 = v110[3];
            swift_bridgeObjectRetain();
            uint64_t v108 = v514;
            if (v131 == 1)
            {
              long long v132 = *((_OWORD *)v130 + 1);
              v493[4] = v130[4];
              *((_OWORD *)v493 + 1) = v132;
            }
            else
            {
              v493[2] = v130[2];
              v493[3] = v130[3];
              v493[4] = v130[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v105 = (uint64_t)v502;
            uint64_t v150 = (char *)v130;
            uint64_t v151 = *(int *)(v111 + 24);
            long long v152 = (char *)v493 + v151;
            v503 = v150;
            uint64_t v153 = &v150[v151];
            uint64_t v154 = sub_23309AF80();
            uint64_t v155 = *(void *)(v154 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v152, v153, v154);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
            }
            uint64_t v259 = __srca[7];
            uint64_t v260 = (void *)((char *)v493 + v259);
            v261 = &v503[v259];
            *uint64_t v260 = *(void *)v261;
            v260[1] = *((void *)v261 + 1);
            uint64_t v262 = (void (*)(void *, void, uint64_t, int *))v470[7];
            swift_bridgeObjectRetain();
            v262(v493, 0, 1, __srca);
            uint64_t v115 = __dsta;
          }
          ((void (*)(void *, void, uint64_t, uint64_t))v509[7])(v115, 0, 1, v105);
          uint64_t v106 = v483;
        }
        uint64_t v263 = v108[16];
        v264 = (void *)((char *)a1 + v263);
        uint64_t v265 = (void *)((char *)a2 + v263);
        void *v264 = *v265;
        v264[1] = v265[1];
        uint64_t v266 = v108[17];
        long long v267 = (void *)((char *)a1 + v266);
        uint64_t v268 = (void *)((char *)a2 + v266);
        swift_bridgeObjectRetain();
        if (v106(v268, 1, v105))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v267, v268, *(void *)(*(void *)(v269 - 8) + 64));
        }
        else
        {
          *long long v267 = *v268;
          v267[1] = v268[1];
          v267[2] = v268[2];
          v267[3] = v268[3];
          uint64_t v270 = *(int *)(v105 + 24);
          uint64_t v497 = (void *)((char *)v267 + v270);
          uint64_t v504 = (void *)v105;
          uint64_t v271 = (void *)((char *)v268 + v270);
          uint64_t v272 = type metadata accessor for Identifier();
          uint64_t v273 = *(void *)(v272 - 8);
          uint64_t v274 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v273 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v274(v271, 1, v272))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v497, v271, *(void *)(*(void *)(v275 - 8) + 64));
          }
          else
          {
            *uint64_t v497 = *v271;
            v497[1] = v271[1];
            uint64_t v276 = v271[3];
            swift_bridgeObjectRetain();
            if (v276 == 1)
            {
              long long v277 = *((_OWORD *)v271 + 1);
              v497[4] = v271[4];
              *((_OWORD *)v497 + 1) = v277;
            }
            else
            {
              v497[2] = v271[2];
              v497[3] = v271[3];
              v497[4] = v271[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            __dstd = (int *)v272;
            uint64_t v278 = *(int *)(v272 + 24);
            uint64_t v279 = (char *)v497 + v278;
            uint64_t v280 = (char *)v271 + v278;
            uint64_t v281 = sub_23309AF80();
            uint64_t v282 = *(void *)(v281 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v279, v280, *(void *)(*(void *)(v283 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v279, v280, v281);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
            }
            uint64_t v341 = __dstd[7];
            uint64_t v342 = (void *)((char *)v497 + v341);
            long long v343 = (void *)((char *)v271 + v341);
            *uint64_t v342 = *v343;
            v342[1] = v343[1];
            uint64_t v344 = *(void (**)(void *, void, uint64_t, int *))(v273 + 56);
            swift_bridgeObjectRetain();
            v344(v497, 0, 1, __dstd);
          }
          ((void (*)(void *, void, uint64_t, void *))v509[7])(v267, 0, 1, v504);
          uint64_t v108 = v514;
        }
        uint64_t v340 = v108[18];
LABEL_173:
        v345 = (void *)((char *)a1 + v340);
        uint64_t v346 = (void *)((char *)a2 + v340);
        void *v345 = *v346;
        v345[1] = v346[1];
        goto LABEL_232;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v27 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v27 != 1) {
          swift_bridgeObjectRetain();
        }
        a1[4] = v27;
        a1[5] = a2[5];
        a1[6] = a2[6];
        uint64_t v28 = a2[8];
        swift_bridgeObjectRetain();
        if (v28 == 1)
        {
          long long v29 = *(_OWORD *)(a2 + 7);
          a1[9] = a2[9];
          *(_OWORD *)(a1 + 7) = v29;
        }
        else
        {
          a1[7] = a2[7];
          a1[8] = a2[8];
          a1[9] = a2[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        uint64_t v33 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v34 = v33[11];
        uint64_t v35 = (char *)a1 + v34;
        uint64_t v36 = (char *)a2 + v34;
        uint64_t v37 = type metadata accessor for FHIRDateTime();
        uint64_t v513 = *(void *)(v37 - 8);
        uint64_t v38 = *(unsigned int (**)(void, void, void))(v513 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v38(v36, 1, v37))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          *uint64_t v35 = *v36;
          uint64_t v53 = *((void *)v36 + 1);
          *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
          *((void *)v35 + 1) = v53;
          uint64_t v492 = v38;
          if (*((void *)v36 + 7) == 1)
          {
            long long v54 = *(_OWORD *)(v36 + 24);
            long long v55 = *(_OWORD *)(v36 + 40);
            *((void *)v35 + 7) = *((void *)v36 + 7);
            *(_OWORD *)(v35 + 24) = v54;
            *(_OWORD *)(v35 + 40) = v55;
          }
          else
          {
            v35[24] = v36[24];
            v35[25] = v36[25];
            v35[26] = v36[26];
            long long v70 = *(_OWORD *)(v36 + 28);
            *((_DWORD *)v35 + 11) = *((_DWORD *)v36 + 11);
            *(_OWORD *)(v35 + 28) = v70;
            *((void *)v35 + 6) = *((void *)v36 + 6);
            *((void *)v35 + 7) = *((void *)v36 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v71 = *(int *)(v37 + 28);
          uint64_t v72 = &v35[v71];
          uint64_t v73 = &v36[v71];
          uint64_t v74 = sub_23309B300();
          uint64_t v75 = *(void *)(v74 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v75 + 16))(v72, v73, v74);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
          }
          uint64_t v116 = *(int *)(v37 + 32);
          uint64_t v117 = &v35[v116];
          uint64_t v118 = &v36[v116];
          void *v117 = *v118;
          v117[1] = v118[1];
          uint64_t v119 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v513 + 56);
          swift_bridgeObjectRetain();
          v119(v35, 0, 1, v37);
          uint64_t v38 = (unsigned int (*)(void, void, void))v492;
        }
        uint64_t v120 = v33[12];
        uint64_t v121 = (char *)a1 + v120;
        uint64_t v122 = (char *)a2 + v120;
        uint64_t v123 = type metadata accessor for Period();
        uint64_t v124 = *(void *)(v123 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
        }
        else
        {
          uint64_t v510 = v33;
          if (v38(v122, 1, v37))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v121, v122, *(void *)(*(void *)(v126 - 8) + 64));
          }
          else
          {
            *uint64_t v121 = *v122;
            uint64_t v133 = *((void *)v122 + 1);
            *((_DWORD *)v121 + 4) = *((_DWORD *)v122 + 4);
            *((void *)v121 + 1) = v133;
            uint64_t v494 = v38;
            uint64_t v485 = v124;
            if (*((void *)v122 + 7) == 1)
            {
              long long v134 = *(_OWORD *)(v122 + 24);
              long long v135 = *(_OWORD *)(v122 + 40);
              *((void *)v121 + 7) = *((void *)v122 + 7);
              *(_OWORD *)(v121 + 24) = v134;
              *(_OWORD *)(v121 + 40) = v135;
            }
            else
            {
              v121[24] = v122[24];
              v121[25] = v122[25];
              v121[26] = v122[26];
              long long v157 = *(_OWORD *)(v122 + 28);
              *((_DWORD *)v121 + 11) = *((_DWORD *)v122 + 11);
              *(_OWORD *)(v121 + 28) = v157;
              *((void *)v121 + 6) = *((void *)v122 + 6);
              *((void *)v121 + 7) = *((void *)v122 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v158 = *(int *)(v37 + 28);
            uint64_t v159 = &v121[v158];
            uint64_t v160 = &v122[v158];
            uint64_t v161 = sub_23309B300();
            uint64_t v162 = *(void *)(v161 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v162 + 16))(v159, v160, v161);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
            }
            uint64_t v284 = *(int *)(v37 + 32);
            uint64_t v285 = &v121[v284];
            uint64_t v286 = &v122[v284];
            void *v285 = *v286;
            v285[1] = v286[1];
            uint64_t v287 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v513 + 56);
            swift_bridgeObjectRetain();
            v287(v121, 0, 1, v37);
            uint64_t v124 = v485;
            uint64_t v38 = (unsigned int (*)(void, void, void))v494;
          }
          uint64_t v288 = *(int *)(v123 + 20);
          uint64_t v289 = &v121[v288];
          uint64_t v290 = &v122[v288];
          if (v38(v290, 1, v37))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v289, v290, *(void *)(*(void *)(v291 - 8) + 64));
          }
          else
          {
            unsigned char *v289 = *v290;
            uint64_t v292 = *((void *)v290 + 1);
            *((_DWORD *)v289 + 4) = *((_DWORD *)v290 + 4);
            *((void *)v289 + 1) = v292;
            uint64_t v498 = v38;
            uint64_t v488 = v124;
            if (*((void *)v290 + 7) == 1)
            {
              long long v293 = *(_OWORD *)(v290 + 24);
              long long v294 = *(_OWORD *)(v290 + 40);
              *((void *)v289 + 7) = *((void *)v290 + 7);
              *(_OWORD *)(v289 + 24) = v293;
              *(_OWORD *)(v289 + 40) = v294;
            }
            else
            {
              v289[24] = v290[24];
              v289[25] = v290[25];
              v289[26] = v290[26];
              long long v295 = *(_OWORD *)(v290 + 28);
              *((_DWORD *)v289 + 11) = *((_DWORD *)v290 + 11);
              *(_OWORD *)(v289 + 28) = v295;
              *((void *)v289 + 6) = *((void *)v290 + 6);
              *((void *)v289 + 7) = *((void *)v290 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v296 = *(int *)(v37 + 28);
            __dste = &v289[v296];
            uint64_t v297 = &v290[v296];
            uint64_t v298 = sub_23309B300();
            uint64_t v299 = *(void *)(v298 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v299 + 48))(v297, 1, v298))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dste, v297, *(void *)(*(void *)(v300 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v299 + 16))(__dste, v297, v298);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v299 + 56))(__dste, 0, 1, v298);
            }
            uint64_t v347 = *(int *)(v37 + 32);
            uint64_t v348 = &v289[v347];
            uint64_t v349 = &v290[v347];
            *uint64_t v348 = *v349;
            v348[1] = v349[1];
            uint64_t v350 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v513 + 56);
            swift_bridgeObjectRetain();
            v350(v289, 0, 1, v37);
            uint64_t v124 = v488;
            uint64_t v38 = (unsigned int (*)(void, void, void))v498;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
          uint64_t v33 = v510;
        }
        uint64_t v351 = v33[13];
        v352 = (char *)a1 + v351;
        uint64_t v353 = (char *)a2 + v351;
        if (v38((char *)a2 + v351, 1, v37))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v352, v353, *(void *)(*(void *)(v354 - 8) + 64));
        }
        else
        {
          unsigned char *v352 = *v353;
          uint64_t v355 = *((void *)v353 + 1);
          *((_DWORD *)v352 + 4) = *((_DWORD *)v353 + 4);
          *((void *)v352 + 1) = v355;
          if (*((void *)v353 + 7) == 1)
          {
            long long v356 = *(_OWORD *)(v353 + 24);
            long long v357 = *(_OWORD *)(v353 + 40);
            *((void *)v352 + 7) = *((void *)v353 + 7);
            *(_OWORD *)(v352 + 24) = v356;
            *(_OWORD *)(v352 + 40) = v357;
          }
          else
          {
            v352[24] = v353[24];
            v352[25] = v353[25];
            v352[26] = v353[26];
            long long v358 = *(_OWORD *)(v353 + 28);
            *((_DWORD *)v352 + 11) = *((_DWORD *)v353 + 11);
            *(_OWORD *)(v352 + 28) = v358;
            *((void *)v352 + 6) = *((void *)v353 + 6);
            *((void *)v352 + 7) = *((void *)v353 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v359 = *(int *)(v37 + 28);
          uint64_t v360 = &v352[v359];
          uint64_t v361 = &v353[v359];
          uint64_t v362 = sub_23309B300();
          uint64_t v363 = *(void *)(v362 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v363 + 48))(v361, 1, v362))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v360, v361, *(void *)(*(void *)(v364 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v363 + 16))(v360, v361, v362);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v363 + 56))(v360, 0, 1, v362);
          }
          uint64_t v365 = *(int *)(v37 + 32);
          v366 = &v352[v365];
          uint64_t v367 = &v353[v365];
          void *v366 = *v367;
          v366[1] = v367[1];
          v368 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v513 + 56);
          swift_bridgeObjectRetain();
          v368(v352, 0, 1, v37);
        }
        *(void *)((char *)a1 + v33[14]) = *(void *)((char *)a2 + v33[14]);
        uint64_t v369 = v33[15];
        uint64_t v370 = (void *)((char *)a1 + v369);
        uint64_t v371 = (void *)((char *)a2 + v369);
        *uint64_t v370 = *v371;
        v370[1] = v371[1];
        uint64_t v372 = v33[16];
        uint64_t v373 = (char *)a1 + v372;
        long long v374 = (char *)a2 + v372;
        uint64_t v375 = *(void *)((char *)a2 + v372 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v375 == 1)
        {
          long long v376 = *(_OWORD *)v374;
          *((void *)v373 + 2) = *((void *)v374 + 2);
          *(_OWORD *)uint64_t v373 = v376;
        }
        else
        {
          *(void *)uint64_t v373 = *(void *)v374;
          *((void *)v373 + 1) = *((void *)v374 + 1);
          *((void *)v373 + 2) = *((void *)v374 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v377 = v33[17];
        uint64_t v378 = (void *)((char *)a1 + v377);
        uint64_t v379 = (void *)((char *)a2 + v377);
        uint64_t v380 = type metadata accessor for Quantity();
        uint64_t v381 = *(void *)(v380 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v381 + 48))(v379, 1, v380))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v378, v379, *(void *)(*(void *)(v382 - 8) + 64));
        }
        else
        {
          long long v383 = *(_OWORD *)v379;
          *(void *)((char *)v378 + 13) = *(void *)((char *)v379 + 13);
          *(_OWORD *)uint64_t v378 = v383;
          v378[3] = v379[3];
          v378[4] = v379[4];
          v378[5] = v379[5];
          v378[6] = v379[6];
          uint64_t v384 = *(int *)(v380 + 28);
          v499 = (char *)v379 + v384;
          uint64_t v505 = (char *)v378 + v384;
          uint64_t v385 = sub_23309AF80();
          uint64_t v386 = *(void *)(v385 - 8);
          uint64_t v489 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v386 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v489(v499, 1, v385))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v505, v499, *(void *)(*(void *)(v387 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v505, v499, v385);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v386 + 56))(v505, 0, 1, v385);
          }
          uint64_t v388 = *(int *)(v380 + 32);
          uint64_t v389 = (void *)((char *)v378 + v388);
          uint64_t v390 = (void *)((char *)v379 + v388);
          void *v389 = *v390;
          v389[1] = v390[1];
          uint64_t v391 = *(void (**)(void *, void, uint64_t, uint64_t))(v381 + 56);
          swift_bridgeObjectRetain();
          v391(v378, 0, 1, v380);
        }
        *(void *)((char *)a1 + v33[18]) = *(void *)((char *)a2 + v33[18]);
        uint64_t v392 = v33[19];
        uint64_t v393 = (void *)((char *)a1 + v392);
        uint64_t v394 = (void *)((char *)a2 + v392);
        *uint64_t v393 = *v394;
        v393[1] = v394[1];
        goto LABEL_231;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v30 = a2[4];
        *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
        a1[4] = v30;
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        uint64_t v31 = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 == 1)
        {
          long long v32 = *((_OWORD *)a2 + 6);
          a1[14] = a2[14];
          *((_OWORD *)a1 + 6) = v32;
        }
        else
        {
          a1[12] = a2[12];
          a1[13] = a2[13];
          a1[14] = a2[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        a1[15] = a2[15];
        a1[16] = a2[16];
        a1[17] = a2[17];
        goto LABEL_231;
      case 6u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        goto LABEL_230;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
LABEL_230:
        swift_bridgeObjectRetain();
LABEL_231:
        swift_bridgeObjectRetain();
LABEL_232:
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
  return a1;
}

char *initializeWithTake for ModelsDSTU2.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      uint64_t v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
      uint64_t v7 = v6[6];
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = type metadata accessor for Reference();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        long long v38 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *((_OWORD *)v8 + 1) = v38;
        uint64_t v39 = *(int *)(v10 + 24);
        uint64_t v40 = &v8[v39];
        uint64_t v41 = &v9[v39];
        uint64_t v42 = type metadata accessor for Identifier();
        uint64_t v43 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v42 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v43)[6](v41, 1, v42))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          uint64_t v298 = (void (**)(char *, void, uint64_t, uint64_t))v43;
          long long v61 = *((_OWORD *)v41 + 1);
          *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
          *((_OWORD *)v40 + 1) = v61;
          *((void *)v40 + 4) = *((void *)v41 + 4);
          uint64_t v62 = *(int *)(v42 + 24);
          __dstc = &v40[v62];
          uint64_t v63 = &v41[v62];
          uint64_t v64 = sub_23309AF80();
          uint64_t v290 = *(void *)(v64 - 8);
          uint64_t v305 = v63;
          uint64_t v65 = v63;
          uint64_t v66 = v64;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v290 + 48))(v65, 1, v64))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(__dstc, v305, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(v290 + 32))(__dstc, v305, v66);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v290 + 56))(__dstc, 0, 1, v66);
          }
          *(_OWORD *)&v40[*(int *)(v42 + 28)] = *(_OWORD *)&v41[*(int *)(v42 + 28)];
          v298[7](v40, 0, 1, v42);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      uint64_t v119 = v6[7];
      uint64_t v120 = &a1[v119];
      uint64_t v121 = &a2[v119];
      uint64_t v122 = type metadata accessor for FHIRDateTime();
      __dste = *(void **)(v122 - 8);
      uint64_t v123 = (unsigned int (*)(void, void, void))__dste[6];
      uint64_t v309 = v123;
      if (v123(v121, 1, v122))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
      }
      else
      {
        *uint64_t v120 = *v121;
        *((void *)v120 + 1) = *((void *)v121 + 1);
        *((_DWORD *)v120 + 4) = *((_DWORD *)v121 + 4);
        *(_OWORD *)(v120 + 24) = *(_OWORD *)(v121 + 24);
        *(_OWORD *)(v120 + 40) = *(_OWORD *)(v121 + 40);
        *((void *)v120 + 7) = *((void *)v121 + 7);
        uint64_t v125 = *(int *)(v122 + 28);
        uint64_t v126 = &v120[v125];
        uint64_t v127 = &v121[v125];
        uint64_t v128 = sub_23309B300();
        uint64_t v129 = *(void *)(v128 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v126, v127, v128);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
        }
        *(_OWORD *)&v120[*(int *)(v122 + 32)] = *(_OWORD *)&v121[*(int *)(v122 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v120, 0, 1, v122);
        uint64_t v123 = (unsigned int (*)(void, void, void))v309;
      }
      uint64_t v131 = v6[8];
      long long v132 = &a1[v131];
      uint64_t v133 = &a2[v131];
      *(_OWORD *)long long v132 = *(_OWORD *)v133;
      *((void *)v132 + 2) = *((void *)v133 + 2);
      uint64_t v134 = v6[9];
      long long v135 = &a1[v134];
      uint64_t v136 = &a2[v134];
      *((void *)v135 + 2) = *((void *)v136 + 2);
      *(_OWORD *)long long v135 = *(_OWORD *)v136;
      *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
      *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
      uint64_t v137 = v6[12];
      uint64_t v138 = &a1[v137];
      uint64_t v139 = &a2[v137];
      *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
      *((void *)v138 + 2) = *((void *)v139 + 2);
      *(void *)&a1[v6[13]] = *(void *)&a2[v6[13]];
      uint64_t v140 = v6[14];
      uint64_t v141 = &a1[v140];
      uint64_t v142 = &a2[v140];
      if (v123(&a2[v140], 1, v122))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v141, v142, *(void *)(*(void *)(v143 - 8) + 64));
      }
      else
      {
        *uint64_t v141 = *v142;
        *((void *)v141 + 1) = *((void *)v142 + 1);
        *((_DWORD *)v141 + 4) = *((_DWORD *)v142 + 4);
        *(_OWORD *)(v141 + 24) = *(_OWORD *)(v142 + 24);
        *(_OWORD *)(v141 + 40) = *(_OWORD *)(v142 + 40);
        *((void *)v141 + 7) = *((void *)v142 + 7);
        uint64_t v144 = *(int *)(v122 + 28);
        uint64_t v145 = &v141[v144];
        uint64_t v146 = &v142[v144];
        uint64_t v147 = sub_23309B300();
        uint64_t v148 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v145, v146, v147);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
        }
        *(_OWORD *)&v141[*(int *)(v122 + 32)] = *(_OWORD *)&v142[*(int *)(v122 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v141, 0, 1, v122);
        uint64_t v123 = (unsigned int (*)(void, void, void))v309;
      }
      uint64_t v150 = v6[15];
      uint64_t v151 = &a1[v150];
      long long v152 = &a2[v150];
      uint64_t v153 = type metadata accessor for Period();
      uint64_t v287 = *(void **)(v153 - 8);
      uint64_t v154 = (unsigned int (*)(void, void, void))v287[6];
      if (v154(v152, 1, v153))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
      }
      else
      {
        uint64_t v282 = v154;
        if (v123(v152, 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v151, v152, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          *uint64_t v151 = *v152;
          *((void *)v151 + 1) = *((void *)v152 + 1);
          *((_DWORD *)v151 + 4) = *((_DWORD *)v152 + 4);
          *(_OWORD *)(v151 + 24) = *(_OWORD *)(v152 + 24);
          *(_OWORD *)(v151 + 40) = *(_OWORD *)(v152 + 40);
          *((void *)v151 + 7) = *((void *)v152 + 7);
          uint64_t v157 = *(int *)(v122 + 28);
          uint64_t v274 = &v151[v157];
          uint64_t v158 = &v152[v157];
          uint64_t v159 = sub_23309B300();
          uint64_t v160 = *(void *)(v159 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v274, v158, *(void *)(*(void *)(v161 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v274, v158, v159);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v274, 0, 1, v159);
          }
          *(_OWORD *)&v151[*(int *)(v122 + 32)] = *(_OWORD *)&v152[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v151, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        }
        uint64_t v198 = *(int *)(v153 + 20);
        uint64_t v199 = &v151[v198];
        uint64_t v200 = &v152[v198];
        if (v123(v200, 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v199, v200, *(void *)(*(void *)(v201 - 8) + 64));
        }
        else
        {
          *uint64_t v199 = *v200;
          *((void *)v199 + 1) = *((void *)v200 + 1);
          *((_DWORD *)v199 + 4) = *((_DWORD *)v200 + 4);
          *(_OWORD *)(v199 + 24) = *(_OWORD *)(v200 + 24);
          *(_OWORD *)(v199 + 40) = *(_OWORD *)(v200 + 40);
          *((void *)v199 + 7) = *((void *)v200 + 7);
          uint64_t v202 = *(int *)(v122 + 28);
          uint64_t v276 = &v199[v202];
          uint64_t v203 = &v200[v202];
          uint64_t v204 = sub_23309B300();
          uint64_t v272 = *(void *)(v204 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v203, 1, v204))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v276, v203, *(void *)(*(void *)(v205 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v272 + 32))(v276, v203, v204);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v276, 0, 1, v204);
          }
          *(_OWORD *)&v199[*(int *)(v122 + 32)] = *(_OWORD *)&v200[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v199, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        }
        ((void (*)(char *, void, uint64_t, uint64_t))v287[7])(v151, 0, 1, v153);
        uint64_t v154 = v282;
      }
      *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
      uint64_t v241 = v6[17];
      uint64_t v242 = &a1[v241];
      uint64_t v243 = &a2[v241];
      if (v123(&a2[v241], 1, v122))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
      }
      else
      {
        long long v277 = (void *)v153;
        uint64_t v284 = v154;
        *uint64_t v242 = *v243;
        *((void *)v242 + 1) = *((void *)v243 + 1);
        *((_DWORD *)v242 + 4) = *((_DWORD *)v243 + 4);
        *(_OWORD *)(v242 + 24) = *(_OWORD *)(v243 + 24);
        *(_OWORD *)(v242 + 40) = *(_OWORD *)(v243 + 40);
        *((void *)v242 + 7) = *((void *)v243 + 7);
        uint64_t v245 = *(int *)(v122 + 28);
        uint64_t v246 = &v242[v245];
        uint64_t v247 = &v243[v245];
        uint64_t v248 = sub_23309B300();
        uint64_t v249 = *(void *)(v248 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v246, v247, *(void *)(*(void *)(v250 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v246, v247, v248);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v249 + 56))(v246, 0, 1, v248);
        }
        uint64_t v153 = (uint64_t)v277;
        *(_OWORD *)&v242[*(int *)(v122 + 32)] = *(_OWORD *)&v243[*(int *)(v122 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v242, 0, 1, v122);
        uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        uint64_t v154 = v284;
      }
      uint64_t v251 = v6[18];
      long long v252 = &a1[v251];
      long long v253 = &a2[v251];
      if (v154(&a2[v251], 1, v153))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v252, v253, *(void *)(*(void *)(v254 - 8) + 64));
      }
      else
      {
        if (v123(v253, 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v252, v253, *(void *)(*(void *)(v255 - 8) + 64));
        }
        else
        {
          uint64_t v278 = (void *)v153;
          *long long v252 = *v253;
          *((void *)v252 + 1) = *((void *)v253 + 1);
          *((_DWORD *)v252 + 4) = *((_DWORD *)v253 + 4);
          *(_OWORD *)(v252 + 24) = *(_OWORD *)(v253 + 24);
          *(_OWORD *)(v252 + 40) = *(_OWORD *)(v253 + 40);
          *((void *)v252 + 7) = *((void *)v253 + 7);
          uint64_t v256 = *(int *)(v122 + 28);
          uint64_t v257 = &v252[v256];
          uint64_t v258 = &v253[v256];
          uint64_t v259 = sub_23309B300();
          uint64_t v260 = *(void *)(v259 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v258, 1, v259))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v257, v258, *(void *)(*(void *)(v261 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v260 + 32))(v257, v258, v259);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v260 + 56))(v257, 0, 1, v259);
          }
          uint64_t v153 = (uint64_t)v278;
          *(_OWORD *)&v252[*(int *)(v122 + 32)] = *(_OWORD *)&v253[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v252, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        }
        uint64_t v262 = *(int *)(v153 + 20);
        uint64_t v263 = &v252[v262];
        v264 = &v253[v262];
        if (v123(v264, 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v263, v264, *(void *)(*(void *)(v265 - 8) + 64));
        }
        else
        {
          uint64_t v279 = (void *)v153;
          *uint64_t v263 = *v264;
          *((void *)v263 + 1) = *((void *)v264 + 1);
          *((_DWORD *)v263 + 4) = *((_DWORD *)v264 + 4);
          *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
          *(_OWORD *)(v263 + 40) = *(_OWORD *)(v264 + 40);
          *((void *)v263 + 7) = *((void *)v264 + 7);
          uint64_t v266 = *(int *)(v122 + 28);
          uint64_t v313 = &v263[v266];
          long long v267 = &v264[v266];
          uint64_t v268 = sub_23309B300();
          uint64_t v269 = *(void *)(v268 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v313, v267, *(void *)(*(void *)(v270 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v269 + 32))(v313, v267, v268);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v313, 0, 1, v268);
          }
          *(_OWORD *)&v263[*(int *)(v122 + 32)] = *(_OWORD *)&v264[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v263, 0, 1, v122);
          uint64_t v153 = (uint64_t)v279;
        }
        ((void (*)(char *, void, uint64_t, uint64_t))v287[7])(v252, 0, 1, v153);
      }
      *(_OWORD *)&a1[v6[19]] = *(_OWORD *)&a2[v6[19]];
      *(_OWORD *)&a1[v6[20]] = *(_OWORD *)&a2[v6[20]];
      *(_OWORD *)&a1[v6[21]] = *(_OWORD *)&a2[v6[21]];
      goto LABEL_148;
    case 2u:
      long long v13 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v13;
      long long v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v14;
      *((void *)a1 + 8) = *((void *)a2 + 8);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v15 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
      uint64_t v16 = v15[9];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for FHIRDateTime();
      __dst = *(void **)(v19 - 8);
      uint64_t v20 = (unsigned int (*)(void, void, void))__dst[6];
      if (v20(v18, 1, v19))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v296 = v20;
        uint64_t v303 = v15;
        char *v17 = *v18;
        *((void *)v17 + 1) = *((void *)v18 + 1);
        *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
        *((void *)v17 + 7) = *((void *)v18 + 7);
        uint64_t v45 = *(int *)(v19 + 28);
        uint64_t v46 = &v17[v45];
        uint64_t v47 = &v18[v45];
        uint64_t v48 = sub_23309B300();
        uint64_t v49 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        *(_OWORD *)&v17[*(int *)(v19 + 32)] = *(_OWORD *)&v18[*(int *)(v19 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v17, 0, 1, v19);
        uint64_t v20 = (unsigned int (*)(void, void, void))v296;
        uint64_t v15 = v303;
      }
      uint64_t v68 = v15[10];
      uint64_t v69 = &a1[v68];
      long long v70 = &a2[v68];
      uint64_t v71 = type metadata accessor for Period();
      uint64_t v72 = *(void *)(v71 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
      }
      else
      {
        uint64_t v291 = v72;
        if (v20(v70, 1, v19))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          uint64_t v300 = v20;
          uint64_t v307 = v15;
          char *v69 = *v70;
          *((void *)v69 + 1) = *((void *)v70 + 1);
          *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
          *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
          *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
          *((void *)v69 + 7) = *((void *)v70 + 7);
          uint64_t v102 = *(int *)(v19 + 28);
          uint64_t v285 = &v69[v102];
          uint64_t v103 = &v70[v102];
          uint64_t v104 = sub_23309B300();
          uint64_t v105 = *(void *)(v104 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v285, v103, *(void *)(*(void *)(v106 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v285, v103, v104);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v285, 0, 1, v104);
          }
          *(_OWORD *)&v69[*(int *)(v19 + 32)] = *(_OWORD *)&v70[*(int *)(v19 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v69, 0, 1, v19);
          uint64_t v20 = (unsigned int (*)(void, void, void))v300;
          uint64_t v15 = v307;
        }
        uint64_t v162 = *(int *)(v71 + 20);
        uint64_t v163 = &v69[v162];
        uint64_t v164 = &v70[v162];
        if (v20(v164, 1, v19))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v163, v164, *(void *)(*(void *)(v165 - 8) + 64));
        }
        else
        {
          uint64_t v301 = v20;
          long long v310 = v15;
          *uint64_t v163 = *v164;
          *((void *)v163 + 1) = *((void *)v164 + 1);
          *((_DWORD *)v163 + 4) = *((_DWORD *)v164 + 4);
          *(_OWORD *)(v163 + 24) = *(_OWORD *)(v164 + 24);
          *(_OWORD *)(v163 + 40) = *(_OWORD *)(v164 + 40);
          *((void *)v163 + 7) = *((void *)v164 + 7);
          uint64_t v166 = *(int *)(v19 + 28);
          uint64_t v288 = &v163[v166];
          long long v167 = &v164[v166];
          uint64_t v168 = sub_23309B300();
          uint64_t v275 = *(void (***)(void *, const void *, uint64_t))(v168 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v275[6])(v167, 1, v168))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v288, v167, *(void *)(*(void *)(v169 - 8) + 64));
          }
          else
          {
            v275[4](v288, v167, v168);
            ((void (*)(char *, void, uint64_t, uint64_t))v275[7])(v288, 0, 1, v168);
          }
          *(_OWORD *)&v163[*(int *)(v19 + 32)] = *(_OWORD *)&v164[*(int *)(v19 + 32)];
          uint64_t v15 = v310;
          ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v163, 0, 1, v19);
          uint64_t v20 = (unsigned int (*)(void, void, void))v301;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v291 + 56))(v69, 0, 1, v71);
      }
      uint64_t v206 = v15[11];
      long long v207 = &a1[v206];
      uint64_t v208 = &a2[v206];
      if (v20(&a2[v206], 1, v19))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v207, v208, *(void *)(*(void *)(v209 - 8) + 64));
      }
      else
      {
        uint64_t v210 = v15;
        *long long v207 = *v208;
        *((void *)v207 + 1) = *((void *)v208 + 1);
        *((_DWORD *)v207 + 4) = *((_DWORD *)v208 + 4);
        *(_OWORD *)(v207 + 24) = *(_OWORD *)(v208 + 24);
        *(_OWORD *)(v207 + 40) = *(_OWORD *)(v208 + 40);
        *((void *)v207 + 7) = *((void *)v208 + 7);
        uint64_t v211 = *(int *)(v19 + 28);
        uint64_t v212 = &v207[v211];
        uint64_t v213 = &v208[v211];
        uint64_t v214 = sub_23309B300();
        uint64_t v215 = *(void *)(v214 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v212, v213, *(void *)(*(void *)(v216 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v212, v213, v214);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
        }
        *(_OWORD *)&v207[*(int *)(v19 + 32)] = *(_OWORD *)&v208[*(int *)(v19 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v207, 0, 1, v19);
        uint64_t v15 = v210;
      }
      *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
      goto LABEL_148;
    case 3u:
      long long v22 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v22;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      uint64_t v23 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
      uint64_t v24 = v23[8];
      uint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      uint64_t v27 = type metadata accessor for FHIRDateTime();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        char *v25 = *v26;
        *((void *)v25 + 1) = *((void *)v26 + 1);
        *((_DWORD *)v25 + 4) = *((_DWORD *)v26 + 4);
        *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
        *(_OWORD *)(v25 + 40) = *(_OWORD *)(v26 + 40);
        *((void *)v25 + 7) = *((void *)v26 + 7);
        uint64_t v51 = *(int *)(v27 + 28);
        __dstb = &v25[v51];
        long long v52 = &v26[v51];
        uint64_t v53 = sub_23309B300();
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstb, v52, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(__dstb, v52, v53);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dstb, 0, 1, v53);
        }
        *(_OWORD *)&v25[*(int *)(v27 + 32)] = *(_OWORD *)&v26[*(int *)(v27 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v75 = v23[9];
      uint64_t v76 = &a1[v75];
      uint64_t v77 = &a2[v75];
      *(void *)uint64_t v76 = *(void *)v77;
      *(void *)(v76 + 5) = *(void *)(v77 + 5);
      *(void *)&a1[v23[10]] = *(void *)&a2[v23[10]];
      a1[v23[11]] = a2[v23[11]];
      *(void *)&a1[v23[12]] = *(void *)&a2[v23[12]];
      uint64_t v78 = v23[13];
      uint64_t v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      *((void *)v79 + 2) = *((void *)v80 + 2);
      a1[v23[14]] = a2[v23[14]];
      uint64_t v81 = v23[15];
      uint64_t v82 = &a1[v81];
      uint64_t v83 = &a2[v81];
      uint64_t v84 = type metadata accessor for Reference();
      uint64_t v85 = *(void **)(v84 - 8);
      uint64_t v86 = (unsigned int (*)(void, void, void))v85[6];
      if (v86(v83, 1, v84))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v82, v83, *(void *)(*(void *)(v87 - 8) + 64));
      }
      else
      {
        uint64_t v306 = v86;
        __dstd = v85;
        long long v88 = *((_OWORD *)v83 + 1);
        *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
        *((_OWORD *)v82 + 1) = v88;
        uint64_t v89 = *(int *)(v84 + 24);
        uint64_t v90 = &v82[v89];
        uint64_t v91 = &v83[v89];
        uint64_t v92 = type metadata accessor for Identifier();
        uint64_t v93 = *(void *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          uint64_t v292 = v90;
          long long v107 = *((_OWORD *)v91 + 1);
          *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
          *((_OWORD *)v90 + 1) = v107;
          *((void *)v90 + 4) = *((void *)v91 + 4);
          uint64_t v108 = *(int *)(v92 + 24);
          uint64_t v280 = &v90[v108];
          uint64_t v286 = (int *)v92;
          uint64_t v109 = &v91[v108];
          uint64_t v110 = sub_23309AF80();
          uint64_t v111 = *(void *)(v110 - 8);
          uint64_t v273 = v109;
          uint64_t v112 = v109;
          uint64_t v113 = v110;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v112, 1, v110))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v280, v273, *(void *)(*(void *)(v114 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(v111 + 32))(v280, v273, v113);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v280, 0, 1, v113);
          }
          *(_OWORD *)((char *)v292 + v286[7]) = *(_OWORD *)&v91[v286[7]];
          (*(void (**)(void))(v93 + 56))();
        }
        uint64_t v85 = __dstd;
        ((void (*)(char *, void, uint64_t, uint64_t))__dstd[7])(v82, 0, 1, v84);
        uint64_t v86 = (unsigned int (*)(void, void, void))v306;
      }
      *(_OWORD *)&a1[v23[16]] = *(_OWORD *)&a2[v23[16]];
      uint64_t v170 = v23[17];
      uint64_t v171 = &a1[v170];
      uint64_t v172 = &a2[v170];
      if (v86(&a2[v170], 1, v84))
      {
        sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
      }
      else
      {
        __dstf = (void (**)(char *, void, uint64_t, uint64_t))v85;
        long long v174 = *((_OWORD *)v172 + 1);
        *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
        *((_OWORD *)v171 + 1) = v174;
        uint64_t v175 = *(int *)(v84 + 24);
        long long v176 = &v171[v175];
        long long v177 = &v172[v175];
        uint64_t v178 = type metadata accessor for Identifier();
        uint64_t v179 = *(void *)(v178 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
        {
          sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
        }
        else
        {
          long long v181 = *((_OWORD *)v177 + 1);
          *(_OWORD *)long long v176 = *(_OWORD *)v177;
          *((_OWORD *)v176 + 1) = v181;
          *((void *)v176 + 4) = *((void *)v177 + 4);
          uint64_t v182 = *(int *)(v178 + 24);
          long long v311 = &v176[v182];
          uint64_t v183 = &v177[v182];
          uint64_t v184 = sub_23309AF80();
          uint64_t v294 = *(void *)(v184 - 8);
          uint64_t v302 = v183;
          uint64_t v185 = v183;
          uint64_t v186 = v184;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v294 + 48))(v185, 1, v184))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v311, v302, *(void *)(*(void *)(v187 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, void *, uint64_t))(v294 + 32))(v311, v302, v186);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v294 + 56))(v311, 0, 1, v186);
          }
          *(_OWORD *)&v176[*(int *)(v178 + 28)] = *(_OWORD *)&v177[*(int *)(v178 + 28)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
        }
        __dstf[7](v171, 0, 1, v84);
      }
      *(_OWORD *)&a1[v23[18]] = *(_OWORD *)&a2[v23[18]];
      goto LABEL_148;
    case 4u:
      long long v30 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v30;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *((void *)a1 + 9) = *((void *)a2 + 9);
      *((void *)a1 + 12) = *((void *)a2 + 12);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      uint64_t v31 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
      uint64_t v32 = v31[11];
      uint64_t v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      uint64_t v35 = type metadata accessor for FHIRDateTime();
      __dsta = *(void **)(v35 - 8);
      uint64_t v36 = (unsigned int (*)(void, void, void))__dsta[6];
      if (v36(v34, 1, v35))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        *uint64_t v33 = *v34;
        *((void *)v33 + 1) = *((void *)v34 + 1);
        *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
        *((void *)v33 + 7) = *((void *)v34 + 7);
        uint64_t v56 = *(int *)(v35 + 28);
        uint64_t v297 = &v33[v56];
        v304 = v36;
        uint64_t v57 = &v34[v56];
        uint64_t v58 = sub_23309B300();
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v297, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v297, v57, v58);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v297, 0, 1, v58);
        }
        *(_OWORD *)&v33[*(int *)(v35 + 32)] = *(_OWORD *)&v34[*(int *)(v35 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v33, 0, 1, v35);
        uint64_t v36 = (unsigned int (*)(void, void, void))v304;
      }
      uint64_t v95 = v31[12];
      uint64_t v96 = &a1[v95];
      uint64_t v97 = &a2[v95];
      uint64_t v98 = type metadata accessor for Period();
      uint64_t v99 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v98 - 8);
      if (v99[6](v97, 1, v98))
      {
        sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        uint64_t v299 = (void (**)(char *, void, uint64_t, uint64_t))v99;
        if (v36(v97, 1, v35))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v96, v97, *(void *)(*(void *)(v101 - 8) + 64));
        }
        else
        {
          uint64_t v308 = v36;
          char *v96 = *v97;
          *((void *)v96 + 1) = *((void *)v97 + 1);
          *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
          *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
          *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
          *((void *)v96 + 7) = *((void *)v97 + 7);
          uint64_t v115 = *(int *)(v35 + 28);
          long long v293 = &v96[v115];
          uint64_t v116 = &v97[v115];
          uint64_t v117 = sub_23309B300();
          uint64_t v281 = *(void *)(v117 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48))(v116, 1, v117))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v293, v116, *(void *)(*(void *)(v118 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v293, v116, v117);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v293, 0, 1, v117);
          }
          *(_OWORD *)&v96[*(int *)(v35 + 32)] = *(_OWORD *)&v97[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v96, 0, 1, v35);
          uint64_t v36 = (unsigned int (*)(void, void, void))v308;
        }
        uint64_t v188 = *(int *)(v98 + 20);
        uint64_t v189 = &v96[v188];
        uint64_t v190 = &v97[v188];
        if (v36(v190, 1, v35))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v189, v190, *(void *)(*(void *)(v191 - 8) + 64));
        }
        else
        {
          long long v312 = v36;
          *uint64_t v189 = *v190;
          *((void *)v189 + 1) = *((void *)v190 + 1);
          *((_DWORD *)v189 + 4) = *((_DWORD *)v190 + 4);
          *(_OWORD *)(v189 + 24) = *(_OWORD *)(v190 + 24);
          *(_OWORD *)(v189 + 40) = *(_OWORD *)(v190 + 40);
          *((void *)v189 + 7) = *((void *)v190 + 7);
          uint64_t v192 = *(int *)(v35 + 28);
          long long v295 = &v189[v192];
          long long v193 = &v190[v192];
          uint64_t v194 = sub_23309B300();
          uint64_t v283 = *(void *)(v194 - 8);
          uint64_t v289 = v193;
          uint64_t v195 = v193;
          uint64_t v196 = v194;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v195, 1, v194))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v295, v289, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v295, v289, v196);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v283 + 56))(v295, 0, 1, v196);
          }
          *(_OWORD *)&v189[*(int *)(v35 + 32)] = *(_OWORD *)&v190[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v189, 0, 1, v35);
          uint64_t v36 = (unsigned int (*)(void, void, void))v312;
        }
        v299[7](v96, 0, 1, v98);
      }
      uint64_t v217 = v31[13];
      uint64_t v218 = &a1[v217];
      uint64_t v219 = &a2[v217];
      if (v36(&a2[v217], 1, v35))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
      }
      else
      {
        char *v218 = *v219;
        *((void *)v218 + 1) = *((void *)v219 + 1);
        *((_DWORD *)v218 + 4) = *((_DWORD *)v219 + 4);
        *(_OWORD *)(v218 + 24) = *(_OWORD *)(v219 + 24);
        *(_OWORD *)(v218 + 40) = *(_OWORD *)(v219 + 40);
        *((void *)v218 + 7) = *((void *)v219 + 7);
        uint64_t v221 = *(int *)(v35 + 28);
        uint64_t v222 = &v218[v221];
        uint64_t v223 = &v219[v221];
        uint64_t v224 = sub_23309B300();
        uint64_t v225 = *(void *)(v224 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v225 + 48))(v223, 1, v224))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v222, v223, *(void *)(*(void *)(v226 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v225 + 32))(v222, v223, v224);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56))(v222, 0, 1, v224);
        }
        *(_OWORD *)&v218[*(int *)(v35 + 32)] = *(_OWORD *)&v219[*(int *)(v35 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v218, 0, 1, v35);
      }
      *(void *)&a1[v31[14]] = *(void *)&a2[v31[14]];
      *(_OWORD *)&a1[v31[15]] = *(_OWORD *)&a2[v31[15]];
      uint64_t v227 = v31[16];
      uint64_t v228 = &a1[v227];
      uint64_t v229 = &a2[v227];
      *(_OWORD *)uint64_t v228 = *(_OWORD *)v229;
      *((void *)v228 + 2) = *((void *)v229 + 2);
      uint64_t v230 = v31[17];
      uint64_t v231 = &a1[v230];
      uint64_t v232 = &a2[v230];
      uint64_t v233 = type metadata accessor for Quantity();
      uint64_t v234 = *(void *)(v233 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233))
      {
        sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
        memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
        *(void *)(v231 + 13) = *(void *)(v232 + 13);
        *(_OWORD *)(v231 + 24) = *(_OWORD *)(v232 + 24);
        *(_OWORD *)(v231 + 40) = *(_OWORD *)(v232 + 40);
        uint64_t v236 = *(int *)(v233 + 28);
        __dstg = &v231[v236];
        uint64_t v237 = &v232[v236];
        uint64_t v238 = sub_23309AF80();
        uint64_t v239 = *(void *)(v238 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(__dstg, v237, *(void *)(*(void *)(v240 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v239 + 32))(__dstg, v237, v238);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(__dstg, 0, 1, v238);
        }
        *(_OWORD *)&v231[*(int *)(v233 + 32)] = *(_OWORD *)&v232[*(int *)(v233 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v231, 0, 1, v233);
      }
      *(void *)&a1[v31[18]] = *(void *)&a2[v31[18]];
      *(_OWORD *)&a1[v31[19]] = *(_OWORD *)&a2[v31[19]];
LABEL_148:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for ModelsDSTU2.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_232F7CB8C((uint64_t)a1, type metadata accessor for ModelsDSTU2.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        uint64_t v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v7 = v6[6];
        uint64_t v8 = &a1[v7];
        uint64_t v9 = &a2[v7];
        uint64_t v10 = type metadata accessor for Reference();
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          long long v38 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *((_OWORD *)v8 + 1) = v38;
          uint64_t v39 = *(int *)(v10 + 24);
          uint64_t v40 = &v8[v39];
          uint64_t v41 = &v9[v39];
          uint64_t v42 = type metadata accessor for Identifier();
          uint64_t v43 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v42 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v43)[6](v41, 1, v42))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
          }
          else
          {
            uint64_t v298 = (void (**)(char *, void, uint64_t, uint64_t))v43;
            long long v61 = *((_OWORD *)v41 + 1);
            *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
            *((_OWORD *)v40 + 1) = v61;
            *((void *)v40 + 4) = *((void *)v41 + 4);
            uint64_t v62 = *(int *)(v42 + 24);
            __dstc = &v40[v62];
            uint64_t v63 = &v41[v62];
            uint64_t v64 = sub_23309AF80();
            uint64_t v290 = *(void *)(v64 - 8);
            uint64_t v305 = v63;
            uint64_t v65 = v63;
            uint64_t v66 = v64;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v290 + 48))(v65, 1, v64))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dstc, v305, *(void *)(*(void *)(v67 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v290 + 32))(__dstc, v305, v66);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v290 + 56))(__dstc, 0, 1, v66);
            }
            *(_OWORD *)&v40[*(int *)(v42 + 28)] = *(_OWORD *)&v41[*(int *)(v42 + 28)];
            v298[7](v40, 0, 1, v42);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        uint64_t v119 = v6[7];
        uint64_t v120 = &a1[v119];
        uint64_t v121 = &a2[v119];
        uint64_t v122 = type metadata accessor for FHIRDateTime();
        __dste = *(void **)(v122 - 8);
        uint64_t v123 = (unsigned int (*)(void, void, void))__dste[6];
        uint64_t v309 = v123;
        if (v123(v121, 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          *uint64_t v120 = *v121;
          *((void *)v120 + 1) = *((void *)v121 + 1);
          *((_DWORD *)v120 + 4) = *((_DWORD *)v121 + 4);
          *(_OWORD *)(v120 + 24) = *(_OWORD *)(v121 + 24);
          *(_OWORD *)(v120 + 40) = *(_OWORD *)(v121 + 40);
          *((void *)v120 + 7) = *((void *)v121 + 7);
          uint64_t v125 = *(int *)(v122 + 28);
          uint64_t v126 = &v120[v125];
          uint64_t v127 = &v121[v125];
          uint64_t v128 = sub_23309B300();
          uint64_t v129 = *(void *)(v128 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v126, v127, *(void *)(*(void *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v126, v127, v128);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
          }
          *(_OWORD *)&v120[*(int *)(v122 + 32)] = *(_OWORD *)&v121[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v120, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        }
        uint64_t v131 = v6[8];
        long long v132 = &a1[v131];
        uint64_t v133 = &a2[v131];
        *(_OWORD *)long long v132 = *(_OWORD *)v133;
        *((void *)v132 + 2) = *((void *)v133 + 2);
        uint64_t v134 = v6[9];
        long long v135 = &a1[v134];
        uint64_t v136 = &a2[v134];
        *((void *)v135 + 2) = *((void *)v136 + 2);
        *(_OWORD *)long long v135 = *(_OWORD *)v136;
        *(_OWORD *)&a1[v6[10]] = *(_OWORD *)&a2[v6[10]];
        *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
        uint64_t v137 = v6[12];
        uint64_t v138 = &a1[v137];
        uint64_t v139 = &a2[v137];
        *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
        *((void *)v138 + 2) = *((void *)v139 + 2);
        *(void *)&a1[v6[13]] = *(void *)&a2[v6[13]];
        uint64_t v140 = v6[14];
        uint64_t v141 = &a1[v140];
        uint64_t v142 = &a2[v140];
        if (v123(&a2[v140], 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v141, v142, *(void *)(*(void *)(v143 - 8) + 64));
        }
        else
        {
          *uint64_t v141 = *v142;
          *((void *)v141 + 1) = *((void *)v142 + 1);
          *((_DWORD *)v141 + 4) = *((_DWORD *)v142 + 4);
          *(_OWORD *)(v141 + 24) = *(_OWORD *)(v142 + 24);
          *(_OWORD *)(v141 + 40) = *(_OWORD *)(v142 + 40);
          *((void *)v141 + 7) = *((void *)v142 + 7);
          uint64_t v144 = *(int *)(v122 + 28);
          uint64_t v145 = &v141[v144];
          uint64_t v146 = &v142[v144];
          uint64_t v147 = sub_23309B300();
          uint64_t v148 = *(void *)(v147 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v145, v146, v147);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
          }
          *(_OWORD *)&v141[*(int *)(v122 + 32)] = *(_OWORD *)&v142[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v141, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
        }
        uint64_t v150 = v6[15];
        uint64_t v151 = &a1[v150];
        long long v152 = &a2[v150];
        uint64_t v153 = type metadata accessor for Period();
        uint64_t v287 = *(void **)(v153 - 8);
        uint64_t v154 = (unsigned int (*)(void, void, void))v287[6];
        if (v154(v152, 1, v153))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
        }
        else
        {
          uint64_t v282 = v154;
          if (v123(v152, 1, v122))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v151, v152, *(void *)(*(void *)(v156 - 8) + 64));
          }
          else
          {
            *uint64_t v151 = *v152;
            *((void *)v151 + 1) = *((void *)v152 + 1);
            *((_DWORD *)v151 + 4) = *((_DWORD *)v152 + 4);
            *(_OWORD *)(v151 + 24) = *(_OWORD *)(v152 + 24);
            *(_OWORD *)(v151 + 40) = *(_OWORD *)(v152 + 40);
            *((void *)v151 + 7) = *((void *)v152 + 7);
            uint64_t v157 = *(int *)(v122 + 28);
            uint64_t v274 = &v151[v157];
            uint64_t v158 = &v152[v157];
            uint64_t v159 = sub_23309B300();
            uint64_t v160 = *(void *)(v159 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v274, v158, *(void *)(*(void *)(v161 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v274, v158, v159);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v274, 0, 1, v159);
            }
            *(_OWORD *)&v151[*(int *)(v122 + 32)] = *(_OWORD *)&v152[*(int *)(v122 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v151, 0, 1, v122);
            uint64_t v123 = (unsigned int (*)(void, void, void))v309;
          }
          uint64_t v198 = *(int *)(v153 + 20);
          uint64_t v199 = &v151[v198];
          uint64_t v200 = &v152[v198];
          if (v123(v200, 1, v122))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v199, v200, *(void *)(*(void *)(v201 - 8) + 64));
          }
          else
          {
            *uint64_t v199 = *v200;
            *((void *)v199 + 1) = *((void *)v200 + 1);
            *((_DWORD *)v199 + 4) = *((_DWORD *)v200 + 4);
            *(_OWORD *)(v199 + 24) = *(_OWORD *)(v200 + 24);
            *(_OWORD *)(v199 + 40) = *(_OWORD *)(v200 + 40);
            *((void *)v199 + 7) = *((void *)v200 + 7);
            uint64_t v202 = *(int *)(v122 + 28);
            uint64_t v276 = &v199[v202];
            uint64_t v203 = &v200[v202];
            uint64_t v204 = sub_23309B300();
            uint64_t v272 = *(void *)(v204 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v203, 1, v204))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v276, v203, *(void *)(*(void *)(v205 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v272 + 32))(v276, v203, v204);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v276, 0, 1, v204);
            }
            *(_OWORD *)&v199[*(int *)(v122 + 32)] = *(_OWORD *)&v200[*(int *)(v122 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v199, 0, 1, v122);
            uint64_t v123 = (unsigned int (*)(void, void, void))v309;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v287[7])(v151, 0, 1, v153);
          uint64_t v154 = v282;
        }
        *(_OWORD *)&a1[v6[16]] = *(_OWORD *)&a2[v6[16]];
        uint64_t v241 = v6[17];
        uint64_t v242 = &a1[v241];
        uint64_t v243 = &a2[v241];
        if (v123(&a2[v241], 1, v122))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v242, v243, *(void *)(*(void *)(v244 - 8) + 64));
        }
        else
        {
          long long v277 = (void *)v153;
          uint64_t v284 = v154;
          *uint64_t v242 = *v243;
          *((void *)v242 + 1) = *((void *)v243 + 1);
          *((_DWORD *)v242 + 4) = *((_DWORD *)v243 + 4);
          *(_OWORD *)(v242 + 24) = *(_OWORD *)(v243 + 24);
          *(_OWORD *)(v242 + 40) = *(_OWORD *)(v243 + 40);
          *((void *)v242 + 7) = *((void *)v243 + 7);
          uint64_t v245 = *(int *)(v122 + 28);
          uint64_t v246 = &v242[v245];
          uint64_t v247 = &v243[v245];
          uint64_t v248 = sub_23309B300();
          uint64_t v249 = *(void *)(v248 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v246, v247, *(void *)(*(void *)(v250 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v246, v247, v248);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v249 + 56))(v246, 0, 1, v248);
          }
          uint64_t v153 = (uint64_t)v277;
          *(_OWORD *)&v242[*(int *)(v122 + 32)] = *(_OWORD *)&v243[*(int *)(v122 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v242, 0, 1, v122);
          uint64_t v123 = (unsigned int (*)(void, void, void))v309;
          uint64_t v154 = v284;
        }
        uint64_t v251 = v6[18];
        long long v252 = &a1[v251];
        long long v253 = &a2[v251];
        if (v154(&a2[v251], 1, v153))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v252, v253, *(void *)(*(void *)(v254 - 8) + 64));
        }
        else
        {
          if (v123(v253, 1, v122))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v252, v253, *(void *)(*(void *)(v255 - 8) + 64));
          }
          else
          {
            uint64_t v278 = (void *)v153;
            *long long v252 = *v253;
            *((void *)v252 + 1) = *((void *)v253 + 1);
            *((_DWORD *)v252 + 4) = *((_DWORD *)v253 + 4);
            *(_OWORD *)(v252 + 24) = *(_OWORD *)(v253 + 24);
            *(_OWORD *)(v252 + 40) = *(_OWORD *)(v253 + 40);
            *((void *)v252 + 7) = *((void *)v253 + 7);
            uint64_t v256 = *(int *)(v122 + 28);
            uint64_t v257 = &v252[v256];
            uint64_t v258 = &v253[v256];
            uint64_t v259 = sub_23309B300();
            uint64_t v260 = *(void *)(v259 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v258, 1, v259))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v257, v258, *(void *)(*(void *)(v261 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v260 + 32))(v257, v258, v259);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v260 + 56))(v257, 0, 1, v259);
            }
            uint64_t v153 = (uint64_t)v278;
            *(_OWORD *)&v252[*(int *)(v122 + 32)] = *(_OWORD *)&v253[*(int *)(v122 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v252, 0, 1, v122);
            uint64_t v123 = (unsigned int (*)(void, void, void))v309;
          }
          uint64_t v262 = *(int *)(v153 + 20);
          uint64_t v263 = &v252[v262];
          v264 = &v253[v262];
          if (v123(v264, 1, v122))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v263, v264, *(void *)(*(void *)(v265 - 8) + 64));
          }
          else
          {
            uint64_t v279 = (void *)v153;
            *uint64_t v263 = *v264;
            *((void *)v263 + 1) = *((void *)v264 + 1);
            *((_DWORD *)v263 + 4) = *((_DWORD *)v264 + 4);
            *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
            *(_OWORD *)(v263 + 40) = *(_OWORD *)(v264 + 40);
            *((void *)v263 + 7) = *((void *)v264 + 7);
            uint64_t v266 = *(int *)(v122 + 28);
            uint64_t v313 = &v263[v266];
            long long v267 = &v264[v266];
            uint64_t v268 = sub_23309B300();
            uint64_t v269 = *(void *)(v268 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v313, v267, *(void *)(*(void *)(v270 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v269 + 32))(v313, v267, v268);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v313, 0, 1, v268);
            }
            *(_OWORD *)&v263[*(int *)(v122 + 32)] = *(_OWORD *)&v264[*(int *)(v122 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dste[7])(v263, 0, 1, v122);
            uint64_t v153 = (uint64_t)v279;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v287[7])(v252, 0, 1, v153);
        }
        *(_OWORD *)&a1[v6[19]] = *(_OWORD *)&a2[v6[19]];
        *(_OWORD *)&a1[v6[20]] = *(_OWORD *)&a2[v6[20]];
        *(_OWORD *)&a1[v6[21]] = *(_OWORD *)&a2[v6[21]];
        goto LABEL_149;
      case 2u:
        long long v13 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v13;
        long long v14 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v14;
        *((void *)a1 + 8) = *((void *)a2 + 8);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        uint64_t v15 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v16 = v15[9];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = type metadata accessor for FHIRDateTime();
        __dst = *(void **)(v19 - 8);
        uint64_t v20 = (unsigned int (*)(void, void, void))__dst[6];
        if (v20(v18, 1, v19))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          uint64_t v296 = v20;
          uint64_t v303 = v15;
          char *v17 = *v18;
          *((void *)v17 + 1) = *((void *)v18 + 1);
          *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
          *(_OWORD *)(v17 + 40) = *(_OWORD *)(v18 + 40);
          *((void *)v17 + 7) = *((void *)v18 + 7);
          uint64_t v45 = *(int *)(v19 + 28);
          uint64_t v46 = &v17[v45];
          uint64_t v47 = &v18[v45];
          uint64_t v48 = sub_23309B300();
          uint64_t v49 = *(void *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
          }
          *(_OWORD *)&v17[*(int *)(v19 + 32)] = *(_OWORD *)&v18[*(int *)(v19 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v17, 0, 1, v19);
          uint64_t v20 = (unsigned int (*)(void, void, void))v296;
          uint64_t v15 = v303;
        }
        uint64_t v68 = v15[10];
        uint64_t v69 = &a1[v68];
        long long v70 = &a2[v68];
        uint64_t v71 = type metadata accessor for Period();
        uint64_t v72 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          uint64_t v291 = v72;
          if (v20(v70, 1, v19))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64));
          }
          else
          {
            uint64_t v300 = v20;
            uint64_t v307 = v15;
            char *v69 = *v70;
            *((void *)v69 + 1) = *((void *)v70 + 1);
            *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
            *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
            *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
            *((void *)v69 + 7) = *((void *)v70 + 7);
            uint64_t v102 = *(int *)(v19 + 28);
            uint64_t v285 = &v69[v102];
            uint64_t v103 = &v70[v102];
            uint64_t v104 = sub_23309B300();
            uint64_t v105 = *(void *)(v104 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v285, v103, *(void *)(*(void *)(v106 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v285, v103, v104);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v285, 0, 1, v104);
            }
            *(_OWORD *)&v69[*(int *)(v19 + 32)] = *(_OWORD *)&v70[*(int *)(v19 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v69, 0, 1, v19);
            uint64_t v20 = (unsigned int (*)(void, void, void))v300;
            uint64_t v15 = v307;
          }
          uint64_t v162 = *(int *)(v71 + 20);
          uint64_t v163 = &v69[v162];
          uint64_t v164 = &v70[v162];
          if (v20(v164, 1, v19))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v163, v164, *(void *)(*(void *)(v165 - 8) + 64));
          }
          else
          {
            uint64_t v301 = v20;
            long long v310 = v15;
            *uint64_t v163 = *v164;
            *((void *)v163 + 1) = *((void *)v164 + 1);
            *((_DWORD *)v163 + 4) = *((_DWORD *)v164 + 4);
            *(_OWORD *)(v163 + 24) = *(_OWORD *)(v164 + 24);
            *(_OWORD *)(v163 + 40) = *(_OWORD *)(v164 + 40);
            *((void *)v163 + 7) = *((void *)v164 + 7);
            uint64_t v166 = *(int *)(v19 + 28);
            uint64_t v288 = &v163[v166];
            long long v167 = &v164[v166];
            uint64_t v168 = sub_23309B300();
            uint64_t v275 = *(void (***)(void *, const void *, uint64_t))(v168 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v275[6])(v167, 1, v168))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v288, v167, *(void *)(*(void *)(v169 - 8) + 64));
            }
            else
            {
              v275[4](v288, v167, v168);
              ((void (*)(char *, void, uint64_t, uint64_t))v275[7])(v288, 0, 1, v168);
            }
            *(_OWORD *)&v163[*(int *)(v19 + 32)] = *(_OWORD *)&v164[*(int *)(v19 + 32)];
            uint64_t v15 = v310;
            ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v163, 0, 1, v19);
            uint64_t v20 = (unsigned int (*)(void, void, void))v301;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v291 + 56))(v69, 0, 1, v71);
        }
        uint64_t v206 = v15[11];
        long long v207 = &a1[v206];
        uint64_t v208 = &a2[v206];
        if (v20(&a2[v206], 1, v19))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v207, v208, *(void *)(*(void *)(v209 - 8) + 64));
        }
        else
        {
          uint64_t v210 = v15;
          *long long v207 = *v208;
          *((void *)v207 + 1) = *((void *)v208 + 1);
          *((_DWORD *)v207 + 4) = *((_DWORD *)v208 + 4);
          *(_OWORD *)(v207 + 24) = *(_OWORD *)(v208 + 24);
          *(_OWORD *)(v207 + 40) = *(_OWORD *)(v208 + 40);
          *((void *)v207 + 7) = *((void *)v208 + 7);
          uint64_t v211 = *(int *)(v19 + 28);
          uint64_t v212 = &v207[v211];
          uint64_t v213 = &v208[v211];
          uint64_t v214 = sub_23309B300();
          uint64_t v215 = *(void *)(v214 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v212, v213, *(void *)(*(void *)(v216 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v215 + 32))(v212, v213, v214);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
          }
          *(_OWORD *)&v207[*(int *)(v19 + 32)] = *(_OWORD *)&v208[*(int *)(v19 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v207, 0, 1, v19);
          uint64_t v15 = v210;
        }
        *(_OWORD *)&a1[v15[12]] = *(_OWORD *)&a2[v15[12]];
        goto LABEL_149;
      case 3u:
        long long v22 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v22;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        uint64_t v23 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v24 = v23[8];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = type metadata accessor for FHIRDateTime();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          char *v25 = *v26;
          *((void *)v25 + 1) = *((void *)v26 + 1);
          *((_DWORD *)v25 + 4) = *((_DWORD *)v26 + 4);
          *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
          *(_OWORD *)(v25 + 40) = *(_OWORD *)(v26 + 40);
          *((void *)v25 + 7) = *((void *)v26 + 7);
          uint64_t v51 = *(int *)(v27 + 28);
          __dstb = &v25[v51];
          long long v52 = &v26[v51];
          uint64_t v53 = sub_23309B300();
          uint64_t v54 = *(void *)(v53 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstb, v52, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(__dstb, v52, v53);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dstb, 0, 1, v53);
          }
          *(_OWORD *)&v25[*(int *)(v27 + 32)] = *(_OWORD *)&v26[*(int *)(v27 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v75 = v23[9];
        uint64_t v76 = &a1[v75];
        uint64_t v77 = &a2[v75];
        *(void *)uint64_t v76 = *(void *)v77;
        *(void *)(v76 + 5) = *(void *)(v77 + 5);
        *(void *)&a1[v23[10]] = *(void *)&a2[v23[10]];
        a1[v23[11]] = a2[v23[11]];
        *(void *)&a1[v23[12]] = *(void *)&a2[v23[12]];
        uint64_t v78 = v23[13];
        uint64_t v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        *((void *)v79 + 2) = *((void *)v80 + 2);
        a1[v23[14]] = a2[v23[14]];
        uint64_t v81 = v23[15];
        uint64_t v82 = &a1[v81];
        uint64_t v83 = &a2[v81];
        uint64_t v84 = type metadata accessor for Reference();
        uint64_t v85 = *(void **)(v84 - 8);
        uint64_t v86 = (unsigned int (*)(void, void, void))v85[6];
        if (v86(v83, 1, v84))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v82, v83, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          uint64_t v306 = v86;
          __dstd = v85;
          long long v88 = *((_OWORD *)v83 + 1);
          *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
          *((_OWORD *)v82 + 1) = v88;
          uint64_t v89 = *(int *)(v84 + 24);
          uint64_t v90 = &v82[v89];
          uint64_t v91 = &v83[v89];
          uint64_t v92 = type metadata accessor for Identifier();
          uint64_t v93 = *(void *)(v92 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
          }
          else
          {
            uint64_t v292 = v90;
            long long v107 = *((_OWORD *)v91 + 1);
            *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
            *((_OWORD *)v90 + 1) = v107;
            *((void *)v90 + 4) = *((void *)v91 + 4);
            uint64_t v108 = *(int *)(v92 + 24);
            uint64_t v280 = &v90[v108];
            uint64_t v286 = (int *)v92;
            uint64_t v109 = &v91[v108];
            uint64_t v110 = sub_23309AF80();
            uint64_t v111 = *(void *)(v110 - 8);
            uint64_t v273 = v109;
            uint64_t v112 = v109;
            uint64_t v113 = v110;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v112, 1, v110))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v280, v273, *(void *)(*(void *)(v114 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v111 + 32))(v280, v273, v113);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v280, 0, 1, v113);
            }
            *(_OWORD *)((char *)v292 + v286[7]) = *(_OWORD *)&v91[v286[7]];
            (*(void (**)(void))(v93 + 56))();
          }
          uint64_t v85 = __dstd;
          ((void (*)(char *, void, uint64_t, uint64_t))__dstd[7])(v82, 0, 1, v84);
          uint64_t v86 = (unsigned int (*)(void, void, void))v306;
        }
        *(_OWORD *)&a1[v23[16]] = *(_OWORD *)&a2[v23[16]];
        uint64_t v170 = v23[17];
        uint64_t v171 = &a1[v170];
        uint64_t v172 = &a2[v170];
        if (v86(&a2[v170], 1, v84))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v171, v172, *(void *)(*(void *)(v173 - 8) + 64));
        }
        else
        {
          __dstf = (void (**)(char *, void, uint64_t, uint64_t))v85;
          long long v174 = *((_OWORD *)v172 + 1);
          *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
          *((_OWORD *)v171 + 1) = v174;
          uint64_t v175 = *(int *)(v84 + 24);
          long long v176 = &v171[v175];
          long long v177 = &v172[v175];
          uint64_t v178 = type metadata accessor for Identifier();
          uint64_t v179 = *(void *)(v178 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
          }
          else
          {
            long long v181 = *((_OWORD *)v177 + 1);
            *(_OWORD *)long long v176 = *(_OWORD *)v177;
            *((_OWORD *)v176 + 1) = v181;
            *((void *)v176 + 4) = *((void *)v177 + 4);
            uint64_t v182 = *(int *)(v178 + 24);
            long long v311 = &v176[v182];
            uint64_t v183 = &v177[v182];
            uint64_t v184 = sub_23309AF80();
            uint64_t v294 = *(void *)(v184 - 8);
            uint64_t v302 = v183;
            uint64_t v185 = v183;
            uint64_t v186 = v184;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v294 + 48))(v185, 1, v184))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v311, v302, *(void *)(*(void *)(v187 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v294 + 32))(v311, v302, v186);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v294 + 56))(v311, 0, 1, v186);
            }
            *(_OWORD *)&v176[*(int *)(v178 + 28)] = *(_OWORD *)&v177[*(int *)(v178 + 28)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
          }
          __dstf[7](v171, 0, 1, v84);
        }
        *(_OWORD *)&a1[v23[18]] = *(_OWORD *)&a2[v23[18]];
        goto LABEL_149;
      case 4u:
        long long v30 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v30;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *((void *)a1 + 9) = *((void *)a2 + 9);
        *((void *)a1 + 12) = *((void *)a2 + 12);
        *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        uint64_t v31 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v32 = v31[11];
        uint64_t v33 = &a1[v32];
        uint64_t v34 = &a2[v32];
        uint64_t v35 = type metadata accessor for FHIRDateTime();
        __dsta = *(void **)(v35 - 8);
        uint64_t v36 = (unsigned int (*)(void, void, void))__dsta[6];
        if (v36(v34, 1, v35))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          *uint64_t v33 = *v34;
          *((void *)v33 + 1) = *((void *)v34 + 1);
          *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
          *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
          *((void *)v33 + 7) = *((void *)v34 + 7);
          uint64_t v56 = *(int *)(v35 + 28);
          uint64_t v297 = &v33[v56];
          v304 = v36;
          uint64_t v57 = &v34[v56];
          uint64_t v58 = sub_23309B300();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v297, v57, *(void *)(*(void *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v297, v57, v58);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v297, 0, 1, v58);
          }
          *(_OWORD *)&v33[*(int *)(v35 + 32)] = *(_OWORD *)&v34[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v33, 0, 1, v35);
          uint64_t v36 = (unsigned int (*)(void, void, void))v304;
        }
        uint64_t v95 = v31[12];
        uint64_t v96 = &a1[v95];
        uint64_t v97 = &a2[v95];
        uint64_t v98 = type metadata accessor for Period();
        uint64_t v99 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v98 - 8);
        if (v99[6](v97, 1, v98))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          uint64_t v299 = (void (**)(char *, void, uint64_t, uint64_t))v99;
          if (v36(v97, 1, v35))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v96, v97, *(void *)(*(void *)(v101 - 8) + 64));
          }
          else
          {
            uint64_t v308 = v36;
            char *v96 = *v97;
            *((void *)v96 + 1) = *((void *)v97 + 1);
            *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
            *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
            *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
            *((void *)v96 + 7) = *((void *)v97 + 7);
            uint64_t v115 = *(int *)(v35 + 28);
            long long v293 = &v96[v115];
            uint64_t v116 = &v97[v115];
            uint64_t v117 = sub_23309B300();
            uint64_t v281 = *(void *)(v117 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48))(v116, 1, v117))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v293, v116, *(void *)(*(void *)(v118 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v293, v116, v117);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v293, 0, 1, v117);
            }
            *(_OWORD *)&v96[*(int *)(v35 + 32)] = *(_OWORD *)&v97[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v96, 0, 1, v35);
            uint64_t v36 = (unsigned int (*)(void, void, void))v308;
          }
          uint64_t v188 = *(int *)(v98 + 20);
          uint64_t v189 = &v96[v188];
          uint64_t v190 = &v97[v188];
          if (v36(v190, 1, v35))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v189, v190, *(void *)(*(void *)(v191 - 8) + 64));
          }
          else
          {
            long long v312 = v36;
            *uint64_t v189 = *v190;
            *((void *)v189 + 1) = *((void *)v190 + 1);
            *((_DWORD *)v189 + 4) = *((_DWORD *)v190 + 4);
            *(_OWORD *)(v189 + 24) = *(_OWORD *)(v190 + 24);
            *(_OWORD *)(v189 + 40) = *(_OWORD *)(v190 + 40);
            *((void *)v189 + 7) = *((void *)v190 + 7);
            uint64_t v192 = *(int *)(v35 + 28);
            long long v295 = &v189[v192];
            long long v193 = &v190[v192];
            uint64_t v194 = sub_23309B300();
            uint64_t v283 = *(void *)(v194 - 8);
            uint64_t v289 = v193;
            uint64_t v195 = v193;
            uint64_t v196 = v194;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v195, 1, v194))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v295, v289, *(void *)(*(void *)(v197 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v295, v289, v196);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v283 + 56))(v295, 0, 1, v196);
            }
            *(_OWORD *)&v189[*(int *)(v35 + 32)] = *(_OWORD *)&v190[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v189, 0, 1, v35);
            uint64_t v36 = (unsigned int (*)(void, void, void))v312;
          }
          v299[7](v96, 0, 1, v98);
        }
        uint64_t v217 = v31[13];
        uint64_t v218 = &a1[v217];
        uint64_t v219 = &a2[v217];
        if (v36(&a2[v217], 1, v35))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v218, v219, *(void *)(*(void *)(v220 - 8) + 64));
        }
        else
        {
          char *v218 = *v219;
          *((void *)v218 + 1) = *((void *)v219 + 1);
          *((_DWORD *)v218 + 4) = *((_DWORD *)v219 + 4);
          *(_OWORD *)(v218 + 24) = *(_OWORD *)(v219 + 24);
          *(_OWORD *)(v218 + 40) = *(_OWORD *)(v219 + 40);
          *((void *)v218 + 7) = *((void *)v219 + 7);
          uint64_t v221 = *(int *)(v35 + 28);
          uint64_t v222 = &v218[v221];
          uint64_t v223 = &v219[v221];
          uint64_t v224 = sub_23309B300();
          uint64_t v225 = *(void *)(v224 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v225 + 48))(v223, 1, v224))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v222, v223, *(void *)(*(void *)(v226 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v225 + 32))(v222, v223, v224);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56))(v222, 0, 1, v224);
          }
          *(_OWORD *)&v218[*(int *)(v35 + 32)] = *(_OWORD *)&v219[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))__dsta[7])(v218, 0, 1, v35);
        }
        *(void *)&a1[v31[14]] = *(void *)&a2[v31[14]];
        *(_OWORD *)&a1[v31[15]] = *(_OWORD *)&a2[v31[15]];
        uint64_t v227 = v31[16];
        uint64_t v228 = &a1[v227];
        uint64_t v229 = &a2[v227];
        *(_OWORD *)uint64_t v228 = *(_OWORD *)v229;
        *((void *)v228 + 2) = *((void *)v229 + 2);
        uint64_t v230 = v31[17];
        uint64_t v231 = &a1[v230];
        uint64_t v232 = &a2[v230];
        uint64_t v233 = type metadata accessor for Quantity();
        uint64_t v234 = *(void *)(v233 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
        }
        else
        {
          *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
          *(void *)(v231 + 13) = *(void *)(v232 + 13);
          *(_OWORD *)(v231 + 24) = *(_OWORD *)(v232 + 24);
          *(_OWORD *)(v231 + 40) = *(_OWORD *)(v232 + 40);
          uint64_t v236 = *(int *)(v233 + 28);
          __dstg = &v231[v236];
          uint64_t v237 = &v232[v236];
          uint64_t v238 = sub_23309AF80();
          uint64_t v239 = *(void *)(v238 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(__dstg, v237, *(void *)(*(void *)(v240 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v239 + 32))(__dstg, v237, v238);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(__dstg, 0, 1, v238);
          }
          *(_OWORD *)&v231[*(int *)(v233 + 32)] = *(_OWORD *)&v232[*(int *)(v233 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v231, 0, 1, v233);
        }
        *(void *)&a1[v31[18]] = *(void *)&a2[v31[18]];
        *(_OWORD *)&a1[v31[19]] = *(_OWORD *)&a2[v31[19]];
LABEL_149:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_232F94C7C()
{
  uint64_t result = type metadata accessor for ModelsDSTU2.Condition(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ModelsDSTU2.DiagnosticReport(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ModelsDSTU2.Immunization(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for ModelsDSTU2.Observation(319);
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle()
{
  return &type metadata for ModelsDSTU2.Bundle;
}

void *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
    uint64_t v12 = *(void *)(v11 - 8);
    long long v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v576 = v11;
          uint64_t v581 = v6;
          v585 = v3;
          uint64_t v18 = v10[1];
          void *v9 = *v10;
          v9[1] = v18;
          uint64_t v19 = v10[2];
          swift_bridgeObjectRetain();
          if (v19 != 1) {
            swift_bridgeObjectRetain();
          }
          v9[2] = v19;
          uint64_t v20 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
          uint64_t v21 = v20[6];
          long long v22 = (void *)((char *)v9 + v21);
          uint64_t v23 = (void *)((char *)v10 + v21);
          uint64_t v24 = type metadata accessor for Reference();
          uint64_t v25 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v24 - 8);
          v543 = v20;
          uint64_t v569 = v12;
          if (v25[6](v23, 1, v24))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
          }
          else
          {
            v536 = (void (**)(void *, void, uint64_t, uint64_t))v25;
            uint64_t v76 = v23[1];
            void *v22 = *v23;
            v22[1] = v76;
            uint64_t v77 = v22;
            uint64_t v78 = v23[3];
            v77[2] = v23[2];
            v77[3] = v78;
            uint64_t v561 = v24;
            __srca = v77;
            uint64_t v79 = *(int *)(v24 + 24);
            v552 = (void *)((char *)v77 + v79);
            uint64_t v80 = (void *)((char *)v23 + v79);
            uint64_t v81 = type metadata accessor for Identifier();
            uint64_t v82 = *(void **)(v81 - 8);
            uint64_t v83 = (unsigned int (*)(void *, uint64_t, uint64_t))v82[6];
            swift_bridgeObjectRetain();
            uint64_t v84 = v80;
            swift_bridgeObjectRetain();
            if (v83(v80, 1, v81))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v552, v80, *(void *)(*(void *)(v85 - 8) + 64));
              uint64_t v86 = v536;
            }
            else
            {
              v518 = v82;
              uint64_t v528 = v81;
              uint64_t v111 = v80[1];
              void *v552 = *v80;
              v552[1] = v111;
              uint64_t v112 = v80[3];
              swift_bridgeObjectRetain();
              uint64_t v113 = v80;
              if (v112 == 1)
              {
                *((_OWORD *)v552 + 1) = *((_OWORD *)v80 + 1);
                v552[4] = v80[4];
              }
              else
              {
                v552[2] = v80[2];
                v552[3] = v112;
                v552[4] = v80[4];
                swift_bridgeObjectRetain();
                uint64_t v84 = v80;
                swift_bridgeObjectRetain();
              }
              uint64_t v86 = v536;
              uint64_t v172 = *(int *)(v81 + 24);
              uint64_t v173 = (char *)v552 + v172;
              long long v174 = (char *)v84 + v172;
              uint64_t v175 = sub_23309AF80();
              uint64_t v176 = *(void *)(v175 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v173, v174, v175);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
              }
              uint64_t v20 = v543;
              uint64_t v194 = *(int *)(v528 + 28);
              uint64_t v195 = (void *)((char *)v552 + v194);
              uint64_t v196 = (void *)((char *)v113 + v194);
              uint64_t v197 = v196[1];
              *uint64_t v195 = *v196;
              v195[1] = v197;
              uint64_t v198 = (void (*)(void *, void, uint64_t, uint64_t))v518[7];
              swift_bridgeObjectRetain();
              v198(v552, 0, 1, v528);
            }
            v86[7](__srca, 0, 1, v561);
          }
          uint64_t v199 = v20[7];
          uint64_t v200 = (char *)v9 + v199;
          uint64_t v201 = (char *)v10 + v199;
          uint64_t v202 = type metadata accessor for FHIRDateTime();
          uint64_t v531 = *(void *)(v202 - 8);
          v555 = (int *)v202;
          __srcd = *(unsigned int (**)(unsigned char *, uint64_t))(v531 + 48);
          if (__srcd(v201, 1))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v200, v201, *(void *)(*(void *)(v203 - 8) + 64));
          }
          else
          {
            *uint64_t v200 = *v201;
            *((void *)v200 + 1) = *((void *)v201 + 1);
            *((_DWORD *)v200 + 4) = *((_DWORD *)v201 + 4);
            uint64_t v204 = *((void *)v201 + 7);
            if (v204 == 1)
            {
              long long v205 = *(_OWORD *)(v201 + 40);
              *(_OWORD *)(v200 + 24) = *(_OWORD *)(v201 + 24);
              *(_OWORD *)(v200 + 40) = v205;
              *((void *)v200 + 7) = *((void *)v201 + 7);
            }
            else
            {
              v200[24] = v201[24];
              *(_WORD *)(v200 + 25) = *(_WORD *)(v201 + 25);
              *(_OWORD *)(v200 + 28) = *(_OWORD *)(v201 + 28);
              *((_DWORD *)v200 + 11) = *((_DWORD *)v201 + 11);
              *((void *)v200 + 6) = *((void *)v201 + 6);
              *((void *)v200 + 7) = v204;
              swift_bridgeObjectRetain();
            }
            uint64_t v206 = v555[7];
            v539 = &v200[v206];
            long long v207 = &v201[v206];
            uint64_t v208 = sub_23309B300();
            uint64_t v209 = *(void *)(v208 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v539, v207, *(void *)(*(void *)(v210 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v209 + 16))(v539, v207, v208);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v209 + 56))(v539, 0, 1, v208);
            }
            uint64_t v211 = v555[8];
            uint64_t v212 = &v200[v211];
            uint64_t v213 = &v201[v211];
            uint64_t v214 = v213[1];
            *uint64_t v212 = *v213;
            v212[1] = v214;
            uint64_t v215 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
            swift_bridgeObjectRetain();
            v215(v200, 0, 1, v555);
          }
          uint64_t v216 = v20[8];
          uint64_t v217 = (void *)((char *)v9 + v216);
          uint64_t v218 = (void *)((char *)v10 + v216);
          uint64_t v219 = v218[1];
          void *v217 = *v218;
          v217[1] = v219;
          v217[2] = v218[2];
          uint64_t v220 = v20[9];
          uint64_t v221 = (char *)v9 + v220;
          uint64_t v222 = (char *)v10 + v220;
          uint64_t v223 = *(void *)((char *)v10 + v220 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v223 == 1)
          {
            *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
            *((void *)v221 + 2) = *((void *)v222 + 2);
          }
          else
          {
            *(void *)uint64_t v221 = *(void *)v222;
            *((void *)v221 + 1) = v223;
            *((void *)v221 + 2) = *((void *)v222 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v224 = v20[10];
          uint64_t v225 = (void *)((char *)v9 + v224);
          uint64_t v226 = (void *)((char *)v10 + v224);
          uint64_t v227 = v226[1];
          void *v225 = *v226;
          v225[1] = v227;
          uint64_t v228 = v20[11];
          uint64_t v229 = (void *)((char *)v9 + v228);
          uint64_t v230 = (void *)((char *)v10 + v228);
          uint64_t v231 = v230[1];
          void *v229 = *v230;
          v229[1] = v231;
          uint64_t v232 = v20[12];
          uint64_t v233 = (char *)v9 + v232;
          uint64_t v234 = (char *)v10 + v232;
          uint64_t v235 = *(void *)((char *)v10 + v232 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v235 == 1)
          {
            *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
            *((void *)v233 + 2) = *((void *)v234 + 2);
          }
          else
          {
            *(void *)uint64_t v233 = *(void *)v234;
            *((void *)v233 + 1) = v235;
            *((void *)v233 + 2) = *((void *)v234 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v236 = v555;
          *(void *)((char *)v9 + v20[13]) = *(void *)((char *)v10 + v20[13]);
          uint64_t v237 = v20[14];
          uint64_t v238 = (char *)v9 + v237;
          uint64_t v239 = (char *)v10 + v237;
          swift_bridgeObjectRetain();
          if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v239, 1, v555))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v238, v239, *(void *)(*(void *)(v240 - 8) + 64));
          }
          else
          {
            unsigned char *v238 = *v239;
            *((void *)v238 + 1) = *((void *)v239 + 1);
            *((_DWORD *)v238 + 4) = *((_DWORD *)v239 + 4);
            uint64_t v241 = *((void *)v239 + 7);
            if (v241 == 1)
            {
              long long v242 = *(_OWORD *)(v239 + 40);
              *(_OWORD *)(v238 + 24) = *(_OWORD *)(v239 + 24);
              *(_OWORD *)(v238 + 40) = v242;
              *((void *)v238 + 7) = *((void *)v239 + 7);
            }
            else
            {
              v238[24] = v239[24];
              *(_WORD *)(v238 + 25) = *(_WORD *)(v239 + 25);
              *(_OWORD *)(v238 + 28) = *(_OWORD *)(v239 + 28);
              *((_DWORD *)v238 + 11) = *((_DWORD *)v239 + 11);
              *((void *)v238 + 6) = *((void *)v239 + 6);
              *((void *)v238 + 7) = v241;
              swift_bridgeObjectRetain();
            }
            uint64_t v243 = v555[7];
            uint64_t v244 = &v238[v243];
            uint64_t v245 = &v239[v243];
            uint64_t v246 = sub_23309B300();
            uint64_t v247 = *(void *)(v246 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v247 + 48))(v245, 1, v246))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v244, v245, *(void *)(*(void *)(v248 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v247 + 16))(v244, v245, v246);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v247 + 56))(v244, 0, 1, v246);
            }
            uint64_t v236 = v555;
            uint64_t v249 = v555[8];
            uint64_t v250 = &v238[v249];
            uint64_t v251 = &v239[v249];
            uint64_t v252 = v251[1];
            *uint64_t v250 = *v251;
            v250[1] = v252;
            long long v253 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
            swift_bridgeObjectRetain();
            v253(v238, 0, 1, v555);
          }
          uint64_t v254 = v20[15];
          uint64_t v255 = (char *)v9 + v254;
          uint64_t v256 = (char *)v10 + v254;
          uint64_t v257 = type metadata accessor for Period();
          v522 = *(void **)(v257 - 8);
          uint64_t v258 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v522[6];
          v540 = (int *)v257;
          if (v258(v256, 1, v257))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v255, v256, *(void *)(*(void *)(v259 - 8) + 64));
          }
          else
          {
            if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v256, 1, v236))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v255, v256, *(void *)(*(void *)(v260 - 8) + 64));
            }
            else
            {
              *uint64_t v255 = *v256;
              *((void *)v255 + 1) = *((void *)v256 + 1);
              *((_DWORD *)v255 + 4) = *((_DWORD *)v256 + 4);
              uint64_t v261 = *((void *)v256 + 7);
              if (v261 == 1)
              {
                long long v262 = *(_OWORD *)(v256 + 40);
                *(_OWORD *)(v255 + 24) = *(_OWORD *)(v256 + 24);
                *(_OWORD *)(v255 + 40) = v262;
                *((void *)v255 + 7) = *((void *)v256 + 7);
              }
              else
              {
                v255[24] = v256[24];
                *(_WORD *)(v255 + 25) = *(_WORD *)(v256 + 25);
                *(_OWORD *)(v255 + 28) = *(_OWORD *)(v256 + 28);
                *((_DWORD *)v255 + 11) = *((_DWORD *)v256 + 11);
                *((void *)v255 + 6) = *((void *)v256 + 6);
                *((void *)v255 + 7) = v261;
                swift_bridgeObjectRetain();
              }
              uint64_t v263 = v236[7];
              __dsta = &v255[v263];
              v264 = &v256[v263];
              uint64_t v265 = sub_23309B300();
              uint64_t v266 = *(void *)(v265 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v266 + 48))(v264, 1, v265))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(__dsta, v264, *(void *)(*(void *)(v267 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v266 + 16))(__dsta, v264, v265);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v266 + 56))(__dsta, 0, 1, v265);
              }
              uint64_t v329 = v555[8];
              uint64_t v330 = &v255[v329];
              uint64_t v331 = &v256[v329];
              uint64_t v332 = v331[1];
              *uint64_t v330 = *v331;
              v330[1] = v332;
              uint64_t v333 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
              swift_bridgeObjectRetain();
              v333(v255, 0, 1, v555);
              uint64_t v236 = v555;
              uint64_t v257 = (uint64_t)v540;
              uint64_t v20 = v543;
            }
            uint64_t v334 = *(int *)(v257 + 20);
            uint64_t v335 = &v255[v334];
            uint64_t v336 = &v256[v334];
            if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v336, 1, v236))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v335, v336, *(void *)(*(void *)(v337 - 8) + 64));
            }
            else
            {
              unsigned char *v335 = *v336;
              *((void *)v335 + 1) = *((void *)v336 + 1);
              *((_DWORD *)v335 + 4) = *((_DWORD *)v336 + 4);
              uint64_t v338 = *((void *)v336 + 7);
              if (v338 == 1)
              {
                long long v339 = *(_OWORD *)(v336 + 40);
                *(_OWORD *)(v335 + 24) = *(_OWORD *)(v336 + 24);
                *(_OWORD *)(v335 + 40) = v339;
                *((void *)v335 + 7) = *((void *)v336 + 7);
              }
              else
              {
                v335[24] = v336[24];
                *(_WORD *)(v335 + 25) = *(_WORD *)(v336 + 25);
                *(_OWORD *)(v335 + 28) = *(_OWORD *)(v336 + 28);
                *((_DWORD *)v335 + 11) = *((_DWORD *)v336 + 11);
                *((void *)v335 + 6) = *((void *)v336 + 6);
                *((void *)v335 + 7) = v338;
                swift_bridgeObjectRetain();
              }
              uint64_t v340 = v236[7];
              __dstc = &v335[v340];
              uint64_t v341 = &v336[v340];
              uint64_t v342 = sub_23309B300();
              uint64_t v509 = *(void *)(v342 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v509 + 48))(v341, 1, v342))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(__dstc, v341, *(void *)(*(void *)(v343 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v509 + 16))(__dstc, v341, v342);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v509 + 56))(__dstc, 0, 1, v342);
              }
              uint64_t v236 = v555;
              uint64_t v433 = v555[8];
              uint64_t v434 = &v335[v433];
              uint64_t v435 = &v336[v433];
              uint64_t v436 = v435[1];
              *uint64_t v434 = *v435;
              v434[1] = v436;
              uint64_t v437 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
              swift_bridgeObjectRetain();
              v437(v335, 0, 1, v555);
              uint64_t v20 = v543;
            }
            ((void (*)(unsigned char *, void, uint64_t, int *))v522[7])(v255, 0, 1, v540);
          }
          uint64_t v438 = v20[16];
          uint64_t v439 = (void *)((char *)v9 + v438);
          v440 = (void *)((char *)v10 + v438);
          uint64_t v441 = v440[1];
          *uint64_t v439 = *v440;
          v439[1] = v441;
          uint64_t v442 = v20[17];
          v443 = (char *)v9 + v442;
          uint64_t v444 = (char *)v10 + v442;
          swift_bridgeObjectRetain();
          if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v444, 1, v236))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v443, v444, *(void *)(*(void *)(v445 - 8) + 64));
            long long v446 = v540;
          }
          else
          {
            unsigned char *v443 = *v444;
            *((void *)v443 + 1) = *((void *)v444 + 1);
            *((_DWORD *)v443 + 4) = *((_DWORD *)v444 + 4);
            uint64_t v447 = *((void *)v444 + 7);
            long long v448 = v258;
            if (v447 == 1)
            {
              long long v449 = *(_OWORD *)(v444 + 40);
              *(_OWORD *)(v443 + 24) = *(_OWORD *)(v444 + 24);
              *(_OWORD *)(v443 + 40) = v449;
              *((void *)v443 + 7) = *((void *)v444 + 7);
            }
            else
            {
              v443[24] = v444[24];
              *(_WORD *)(v443 + 25) = *(_WORD *)(v444 + 25);
              *(_OWORD *)(v443 + 28) = *(_OWORD *)(v444 + 28);
              *((_DWORD *)v443 + 11) = *((_DWORD *)v444 + 11);
              *((void *)v443 + 6) = *((void *)v444 + 6);
              *((void *)v443 + 7) = v447;
              swift_bridgeObjectRetain();
            }
            uint64_t v450 = v236[7];
            uint64_t v451 = &v443[v450];
            uint64_t v452 = &v444[v450];
            uint64_t v453 = sub_23309B300();
            uint64_t v454 = *(void *)(v453 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v454 + 48))(v452, 1, v453))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v451, v452, *(void *)(*(void *)(v455 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v454 + 16))(v451, v452, v453);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v454 + 56))(v451, 0, 1, v453);
            }
            uint64_t v456 = v555[8];
            uint64_t v457 = &v443[v456];
            uint64_t v458 = &v444[v456];
            uint64_t v459 = v458[1];
            *uint64_t v457 = *v458;
            v457[1] = v459;
            v460 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
            swift_bridgeObjectRetain();
            v460(v443, 0, 1, v555);
            long long v446 = v540;
            uint64_t v20 = v543;
            uint64_t v258 = v448;
          }
          uint64_t v461 = v20[18];
          uint64_t v462 = (char *)v9 + v461;
          uint64_t v463 = (char *)v10 + v461;
          if (v258((unsigned char *)v10 + v461, 1, (uint64_t)v446))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v462, v463, *(void *)(*(void *)(v464 - 8) + 64));
            unint64_t v3 = v585;
            uint64_t v11 = v576;
            uint64_t v6 = v581;
          }
          else
          {
            uint64_t v465 = v555;
            if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v463, 1, v555))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v462, v463, *(void *)(*(void *)(v466 - 8) + 64));
            }
            else
            {
              *uint64_t v462 = *v463;
              *((void *)v462 + 1) = *((void *)v463 + 1);
              *((_DWORD *)v462 + 4) = *((_DWORD *)v463 + 4);
              uint64_t v467 = *((void *)v463 + 7);
              if (v467 == 1)
              {
                long long v468 = *(_OWORD *)(v463 + 40);
                *(_OWORD *)(v462 + 24) = *(_OWORD *)(v463 + 24);
                *(_OWORD *)(v462 + 40) = v468;
                *((void *)v462 + 7) = *((void *)v463 + 7);
              }
              else
              {
                v462[24] = v463[24];
                *(_WORD *)(v462 + 25) = *(_WORD *)(v463 + 25);
                *(_OWORD *)(v462 + 28) = *(_OWORD *)(v463 + 28);
                *((_DWORD *)v462 + 11) = *((_DWORD *)v463 + 11);
                *((void *)v462 + 6) = *((void *)v463 + 6);
                *((void *)v462 + 7) = v467;
                swift_bridgeObjectRetain();
              }
              uint64_t v469 = v555[7];
              uint64_t v470 = &v462[v469];
              uint64_t v471 = &v463[v469];
              uint64_t v472 = sub_23309B300();
              uint64_t v473 = *(void *)(v472 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v473 + 48))(v471, 1, v472))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v470, v471, *(void *)(*(void *)(v474 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v473 + 16))(v470, v471, v472);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v473 + 56))(v470, 0, 1, v472);
              }
              long long v446 = v540;
              uint64_t v465 = v555;
              uint64_t v475 = v555[8];
              uint64_t v476 = &v462[v475];
              uint64_t v477 = &v463[v475];
              uint64_t v478 = v477[1];
              *uint64_t v476 = *v477;
              v476[1] = v478;
              uint64_t v479 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
              swift_bridgeObjectRetain();
              v479(v462, 0, 1, v555);
            }
            uint64_t v480 = v446[5];
            v481 = &v462[v480];
            uint64_t v482 = &v463[v480];
            if (((unsigned int (*)(unsigned char *, uint64_t, int *))__srcd)(v482, 1, v465))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v481, v482, *(void *)(*(void *)(v483 - 8) + 64));
            }
            else
            {
              unsigned char *v481 = *v482;
              *((void *)v481 + 1) = *((void *)v482 + 1);
              *((_DWORD *)v481 + 4) = *((_DWORD *)v482 + 4);
              uint64_t v484 = *((void *)v482 + 7);
              if (v484 == 1)
              {
                long long v485 = *(_OWORD *)(v482 + 40);
                *(_OWORD *)(v481 + 24) = *(_OWORD *)(v482 + 24);
                *(_OWORD *)(v481 + 40) = v485;
                *((void *)v481 + 7) = *((void *)v482 + 7);
              }
              else
              {
                v481[24] = v482[24];
                *(_WORD *)(v481 + 25) = *(_WORD *)(v482 + 25);
                *(_OWORD *)(v481 + 28) = *(_OWORD *)(v482 + 28);
                *((_DWORD *)v481 + 11) = *((_DWORD *)v482 + 11);
                *((void *)v481 + 6) = *((void *)v482 + 6);
                *((void *)v481 + 7) = v484;
                swift_bridgeObjectRetain();
              }
              uint64_t v486 = v465[7];
              v562 = &v481[v486];
              uint64_t v487 = &v482[v486];
              uint64_t v488 = sub_23309B300();
              uint64_t v489 = *(void *)(v488 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v489 + 48))(v487, 1, v488))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v562, v487, *(void *)(*(void *)(v490 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v489 + 16))(v562, v487, v488);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v489 + 56))(v562, 0, 1, v488);
              }
              uint64_t v491 = v555[8];
              uint64_t v492 = &v481[v491];
              uint64_t v493 = &v482[v491];
              uint64_t v494 = v493[1];
              *uint64_t v492 = *v493;
              v492[1] = v494;
              uint64_t v495 = *(void (**)(unsigned char *, void, uint64_t, int *))(v531 + 56);
              swift_bridgeObjectRetain();
              v495(v481, 0, 1, v555);
            }
            ((void (*)(unsigned char *, void, uint64_t, int *))v522[7])(v462, 0, 1, v540);
            unint64_t v3 = v585;
            uint64_t v11 = v576;
            uint64_t v6 = v581;
          }
          uint64_t v496 = v543[19];
          uint64_t v497 = (void *)((char *)v9 + v496);
          uint64_t v498 = (void *)((char *)v10 + v496);
          uint64_t v499 = v498[1];
          *uint64_t v497 = *v498;
          v497[1] = v499;
          uint64_t v500 = v543[20];
          uint64_t v501 = (void *)((char *)v9 + v500);
          uint64_t v502 = (void *)((char *)v10 + v500);
          uint64_t v503 = v502[1];
          *uint64_t v501 = *v502;
          v501[1] = v503;
          uint64_t v504 = v543[21];
          uint64_t v505 = (void *)((char *)v9 + v504);
          uint64_t v506 = (void *)((char *)v10 + v504);
          uint64_t v507 = v506[1];
          *uint64_t v505 = *v506;
          v505[1] = v507;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v12 = v569;
          goto LABEL_200;
        case 2u:
          uint64_t v570 = v12;
          uint64_t v577 = v11;
          uint64_t v582 = v6;
          v586 = v3;
          uint64_t v27 = v10[1];
          void *v9 = *v10;
          v9[1] = v27;
          uint64_t v28 = v10[3];
          v9[2] = v10[2];
          v9[3] = v28;
          uint64_t v29 = v10[5];
          v9[4] = v10[4];
          v9[5] = v29;
          uint64_t v30 = v10[7];
          v9[6] = v10[6];
          v9[7] = v30;
          uint64_t v31 = v10[9];
          v9[8] = v10[8];
          v9[9] = v31;
          v9[10] = v10[10];
          v558 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
          uint64_t v32 = v558[9];
          __dst = (char *)v9 + v32;
          uint64_t v517 = v10;
          v527 = (char *)v10 + v32;
          uint64_t v33 = type metadata accessor for FHIRDateTime();
          v534 = *(void **)(v33 - 8);
          uint64_t v34 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v534[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v544 = v34;
          if (v34(v527, 1, v33))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(__dst, v527, *(void *)(*(void *)(v35 - 8) + 64));
            uint64_t v10 = v517;
          }
          else
          {
            unsigned char *__dst = *v527;
            *((void *)__dst + 1) = *((void *)v527 + 1);
            *((_DWORD *)__dst + 4) = *((_DWORD *)v527 + 4);
            uint64_t v87 = *((void *)v527 + 7);
            if (v87 == 1)
            {
              long long v88 = *(_OWORD *)(v527 + 40);
              *(_OWORD *)(__dst + 24) = *(_OWORD *)(v527 + 24);
              *(_OWORD *)(__dst + 40) = v88;
              *((void *)__dst + 7) = *((void *)v527 + 7);
            }
            else
            {
              __dst[24] = v527[24];
              *(_WORD *)(__dst + 25) = *(_WORD *)(v527 + 25);
              *(_OWORD *)(__dst + 28) = *(_OWORD *)(v527 + 28);
              *((_DWORD *)__dst + 11) = *((_DWORD *)v527 + 11);
              *((void *)__dst + 6) = *((void *)v527 + 6);
              *((void *)__dst + 7) = v87;
              swift_bridgeObjectRetain();
            }
            uint64_t v10 = v517;
            uint64_t v94 = *(int *)(v33 + 28);
            uint64_t v95 = &__dst[v94];
            uint64_t v96 = &v527[v94];
            uint64_t v97 = sub_23309B300();
            uint64_t v98 = *(void *)(v97 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v98 + 16))(v95, v96, v97);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
            }
            uint64_t v114 = *(int *)(v33 + 32);
            uint64_t v115 = &__dst[v114];
            uint64_t v116 = &v527[v114];
            uint64_t v117 = v116[1];
            void *v115 = *v116;
            v115[1] = v117;
            uint64_t v118 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v534[7];
            swift_bridgeObjectRetain();
            v118(__dst, 0, 1, v33);
          }
          uint64_t v119 = v558[10];
          uint64_t v120 = (char *)v9 + v119;
          uint64_t v121 = (char *)v10 + v119;
          uint64_t v122 = type metadata accessor for Period();
          uint64_t v123 = *(void *)(v122 - 8);
          __srcb = (int *)v33;
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
          }
          else
          {
            if (v544(v121, 1, v33))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v120, v121, *(void *)(*(void *)(v125 - 8) + 64));
            }
            else
            {
              *uint64_t v120 = *v121;
              *((void *)v120 + 1) = *((void *)v121 + 1);
              *((_DWORD *)v120 + 4) = *((_DWORD *)v121 + 4);
              uint64_t v166 = *((void *)v121 + 7);
              if (v166 == 1)
              {
                long long v167 = *(_OWORD *)(v121 + 40);
                *(_OWORD *)(v120 + 24) = *(_OWORD *)(v121 + 24);
                *(_OWORD *)(v120 + 40) = v167;
                *((void *)v120 + 7) = *((void *)v121 + 7);
              }
              else
              {
                v120[24] = v121[24];
                *(_WORD *)(v120 + 25) = *(_WORD *)(v121 + 25);
                *(_OWORD *)(v120 + 28) = *(_OWORD *)(v121 + 28);
                *((_DWORD *)v120 + 11) = *((_DWORD *)v121 + 11);
                *((void *)v120 + 6) = *((void *)v121 + 6);
                *((void *)v120 + 7) = v166;
                swift_bridgeObjectRetain();
              }
              uint64_t v178 = *(int *)(v33 + 28);
              uint64_t v520 = &v120[v178];
              v530 = v120;
              uint64_t v179 = &v121[v178];
              uint64_t v180 = sub_23309B300();
              uint64_t v181 = *(void *)(v180 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v181 + 48))(v179, 1, v180))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v520, v179, *(void *)(*(void *)(v182 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v181 + 16))(v520, v179, v180);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v181 + 56))(v520, 0, 1, v180);
              }
              uint64_t v268 = *(int *)(v33 + 32);
              uint64_t v120 = v530;
              uint64_t v269 = &v530[v268];
              uint64_t v270 = &v121[v268];
              uint64_t v271 = v270[1];
              void *v269 = *v270;
              v269[1] = v271;
              uint64_t v272 = (void (*)(unsigned char *, void, uint64_t, int *))v534[7];
              swift_bridgeObjectRetain();
              v272(v530, 0, 1, __srcb);
              uint64_t v33 = (uint64_t)__srcb;
            }
            uint64_t v273 = *(int *)(v122 + 20);
            uint64_t v274 = &v120[v273];
            uint64_t v275 = &v121[v273];
            if (v544(v275, 1, v33))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
            }
            else
            {
              *uint64_t v274 = *v275;
              *((void *)v274 + 1) = *((void *)v275 + 1);
              *((_DWORD *)v274 + 4) = *((_DWORD *)v275 + 4);
              uint64_t v277 = *((void *)v275 + 7);
              v532 = v120;
              uint64_t v511 = v123;
              if (v277 == 1)
              {
                long long v278 = *(_OWORD *)(v275 + 40);
                *(_OWORD *)(v274 + 24) = *(_OWORD *)(v275 + 24);
                *(_OWORD *)(v274 + 40) = v278;
                *((void *)v274 + 7) = *((void *)v275 + 7);
              }
              else
              {
                v274[24] = v275[24];
                *(_WORD *)(v274 + 25) = *(_WORD *)(v275 + 25);
                *(_OWORD *)(v274 + 28) = *(_OWORD *)(v275 + 28);
                *((_DWORD *)v274 + 11) = *((_DWORD *)v275 + 11);
                *((void *)v274 + 6) = *((void *)v275 + 6);
                *((void *)v274 + 7) = v277;
                swift_bridgeObjectRetain();
              }
              uint64_t v279 = *(int *)(v33 + 28);
              v523 = &v274[v279];
              uint64_t v280 = &v275[v279];
              uint64_t v281 = sub_23309B300();
              uint64_t v282 = *(void *)(v281 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v523, v280, *(void *)(*(void *)(v283 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v282 + 16))(v523, v280, v281);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v282 + 56))(v523, 0, 1, v281);
              }
              uint64_t v120 = v532;
              uint64_t v123 = v511;
              uint64_t v344 = *(int *)(v33 + 32);
              v345 = &v274[v344];
              uint64_t v346 = &v275[v344];
              uint64_t v347 = v346[1];
              void *v345 = *v346;
              v345[1] = v347;
              uint64_t v348 = v33;
              uint64_t v349 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v534[7];
              swift_bridgeObjectRetain();
              v349(v274, 0, 1, v348);
            }
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
          }
          unint64_t v3 = v586;
          uint64_t v11 = v577;
          uint64_t v6 = v582;
          uint64_t v350 = v558[11];
          uint64_t v351 = (char *)v9 + v350;
          v352 = (char *)v10 + v350;
          if (v544((unsigned char *)v10 + v350, 1, (uint64_t)__srcb))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v351, v352, *(void *)(*(void *)(v353 - 8) + 64));
          }
          else
          {
            *uint64_t v351 = *v352;
            *((void *)v351 + 1) = *((void *)v352 + 1);
            *((_DWORD *)v351 + 4) = *((_DWORD *)v352 + 4);
            uint64_t v354 = *((void *)v352 + 7);
            if (v354 == 1)
            {
              long long v355 = *(_OWORD *)(v352 + 40);
              *(_OWORD *)(v351 + 24) = *(_OWORD *)(v352 + 24);
              *(_OWORD *)(v351 + 40) = v355;
              *((void *)v351 + 7) = *((void *)v352 + 7);
            }
            else
            {
              v351[24] = v352[24];
              *(_WORD *)(v351 + 25) = *(_WORD *)(v352 + 25);
              *(_OWORD *)(v351 + 28) = *(_OWORD *)(v352 + 28);
              *((_DWORD *)v351 + 11) = *((_DWORD *)v352 + 11);
              *((void *)v351 + 6) = *((void *)v352 + 6);
              *((void *)v351 + 7) = v354;
              swift_bridgeObjectRetain();
            }
            uint64_t v356 = __srcb[7];
            long long v357 = &v351[v356];
            long long v358 = &v352[v356];
            uint64_t v359 = sub_23309B300();
            uint64_t v360 = *(void *)(v359 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v360 + 48))(v358, 1, v359))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v357, v358, *(void *)(*(void *)(v361 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v360 + 16))(v357, v358, v359);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v360 + 56))(v357, 0, 1, v359);
            }
            unint64_t v3 = v586;
            uint64_t v11 = v577;
            uint64_t v6 = v582;
            uint64_t v362 = __srcb[8];
            uint64_t v363 = &v351[v362];
            uint64_t v364 = &v352[v362];
            uint64_t v365 = v364[1];
            void *v363 = *v364;
            v363[1] = v365;
            v556 = (void *)v534[7];
            swift_bridgeObjectRetain();
            ((void (*)(unsigned char *, void, uint64_t, int *))v556)(v351, 0, 1, __srcb);
          }
          uint64_t v12 = v570;
          uint64_t v366 = v558[12];
          goto LABEL_176;
        case 3u:
          uint64_t v571 = v12;
          uint64_t v578 = v11;
          uint64_t v583 = v6;
          v587 = v3;
          uint64_t v36 = v10[1];
          void *v9 = *v10;
          v9[1] = v36;
          uint64_t v37 = v10[3];
          v9[2] = v10[2];
          v9[3] = v37;
          uint64_t v38 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38 != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v39 = v10[5];
          uint64_t v40 = v10[6];
          v9[4] = v38;
          v9[5] = v39;
          v9[6] = v40;
          v559 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
          uint64_t v41 = v559[8];
          uint64_t v42 = (char *)v9 + v41;
          uint64_t v43 = (char *)v10 + v41;
          uint64_t v44 = type metadata accessor for FHIRDateTime();
          uint64_t v45 = *(void *)(v44 - 8);
          uint64_t v46 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v45 + 48);
          swift_bridgeObjectRetain();
          if (v46(v43, 1, v44))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
          }
          else
          {
            *uint64_t v42 = *v43;
            *((void *)v42 + 1) = *((void *)v43 + 1);
            *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
            uint64_t v89 = *((void *)v43 + 7);
            if (v89 == 1)
            {
              long long v90 = *(_OWORD *)(v43 + 40);
              *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
              *(_OWORD *)(v42 + 40) = v90;
              *((void *)v42 + 7) = *((void *)v43 + 7);
            }
            else
            {
              v42[24] = v43[24];
              *(_WORD *)(v42 + 25) = *(_WORD *)(v43 + 25);
              *(_OWORD *)(v42 + 28) = *(_OWORD *)(v43 + 28);
              *((_DWORD *)v42 + 11) = *((_DWORD *)v43 + 11);
              *((void *)v42 + 6) = *((void *)v43 + 6);
              *((void *)v42 + 7) = v89;
              swift_bridgeObjectRetain();
            }
            uint64_t v100 = *(int *)(v44 + 28);
            v553 = &v42[v100];
            uint64_t v101 = &v43[v100];
            uint64_t v102 = sub_23309B300();
            uint64_t v103 = *(void *)(v102 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v553, v101, *(void *)(*(void *)(v104 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v103 + 16))(v553, v101, v102);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v103 + 56))(v553, 0, 1, v102);
            }
            uint64_t v126 = *(int *)(v44 + 32);
            uint64_t v127 = &v42[v126];
            uint64_t v128 = &v43[v126];
            uint64_t v129 = v128[1];
            *uint64_t v127 = *v128;
            v127[1] = v129;
            uint64_t v130 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v45 + 56);
            swift_bridgeObjectRetain();
            v130(v42, 0, 1, v44);
          }
          uint64_t v131 = v559[9];
          long long v132 = (void *)((char *)v9 + v131);
          uint64_t v133 = (void *)((char *)v10 + v131);
          *long long v132 = *v133;
          *(void *)((char *)v132 + 5) = *(void *)((char *)v133 + 5);
          *(void *)((char *)v9 + v559[10]) = *(void *)((char *)v10 + v559[10]);
          *((unsigned char *)v9 + v559[11]) = *((unsigned char *)v10 + v559[11]);
          *(void *)((char *)v9 + v559[12]) = *(void *)((char *)v10 + v559[12]);
          uint64_t v134 = v559[13];
          long long v135 = (void *)((char *)v9 + v134);
          uint64_t v136 = (void *)((char *)v10 + v134);
          uint64_t v137 = v136[1];
          *long long v135 = *v136;
          v135[1] = v137;
          v135[2] = v136[2];
          *((unsigned char *)v9 + v559[14]) = *((unsigned char *)v10 + v559[14]);
          uint64_t v138 = v559[15];
          __srcc = v9;
          uint64_t v139 = (void *)((char *)v9 + v138);
          uint64_t v140 = (void *)((char *)v10 + v138);
          uint64_t v141 = type metadata accessor for Reference();
          v554 = *(void **)(v141 - 8);
          uint64_t v142 = (unsigned int (*)(void, void, void))v554[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v142(v140, 1, v141))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v139, v140, *(void *)(*(void *)(v143 - 8) + 64));
            uint64_t v9 = __srcc;
            uint64_t v12 = v571;
          }
          else
          {
            v519 = v139;
            v529 = v142;
            uint64_t v144 = v140[1];
            *uint64_t v139 = *v140;
            v139[1] = v144;
            uint64_t v145 = v140[3];
            v139[2] = v140[2];
            v139[3] = v145;
            uint64_t v146 = *(int *)(v141 + 24);
            v537 = (void *)((char *)v139 + v146);
            v546 = (void *)v141;
            uint64_t v147 = (void *)((char *)v140 + v146);
            uint64_t v148 = type metadata accessor for Identifier();
            uint64_t v149 = *(void *)(v148 - 8);
            uint64_t v150 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v149 + 48);
            uint64_t v151 = v147;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v150(v147, 1, v148))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v537, v147, *(void *)(*(void *)(v152 - 8) + 64));
              uint64_t v9 = __srcc;
              uint64_t v12 = v571;
              uint64_t v141 = (uint64_t)v546;
            }
            else
            {
              uint64_t v508 = v149;
              uint64_t v168 = v147[1];
              void *v537 = *v147;
              v537[1] = v168;
              uint64_t v169 = v147[3];
              swift_bridgeObjectRetain();
              uint64_t v9 = __srcc;
              uint64_t v510 = v151;
              if (v169 == 1)
              {
                *((_OWORD *)v537 + 1) = *((_OWORD *)v151 + 1);
                v537[4] = v151[4];
              }
              else
              {
                v537[2] = v151[2];
                v537[3] = v169;
                v537[4] = v151[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v141 = (uint64_t)v546;
              uint64_t v183 = *(int *)(v148 + 24);
              v547 = (char *)v537 + v183;
              uint64_t v184 = (char *)v151 + v183;
              uint64_t v185 = sub_23309AF80();
              uint64_t v186 = *(void *)(v185 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v185))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v547, v184, *(void *)(*(void *)(v187 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v547, v184, v185);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v547, 0, 1, v185);
              }
              uint64_t v12 = v571;
              uint64_t v284 = *(int *)(v148 + 28);
              uint64_t v285 = (void *)((char *)v537 + v284);
              uint64_t v286 = (void *)((char *)v510 + v284);
              uint64_t v287 = v286[1];
              void *v285 = *v286;
              v285[1] = v287;
              v548 = *(void **)(v508 + 56);
              swift_bridgeObjectRetain();
              ((void (*)(void *, void, uint64_t, uint64_t))v548)(v537, 0, 1, v148);
            }
            ((void (*)(void *, void, uint64_t, uint64_t))v554[7])(v519, 0, 1, v141);
            uint64_t v142 = v529;
          }
          uint64_t v288 = v559[16];
          uint64_t v289 = (void *)((char *)v9 + v288);
          uint64_t v290 = (void *)((char *)v10 + v288);
          uint64_t v291 = v290[1];
          void *v289 = *v290;
          v289[1] = v291;
          uint64_t v292 = v559[17];
          long long v293 = (void *)((char *)v9 + v292);
          uint64_t v294 = (void *)((char *)v10 + v292);
          swift_bridgeObjectRetain();
          if (v142(v294, 1, v141))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v293, v294, *(void *)(*(void *)(v295 - 8) + 64));
          }
          else
          {
            uint64_t v296 = v294[1];
            void *v293 = *v294;
            v293[1] = v296;
            uint64_t v297 = v294[3];
            v293[2] = v294[2];
            v293[3] = v297;
            uint64_t v298 = *(int *)(v141 + 24);
            __srce = v293;
            v541 = (void *)((char *)v293 + v298);
            v549 = (void *)v141;
            uint64_t v299 = (void *)((char *)v294 + v298);
            uint64_t v300 = type metadata accessor for Identifier();
            uint64_t v301 = *(void *)(v300 - 8);
            uint64_t v302 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v301 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v302(v299, 1, v300))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v541, v299, *(void *)(*(void *)(v303 - 8) + 64));
              uint64_t v12 = v571;
            }
            else
            {
              uint64_t v304 = v299[1];
              void *v541 = *v299;
              v541[1] = v304;
              uint64_t v305 = v299[3];
              swift_bridgeObjectRetain();
              if (v305 == 1)
              {
                *((_OWORD *)v541 + 1) = *((_OWORD *)v299 + 1);
                v541[4] = v299[4];
              }
              else
              {
                v541[2] = v299[2];
                v541[3] = v305;
                v541[4] = v299[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              v524 = (int *)v300;
              uint64_t v306 = *(int *)(v300 + 24);
              __dstb = (char *)v541 + v306;
              uint64_t v307 = (char *)v299 + v306;
              uint64_t v308 = sub_23309AF80();
              uint64_t v309 = *(void *)(v308 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v309 + 48))(v307, 1, v308))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(__dstb, v307, *(void *)(*(void *)(v310 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v309 + 16))(__dstb, v307, v308);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v309 + 56))(__dstb, 0, 1, v308);
              }
              uint64_t v12 = v571;
              uint64_t v367 = v524[7];
              v368 = (void *)((char *)v541 + v367);
              uint64_t v369 = (void *)((char *)v299 + v367);
              uint64_t v370 = v369[1];
              void *v368 = *v369;
              v368[1] = v370;
              uint64_t v371 = *(void (**)(void *, void, uint64_t, int *))(v301 + 56);
              swift_bridgeObjectRetain();
              v371(v541, 0, 1, v524);
            }
            ((void (*)(void *, void, uint64_t, void *))v554[7])(__srce, 0, 1, v549);
          }
          unint64_t v3 = v587;
          uint64_t v11 = v578;
          uint64_t v6 = v583;
          uint64_t v366 = v559[18];
LABEL_176:
          uint64_t v372 = (void *)((char *)v9 + v366);
          uint64_t v373 = (void *)((char *)v10 + v366);
          uint64_t v374 = v373[1];
          void *v372 = *v373;
          v372[1] = v374;
          goto LABEL_200;
        case 4u:
          uint64_t v48 = v10[1];
          void *v9 = *v10;
          v9[1] = v48;
          uint64_t v49 = v10[3];
          v9[2] = v10[2];
          v9[3] = v49;
          uint64_t v50 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v50 != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v52 = v10[5];
          uint64_t v51 = v10[6];
          v9[4] = v50;
          v9[5] = v52;
          v9[6] = v51;
          uint64_t v53 = v10[8];
          swift_bridgeObjectRetain();
          v588 = v3;
          uint64_t v579 = v11;
          uint64_t v584 = v6;
          uint64_t v516 = v4;
          if (v53 == 1)
          {
            *(_OWORD *)(v9 + 7) = *(_OWORD *)(v10 + 7);
            v9[9] = v10[9];
          }
          else
          {
            v9[7] = v10[7];
            v9[8] = v53;
            v9[9] = v10[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v63 = v10[11];
          v9[10] = v10[10];
          v9[11] = v63;
          uint64_t v64 = v10[13];
          v9[12] = v10[12];
          v9[13] = v64;
          v9[14] = v10[14];
          uint64_t v65 = type metadata accessor for ModelsDSTU2.Observation(0);
          uint64_t v66 = v9;
          uint64_t v67 = v65;
          uint64_t v68 = *(int *)(v65 + 44);
          __src = v66;
          v535 = (char *)v66 + v68;
          uint64_t v69 = (char *)v10 + v68;
          uint64_t v70 = type metadata accessor for FHIRDateTime();
          v545 = *(void **)(v70 - 8);
          uint64_t v71 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v545[6];
          swift_bridgeObjectRetain();
          uint64_t v72 = v69;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v551 = v71;
          v560 = (int *)v67;
          if (v71(v69, 1, v70))
          {
            uint64_t v73 = (int *)v67;
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v535, v69, *(void *)(*(void *)(v74 - 8) + 64));
            unint64_t v4 = v516;
          }
          else
          {
            unsigned char *v535 = *v69;
            *((void *)v535 + 1) = *((void *)v69 + 1);
            *((_DWORD *)v535 + 4) = *((_DWORD *)v69 + 4);
            uint64_t v91 = *((void *)v69 + 7);
            uint64_t v92 = v12;
            if (v91 == 1)
            {
              long long v93 = *(_OWORD *)(v69 + 40);
              *(_OWORD *)(v535 + 24) = *(_OWORD *)(v69 + 24);
              *(_OWORD *)(v535 + 40) = v93;
              *((void *)v535 + 7) = *((void *)v69 + 7);
            }
            else
            {
              v535[24] = v69[24];
              *(_WORD *)(v535 + 25) = *(_WORD *)(v69 + 25);
              *(_OWORD *)(v535 + 28) = *(_OWORD *)(v69 + 28);
              *((_DWORD *)v535 + 11) = *((_DWORD *)v69 + 11);
              *((void *)v535 + 6) = *((void *)v69 + 6);
              *((void *)v535 + 7) = v91;
              swift_bridgeObjectRetain();
            }
            unint64_t v4 = v516;
            uint64_t v105 = *(int *)(v70 + 28);
            uint64_t v106 = &v535[v105];
            long long v107 = &v72[v105];
            uint64_t v108 = sub_23309B300();
            uint64_t v109 = *(void *)(v108 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v109 + 16))(v106, v107, v108);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
            }
            uint64_t v12 = v92;
            uint64_t v153 = *(int *)(v70 + 32);
            uint64_t v154 = &v535[v153];
            uint64_t v155 = &v72[v153];
            uint64_t v156 = v155[1];
            *uint64_t v154 = *v155;
            v154[1] = v156;
            uint64_t v157 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v545[7];
            swift_bridgeObjectRetain();
            v157(v535, 0, 1, v70);
            uint64_t v73 = (int *)v67;
          }
          uint64_t v158 = v73;
          uint64_t v159 = v73[12];
          uint64_t v160 = (char *)__src + v159;
          uint64_t v161 = (char *)v10 + v159;
          uint64_t v162 = type metadata accessor for Period();
          uint64_t v163 = *(void *)(v162 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
          }
          else
          {
            v538 = (void *)v162;
            if (v551(v161, 1, v70))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v160, v161, *(void *)(*(void *)(v165 - 8) + 64));
            }
            else
            {
              *uint64_t v160 = *v161;
              *((void *)v160 + 1) = *((void *)v161 + 1);
              *((_DWORD *)v160 + 4) = *((_DWORD *)v161 + 4);
              uint64_t v170 = *((void *)v161 + 7);
              uint64_t v573 = v12;
              if (v170 == 1)
              {
                long long v171 = *(_OWORD *)(v161 + 40);
                *(_OWORD *)(v160 + 24) = *(_OWORD *)(v161 + 24);
                *(_OWORD *)(v160 + 40) = v171;
                *((void *)v160 + 7) = *((void *)v161 + 7);
              }
              else
              {
                v160[24] = v161[24];
                *(_WORD *)(v160 + 25) = *(_WORD *)(v161 + 25);
                *(_OWORD *)(v160 + 28) = *(_OWORD *)(v161 + 28);
                *((_DWORD *)v160 + 11) = *((_DWORD *)v161 + 11);
                *((void *)v160 + 6) = *((void *)v161 + 6);
                *((void *)v160 + 7) = v170;
                swift_bridgeObjectRetain();
              }
              uint64_t v188 = *(int *)(v70 + 28);
              v521 = v160;
              uint64_t v189 = &v160[v188];
              uint64_t v190 = &v161[v188];
              uint64_t v191 = sub_23309B300();
              uint64_t v192 = *(void *)(v191 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v189, v190, *(void *)(*(void *)(v193 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v192 + 16))(v189, v190, v191);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v192 + 56))(v189, 0, 1, v191);
              }
              uint64_t v162 = (uint64_t)v538;
              uint64_t v311 = *(int *)(v70 + 32);
              uint64_t v160 = v521;
              long long v312 = &v521[v311];
              uint64_t v313 = &v161[v311];
              uint64_t v314 = v313[1];
              *long long v312 = *v313;
              v312[1] = v314;
              uint64_t v315 = v70;
              uint64_t v316 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v545[7];
              swift_bridgeObjectRetain();
              v316(v521, 0, 1, v315);
              uint64_t v70 = v315;
              uint64_t v12 = v573;
              uint64_t v158 = v560;
            }
            uint64_t v317 = *(int *)(v162 + 20);
            uint64_t v318 = &v160[v317];
            v319 = &v161[v317];
            if (v551(v319, 1, v70))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v318, v319, *(void *)(*(void *)(v320 - 8) + 64));
            }
            else
            {
              *uint64_t v318 = *v319;
              *((void *)v318 + 1) = *((void *)v319 + 1);
              *((_DWORD *)v318 + 4) = *((_DWORD *)v319 + 4);
              uint64_t v321 = *((void *)v319 + 7);
              uint64_t v574 = v12;
              v525 = v160;
              if (v321 == 1)
              {
                long long v322 = *(_OWORD *)(v319 + 40);
                *(_OWORD *)(v318 + 24) = *(_OWORD *)(v319 + 24);
                *(_OWORD *)(v318 + 40) = v322;
                *((void *)v318 + 7) = *((void *)v319 + 7);
              }
              else
              {
                v318[24] = v319[24];
                *(_WORD *)(v318 + 25) = *(_WORD *)(v319 + 25);
                *(_OWORD *)(v318 + 28) = *(_OWORD *)(v319 + 28);
                *((_DWORD *)v318 + 11) = *((_DWORD *)v319 + 11);
                *((void *)v318 + 6) = *((void *)v319 + 6);
                *((void *)v318 + 7) = v321;
                swift_bridgeObjectRetain();
              }
              uint64_t v323 = *(int *)(v70 + 28);
              v324 = &v318[v323];
              uint64_t v325 = &v319[v323];
              uint64_t v326 = sub_23309B300();
              uint64_t v327 = *(void *)(v326 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v327 + 48))(v325, 1, v326))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v324, v325, *(void *)(*(void *)(v328 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v327 + 16))(v324, v325, v326);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v327 + 56))(v324, 0, 1, v326);
              }
              uint64_t v12 = v574;
              uint64_t v375 = v70;
              uint64_t v376 = *(int *)(v70 + 32);
              uint64_t v377 = &v318[v376];
              uint64_t v378 = &v319[v376];
              uint64_t v379 = v378[1];
              void *v377 = *v378;
              v377[1] = v379;
              uint64_t v380 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v545[7];
              swift_bridgeObjectRetain();
              v380(v318, 0, 1, v375);
              uint64_t v70 = v375;
              uint64_t v158 = v560;
              uint64_t v160 = v525;
            }
            (*(void (**)(unsigned char *, void, uint64_t, void *))(v163 + 56))(v160, 0, 1, v538);
          }
          uint64_t v381 = v158[13];
          uint64_t v382 = (char *)__src + v381;
          long long v383 = (char *)v10 + v381;
          if (v551((unsigned char *)v10 + v381, 1, v70))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v382, v383, *(void *)(*(void *)(v384 - 8) + 64));
          }
          else
          {
            *uint64_t v382 = *v383;
            *((void *)v382 + 1) = *((void *)v383 + 1);
            *((_DWORD *)v382 + 4) = *((_DWORD *)v383 + 4);
            uint64_t v385 = *((void *)v383 + 7);
            uint64_t v386 = v12;
            if (v385 == 1)
            {
              long long v387 = *(_OWORD *)(v383 + 40);
              *(_OWORD *)(v382 + 24) = *(_OWORD *)(v383 + 24);
              *(_OWORD *)(v382 + 40) = v387;
              *((void *)v382 + 7) = *((void *)v383 + 7);
            }
            else
            {
              v382[24] = v383[24];
              *(_WORD *)(v382 + 25) = *(_WORD *)(v383 + 25);
              *(_OWORD *)(v382 + 28) = *(_OWORD *)(v383 + 28);
              *((_DWORD *)v382 + 11) = *((_DWORD *)v383 + 11);
              *((void *)v382 + 6) = *((void *)v383 + 6);
              *((void *)v382 + 7) = v385;
              swift_bridgeObjectRetain();
            }
            uint64_t v388 = *(int *)(v70 + 28);
            uint64_t v389 = &v382[v388];
            uint64_t v390 = &v383[v388];
            uint64_t v391 = sub_23309B300();
            uint64_t v392 = *(void *)(v391 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v392 + 48))(v390, 1, v391))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v389, v390, *(void *)(*(void *)(v393 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v392 + 16))(v389, v390, v391);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v392 + 56))(v389, 0, 1, v391);
            }
            uint64_t v12 = v386;
            uint64_t v394 = *(int *)(v70 + 32);
            uint64_t v395 = &v382[v394];
            uint64_t v396 = &v383[v394];
            uint64_t v397 = v396[1];
            void *v395 = *v396;
            v395[1] = v397;
            uint64_t v398 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v545[7];
            swift_bridgeObjectRetain();
            v398(v382, 0, 1, v70);
            uint64_t v158 = v560;
          }
          *(void *)((char *)__src + v158[14]) = *(void *)((char *)v10 + v158[14]);
          uint64_t v399 = v158[15];
          uint64_t v400 = (void *)((char *)__src + v399);
          uint64_t v401 = (void *)((char *)v10 + v399);
          uint64_t v402 = v401[1];
          void *v400 = *v401;
          v400[1] = v402;
          uint64_t v403 = v158[16];
          uint64_t v404 = (char *)__src + v403;
          uint64_t v405 = (char *)v10 + v403;
          uint64_t v406 = *(void *)((char *)v10 + v403 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v406 == 1)
          {
            *(_OWORD *)uint64_t v404 = *(_OWORD *)v405;
            *((void *)v404 + 2) = *((void *)v405 + 2);
          }
          else
          {
            *(void *)uint64_t v404 = *(void *)v405;
            *((void *)v404 + 1) = v406;
            *((void *)v404 + 2) = *((void *)v405 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v407 = v158[17];
          uint64_t v9 = __src;
          long long v408 = (void *)((char *)__src + v407);
          long long v409 = (void *)((char *)v10 + v407);
          uint64_t v410 = type metadata accessor for Quantity();
          uint64_t v411 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v410 - 8);
          if (v411[6](v409, 1, v410))
          {
            sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v408, v409, *(void *)(*(void *)(v412 - 8) + 64));
          }
          else
          {
            v557 = v411;
            uint64_t v575 = v12;
            *(_OWORD *)long long v408 = *(_OWORD *)v409;
            *(void *)((char *)v408 + 13) = *(void *)((char *)v409 + 13);
            uint64_t v413 = v409[4];
            v408[3] = v409[3];
            v408[4] = v413;
            uint64_t v414 = v409[6];
            v408[5] = v409[5];
            v408[6] = v414;
            uint64_t v415 = *(int *)(v410 + 28);
            v542 = (char *)v409 + v415;
            v550 = (char *)v408 + v415;
            uint64_t v416 = sub_23309AF80();
            v526 = *(void **)(v416 - 8);
            v533 = (unsigned int (*)(char *, uint64_t, uint64_t))v526[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v533(v542, 1, v416))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v550, v542, *(void *)(*(void *)(v417 - 8) + 64));
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v526[2])(v550, v542, v416);
              ((void (*)(char *, void, uint64_t, uint64_t))v526[7])(v550, 0, 1, v416);
            }
            uint64_t v12 = v575;
            uint64_t v418 = *(int *)(v410 + 32);
            uint64_t v419 = (void *)((char *)v408 + v418);
            uint64_t v420 = (void *)((char *)v409 + v418);
            uint64_t v421 = v420[1];
            *uint64_t v419 = *v420;
            v419[1] = v421;
            v422 = (void (*)(void *, void, uint64_t, uint64_t))v557[7];
            swift_bridgeObjectRetain();
            v422(v408, 0, 1, v410);
          }
          unint64_t v3 = v588;
          uint64_t v11 = v579;
          uint64_t v6 = v584;
          *(void *)((char *)__src + v560[18]) = *(void *)((char *)v10 + v560[18]);
          uint64_t v423 = v560[19];
          uint64_t v424 = (void *)((char *)__src + v423);
          uint64_t v425 = (void *)((char *)v10 + v423);
          uint64_t v426 = v425[1];
          *uint64_t v424 = *v425;
          v424[1] = v426;
          goto LABEL_199;
        case 5u:
          uint64_t v572 = v12;
          uint64_t v580 = v11;
          uint64_t v54 = v10[1];
          void *v9 = *v10;
          v9[1] = v54;
          uint64_t v55 = v10[3];
          v9[2] = v10[2];
          v9[3] = v55;
          v9[4] = v10[4];
          *(void *)((char *)v9 + 37) = *(void *)((char *)v10 + 37);
          uint64_t v56 = v10[7];
          v9[6] = v10[6];
          v9[7] = v56;
          uint64_t v57 = v10[9];
          v9[8] = v10[8];
          v9[9] = v57;
          uint64_t v58 = v10[11];
          v9[10] = v10[10];
          v9[11] = v58;
          uint64_t v59 = v10[13];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v59 == 1)
          {
            *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
            v9[14] = v10[14];
          }
          else
          {
            v9[12] = v10[12];
            v9[13] = v59;
            v9[14] = v10[14];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v11 = v580;
          uint64_t v12 = v572;
          uint64_t v75 = v10[16];
          v9[15] = v10[15];
          unsigned char v9[16] = v75;
          v9[17] = v10[17];
          goto LABEL_199;
        case 6u:
          uint64_t v60 = v10[1];
          void *v9 = *v10;
          v9[1] = v60;
          uint64_t v61 = v10[3];
          v9[2] = v10[2];
          v9[3] = v61;
          uint64_t v62 = v10[5];
          v9[4] = v10[4];
          v9[5] = v62;
          swift_bridgeObjectRetain();
          goto LABEL_199;
        default:
          uint64_t v16 = v10[1];
          void *v9 = *v10;
          v9[1] = v16;
          uint64_t v17 = v10[3];
          v9[2] = v10[2];
          v9[3] = v17;
          v9[4] = v10[4];
          swift_bridgeObjectRetain();
LABEL_199:
          swift_bridgeObjectRetain();
LABEL_200:
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
          break;
      }
    }
    uint64_t v427 = *(int *)(v6 + 24);
    long long v428 = (void *)((char *)v4 + v427);
    long long v429 = (void *)((char *)v3 + v427);
    uint64_t v430 = *v429;
    unint64_t v431 = v429[1];
    sub_232E9A9F4(*v429, v431);
    *long long v428 = v430;
    v428[1] = v431;
  }
  return v4;
}

uint64_t destroy for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (void *)(a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 6u:
        goto LABEL_3;
      case 1u:
        swift_bridgeObjectRelease();
        if (v4[2] != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v6 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v7 = (char *)v4 + v6[6];
        uint64_t v8 = type metadata accessor for Reference();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = &v7[*(int *)(v8 + 24)];
          uint64_t v10 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v9 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v11 = &v9[*(int *)(v10 + 24)];
            uint64_t v12 = sub_23309AF80();
            uint64_t v13 = *(void *)(v12 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
              (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
            }
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v14 = (char *)v4 + v6[7];
        uint64_t v15 = type metadata accessor for FHIRDateTime();
        uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
        if (!v16(v14, 1, v15))
        {
          if (*((void *)v14 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v17 = &v14[*(int *)(v15 + 28)];
          uint64_t v18 = sub_23309B300();
          uint64_t v19 = *(void *)(v18 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
            (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)((char *)v4 + v6[9] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)((char *)v4 + v6[12] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v20 = (char *)v4 + v6[14];
        if (!v16(v20, 1, v15))
        {
          if (*((void *)v20 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v21 = &v20[*(int *)(v15 + 28)];
          uint64_t v22 = sub_23309B300();
          uint64_t v23 = *(void *)(v22 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
            (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v24 = (char *)v4 + v6[15];
        uint64_t v25 = type metadata accessor for Period();
        uint64_t v26 = *(unsigned int (**)(void, void, void))(*(void *)(v25 - 8) + 48);
        if (!v26(v24, 1, v25))
        {
          if (!v16(v24, 1, v15))
          {
            uint64_t v116 = v26;
            if (*((void *)v24 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v27 = &v24[*(int *)(v15 + 28)];
            uint64_t v28 = sub_23309B300();
            uint64_t v112 = *(void *)(v28 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v27, 1, v28)) {
              (*(void (**)(char *, uint64_t))(v112 + 8))(v27, v28);
            }
            swift_bridgeObjectRelease();
            uint64_t v26 = v116;
          }
          uint64_t v29 = &v24[*(int *)(v25 + 20)];
          if (!v16(v29, 1, v15))
          {
            uint64_t v117 = v26;
            if (*((void *)v29 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v30 = &v29[*(int *)(v15 + 28)];
            uint64_t v31 = sub_23309B300();
            uint64_t v113 = *(void *)(v31 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v30, 1, v31)) {
              (*(void (**)(char *, uint64_t))(v113 + 8))(v30, v31);
            }
            swift_bridgeObjectRelease();
            uint64_t v26 = v117;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v32 = (char *)v4 + v6[17];
        if (!v16(v32, 1, v15))
        {
          uint64_t v114 = v16;
          uint64_t v118 = v26;
          if (*((void *)v32 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v33 = &v32[*(int *)(v15 + 28)];
          uint64_t v34 = sub_23309B300();
          uint64_t v35 = *(void *)(v34 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
            (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
          }
          swift_bridgeObjectRelease();
          uint64_t v16 = v114;
          uint64_t v26 = v118;
        }
        uint64_t v36 = (char *)v4 + v6[18];
        if (!v26(v36, 1, v25))
        {
          if (!v16(v36, 1, v15))
          {
            uint64_t v115 = v16;
            if (*((void *)v36 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v37 = &v36[*(int *)(v15 + 28)];
            uint64_t v38 = sub_23309B300();
            uint64_t v39 = *(void *)(v38 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38)) {
              (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
            }
            swift_bridgeObjectRelease();
            uint64_t v16 = v115;
          }
          uint64_t v40 = &v36[*(int *)(v25 + 20)];
          if (!v16(v40, 1, v15))
          {
            if (*((void *)v40 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v41 = &v40[*(int *)(v15 + 28)];
            uint64_t v42 = sub_23309B300();
            uint64_t v43 = *(void *)(v42 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42)) {
              (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
            }
            swift_bridgeObjectRelease();
          }
        }
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_147;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v44 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v45 = (char *)v4 + v44[9];
        uint64_t v46 = type metadata accessor for FHIRDateTime();
        uint64_t v47 = *(unsigned int (**)(void, void, void))(*(void *)(v46 - 8) + 48);
        if (!v47(v45, 1, v46))
        {
          uint64_t v122 = v47;
          if (*((void *)v45 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v48 = &v45[*(int *)(v46 + 28)];
          uint64_t v49 = sub_23309B300();
          uint64_t v50 = *(void *)(v49 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49)) {
            (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
          }
          swift_bridgeObjectRelease();
          uint64_t v47 = v122;
        }
        uint64_t v51 = (char *)v4 + v44[10];
        uint64_t v52 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52))
        {
          if (!v47(v51, 1, v46))
          {
            uint64_t v123 = v47;
            if (*((void *)v51 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v53 = &v51[*(int *)(v46 + 28)];
            uint64_t v54 = sub_23309B300();
            uint64_t v119 = *(void *)(v54 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v53, 1, v54)) {
              (*(void (**)(char *, uint64_t))(v119 + 8))(v53, v54);
            }
            swift_bridgeObjectRelease();
            uint64_t v47 = v123;
          }
          uint64_t v55 = &v51[*(int *)(v52 + 20)];
          if (!v47(v55, 1, v46))
          {
            uint64_t v124 = v47;
            if (*((void *)v55 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v56 = &v55[*(int *)(v46 + 28)];
            uint64_t v57 = sub_23309B300();
            uint64_t v58 = *(void *)(v57 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57)) {
              (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
            }
            swift_bridgeObjectRelease();
            uint64_t v47 = v124;
          }
        }
        uint64_t v59 = (char *)v4 + v44[11];
        if (!v47(v59, 1, v46))
        {
          if (*((void *)v59 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v60 = &v59[*(int *)(v46 + 28)];
          uint64_t v61 = sub_23309B300();
          uint64_t v62 = *(void *)(v61 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61)) {
            (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v61);
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_147;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v63 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v64 = (char *)v4 + v63[8];
        uint64_t v65 = type metadata accessor for FHIRDateTime();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65))
        {
          if (*((void *)v64 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v66 = &v64[*(int *)(v65 + 28)];
          uint64_t v67 = sub_23309B300();
          uint64_t v68 = *(void *)(v67 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67)) {
            (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = (char *)v4 + v63[15];
        uint64_t v70 = type metadata accessor for Reference();
        uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48);
        if (!v71(v69, 1, v70))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v72 = &v69[*(int *)(v70 + 24)];
          uint64_t v73 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48))(v72, 1, v73))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v72 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v74 = &v72[*(int *)(v73 + 24)];
            uint64_t v75 = sub_23309AF80();
            uint64_t v121 = *(void *)(v75 - 8);
            uint64_t v125 = v74;
            uint64_t v76 = v74;
            uint64_t v77 = v75;
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v76, 1, v75)) {
              (*(void (**)(char *, uint64_t))(v121 + 8))(v125, v77);
            }
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v78 = (char *)v4 + v63[17];
        if (!v71(v78, 1, v70))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v79 = &v78[*(int *)(v70 + 24)];
          uint64_t v80 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48))(v79, 1, v80))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v79 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v81 = &v79[*(int *)(v80 + 24)];
            uint64_t v82 = sub_23309AF80();
            uint64_t v83 = *(void *)(v82 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82)) {
              (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v82);
            }
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_147;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v4[8] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v84 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v85 = (char *)v4 + v84[11];
        uint64_t v86 = type metadata accessor for FHIRDateTime();
        uint64_t v87 = *(unsigned int (**)(void, void, void))(*(void *)(v86 - 8) + 48);
        if (!v87(v85, 1, v86))
        {
          uint64_t v126 = v87;
          if (*((void *)v85 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          long long v88 = &v85[*(int *)(v86 + 28)];
          uint64_t v89 = sub_23309B300();
          uint64_t v90 = *(void *)(v89 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89)) {
            (*(void (**)(char *, uint64_t))(v90 + 8))(v88, v89);
          }
          swift_bridgeObjectRelease();
          uint64_t v87 = v126;
        }
        uint64_t v91 = (char *)v4 + v84[12];
        uint64_t v92 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48))(v91, 1, v92))
        {
          if (!v87(v91, 1, v86))
          {
            uint64_t v127 = v87;
            if (*((void *)v91 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            long long v93 = &v91[*(int *)(v86 + 28)];
            uint64_t v94 = sub_23309B300();
            uint64_t v120 = *(void *)(v94 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v93, 1, v94)) {
              (*(void (**)(char *, uint64_t))(v120 + 8))(v93, v94);
            }
            swift_bridgeObjectRelease();
            uint64_t v87 = v127;
          }
          uint64_t v95 = &v91[*(int *)(v92 + 20)];
          if (!v87(v95, 1, v86))
          {
            uint64_t v128 = v87;
            if (*((void *)v95 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v96 = &v95[*(int *)(v86 + 28)];
            uint64_t v97 = sub_23309B300();
            uint64_t v98 = *(void *)(v97 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97)) {
              (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v97);
            }
            swift_bridgeObjectRelease();
            uint64_t v87 = v128;
          }
        }
        uint64_t v99 = (char *)v4 + v84[13];
        if (!v87(v99, 1, v86))
        {
          if (*((void *)v99 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v100 = &v99[*(int *)(v86 + 28)];
          uint64_t v101 = sub_23309B300();
          uint64_t v102 = *(void *)(v101 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101)) {
            (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v101);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)((char *)v4 + v84[16] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v103 = (char *)v4 + v84[17];
        uint64_t v104 = type metadata accessor for Quantity();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48))(v103, 1, v104))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v105 = &v103[*(int *)(v104 + 28)];
          uint64_t v106 = sub_23309AF80();
          uint64_t v107 = *(void *)(v106 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106)) {
            (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v106);
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_146;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_146:
        swift_bridgeObjectRelease();
LABEL_147:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v108 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v109 = *v108;
  unint64_t v110 = v108[1];
  return sub_232E9AA4C(v109, v110);
}

void *initializeWithCopy for ModelsDSTU2.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v605 = v10;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v596 = v4;
        uint64_t v601 = v3;
        uint64_t v16 = v9[1];
        void *v8 = *v9;
        v8[1] = v16;
        uint64_t v17 = v9[2];
        swift_bridgeObjectRetain();
        if (v17 != 1) {
          swift_bridgeObjectRetain();
        }
        v8[2] = v17;
        uint64_t v18 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v19 = v18[6];
        uint64_t v20 = (void *)((char *)v8 + v19);
        uint64_t v21 = (void *)((char *)v9 + v19);
        uint64_t v22 = type metadata accessor for Reference();
        uint64_t v23 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v22 - 8);
        uint64_t v570 = v18;
        if (v23[6](v21, 1, v22))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          uint64_t v593 = v11;
          uint64_t v75 = v21[1];
          *uint64_t v20 = *v21;
          v20[1] = v75;
          uint64_t v76 = v21[3];
          void v20[2] = v21[2];
          v20[3] = v76;
          v567 = (void *)v22;
          uint64_t v77 = *(int *)(v22 + 24);
          uint64_t v582 = v20;
          __srcb = v23;
          v560 = (void *)((char *)v20 + v77);
          uint64_t v78 = (void *)((char *)v21 + v77);
          uint64_t v79 = type metadata accessor for Identifier();
          uint64_t v80 = *(void *)(v79 - 8);
          uint64_t v81 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v80 + 48);
          swift_bridgeObjectRetain();
          uint64_t v82 = v78;
          swift_bridgeObjectRetain();
          if (v81(v78, 1, v79))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v560, v78, *(void *)(*(void *)(v83 - 8) + 64));
            uint64_t v11 = v593;
            uint64_t v84 = (void (**)(void *, void, uint64_t, void *))__srcb;
          }
          else
          {
            uint64_t v533 = v80;
            __dsta = (int *)v79;
            uint64_t v110 = v78[1];
            void *v560 = *v78;
            v560[1] = v110;
            uint64_t v111 = v78[3];
            swift_bridgeObjectRetain();
            v545 = v78;
            if (v111 == 1)
            {
              *((_OWORD *)v560 + 1) = *((_OWORD *)v78 + 1);
              v560[4] = v78[4];
            }
            else
            {
              v560[2] = v78[2];
              v560[3] = v111;
              v560[4] = v78[4];
              swift_bridgeObjectRetain();
              uint64_t v82 = v78;
              swift_bridgeObjectRetain();
            }
            uint64_t v84 = (void (**)(void *, void, uint64_t, void *))__srcb;
            uint64_t v179 = *(int *)(v79 + 24);
            uint64_t v180 = (char *)v560 + v179;
            uint64_t v181 = (char *)v82 + v179;
            uint64_t v182 = sub_23309AF80();
            uint64_t v183 = *(void *)(v182 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v180, v181, v182);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v183 + 56))(v180, 0, 1, v182);
            }
            uint64_t v11 = v593;
            uint64_t v204 = __dsta[7];
            long long v205 = (void *)((char *)v560 + v204);
            uint64_t v206 = (void *)((char *)v545 + v204);
            uint64_t v207 = v206[1];
            *long long v205 = *v206;
            v205[1] = v207;
            uint64_t v208 = *(void (**)(void *, void, uint64_t, int *))(v533 + 56);
            swift_bridgeObjectRetain();
            v208(v560, 0, 1, __dsta);
          }
          v84[7](v582, 0, 1, v567);
        }
        uint64_t v209 = v18[7];
        uint64_t v210 = (char *)v8 + v209;
        uint64_t v211 = (char *)v9 + v209;
        uint64_t v212 = type metadata accessor for FHIRDateTime();
        uint64_t v548 = *(void *)(v212 - 8);
        __srcd = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v548 + 48);
        uint64_t v585 = v212;
        if (__srcd(v211, 1, v212))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v210, v211, *(void *)(*(void *)(v213 - 8) + 64));
        }
        else
        {
          unsigned char *v210 = *v211;
          *((void *)v210 + 1) = *((void *)v211 + 1);
          *((_DWORD *)v210 + 4) = *((_DWORD *)v211 + 4);
          uint64_t v214 = *((void *)v211 + 7);
          uint64_t v215 = v11;
          if (v214 == 1)
          {
            long long v216 = *(_OWORD *)(v211 + 40);
            *(_OWORD *)(v210 + 24) = *(_OWORD *)(v211 + 24);
            *(_OWORD *)(v210 + 40) = v216;
            *((void *)v210 + 7) = *((void *)v211 + 7);
          }
          else
          {
            v210[24] = v211[24];
            *(_WORD *)(v210 + 25) = *(_WORD *)(v211 + 25);
            *(_OWORD *)(v210 + 28) = *(_OWORD *)(v211 + 28);
            *((_DWORD *)v210 + 11) = *((_DWORD *)v211 + 11);
            *((void *)v210 + 6) = *((void *)v211 + 6);
            *((void *)v210 + 7) = v214;
            swift_bridgeObjectRetain();
          }
          uint64_t v217 = *(int *)(v212 + 28);
          uint64_t v218 = &v210[v217];
          uint64_t v219 = &v211[v217];
          uint64_t v220 = sub_23309B300();
          uint64_t v221 = *(void *)(v220 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v221 + 48))(v219, 1, v220))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v218, v219, *(void *)(*(void *)(v222 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v221 + 16))(v218, v219, v220);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
          }
          uint64_t v223 = *(int *)(v585 + 32);
          uint64_t v224 = &v210[v223];
          uint64_t v225 = &v211[v223];
          uint64_t v226 = v225[1];
          *uint64_t v224 = *v225;
          v224[1] = v226;
          uint64_t v227 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
          swift_bridgeObjectRetain();
          v227(v210, 0, 1, v585);
          uint64_t v11 = v215;
          uint64_t v18 = v570;
        }
        uint64_t v228 = v18[8];
        uint64_t v229 = (void *)((char *)v8 + v228);
        uint64_t v230 = (void *)((char *)v9 + v228);
        uint64_t v231 = v230[1];
        void *v229 = *v230;
        v229[1] = v231;
        v229[2] = v230[2];
        uint64_t v232 = v18[9];
        uint64_t v233 = (char *)v8 + v232;
        uint64_t v234 = (char *)v9 + v232;
        uint64_t v235 = *(void *)((char *)v9 + v232 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v235 == 1)
        {
          *(_OWORD *)uint64_t v233 = *(_OWORD *)v234;
          *((void *)v233 + 2) = *((void *)v234 + 2);
        }
        else
        {
          *(void *)uint64_t v233 = *(void *)v234;
          *((void *)v233 + 1) = v235;
          *((void *)v233 + 2) = *((void *)v234 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v236 = v570[10];
        uint64_t v237 = (void *)((char *)v8 + v236);
        uint64_t v238 = (void *)((char *)v9 + v236);
        uint64_t v239 = v238[1];
        void *v237 = *v238;
        v237[1] = v239;
        uint64_t v240 = v570[11];
        uint64_t v241 = (void *)((char *)v8 + v240);
        long long v242 = (void *)((char *)v9 + v240);
        uint64_t v243 = v242[1];
        *uint64_t v241 = *v242;
        v241[1] = v243;
        uint64_t v244 = v570[12];
        uint64_t v245 = (char *)v8 + v244;
        uint64_t v246 = (char *)v9 + v244;
        uint64_t v247 = *(void *)((char *)v9 + v244 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v247 == 1)
        {
          *(_OWORD *)uint64_t v245 = *(_OWORD *)v246;
          *((void *)v245 + 2) = *((void *)v246 + 2);
        }
        else
        {
          *(void *)uint64_t v245 = *(void *)v246;
          *((void *)v245 + 1) = v247;
          *((void *)v245 + 2) = *((void *)v246 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v248 = v570;
        uint64_t v249 = __srcd;
        *(void *)((char *)v8 + v570[13]) = *(void *)((char *)v9 + v570[13]);
        uint64_t v250 = v570[14];
        uint64_t v251 = (char *)v8 + v250;
        uint64_t v252 = (char *)v9 + v250;
        swift_bridgeObjectRetain();
        if (__srcd(v252, 1, v585))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v251, v252, *(void *)(*(void *)(v253 - 8) + 64));
        }
        else
        {
          unsigned char *v251 = *v252;
          *((void *)v251 + 1) = *((void *)v252 + 1);
          *((_DWORD *)v251 + 4) = *((_DWORD *)v252 + 4);
          uint64_t v254 = *((void *)v252 + 7);
          uint64_t v255 = v11;
          if (v254 == 1)
          {
            long long v256 = *(_OWORD *)(v252 + 40);
            *(_OWORD *)(v251 + 24) = *(_OWORD *)(v252 + 24);
            *(_OWORD *)(v251 + 40) = v256;
            *((void *)v251 + 7) = *((void *)v252 + 7);
          }
          else
          {
            v251[24] = v252[24];
            *(_WORD *)(v251 + 25) = *(_WORD *)(v252 + 25);
            *(_OWORD *)(v251 + 28) = *(_OWORD *)(v252 + 28);
            *((_DWORD *)v251 + 11) = *((_DWORD *)v252 + 11);
            *((void *)v251 + 6) = *((void *)v252 + 6);
            *((void *)v251 + 7) = v254;
            swift_bridgeObjectRetain();
          }
          uint64_t v257 = *(int *)(v585 + 28);
          uint64_t v258 = &v251[v257];
          uint64_t v259 = &v252[v257];
          uint64_t v260 = sub_23309B300();
          uint64_t v261 = *(void *)(v260 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v258, v259, *(void *)(*(void *)(v262 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v261 + 16))(v258, v259, v260);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
          }
          uint64_t v263 = *(int *)(v585 + 32);
          v264 = &v251[v263];
          uint64_t v265 = &v252[v263];
          uint64_t v266 = v265[1];
          void *v264 = *v265;
          v264[1] = v266;
          uint64_t v267 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
          swift_bridgeObjectRetain();
          v267(v251, 0, 1, v585);
          uint64_t v11 = v255;
          uint64_t v248 = v570;
          uint64_t v249 = __srcd;
        }
        uint64_t v268 = v248[15];
        uint64_t v269 = (char *)v8 + v268;
        uint64_t v270 = (char *)v9 + v268;
        uint64_t v271 = type metadata accessor for Period();
        uint64_t v532 = *(void *)(v271 - 8);
        v563 = (int *)v271;
        __dste = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v532 + 48);
        if (__dste(v270, 1, v271))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v269, v270, *(void *)(*(void *)(v272 - 8) + 64));
          uint64_t v273 = v585;
        }
        else
        {
          uint64_t v273 = v585;
          if (v249(v270, 1, v585))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v269, v270, *(void *)(*(void *)(v274 - 8) + 64));
          }
          else
          {
            unsigned char *v269 = *v270;
            *((void *)v269 + 1) = *((void *)v270 + 1);
            *((_DWORD *)v269 + 4) = *((_DWORD *)v270 + 4);
            uint64_t v275 = *((void *)v270 + 7);
            uint64_t v276 = v11;
            if (v275 == 1)
            {
              long long v277 = *(_OWORD *)(v270 + 40);
              *(_OWORD *)(v269 + 24) = *(_OWORD *)(v270 + 24);
              *(_OWORD *)(v269 + 40) = v277;
              *((void *)v269 + 7) = *((void *)v270 + 7);
            }
            else
            {
              v269[24] = v270[24];
              *(_WORD *)(v269 + 25) = *(_WORD *)(v270 + 25);
              *(_OWORD *)(v269 + 28) = *(_OWORD *)(v270 + 28);
              *((_DWORD *)v269 + 11) = *((_DWORD *)v270 + 11);
              *((void *)v269 + 6) = *((void *)v270 + 6);
              *((void *)v269 + 7) = v275;
              swift_bridgeObjectRetain();
            }
            uint64_t v278 = *(int *)(v585 + 28);
            uint64_t v279 = &v269[v278];
            uint64_t v280 = &v270[v278];
            uint64_t v281 = sub_23309B300();
            uint64_t v282 = *(void *)(v281 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v279, v280, *(void *)(*(void *)(v283 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v282 + 16))(v279, v280, v281);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
            }
            uint64_t v351 = *(int *)(v585 + 32);
            v352 = &v269[v351];
            uint64_t v353 = &v270[v351];
            uint64_t v354 = v353[1];
            void *v352 = *v353;
            v352[1] = v354;
            long long v355 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
            swift_bridgeObjectRetain();
            v355(v269, 0, 1, v585);
            uint64_t v273 = v585;
            uint64_t v11 = v276;
            uint64_t v248 = v570;
            uint64_t v249 = __srcd;
          }
          uint64_t v356 = v563[5];
          long long v357 = &v269[v356];
          long long v358 = &v270[v356];
          if (v249(v358, 1, v273))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v357, v358, *(void *)(*(void *)(v359 - 8) + 64));
          }
          else
          {
            unsigned char *v357 = *v358;
            *((void *)v357 + 1) = *((void *)v358 + 1);
            *((_DWORD *)v357 + 4) = *((_DWORD *)v358 + 4);
            uint64_t v360 = *((void *)v358 + 7);
            uint64_t v594 = v11;
            if (v360 == 1)
            {
              long long v361 = *(_OWORD *)(v358 + 40);
              *(_OWORD *)(v357 + 24) = *(_OWORD *)(v358 + 24);
              *(_OWORD *)(v357 + 40) = v361;
              *((void *)v357 + 7) = *((void *)v358 + 7);
            }
            else
            {
              v357[24] = v358[24];
              *(_WORD *)(v357 + 25) = *(_WORD *)(v358 + 25);
              *(_OWORD *)(v357 + 28) = *(_OWORD *)(v358 + 28);
              *((_DWORD *)v357 + 11) = *((_DWORD *)v358 + 11);
              *((void *)v357 + 6) = *((void *)v358 + 6);
              *((void *)v357 + 7) = v360;
              swift_bridgeObjectRetain();
            }
            uint64_t v362 = *(int *)(v273 + 28);
            uint64_t v363 = &v357[v362];
            uint64_t v364 = &v358[v362];
            uint64_t v365 = sub_23309B300();
            uint64_t v366 = *(void *)(v365 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v366 + 48))(v364, 1, v365))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v363, v364, *(void *)(*(void *)(v367 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v366 + 16))(v363, v364, v365);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v366 + 56))(v363, 0, 1, v365);
            }
            uint64_t v455 = *(int *)(v585 + 32);
            uint64_t v456 = &v357[v455];
            uint64_t v457 = &v358[v455];
            uint64_t v458 = v457[1];
            *uint64_t v456 = *v457;
            v456[1] = v458;
            uint64_t v459 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
            swift_bridgeObjectRetain();
            v459(v357, 0, 1, v585);
            uint64_t v273 = v585;
            uint64_t v11 = v594;
            uint64_t v248 = v570;
            uint64_t v249 = __srcd;
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v532 + 56))(v269, 0, 1, v563);
        }
        uint64_t v460 = v248[16];
        uint64_t v461 = (void *)((char *)v8 + v460);
        uint64_t v462 = (void *)((char *)v9 + v460);
        uint64_t v463 = v462[1];
        *uint64_t v461 = *v462;
        v461[1] = v463;
        uint64_t v464 = v248[17];
        uint64_t v465 = (char *)v8 + v464;
        uint64_t v466 = (char *)v9 + v464;
        swift_bridgeObjectRetain();
        if (v249(v466, 1, v273))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v465, v466, *(void *)(*(void *)(v467 - 8) + 64));
          uint64_t v3 = v601;
        }
        else
        {
          unsigned char *v465 = *v466;
          *((void *)v465 + 1) = *((void *)v466 + 1);
          *((_DWORD *)v465 + 4) = *((_DWORD *)v466 + 4);
          uint64_t v468 = *((void *)v466 + 7);
          uint64_t v469 = v11;
          if (v468 == 1)
          {
            long long v470 = *(_OWORD *)(v466 + 40);
            *(_OWORD *)(v465 + 24) = *(_OWORD *)(v466 + 24);
            *(_OWORD *)(v465 + 40) = v470;
            *((void *)v465 + 7) = *((void *)v466 + 7);
          }
          else
          {
            v465[24] = v466[24];
            *(_WORD *)(v465 + 25) = *(_WORD *)(v466 + 25);
            *(_OWORD *)(v465 + 28) = *(_OWORD *)(v466 + 28);
            *((_DWORD *)v465 + 11) = *((_DWORD *)v466 + 11);
            *((void *)v465 + 6) = *((void *)v466 + 6);
            *((void *)v465 + 7) = v468;
            swift_bridgeObjectRetain();
          }
          uint64_t v471 = *(int *)(v273 + 28);
          uint64_t v472 = &v465[v471];
          uint64_t v473 = &v466[v471];
          uint64_t v474 = sub_23309B300();
          uint64_t v475 = *(void *)(v474 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v475 + 48))(v473, 1, v474))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v472, v473, *(void *)(*(void *)(v476 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v475 + 16))(v472, v473, v474);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v475 + 56))(v472, 0, 1, v474);
          }
          uint64_t v477 = *(int *)(v585 + 32);
          uint64_t v478 = &v465[v477];
          uint64_t v479 = &v466[v477];
          uint64_t v480 = v479[1];
          void *v478 = *v479;
          v478[1] = v480;
          v481 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
          swift_bridgeObjectRetain();
          v481(v465, 0, 1, v585);
          uint64_t v3 = v601;
          uint64_t v11 = v469;
          uint64_t v248 = v570;
          uint64_t v249 = __srcd;
        }
        uint64_t v482 = v248[18];
        uint64_t v483 = (char *)v8 + v482;
        uint64_t v484 = (char *)v9 + v482;
        if (__dste((unsigned char *)v9 + v482, 1, (uint64_t)v563))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v483, v484, *(void *)(*(void *)(v485 - 8) + 64));
          unint64_t v4 = v596;
        }
        else
        {
          uint64_t v486 = v585;
          if (v249(v484, 1, v585))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v483, v484, *(void *)(*(void *)(v487 - 8) + 64));
          }
          else
          {
            unsigned char *v483 = *v484;
            *((void *)v483 + 1) = *((void *)v484 + 1);
            *((_DWORD *)v483 + 4) = *((_DWORD *)v484 + 4);
            uint64_t v488 = *((void *)v484 + 7);
            uint64_t v489 = v11;
            if (v488 == 1)
            {
              long long v490 = *(_OWORD *)(v484 + 40);
              *(_OWORD *)(v483 + 24) = *(_OWORD *)(v484 + 24);
              *(_OWORD *)(v483 + 40) = v490;
              *((void *)v483 + 7) = *((void *)v484 + 7);
            }
            else
            {
              v483[24] = v484[24];
              *(_WORD *)(v483 + 25) = *(_WORD *)(v484 + 25);
              *(_OWORD *)(v483 + 28) = *(_OWORD *)(v484 + 28);
              *((_DWORD *)v483 + 11) = *((_DWORD *)v484 + 11);
              *((void *)v483 + 6) = *((void *)v484 + 6);
              *((void *)v483 + 7) = v488;
              swift_bridgeObjectRetain();
            }
            uint64_t v491 = *(int *)(v585 + 28);
            uint64_t v492 = &v483[v491];
            uint64_t v493 = &v484[v491];
            uint64_t v494 = sub_23309B300();
            uint64_t v495 = *(void *)(v494 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v495 + 48))(v493, 1, v494))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v492, v493, *(void *)(*(void *)(v496 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v495 + 16))(v492, v493, v494);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v495 + 56))(v492, 0, 1, v494);
            }
            uint64_t v497 = *(int *)(v585 + 32);
            uint64_t v498 = &v483[v497];
            uint64_t v499 = &v484[v497];
            uint64_t v500 = v499[1];
            *uint64_t v498 = *v499;
            v498[1] = v500;
            uint64_t v501 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
            swift_bridgeObjectRetain();
            v501(v483, 0, 1, v585);
            uint64_t v486 = v585;
            uint64_t v11 = v489;
            uint64_t v248 = v570;
            uint64_t v249 = __srcd;
          }
          uint64_t v502 = v563[5];
          uint64_t v503 = &v483[v502];
          uint64_t v504 = &v484[v502];
          if (v249(v504, 1, v486))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v503, v504, *(void *)(*(void *)(v505 - 8) + 64));
          }
          else
          {
            unsigned char *v503 = *v504;
            *((void *)v503 + 1) = *((void *)v504 + 1);
            *((_DWORD *)v503 + 4) = *((_DWORD *)v504 + 4);
            uint64_t v506 = *((void *)v504 + 7);
            uint64_t v595 = v11;
            if (v506 == 1)
            {
              long long v507 = *(_OWORD *)(v504 + 40);
              *(_OWORD *)(v503 + 24) = *(_OWORD *)(v504 + 24);
              *(_OWORD *)(v503 + 40) = v507;
              *((void *)v503 + 7) = *((void *)v504 + 7);
            }
            else
            {
              v503[24] = v504[24];
              *(_WORD *)(v503 + 25) = *(_WORD *)(v504 + 25);
              *(_OWORD *)(v503 + 28) = *(_OWORD *)(v504 + 28);
              *((_DWORD *)v503 + 11) = *((_DWORD *)v504 + 11);
              *((void *)v503 + 6) = *((void *)v504 + 6);
              *((void *)v503 + 7) = v506;
              swift_bridgeObjectRetain();
            }
            uint64_t v508 = *(int *)(v486 + 28);
            uint64_t v509 = &v503[v508];
            uint64_t v510 = &v504[v508];
            uint64_t v511 = sub_23309B300();
            uint64_t v512 = *(void *)(v511 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v512 + 48))(v510, 1, v511))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v509, v510, *(void *)(*(void *)(v513 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v512 + 16))(v509, v510, v511);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v512 + 56))(v509, 0, 1, v511);
            }
            uint64_t v514 = *(int *)(v585 + 32);
            v515 = &v503[v514];
            uint64_t v516 = &v504[v514];
            uint64_t v517 = v516[1];
            void *v515 = *v516;
            v515[1] = v517;
            v518 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v548 + 56);
            swift_bridgeObjectRetain();
            v518(v503, 0, 1, v585);
            uint64_t v11 = v595;
            uint64_t v248 = v570;
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v532 + 56))(v483, 0, 1, v563);
          unint64_t v4 = v596;
          uint64_t v3 = v601;
        }
        uint64_t v519 = v248[19];
        uint64_t v520 = (void *)((char *)v8 + v519);
        v521 = (void *)((char *)v9 + v519);
        uint64_t v522 = v521[1];
        *uint64_t v520 = *v521;
        v520[1] = v522;
        uint64_t v523 = v248[20];
        v524 = (void *)((char *)v8 + v523);
        v525 = (void *)((char *)v9 + v523);
        uint64_t v526 = v525[1];
        void *v524 = *v525;
        v524[1] = v526;
        uint64_t v527 = v248[21];
        uint64_t v528 = (void *)((char *)v8 + v527);
        v529 = (void *)((char *)v9 + v527);
        uint64_t v530 = v529[1];
        void *v528 = *v529;
        v528[1] = v530;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_198;
      case 2u:
        v586 = v5;
        uint64_t v589 = v11;
        v597 = v4;
        uint64_t v602 = v3;
        uint64_t v25 = v9;
        uint64_t v26 = *v9;
        uint64_t v27 = v9[1];
        void *v8 = v26;
        v8[1] = v27;
        uint64_t v28 = v25[3];
        v8[2] = v25[2];
        v8[3] = v28;
        uint64_t v29 = v25[5];
        v8[4] = v25[4];
        v8[5] = v29;
        uint64_t v30 = v25[7];
        v8[6] = v25[6];
        v8[7] = v30;
        uint64_t v31 = v25[9];
        v8[8] = v25[8];
        v8[9] = v31;
        v8[10] = v25[10];
        v566 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v571 = v8;
        uint64_t v32 = v566[9];
        __dst = (char *)v8 + v32;
        uint64_t v579 = v25;
        uint64_t v33 = (char *)v25 + v32;
        uint64_t v34 = type metadata accessor for FHIRDateTime();
        uint64_t v543 = *(void *)(v34 - 8);
        uint64_t v35 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v543 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v36 = v34;
        swift_bridgeObjectRetain();
        __src = v35;
        if (v35(v33, 1, v34))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v33, *(void *)(*(void *)(v37 - 8) + 64));
          uint64_t v3 = v602;
          uint64_t v38 = v566;
          uint64_t v8 = v571;
          uint64_t v9 = v579;
        }
        else
        {
          unsigned char *__dst = *v33;
          *((void *)__dst + 1) = *((void *)v33 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v33 + 4);
          uint64_t v85 = *((void *)v33 + 7);
          if (v85 == 1)
          {
            long long v86 = *(_OWORD *)(v33 + 40);
            *(_OWORD *)(__dst + 24) = *(_OWORD *)(v33 + 24);
            *(_OWORD *)(__dst + 40) = v86;
            *((void *)__dst + 7) = *((void *)v33 + 7);
          }
          else
          {
            __dst[24] = v33[24];
            *(_WORD *)(__dst + 25) = *(_WORD *)(v33 + 25);
            *(_OWORD *)(__dst + 28) = *(_OWORD *)(v33 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v33 + 11);
            *((void *)__dst + 6) = *((void *)v33 + 6);
            *((void *)__dst + 7) = v85;
            swift_bridgeObjectRetain();
          }
          uint64_t v38 = v566;
          uint64_t v8 = v571;
          uint64_t v9 = v579;
          uint64_t v93 = *(int *)(v34 + 28);
          uint64_t v94 = &__dst[v93];
          uint64_t v583 = v33;
          uint64_t v95 = &v33[v93];
          uint64_t v96 = sub_23309B300();
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 16))(v94, v95, v96);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
          }
          uint64_t v112 = *(int *)(v34 + 32);
          uint64_t v113 = &__dst[v112];
          uint64_t v114 = &v583[v112];
          uint64_t v115 = v114[1];
          *uint64_t v113 = *v114;
          v113[1] = v115;
          uint64_t v116 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v543 + 56);
          swift_bridgeObjectRetain();
          v116(__dst, 0, 1, v34);
          uint64_t v36 = v34;
          uint64_t v3 = v602;
        }
        uint64_t v117 = v38[10];
        uint64_t v118 = (char *)v8 + v117;
        uint64_t v119 = (char *)v9 + v117;
        uint64_t v120 = type metadata accessor for Period();
        uint64_t v121 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v120 - 8);
        uint64_t v584 = v36;
        if (v121[6](v119, 1, v120))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
          unint64_t v4 = v597;
          uint64_t v123 = v566;
        }
        else
        {
          __dstb = (void (**)(void *, void, uint64_t, uint64_t))v121;
          uint64_t v124 = v36;
          if (__src(v119, 1, v36))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            uint64_t v126 = v118;
            memcpy(v118, v119, *(void *)(*(void *)(v125 - 8) + 64));
            uint64_t v127 = v124;
            uint64_t v128 = v120;
          }
          else
          {
            uint64_t v172 = v36;
            uint64_t v126 = v118;
            unsigned char *v118 = *v119;
            *((void *)v118 + 1) = *((void *)v119 + 1);
            *((_DWORD *)v118 + 4) = *((_DWORD *)v119 + 4);
            uint64_t v173 = *((void *)v119 + 7);
            uint64_t v128 = v120;
            if (v173 == 1)
            {
              long long v174 = *(_OWORD *)(v119 + 40);
              *(_OWORD *)(v118 + 24) = *(_OWORD *)(v119 + 24);
              *(_OWORD *)(v118 + 40) = v174;
              *((void *)v118 + 7) = *((void *)v119 + 7);
            }
            else
            {
              v118[24] = v119[24];
              *(_WORD *)(v118 + 25) = *(_WORD *)(v119 + 25);
              *(_OWORD *)(v118 + 28) = *(_OWORD *)(v119 + 28);
              *((_DWORD *)v118 + 11) = *((_DWORD *)v119 + 11);
              *((void *)v118 + 6) = *((void *)v119 + 6);
              *((void *)v118 + 7) = v173;
              swift_bridgeObjectRetain();
            }
            uint64_t v185 = *(int *)(v172 + 28);
            uint64_t v186 = &v118[v185];
            uint64_t v187 = &v119[v185];
            uint64_t v188 = sub_23309B300();
            uint64_t v189 = *(void *)(v188 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v186, v187, *(void *)(*(void *)(v190 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v189 + 16))(v186, v187, v188);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v189 + 56))(v186, 0, 1, v188);
            }
            uint64_t v127 = v584;
            uint64_t v284 = *(int *)(v584 + 32);
            uint64_t v285 = &v126[v284];
            uint64_t v286 = &v119[v284];
            uint64_t v287 = v286[1];
            void *v285 = *v286;
            v285[1] = v287;
            uint64_t v288 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v543 + 56);
            swift_bridgeObjectRetain();
            v288(v126, 0, 1, v584);
            uint64_t v3 = v602;
          }
          uint64_t v289 = *(int *)(v128 + 20);
          uint64_t v576 = v126;
          uint64_t v290 = &v126[v289];
          uint64_t v291 = &v119[v289];
          uint64_t v123 = v566;
          if (__src(v291, 1, v127))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v290, v291, *(void *)(*(void *)(v292 - 8) + 64));
            long long v293 = __dstb;
          }
          else
          {
            unsigned char *v290 = *v291;
            *((void *)v290 + 1) = *((void *)v291 + 1);
            *((_DWORD *)v290 + 4) = *((_DWORD *)v291 + 4);
            uint64_t v294 = *((void *)v291 + 7);
            long long v293 = __dstb;
            if (v294 == 1)
            {
              long long v295 = *(_OWORD *)(v291 + 40);
              *(_OWORD *)(v290 + 24) = *(_OWORD *)(v291 + 24);
              *(_OWORD *)(v290 + 40) = v295;
              *((void *)v290 + 7) = *((void *)v291 + 7);
            }
            else
            {
              v290[24] = v291[24];
              *(_WORD *)(v290 + 25) = *(_WORD *)(v291 + 25);
              *(_OWORD *)(v290 + 28) = *(_OWORD *)(v291 + 28);
              *((_DWORD *)v290 + 11) = *((_DWORD *)v291 + 11);
              *((void *)v290 + 6) = *((void *)v291 + 6);
              *((void *)v290 + 7) = v294;
              swift_bridgeObjectRetain();
            }
            uint64_t v296 = *(int *)(v584 + 28);
            uint64_t v297 = &v290[v296];
            uint64_t v298 = &v291[v296];
            uint64_t v299 = sub_23309B300();
            uint64_t v300 = *(void *)(v299 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v300 + 48))(v298, 1, v299))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v297, v298, *(void *)(*(void *)(v301 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v300 + 16))(v297, v298, v299);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
            }
            uint64_t v368 = *(int *)(v584 + 32);
            uint64_t v369 = &v290[v368];
            uint64_t v370 = &v291[v368];
            uint64_t v371 = v370[1];
            void *v369 = *v370;
            v369[1] = v371;
            uint64_t v372 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v543 + 56);
            swift_bridgeObjectRetain();
            v372(v290, 0, 1, v584);
            uint64_t v3 = v602;
            uint64_t v123 = v566;
            uint64_t v5 = v586;
          }
          v293[7](v576, 0, 1, v128);
          unint64_t v4 = v597;
        }
        uint64_t v373 = v123[11];
        uint64_t v374 = (char *)v8 + v373;
        uint64_t v375 = (char *)v9 + v373;
        if (__src((unsigned char *)v9 + v373, 1, v584))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v374, v375, *(void *)(*(void *)(v376 - 8) + 64));
          uint64_t v11 = v589;
        }
        else
        {
          *uint64_t v374 = *v375;
          *((void *)v374 + 1) = *((void *)v375 + 1);
          *((_DWORD *)v374 + 4) = *((_DWORD *)v375 + 4);
          uint64_t v377 = *((void *)v375 + 7);
          if (v377 == 1)
          {
            long long v378 = *(_OWORD *)(v375 + 40);
            *(_OWORD *)(v374 + 24) = *(_OWORD *)(v375 + 24);
            *(_OWORD *)(v374 + 40) = v378;
            *((void *)v374 + 7) = *((void *)v375 + 7);
          }
          else
          {
            v374[24] = v375[24];
            *(_WORD *)(v374 + 25) = *(_WORD *)(v375 + 25);
            *(_OWORD *)(v374 + 28) = *(_OWORD *)(v375 + 28);
            *((_DWORD *)v374 + 11) = *((_DWORD *)v375 + 11);
            *((void *)v374 + 6) = *((void *)v375 + 6);
            *((void *)v374 + 7) = v377;
            swift_bridgeObjectRetain();
          }
          uint64_t v379 = *(int *)(v584 + 28);
          uint64_t v380 = &v374[v379];
          uint64_t v381 = &v375[v379];
          uint64_t v382 = sub_23309B300();
          uint64_t v383 = *(void *)(v382 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v383 + 48))(v381, 1, v382))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v380, v381, *(void *)(*(void *)(v384 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v383 + 16))(v380, v381, v382);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v383 + 56))(v380, 0, 1, v382);
          }
          uint64_t v385 = *(int *)(v584 + 32);
          uint64_t v386 = &v374[v385];
          long long v387 = &v375[v385];
          uint64_t v388 = v387[1];
          *uint64_t v386 = *v387;
          v386[1] = v388;
          uint64_t v389 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v543 + 56);
          swift_bridgeObjectRetain();
          v389(v374, 0, 1, v584);
          unint64_t v4 = v597;
          uint64_t v3 = v602;
          uint64_t v5 = v586;
          uint64_t v11 = v589;
        }
        uint64_t v390 = v123[12];
        goto LABEL_174;
      case 3u:
        uint64_t v590 = v11;
        v598 = v4;
        uint64_t v603 = v3;
        uint64_t v39 = v9[1];
        void *v8 = *v9;
        v8[1] = v39;
        uint64_t v40 = v9[3];
        v8[2] = v9[2];
        v8[3] = v40;
        uint64_t v41 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v41 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v42 = v9[5];
        uint64_t v43 = v9[6];
        v8[4] = v41;
        v8[5] = v42;
        v8[6] = v43;
        uint64_t v580 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v44 = v580[8];
        uint64_t v45 = (char *)v8 + v44;
        uint64_t v46 = (char *)v9 + v44;
        uint64_t v47 = type metadata accessor for FHIRDateTime();
        uint64_t v48 = *(void *)(v47 - 8);
        uint64_t v49 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48);
        swift_bridgeObjectRetain();
        v587 = v5;
        if (v49(v46, 1, v47))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
          uint64_t v11 = v590;
        }
        else
        {
          unsigned char *v45 = *v46;
          *((void *)v45 + 1) = *((void *)v46 + 1);
          *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
          uint64_t v87 = *((void *)v46 + 7);
          if (v87 == 1)
          {
            long long v88 = *(_OWORD *)(v46 + 40);
            *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
            *(_OWORD *)(v45 + 40) = v88;
            *((void *)v45 + 7) = *((void *)v46 + 7);
          }
          else
          {
            v45[24] = v46[24];
            *(_WORD *)(v45 + 25) = *(_WORD *)(v46 + 25);
            *(_OWORD *)(v45 + 28) = *(_OWORD *)(v46 + 28);
            *((_DWORD *)v45 + 11) = *((_DWORD *)v46 + 11);
            *((void *)v45 + 6) = *((void *)v46 + 6);
            *((void *)v45 + 7) = v87;
            swift_bridgeObjectRetain();
          }
          uint64_t v11 = v590;
          uint64_t v99 = *(int *)(v47 + 28);
          uint64_t v573 = &v45[v99];
          uint64_t v100 = &v46[v99];
          uint64_t v101 = sub_23309B300();
          uint64_t v561 = *(void (***)(void *, const void *, uint64_t))(v101 - 8);
          if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v561[6])(v100, 1, v101))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v573, v100, *(void *)(*(void *)(v102 - 8) + 64));
          }
          else
          {
            v561[2](v573, v100, v101);
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))v561[7])(v573, 0, 1, v101);
          }
          uint64_t v129 = *(int *)(v47 + 32);
          uint64_t v130 = &v45[v129];
          uint64_t v131 = &v46[v129];
          uint64_t v132 = v131[1];
          *uint64_t v130 = *v131;
          v130[1] = v132;
          uint64_t v133 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56);
          swift_bridgeObjectRetain();
          v133(v45, 0, 1, v47);
        }
        uint64_t v134 = v580[9];
        long long v135 = (void *)((char *)v8 + v134);
        uint64_t v136 = (void *)((char *)v9 + v134);
        *long long v135 = *v136;
        *(void *)((char *)v135 + 5) = *(void *)((char *)v136 + 5);
        *(void *)((char *)v8 + v580[10]) = *(void *)((char *)v9 + v580[10]);
        *((unsigned char *)v8 + v580[11]) = *((unsigned char *)v9 + v580[11]);
        *(void *)((char *)v8 + v580[12]) = *(void *)((char *)v9 + v580[12]);
        uint64_t v137 = v580[13];
        uint64_t v138 = (void *)((char *)v8 + v137);
        uint64_t v139 = (void *)((char *)v9 + v137);
        uint64_t v140 = v8;
        uint64_t v141 = v139[1];
        *uint64_t v138 = *v139;
        v138[1] = v141;
        v138[2] = v139[2];
        *((unsigned char *)v140 + v580[14]) = *((unsigned char *)v9 + v580[14]);
        uint64_t v142 = v580[15];
        uint64_t v574 = v140;
        uint64_t v143 = (void *)((char *)v140 + v142);
        uint64_t v144 = (void *)((char *)v9 + v142);
        uint64_t v145 = type metadata accessor for Reference();
        v568 = *(void **)(v145 - 8);
        uint64_t v146 = (unsigned int (*)(void, void, void))v568[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v146(v144, 1, v145))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
          unint64_t v4 = v598;
          uint64_t v8 = v574;
          uint64_t v5 = v587;
        }
        else
        {
          v546 = v146;
          uint64_t v148 = v144[1];
          *uint64_t v143 = *v144;
          v143[1] = v148;
          uint64_t v149 = v144[3];
          v143[2] = v144[2];
          v143[3] = v149;
          v562 = (void *)v145;
          uint64_t v150 = *(int *)(v145 + 24);
          __dstc = v143;
          uint64_t v151 = (void *)((char *)v143 + v150);
          uint64_t v152 = (void *)((char *)v144 + v150);
          uint64_t v153 = type metadata accessor for Identifier();
          uint64_t v154 = *(void *)(v153 - 8);
          uint64_t v155 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v154 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v155(v152, 1, v153))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v151, v152, *(void *)(*(void *)(v156 - 8) + 64));
            uint64_t v5 = v587;
            uint64_t v11 = v590;
            uint64_t v8 = v574;
            uint64_t v157 = __dstc;
          }
          else
          {
            uint64_t v534 = v153;
            uint64_t v175 = v152[1];
            *uint64_t v151 = *v152;
            v151[1] = v175;
            uint64_t v176 = v152[3];
            swift_bridgeObjectRetain();
            uint64_t v8 = v574;
            uint64_t v5 = v587;
            if (v176 == 1)
            {
              *((_OWORD *)v151 + 1) = *((_OWORD *)v152 + 1);
              v151[4] = v152[4];
            }
            else
            {
              v151[2] = v152[2];
              v151[3] = v176;
              v151[4] = v152[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v11 = v590;
            uint64_t v157 = __dstc;
            uint64_t v191 = *(int *)(v534 + 24);
            __dstd = (char *)v151;
            uint64_t v531 = (char *)v151 + v191;
            uint64_t v192 = (char *)v152 + v191;
            uint64_t v193 = sub_23309AF80();
            uint64_t v194 = *(void *)(v193 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v531, v192, *(void *)(*(void *)(v195 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v531, v192, v193);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v531, 0, 1, v193);
            }
            uint64_t v302 = *(int *)(v534 + 28);
            uint64_t v303 = &__dstd[v302];
            uint64_t v304 = (void *)((char *)v152 + v302);
            uint64_t v305 = v304[1];
            *(void *)uint64_t v303 = *v304;
            *((void *)v303 + 1) = v305;
            uint64_t v306 = *(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56);
            swift_bridgeObjectRetain();
            v306(__dstd, 0, 1, v534);
          }
          uint64_t v145 = (uint64_t)v562;
          ((void (*)(void *, void, uint64_t, void *))v568[7])(v157, 0, 1, v562);
          unint64_t v4 = v598;
          uint64_t v146 = v546;
        }
        uint64_t v307 = v580[16];
        uint64_t v308 = (void *)((char *)v8 + v307);
        uint64_t v309 = (void *)((char *)v9 + v307);
        uint64_t v310 = v309[1];
        *uint64_t v308 = *v309;
        v308[1] = v310;
        uint64_t v311 = v580[17];
        long long v312 = (void *)((char *)v8 + v311);
        uint64_t v313 = (void *)((char *)v9 + v311);
        swift_bridgeObjectRetain();
        if (v146(v313, 1, v145))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v312, v313, *(void *)(*(void *)(v314 - 8) + 64));
          uint64_t v3 = v603;
        }
        else
        {
          uint64_t v315 = v313[1];
          *long long v312 = *v313;
          v312[1] = v315;
          uint64_t v316 = (int *)v145;
          uint64_t v317 = v313[3];
          v312[2] = v313[2];
          v312[3] = v317;
          __srce = v312;
          v564 = v316;
          uint64_t v318 = v316[6];
          uint64_t v577 = (void *)((char *)v312 + v318);
          v319 = (void *)((char *)v313 + v318);
          uint64_t v320 = type metadata accessor for Identifier();
          uint64_t v321 = *(void *)(v320 - 8);
          long long v322 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v321 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v322(v319, 1, v320))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v577, v319, *(void *)(*(void *)(v323 - 8) + 64));
            uint64_t v11 = v590;
            v324 = v564;
          }
          else
          {
            uint64_t v535 = v321;
            uint64_t v325 = v319[1];
            *uint64_t v577 = *v319;
            v577[1] = v325;
            uint64_t v326 = v319[3];
            swift_bridgeObjectRetain();
            v549 = v319;
            if (v326 == 1)
            {
              *((_OWORD *)v577 + 1) = *((_OWORD *)v319 + 1);
              v577[4] = v319[4];
            }
            else
            {
              v577[2] = v319[2];
              v577[3] = v326;
              v577[4] = v319[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v11 = v590;
            v324 = v564;
            uint64_t v327 = *(int *)(v320 + 24);
            uint64_t v328 = (char *)v577 + v327;
            uint64_t v329 = (char *)v319 + v327;
            uint64_t v330 = sub_23309AF80();
            uint64_t v331 = *(void *)(v330 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v331 + 48))(v329, 1, v330))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v328, v329, *(void *)(*(void *)(v332 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v331 + 16))(v328, v329, v330);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v331 + 56))(v328, 0, 1, v330);
            }
            uint64_t v391 = *(int *)(v320 + 28);
            uint64_t v392 = (void *)((char *)v577 + v391);
            uint64_t v393 = (void *)((char *)v549 + v391);
            uint64_t v394 = v393[1];
            *uint64_t v392 = *v393;
            v392[1] = v394;
            uint64_t v395 = *(void (**)(void *, void, uint64_t, uint64_t))(v535 + 56);
            swift_bridgeObjectRetain();
            v395(v577, 0, 1, v320);
          }
          ((void (*)(void *, void, uint64_t, int *))v568[7])(__srce, 0, 1, v324);
          unint64_t v4 = v598;
          uint64_t v3 = v603;
        }
        uint64_t v390 = v580[18];
LABEL_174:
        uint64_t v396 = (void *)((char *)v8 + v390);
        uint64_t v397 = (void *)((char *)v9 + v390);
        uint64_t v398 = v397[1];
        *uint64_t v396 = *v397;
        v396[1] = v398;
        goto LABEL_198;
      case 4u:
        uint64_t v51 = v9[1];
        void *v8 = *v9;
        v8[1] = v51;
        uint64_t v52 = v9[3];
        v8[2] = v9[2];
        v8[3] = v52;
        uint64_t v53 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v53 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v55 = v9[5];
        uint64_t v54 = v9[6];
        v8[4] = v53;
        v8[5] = v55;
        v8[6] = v54;
        uint64_t v56 = v9[8];
        swift_bridgeObjectRetain();
        v599 = v4;
        v588 = v5;
        if (v56 == 1)
        {
          *(_OWORD *)(v8 + 7) = *(_OWORD *)(v9 + 7);
          v8[9] = v9[9];
        }
        else
        {
          v8[7] = v9[7];
          v8[8] = v56;
          v8[9] = v9[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v66 = v9[11];
        v8[10] = v9[10];
        v8[11] = v66;
        uint64_t v67 = v9[13];
        v8[12] = v9[12];
        v8[13] = v67;
        v8[14] = v9[14];
        uint64_t v572 = v8;
        uint64_t v581 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v68 = v581[11];
        __srca = (char *)v8 + v68;
        uint64_t v69 = (char *)v9 + v68;
        uint64_t v70 = type metadata accessor for FHIRDateTime();
        v559 = *(void **)(v70 - 8);
        uint64_t v71 = (unsigned int (*)(void, void, void))v559[6];
        uint64_t v72 = v69;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v592 = v11;
        if (v71(v69, 1, v70))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__srca, v69, *(void *)(*(void *)(v73 - 8) + 64));
          uint64_t v8 = v572;
        }
        else
        {
          uint64_t v89 = v70;
          unsigned char *__srca = *v69;
          *((void *)__srca + 1) = *((void *)v69 + 1);
          *((_DWORD *)__srca + 4) = *((_DWORD *)v69 + 4);
          uint64_t v90 = *((void *)v69 + 7);
          v544 = v71;
          uint64_t v91 = v3;
          if (v90 == 1)
          {
            long long v92 = *(_OWORD *)(v69 + 40);
            *(_OWORD *)(__srca + 24) = *(_OWORD *)(v69 + 24);
            *(_OWORD *)(__srca + 40) = v92;
            *((void *)__srca + 7) = *((void *)v69 + 7);
          }
          else
          {
            __srca[24] = v69[24];
            *(_WORD *)(__srca + 25) = *(_WORD *)(v69 + 25);
            *(_OWORD *)(__srca + 28) = *(_OWORD *)(v69 + 28);
            *((_DWORD *)__srca + 11) = *((_DWORD *)v69 + 11);
            *((void *)__srca + 6) = *((void *)v69 + 6);
            *((void *)__srca + 7) = v90;
            swift_bridgeObjectRetain();
          }
          uint64_t v8 = v572;
          uint64_t v103 = *(int *)(v89 + 28);
          uint64_t v104 = &__srca[v103];
          uint64_t v105 = v72;
          uint64_t v106 = &v72[v103];
          uint64_t v107 = sub_23309B300();
          uint64_t v108 = *(void *)(v107 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v104, v106, *(void *)(*(void *)(v109 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v108 + 16))(v104, v106, v107);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v108 + 56))(v104, 0, 1, v107);
          }
          uint64_t v3 = v91;
          uint64_t v70 = v89;
          uint64_t v158 = *(int *)(v89 + 32);
          uint64_t v159 = &__srca[v158];
          uint64_t v160 = &v105[v158];
          uint64_t v161 = v160[1];
          *uint64_t v159 = *v160;
          v159[1] = v161;
          uint64_t v162 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v559[7];
          swift_bridgeObjectRetain();
          v162(__srca, 0, 1, v89);
          uint64_t v11 = v592;
          uint64_t v71 = v544;
        }
        uint64_t v163 = v581[12];
        uint64_t v164 = (char *)v8 + v163;
        uint64_t v165 = (char *)v9 + v163;
        uint64_t v166 = type metadata accessor for Period();
        uint64_t v167 = *(void *)(v166 - 8);
        uint64_t v604 = v3;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v164, v165, *(void *)(*(void *)(v168 - 8) + 64));
        }
        else
        {
          uint64_t v575 = (int *)v166;
          __srcc = v164;
          if (v71(v165, 1, v70))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v164, v165, *(void *)(*(void *)(v169 - 8) + 64));
            uint64_t v170 = v167;
            long long v171 = v165;
          }
          else
          {
            *uint64_t v164 = *v165;
            *((void *)v164 + 1) = *((void *)v165 + 1);
            *((_DWORD *)v164 + 4) = *((_DWORD *)v165 + 4);
            uint64_t v177 = *((void *)v165 + 7);
            uint64_t v170 = v167;
            v547 = v71;
            if (v177 == 1)
            {
              long long v178 = *(_OWORD *)(v165 + 40);
              *(_OWORD *)(v164 + 24) = *(_OWORD *)(v165 + 24);
              *(_OWORD *)(v164 + 40) = v178;
              *((void *)v164 + 7) = *((void *)v165 + 7);
            }
            else
            {
              v164[24] = v165[24];
              *(_WORD *)(v164 + 25) = *(_WORD *)(v165 + 25);
              *(_OWORD *)(v164 + 28) = *(_OWORD *)(v165 + 28);
              *((_DWORD *)v164 + 11) = *((_DWORD *)v165 + 11);
              *((void *)v164 + 6) = *((void *)v165 + 6);
              *((void *)v164 + 7) = v177;
              swift_bridgeObjectRetain();
            }
            uint64_t v196 = v164;
            uint64_t v197 = v70;
            uint64_t v198 = *(int *)(v70 + 28);
            uint64_t v199 = &v196[v198];
            uint64_t v200 = &v165[v198];
            uint64_t v201 = sub_23309B300();
            uint64_t v202 = *(void *)(v201 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v199, v200, *(void *)(*(void *)(v203 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v202 + 16))(v199, v200, v201);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
            }
            uint64_t v333 = v197;
            uint64_t v334 = *(int *)(v197 + 32);
            uint64_t v164 = __srcc;
            uint64_t v335 = &__srcc[v334];
            uint64_t v336 = &v165[v334];
            uint64_t v337 = v336[1];
            void *v335 = *v336;
            v335[1] = v337;
            uint64_t v338 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v559[7];
            swift_bridgeObjectRetain();
            v338(__srcc, 0, 1, v333);
            uint64_t v70 = v333;
            uint64_t v11 = v592;
            long long v171 = v165;
            uint64_t v71 = v547;
          }
          uint64_t v339 = v575[5];
          uint64_t v340 = &v164[v339];
          uint64_t v341 = &v171[v339];
          if (v71(&v171[v339], 1, v70))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v340, v341, *(void *)(*(void *)(v342 - 8) + 64));
          }
          else
          {
            unsigned char *v340 = *v341;
            *((void *)v340 + 1) = *((void *)v341 + 1);
            *((_DWORD *)v340 + 4) = *((_DWORD *)v341 + 4);
            uint64_t v343 = *((void *)v341 + 7);
            v550 = v71;
            if (v343 == 1)
            {
              long long v344 = *(_OWORD *)(v341 + 40);
              *(_OWORD *)(v340 + 24) = *(_OWORD *)(v341 + 24);
              *(_OWORD *)(v340 + 40) = v344;
              *((void *)v340 + 7) = *((void *)v341 + 7);
            }
            else
            {
              v340[24] = v341[24];
              *(_WORD *)(v340 + 25) = *(_WORD *)(v341 + 25);
              *(_OWORD *)(v340 + 28) = *(_OWORD *)(v341 + 28);
              *((_DWORD *)v340 + 11) = *((_DWORD *)v341 + 11);
              *((void *)v340 + 6) = *((void *)v341 + 6);
              *((void *)v340 + 7) = v343;
              swift_bridgeObjectRetain();
            }
            __dstf = (int *)v70;
            uint64_t v345 = *(int *)(v70 + 28);
            uint64_t v346 = &v340[v345];
            uint64_t v347 = &v341[v345];
            uint64_t v348 = sub_23309B300();
            uint64_t v349 = *(void *)(v348 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v349 + 48))(v347, 1, v348))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v346, v347, *(void *)(*(void *)(v350 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v349 + 16))(v346, v347, v348);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v349 + 56))(v346, 0, 1, v348);
            }
            uint64_t v399 = __dstf[8];
            uint64_t v400 = &v340[v399];
            uint64_t v401 = &v341[v399];
            uint64_t v402 = v401[1];
            void *v400 = *v401;
            v400[1] = v402;
            uint64_t v403 = (void (*)(unsigned char *, void, uint64_t, int *))v559[7];
            swift_bridgeObjectRetain();
            v403(v340, 0, 1, __dstf);
            uint64_t v70 = (uint64_t)__dstf;
            uint64_t v11 = v592;
            uint64_t v71 = v550;
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v170 + 56))(__srcc, 0, 1, v575);
        }
        uint64_t v404 = v581[13];
        uint64_t v405 = (char *)v8 + v404;
        uint64_t v406 = (char *)v9 + v404;
        if (v71((char *)v9 + v404, 1, v70))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v405, v406, *(void *)(*(void *)(v407 - 8) + 64));
          uint64_t v5 = v588;
        }
        else
        {
          unsigned char *v405 = *v406;
          *((void *)v405 + 1) = *((void *)v406 + 1);
          *((_DWORD *)v405 + 4) = *((_DWORD *)v406 + 4);
          uint64_t v408 = *((void *)v406 + 7);
          if (v408 == 1)
          {
            long long v409 = *(_OWORD *)(v406 + 40);
            *(_OWORD *)(v405 + 24) = *(_OWORD *)(v406 + 24);
            *(_OWORD *)(v405 + 40) = v409;
            *((void *)v405 + 7) = *((void *)v406 + 7);
          }
          else
          {
            v405[24] = v406[24];
            *(_WORD *)(v405 + 25) = *(_WORD *)(v406 + 25);
            *(_OWORD *)(v405 + 28) = *(_OWORD *)(v406 + 28);
            *((_DWORD *)v405 + 11) = *((_DWORD *)v406 + 11);
            *((void *)v405 + 6) = *((void *)v406 + 6);
            *((void *)v405 + 7) = v408;
            swift_bridgeObjectRetain();
          }
          uint64_t v410 = *(int *)(v70 + 28);
          uint64_t v411 = &v405[v410];
          uint64_t v412 = &v406[v410];
          uint64_t v413 = sub_23309B300();
          uint64_t v414 = *(void *)(v413 - 8);
          uint64_t v5 = v588;
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v414 + 48))(v412, 1, v413))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v411, v412, *(void *)(*(void *)(v415 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v414 + 16))(v411, v412, v413);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v414 + 56))(v411, 0, 1, v413);
          }
          uint64_t v416 = *(int *)(v70 + 32);
          uint64_t v417 = &v405[v416];
          uint64_t v418 = &v406[v416];
          uint64_t v419 = v418[1];
          *uint64_t v417 = *v418;
          v417[1] = v419;
          uint64_t v420 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v559[7];
          swift_bridgeObjectRetain();
          v420(v405, 0, 1, v70);
          uint64_t v11 = v592;
        }
        *(void *)((char *)v8 + v581[14]) = *(void *)((char *)v9 + v581[14]);
        uint64_t v421 = v581[15];
        v422 = (void *)((char *)v8 + v421);
        uint64_t v423 = (void *)((char *)v9 + v421);
        uint64_t v424 = v423[1];
        void *v422 = *v423;
        v422[1] = v424;
        uint64_t v425 = v581[16];
        uint64_t v426 = (char *)v8 + v425;
        uint64_t v427 = (char *)v9 + v425;
        uint64_t v428 = *(void *)((char *)v9 + v425 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v428 == 1)
        {
          *(_OWORD *)uint64_t v426 = *(_OWORD *)v427;
          *((void *)v426 + 2) = *((void *)v427 + 2);
        }
        else
        {
          *(void *)uint64_t v426 = *(void *)v427;
          *((void *)v426 + 1) = v428;
          *((void *)v426 + 2) = *((void *)v427 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v429 = v581[17];
        uint64_t v430 = (void *)((char *)v8 + v429);
        unint64_t v431 = (void *)((char *)v9 + v429);
        uint64_t v432 = type metadata accessor for Quantity();
        uint64_t v433 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v432 - 8);
        if (v433[6](v431, 1, v432))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v430, v431, *(void *)(*(void *)(v434 - 8) + 64));
        }
        else
        {
          uint64_t v578 = v433;
          *(_OWORD *)uint64_t v430 = *(_OWORD *)v431;
          *(void *)((char *)v430 + 13) = *(void *)((char *)v431 + 13);
          uint64_t v435 = v431[4];
          v430[3] = v431[3];
          v430[4] = v435;
          uint64_t v436 = v431[6];
          v430[5] = v431[5];
          v430[6] = v436;
          uint64_t v437 = *(int *)(v432 + 28);
          v565 = (char *)v431 + v437;
          uint64_t v569 = (char *)v430 + v437;
          uint64_t v438 = sub_23309AF80();
          uint64_t v551 = *(void *)(v438 - 8);
          __srcf = *(unsigned int (**)(char *, uint64_t, uint64_t))(v551 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__srcf(v565, 1, v438))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v569, v565, *(void *)(*(void *)(v439 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v551 + 16))(v569, v565, v438);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v551 + 56))(v569, 0, 1, v438);
          }
          uint64_t v11 = v592;
          uint64_t v440 = *(int *)(v432 + 32);
          uint64_t v441 = (void *)((char *)v430 + v440);
          uint64_t v442 = (void *)((char *)v431 + v440);
          uint64_t v443 = v442[1];
          *uint64_t v441 = *v442;
          v441[1] = v443;
          uint64_t v444 = (void (*)(void *, void, uint64_t, uint64_t))v578[7];
          swift_bridgeObjectRetain();
          v444(v430, 0, 1, v432);
        }
        unint64_t v4 = v599;
        uint64_t v3 = v604;
        *(void *)((char *)v8 + v581[18]) = *(void *)((char *)v9 + v581[18]);
        uint64_t v445 = v581[19];
        long long v446 = (void *)((char *)v8 + v445);
        uint64_t v447 = (void *)((char *)v9 + v445);
        uint64_t v448 = v447[1];
        void *v446 = *v447;
        v446[1] = v448;
        goto LABEL_197;
      case 5u:
        uint64_t v591 = v11;
        v600 = v4;
        uint64_t v57 = v9[1];
        void *v8 = *v9;
        v8[1] = v57;
        uint64_t v58 = v9[3];
        v8[2] = v9[2];
        v8[3] = v58;
        v8[4] = v9[4];
        *(void *)((char *)v8 + 37) = *(void *)((char *)v9 + 37);
        uint64_t v59 = v9[7];
        v8[6] = v9[6];
        v8[7] = v59;
        uint64_t v60 = v9[9];
        v8[8] = v9[8];
        v8[9] = v60;
        uint64_t v61 = v9[11];
        v8[10] = v9[10];
        v8[11] = v61;
        uint64_t v62 = v9[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v62 == 1)
        {
          *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
          v8[14] = v9[14];
        }
        else
        {
          v8[12] = v9[12];
          v8[13] = v62;
          v8[14] = v9[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        unint64_t v4 = v600;
        uint64_t v11 = v591;
        uint64_t v74 = v9[16];
        v8[15] = v9[15];
        v8[16] = v74;
        v8[17] = v9[17];
        goto LABEL_197;
      case 6u:
        uint64_t v63 = v9[1];
        void *v8 = *v9;
        v8[1] = v63;
        uint64_t v64 = v9[3];
        v8[2] = v9[2];
        v8[3] = v64;
        uint64_t v65 = v9[5];
        v8[4] = v9[4];
        v8[5] = v65;
        swift_bridgeObjectRetain();
        goto LABEL_197;
      default:
        uint64_t v14 = v9[1];
        void *v8 = *v9;
        v8[1] = v14;
        uint64_t v15 = v9[3];
        v8[2] = v9[2];
        v8[3] = v15;
        v8[4] = v9[4];
        swift_bridgeObjectRetain();
LABEL_197:
        swift_bridgeObjectRetain();
LABEL_198:
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v605);
        break;
    }
  }
  uint64_t v449 = *(int *)(v3 + 24);
  uint64_t v450 = (void *)((char *)v5 + v449);
  uint64_t v451 = (void *)((char *)v4 + v449);
  uint64_t v452 = *v451;
  unint64_t v453 = v451[1];
  sub_232E9A9F4(*v451, v453);
  *uint64_t v450 = v452;
  v450[1] = v453;
  return v5;
}

void *assignWithCopy for ModelsDSTU2.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)((char *)v5 + v6);
  uint64_t v8 = (void *)((char *)v4 + v6);
  uint64_t v9 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = (uint64_t (*)(void *, uint64_t, uint64_t))v10[6];
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v1093 = v10;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v1066 = v5;
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          uint64_t v15 = v8[2];
          swift_bridgeObjectRetain();
          if (v15 != 1) {
            swift_bridgeObjectRetain();
          }
          v7[2] = v15;
          uint64_t v16 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
          uint64_t v17 = v16[6];
          uint64_t v18 = (void *)((char *)v7 + v17);
          uint64_t v19 = (void *)((char *)v8 + v17);
          uint64_t v20 = type metadata accessor for Reference();
          uint64_t v21 = *(void *)(v20 - 8);
          v1053 = v16;
          uint64_t v1101 = a3;
          uint64_t v1109 = v9;
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
          }
          else
          {
            v1016 = v18;
            uint64_t v1030 = v21;
            *uint64_t v18 = *v19;
            v18[1] = v19[1];
            v18[2] = v19[2];
            v18[3] = v19[3];
            uint64_t v80 = *(int *)(v20 + 24);
            v1041 = (void *)((char *)v18 + v80);
            uint64_t v81 = (void *)((char *)v19 + v80);
            uint64_t v82 = type metadata accessor for Identifier();
            uint64_t v83 = *(void **)(v82 - 8);
            uint64_t v84 = (unsigned int (*)(void *, uint64_t, uint64_t))v83[6];
            uint64_t v85 = v81;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v84(v81, 1, v82))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v1041, v81, *(void *)(*(void *)(v86 - 8) + 64));
            }
            else
            {
              __dstc = v83;
              void *v1041 = *v81;
              v1041[1] = v81[1];
              uint64_t v138 = v81[3];
              swift_bridgeObjectRetain();
              if (v138 == 1)
              {
                long long v139 = *((_OWORD *)v81 + 1);
                v1041[4] = v81[4];
                *((_OWORD *)v1041 + 1) = v139;
              }
              else
              {
                v1041[2] = v81[2];
                v1041[3] = v81[3];
                v1041[4] = v81[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v216 = *(int *)(v82 + 24);
              uint64_t v217 = (char *)v1041 + v216;
              v995 = v85;
              uint64_t v218 = (char *)v85 + v216;
              uint64_t v219 = sub_23309AF80();
              uint64_t v220 = *(void *)(v219 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v218, 1, v219))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v217, v218, *(void *)(*(void *)(v221 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v217, v218, v219);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v217, 0, 1, v219);
              }
              uint64_t v291 = *(int *)(v82 + 28);
              uint64_t v292 = (void *)((char *)v1041 + v291);
              long long v293 = (void *)((char *)v995 + v291);
              *uint64_t v292 = *v293;
              v292[1] = v293[1];
              uint64_t v294 = (void (*)(void *, void, uint64_t, uint64_t))__dstc[7];
              swift_bridgeObjectRetain();
              v294(v1041, 0, 1, v82);
            }
            uint64_t v16 = v1053;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1030 + 56))(v1016, 0, 1, v20);
          }
          uint64_t v10 = v1093;
          uint64_t v295 = v16[7];
          uint64_t v296 = (char *)v7 + v295;
          uint64_t v297 = (char *)v8 + v295;
          uint64_t v298 = type metadata accessor for FHIRDateTime();
          uint64_t v996 = *(void *)(v298 - 8);
          uint64_t v1035 = v298;
          __dstg = *(unsigned int (**)(unsigned char *, uint64_t))(v996 + 48);
          if (__dstg(v297, 1))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v296, v297, *(void *)(*(void *)(v299 - 8) + 64));
          }
          else
          {
            *uint64_t v296 = *v297;
            uint64_t v300 = *((void *)v297 + 1);
            *((_DWORD *)v296 + 4) = *((_DWORD *)v297 + 4);
            *((void *)v296 + 1) = v300;
            uint64_t v301 = v4;
            if (*((void *)v297 + 7) == 1)
            {
              long long v302 = *(_OWORD *)(v297 + 24);
              long long v303 = *(_OWORD *)(v297 + 40);
              *((void *)v296 + 7) = *((void *)v297 + 7);
              *(_OWORD *)(v296 + 24) = v302;
              *(_OWORD *)(v296 + 40) = v303;
            }
            else
            {
              v296[24] = v297[24];
              v296[25] = v297[25];
              v296[26] = v297[26];
              long long v304 = *(_OWORD *)(v297 + 28);
              *((_DWORD *)v296 + 11) = *((_DWORD *)v297 + 11);
              *(_OWORD *)(v296 + 28) = v304;
              *((void *)v296 + 6) = *((void *)v297 + 6);
              *((void *)v296 + 7) = *((void *)v297 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v305 = *(int *)(v1035 + 28);
            uint64_t v306 = &v296[v305];
            uint64_t v307 = &v297[v305];
            uint64_t v308 = sub_23309B300();
            uint64_t v309 = *(void *)(v308 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v309 + 48))(v307, 1, v308))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v306, v307, *(void *)(*(void *)(v310 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v309 + 16))(v306, v307, v308);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v309 + 56))(v306, 0, 1, v308);
            }
            unint64_t v4 = v301;
            uint64_t v10 = v1093;
            uint64_t v311 = *(int *)(v1035 + 32);
            long long v312 = &v296[v311];
            uint64_t v313 = &v297[v311];
            *long long v312 = *v313;
            v312[1] = v313[1];
            uint64_t v314 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
            swift_bridgeObjectRetain();
            v314(v296, 0, 1, v1035);
            uint64_t v16 = v1053;
          }
          uint64_t v315 = v16[8];
          uint64_t v316 = (void *)((char *)v7 + v315);
          uint64_t v317 = (void *)((char *)v8 + v315);
          void *v316 = *v317;
          v316[1] = v317[1];
          v316[2] = v317[2];
          uint64_t v318 = v16[9];
          v319 = (char *)v7 + v318;
          uint64_t v320 = (char *)v8 + v318;
          uint64_t v321 = *(void *)((char *)v8 + v318 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v321 == 1)
          {
            long long v322 = *(_OWORD *)v320;
            *((void *)v319 + 2) = *((void *)v320 + 2);
            *(_OWORD *)v319 = v322;
          }
          else
          {
            *(void *)v319 = *(void *)v320;
            *((void *)v319 + 1) = *((void *)v320 + 1);
            *((void *)v319 + 2) = *((void *)v320 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v323 = v1053[10];
          v324 = (void *)((char *)v7 + v323);
          uint64_t v325 = (void *)((char *)v8 + v323);
          void *v324 = *v325;
          v324[1] = v325[1];
          uint64_t v326 = v1053[11];
          uint64_t v327 = (void *)((char *)v7 + v326);
          uint64_t v328 = (void *)((char *)v8 + v326);
          *uint64_t v327 = *v328;
          v327[1] = v328[1];
          uint64_t v329 = v1053[12];
          uint64_t v330 = (char *)v7 + v329;
          uint64_t v331 = (char *)v8 + v329;
          uint64_t v332 = *(void *)((char *)v8 + v329 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v332 == 1)
          {
            long long v333 = *(_OWORD *)v331;
            *((void *)v330 + 2) = *((void *)v331 + 2);
            *(_OWORD *)uint64_t v330 = v333;
          }
          else
          {
            *(void *)uint64_t v330 = *(void *)v331;
            *((void *)v330 + 1) = *((void *)v331 + 1);
            *((void *)v330 + 2) = *((void *)v331 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v334 = v1035;
          uint64_t v335 = v1053;
          *(void *)((char *)v7 + v1053[13]) = *(void *)((char *)v8 + v1053[13]);
          uint64_t v336 = v1053[14];
          uint64_t v337 = (char *)v7 + v336;
          uint64_t v338 = (char *)v8 + v336;
          swift_bridgeObjectRetain();
          uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
          if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg)(v338, 1, v1035))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v337, v338, *(void *)(*(void *)(v340 - 8) + 64));
          }
          else
          {
            *uint64_t v337 = *v338;
            uint64_t v341 = *((void *)v338 + 1);
            *((_DWORD *)v337 + 4) = *((_DWORD *)v338 + 4);
            *((void *)v337 + 1) = v341;
            uint64_t v342 = v4;
            if (*((void *)v338 + 7) == 1)
            {
              long long v343 = *(_OWORD *)(v338 + 24);
              long long v344 = *(_OWORD *)(v338 + 40);
              *((void *)v337 + 7) = *((void *)v338 + 7);
              *(_OWORD *)(v337 + 24) = v343;
              *(_OWORD *)(v337 + 40) = v344;
            }
            else
            {
              v337[24] = v338[24];
              v337[25] = v338[25];
              v337[26] = v338[26];
              long long v345 = *(_OWORD *)(v338 + 28);
              *((_DWORD *)v337 + 11) = *((_DWORD *)v338 + 11);
              *(_OWORD *)(v337 + 28) = v345;
              *((void *)v337 + 6) = *((void *)v338 + 6);
              *((void *)v337 + 7) = *((void *)v338 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v346 = *(int *)(v1035 + 28);
            uint64_t v347 = &v337[v346];
            uint64_t v348 = &v338[v346];
            uint64_t v349 = sub_23309B300();
            uint64_t v350 = *(void *)(v349 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v350 + 48))(v348, 1, v349))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v347, v348, *(void *)(*(void *)(v351 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v350 + 16))(v347, v348, v349);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v350 + 56))(v347, 0, 1, v349);
            }
            unint64_t v4 = v342;
            uint64_t v10 = v1093;
            uint64_t v352 = *(int *)(v1035 + 32);
            uint64_t v353 = &v337[v352];
            uint64_t v354 = &v338[v352];
            *uint64_t v353 = *v354;
            v353[1] = v354[1];
            long long v355 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
            swift_bridgeObjectRetain();
            v355(v337, 0, 1, v1035);
            uint64_t v335 = v1053;
            uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
          }
          uint64_t v356 = v335[15];
          long long v357 = (char *)v7 + v356;
          long long v358 = (char *)v8 + v356;
          uint64_t v359 = type metadata accessor for Period();
          uint64_t v987 = *(void *)(v359 - 8);
          v1021 = (int *)v359;
          v991 = *(unsigned int (**)(char *, uint64_t, int *))(v987 + 48);
          if (((unsigned int (*)(unsigned char *, uint64_t))v991)(v358, 1))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v357, v358, *(void *)(*(void *)(v360 - 8) + 64));
            uint64_t v9 = v1109;
          }
          else
          {
            if (v339(v358, 1, v1035))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v357, v358, *(void *)(*(void *)(v361 - 8) + 64));
            }
            else
            {
              unsigned char *v357 = *v358;
              uint64_t v362 = *((void *)v358 + 1);
              *((_DWORD *)v357 + 4) = *((_DWORD *)v358 + 4);
              *((void *)v357 + 1) = v362;
              uint64_t v363 = v4;
              if (*((void *)v358 + 7) == 1)
              {
                long long v364 = *(_OWORD *)(v358 + 24);
                long long v365 = *(_OWORD *)(v358 + 40);
                *((void *)v357 + 7) = *((void *)v358 + 7);
                *(_OWORD *)(v357 + 24) = v364;
                *(_OWORD *)(v357 + 40) = v365;
              }
              else
              {
                v357[24] = v358[24];
                v357[25] = v358[25];
                v357[26] = v358[26];
                long long v366 = *(_OWORD *)(v358 + 28);
                *((_DWORD *)v357 + 11) = *((_DWORD *)v358 + 11);
                *(_OWORD *)(v357 + 28) = v366;
                *((void *)v357 + 6) = *((void *)v358 + 6);
                *((void *)v357 + 7) = *((void *)v358 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v367 = *(int *)(v1035 + 28);
              uint64_t v368 = &v357[v367];
              uint64_t v369 = &v358[v367];
              uint64_t v370 = sub_23309B300();
              uint64_t v371 = *(void *)(v370 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v371 + 48))(v369, 1, v370))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v368, v369, *(void *)(*(void *)(v372 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v371 + 16))(v368, v369, v370);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v371 + 56))(v368, 0, 1, v370);
              }
              unint64_t v4 = v363;
              uint64_t v454 = *(int *)(v1035 + 32);
              uint64_t v455 = &v357[v454];
              uint64_t v456 = &v358[v454];
              *uint64_t v455 = *v456;
              v455[1] = v456[1];
              uint64_t v457 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
              swift_bridgeObjectRetain();
              v457(v357, 0, 1, v1035);
              uint64_t v334 = v1035;
              uint64_t v10 = v1093;
              uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
            }
            uint64_t v458 = v1021[5];
            uint64_t v459 = &v357[v458];
            uint64_t v460 = &v358[v458];
            if (v339(v460, 1, v334))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v459, v460, *(void *)(*(void *)(v461 - 8) + 64));
              uint64_t v9 = v1109;
            }
            else
            {
              unsigned char *v459 = *v460;
              uint64_t v462 = *((void *)v460 + 1);
              *((_DWORD *)v459 + 4) = *((_DWORD *)v460 + 4);
              *((void *)v459 + 1) = v462;
              v1085 = v4;
              if (*((void *)v460 + 7) == 1)
              {
                long long v463 = *(_OWORD *)(v460 + 24);
                long long v464 = *(_OWORD *)(v460 + 40);
                *((void *)v459 + 7) = *((void *)v460 + 7);
                *(_OWORD *)(v459 + 24) = v463;
                *(_OWORD *)(v459 + 40) = v464;
              }
              else
              {
                v459[24] = v460[24];
                v459[25] = v460[25];
                v459[26] = v460[26];
                long long v465 = *(_OWORD *)(v460 + 28);
                *((_DWORD *)v459 + 11) = *((_DWORD *)v460 + 11);
                *(_OWORD *)(v459 + 28) = v465;
                *((void *)v459 + 6) = *((void *)v460 + 6);
                *((void *)v459 + 7) = *((void *)v460 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v466 = *(int *)(v334 + 28);
              uint64_t v467 = &v459[v466];
              uint64_t v468 = &v460[v466];
              uint64_t v469 = sub_23309B300();
              uint64_t v470 = *(void *)(v469 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v470 + 48))(v468, 1, v469))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v467, v468, *(void *)(*(void *)(v471 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v470 + 16))(v467, v468, v469);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v470 + 56))(v467, 0, 1, v469);
              }
              uint64_t v559 = *(int *)(v1035 + 32);
              v560 = &v459[v559];
              uint64_t v561 = &v460[v559];
              void *v560 = *v561;
              v560[1] = v561[1];
              v562 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
              swift_bridgeObjectRetain();
              v562(v459, 0, 1, v1035);
              uint64_t v334 = v1035;
              unint64_t v4 = v1085;
              uint64_t v9 = v1109;
              uint64_t v10 = v1093;
              uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
            }
            (*(void (**)(unsigned char *, void, uint64_t, int *))(v987 + 56))(v357, 0, 1, v1021);
          }
          uint64_t v563 = v335[16];
          v564 = (void *)((char *)v7 + v563);
          v565 = (void *)((char *)v8 + v563);
          void *v564 = *v565;
          v564[1] = v565[1];
          uint64_t v566 = v335[17];
          v567 = (char *)v7 + v566;
          v568 = (char *)v8 + v566;
          swift_bridgeObjectRetain();
          if (v339(v568, 1, v334))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v567, v568, *(void *)(*(void *)(v569 - 8) + 64));
          }
          else
          {
            unsigned char *v567 = *v568;
            uint64_t v570 = *((void *)v568 + 1);
            *((_DWORD *)v567 + 4) = *((_DWORD *)v568 + 4);
            *((void *)v567 + 1) = v570;
            uint64_t v571 = v9;
            uint64_t v572 = v4;
            if (*((void *)v568 + 7) == 1)
            {
              long long v573 = *(_OWORD *)(v568 + 24);
              long long v574 = *(_OWORD *)(v568 + 40);
              *((void *)v567 + 7) = *((void *)v568 + 7);
              *(_OWORD *)(v567 + 24) = v573;
              *(_OWORD *)(v567 + 40) = v574;
            }
            else
            {
              v567[24] = v568[24];
              v567[25] = v568[25];
              v567[26] = v568[26];
              long long v575 = *(_OWORD *)(v568 + 28);
              *((_DWORD *)v567 + 11) = *((_DWORD *)v568 + 11);
              *(_OWORD *)(v567 + 28) = v575;
              *((void *)v567 + 6) = *((void *)v568 + 6);
              *((void *)v567 + 7) = *((void *)v568 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v576 = *(int *)(v334 + 28);
            uint64_t v577 = &v567[v576];
            uint64_t v578 = &v568[v576];
            uint64_t v579 = sub_23309B300();
            uint64_t v580 = *(void *)(v579 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v580 + 48))(v578, 1, v579))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v577, v578, *(void *)(*(void *)(v581 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v580 + 16))(v577, v578, v579);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v580 + 56))(v577, 0, 1, v579);
            }
            unint64_t v4 = v572;
            uint64_t v9 = v571;
            uint64_t v10 = v1093;
            uint64_t v335 = v1053;
            uint64_t v582 = *(int *)(v1035 + 32);
            uint64_t v583 = &v567[v582];
            uint64_t v584 = &v568[v582];
            *uint64_t v583 = *v584;
            v583[1] = v584[1];
            uint64_t v585 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
            swift_bridgeObjectRetain();
            v585(v567, 0, 1, v1035);
            uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
          }
          uint64_t v586 = v335[18];
          v587 = (char *)v7 + v586;
          v588 = (char *)v8 + v586;
          if (v991((char *)v8 + v586, 1, v1021))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v587, v588, *(void *)(*(void *)(v589 - 8) + 64));
          }
          else
          {
            uint64_t v590 = v1035;
            if (v339(v588, 1, v1035))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v587, v588, *(void *)(*(void *)(v591 - 8) + 64));
            }
            else
            {
              unsigned char *v587 = *v588;
              uint64_t v592 = *((void *)v588 + 1);
              *((_DWORD *)v587 + 4) = *((_DWORD *)v588 + 4);
              *((void *)v587 + 1) = v592;
              uint64_t v593 = v4;
              if (*((void *)v588 + 7) == 1)
              {
                long long v594 = *(_OWORD *)(v588 + 24);
                long long v595 = *(_OWORD *)(v588 + 40);
                *((void *)v587 + 7) = *((void *)v588 + 7);
                *(_OWORD *)(v587 + 24) = v594;
                *(_OWORD *)(v587 + 40) = v595;
              }
              else
              {
                v587[24] = v588[24];
                v587[25] = v588[25];
                v587[26] = v588[26];
                long long v596 = *(_OWORD *)(v588 + 28);
                *((_DWORD *)v587 + 11) = *((_DWORD *)v588 + 11);
                *(_OWORD *)(v587 + 28) = v596;
                *((void *)v587 + 6) = *((void *)v588 + 6);
                *((void *)v587 + 7) = *((void *)v588 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v597 = *(int *)(v1035 + 28);
              v598 = &v587[v597];
              v599 = &v588[v597];
              uint64_t v600 = sub_23309B300();
              uint64_t v601 = *(void *)(v600 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v601 + 48))(v599, 1, v600))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v598, v599, *(void *)(*(void *)(v602 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v601 + 16))(v598, v599, v600);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v601 + 56))(v598, 0, 1, v600);
              }
              unint64_t v4 = v593;
              uint64_t v590 = v1035;
              uint64_t v603 = *(int *)(v1035 + 32);
              uint64_t v604 = &v587[v603];
              uint64_t v605 = &v588[v603];
              *uint64_t v604 = *v605;
              v604[1] = v605[1];
              v606 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
              swift_bridgeObjectRetain();
              v606(v587, 0, 1, v1035);
              uint64_t v10 = v1093;
              uint64_t v335 = v1053;
              uint64_t v339 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstg;
            }
            uint64_t v607 = v1021[5];
            v608 = &v587[v607];
            v609 = &v588[v607];
            if (v339(v609, 1, v590))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v608, v609, *(void *)(*(void *)(v610 - 8) + 64));
              uint64_t v9 = v1109;
              v611 = v1021;
            }
            else
            {
              unsigned char *v608 = *v609;
              uint64_t v612 = *((void *)v609 + 1);
              *((_DWORD *)v608 + 4) = *((_DWORD *)v609 + 4);
              *((void *)v608 + 1) = v612;
              v1087 = v4;
              if (*((void *)v609 + 7) == 1)
              {
                long long v613 = *(_OWORD *)(v609 + 24);
                long long v614 = *(_OWORD *)(v609 + 40);
                *((void *)v608 + 7) = *((void *)v609 + 7);
                *(_OWORD *)(v608 + 24) = v613;
                *(_OWORD *)(v608 + 40) = v614;
              }
              else
              {
                v608[24] = v609[24];
                v608[25] = v609[25];
                v608[26] = v609[26];
                long long v615 = *(_OWORD *)(v609 + 28);
                *((_DWORD *)v608 + 11) = *((_DWORD *)v609 + 11);
                *(_OWORD *)(v608 + 28) = v615;
                *((void *)v608 + 6) = *((void *)v609 + 6);
                *((void *)v608 + 7) = *((void *)v609 + 7);
                swift_bridgeObjectRetain();
              }
              v611 = v1021;
              uint64_t v616 = *(int *)(v1035 + 28);
              v617 = &v608[v616];
              v618 = &v609[v616];
              uint64_t v619 = sub_23309B300();
              uint64_t v620 = *(void *)(v619 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v620 + 48))(v618, 1, v619))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v617, v618, *(void *)(*(void *)(v621 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v620 + 16))(v617, v618, v619);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v620 + 56))(v617, 0, 1, v619);
              }
              unint64_t v4 = v1087;
              uint64_t v622 = *(int *)(v1035 + 32);
              v623 = &v608[v622];
              v624 = &v609[v622];
              void *v623 = *v624;
              v623[1] = v624[1];
              v625 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v996 + 56);
              swift_bridgeObjectRetain();
              v625(v608, 0, 1, v1035);
              uint64_t v9 = v1109;
              uint64_t v10 = v1093;
              uint64_t v335 = v1053;
            }
            (*(void (**)(unsigned char *, void, uint64_t, int *))(v987 + 56))(v587, 0, 1, v611);
          }
          uint64_t v5 = v1066;
          uint64_t v626 = v335[19];
          v627 = (void *)((char *)v7 + v626);
          v628 = (void *)((char *)v8 + v626);
          void *v627 = *v628;
          v627[1] = v628[1];
          uint64_t v629 = v335[20];
          v630 = (void *)((char *)v7 + v629);
          v631 = (void *)((char *)v8 + v629);
          void *v630 = *v631;
          v630[1] = v631[1];
          uint64_t v632 = v335[21];
          v633 = (void *)((char *)v7 + v632);
          v634 = (void *)((char *)v8 + v632);
          void *v633 = *v634;
          v633[1] = v634[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          a3 = v1101;
          goto LABEL_302;
        case 2u:
          uint64_t v1102 = a3;
          uint64_t v1110 = v9;
          v1067 = v5;
          v1077 = v4;
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          v7[4] = v8[4];
          v7[5] = v8[5];
          v7[6] = v8[6];
          v7[7] = v8[7];
          v7[8] = v8[8];
          v7[9] = v8[9];
          v7[10] = v8[10];
          uint64_t v1027 = type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
          uint64_t v23 = *(int *)(v1027 + 36);
          __dst = (char *)v7 + v23;
          v1064 = v8;
          uint64_t v24 = (char *)v8 + v23;
          uint64_t v25 = type metadata accessor for FHIRDateTime();
          v1013 = *(void **)(v25 - 8);
          uint64_t v26 = (unsigned int (*)(void, void, void))v1013[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1054 = (int *)v25;
          if (v26(v24, 1, v25))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
            uint64_t v28 = v1027;
          }
          else
          {
            unsigned char *__dst = *v24;
            uint64_t v87 = *((void *)v24 + 1);
            *((_DWORD *)__dst + 4) = *((_DWORD *)v24 + 4);
            *((void *)__dst + 1) = v87;
            if (*((void *)v24 + 7) == 1)
            {
              long long v88 = *(_OWORD *)(v24 + 24);
              long long v89 = *(_OWORD *)(v24 + 40);
              *((void *)__dst + 7) = *((void *)v24 + 7);
              *(_OWORD *)(__dst + 24) = v88;
              *(_OWORD *)(__dst + 40) = v89;
            }
            else
            {
              __dst[24] = v24[24];
              __dst[25] = v24[25];
              __dst[26] = v24[26];
              long long v104 = *(_OWORD *)(v24 + 28);
              *((_DWORD *)__dst + 11) = *((_DWORD *)v24 + 11);
              *(_OWORD *)(__dst + 28) = v104;
              *((void *)__dst + 6) = *((void *)v24 + 6);
              *((void *)__dst + 7) = *((void *)v24 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v105 = *(int *)(v25 + 28);
            uint64_t v106 = &__dst[v105];
            uint64_t v107 = &v24[v105];
            uint64_t v108 = sub_23309B300();
            uint64_t v109 = *(void *)(v108 - 8);
            v993 = v26;
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v109 + 16))(v106, v107, v108);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
            }
            uint64_t v10 = v1093;
            uint64_t v143 = v1054[8];
            uint64_t v144 = &__dst[v143];
            uint64_t v145 = &v24[v143];
            *uint64_t v144 = *v145;
            v144[1] = v145[1];
            uint64_t v146 = (void (*)(unsigned char *, void, uint64_t, int *))v1013[7];
            swift_bridgeObjectRetain();
            v146(__dst, 0, 1, v1054);
            uint64_t v28 = v1027;
            uint64_t v26 = v993;
          }
          uint64_t v147 = *(int *)(v28 + 40);
          uint64_t v148 = (char *)v7 + v147;
          uint64_t v149 = (char *)v8 + v147;
          uint64_t v150 = type metadata accessor for Period();
          uint64_t v151 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v150 - 8);
          if (v151[6](v149, 1, v150))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
            unint64_t v4 = v1077;
          }
          else
          {
            v1044 = v151;
            if (v26(v149, 1, v1054))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v148, v149, *(void *)(*(void *)(v153 - 8) + 64));
              uint64_t v154 = v1054;
            }
            else
            {
              *uint64_t v148 = *v149;
              uint64_t v195 = *((void *)v149 + 1);
              *((_DWORD *)v148 + 4) = *((_DWORD *)v149 + 4);
              *((void *)v148 + 1) = v195;
              v994 = v26;
              if (*((void *)v149 + 7) == 1)
              {
                long long v196 = *(_OWORD *)(v149 + 24);
                long long v197 = *(_OWORD *)(v149 + 40);
                *((void *)v148 + 7) = *((void *)v149 + 7);
                *(_OWORD *)(v148 + 24) = v196;
                *(_OWORD *)(v148 + 40) = v197;
              }
              else
              {
                v148[24] = v149[24];
                v148[25] = v149[25];
                v148[26] = v149[26];
                long long v229 = *(_OWORD *)(v149 + 28);
                *((_DWORD *)v148 + 11) = *((_DWORD *)v149 + 11);
                *(_OWORD *)(v148 + 28) = v229;
                *((void *)v148 + 6) = *((void *)v149 + 6);
                *((void *)v148 + 7) = *((void *)v149 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v230 = v1054[7];
              uint64_t v231 = &v148[v230];
              uint64_t v232 = &v149[v230];
              uint64_t v233 = sub_23309B300();
              uint64_t v234 = *(void *)(v233 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v231, v232, *(void *)(*(void *)(v235 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v234 + 16))(v231, v232, v233);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v234 + 56))(v231, 0, 1, v233);
              }
              uint64_t v10 = v1093;
              uint64_t v154 = v1054;
              uint64_t v385 = v1054[8];
              uint64_t v386 = &v148[v385];
              long long v387 = &v149[v385];
              *uint64_t v386 = *v387;
              v386[1] = v387[1];
              uint64_t v388 = (void (*)(unsigned char *, void, uint64_t, int *))v1013[7];
              swift_bridgeObjectRetain();
              v388(v148, 0, 1, v1054);
              uint64_t v26 = v994;
            }
            uint64_t v389 = *(int *)(v150 + 20);
            uint64_t v390 = &v148[v389];
            uint64_t v391 = &v149[v389];
            if (v26(v391, 1, v154))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v390, v391, *(void *)(*(void *)(v392 - 8) + 64));
              unint64_t v4 = v1077;
              uint64_t v28 = v1027;
              uint64_t v393 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v1044;
            }
            else
            {
              *uint64_t v390 = *v391;
              uint64_t v394 = *((void *)v391 + 1);
              *((_DWORD *)v390 + 4) = *((_DWORD *)v391 + 4);
              *((void *)v390 + 1) = v394;
              v997 = v26;
              if (*((void *)v391 + 7) == 1)
              {
                long long v395 = *(_OWORD *)(v391 + 24);
                long long v396 = *(_OWORD *)(v391 + 40);
                *((void *)v390 + 7) = *((void *)v391 + 7);
                *(_OWORD *)(v390 + 24) = v395;
                *(_OWORD *)(v390 + 40) = v396;
              }
              else
              {
                v390[24] = v391[24];
                v390[25] = v391[25];
                v390[26] = v391[26];
                long long v397 = *(_OWORD *)(v391 + 28);
                *((_DWORD *)v390 + 11) = *((_DWORD *)v391 + 11);
                *(_OWORD *)(v390 + 28) = v397;
                *((void *)v390 + 6) = *((void *)v391 + 6);
                *((void *)v390 + 7) = *((void *)v391 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v398 = v1054[7];
              uint64_t v399 = &v390[v398];
              uint64_t v400 = &v391[v398];
              uint64_t v401 = sub_23309B300();
              uint64_t v402 = *(void *)(v401 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v402 + 48))(v400, 1, v401))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v399, v400, *(void *)(*(void *)(v403 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v402 + 16))(v399, v400, v401);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v402 + 56))(v399, 0, 1, v401);
              }
              uint64_t v10 = v1093;
              uint64_t v475 = v1054[8];
              uint64_t v476 = &v390[v475];
              uint64_t v477 = &v391[v475];
              *uint64_t v476 = *v477;
              v476[1] = v477[1];
              uint64_t v478 = (void (*)(unsigned char *, void, uint64_t, int *))v1013[7];
              swift_bridgeObjectRetain();
              v478(v390, 0, 1, v1054);
              unint64_t v4 = v1077;
              a3 = v1102;
              uint64_t v28 = v1027;
              uint64_t v393 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v1044;
              uint64_t v26 = v997;
            }
            v393[7](v148, 0, 1, v150);
          }
          uint64_t v9 = v1110;
          uint64_t v479 = *(int *)(v28 + 44);
          uint64_t v480 = (char *)v7 + v479;
          v481 = (char *)v1064 + v479;
          if (v26((char *)v1064 + v479, 1, v1054))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v480, v481, *(void *)(*(void *)(v482 - 8) + 64));
            uint64_t v483 = v1064;
            uint64_t v5 = v1067;
          }
          else
          {
            *uint64_t v480 = *v481;
            uint64_t v484 = *((void *)v481 + 1);
            *((_DWORD *)v480 + 4) = *((_DWORD *)v481 + 4);
            *((void *)v480 + 1) = v484;
            if (*((void *)v481 + 7) == 1)
            {
              long long v485 = *(_OWORD *)(v481 + 24);
              long long v486 = *(_OWORD *)(v481 + 40);
              *((void *)v480 + 7) = *((void *)v481 + 7);
              *(_OWORD *)(v480 + 24) = v485;
              *(_OWORD *)(v480 + 40) = v486;
            }
            else
            {
              v480[24] = v481[24];
              v480[25] = v481[25];
              v480[26] = v481[26];
              long long v487 = *(_OWORD *)(v481 + 28);
              *((_DWORD *)v480 + 11) = *((_DWORD *)v481 + 11);
              *(_OWORD *)(v480 + 28) = v487;
              *((void *)v480 + 6) = *((void *)v481 + 6);
              *((void *)v480 + 7) = *((void *)v481 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v483 = v1064;
            uint64_t v488 = v1054[7];
            uint64_t v489 = &v480[v488];
            long long v490 = &v481[v488];
            uint64_t v491 = sub_23309B300();
            uint64_t v492 = *(void *)(v491 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v492 + 48))(v490, 1, v491))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v489, v490, *(void *)(*(void *)(v493 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v492 + 16))(v489, v490, v491);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v492 + 56))(v489, 0, 1, v491);
            }
            unint64_t v4 = v1077;
            uint64_t v9 = v1110;
            uint64_t v10 = v1093;
            uint64_t v494 = v1054[8];
            uint64_t v495 = &v480[v494];
            uint64_t v496 = &v481[v494];
            void *v495 = *v496;
            v495[1] = v496[1];
            uint64_t v497 = (void (*)(unsigned char *, void, uint64_t, int *))v1013[7];
            swift_bridgeObjectRetain();
            v497(v480, 0, 1, v1054);
            uint64_t v5 = v1067;
          }
          uint64_t v498 = *(int *)(v1027 + 48);
          uint64_t v499 = (void *)((char *)v7 + v498);
          uint64_t v500 = (void *)((char *)v483 + v498);
          void *v499 = *v500;
          v499[1] = v500[1];
          goto LABEL_302;
        case 3u:
          uint64_t v1103 = a3;
          uint64_t v1111 = v9;
          v1068 = v5;
          v1078 = v4;
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          uint64_t v29 = v8[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v29 != 1) {
            swift_bridgeObjectRetain();
          }
          v7[4] = v29;
          v7[5] = v8[5];
          v7[6] = v8[6];
          uint64_t v30 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
          uint64_t v31 = v30[8];
          uint64_t v32 = (char *)v7 + v31;
          uint64_t v33 = (char *)v8 + v31;
          uint64_t v34 = type metadata accessor for FHIRDateTime();
          uint64_t v35 = *(void *)(v34 - 8);
          uint64_t v36 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v35 + 48);
          swift_bridgeObjectRetain();
          if (v36(v33, 1, v34))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
          }
          else
          {
            *uint64_t v32 = *v33;
            uint64_t v90 = *((void *)v33 + 1);
            *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
            *((void *)v32 + 1) = v90;
            if (*((void *)v33 + 7) == 1)
            {
              long long v91 = *(_OWORD *)(v33 + 24);
              long long v92 = *(_OWORD *)(v33 + 40);
              *((void *)v32 + 7) = *((void *)v33 + 7);
              *(_OWORD *)(v32 + 24) = v91;
              *(_OWORD *)(v32 + 40) = v92;
            }
            else
            {
              v32[24] = v33[24];
              v32[25] = v33[25];
              v32[26] = v33[26];
              long long v111 = *(_OWORD *)(v33 + 28);
              *((_DWORD *)v32 + 11) = *((_DWORD *)v33 + 11);
              *(_OWORD *)(v32 + 28) = v111;
              *((void *)v32 + 6) = *((void *)v33 + 6);
              *((void *)v32 + 7) = *((void *)v33 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v112 = *(int *)(v34 + 28);
            v1031 = &v32[v112];
            uint64_t v113 = &v33[v112];
            uint64_t v114 = sub_23309B300();
            uint64_t v115 = *(void *)(v114 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1031, v113, *(void *)(*(void *)(v116 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v115 + 16))(v1031, v113, v114);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v115 + 56))(v1031, 0, 1, v114);
            }
            uint64_t v155 = *(int *)(v34 + 32);
            uint64_t v156 = &v32[v155];
            uint64_t v157 = &v33[v155];
            *uint64_t v156 = *v157;
            v156[1] = v157[1];
            uint64_t v158 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v35 + 56);
            swift_bridgeObjectRetain();
            v158(v32, 0, 1, v34);
          }
          uint64_t v159 = v30[9];
          uint64_t v160 = (void *)((char *)v7 + v159);
          uint64_t v161 = (void *)((char *)v8 + v159);
          uint64_t v162 = *v161;
          *(void *)((char *)v160 + 5) = *(uint64_t *)((char *)v161 + 5);
          *uint64_t v160 = v162;
          *(void *)((char *)v7 + v30[10]) = *(void *)((char *)v8 + v30[10]);
          *((unsigned char *)v7 + v30[11]) = *((unsigned char *)v8 + v30[11]);
          *(void *)((char *)v7 + v30[12]) = *(void *)((char *)v8 + v30[12]);
          uint64_t v163 = v30[13];
          uint64_t v164 = (void *)((char *)v7 + v163);
          uint64_t v165 = (void *)((char *)v8 + v163);
          *uint64_t v164 = *v165;
          v164[1] = v165[1];
          v164[2] = v165[2];
          *((unsigned char *)v7 + v30[14]) = *((unsigned char *)v8 + v30[14]);
          v1059 = v30;
          uint64_t v166 = v30[15];
          uint64_t v167 = (void *)((char *)v7 + v166);
          uint64_t v168 = (void *)((char *)v8 + v166);
          uint64_t v169 = type metadata accessor for Reference();
          v1045 = *(void **)(v169 - 8);
          uint64_t v170 = (unsigned int (*)(void *, uint64_t, uint64_t))v1045[6];
          uint64_t v171 = v169;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v170(v168, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v167, v168, *(void *)(*(void *)(v172 - 8) + 64));
            a3 = v1103;
            uint64_t v9 = v1111;
            uint64_t v173 = v1059;
          }
          else
          {
            *uint64_t v167 = *v168;
            v167[1] = v168[1];
            v167[2] = v168[2];
            v167[3] = v168[3];
            uint64_t v1032 = v171;
            uint64_t v174 = *(int *)(v171 + 24);
            v1017 = (void *)((char *)v167 + v174);
            uint64_t v175 = (void *)((char *)v168 + v174);
            uint64_t v176 = type metadata accessor for Identifier();
            uint64_t v177 = *(void *)(v176 - 8);
            long long v178 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v177 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v179 = v167;
            if (v178(v175, 1, v176))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v1017, v175, *(void *)(*(void *)(v180 - 8) + 64));
              a3 = v1103;
              uint64_t v9 = v1111;
              uint64_t v173 = v1059;
            }
            else
            {
              uint64_t v988 = v177;
              v990 = v167;
              void *v1017 = *v175;
              v1017[1] = v175[1];
              uint64_t v198 = v175[3];
              swift_bridgeObjectRetain();
              if (v198 == 1)
              {
                long long v199 = *((_OWORD *)v175 + 1);
                v1017[4] = v175[4];
                *((_OWORD *)v1017 + 1) = v199;
              }
              else
              {
                v1017[2] = v175[2];
                v1017[3] = v175[3];
                v1017[4] = v175[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              a3 = v1103;
              uint64_t v236 = (char *)v175;
              uint64_t v237 = *(int *)(v176 + 24);
              uint64_t v238 = (char *)v1017 + v237;
              __dste = v236;
              uint64_t v239 = &v236[v237];
              uint64_t v240 = sub_23309AF80();
              uint64_t v241 = *(void *)(v240 - 8);
              long long v242 = v239;
              int v243 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v240);
              uint64_t v173 = v1059;
              if (v243)
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v238, v242, *(void *)(*(void *)(v244 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v238, v242, v240);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v241 + 56))(v238, 0, 1, v240);
              }
              uint64_t v404 = *(int *)(v176 + 28);
              uint64_t v405 = (void *)((char *)v1017 + v404);
              uint64_t v406 = &__dste[v404];
              void *v405 = *(void *)v406;
              v405[1] = *((void *)v406 + 1);
              uint64_t v407 = *(void (**)(void *, void, uint64_t, uint64_t))(v988 + 56);
              swift_bridgeObjectRetain();
              v407(v1017, 0, 1, v176);
              uint64_t v9 = v1111;
              uint64_t v171 = v1032;
              uint64_t v179 = v990;
            }
            ((void (*)(void *, void, uint64_t, uint64_t))v1045[7])(v179, 0, 1, v171);
          }
          uint64_t v408 = v173[16];
          long long v409 = (void *)((char *)v7 + v408);
          uint64_t v410 = (void *)((char *)v8 + v408);
          *long long v409 = *v410;
          v409[1] = v410[1];
          uint64_t v411 = v173[17];
          uint64_t v412 = (void *)((char *)v7 + v411);
          uint64_t v413 = (void *)((char *)v8 + v411);
          swift_bridgeObjectRetain();
          if (v170(v413, 1, v171))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v412, v413, *(void *)(*(void *)(v414 - 8) + 64));
            uint64_t v5 = v1068;
            uint64_t v10 = v1093;
          }
          else
          {
            *uint64_t v412 = *v413;
            v412[1] = v413[1];
            v412[2] = v413[2];
            v412[3] = v413[3];
            uint64_t v1037 = v171;
            uint64_t v415 = *(int *)(v171 + 24);
            v1023 = (void *)((char *)v412 + v415);
            uint64_t v416 = (void *)((char *)v413 + v415);
            uint64_t v417 = type metadata accessor for Identifier();
            uint64_t v418 = *(void **)(v417 - 8);
            uint64_t v419 = (unsigned int (*)(void *, uint64_t, uint64_t))v418[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v419(v416, 1, v417))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v1023, v416, *(void *)(*(void *)(v420 - 8) + 64));
              a3 = v1103;
              uint64_t v9 = v1111;
              uint64_t v10 = v1093;
            }
            else
            {
              __dsth = v418;
              void *v1023 = *v416;
              v1023[1] = v416[1];
              uint64_t v421 = v416[3];
              swift_bridgeObjectRetain();
              if (v421 == 1)
              {
                long long v422 = *((_OWORD *)v416 + 1);
                v1023[4] = v416[4];
                *((_OWORD *)v1023 + 1) = v422;
              }
              else
              {
                v1023[2] = v416[2];
                v1023[3] = v416[3];
                v1023[4] = v416[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v10 = v1093;
              uint64_t v423 = v417;
              uint64_t v424 = *(int *)(v417 + 24);
              v1098 = (char *)v1023 + v424;
              uint64_t v425 = (char *)v416 + v424;
              uint64_t v426 = sub_23309AF80();
              uint64_t v427 = *(void *)(v426 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v427 + 48))(v425, 1, v426))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v1098, v425, *(void *)(*(void *)(v428 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v427 + 16))(v1098, v425, v426);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v427 + 56))(v1098, 0, 1, v426);
              }
              uint64_t v501 = *(int *)(v423 + 28);
              uint64_t v502 = (void *)((char *)v1023 + v501);
              uint64_t v503 = (void *)((char *)v416 + v501);
              *uint64_t v502 = *v503;
              v502[1] = v503[1];
              uint64_t v504 = (void (*)(void *, void, uint64_t, uint64_t))__dsth[7];
              swift_bridgeObjectRetain();
              v504(v1023, 0, 1, v423);
              a3 = v1103;
              uint64_t v9 = v1111;
            }
            uint64_t v173 = v1059;
            ((void (*)(void *, void, uint64_t, uint64_t))v1045[7])(v412, 0, 1, v1037);
            uint64_t v5 = v1068;
          }
          uint64_t v505 = v173[18];
          uint64_t v506 = (void *)((char *)v7 + v505);
          long long v507 = (void *)((char *)v8 + v505);
          *uint64_t v506 = *v507;
          v506[1] = v507[1];
          unint64_t v4 = v1078;
          goto LABEL_302;
        case 4u:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          uint64_t v38 = v8[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38 != 1) {
            swift_bridgeObjectRetain();
          }
          v7[4] = v38;
          v7[5] = v8[5];
          v7[6] = v8[6];
          uint64_t v39 = v8[8];
          swift_bridgeObjectRetain();
          v1069 = v5;
          uint64_t v1104 = a3;
          if (v39 == 1)
          {
            long long v40 = *(_OWORD *)(v8 + 7);
            v7[9] = v8[9];
            *(_OWORD *)(v7 + 7) = v40;
          }
          else
          {
            v7[7] = v8[7];
            v7[8] = v8[8];
            v7[9] = v8[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          v7[10] = v8[10];
          v7[11] = v8[11];
          v7[12] = v8[12];
          v7[13] = v8[13];
          v7[14] = v8[14];
          uint64_t v44 = type metadata accessor for ModelsDSTU2.Observation(0);
          uint64_t v45 = v8;
          uint64_t v46 = (int *)v44;
          uint64_t v47 = *(int *)(v44 + 44);
          v1014 = (char *)v7 + v47;
          v1065 = v45;
          uint64_t v48 = (char *)v45 + v47;
          uint64_t v49 = type metadata accessor for FHIRDateTime();
          uint64_t v1028 = *(void *)(v49 - 8);
          uint64_t v50 = *(unsigned int (**)(void, void, void))(v1028 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1055 = v46;
          uint64_t v1112 = v9;
          if (v50(v48, 1, v49))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v1014, v48, *(void *)(*(void *)(v51 - 8) + 64));
            uint64_t v52 = v1065;
          }
          else
          {
            unsigned char *v1014 = *v48;
            uint64_t v93 = *((void *)v48 + 1);
            *((_DWORD *)v1014 + 4) = *((_DWORD *)v48 + 4);
            *((void *)v1014 + 1) = v93;
            __dstb = v50;
            uint64_t v94 = v4;
            if (*((void *)v48 + 7) == 1)
            {
              long long v95 = *(_OWORD *)(v48 + 24);
              long long v96 = *(_OWORD *)(v48 + 40);
              *((void *)v1014 + 7) = *((void *)v48 + 7);
              *(_OWORD *)(v1014 + 24) = v95;
              *(_OWORD *)(v1014 + 40) = v96;
            }
            else
            {
              v1014[24] = v48[24];
              v1014[25] = v48[25];
              v1014[26] = v48[26];
              long long v117 = *(_OWORD *)(v48 + 28);
              *((_DWORD *)v1014 + 11) = *((_DWORD *)v48 + 11);
              *(_OWORD *)(v1014 + 28) = v117;
              *((void *)v1014 + 6) = *((void *)v48 + 6);
              *((void *)v1014 + 7) = *((void *)v48 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v118 = *(int *)(v49 + 28);
            uint64_t v119 = &v1014[v118];
            uint64_t v120 = &v48[v118];
            uint64_t v121 = sub_23309B300();
            uint64_t v122 = *(void *)(v121 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v122 + 16))(v119, v120, v121);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
            }
            unint64_t v4 = v94;
            uint64_t v9 = v1112;
            uint64_t v181 = *(int *)(v49 + 32);
            uint64_t v182 = &v1014[v181];
            uint64_t v183 = &v48[v181];
            *uint64_t v182 = *v183;
            v182[1] = v183[1];
            uint64_t v184 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v1028 + 56);
            swift_bridgeObjectRetain();
            v184(v1014, 0, 1, v49);
            uint64_t v50 = (unsigned int (*)(void, void, void))__dstb;
            uint64_t v52 = v1065;
          }
          uint64_t v185 = v46[12];
          uint64_t v186 = (char *)v7 + v185;
          uint64_t v187 = (char *)v52 + v185;
          uint64_t v188 = type metadata accessor for Period();
          uint64_t v189 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v188 - 8);
          if (v189[6](v187, 1, v188))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v186, v187, *(void *)(*(void *)(v190 - 8) + 64));
            uint64_t v191 = v1065;
          }
          else
          {
            v1018 = v189;
            v1046 = (void *)v188;
            if (v50(v187, 1, v49))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              uint64_t v193 = v186;
              memcpy(v186, v187, *(void *)(*(void *)(v192 - 8) + 64));
              uint64_t v194 = v188;
              uint64_t v191 = v1065;
            }
            else
            {
              uint64_t v193 = v186;
              *uint64_t v186 = *v187;
              uint64_t v200 = *((void *)v187 + 1);
              *((_DWORD *)v186 + 4) = *((_DWORD *)v187 + 4);
              *((void *)v186 + 1) = v200;
              v1083 = v4;
              __dstd = v50;
              if (*((void *)v187 + 7) == 1)
              {
                long long v201 = *(_OWORD *)(v187 + 24);
                long long v202 = *(_OWORD *)(v187 + 40);
                *((void *)v186 + 7) = *((void *)v187 + 7);
                *(_OWORD *)(v186 + 24) = v201;
                *(_OWORD *)(v186 + 40) = v202;
              }
              else
              {
                v186[24] = v187[24];
                v186[25] = v187[25];
                v186[26] = v187[26];
                long long v245 = *(_OWORD *)(v187 + 28);
                *((_DWORD *)v186 + 11) = *((_DWORD *)v187 + 11);
                *(_OWORD *)(v186 + 28) = v245;
                *((void *)v186 + 6) = *((void *)v187 + 6);
                *((void *)v186 + 7) = *((void *)v187 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v191 = v1065;
              uint64_t v246 = *(int *)(v49 + 28);
              uint64_t v247 = &v193[v246];
              uint64_t v248 = &v187[v246];
              uint64_t v249 = sub_23309B300();
              uint64_t v250 = *(void *)(v249 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v247, v248, *(void *)(*(void *)(v251 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v250 + 16))(v247, v248, v249);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
              }
              uint64_t v429 = *(int *)(v49 + 32);
              uint64_t v430 = &v193[v429];
              unint64_t v431 = &v187[v429];
              *uint64_t v430 = *v431;
              v430[1] = v431[1];
              uint64_t v432 = v49;
              uint64_t v433 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v1028 + 56);
              swift_bridgeObjectRetain();
              v433(v193, 0, 1, v432);
              uint64_t v49 = v432;
              unint64_t v4 = v1083;
              uint64_t v50 = (unsigned int (*)(void, void, void))__dstd;
              uint64_t v194 = v188;
            }
            uint64_t v434 = *(int *)(v194 + 20);
            uint64_t v435 = &v193[v434];
            uint64_t v436 = &v187[v434];
            if (v50(v436, 1, v49))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v435, v436, *(void *)(*(void *)(v437 - 8) + 64));
              uint64_t v9 = v1112;
            }
            else
            {
              *uint64_t v435 = *v436;
              uint64_t v438 = *((void *)v436 + 1);
              *((_DWORD *)v435 + 4) = *((_DWORD *)v436 + 4);
              *((void *)v435 + 1) = v438;
              v1084 = v4;
              __dstunint64_t i = v50;
              if (*((void *)v436 + 7) == 1)
              {
                long long v439 = *(_OWORD *)(v436 + 24);
                long long v440 = *(_OWORD *)(v436 + 40);
                *((void *)v435 + 7) = *((void *)v436 + 7);
                *(_OWORD *)(v435 + 24) = v439;
                *(_OWORD *)(v435 + 40) = v440;
              }
              else
              {
                v435[24] = v436[24];
                v435[25] = v436[25];
                v435[26] = v436[26];
                long long v441 = *(_OWORD *)(v436 + 28);
                *((_DWORD *)v435 + 11) = *((_DWORD *)v436 + 11);
                *(_OWORD *)(v435 + 28) = v441;
                *((void *)v435 + 6) = *((void *)v436 + 6);
                *((void *)v435 + 7) = *((void *)v436 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v442 = *(int *)(v49 + 28);
              uint64_t v443 = &v435[v442];
              uint64_t v444 = &v436[v442];
              uint64_t v445 = sub_23309B300();
              uint64_t v446 = *(void *)(v445 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v446 + 48))(v444, 1, v445))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v443, v444, *(void *)(*(void *)(v447 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v446 + 16))(v443, v444, v445);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v446 + 56))(v443, 0, 1, v445);
              }
              uint64_t v508 = *(int *)(v49 + 32);
              uint64_t v509 = &v435[v508];
              uint64_t v510 = &v436[v508];
              *uint64_t v509 = *v510;
              v509[1] = v510[1];
              uint64_t v511 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v1028 + 56);
              swift_bridgeObjectRetain();
              v511(v435, 0, 1, v49);
              unint64_t v4 = v1084;
              uint64_t v9 = v1112;
              uint64_t v50 = (unsigned int (*)(void, void, void))__dsti;
            }
            (*((void (**)(unsigned char *, void, uint64_t, void *))v1018 + 7))(v193, 0, 1, v1046);
          }
          uint64_t v512 = v1055[13];
          uint64_t v513 = (char *)v7 + v512;
          uint64_t v514 = (char *)v191 + v512;
          if (v50((char *)v191 + v512, 1, v49))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v513, v514, *(void *)(*(void *)(v515 - 8) + 64));
          }
          else
          {
            unsigned char *v513 = *v514;
            uint64_t v516 = *((void *)v514 + 1);
            *((_DWORD *)v513 + 4) = *((_DWORD *)v514 + 4);
            *((void *)v513 + 1) = v516;
            uint64_t v517 = v49;
            v518 = v4;
            if (*((void *)v514 + 7) == 1)
            {
              long long v519 = *(_OWORD *)(v514 + 24);
              long long v520 = *(_OWORD *)(v514 + 40);
              *((void *)v513 + 7) = *((void *)v514 + 7);
              *(_OWORD *)(v513 + 24) = v519;
              *(_OWORD *)(v513 + 40) = v520;
            }
            else
            {
              v513[24] = v514[24];
              v513[25] = v514[25];
              v513[26] = v514[26];
              long long v521 = *(_OWORD *)(v514 + 28);
              *((_DWORD *)v513 + 11) = *((_DWORD *)v514 + 11);
              *(_OWORD *)(v513 + 28) = v521;
              *((void *)v513 + 6) = *((void *)v514 + 6);
              *((void *)v513 + 7) = *((void *)v514 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v522 = *(int *)(v517 + 28);
            uint64_t v523 = &v513[v522];
            v524 = &v514[v522];
            uint64_t v525 = sub_23309B300();
            uint64_t v526 = *(void *)(v525 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v526 + 48))(v524, 1, v525))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v523, v524, *(void *)(*(void *)(v527 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v526 + 16))(v523, v524, v525);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v526 + 56))(v523, 0, 1, v525);
            }
            unint64_t v4 = v518;
            uint64_t v9 = v1112;
            uint64_t v528 = *(int *)(v517 + 32);
            v529 = &v513[v528];
            uint64_t v530 = &v514[v528];
            void *v529 = *v530;
            v529[1] = v530[1];
            uint64_t v531 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v1028 + 56);
            swift_bridgeObjectRetain();
            v531(v513, 0, 1, v517);
          }
          *(void *)((char *)v7 + v1055[14]) = *(void *)((char *)v191 + v1055[14]);
          uint64_t v532 = v1055[15];
          uint64_t v533 = (void *)((char *)v7 + v532);
          uint64_t v534 = (void *)((char *)v191 + v532);
          void *v533 = *v534;
          v533[1] = v534[1];
          uint64_t v535 = v1055[16];
          v536 = (char *)v7 + v535;
          v537 = (long long *)((char *)v191 + v535);
          uint64_t v538 = *(void *)((char *)v191 + v535 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v538 == 1)
          {
            long long v539 = *v537;
            *((void *)v536 + 2) = *((void *)v537 + 2);
            *(_OWORD *)v536 = v539;
          }
          else
          {
            *(void *)v536 = *(void *)v537;
            *((void *)v536 + 1) = *((void *)v537 + 1);
            *((void *)v536 + 2) = *((void *)v537 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          a3 = v1104;
          uint64_t v540 = v1055[17];
          v541 = (void *)((char *)v7 + v540);
          v542 = (void *)((char *)v191 + v540);
          uint64_t v543 = type metadata accessor for Quantity();
          uint64_t v544 = *(void *)(v543 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v544 + 48))(v542, 1, v543))
          {
            sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v541, v542, *(void *)(*(void *)(v545 - 8) + 64));
          }
          else
          {
            v1086 = v4;
            long long v546 = *(_OWORD *)v542;
            *(void *)((char *)v541 + 13) = *(void *)((char *)v542 + 13);
            *(_OWORD *)v541 = v546;
            v541[3] = v542[3];
            v541[4] = v542[4];
            v541[5] = v542[5];
            v541[6] = v542[6];
            uint64_t v547 = *(int *)(v543 + 28);
            v1024 = (char *)v541 + v547;
            uint64_t v548 = (char *)v542 + v547;
            uint64_t v549 = sub_23309AF80();
            uint64_t v550 = *(void *)(v549 - 8);
            v1048 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v550 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1048(v548, 1, v549))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v1024, v548, *(void *)(*(void *)(v551 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v550 + 16))(v1024, v548, v549);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v550 + 56))(v1024, 0, 1, v549);
            }
            unint64_t v4 = v1086;
            a3 = v1104;
            uint64_t v9 = v1112;
            uint64_t v191 = v1065;
            uint64_t v552 = *(int *)(v543 + 32);
            v553 = (void *)((char *)v541 + v552);
            v554 = (void *)((char *)v542 + v552);
            void *v553 = *v554;
            v553[1] = v554[1];
            v555 = *(void (**)(void *, void, uint64_t, uint64_t))(v544 + 56);
            swift_bridgeObjectRetain();
            v555(v541, 0, 1, v543);
          }
          uint64_t v5 = v1069;
          uint64_t v10 = v1093;
          *(void *)((char *)v7 + v1055[18]) = *(void *)((char *)v191 + v1055[18]);
          uint64_t v556 = v1055[19];
          v557 = (void *)((char *)v7 + v556);
          v558 = (void *)((char *)v191 + v556);
          void *v557 = *v558;
          v557[1] = v558[1];
          goto LABEL_267;
        case 5u:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          uint64_t v41 = v8[4];
          *(void *)((char *)v7 + 37) = *(void *)((char *)v8 + 37);
          v7[4] = v41;
          v7[6] = v8[6];
          v7[7] = v8[7];
          v7[8] = v8[8];
          v7[9] = v8[9];
          v7[10] = v8[10];
          v7[11] = v8[11];
          uint64_t v42 = v8[13];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v42 == 1)
          {
            long long v43 = *((_OWORD *)v8 + 6);
            v7[14] = v8[14];
            *((_OWORD *)v7 + 6) = v43;
          }
          else
          {
            v7[12] = v8[12];
            v7[13] = v8[13];
            v7[14] = v8[14];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v10 = v1093;
          v7[15] = v8[15];
          v7[16] = v8[16];
          v7[17] = v8[17];
          swift_bridgeObjectRetain();
          goto LABEL_302;
        case 6u:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          v7[4] = v8[4];
          v7[5] = v8[5];
          swift_bridgeObjectRetain();
          goto LABEL_267;
        default:
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          v7[2] = v8[2];
          v7[3] = v8[3];
          v7[4] = v8[4];
          swift_bridgeObjectRetain();
LABEL_267:
          swift_bridgeObjectRetain();
LABEL_302:
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          ((void (*)(void *, void, uint64_t, uint64_t))v10[7])(v7, 0, 1, v9);
          break;
      }
      goto LABEL_303;
    }
LABEL_7:
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_303;
  }
  if (v13)
  {
    sub_232F7CB8C((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    goto LABEL_7;
  }
  if (v5 != v4)
  {
    sub_232F7CB8C((uint64_t)v7, type metadata accessor for ModelsDSTU2.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v1079 = v4;
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v53 = v8[2];
        swift_bridgeObjectRetain();
        if (v53 != 1) {
          swift_bridgeObjectRetain();
        }
        v7[2] = v53;
        uint64_t v54 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v55 = v54[6];
        uint64_t v56 = (void *)((char *)v7 + v55);
        uint64_t v57 = (void *)((char *)v8 + v55);
        uint64_t v58 = type metadata accessor for Reference();
        uint64_t v59 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v58 - 8);
        __src = v54;
        uint64_t v1105 = a3;
        if (v59[6](v57, 1, v58))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
          unint64_t v4 = v1079;
        }
        else
        {
          v1042 = (void (**)(void *, void, uint64_t, uint64_t))v59;
          v1058 = v56;
          v1073 = v5;
          *uint64_t v56 = *v57;
          v56[1] = v57[1];
          v56[2] = v57[2];
          v56[3] = v57[3];
          uint64_t v124 = *(int *)(v58 + 24);
          v1096 = (void *)((char *)v56 + v124);
          uint64_t v125 = (void *)((char *)v57 + v124);
          uint64_t v126 = type metadata accessor for Identifier();
          uint64_t v127 = *(void **)(v126 - 8);
          uint64_t v128 = (unsigned int (*)(void *, uint64_t, uint64_t))v127[6];
          uint64_t v129 = v125;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v128(v125, 1, v126))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v1096, v125, *(void *)(*(void *)(v130 - 8) + 64));
            uint64_t v5 = v1073;
            uint64_t v131 = v1042;
          }
          else
          {
            __dstf = v127;
            void *v1096 = *v125;
            v1096[1] = v125[1];
            uint64_t v252 = v125[3];
            swift_bridgeObjectRetain();
            v1033 = v125;
            if (v252 == 1)
            {
              long long v253 = *((_OWORD *)v125 + 1);
              v1096[4] = v125[4];
              *((_OWORD *)v1096 + 1) = v253;
            }
            else
            {
              v1096[2] = v125[2];
              v1096[3] = v125[3];
              v1096[4] = v125[4];
              swift_bridgeObjectRetain();
              uint64_t v129 = v125;
              swift_bridgeObjectRetain();
            }
            uint64_t v131 = v1042;
            uint64_t v643 = *(int *)(v126 + 24);
            v644 = (char *)v1096 + v643;
            v645 = (char *)v129 + v643;
            uint64_t v646 = sub_23309AF80();
            uint64_t v647 = *(void *)(v646 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v647 + 48))(v645, 1, v646))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v644, v645, *(void *)(*(void *)(v648 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v647 + 16))(v644, v645, v646);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v647 + 56))(v644, 0, 1, v646);
            }
            uint64_t v5 = v1073;
            uint64_t v669 = *(int *)(v126 + 28);
            v670 = (void *)((char *)v1096 + v669);
            v671 = (void *)((char *)v1033 + v669);
            void *v670 = *v671;
            v670[1] = v671[1];
            v1050 = (void *)__dstf[7];
            swift_bridgeObjectRetain();
            ((void (*)(void *, void, uint64_t, uint64_t))v1050)(v1096, 0, 1, v126);
          }
          v131[7](v1058, 0, 1, v58);
          unint64_t v4 = v1079;
          uint64_t v54 = __src;
        }
        uint64_t v672 = v54[7];
        v673 = (char *)v7 + v672;
        v674 = (char *)v8 + v672;
        uint64_t v675 = type metadata accessor for FHIRDateTime();
        v1025 = *(void **)(v675 - 8);
        v1062 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v1025[6];
        v1099 = (int *)v675;
        if (v1062(v674, 1, v675))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v673, v674, *(void *)(*(void *)(v676 - 8) + 64));
        }
        else
        {
          unsigned char *v673 = *v674;
          uint64_t v677 = *((void *)v674 + 1);
          *((_DWORD *)v673 + 4) = *((_DWORD *)v674 + 4);
          *((void *)v673 + 1) = v677;
          v678 = v5;
          if (*((void *)v674 + 7) == 1)
          {
            long long v679 = *(_OWORD *)(v674 + 24);
            long long v680 = *(_OWORD *)(v674 + 40);
            *((void *)v673 + 7) = *((void *)v674 + 7);
            *(_OWORD *)(v673 + 24) = v679;
            *(_OWORD *)(v673 + 40) = v680;
          }
          else
          {
            v673[24] = v674[24];
            v673[25] = v674[25];
            v673[26] = v674[26];
            long long v681 = *(_OWORD *)(v674 + 28);
            *((_DWORD *)v673 + 11) = *((_DWORD *)v674 + 11);
            *(_OWORD *)(v673 + 28) = v681;
            *((void *)v673 + 6) = *((void *)v674 + 6);
            *((void *)v673 + 7) = *((void *)v674 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v682 = *(int *)(v675 + 28);
          v683 = &v673[v682];
          v684 = &v674[v682];
          uint64_t v685 = sub_23309B300();
          uint64_t v686 = *(void *)(v685 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v686 + 48))(v684, 1, v685))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v683, v684, *(void *)(*(void *)(v687 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v686 + 16))(v683, v684, v685);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v686 + 56))(v683, 0, 1, v685);
          }
          uint64_t v5 = v678;
          uint64_t v688 = v1099[8];
          v689 = &v673[v688];
          v690 = &v674[v688];
          void *v689 = *v690;
          v689[1] = v690[1];
          v691 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
          swift_bridgeObjectRetain();
          v691(v673, 0, 1, v1099);
          unint64_t v4 = v1079;
          uint64_t v54 = __src;
        }
        uint64_t v692 = v54[8];
        v693 = (void *)((char *)v7 + v692);
        v694 = (void *)((char *)v8 + v692);
        void *v693 = *v694;
        v693[1] = v694[1];
        v693[2] = v694[2];
        uint64_t v695 = v54[9];
        v696 = (char *)v7 + v695;
        v697 = (char *)v8 + v695;
        uint64_t v698 = *(void *)((char *)v8 + v695 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v698 == 1)
        {
          long long v699 = *(_OWORD *)v697;
          *((void *)v696 + 2) = *((void *)v697 + 2);
          *(_OWORD *)v696 = v699;
        }
        else
        {
          *(void *)v696 = *(void *)v697;
          *((void *)v696 + 1) = *((void *)v697 + 1);
          *((void *)v696 + 2) = *((void *)v697 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v700 = __src[10];
        v701 = (void *)((char *)v7 + v700);
        v702 = (void *)((char *)v8 + v700);
        void *v701 = *v702;
        v701[1] = v702[1];
        uint64_t v703 = __src[11];
        v704 = (void *)((char *)v7 + v703);
        v705 = (void *)((char *)v8 + v703);
        void *v704 = *v705;
        v704[1] = v705[1];
        uint64_t v706 = __src[12];
        v707 = (char *)v7 + v706;
        v708 = (char *)v8 + v706;
        uint64_t v709 = *(void *)((char *)v8 + v706 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v709 == 1)
        {
          long long v710 = *(_OWORD *)v708;
          *((void *)v707 + 2) = *((void *)v708 + 2);
          *(_OWORD *)v707 = v710;
        }
        else
        {
          *(void *)v707 = *(void *)v708;
          *((void *)v707 + 1) = *((void *)v708 + 1);
          *((void *)v707 + 2) = *((void *)v708 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        a3 = v1105;
        v711 = __src;
        *(void *)((char *)v7 + __src[13]) = *(void *)((char *)v8 + __src[13]);
        uint64_t v712 = __src[14];
        v713 = (char *)v7 + v712;
        v714 = (char *)v8 + v712;
        swift_bridgeObjectRetain();
        if (v1062(v714, 1, (uint64_t)v1099))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v713, v714, *(void *)(*(void *)(v715 - 8) + 64));
        }
        else
        {
          unsigned char *v713 = *v714;
          uint64_t v716 = *((void *)v714 + 1);
          *((_DWORD *)v713 + 4) = *((_DWORD *)v714 + 4);
          *((void *)v713 + 1) = v716;
          v717 = v5;
          if (*((void *)v714 + 7) == 1)
          {
            long long v718 = *(_OWORD *)(v714 + 24);
            long long v719 = *(_OWORD *)(v714 + 40);
            *((void *)v713 + 7) = *((void *)v714 + 7);
            *(_OWORD *)(v713 + 24) = v718;
            *(_OWORD *)(v713 + 40) = v719;
          }
          else
          {
            v713[24] = v714[24];
            v713[25] = v714[25];
            v713[26] = v714[26];
            long long v720 = *(_OWORD *)(v714 + 28);
            *((_DWORD *)v713 + 11) = *((_DWORD *)v714 + 11);
            *(_OWORD *)(v713 + 28) = v720;
            *((void *)v713 + 6) = *((void *)v714 + 6);
            *((void *)v713 + 7) = *((void *)v714 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v721 = v1099[7];
          v722 = &v713[v721];
          v723 = &v714[v721];
          uint64_t v724 = sub_23309B300();
          uint64_t v725 = *(void *)(v724 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v725 + 48))(v723, 1, v724))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v722, v723, *(void *)(*(void *)(v726 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v725 + 16))(v722, v723, v724);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v725 + 56))(v722, 0, 1, v724);
          }
          uint64_t v5 = v717;
          uint64_t v727 = v1099[8];
          v728 = &v713[v727];
          v729 = &v714[v727];
          void *v728 = *v729;
          v728[1] = v729[1];
          v730 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
          swift_bridgeObjectRetain();
          v730(v713, 0, 1, v1099);
          unint64_t v4 = v1079;
          v711 = __src;
        }
        uint64_t v731 = v711[15];
        v732 = (char *)v7 + v731;
        v733 = (char *)v8 + v731;
        uint64_t v734 = type metadata accessor for Period();
        v992 = *(void **)(v734 - 8);
        uint64_t v1038 = v734;
        v999 = (unsigned int (*)(char *, uint64_t, uint64_t))v992[6];
        if (((unsigned int (*)(unsigned char *, uint64_t))v999)(v733, 1))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v732, v733, *(void *)(*(void *)(v735 - 8) + 64));
          v736 = v1099;
        }
        else
        {
          v736 = v1099;
          if (v1062(v733, 1, (uint64_t)v1099))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v732, v733, *(void *)(*(void *)(v737 - 8) + 64));
          }
          else
          {
            unsigned char *v732 = *v733;
            uint64_t v738 = *((void *)v733 + 1);
            *((_DWORD *)v732 + 4) = *((_DWORD *)v733 + 4);
            *((void *)v732 + 1) = v738;
            v1074 = v5;
            if (*((void *)v733 + 7) == 1)
            {
              long long v739 = *(_OWORD *)(v733 + 24);
              long long v740 = *(_OWORD *)(v733 + 40);
              *((void *)v732 + 7) = *((void *)v733 + 7);
              *(_OWORD *)(v732 + 24) = v739;
              *(_OWORD *)(v732 + 40) = v740;
            }
            else
            {
              v732[24] = v733[24];
              v732[25] = v733[25];
              v732[26] = v733[26];
              long long v741 = *(_OWORD *)(v733 + 28);
              *((_DWORD *)v732 + 11) = *((_DWORD *)v733 + 11);
              *(_OWORD *)(v732 + 28) = v741;
              *((void *)v732 + 6) = *((void *)v733 + 6);
              *((void *)v732 + 7) = *((void *)v733 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v742 = v1099[7];
            v743 = &v732[v742];
            v744 = &v733[v742];
            uint64_t v745 = sub_23309B300();
            uint64_t v746 = *(void *)(v745 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v746 + 48))(v744, 1, v745))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v743, v744, *(void *)(*(void *)(v747 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v746 + 16))(v743, v744, v745);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v746 + 56))(v743, 0, 1, v745);
            }
            uint64_t v5 = v1074;
            v736 = v1099;
            uint64_t v812 = v1099[8];
            v813 = &v732[v812];
            v814 = &v733[v812];
            void *v813 = *v814;
            v813[1] = v814[1];
            v815 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
            swift_bridgeObjectRetain();
            v815(v732, 0, 1, v1099);
            a3 = v1105;
            unint64_t v4 = v1079;
            v711 = __src;
          }
          uint64_t v816 = *(int *)(v1038 + 20);
          v817 = &v732[v816];
          v818 = &v733[v816];
          if (v1062(v818, 1, (uint64_t)v736))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v817, v818, *(void *)(*(void *)(v819 - 8) + 64));
          }
          else
          {
            unsigned char *v817 = *v818;
            uint64_t v820 = *((void *)v818 + 1);
            *((_DWORD *)v817 + 4) = *((_DWORD *)v818 + 4);
            *((void *)v817 + 1) = v820;
            v1075 = v5;
            if (*((void *)v818 + 7) == 1)
            {
              long long v821 = *(_OWORD *)(v818 + 24);
              long long v822 = *(_OWORD *)(v818 + 40);
              *((void *)v817 + 7) = *((void *)v818 + 7);
              *(_OWORD *)(v817 + 24) = v821;
              *(_OWORD *)(v817 + 40) = v822;
            }
            else
            {
              v817[24] = v818[24];
              v817[25] = v818[25];
              v817[26] = v818[26];
              long long v823 = *(_OWORD *)(v818 + 28);
              *((_DWORD *)v817 + 11) = *((_DWORD *)v818 + 11);
              *(_OWORD *)(v817 + 28) = v823;
              *((void *)v817 + 6) = *((void *)v818 + 6);
              *((void *)v817 + 7) = *((void *)v818 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v824 = v1099[7];
            v825 = &v817[v824];
            v826 = &v818[v824];
            uint64_t v827 = sub_23309B300();
            uint64_t v828 = *(void *)(v827 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v828 + 48))(v826, 1, v827))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v825, v826, *(void *)(*(void *)(v829 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v828 + 16))(v825, v826, v827);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v828 + 56))(v825, 0, 1, v827);
            }
            v736 = v1099;
            uint64_t v911 = v1099[8];
            v912 = &v817[v911];
            v913 = &v818[v911];
            void *v912 = *v913;
            v912[1] = v913[1];
            v914 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
            swift_bridgeObjectRetain();
            v914(v817, 0, 1, v1099);
            uint64_t v5 = v1075;
            unint64_t v4 = v1079;
            a3 = v1105;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v992[7])(v732, 0, 1, v1038);
        }
        uint64_t v915 = v711[16];
        v916 = (void *)((char *)v7 + v915);
        v917 = (void *)((char *)v8 + v915);
        void *v916 = *v917;
        v916[1] = v917[1];
        uint64_t v918 = v711[17];
        v919 = (char *)v7 + v918;
        v920 = (char *)v8 + v918;
        swift_bridgeObjectRetain();
        if (v1062(v920, 1, (uint64_t)v736))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v919, v920, *(void *)(*(void *)(v921 - 8) + 64));
        }
        else
        {
          unsigned char *v919 = *v920;
          uint64_t v922 = *((void *)v920 + 1);
          *((_DWORD *)v919 + 4) = *((_DWORD *)v920 + 4);
          *((void *)v919 + 1) = v922;
          uint64_t v923 = a3;
          v924 = v5;
          if (*((void *)v920 + 7) == 1)
          {
            long long v925 = *(_OWORD *)(v920 + 24);
            long long v926 = *(_OWORD *)(v920 + 40);
            *((void *)v919 + 7) = *((void *)v920 + 7);
            *(_OWORD *)(v919 + 24) = v925;
            *(_OWORD *)(v919 + 40) = v926;
          }
          else
          {
            v919[24] = v920[24];
            v919[25] = v920[25];
            v919[26] = v920[26];
            long long v927 = *(_OWORD *)(v920 + 28);
            *((_DWORD *)v919 + 11) = *((_DWORD *)v920 + 11);
            *(_OWORD *)(v919 + 28) = v927;
            *((void *)v919 + 6) = *((void *)v920 + 6);
            *((void *)v919 + 7) = *((void *)v920 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v928 = v1099[7];
          v929 = &v919[v928];
          v930 = &v920[v928];
          uint64_t v931 = sub_23309B300();
          uint64_t v932 = *(void *)(v931 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v932 + 48))(v930, 1, v931))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v929, v930, *(void *)(*(void *)(v933 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v932 + 16))(v929, v930, v931);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v932 + 56))(v929, 0, 1, v931);
          }
          uint64_t v934 = v1099[8];
          v935 = &v919[v934];
          v936 = &v920[v934];
          void *v935 = *v936;
          v935[1] = v936[1];
          v937 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
          swift_bridgeObjectRetain();
          v937(v919, 0, 1, v1099);
          uint64_t v5 = v924;
          a3 = v923;
          unint64_t v4 = v1079;
          v711 = __src;
        }
        uint64_t v938 = v1038;
        uint64_t v939 = v711[18];
        v940 = (char *)v7 + v939;
        v941 = (char *)v8 + v939;
        if (v999((char *)v8 + v939, 1, v1038))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v940, v941, *(void *)(*(void *)(v942 - 8) + 64));
        }
        else
        {
          v943 = v1099;
          if (v1062(v941, 1, (uint64_t)v1099))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v940, v941, *(void *)(*(void *)(v944 - 8) + 64));
          }
          else
          {
            unsigned char *v940 = *v941;
            uint64_t v945 = *((void *)v941 + 1);
            *((_DWORD *)v940 + 4) = *((_DWORD *)v941 + 4);
            *((void *)v940 + 1) = v945;
            v946 = v5;
            if (*((void *)v941 + 7) == 1)
            {
              long long v947 = *(_OWORD *)(v941 + 24);
              long long v948 = *(_OWORD *)(v941 + 40);
              *((void *)v940 + 7) = *((void *)v941 + 7);
              *(_OWORD *)(v940 + 24) = v947;
              *(_OWORD *)(v940 + 40) = v948;
            }
            else
            {
              v940[24] = v941[24];
              v940[25] = v941[25];
              v940[26] = v941[26];
              long long v949 = *(_OWORD *)(v941 + 28);
              *((_DWORD *)v940 + 11) = *((_DWORD *)v941 + 11);
              *(_OWORD *)(v940 + 28) = v949;
              *((void *)v940 + 6) = *((void *)v941 + 6);
              *((void *)v940 + 7) = *((void *)v941 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v950 = v1099[7];
            v951 = &v940[v950];
            v952 = &v941[v950];
            uint64_t v953 = sub_23309B300();
            uint64_t v954 = *(void *)(v953 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v954 + 48))(v952, 1, v953))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v951, v952, *(void *)(*(void *)(v955 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v954 + 16))(v951, v952, v953);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v954 + 56))(v951, 0, 1, v953);
            }
            uint64_t v5 = v946;
            uint64_t v956 = v1099[8];
            v957 = &v940[v956];
            v958 = &v941[v956];
            void *v957 = *v958;
            v957[1] = v958[1];
            v959 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
            swift_bridgeObjectRetain();
            v959(v940, 0, 1, v1099);
            v943 = v1099;
            unint64_t v4 = v1079;
            v711 = __src;
            uint64_t v938 = v1038;
          }
          uint64_t v960 = *(int *)(v938 + 20);
          v961 = &v940[v960];
          v962 = &v941[v960];
          if (v1062(v962, 1, (uint64_t)v943))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v961, v962, *(void *)(*(void *)(v963 - 8) + 64));
          }
          else
          {
            unsigned char *v961 = *v962;
            uint64_t v964 = *((void *)v962 + 1);
            *((_DWORD *)v961 + 4) = *((_DWORD *)v962 + 4);
            *((void *)v961 + 1) = v964;
            v1076 = v5;
            if (*((void *)v962 + 7) == 1)
            {
              long long v965 = *(_OWORD *)(v962 + 24);
              long long v966 = *(_OWORD *)(v962 + 40);
              *((void *)v961 + 7) = *((void *)v962 + 7);
              *(_OWORD *)(v961 + 24) = v965;
              *(_OWORD *)(v961 + 40) = v966;
            }
            else
            {
              v961[24] = v962[24];
              v961[25] = v962[25];
              v961[26] = v962[26];
              long long v967 = *(_OWORD *)(v962 + 28);
              *((_DWORD *)v961 + 11) = *((_DWORD *)v962 + 11);
              *(_OWORD *)(v961 + 28) = v967;
              *((void *)v961 + 6) = *((void *)v962 + 6);
              *((void *)v961 + 7) = *((void *)v962 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v968 = v943[7];
            v969 = &v961[v968];
            v970 = &v962[v968];
            uint64_t v971 = sub_23309B300();
            uint64_t v972 = *(void *)(v971 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v972 + 48))(v970, 1, v971))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v969, v970, *(void *)(*(void *)(v973 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v972 + 16))(v969, v970, v971);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v972 + 56))(v969, 0, 1, v971);
            }
            uint64_t v5 = v1076;
            uint64_t v974 = v1099[8];
            v975 = &v961[v974];
            v976 = &v962[v974];
            void *v975 = *v976;
            v975[1] = v976[1];
            v977 = (void (*)(unsigned char *, void, uint64_t, int *))v1025[7];
            swift_bridgeObjectRetain();
            v977(v961, 0, 1, v1099);
            unint64_t v4 = v1079;
            v711 = __src;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v992[7])(v940, 0, 1, v1038);
        }
        uint64_t v978 = v711[19];
        v979 = (void *)((char *)v7 + v978);
        v980 = (void *)((char *)v8 + v978);
        void *v979 = *v980;
        v979[1] = v980[1];
        uint64_t v981 = v711[20];
        v982 = (void *)((char *)v7 + v981);
        v983 = (void *)((char *)v8 + v981);
        void *v982 = *v983;
        v982[1] = v983[1];
        uint64_t v984 = v711[21];
        v985 = (void *)((char *)v7 + v984);
        v986 = (void *)((char *)v8 + v984);
        void *v985 = *v986;
        v985[1] = v986[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v1106 = a3;
        v1070 = v5;
        v1080 = v4;
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        v7[5] = v8[5];
        v7[6] = v8[6];
        v7[7] = v8[7];
        v7[8] = v8[8];
        v7[9] = v8[9];
        v7[10] = v8[10];
        v1094 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v61 = v1094[9];
        __dsta = (char *)v7 + v61;
        v1015 = (char *)v8 + v61;
        uint64_t v62 = type metadata accessor for FHIRDateTime();
        uint64_t v63 = *(unsigned int (**)(unsigned char *, uint64_t, int *))(*(void *)(v62 - 8) + 48);
        uint64_t v1029 = *(void *)(v62 - 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1056 = v63;
        __srca = (int *)v62;
        if (v63(v1015, 1, (int *)v62))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dsta, v1015, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          unsigned char *__dsta = *v1015;
          uint64_t v132 = *((void *)v1015 + 1);
          *((_DWORD *)__dsta + 4) = *((_DWORD *)v1015 + 4);
          *((void *)__dsta + 1) = v132;
          if (*((void *)v1015 + 7) == 1)
          {
            long long v133 = *(_OWORD *)(v1015 + 24);
            long long v134 = *(_OWORD *)(v1015 + 40);
            *((void *)__dsta + 7) = *((void *)v1015 + 7);
            *(_OWORD *)(__dsta + 24) = v133;
            *(_OWORD *)(__dsta + 40) = v134;
          }
          else
          {
            __dsta[24] = v1015[24];
            __dsta[25] = v1015[25];
            __dsta[26] = v1015[26];
            long long v203 = *(_OWORD *)(v1015 + 28);
            *((_DWORD *)__dsta + 11) = *((_DWORD *)v1015 + 11);
            *(_OWORD *)(__dsta + 28) = v203;
            *((void *)__dsta + 6) = *((void *)v1015 + 6);
            *((void *)__dsta + 7) = *((void *)v1015 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v204 = *(int *)(v62 + 28);
          long long v205 = &__dsta[v204];
          uint64_t v206 = &v1015[v204];
          uint64_t v207 = sub_23309B300();
          uint64_t v208 = *(void *)(v207 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v208 + 48))(v206, 1, v207))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v205, v206, *(void *)(*(void *)(v209 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v208 + 16))(v205, v206, v207);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v208 + 56))(v205, 0, 1, v207);
          }
          unint64_t v4 = v1080;
          uint64_t v254 = *(int *)(v62 + 32);
          uint64_t v255 = &__dsta[v254];
          long long v256 = &v1015[v254];
          *uint64_t v255 = *v256;
          v255[1] = v256[1];
          uint64_t v257 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v1029 + 56);
          swift_bridgeObjectRetain();
          v257(__dsta, 0, 1, v62);
        }
        a3 = v1106;
        uint64_t v258 = v1094[10];
        uint64_t v259 = (char *)v7 + v258;
        uint64_t v260 = (char *)v8 + v258;
        uint64_t v261 = type metadata accessor for Period();
        uint64_t v262 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v261 - 8);
        if (v262[6](v260, 1, v261))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v259, v260, *(void *)(*(void *)(v263 - 8) + 64));
        }
        else
        {
          v1019 = v262;
          if (v1056(v260, 1, __srca))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v259, v260, *(void *)(*(void *)(v264 - 8) + 64));
            uint64_t v265 = __srca;
          }
          else
          {
            unsigned char *v259 = *v260;
            uint64_t v448 = *((void *)v260 + 1);
            *((_DWORD *)v259 + 4) = *((_DWORD *)v260 + 4);
            *((void *)v259 + 1) = v448;
            if (*((void *)v260 + 7) == 1)
            {
              long long v449 = *(_OWORD *)(v260 + 24);
              long long v450 = *(_OWORD *)(v260 + 40);
              *((void *)v259 + 7) = *((void *)v260 + 7);
              *(_OWORD *)(v259 + 24) = v449;
              *(_OWORD *)(v259 + 40) = v450;
            }
            else
            {
              v259[24] = v260[24];
              v259[25] = v260[25];
              v259[26] = v260[26];
              long long v649 = *(_OWORD *)(v260 + 28);
              *((_DWORD *)v259 + 11) = *((_DWORD *)v260 + 11);
              *(_OWORD *)(v259 + 28) = v649;
              *((void *)v259 + 6) = *((void *)v260 + 6);
              *((void *)v259 + 7) = *((void *)v260 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v650 = __srca[7];
            v651 = &v259[v650];
            v652 = &v260[v650];
            uint64_t v653 = sub_23309B300();
            uint64_t v654 = *(void *)(v653 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v654 + 48))(v652, 1, v653))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v651, v652, *(void *)(*(void *)(v655 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v654 + 16))(v651, v652, v653);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v654 + 56))(v651, 0, 1, v653);
            }
            unint64_t v4 = v1080;
            uint64_t v265 = __srca;
            uint64_t v748 = __srca[8];
            v749 = &v259[v748];
            v750 = &v260[v748];
            void *v749 = *v750;
            v749[1] = v750[1];
            v751 = *(void (**)(unsigned char *, void, uint64_t, int *))(v1029 + 56);
            swift_bridgeObjectRetain();
            v751(v259, 0, 1, __srca);
            a3 = v1106;
          }
          uint64_t v752 = *(int *)(v261 + 20);
          v753 = &v259[v752];
          v754 = &v260[v752];
          if (v1056(v754, 1, v265))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v753, v754, *(void *)(*(void *)(v755 - 8) + 64));
          }
          else
          {
            unsigned char *v753 = *v754;
            uint64_t v756 = *((void *)v754 + 1);
            *((_DWORD *)v753 + 4) = *((_DWORD *)v754 + 4);
            *((void *)v753 + 1) = v756;
            if (*((void *)v754 + 7) == 1)
            {
              long long v757 = *(_OWORD *)(v754 + 24);
              long long v758 = *(_OWORD *)(v754 + 40);
              *((void *)v753 + 7) = *((void *)v754 + 7);
              *(_OWORD *)(v753 + 24) = v757;
              *(_OWORD *)(v753 + 40) = v758;
            }
            else
            {
              v753[24] = v754[24];
              v753[25] = v754[25];
              v753[26] = v754[26];
              long long v759 = *(_OWORD *)(v754 + 28);
              *((_DWORD *)v753 + 11) = *((_DWORD *)v754 + 11);
              *(_OWORD *)(v753 + 28) = v759;
              *((void *)v753 + 6) = *((void *)v754 + 6);
              *((void *)v753 + 7) = *((void *)v754 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v760 = __srca[7];
            __dstk = &v753[v760];
            v761 = &v754[v760];
            uint64_t v762 = sub_23309B300();
            uint64_t v763 = *(void *)(v762 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v763 + 48))(v761, 1, v762))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dstk, v761, *(void *)(*(void *)(v764 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v763 + 16))(__dstk, v761, v762);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v763 + 56))(__dstk, 0, 1, v762);
            }
            unint64_t v4 = v1080;
            uint64_t v830 = __srca[8];
            v831 = &v753[v830];
            v832 = &v754[v830];
            void *v831 = *v832;
            v831[1] = v832[1];
            v833 = *(void (**)(unsigned char *, void, uint64_t, int *))(v1029 + 56);
            swift_bridgeObjectRetain();
            v833(v753, 0, 1, __srca);
            a3 = v1106;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v1019 + 7))(v259, 0, 1, v261);
        }
        uint64_t v834 = v1094[11];
        v835 = (char *)v7 + v834;
        v836 = (char *)v8 + v834;
        if (v1056((unsigned char *)v8 + v834, 1, __srca))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v835, v836, *(void *)(*(void *)(v837 - 8) + 64));
          uint64_t v5 = v1070;
        }
        else
        {
          unsigned char *v835 = *v836;
          uint64_t v838 = *((void *)v836 + 1);
          *((_DWORD *)v835 + 4) = *((_DWORD *)v836 + 4);
          *((void *)v835 + 1) = v838;
          if (*((void *)v836 + 7) == 1)
          {
            long long v839 = *(_OWORD *)(v836 + 24);
            long long v840 = *(_OWORD *)(v836 + 40);
            *((void *)v835 + 7) = *((void *)v836 + 7);
            *(_OWORD *)(v835 + 24) = v839;
            *(_OWORD *)(v835 + 40) = v840;
          }
          else
          {
            v835[24] = v836[24];
            v835[25] = v836[25];
            v835[26] = v836[26];
            long long v841 = *(_OWORD *)(v836 + 28);
            *((_DWORD *)v835 + 11) = *((_DWORD *)v836 + 11);
            *(_OWORD *)(v835 + 28) = v841;
            *((void *)v835 + 6) = *((void *)v836 + 6);
            *((void *)v835 + 7) = *((void *)v836 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v842 = __srca[7];
          v843 = &v835[v842];
          v844 = &v836[v842];
          uint64_t v845 = sub_23309B300();
          uint64_t v846 = *(void *)(v845 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v846 + 48))(v844, 1, v845))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v843, v844, *(void *)(*(void *)(v847 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v846 + 16))(v843, v844, v845);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v846 + 56))(v843, 0, 1, v845);
          }
          unint64_t v4 = v1080;
          uint64_t v848 = __srca[8];
          v849 = &v835[v848];
          v850 = &v836[v848];
          void *v849 = *v850;
          v849[1] = v850[1];
          v851 = *(void (**)(unsigned char *, void, uint64_t, int *))(v1029 + 56);
          swift_bridgeObjectRetain();
          v851(v835, 0, 1, __srca);
          uint64_t v5 = v1070;
        }
        uint64_t v852 = v1094[12];
        v853 = (void *)((char *)v7 + v852);
        v854 = (void *)((char *)v8 + v852);
        void *v853 = *v854;
        v853[1] = v854[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v1107 = a3;
        v1071 = v5;
        v1081 = v4;
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        uint64_t v65 = v8[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v65 != 1) {
          swift_bridgeObjectRetain();
        }
        v7[4] = v65;
        v7[5] = v8[5];
        v7[6] = v8[6];
        uint64_t v66 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v67 = v66[8];
        uint64_t v68 = (char *)v7 + v67;
        uint64_t v69 = (char *)v8 + v67;
        uint64_t v70 = type metadata accessor for FHIRDateTime();
        uint64_t v71 = *(void *)(v70 - 8);
        uint64_t v72 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48);
        swift_bridgeObjectRetain();
        if (v72(v69, 1, v70))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v68, v69, *(void *)(*(void *)(v73 - 8) + 64));
        }
        else
        {
          *uint64_t v68 = *v69;
          uint64_t v135 = *((void *)v69 + 1);
          *((_DWORD *)v68 + 4) = *((_DWORD *)v69 + 4);
          *((void *)v68 + 1) = v135;
          if (*((void *)v69 + 7) == 1)
          {
            long long v136 = *(_OWORD *)(v69 + 24);
            long long v137 = *(_OWORD *)(v69 + 40);
            *((void *)v68 + 7) = *((void *)v69 + 7);
            *(_OWORD *)(v68 + 24) = v136;
            *(_OWORD *)(v68 + 40) = v137;
          }
          else
          {
            v68[24] = v69[24];
            v68[25] = v69[25];
            v68[26] = v69[26];
            long long v210 = *(_OWORD *)(v69 + 28);
            *((_DWORD *)v68 + 11) = *((_DWORD *)v69 + 11);
            *(_OWORD *)(v68 + 28) = v210;
            *((void *)v68 + 6) = *((void *)v69 + 6);
            *((void *)v68 + 7) = *((void *)v69 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v211 = *(int *)(v70 + 28);
          v1060 = &v68[v211];
          uint64_t v212 = &v69[v211];
          uint64_t v213 = sub_23309B300();
          uint64_t v214 = *(void *)(v213 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v1060, v212, *(void *)(*(void *)(v215 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v214 + 16))(v1060, v212, v213);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v214 + 56))(v1060, 0, 1, v213);
          }
          uint64_t v266 = *(int *)(v70 + 32);
          uint64_t v267 = &v68[v266];
          uint64_t v268 = &v69[v266];
          *uint64_t v267 = *v268;
          v267[1] = v268[1];
          uint64_t v269 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56);
          swift_bridgeObjectRetain();
          v269(v68, 0, 1, v70);
        }
        uint64_t v270 = v66[9];
        uint64_t v271 = (void *)((char *)v7 + v270);
        uint64_t v272 = (void *)((char *)v8 + v270);
        uint64_t v273 = *v272;
        *(void *)((char *)v271 + 5) = *(uint64_t *)((char *)v272 + 5);
        *uint64_t v271 = v273;
        *(void *)((char *)v7 + v66[10]) = *(void *)((char *)v8 + v66[10]);
        *((unsigned char *)v7 + v66[11]) = *((unsigned char *)v8 + v66[11]);
        *(void *)((char *)v7 + v66[12]) = *(void *)((char *)v8 + v66[12]);
        uint64_t v274 = v66[13];
        uint64_t v275 = (void *)((char *)v7 + v274);
        uint64_t v276 = (void *)((char *)v8 + v274);
        void *v275 = *v276;
        v275[1] = v276[1];
        v275[2] = v276[2];
        *((unsigned char *)v7 + v66[14]) = *((unsigned char *)v8 + v66[14]);
        uint64_t v277 = v66[15];
        __srcc = (void *)((char *)v7 + v277);
        v1097 = v66;
        uint64_t v278 = (void *)((char *)v8 + v277);
        uint64_t v279 = type metadata accessor for Reference();
        v1047 = *(void **)(v279 - 8);
        uint64_t v280 = (unsigned int (*)(void *, uint64_t, uint64_t))v1047[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1061 = v280;
        if (v280(v278, 1, v279))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(__srcc, v278, *(void *)(*(void *)(v281 - 8) + 64));
          unint64_t v4 = v1081;
          a3 = v1107;
          uint64_t v282 = v1097;
        }
        else
        {
          void *__srcc = *v278;
          __srcc[1] = v278[1];
          __srcc[2] = v278[2];
          __srcc[3] = v278[3];
          uint64_t v283 = *(int *)(v279 + 24);
          v1020 = (void *)((char *)__srcc + v283);
          uint64_t v1034 = v279;
          uint64_t v284 = (void *)((char *)v278 + v283);
          uint64_t v285 = type metadata accessor for Identifier();
          uint64_t v286 = *(void *)(v285 - 8);
          uint64_t v287 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v286 + 48);
          swift_bridgeObjectRetain();
          uint64_t v288 = v284;
          swift_bridgeObjectRetain();
          if (v287(v284, 1, v285))
          {
            uint64_t v289 = __srcc;
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v1020, v288, *(void *)(*(void *)(v290 - 8) + 64));
            unint64_t v4 = v1081;
            a3 = v1107;
            uint64_t v282 = v1097;
          }
          else
          {
            uint64_t v998 = v286;
            uint64_t v451 = v285;
            void *v1020 = *v284;
            v1020[1] = v284[1];
            uint64_t v452 = v284[3];
            swift_bridgeObjectRetain();
            uint64_t v282 = v1097;
            if (v452 == 1)
            {
              long long v453 = *((_OWORD *)v284 + 1);
              v1020[4] = v284[4];
              *((_OWORD *)v1020 + 1) = v453;
            }
            else
            {
              v1020[2] = v284[2];
              v1020[3] = v284[3];
              v1020[4] = v284[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            unint64_t v4 = v1081;
            uint64_t v989 = v451;
            uint64_t v656 = *(int *)(v451 + 24);
            v657 = (char *)v1020 + v656;
            __dstj = (char *)v284;
            v658 = (char *)v284 + v656;
            uint64_t v659 = sub_23309AF80();
            uint64_t v660 = *(void *)(v659 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v660 + 48))(v658, 1, v659))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v657, v658, *(void *)(*(void *)(v661 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v660 + 16))(v657, v658, v659);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v660 + 56))(v657, 0, 1, v659);
            }
            a3 = v1107;
            uint64_t v765 = *(int *)(v989 + 28);
            v766 = (void *)((char *)v1020 + v765);
            v767 = &__dstj[v765];
            void *v766 = *(void *)v767;
            v766[1] = *((void *)v767 + 1);
            v768 = *(void (**)(void *, void, uint64_t, uint64_t))(v998 + 56);
            swift_bridgeObjectRetain();
            v768(v1020, 0, 1, v989);
            uint64_t v289 = __srcc;
          }
          v769 = v289;
          uint64_t v279 = v1034;
          ((void (*)(void *, void, uint64_t, uint64_t))v1047[7])(v769, 0, 1, v1034);
        }
        uint64_t v770 = v282[16];
        v771 = (void *)((char *)v7 + v770);
        v772 = (void *)((char *)v8 + v770);
        void *v771 = *v772;
        v771[1] = v772[1];
        uint64_t v773 = v282[17];
        v774 = (void *)((char *)v7 + v773);
        v775 = (void *)((char *)v8 + v773);
        swift_bridgeObjectRetain();
        if (v1061(v775, 1, v279))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v774, v775, *(void *)(*(void *)(v776 - 8) + 64));
        }
        else
        {
          void *v774 = *v775;
          v774[1] = v775[1];
          v774[2] = v775[2];
          v774[3] = v775[3];
          uint64_t v1039 = v279;
          uint64_t v777 = *(int *)(v279 + 24);
          __srcd = (void *)((char *)v774 + v777);
          v778 = (void *)((char *)v775 + v777);
          uint64_t v779 = type metadata accessor for Identifier();
          v780 = *(void **)(v779 - 8);
          v781 = (unsigned int (*)(void *, uint64_t, uint64_t))v780[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v781(v778, 1, v779))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(__srcd, v778, *(void *)(*(void *)(v782 - 8) + 64));
            unint64_t v4 = v1081;
            a3 = v1107;
            uint64_t v783 = v1039;
          }
          else
          {
            v1026 = v780;
            void *__srcd = *v778;
            __srcd[1] = v778[1];
            uint64_t v784 = v778[3];
            swift_bridgeObjectRetain();
            BOOL v785 = v784 == 1;
            v786 = __srcd;
            if (v785)
            {
              long long v787 = *((_OWORD *)v778 + 1);
              __srcd[4] = v778[4];
              *((_OWORD *)__srcd + 1) = v787;
            }
            else
            {
              __srcd[2] = v778[2];
              __srcd[3] = v778[3];
              __srcd[4] = v778[4];
              swift_bridgeObjectRetain();
              v786 = __srcd;
              swift_bridgeObjectRetain();
            }
            unint64_t v4 = v1081;
            a3 = v1107;
            uint64_t v788 = *(int *)(v779 + 24);
            v789 = (char *)v786 + v788;
            __dstl = (char *)v778;
            v790 = (char *)v778 + v788;
            uint64_t v791 = sub_23309AF80();
            uint64_t v792 = *(void *)(v791 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v792 + 48))(v790, 1, v791))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v789, v790, *(void *)(*(void *)(v793 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v792 + 16))(v789, v790, v791);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v792 + 56))(v789, 0, 1, v791);
            }
            uint64_t v783 = v1039;
            uint64_t v855 = *(int *)(v779 + 28);
            v856 = (void *)((char *)__srcd + v855);
            v857 = &__dstl[v855];
            void *v856 = *(void *)v857;
            v856[1] = *((void *)v857 + 1);
            v858 = (void (*)(void *, void, uint64_t, uint64_t))v1026[7];
            swift_bridgeObjectRetain();
            v858(__srcd, 0, 1, v779);
          }
          ((void (*)(void *, void, uint64_t, uint64_t))v1047[7])(v774, 0, 1, v783);
          uint64_t v282 = v1097;
        }
        uint64_t v859 = v282[18];
        v860 = (void *)((char *)v7 + v859);
        v861 = (void *)((char *)v8 + v859);
        void *v860 = *v861;
        v860[1] = v861[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        uint64_t v5 = v1071;
        break;
      case 4u:
        uint64_t v1108 = a3;
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        uint64_t v74 = v8[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v74 != 1) {
          swift_bridgeObjectRetain();
        }
        v7[4] = v74;
        v7[5] = v8[5];
        v7[6] = v8[6];
        uint64_t v75 = v8[8];
        swift_bridgeObjectRetain();
        v1072 = v5;
        v1082 = v4;
        if (v75 == 1)
        {
          long long v76 = *(_OWORD *)(v8 + 7);
          v7[9] = v8[9];
          *(_OWORD *)(v7 + 7) = v76;
        }
        else
        {
          v7[7] = v8[7];
          v7[8] = v8[8];
          v7[9] = v8[9];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v7[10] = v8[10];
        v7[11] = v8[11];
        v7[12] = v8[12];
        v7[13] = v8[13];
        v7[14] = v8[14];
        __srcb = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v97 = __srcb[11];
        uint64_t v98 = (char *)v7 + v97;
        uint64_t v99 = (char *)v8 + v97;
        uint64_t v100 = type metadata accessor for FHIRDateTime();
        v1057 = *(void **)(v100 - 8);
        uint64_t v101 = (unsigned int (*)(void, void, void))v1057[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1095 = (int *)v100;
        if (v101(v99, 1, v100))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
          uint64_t v103 = __srcb;
        }
        else
        {
          *uint64_t v98 = *v99;
          uint64_t v140 = *((void *)v99 + 1);
          *((_DWORD *)v98 + 4) = *((_DWORD *)v99 + 4);
          *((void *)v98 + 1) = v140;
          v1043 = v101;
          if (*((void *)v99 + 7) == 1)
          {
            long long v141 = *(_OWORD *)(v99 + 24);
            long long v142 = *(_OWORD *)(v99 + 40);
            *((void *)v98 + 7) = *((void *)v99 + 7);
            *(_OWORD *)(v98 + 24) = v141;
            *(_OWORD *)(v98 + 40) = v142;
          }
          else
          {
            v98[24] = v99[24];
            v98[25] = v99[25];
            v98[26] = v99[26];
            long long v222 = *(_OWORD *)(v99 + 28);
            *((_DWORD *)v98 + 11) = *((_DWORD *)v99 + 11);
            *(_OWORD *)(v98 + 28) = v222;
            *((void *)v98 + 6) = *((void *)v99 + 6);
            *((void *)v98 + 7) = *((void *)v99 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v223 = *(int *)(v100 + 28);
          uint64_t v224 = &v98[v223];
          uint64_t v225 = &v99[v223];
          uint64_t v226 = sub_23309B300();
          uint64_t v227 = *(void *)(v226 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v227 + 48))(v225, 1, v226))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v224, v225, *(void *)(*(void *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v227 + 16))(v224, v225, v226);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v227 + 56))(v224, 0, 1, v226);
          }
          uint64_t v103 = __srcb;
          uint64_t v373 = *(int *)(v100 + 32);
          uint64_t v374 = &v98[v373];
          uint64_t v375 = &v99[v373];
          *uint64_t v374 = *v375;
          v374[1] = v375[1];
          uint64_t v376 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v1057[7];
          swift_bridgeObjectRetain();
          v376(v98, 0, 1, v100);
          uint64_t v5 = v1072;
          uint64_t v101 = (unsigned int (*)(void, void, void))v1043;
        }
        uint64_t v377 = v103[12];
        long long v378 = (char *)v7 + v377;
        uint64_t v379 = (char *)v8 + v377;
        uint64_t v380 = type metadata accessor for Period();
        uint64_t v381 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v380 - 8);
        if (v381[6](v379, 1, v380))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v378, v379, *(void *)(*(void *)(v382 - 8) + 64));
          uint64_t v383 = v1095;
        }
        else
        {
          v1022 = v381;
          uint64_t v383 = v1095;
          v1036 = v378;
          if (v101(v379, 1, v1095))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v378, v379, *(void *)(*(void *)(v384 - 8) + 64));
          }
          else
          {
            *long long v378 = *v379;
            uint64_t v472 = *((void *)v379 + 1);
            *((_DWORD *)v378 + 4) = *((_DWORD *)v379 + 4);
            *((void *)v378 + 1) = v472;
            if (*((void *)v379 + 7) == 1)
            {
              long long v473 = *(_OWORD *)(v379 + 24);
              long long v474 = *(_OWORD *)(v379 + 40);
              *((void *)v378 + 7) = *((void *)v379 + 7);
              *(_OWORD *)(v378 + 24) = v473;
              *(_OWORD *)(v378 + 40) = v474;
            }
            else
            {
              v378[24] = v379[24];
              v378[25] = v379[25];
              v378[26] = v379[26];
              long long v662 = *(_OWORD *)(v379 + 28);
              *((_DWORD *)v378 + 11) = *((_DWORD *)v379 + 11);
              *(_OWORD *)(v378 + 28) = v662;
              *((void *)v378 + 6) = *((void *)v379 + 6);
              *((void *)v378 + 7) = *((void *)v379 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v663 = v1095[7];
            v664 = &v378[v663];
            v665 = &v379[v663];
            uint64_t v666 = sub_23309B300();
            uint64_t v667 = *(void *)(v666 - 8);
            v1049 = v101;
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v667 + 48))(v665, 1, v666))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v664, v665, *(void *)(*(void *)(v668 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v667 + 16))(v664, v665, v666);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v667 + 56))(v664, 0, 1, v666);
            }
            uint64_t v103 = __srcb;
            uint64_t v383 = v1095;
            uint64_t v794 = v1095[8];
            v795 = &v1036[v794];
            v796 = &v379[v794];
            void *v795 = *v796;
            v795[1] = v796[1];
            v797 = (void (*)(unsigned char *, void, uint64_t, int *))v1057[7];
            swift_bridgeObjectRetain();
            v797(v1036, 0, 1, v1095);
            long long v378 = v1036;
            uint64_t v5 = v1072;
            uint64_t v101 = (unsigned int (*)(void, void, void))v1049;
          }
          uint64_t v798 = *(int *)(v380 + 20);
          v799 = &v378[v798];
          v800 = &v379[v798];
          if (v101(v800, 1, v383))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v799, v800, *(void *)(*(void *)(v801 - 8) + 64));
          }
          else
          {
            unsigned char *v799 = *v800;
            uint64_t v802 = *((void *)v800 + 1);
            *((_DWORD *)v799 + 4) = *((_DWORD *)v800 + 4);
            *((void *)v799 + 1) = v802;
            v1051 = v101;
            if (*((void *)v800 + 7) == 1)
            {
              long long v803 = *(_OWORD *)(v800 + 24);
              long long v804 = *(_OWORD *)(v800 + 40);
              *((void *)v799 + 7) = *((void *)v800 + 7);
              *(_OWORD *)(v799 + 24) = v803;
              *(_OWORD *)(v799 + 40) = v804;
            }
            else
            {
              v799[24] = v800[24];
              v799[25] = v800[25];
              v799[26] = v800[26];
              long long v805 = *(_OWORD *)(v800 + 28);
              *((_DWORD *)v799 + 11) = *((_DWORD *)v800 + 11);
              *(_OWORD *)(v799 + 28) = v805;
              *((void *)v799 + 6) = *((void *)v800 + 6);
              *((void *)v799 + 7) = *((void *)v800 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v806 = v1095[7];
            v807 = &v799[v806];
            v808 = &v800[v806];
            uint64_t v809 = sub_23309B300();
            uint64_t v810 = *(void *)(v809 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v810 + 48))(v808, 1, v809))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v807, v808, *(void *)(*(void *)(v811 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v810 + 16))(v807, v808, v809);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v810 + 56))(v807, 0, 1, v809);
            }
            uint64_t v103 = __srcb;
            uint64_t v383 = v1095;
            uint64_t v862 = v1095[8];
            v863 = &v799[v862];
            v864 = &v800[v862];
            void *v863 = *v864;
            v863[1] = v864[1];
            v865 = (void (*)(unsigned char *, void, uint64_t, int *))v1057[7];
            swift_bridgeObjectRetain();
            v865(v799, 0, 1, v1095);
            uint64_t v5 = v1072;
            uint64_t v101 = (unsigned int (*)(void, void, void))v1051;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v1022 + 7))(v1036, 0, 1, v380);
        }
        uint64_t v866 = v103[13];
        v867 = (char *)v7 + v866;
        v868 = (char *)v8 + v866;
        if (v101((char *)v8 + v866, 1, v383))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v867, v868, *(void *)(*(void *)(v869 - 8) + 64));
        }
        else
        {
          unsigned char *v867 = *v868;
          uint64_t v870 = *((void *)v868 + 1);
          *((_DWORD *)v867 + 4) = *((_DWORD *)v868 + 4);
          *((void *)v867 + 1) = v870;
          v871 = v5;
          if (*((void *)v868 + 7) == 1)
          {
            long long v872 = *(_OWORD *)(v868 + 24);
            long long v873 = *(_OWORD *)(v868 + 40);
            *((void *)v867 + 7) = *((void *)v868 + 7);
            *(_OWORD *)(v867 + 24) = v872;
            *(_OWORD *)(v867 + 40) = v873;
          }
          else
          {
            v867[24] = v868[24];
            v867[25] = v868[25];
            v867[26] = v868[26];
            long long v874 = *(_OWORD *)(v868 + 28);
            *((_DWORD *)v867 + 11) = *((_DWORD *)v868 + 11);
            *(_OWORD *)(v867 + 28) = v874;
            *((void *)v867 + 6) = *((void *)v868 + 6);
            *((void *)v867 + 7) = *((void *)v868 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v875 = v383[7];
          v876 = &v867[v875];
          v877 = &v868[v875];
          uint64_t v878 = sub_23309B300();
          uint64_t v879 = *(void *)(v878 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v879 + 48))(v877, 1, v878))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v876, v877, *(void *)(*(void *)(v880 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v879 + 16))(v876, v877, v878);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v879 + 56))(v876, 0, 1, v878);
          }
          uint64_t v103 = __srcb;
          uint64_t v881 = v1095[8];
          v882 = &v867[v881];
          v883 = &v868[v881];
          void *v882 = *v883;
          v882[1] = v883[1];
          v884 = (void (*)(unsigned char *, void, uint64_t, int *))v1057[7];
          swift_bridgeObjectRetain();
          v884(v867, 0, 1, v1095);
          uint64_t v5 = v871;
        }
        *(void *)((char *)v7 + v103[14]) = *(void *)((char *)v8 + v103[14]);
        uint64_t v885 = v103[15];
        v886 = (void *)((char *)v7 + v885);
        v887 = (void *)((char *)v8 + v885);
        void *v886 = *v887;
        v886[1] = v887[1];
        uint64_t v888 = v103[16];
        v889 = (char *)v7 + v888;
        v890 = (char *)v8 + v888;
        uint64_t v891 = *(void *)((char *)v8 + v888 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v891 == 1)
        {
          long long v892 = *(_OWORD *)v890;
          *((void *)v889 + 2) = *((void *)v890 + 2);
          *(_OWORD *)v889 = v892;
        }
        else
        {
          *(void *)v889 = *(void *)v890;
          *((void *)v889 + 1) = *((void *)v890 + 1);
          *((void *)v889 + 2) = *((void *)v890 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        a3 = v1108;
        uint64_t v893 = v103[17];
        v894 = (void *)((char *)v7 + v893);
        v895 = (void *)((char *)v8 + v893);
        uint64_t v896 = type metadata accessor for Quantity();
        v897 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v896 - 8);
        if (v897[6](v895, 1, v896))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v894, v895, *(void *)(*(void *)(v898 - 8) + 64));
        }
        else
        {
          v1100 = v897;
          long long v899 = *(_OWORD *)v895;
          *(void *)((char *)v894 + 13) = *(void *)((char *)v895 + 13);
          *(_OWORD *)v894 = v899;
          v894[3] = v895[3];
          v894[4] = v895[4];
          v894[5] = v895[5];
          v894[6] = v895[6];
          uint64_t v900 = *(int *)(v896 + 28);
          v1052 = (char *)v895 + v900;
          v1063 = (char *)v894 + v900;
          uint64_t v901 = sub_23309AF80();
          uint64_t v902 = *(void *)(v901 - 8);
          v1040 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v902 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v1040(v1052, 1, v901))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v1063, v1052, *(void *)(*(void *)(v903 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v902 + 16))(v1063, v1052, v901);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v902 + 56))(v1063, 0, 1, v901);
          }
          uint64_t v5 = v1072;
          a3 = v1108;
          uint64_t v904 = *(int *)(v896 + 32);
          v905 = (void *)((char *)v894 + v904);
          v906 = (void *)((char *)v895 + v904);
          void *v905 = *v906;
          v905[1] = v906[1];
          v907 = (void (*)(void *, void, uint64_t, uint64_t))v1100[7];
          swift_bridgeObjectRetain();
          v907(v894, 0, 1, v896);
        }
        unint64_t v4 = v1082;
        *(void *)((char *)v7 + __srcb[18]) = *(void *)((char *)v8 + __srcb[18]);
        uint64_t v908 = __srcb[19];
        v909 = (void *)((char *)v7 + v908);
        v910 = (void *)((char *)v8 + v908);
        void *v909 = *v910;
        v909[1] = v910[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        uint64_t v77 = v8[4];
        *(void *)((char *)v7 + 37) = *(void *)((char *)v8 + 37);
        v7[4] = v77;
        v7[6] = v8[6];
        v7[7] = v8[7];
        v7[8] = v8[8];
        v7[9] = v8[9];
        v7[10] = v8[10];
        v7[11] = v8[11];
        uint64_t v78 = v8[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v78 == 1)
        {
          long long v79 = *((_OWORD *)v8 + 6);
          v7[14] = v8[14];
          *((_OWORD *)v7 + 6) = v79;
        }
        else
        {
          v7[12] = v8[12];
          v7[13] = v8[13];
          v7[14] = v8[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v7[15] = v8[15];
        v7[16] = v8[16];
        v7[17] = v8[17];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        v7[5] = v8[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_303:
  uint64_t v635 = *(int *)(a3 + 24);
  v636 = (void *)((char *)v5 + v635);
  v637 = (void *)((char *)v4 + v635);
  uint64_t v638 = *v637;
  unint64_t v639 = v637[1];
  sub_232E9A9F4(*v637, v639);
  uint64_t v640 = *v636;
  unint64_t v641 = v636[1];
  uint64_t *v636 = v638;
  v636[1] = v639;
  sub_232E9AA4C(v640, v641);
  return v5;
}

_OWORD *initializeWithTake for ModelsDSTU2.Bundle.BundleEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v338 = v9;
    uint64_t v339 = v3;
    uint64_t v337 = v10;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v7 = *v8;
        *((void *)v7 + 2) = *((void *)v8 + 2);
        int v12 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v13 = v12[6];
        uint64_t v14 = (_OWORD *)((char *)v7 + v13);
        uint64_t v15 = (_OWORD *)((char *)v8 + v13);
        uint64_t v16 = type metadata accessor for Reference();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          uint64_t v323 = v14;
          uint64_t v331 = v12;
          long long v41 = v15[1];
          *uint64_t v14 = *v15;
          v14[1] = v41;
          uint64_t v42 = *(int *)(v16 + 24);
          long long v43 = (_OWORD *)((char *)v14 + v42);
          uint64_t v44 = (_OWORD *)((char *)v15 + v42);
          uint64_t v45 = type metadata accessor for Identifier();
          uint64_t v46 = *(void (***)(void))(v45 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v46[6])(v44, 1, v45))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
            int v12 = v331;
          }
          else
          {
            __dstb = v46;
            uint64_t v296 = v45;
            __srca = (char *)v43;
            uint64_t v308 = v4;
            long long v63 = v44[1];
            *long long v43 = *v44;
            v43[1] = v63;
            *((void *)v43 + 4) = *((void *)v44 + 4);
            uint64_t v64 = *(int *)(v45 + 24);
            uint64_t v65 = (char *)v43 + v64;
            uint64_t v66 = (char *)v44 + v64;
            uint64_t v67 = sub_23309AF80();
            uint64_t v68 = *(void *)(v67 - 8);
            uint64_t v69 = v67;
            if ((*(unsigned int (**)(char *, uint64_t))(v68 + 48))(v66, 1))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v65, v66, *(void *)(*(void *)(v70 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v69);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v69);
            }
            int v12 = v331;
            *(_OWORD *)&__srca[*(int *)(v296 + 28)] = *(_OWORD *)((char *)v44 + *(int *)(v296 + 28));
            __dstb[7]();
            unint64_t v4 = v308;
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v323, 0, 1, v16);
        }
        uint64_t v125 = v12[7];
        uint64_t v126 = (char *)v7 + v125;
        uint64_t v127 = (char *)v8 + v125;
        uint64_t v128 = type metadata accessor for FHIRDateTime();
        __dstf = *(void **)(v128 - 8);
        uint64_t v334 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstf[6];
        uint64_t v298 = v128;
        if (v334(v127, 1, v128))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          *uint64_t v126 = *v127;
          *((void *)v126 + 1) = *((void *)v127 + 1);
          *((_DWORD *)v126 + 4) = *((_DWORD *)v127 + 4);
          *(_OWORD *)(v126 + 24) = *(_OWORD *)(v127 + 24);
          *(_OWORD *)(v126 + 40) = *(_OWORD *)(v127 + 40);
          *((void *)v126 + 7) = *((void *)v127 + 7);
          uint64_t v130 = *(int *)(v128 + 28);
          uint64_t v311 = &v126[v130];
          uint64_t v131 = &v127[v130];
          uint64_t v132 = sub_23309B300();
          uint64_t v133 = *(void *)(v132 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v311, v131, *(void *)(*(void *)(v134 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 32))(v311, v131, v132);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v311, 0, 1, v132);
          }
          uint64_t v128 = v298;
          *(_OWORD *)&v126[*(int *)(v298 + 32)] = *(_OWORD *)&v127[*(int *)(v298 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstf[7])(v126, 0, 1, v298);
        }
        uint64_t v135 = v12[8];
        long long v136 = (char *)v7 + v135;
        long long v137 = (char *)v8 + v135;
        *(_OWORD *)long long v136 = *(_OWORD *)v137;
        *((void *)v136 + 2) = *((void *)v137 + 2);
        uint64_t v138 = v12[9];
        long long v139 = (char *)v7 + v138;
        uint64_t v140 = (char *)v8 + v138;
        *((void *)v139 + 2) = *((void *)v140 + 2);
        *(_OWORD *)long long v139 = *(_OWORD *)v140;
        *(_OWORD *)((char *)v7 + v12[10]) = *(_OWORD *)((char *)v8 + v12[10]);
        *(_OWORD *)((char *)v7 + v12[11]) = *(_OWORD *)((char *)v8 + v12[11]);
        uint64_t v141 = v12[12];
        long long v142 = (char *)v7 + v141;
        uint64_t v143 = (char *)v8 + v141;
        *(_OWORD *)long long v142 = *(_OWORD *)v143;
        *((void *)v142 + 2) = *((void *)v143 + 2);
        *(void *)((char *)v7 + v12[13]) = *(void *)((char *)v8 + v12[13]);
        uint64_t v144 = v12[14];
        uint64_t v145 = (char *)v7 + v144;
        uint64_t v146 = (char *)v8 + v144;
        if (v334((unsigned char *)v8 + v144, 1, v128))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v145, v146, *(void *)(*(void *)(v147 - 8) + 64));
        }
        else
        {
          *uint64_t v145 = *v146;
          *((void *)v145 + 1) = *((void *)v146 + 1);
          *((_DWORD *)v145 + 4) = *((_DWORD *)v146 + 4);
          *(_OWORD *)(v145 + 24) = *(_OWORD *)(v146 + 24);
          *(_OWORD *)(v145 + 40) = *(_OWORD *)(v146 + 40);
          *((void *)v145 + 7) = *((void *)v146 + 7);
          uint64_t v148 = *(int *)(v128 + 28);
          long long v312 = &v145[v148];
          uint64_t v149 = &v146[v148];
          uint64_t v150 = sub_23309B300();
          uint64_t v151 = *(void *)(v150 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v312, v149, *(void *)(*(void *)(v152 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v151 + 32))(v312, v149, v150);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v151 + 56))(v312, 0, 1, v150);
          }
          uint64_t v128 = v298;
          *(_OWORD *)&v145[*(int *)(v298 + 32)] = *(_OWORD *)&v146[*(int *)(v298 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstf[7])(v145, 0, 1, v298);
        }
        uint64_t v153 = v12[15];
        uint64_t v154 = (char *)v7 + v153;
        uint64_t v155 = (char *)v8 + v153;
        uint64_t v156 = type metadata accessor for Period();
        uint64_t v277 = *(void *)(v156 - 8);
        uint64_t v286 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v277 + 48);
        __srcc = (int *)v156;
        if (v286(v155, 1, v156))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v154, v155, *(void *)(*(void *)(v157 - 8) + 64));
        }
        else
        {
          if (v334(v155, 1, v128))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
          }
          else
          {
            uint64_t v313 = v4;
            *uint64_t v154 = *v155;
            *((void *)v154 + 1) = *((void *)v155 + 1);
            *((_DWORD *)v154 + 4) = *((_DWORD *)v155 + 4);
            *(_OWORD *)(v154 + 24) = *(_OWORD *)(v155 + 24);
            *(_OWORD *)(v154 + 40) = *(_OWORD *)(v155 + 40);
            *((void *)v154 + 7) = *((void *)v155 + 7);
            uint64_t v159 = *(int *)(v128 + 28);
            uint64_t v275 = &v154[v159];
            uint64_t v160 = &v155[v159];
            uint64_t v161 = sub_23309B300();
            uint64_t v162 = *(void *)(v161 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v275, v160, *(void *)(*(void *)(v163 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v162 + 32))(v275, v160, v161);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v162 + 56))(v275, 0, 1, v161);
            }
            uint64_t v156 = (uint64_t)__srcc;
            *(_OWORD *)&v154[*(int *)(v128 + 32)] = *(_OWORD *)&v155[*(int *)(v128 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstf[7])(v154, 0, 1, v128);
            unint64_t v4 = v313;
          }
          uint64_t v203 = *(int *)(v156 + 20);
          uint64_t v204 = &v154[v203];
          long long v205 = &v155[v203];
          if (v334(&v155[v203], 1, v128))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v204, v205, *(void *)(*(void *)(v206 - 8) + 64));
          }
          else
          {
            uint64_t v316 = v4;
            *uint64_t v204 = *v205;
            *((void *)v204 + 1) = *((void *)v205 + 1);
            *((_DWORD *)v204 + 4) = *((_DWORD *)v205 + 4);
            *(_OWORD *)(v204 + 24) = *(_OWORD *)(v205 + 24);
            *(_OWORD *)(v204 + 40) = *(_OWORD *)(v205 + 40);
            *((void *)v204 + 7) = *((void *)v205 + 7);
            uint64_t v207 = *(int *)(v128 + 28);
            uint64_t v276 = &v204[v207];
            uint64_t v208 = &v205[v207];
            uint64_t v209 = sub_23309B300();
            uint64_t v274 = *(void *)(v209 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v274 + 48))(v208, 1, v209))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v276, v208, *(void *)(*(void *)(v210 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v274 + 32))(v276, v208, v209);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v274 + 56))(v276, 0, 1, v209);
            }
            unint64_t v4 = v316;
            *(_OWORD *)&v204[*(int *)(v128 + 32)] = *(_OWORD *)&v205[*(int *)(v128 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstf[7])(v204, 0, 1, v128);
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v277 + 56))(v154, 0, 1, __srcc);
        }
        *(_OWORD *)((char *)v7 + v12[16]) = *(_OWORD *)((char *)v8 + v12[16]);
        uint64_t v243 = v12[17];
        uint64_t v244 = (char *)v7 + v243;
        long long v245 = (char *)v8 + v243;
        if (v334((unsigned char *)v8 + v243, 1, v128))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v244, v245, *(void *)(*(void *)(v246 - 8) + 64));
        }
        else
        {
          uint64_t v318 = v4;
          *uint64_t v244 = *v245;
          *((void *)v244 + 1) = *((void *)v245 + 1);
          *((_DWORD *)v244 + 4) = *((_DWORD *)v245 + 4);
          *(_OWORD *)(v244 + 24) = *(_OWORD *)(v245 + 24);
          *(_OWORD *)(v244 + 40) = *(_OWORD *)(v245 + 40);
          *((void *)v244 + 7) = *((void *)v245 + 7);
          uint64_t v247 = *(int *)(v128 + 28);
          uint64_t v248 = &v244[v247];
          uint64_t v249 = &v245[v247];
          uint64_t v250 = sub_23309B300();
          uint64_t v251 = *(void *)(v250 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v251 + 48))(v249, 1, v250))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v248, v249, *(void *)(*(void *)(v252 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v251 + 32))(v248, v249, v250);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v251 + 56))(v248, 0, 1, v250);
          }
          unint64_t v4 = v318;
          *(_OWORD *)&v244[*(int *)(v298 + 32)] = *(_OWORD *)&v245[*(int *)(v298 + 32)];
          ((void (*)(unsigned char *, void, uint64_t))__dstf[7])(v244, 0, 1);
        }
        uint64_t v9 = v338;
        uint64_t v3 = v339;
        uint64_t v10 = v337;
        uint64_t v253 = v12[18];
        uint64_t v254 = (char *)v7 + v253;
        uint64_t v255 = (char *)v8 + v253;
        if (v286((unsigned char *)v8 + v253, 1, (uint64_t)__srcc))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v254, v255, *(void *)(*(void *)(v256 - 8) + 64));
        }
        else
        {
          uint64_t v257 = v298;
          if (v334(v255, 1, v298))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v254, v255, *(void *)(*(void *)(v258 - 8) + 64));
            uint64_t v259 = __srcc;
          }
          else
          {
            *uint64_t v254 = *v255;
            *((void *)v254 + 1) = *((void *)v255 + 1);
            *((_DWORD *)v254 + 4) = *((_DWORD *)v255 + 4);
            *(_OWORD *)(v254 + 24) = *(_OWORD *)(v255 + 24);
            *(_OWORD *)(v254 + 40) = *(_OWORD *)(v255 + 40);
            *((void *)v254 + 7) = *((void *)v255 + 7);
            uint64_t v260 = *(int *)(v298 + 28);
            v319 = &v254[v260];
            uint64_t v261 = &v255[v260];
            uint64_t v262 = sub_23309B300();
            uint64_t v263 = *(void *)(v262 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v319, v261, *(void *)(*(void *)(v264 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v263 + 32))(v319, v261, v262);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v263 + 56))(v319, 0, 1, v262);
            }
            uint64_t v257 = v298;
            uint64_t v259 = __srcc;
            *(_OWORD *)&v254[*(int *)(v298 + 32)] = *(_OWORD *)&v255[*(int *)(v298 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstf[7])(v254, 0, 1, v298);
          }
          uint64_t v265 = v259[5];
          uint64_t v266 = &v254[v265];
          uint64_t v267 = &v255[v265];
          if (v334(&v255[v265], 1, v257))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v266, v267, *(void *)(*(void *)(v268 - 8) + 64));
          }
          else
          {
            *uint64_t v266 = *v267;
            *((void *)v266 + 1) = *((void *)v267 + 1);
            *((_DWORD *)v266 + 4) = *((_DWORD *)v267 + 4);
            *(_OWORD *)(v266 + 24) = *(_OWORD *)(v267 + 24);
            *(_OWORD *)(v266 + 40) = *(_OWORD *)(v267 + 40);
            *((void *)v266 + 7) = *((void *)v267 + 7);
            uint64_t v269 = *(int *)(v257 + 28);
            uint64_t v336 = &v266[v269];
            uint64_t v270 = &v267[v269];
            uint64_t v271 = sub_23309B300();
            uint64_t v320 = *(void (***)(void *, const void *, uint64_t))(v271 - 8);
            if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v320[6])(v270, 1, v271))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v336, v270, *(void *)(*(void *)(v272 - 8) + 64));
            }
            else
            {
              v320[4](v336, v270, v271);
              ((void (*)(unsigned char *, void, uint64_t, uint64_t))v320[7])(v336, 0, 1, v271);
            }
            *(_OWORD *)&v266[*(int *)(v298 + 32)] = *(_OWORD *)&v267[*(int *)(v298 + 32)];
            ((void (*)(unsigned char *, void, uint64_t))__dstf[7])(v266, 0, 1);
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v277 + 56))(v254, 0, 1, __srcc);
          uint64_t v9 = v338;
          uint64_t v3 = v339;
          uint64_t v10 = v337;
        }
        *(_OWORD *)((char *)v7 + v12[19]) = *(_OWORD *)((char *)v8 + v12[19]);
        *(_OWORD *)((char *)v7 + v12[20]) = *(_OWORD *)((char *)v8 + v12[20]);
        *(_OWORD *)((char *)v7 + v12[21]) = *(_OWORD *)((char *)v8 + v12[21]);
        goto LABEL_150;
      case 2u:
        long long v19 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v19;
        long long v20 = v8[3];
        v7[2] = v8[2];
        v7[3] = v20;
        *((void *)v7 + 8) = *((void *)v8 + 8);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        uint64_t v321 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v21 = v321[9];
        uint64_t v22 = (char *)v7 + v21;
        uint64_t v23 = (char *)v8 + v21;
        uint64_t v24 = type metadata accessor for FHIRDateTime();
        uint64_t v295 = *(void *)(v24 - 8);
        uint64_t v329 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v295 + 48);
        if (v329(v23, 1, v24))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v306 = v4;
          unsigned char *v22 = *v23;
          *((void *)v22 + 1) = *((void *)v23 + 1);
          *((_DWORD *)v22 + 4) = *((_DWORD *)v23 + 4);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
          *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
          *((void *)v22 + 7) = *((void *)v23 + 7);
          uint64_t v48 = *(int *)(v24 + 28);
          __dst = &v22[v48];
          uint64_t v49 = &v23[v48];
          uint64_t v50 = sub_23309B300();
          uint64_t v51 = *(void *)(v50 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dst, v49, *(void *)(*(void *)(v52 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v51 + 32))(__dst, v49, v50);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
          }
          *(_OWORD *)&v22[*(int *)(v24 + 32)] = *(_OWORD *)&v23[*(int *)(v24 + 32)];
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v295 + 56))(v22, 0, 1, v24);
          unint64_t v4 = v306;
        }
        uint64_t v71 = v321;
        uint64_t v72 = v321[10];
        uint64_t v73 = (char *)v7 + v72;
        uint64_t v74 = (char *)v8 + v72;
        uint64_t v75 = type metadata accessor for Period();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
        }
        else
        {
          uint64_t v283 = v76;
          __dstc = v73;
          if (v329(v74, 1, v24))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v73, v74, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            uint64_t v309 = v4;
            *uint64_t v73 = *v74;
            *((void *)v73 + 1) = *((void *)v74 + 1);
            *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
            *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
            *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
            *((void *)v73 + 7) = *((void *)v74 + 7);
            uint64_t v107 = *(int *)(v24 + 28);
            uint64_t v280 = &v73[v107];
            uint64_t v108 = &v74[v107];
            uint64_t v109 = sub_23309B300();
            uint64_t v110 = *(void *)(v109 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v280, v108, *(void *)(*(void *)(v111 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v110 + 32))(v280, v108, v109);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v110 + 56))(v280, 0, 1, v109);
            }
            uint64_t v73 = __dstc;
            *(_OWORD *)&__dstc[*(int *)(v24 + 32)] = *(_OWORD *)&v74[*(int *)(v24 + 32)];
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v295 + 56))(__dstc, 0, 1, v24);
            unint64_t v4 = v309;
          }
          uint64_t v164 = *(int *)(v75 + 20);
          uint64_t v165 = &v73[v164];
          uint64_t v166 = &v74[v164];
          if (v329(&v74[v164], 1, v24))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v165, v166, *(void *)(*(void *)(v167 - 8) + 64));
            uint64_t v168 = v76;
          }
          else
          {
            uint64_t v314 = v4;
            *uint64_t v165 = *v166;
            *((void *)v165 + 1) = *((void *)v166 + 1);
            *((_DWORD *)v165 + 4) = *((_DWORD *)v166 + 4);
            *(_OWORD *)(v165 + 24) = *(_OWORD *)(v166 + 24);
            *(_OWORD *)(v165 + 40) = *(_OWORD *)(v166 + 40);
            *((void *)v165 + 7) = *((void *)v166 + 7);
            uint64_t v169 = *(int *)(v24 + 28);
            uint64_t v282 = &v165[v169];
            uint64_t v170 = &v166[v169];
            uint64_t v171 = sub_23309B300();
            uint64_t v172 = *(void *)(v171 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v172 + 48))(v170, 1, v171))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v282, v170, *(void *)(*(void *)(v173 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v172 + 32))(v282, v170, v171);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v172 + 56))(v282, 0, 1, v171);
            }
            unint64_t v4 = v314;
            uint64_t v168 = v283;
            *(_OWORD *)&v165[*(int *)(v24 + 32)] = *(_OWORD *)&v166[*(int *)(v24 + 32)];
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v295 + 56))(v165, 0, 1, v24);
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v168 + 56))(__dstc, 0, 1, v75);
          uint64_t v71 = v321;
        }
        uint64_t v211 = v71[11];
        uint64_t v212 = (char *)v7 + v211;
        uint64_t v213 = (char *)v8 + v211;
        if (v329((unsigned char *)v8 + v211, 1, v24))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v212, v213, *(void *)(*(void *)(v214 - 8) + 64));
          uint64_t v9 = v338;
          uint64_t v3 = v339;
          uint64_t v10 = v337;
        }
        else
        {
          *uint64_t v212 = *v213;
          *((void *)v212 + 1) = *((void *)v213 + 1);
          *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
          *(_OWORD *)(v212 + 24) = *(_OWORD *)(v213 + 24);
          *(_OWORD *)(v212 + 40) = *(_OWORD *)(v213 + 40);
          *((void *)v212 + 7) = *((void *)v213 + 7);
          uint64_t v215 = *(int *)(v24 + 28);
          uint64_t v335 = &v212[v215];
          uint64_t v216 = &v213[v215];
          uint64_t v217 = sub_23309B300();
          uint64_t v218 = *(void *)(v217 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v335, v216, *(void *)(*(void *)(v219 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v218 + 32))(v335, v216, v217);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56))(v335, 0, 1, v217);
          }
          *(_OWORD *)&v212[*(int *)(v24 + 32)] = *(_OWORD *)&v213[*(int *)(v24 + 32)];
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v295 + 56))(v212, 0, 1, v24);
          uint64_t v9 = v338;
          uint64_t v3 = v339;
          uint64_t v10 = v337;
          uint64_t v71 = v321;
        }
        *(_OWORD *)((char *)v7 + v71[12]) = *(_OWORD *)((char *)v8 + v71[12]);
        goto LABEL_150;
      case 3u:
        long long v26 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v26;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        uint64_t v27 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v28 = v27[8];
        uint64_t v29 = (char *)v7 + v28;
        uint64_t v30 = (char *)v8 + v28;
        uint64_t v31 = type metadata accessor for FHIRDateTime();
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          uint64_t v307 = v4;
          v324 = v5;
          *uint64_t v29 = *v30;
          *((void *)v29 + 1) = *((void *)v30 + 1);
          *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
          *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
          *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
          *((void *)v29 + 7) = *((void *)v30 + 7);
          uint64_t v53 = *(int *)(v31 + 28);
          uint64_t v332 = &v29[v53];
          uint64_t v54 = &v30[v53];
          uint64_t v55 = sub_23309B300();
          uint64_t v56 = *(void *)(v55 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v332, v54, *(void *)(*(void *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v56 + 32))(v332, v54, v55);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v56 + 56))(v332, 0, 1, v55);
          }
          *(_OWORD *)&v29[*(int *)(v31 + 32)] = *(_OWORD *)&v30[*(int *)(v31 + 32)];
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          unint64_t v4 = v307;
          uint64_t v5 = v324;
        }
        uint64_t v79 = v27[9];
        uint64_t v80 = (void *)((char *)v7 + v79);
        uint64_t v81 = (void *)((char *)v8 + v79);
        *uint64_t v80 = *v81;
        *(void *)((char *)v80 + 5) = *(void *)((char *)v81 + 5);
        *(void *)((char *)v7 + v27[10]) = *(void *)((char *)v8 + v27[10]);
        *((unsigned char *)v7 + v27[11]) = *((unsigned char *)v8 + v27[11]);
        *(void *)((char *)v7 + v27[12]) = *(void *)((char *)v8 + v27[12]);
        uint64_t v82 = v27[13];
        uint64_t v83 = (char *)v7 + v82;
        uint64_t v84 = (char *)v8 + v82;
        *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
        *((void *)v83 + 2) = *((void *)v84 + 2);
        *((unsigned char *)v7 + v27[14]) = *((unsigned char *)v8 + v27[14]);
        uint64_t v85 = v27[15];
        uint64_t v86 = (_OWORD *)((char *)v7 + v85);
        uint64_t v87 = (_OWORD *)((char *)v8 + v85);
        uint64_t v88 = type metadata accessor for Reference();
        long long v333 = *(void **)(v88 - 8);
        long long v89 = (unsigned int (*)(void, void, void))v333[6];
        if (v89(v87, 1, v88))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
        }
        else
        {
          uint64_t v325 = v89;
          long long v91 = v87[1];
          *uint64_t v86 = *v87;
          v86[1] = v91;
          uint64_t v297 = v86;
          __srcb = (void *)v88;
          uint64_t v92 = *(int *)(v88 + 24);
          uint64_t v93 = (_OWORD *)((char *)v86 + v92);
          uint64_t v94 = (_OWORD *)((char *)v87 + v92);
          uint64_t v95 = type metadata accessor for Identifier();
          uint64_t v96 = *(void *)(v95 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
            long long v89 = (unsigned int (*)(void, void, void))v325;
            uint64_t v88 = (uint64_t)__srcb;
          }
          else
          {
            uint64_t v310 = v4;
            long long v112 = v94[1];
            *uint64_t v93 = *v94;
            v93[1] = v112;
            *((void *)v93 + 4) = *((void *)v94 + 4);
            uint64_t v281 = (int *)v95;
            uint64_t v285 = v94;
            uint64_t v113 = *(int *)(v95 + 24);
            __dste = (char *)v93;
            uint64_t v114 = (char *)v93 + v113;
            uint64_t v115 = (char *)v94 + v113;
            uint64_t v116 = sub_23309AF80();
            uint64_t v117 = *(void *)(v116 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v114, v115, v116);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
            }
            unint64_t v4 = v310;
            long long v89 = (unsigned int (*)(void, void, void))v325;
            uint64_t v88 = (uint64_t)__srcb;
            *(_OWORD *)&__dste[v281[7]] = *(_OWORD *)((char *)v285 + v281[7]);
            (*(void (**)(void))(v96 + 56))();
          }
          ((void (*)(_OWORD *, void, uint64_t, uint64_t))v333[7])(v297, 0, 1, v88);
        }
        *(_OWORD *)((char *)v7 + v27[16]) = *(_OWORD *)((char *)v8 + v27[16]);
        uint64_t v174 = v27[17];
        uint64_t v175 = (_OWORD *)((char *)v7 + v174);
        uint64_t v176 = (_OWORD *)((char *)v8 + v174);
        if (v89((char *)v8 + v174, 1, v88))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v175, v176, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          long long v178 = v176[1];
          *uint64_t v175 = *v176;
          v175[1] = v178;
          uint64_t v179 = *(int *)(v88 + 24);
          uint64_t v326 = v175;
          uint64_t v180 = (_OWORD *)((char *)v175 + v179);
          uint64_t v181 = (_OWORD *)((char *)v176 + v179);
          uint64_t v182 = type metadata accessor for Identifier();
          uint64_t v183 = *(void (***)(void))(v182 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v183[6])(v181, 1, v182))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
            uint64_t v185 = v326;
          }
          else
          {
            __dstg = v183;
            uint64_t v299 = v182;
            __srcd = (char *)v180;
            uint64_t v315 = v4;
            long long v186 = v181[1];
            *uint64_t v180 = *v181;
            v180[1] = v186;
            *((void *)v180 + 4) = *((void *)v181 + 4);
            uint64_t v187 = *(int *)(v182 + 24);
            uint64_t v188 = (char *)v180 + v187;
            uint64_t v189 = (char *)v181 + v187;
            uint64_t v190 = sub_23309AF80();
            uint64_t v191 = *(void *)(v190 - 8);
            uint64_t v192 = v190;
            if ((*(unsigned int (**)(char *, uint64_t))(v191 + 48))(v189, 1))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v188, v189, *(void *)(*(void *)(v193 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v188, v189, v192);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v191 + 56))(v188, 0, 1, v192);
            }
            unint64_t v4 = v315;
            uint64_t v185 = v326;
            *(_OWORD *)&__srcd[*(int *)(v299 + 28)] = *(_OWORD *)((char *)v181 + *(int *)(v299 + 28));
            __dstg[7]();
          }
          ((void (*)(void *, void, uint64_t, uint64_t))v333[7])(v185, 0, 1, v88);
        }
        uint64_t v9 = v338;
        uint64_t v3 = v339;
        uint64_t v10 = v337;
        *(_OWORD *)((char *)v7 + v27[18]) = *(_OWORD *)((char *)v8 + v27[18]);
        goto LABEL_150;
      case 4u:
        long long v34 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v34;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *((void *)v7 + 9) = *((void *)v8 + 9);
        *((void *)v7 + 12) = *((void *)v8 + 12);
        v7[5] = v8[5];
        *(_OWORD *)((char *)v7 + 104) = *(_OWORD *)((char *)v8 + 104);
        uint64_t v35 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v36 = v35[11];
        uint64_t v37 = (char *)v7 + v36;
        uint64_t v38 = (char *)v8 + v36;
        uint64_t v39 = type metadata accessor for FHIRDateTime();
        __src = *(void **)(v39 - 8);
        long long v322 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__src[6];
        uint64_t v330 = v35;
        uint64_t v305 = (int *)v39;
        if (v322(v38, 1, v39))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          *uint64_t v37 = *v38;
          *((void *)v37 + 1) = *((void *)v38 + 1);
          *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
          *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
          *((void *)v37 + 7) = *((void *)v38 + 7);
          uint64_t v58 = *(int *)(v39 + 28);
          __dsta = &v37[v58];
          uint64_t v59 = &v38[v58];
          uint64_t v60 = sub_23309B300();
          uint64_t v61 = *(void *)(v60 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dsta, v59, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v61 + 32))(__dsta, v59, v60);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v60);
          }
          *(_OWORD *)&v37[*(int *)(v39 + 32)] = *(_OWORD *)&v38[*(int *)(v39 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7])(v37, 0, 1, v39);
          uint64_t v35 = v330;
        }
        uint64_t v98 = v35[12];
        uint64_t v99 = (char *)v7 + v98;
        uint64_t v100 = (char *)v8 + v98;
        uint64_t v101 = type metadata accessor for Period();
        uint64_t v102 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v101 - 8);
        if (v102[6](v100, 1, v101))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
          long long v104 = v305;
        }
        else
        {
          __dstd = (int *)v101;
          uint64_t v279 = v102;
          long long v104 = v305;
          uint64_t v284 = v99;
          if (v322(v100, 1, (uint64_t)v305))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v99, v100, *(void *)(*(void *)(v105 - 8) + 64));
            uint64_t v106 = __dstd;
          }
          else
          {
            *uint64_t v99 = *v100;
            *((void *)v99 + 1) = *((void *)v100 + 1);
            *((_DWORD *)v99 + 4) = *((_DWORD *)v100 + 4);
            *(_OWORD *)(v99 + 24) = *(_OWORD *)(v100 + 24);
            *(_OWORD *)(v99 + 40) = *(_OWORD *)(v100 + 40);
            *((void *)v99 + 7) = *((void *)v100 + 7);
            uint64_t v119 = v305[7];
            uint64_t v120 = &v99[v119];
            uint64_t v121 = &v100[v119];
            uint64_t v122 = sub_23309B300();
            uint64_t v123 = *(void *)(v122 - 8);
            uint64_t v106 = __dstd;
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v123 + 32))(v120, v121, v122);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
            }
            long long v104 = v305;
            uint64_t v99 = v284;
            *(_OWORD *)&v284[v305[8]] = *(_OWORD *)&v100[v305[8]];
            ((void (*)(unsigned char *, void, uint64_t, int *))__src[7])(v284, 0, 1, v305);
            uint64_t v35 = v330;
          }
          uint64_t v194 = v106[5];
          uint64_t v195 = &v99[v194];
          long long v196 = &v100[v194];
          if (v322(v196, 1, (uint64_t)v104))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v195, v196, *(void *)(*(void *)(v197 - 8) + 64));
          }
          else
          {
            *uint64_t v195 = *v196;
            *((void *)v195 + 1) = *((void *)v196 + 1);
            *((_DWORD *)v195 + 4) = *((_DWORD *)v196 + 4);
            *(_OWORD *)(v195 + 24) = *(_OWORD *)(v196 + 24);
            *(_OWORD *)(v195 + 40) = *(_OWORD *)(v196 + 40);
            *((void *)v195 + 7) = *((void *)v196 + 7);
            uint64_t v198 = v104[7];
            uint64_t v278 = &v195[v198];
            long long v199 = &v196[v198];
            uint64_t v200 = sub_23309B300();
            uint64_t v201 = *(void *)(v200 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v278, v199, *(void *)(*(void *)(v202 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v201 + 32))(v278, v199, v200);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v201 + 56))(v278, 0, 1, v200);
            }
            uint64_t v35 = v330;
            *(_OWORD *)&v195[v104[8]] = *(_OWORD *)&v196[v104[8]];
            ((void (*)(unsigned char *, void, uint64_t, int *))__src[7])(v195, 0, 1, v104);
            uint64_t v106 = __dstd;
          }
          (*((void (**)(unsigned char *, void, uint64_t, int *))v279 + 7))(v284, 0, 1, v106);
        }
        uint64_t v220 = v35[13];
        uint64_t v221 = (char *)v7 + v220;
        long long v222 = (char *)v8 + v220;
        if (v322((unsigned char *)v8 + v220, 1, (uint64_t)v104))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
        }
        else
        {
          *uint64_t v221 = *v222;
          *((void *)v221 + 1) = *((void *)v222 + 1);
          *((_DWORD *)v221 + 4) = *((_DWORD *)v222 + 4);
          *(_OWORD *)(v221 + 24) = *(_OWORD *)(v222 + 24);
          *(_OWORD *)(v221 + 40) = *(_OWORD *)(v222 + 40);
          *((void *)v221 + 7) = *((void *)v222 + 7);
          uint64_t v224 = v104[7];
          uint64_t v327 = &v221[v224];
          uint64_t v225 = &v222[v224];
          uint64_t v226 = sub_23309B300();
          uint64_t v227 = *(void *)(v226 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v227 + 48))(v225, 1, v226))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v327, v225, *(void *)(*(void *)(v228 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v227 + 32))(v327, v225, v226);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v227 + 56))(v327, 0, 1, v226);
          }
          *(_OWORD *)&v221[v104[8]] = *(_OWORD *)&v222[v104[8]];
          ((void (*)(unsigned char *, void, uint64_t, int *))__src[7])(v221, 0, 1, v104);
          uint64_t v35 = v330;
        }
        *(void *)((char *)v7 + v35[14]) = *(void *)((char *)v8 + v35[14]);
        *(_OWORD *)((char *)v7 + v35[15]) = *(_OWORD *)((char *)v8 + v35[15]);
        uint64_t v229 = v35[16];
        uint64_t v230 = (char *)v7 + v229;
        uint64_t v231 = (char *)v8 + v229;
        *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
        *((void *)v230 + 2) = *((void *)v231 + 2);
        uint64_t v232 = v35[17];
        uint64_t v233 = (_OWORD *)((char *)v7 + v232);
        uint64_t v234 = (_OWORD *)((char *)v8 + v232);
        uint64_t v235 = type metadata accessor for Quantity();
        uint64_t v236 = *(void *)(v235 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v236 + 48))(v234, 1, v235))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v233, v234, *(void *)(*(void *)(v237 - 8) + 64));
        }
        else
        {
          *uint64_t v233 = *v234;
          *(void *)((char *)v233 + 13) = *(void *)((char *)v234 + 13);
          *(_OWORD *)((char *)v233 + 24) = *(_OWORD *)((char *)v234 + 24);
          *(_OWORD *)((char *)v233 + 40) = *(_OWORD *)((char *)v234 + 40);
          uint64_t v238 = *(int *)(v235 + 28);
          uint64_t v317 = (char *)v233 + v238;
          uint64_t v328 = v5;
          uint64_t v239 = (char *)v234 + v238;
          uint64_t v240 = sub_23309AF80();
          uint64_t v241 = *(void *)(v240 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v240))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v317, v239, *(void *)(*(void *)(v242 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v241 + 32))(v317, v239, v240);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v241 + 56))(v317, 0, 1, v240);
          }
          uint64_t v5 = v328;
          *(_OWORD *)((char *)v233 + *(int *)(v235 + 32)) = *(_OWORD *)((char *)v234 + *(int *)(v235 + 32));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v236 + 56))(v233, 0, 1, v235);
        }
        uint64_t v9 = v338;
        uint64_t v3 = v339;
        uint64_t v10 = v337;
        *(void *)((char *)v7 + v330[18]) = *(void *)((char *)v8 + v330[18]);
        *(_OWORD *)((char *)v7 + v330[19]) = *(_OWORD *)((char *)v8 + v330[19]);
LABEL_150:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(v10 + 64));
        break;
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)v5 + *(int *)(v3 + 24)) = *(_OWORD *)((char *)v4 + *(int *)(v3 + 24));
  return v5;
}

void *assignWithTake for ModelsDSTU2.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v638 = v11;
      uint64_t v646 = v4;
      uint64_t v648 = a3;
      uint64_t v650 = v10;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(void *)(v8 + 16) = *((void *)v9 + 2);
          uint64_t v15 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
          uint64_t v16 = v15[6];
          uint64_t v17 = (_OWORD *)(v8 + v16);
          uint64_t v18 = &v9[v16];
          uint64_t v19 = type metadata accessor for Reference();
          uint64_t v20 = *(void *)(v19 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
          }
          else
          {
            v625 = v15;
            long long v55 = *((_OWORD *)v18 + 1);
            _OWORD *v17 = *(_OWORD *)v18;
            v17[1] = v55;
            uint64_t v56 = *(int *)(v19 + 24);
            uint64_t v57 = (_OWORD *)((char *)v17 + v56);
            uint64_t v58 = &v18[v56];
            uint64_t v59 = type metadata accessor for Identifier();
            uint64_t v60 = *(void (***)(void))(v59 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v60[6])(v58, 1, v59))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
              uint64_t v15 = v625;
            }
            else
            {
              __dstb = (int *)v59;
              uint64_t v600 = v60;
              long long v108 = *((_OWORD *)v58 + 1);
              *uint64_t v57 = *(_OWORD *)v58;
              v57[1] = v108;
              *((void *)v57 + 4) = *((void *)v58 + 4);
              uint64_t v109 = *(int *)(v59 + 24);
              long long v615 = v57;
              uint64_t v110 = (char *)v57 + v109;
              uint64_t v571 = v58;
              uint64_t v111 = &v58[v109];
              uint64_t v112 = sub_23309AF80();
              uint64_t v113 = *(void *)(v112 - 8);
              uint64_t v114 = v112;
              if ((*(unsigned int (**)(char *, uint64_t))(v113 + 48))(v111, 1))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v110, v111, *(void *)(*(void *)(v115 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v110, v111, v114);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v114);
              }
              uint64_t v15 = v625;
              *(_OWORD *)((char *)v615 + __dstb[7]) = *(_OWORD *)((char *)v571 + __dstb[7]);
              v600[7]();
            }
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
          }
          uint64_t v10 = v650;
          uint64_t v191 = v15[7];
          uint64_t v192 = (char *)(v8 + v191);
          uint64_t v193 = &v9[v191];
          uint64_t v194 = type metadata accessor for FHIRDateTime();
          uint64_t v195 = *(void *)(v194 - 8);
          v631 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48);
          uint64_t v574 = v195;
          __dstg = (int *)v194;
          if (v631(v193, 1, v194))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v192, v193, *(void *)(*(void *)(v196 - 8) + 64));
          }
          else
          {
            *uint64_t v192 = *v193;
            *((void *)v192 + 1) = *((void *)v193 + 1);
            *((_DWORD *)v192 + 4) = *((_DWORD *)v193 + 4);
            *(_OWORD *)(v192 + 24) = *(_OWORD *)(v193 + 24);
            *(_OWORD *)(v192 + 40) = *(_OWORD *)(v193 + 40);
            *((void *)v192 + 7) = *((void *)v193 + 7);
            uint64_t v197 = *(int *)(v194 + 28);
            uint64_t v198 = &v192[v197];
            long long v199 = &v193[v197];
            uint64_t v200 = sub_23309B300();
            uint64_t v201 = *(void *)(v200 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v198, v199, *(void *)(*(void *)(v202 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v201 + 32))(v198, v199, v200);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v201 + 56))(v198, 0, 1, v200);
            }
            uint64_t v10 = v650;
            uint64_t v195 = v574;
            uint64_t v194 = (uint64_t)__dstg;
            *(_OWORD *)&v192[__dstg[8]] = *(_OWORD *)&v193[__dstg[8]];
            (*(void (**)(char *, void, uint64_t, int *))(v574 + 56))(v192, 0, 1, __dstg);
          }
          uint64_t v203 = v15[8];
          uint64_t v204 = v8 + v203;
          long long v205 = &v9[v203];
          *(_OWORD *)uint64_t v204 = *(_OWORD *)v205;
          *(void *)(v204 + 16) = *((void *)v205 + 2);
          uint64_t v206 = v15[9];
          uint64_t v207 = v8 + v206;
          uint64_t v208 = &v9[v206];
          *(void *)(v207 + 16) = *((void *)v208 + 2);
          *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
          *(_OWORD *)(v8 + v15[10]) = *(_OWORD *)&v9[v15[10]];
          *(_OWORD *)(v8 + v15[11]) = *(_OWORD *)&v9[v15[11]];
          uint64_t v209 = v15[12];
          uint64_t v210 = v8 + v209;
          uint64_t v211 = &v9[v209];
          *(_OWORD *)uint64_t v210 = *(_OWORD *)v211;
          *(void *)(v210 + 16) = *((void *)v211 + 2);
          *(void *)(v8 + v15[13]) = *(void *)&v9[v15[13]];
          uint64_t v212 = v15[14];
          uint64_t v213 = (char *)(v8 + v212);
          uint64_t v214 = &v9[v212];
          if (v631(&v9[v212], 1, v194))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v213, v214, *(void *)(*(void *)(v215 - 8) + 64));
          }
          else
          {
            *uint64_t v213 = *v214;
            *((void *)v213 + 1) = *((void *)v214 + 1);
            *((_DWORD *)v213 + 4) = *((_DWORD *)v214 + 4);
            *(_OWORD *)(v213 + 24) = *(_OWORD *)(v214 + 24);
            *(_OWORD *)(v213 + 40) = *(_OWORD *)(v214 + 40);
            *((void *)v213 + 7) = *((void *)v214 + 7);
            uint64_t v216 = *(int *)(v194 + 28);
            uint64_t v604 = &v213[v216];
            uint64_t v217 = &v214[v216];
            uint64_t v218 = sub_23309B300();
            uint64_t v219 = *(void *)(v218 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v604, v217, *(void *)(*(void *)(v220 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v604, v217, v218);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v219 + 56))(v604, 0, 1, v218);
            }
            uint64_t v10 = v650;
            uint64_t v194 = (uint64_t)__dstg;
            *(_OWORD *)&v213[__dstg[8]] = *(_OWORD *)&v214[__dstg[8]];
            (*(void (**)(char *, void, uint64_t, int *))(v195 + 56))(v213, 0, 1, __dstg);
          }
          uint64_t v221 = v15[15];
          long long v222 = (char *)(v8 + v221);
          uint64_t v223 = &v9[v221];
          uint64_t v224 = type metadata accessor for Period();
          v557 = *(void **)(v224 - 8);
          uint64_t v563 = (unsigned int (*)(char *, uint64_t, uint64_t))v557[6];
          uint64_t v605 = (int *)v224;
          if (v563(v223, 1, v224))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v222, v223, *(void *)(*(void *)(v225 - 8) + 64));
          }
          else
          {
            if (v631(v223, 1, v194))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v222, v223, *(void *)(*(void *)(v226 - 8) + 64));
            }
            else
            {
              *long long v222 = *v223;
              *((void *)v222 + 1) = *((void *)v223 + 1);
              *((_DWORD *)v222 + 4) = *((_DWORD *)v223 + 4);
              *(_OWORD *)(v222 + 24) = *(_OWORD *)(v223 + 24);
              *(_OWORD *)(v222 + 40) = *(_OWORD *)(v223 + 40);
              *((void *)v222 + 7) = *((void *)v223 + 7);
              uint64_t v227 = *(int *)(v194 + 28);
              uint64_t v551 = &v222[v227];
              uint64_t v228 = &v223[v227];
              uint64_t v229 = sub_23309B300();
              uint64_t v230 = *(void *)(v229 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v230 + 48))(v228, 1, v229))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v551, v228, *(void *)(*(void *)(v231 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v551, v228, v229);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v230 + 56))(v551, 0, 1, v229);
              }
              uint64_t v194 = (uint64_t)__dstg;
              *(_OWORD *)&v222[__dstg[8]] = *(_OWORD *)&v223[__dstg[8]];
              (*(void (**)(char *, void, uint64_t, int *))(v574 + 56))(v222, 0, 1, __dstg);
              uint64_t v10 = v650;
              uint64_t v224 = (uint64_t)v605;
            }
            uint64_t v305 = *(int *)(v224 + 20);
            uint64_t v306 = &v222[v305];
            uint64_t v307 = &v223[v305];
            if (v631(v307, 1, v194))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v306, v307, *(void *)(*(void *)(v308 - 8) + 64));
            }
            else
            {
              *uint64_t v306 = *v307;
              *((void *)v306 + 1) = *((void *)v307 + 1);
              *((_DWORD *)v306 + 4) = *((_DWORD *)v307 + 4);
              *(_OWORD *)(v306 + 24) = *(_OWORD *)(v307 + 24);
              *(_OWORD *)(v306 + 40) = *(_OWORD *)(v307 + 40);
              *((void *)v306 + 7) = *((void *)v307 + 7);
              uint64_t v309 = *(int *)(v194 + 28);
              uint64_t v552 = &v306[v309];
              uint64_t v310 = &v307[v309];
              uint64_t v311 = sub_23309B300();
              uint64_t v548 = *(void *)(v311 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v548 + 48))(v310, 1, v311))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v552, v310, *(void *)(*(void *)(v312 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v548 + 32))(v552, v310, v311);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v548 + 56))(v552, 0, 1, v311);
              }
              uint64_t v10 = v650;
              uint64_t v194 = (uint64_t)__dstg;
              *(_OWORD *)&v306[__dstg[8]] = *(_OWORD *)&v307[__dstg[8]];
              (*(void (**)(char *, void, uint64_t, int *))(v574 + 56))(v306, 0, 1, __dstg);
            }
            ((void (*)(char *, void, uint64_t, int *))v557[7])(v222, 0, 1, v605);
          }
          *(_OWORD *)(v8 + v15[16]) = *(_OWORD *)&v9[v15[16]];
          uint64_t v363 = v15[17];
          long long v364 = (char *)(v8 + v363);
          long long v365 = &v9[v363];
          if (v631(&v9[v363], 1, v194))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v364, v365, *(void *)(*(void *)(v366 - 8) + 64));
          }
          else
          {
            char *v364 = *v365;
            *((void *)v364 + 1) = *((void *)v365 + 1);
            *((_DWORD *)v364 + 4) = *((_DWORD *)v365 + 4);
            *(_OWORD *)(v364 + 24) = *(_OWORD *)(v365 + 24);
            *(_OWORD *)(v364 + 40) = *(_OWORD *)(v365 + 40);
            *((void *)v364 + 7) = *((void *)v365 + 7);
            uint64_t v367 = *(int *)(v194 + 28);
            uint64_t v368 = &v364[v367];
            uint64_t v369 = &v365[v367];
            uint64_t v370 = sub_23309B300();
            uint64_t v371 = *(void *)(v370 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v371 + 48))(v369, 1, v370))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v368, v369, *(void *)(*(void *)(v372 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v371 + 32))(v368, v369, v370);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v371 + 56))(v368, 0, 1, v370);
            }
            uint64_t v10 = v650;
            uint64_t v194 = (uint64_t)__dstg;
            *(_OWORD *)&v364[__dstg[8]] = *(_OWORD *)&v365[__dstg[8]];
            (*(void (**)(char *, void, uint64_t, int *))(v574 + 56))(v364, 0, 1, __dstg);
          }
          a3 = v648;
          uint64_t v373 = v15[18];
          uint64_t v374 = (char *)(v8 + v373);
          uint64_t v375 = &v9[v373];
          if (v563(&v9[v373], 1, (uint64_t)v605))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v374, v375, *(void *)(*(void *)(v376 - 8) + 64));
          }
          else
          {
            if (v631(v375, 1, v194))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v374, v375, *(void *)(*(void *)(v377 - 8) + 64));
            }
            else
            {
              *uint64_t v374 = *v375;
              *((void *)v374 + 1) = *((void *)v375 + 1);
              *((_DWORD *)v374 + 4) = *((_DWORD *)v375 + 4);
              *(_OWORD *)(v374 + 24) = *(_OWORD *)(v375 + 24);
              *(_OWORD *)(v374 + 40) = *(_OWORD *)(v375 + 40);
              *((void *)v374 + 7) = *((void *)v375 + 7);
              uint64_t v378 = *(int *)(v194 + 28);
              uint64_t v379 = &v374[v378];
              uint64_t v380 = &v375[v378];
              uint64_t v381 = sub_23309B300();
              uint64_t v382 = *(void *)(v381 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v382 + 48))(v380, 1, v381))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v379, v380, *(void *)(*(void *)(v383 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v382 + 32))(v379, v380, v381);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v382 + 56))(v379, 0, 1, v381);
              }
              uint64_t v194 = (uint64_t)__dstg;
              *(_OWORD *)&v374[__dstg[8]] = *(_OWORD *)&v375[__dstg[8]];
              (*(void (**)(char *, void, uint64_t, int *))(v574 + 56))(v374, 0, 1, __dstg);
              uint64_t v10 = v650;
            }
            uint64_t v384 = v605[5];
            uint64_t v385 = &v374[v384];
            uint64_t v386 = &v375[v384];
            if (v631(v386, 1, v194))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v385, v386, *(void *)(*(void *)(v387 - 8) + 64));
            }
            else
            {
              char *v385 = *v386;
              *((void *)v385 + 1) = *((void *)v386 + 1);
              *((_DWORD *)v385 + 4) = *((_DWORD *)v386 + 4);
              *(_OWORD *)(v385 + 24) = *(_OWORD *)(v386 + 24);
              *(_OWORD *)(v385 + 40) = *(_OWORD *)(v386 + 40);
              *((void *)v385 + 7) = *((void *)v386 + 7);
              uint64_t v388 = *(int *)(v194 + 28);
              v634 = &v385[v388];
              uint64_t v389 = &v386[v388];
              uint64_t v390 = sub_23309B300();
              uint64_t v391 = *(void *)(v390 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v391 + 48))(v389, 1, v390))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v634, v389, *(void *)(*(void *)(v392 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v391 + 32))(v634, v389, v390);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v391 + 56))(v634, 0, 1, v390);
              }
              uint64_t v10 = v650;
              *(_OWORD *)&v385[__dstg[8]] = *(_OWORD *)&v386[__dstg[8]];
              (*(void (**)(char *, void, uint64_t))(v574 + 56))(v385, 0, 1);
            }
            a3 = v648;
            ((void (*)(char *, void, uint64_t, int *))v557[7])(v374, 0, 1, v605);
          }
          uint64_t v11 = v638;
          *(_OWORD *)(v8 + v15[19]) = *(_OWORD *)&v9[v15[19]];
          *(_OWORD *)(v8 + v15[20]) = *(_OWORD *)&v9[v15[20]];
          *(_OWORD *)(v8 + v15[21]) = *(_OWORD *)&v9[v15[21]];
          goto LABEL_199;
        case 2u:
          long long v31 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v31;
          long long v32 = *((_OWORD *)v9 + 3);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
          *(_OWORD *)(v8 + 48) = v32;
          *(void *)(v8 + 64) = *((void *)v9 + 8);
          *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
          uint64_t v33 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
          uint64_t v34 = v33[9];
          uint64_t v35 = (char *)(v8 + v34);
          uint64_t v36 = &v9[v34];
          uint64_t v37 = type metadata accessor for FHIRDateTime();
          uint64_t v38 = (void **)(*(void *)(v37 - 8) + 48);
          uint64_t v612 = *(void *)(v37 - 8);
          v623 = (unsigned int (*)(char *, uint64_t, uint64_t))*v38;
          long long v596 = v33;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))*v38)(v36, 1, v37))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            *uint64_t v35 = *v36;
            *((void *)v35 + 1) = *((void *)v36 + 1);
            *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
            *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
            *(_OWORD *)(v35 + 40) = *(_OWORD *)(v36 + 40);
            *((void *)v35 + 7) = *((void *)v36 + 7);
            uint64_t v85 = *(int *)(v37 + 28);
            __dsta = &v35[v85];
            uint64_t v86 = &v36[v85];
            uint64_t v87 = sub_23309B300();
            uint64_t v88 = *(void *)(v87 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dsta, v86, *(void *)(*(void *)(v89 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v88 + 32))(__dsta, v86, v87);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dsta, 0, 1, v87);
            }
            *(_OWORD *)&v35[*(int *)(v37 + 32)] = *(_OWORD *)&v36[*(int *)(v37 + 32)];
            uint64_t v33 = v596;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v612 + 56))(v35, 0, 1, v37);
          }
          uint64_t v131 = v33[10];
          uint64_t v132 = (char *)(v8 + v131);
          uint64_t v133 = &v9[v131];
          uint64_t v134 = type metadata accessor for Period();
          uint64_t v135 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v134 - 8);
          if (v135[6](v133, 1, v134))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v132, v133, *(void *)(*(void *)(v136 - 8) + 64));
          }
          else
          {
            __dstd = (void (**)(char *, void, uint64_t, uint64_t))v135;
            if (v623(v133, 1, v37))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v132, v133, *(void *)(*(void *)(v137 - 8) + 64));
            }
            else
            {
              *uint64_t v132 = *v133;
              *((void *)v132 + 1) = *((void *)v133 + 1);
              *((_DWORD *)v132 + 4) = *((_DWORD *)v133 + 4);
              *(_OWORD *)(v132 + 24) = *(_OWORD *)(v133 + 24);
              *(_OWORD *)(v132 + 40) = *(_OWORD *)(v133 + 40);
              *((void *)v132 + 7) = *((void *)v133 + 7);
              uint64_t v167 = *(int *)(v37 + 28);
              uint64_t v572 = &v132[v167];
              uint64_t v168 = &v133[v167];
              uint64_t v169 = sub_23309B300();
              v555 = *(void (***)(void *, const void *, uint64_t))(v169 - 8);
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v555[6])(v168, 1, v169))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v572, v168, *(void *)(*(void *)(v170 - 8) + 64));
              }
              else
              {
                v555[4](v572, v168, v169);
                ((void (*)(char *, void, uint64_t, uint64_t))v555[7])(v572, 0, 1, v169);
              }
              *(_OWORD *)&v132[*(int *)(v37 + 32)] = *(_OWORD *)&v133[*(int *)(v37 + 32)];
              (*(void (**)(char *, void, uint64_t, uint64_t))(v612 + 56))(v132, 0, 1, v37);
              uint64_t v33 = v596;
            }
            uint64_t v266 = *(int *)(v134 + 20);
            uint64_t v267 = &v132[v266];
            uint64_t v268 = &v133[v266];
            if (v623(v268, 1, v37))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v267, v268, *(void *)(*(void *)(v269 - 8) + 64));
            }
            else
            {
              *uint64_t v267 = *v268;
              *((void *)v267 + 1) = *((void *)v268 + 1);
              *((_DWORD *)v267 + 4) = *((_DWORD *)v268 + 4);
              *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
              *(_OWORD *)(v267 + 40) = *(_OWORD *)(v268 + 40);
              *((void *)v267 + 7) = *((void *)v268 + 7);
              uint64_t v270 = *(int *)(v37 + 28);
              uint64_t v576 = &v267[v270];
              uint64_t v271 = &v268[v270];
              uint64_t v272 = sub_23309B300();
              v558 = *(void (***)(void *, void *, void))(v272 - 8);
              v564 = v271;
              uint64_t v273 = v271;
              uint64_t v274 = v272;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v558[6])(v273, 1, v272))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v576, v564, *(void *)(*(void *)(v275 - 8) + 64));
              }
              else
              {
                v558[4](v576, v564, v274);
                ((void (*)(char *, void, uint64_t, uint64_t))v558[7])(v576, 0, 1, v274);
              }
              *(_OWORD *)&v267[*(int *)(v37 + 32)] = *(_OWORD *)&v268[*(int *)(v37 + 32)];
              uint64_t v33 = v596;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v612 + 56))(v267, 0, 1, v37);
            }
            __dstd[7](v132, 0, 1, v134);
          }
          a3 = v648;
          uint64_t v329 = v33[11];
          uint64_t v330 = (char *)(v8 + v329);
          uint64_t v331 = &v9[v329];
          uint64_t v11 = v638;
          if (v623(&v9[v329], 1, v37))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v330, v331, *(void *)(*(void *)(v332 - 8) + 64));
          }
          else
          {
            *uint64_t v330 = *v331;
            *((void *)v330 + 1) = *((void *)v331 + 1);
            *((_DWORD *)v330 + 4) = *((_DWORD *)v331 + 4);
            *(_OWORD *)(v330 + 24) = *(_OWORD *)(v331 + 24);
            *(_OWORD *)(v330 + 40) = *(_OWORD *)(v331 + 40);
            *((void *)v330 + 7) = *((void *)v331 + 7);
            uint64_t v333 = *(int *)(v37 + 28);
            uint64_t v334 = &v330[v333];
            uint64_t v335 = &v331[v333];
            uint64_t v336 = sub_23309B300();
            uint64_t v337 = *(void *)(v336 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v335, 1, v336))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v334, v335, *(void *)(*(void *)(v338 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v337 + 32))(v334, v335, v336);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v334, 0, 1, v336);
            }
            a3 = v648;
            uint64_t v11 = v638;
            uint64_t v33 = v596;
            *(_OWORD *)&v330[*(int *)(v37 + 32)] = *(_OWORD *)&v331[*(int *)(v37 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v612 + 56))(v330, 0, 1, v37);
          }
          unint64_t v4 = v646;
          uint64_t v10 = v650;
          *(_OWORD *)(v8 + v33[12]) = *(_OWORD *)&v9[v33[12]];
          swift_storeEnumTagMultiPayload();
          break;
        case 3u:
          long long v40 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v40;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          long long v41 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
          uint64_t v42 = v41[8];
          long long v43 = (char *)(v8 + v42);
          uint64_t v44 = &v9[v42];
          uint64_t v45 = type metadata accessor for FHIRDateTime();
          uint64_t v46 = *(void *)(v45 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
          }
          else
          {
            v599 = v41;
            *long long v43 = *v44;
            *((void *)v43 + 1) = *((void *)v44 + 1);
            *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
            *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
            *(_OWORD *)(v43 + 40) = *(_OWORD *)(v44 + 40);
            *((void *)v43 + 7) = *((void *)v44 + 7);
            uint64_t v90 = *(int *)(v45 + 28);
            v628 = &v43[v90];
            long long v91 = &v44[v90];
            uint64_t v92 = sub_23309B300();
            uint64_t v93 = *(void *)(v92 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v628, v91, *(void *)(*(void *)(v94 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v628, v91, v92);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v628, 0, 1, v92);
            }
            long long v41 = v599;
            *(_OWORD *)&v43[*(int *)(v45 + 32)] = *(_OWORD *)&v44[*(int *)(v45 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
          }
          uint64_t v138 = v41[9];
          long long v139 = (void *)(v8 + v138);
          uint64_t v140 = &v9[v138];
          *long long v139 = *(void *)v140;
          *(void *)((char *)v139 + 5) = *(void *)(v140 + 5);
          *(void *)(v8 + v41[10]) = *(void *)&v9[v41[10]];
          *(unsigned char *)(v8 + v41[11]) = v9[v41[11]];
          *(void *)(v8 + v41[12]) = *(void *)&v9[v41[12]];
          uint64_t v141 = v41[13];
          uint64_t v142 = v8 + v141;
          uint64_t v143 = &v9[v141];
          *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
          *(void *)(v142 + 16) = *((void *)v143 + 2);
          *(unsigned char *)(v8 + v41[14]) = v9[v41[14]];
          uint64_t v144 = v41[15];
          uint64_t v145 = (_OWORD *)(v8 + v144);
          uint64_t v146 = &v9[v144];
          uint64_t v147 = type metadata accessor for Reference();
          uint64_t v148 = *(void **)(v147 - 8);
          uint64_t v149 = (unsigned int (*)(void, void, void))v148[6];
          if (v149(v146, 1, v147))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v145, v146, *(void *)(*(void *)(v150 - 8) + 64));
          }
          else
          {
            uint64_t v617 = v147;
            uint64_t v629 = v149;
            long long v151 = *((_OWORD *)v146 + 1);
            *uint64_t v145 = *(_OWORD *)v146;
            v145[1] = v151;
            uint64_t v152 = *(int *)(v147 + 24);
            uint64_t v602 = v145;
            uint64_t v153 = (_OWORD *)((char *)v145 + v152);
            uint64_t v154 = &v146[v152];
            uint64_t v155 = type metadata accessor for Identifier();
            uint64_t v156 = *(void *)(v155 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
              uint64_t v147 = v617;
              uint64_t v149 = (unsigned int (*)(void, void, void))v629;
            }
            else
            {
              long long v573 = v153;
              __dste = v148;
              long long v171 = *((_OWORD *)v154 + 1);
              *uint64_t v153 = *(_OWORD *)v154;
              v153[1] = v171;
              *((void *)v153 + 4) = *((void *)v154 + 4);
              uint64_t v556 = (int *)v155;
              v562 = v154;
              uint64_t v172 = *(int *)(v155 + 24);
              uint64_t v173 = (char *)v153 + v172;
              uint64_t v174 = &v154[v172];
              uint64_t v175 = sub_23309AF80();
              uint64_t v176 = *(void *)(v175 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v173, v174, v175);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
              }
              uint64_t v148 = __dste;
              uint64_t v147 = v617;
              uint64_t v149 = (unsigned int (*)(void, void, void))v629;
              *(_OWORD *)((char *)v573 + v556[7]) = *(_OWORD *)&v562[v556[7]];
              (*(void (**)(void))(v156 + 56))();
            }
            ((void (*)(void *, void, uint64_t, uint64_t))v148[7])(v602, 0, 1, v147);
          }
          *(_OWORD *)(v8 + v41[16]) = *(_OWORD *)&v9[v41[16]];
          uint64_t v276 = v41[17];
          uint64_t v277 = (_OWORD *)(v8 + v276);
          uint64_t v278 = &v9[v276];
          if (v149(&v9[v276], 1, v147))
          {
            sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
            a3 = v648;
            uint64_t v10 = v650;
            uint64_t v11 = v638;
          }
          else
          {
            long long v280 = *((_OWORD *)v278 + 1);
            *uint64_t v277 = *(_OWORD *)v278;
            v277[1] = v280;
            uint64_t v281 = *(int *)(v147 + 24);
            v633 = v277;
            uint64_t v282 = (_OWORD *)((char *)v277 + v281);
            uint64_t v283 = &v278[v281];
            uint64_t v284 = type metadata accessor for Identifier();
            uint64_t v285 = *(void *)(v284 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v285 + 48))(v283, 1, v284))
            {
              sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v282, v283, *(void *)(*(void *)(v286 - 8) + 64));
              uint64_t v287 = v633;
              uint64_t v11 = v638;
            }
            else
            {
              uint64_t v577 = v285;
              __dstunint64_t i = v148;
              long long v288 = *((_OWORD *)v283 + 1);
              *uint64_t v282 = *(_OWORD *)v283;
              v282[1] = v288;
              *((void *)v282 + 4) = *((void *)v283 + 4);
              uint64_t v607 = (int *)v284;
              uint64_t v620 = v282;
              uint64_t v289 = *(int *)(v284 + 24);
              uint64_t v290 = (char *)v282 + v289;
              uint64_t v291 = &v283[v289];
              uint64_t v292 = sub_23309AF80();
              uint64_t v293 = *(void *)(v292 - 8);
              uint64_t v294 = v292;
              if ((*(unsigned int (**)(char *, uint64_t))(v293 + 48))(v291, 1))
              {
                sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v290, v291, *(void *)(*(void *)(v295 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v290, v291, v294);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v293 + 56))(v290, 0, 1, v294);
              }
              uint64_t v148 = __dsti;
              uint64_t v287 = v633;
              *(_OWORD *)((char *)v620 + v607[7]) = *(_OWORD *)&v283[v607[7]];
              (*(void (**)(void))(v577 + 56))();
              uint64_t v11 = v638;
            }
            ((void (*)(void *, void, uint64_t, uint64_t))v148[7])(v287, 0, 1, v147);
            a3 = v648;
            uint64_t v10 = v650;
          }
          *(_OWORD *)(v8 + v41[18]) = *(_OWORD *)&v9[v41[18]];
LABEL_199:
          swift_storeEnumTagMultiPayload();
          unint64_t v4 = v646;
          break;
        case 4u:
          long long v48 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v48;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          *(void *)(v8 + 72) = *((void *)v9 + 9);
          *(void *)(v8 + 96) = *((void *)v9 + 12);
          *(_OWORD *)(v8 + 80) = *((_OWORD *)v9 + 5);
          *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
          uint64_t v49 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
          uint64_t v50 = v49[11];
          uint64_t v51 = (char *)(v8 + v50);
          uint64_t v52 = &v9[v50];
          uint64_t v53 = type metadata accessor for FHIRDateTime();
          uint64_t v597 = *(void **)(v53 - 8);
          v624 = (unsigned int (*)(char *, uint64_t, uint64_t))v597[6];
          long long v613 = v49;
          __dst = (int *)v53;
          if (v624(v52, 1, v53))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v51, v52, *(void *)(*(void *)(v54 - 8) + 64));
          }
          else
          {
            *uint64_t v51 = *v52;
            *((void *)v51 + 1) = *((void *)v52 + 1);
            *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
            *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
            *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
            *((void *)v51 + 7) = *((void *)v52 + 7);
            uint64_t v95 = *(int *)(v53 + 28);
            uint64_t v96 = &v51[v95];
            uint64_t v97 = &v52[v95];
            uint64_t v98 = sub_23309B300();
            uint64_t v99 = *(void *)(v98 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v96, v97, v98);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
            }
            *(_OWORD *)&v51[*(int *)(v53 + 32)] = *(_OWORD *)&v52[*(int *)(v53 + 32)];
            uint64_t v49 = v613;
            ((void (*)(char *, void, uint64_t, uint64_t))v597[7])(v51, 0, 1, v53);
          }
          uint64_t v158 = v49[12];
          uint64_t v159 = (char *)(v8 + v158);
          uint64_t v160 = &v9[v158];
          uint64_t v161 = type metadata accessor for Period();
          uint64_t v162 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v161 - 8);
          if (v162[6](v160, 1, v161))
          {
            sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
            uint64_t v11 = v638;
            uint64_t v164 = __dst;
          }
          else
          {
            uint64_t v550 = (void (**)(char *, void, uint64_t, int *))v162;
            v554 = (int *)v161;
            uint64_t v164 = __dst;
            uint64_t v561 = v159;
            if (v624(v160, 1, (uint64_t)__dst))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v159, v160, *(void *)(*(void *)(v165 - 8) + 64));
              uint64_t v166 = v554;
            }
            else
            {
              *uint64_t v159 = *v160;
              *((void *)v159 + 1) = *((void *)v160 + 1);
              *((_DWORD *)v159 + 4) = *((_DWORD *)v160 + 4);
              *(_OWORD *)(v159 + 24) = *(_OWORD *)(v160 + 24);
              *(_OWORD *)(v159 + 40) = *(_OWORD *)(v160 + 40);
              *((void *)v159 + 7) = *((void *)v160 + 7);
              uint64_t v178 = __dst[7];
              uint64_t v179 = &v159[v178];
              uint64_t v180 = &v160[v178];
              uint64_t v181 = sub_23309B300();
              uint64_t v182 = *(void *)(v181 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v179, v180, *(void *)(*(void *)(v183 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v179, v180, v181);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, v181);
              }
              uint64_t v166 = v554;
              uint64_t v159 = v561;
              uint64_t v164 = __dst;
              *(_OWORD *)&v561[__dst[8]] = *(_OWORD *)&v160[__dst[8]];
              ((void (*)(char *, void, uint64_t, int *))v597[7])(v561, 0, 1, __dst);
              uint64_t v49 = v613;
            }
            uint64_t v296 = v166[5];
            uint64_t v297 = &v159[v296];
            uint64_t v298 = &v160[v296];
            if (v624(v298, 1, (uint64_t)v164))
            {
              sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v297, v298, *(void *)(*(void *)(v299 - 8) + 64));
            }
            else
            {
              *uint64_t v297 = *v298;
              *((void *)v297 + 1) = *((void *)v298 + 1);
              *((_DWORD *)v297 + 4) = *((_DWORD *)v298 + 4);
              *(_OWORD *)(v297 + 24) = *(_OWORD *)(v298 + 24);
              *(_OWORD *)(v297 + 40) = *(_OWORD *)(v298 + 40);
              *((void *)v297 + 7) = *((void *)v298 + 7);
              uint64_t v300 = v164[7];
              uint64_t v559 = &v297[v300];
              uint64_t v301 = &v298[v300];
              uint64_t v302 = sub_23309B300();
              uint64_t v303 = *(void *)(v302 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v303 + 48))(v301, 1, v302))
              {
                sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v559, v301, *(void *)(*(void *)(v304 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v303 + 32))(v559, v301, v302);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v303 + 56))(v559, 0, 1, v302);
              }
              *(_OWORD *)&v297[v164[8]] = *(_OWORD *)&v298[v164[8]];
              uint64_t v49 = v613;
              ((void (*)(char *, void, uint64_t, int *))v597[7])(v297, 0, 1, v164);
            }
            v550[7](v561, 0, 1, v166);
            uint64_t v11 = v638;
          }
          uint64_t v339 = v49[13];
          uint64_t v340 = (char *)(v8 + v339);
          uint64_t v341 = &v9[v339];
          if (v624(&v9[v339], 1, (uint64_t)v164))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v340, v341, *(void *)(*(void *)(v342 - 8) + 64));
          }
          else
          {
            char *v340 = *v341;
            *((void *)v340 + 1) = *((void *)v341 + 1);
            *((_DWORD *)v340 + 4) = *((_DWORD *)v341 + 4);
            *(_OWORD *)(v340 + 24) = *(_OWORD *)(v341 + 24);
            *(_OWORD *)(v340 + 40) = *(_OWORD *)(v341 + 40);
            *((void *)v340 + 7) = *((void *)v341 + 7);
            uint64_t v343 = v164[7];
            long long v344 = &v340[v343];
            long long v345 = &v341[v343];
            uint64_t v346 = sub_23309B300();
            uint64_t v347 = *(void *)(v346 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v347 + 48))(v345, 1, v346))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v344, v345, *(void *)(*(void *)(v348 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v347 + 32))(v344, v345, v346);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v347 + 56))(v344, 0, 1, v346);
            }
            uint64_t v11 = v638;
            uint64_t v49 = v613;
            *(_OWORD *)&v340[v164[8]] = *(_OWORD *)&v341[v164[8]];
            ((void (*)(char *, void, uint64_t, int *))v597[7])(v340, 0, 1, v164);
          }
          *(void *)(v8 + v49[14]) = *(void *)&v9[v49[14]];
          *(_OWORD *)(v8 + v49[15]) = *(_OWORD *)&v9[v49[15]];
          uint64_t v349 = v49[16];
          uint64_t v350 = v8 + v349;
          uint64_t v351 = &v9[v349];
          *(_OWORD *)uint64_t v350 = *(_OWORD *)v351;
          *(void *)(v350 + 16) = *((void *)v351 + 2);
          uint64_t v352 = v49[17];
          uint64_t v353 = (_OWORD *)(v8 + v352);
          uint64_t v354 = &v9[v352];
          uint64_t v355 = type metadata accessor for Quantity();
          uint64_t v356 = *(void *)(v355 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v356 + 48))(v354, 1, v355))
          {
            sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v353, v354, *(void *)(*(void *)(v357 - 8) + 64));
          }
          else
          {
            *uint64_t v353 = *(_OWORD *)v354;
            *(void *)((char *)v353 + 13) = *(void *)(v354 + 13);
            *(_OWORD *)((char *)v353 + 24) = *(_OWORD *)(v354 + 24);
            *(_OWORD *)((char *)v353 + 40) = *(_OWORD *)(v354 + 40);
            uint64_t v358 = *(int *)(v355 + 28);
            v609 = (char *)v353 + v358;
            uint64_t v359 = &v354[v358];
            uint64_t v360 = sub_23309AF80();
            uint64_t v361 = *(void *)(v360 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v361 + 48))(v359, 1, v360))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v609, v359, *(void *)(*(void *)(v362 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v361 + 32))(v609, v359, v360);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v361 + 56))(v609, 0, 1, v360);
            }
            uint64_t v11 = v638;
            uint64_t v49 = v613;
            *(_OWORD *)((char *)v353 + *(int *)(v355 + 32)) = *(_OWORD *)&v354[*(int *)(v355 + 32)];
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v356 + 56))(v353, 0, 1, v355);
          }
          unint64_t v4 = v646;
          a3 = v648;
          uint64_t v10 = v650;
          *(void *)(v8 + v49[18]) = *(void *)&v9[v49[18]];
          *(_OWORD *)(v8 + v49[19]) = *(_OWORD *)&v9[v49[19]];
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy((void *)v8, v9, *(void *)(v11 + 64));
          break;
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_201;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    sub_232F7CB8C(v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_8:
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    size_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
LABEL_9:
    memcpy((void *)v8, v9, v23);
    goto LABEL_201;
  }
  if (a1 != v4)
  {
    sub_232F7CB8C(v8, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v647 = v4;
    uint64_t v649 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        uint64_t v24 = (int *)type metadata accessor for ModelsDSTU2.Condition(0);
        uint64_t v25 = v24[6];
        long long v26 = (_OWORD *)(v8 + v25);
        uint64_t v27 = &v9[v25];
        uint64_t v28 = type metadata accessor for Reference();
        uint64_t v29 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          unint64_t v641 = v24;
          long long v101 = *((_OWORD *)v27 + 1);
          *long long v26 = *(_OWORD *)v27;
          v26[1] = v101;
          uint64_t v102 = *(int *)(v28 + 24);
          uint64_t v103 = (_OWORD *)((char *)v26 + v102);
          long long v104 = &v27[v102];
          uint64_t v105 = type metadata accessor for Identifier();
          uint64_t v106 = *(void (***)(void))(v105 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v106[6])(v104, 1, v105))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
            uint64_t v24 = v641;
          }
          else
          {
            uint64_t v603 = v106;
            uint64_t v618 = v105;
            long long v184 = *((_OWORD *)v104 + 1);
            *uint64_t v103 = *(_OWORD *)v104;
            v103[1] = v184;
            *((void *)v103 + 4) = *((void *)v104 + 4);
            uint64_t v185 = *(int *)(v105 + 24);
            v630 = (char *)v103;
            __dstf = (char *)v103 + v185;
            long long v186 = &v104[v185];
            uint64_t v187 = sub_23309AF80();
            uint64_t v188 = *(void *)(v187 - 8);
            uint64_t v189 = v187;
            if ((*(unsigned int (**)(char *, uint64_t))(v188 + 48))(v186, 1))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dstf, v186, *(void *)(*(void *)(v190 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v188 + 32))(__dstf, v186, v189);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(__dstf, 0, 1, v189);
            }
            uint64_t v24 = v641;
            *(_OWORD *)&v630[*(int *)(v618 + 28)] = *(_OWORD *)&v104[*(int *)(v618 + 28)];
            v603[7]();
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        uint64_t v397 = v24[7];
        uint64_t v398 = (char *)(v8 + v397);
        uint64_t v399 = &v9[v397];
        uint64_t v400 = type metadata accessor for FHIRDateTime();
        __dstl = *(void **)(v400 - 8);
        v644 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstl[6];
        uint64_t v610 = (int *)v400;
        if (v644(v399, 1, v400))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v398, v399, *(void *)(*(void *)(v401 - 8) + 64));
        }
        else
        {
          *uint64_t v398 = *v399;
          *((void *)v398 + 1) = *((void *)v399 + 1);
          *((_DWORD *)v398 + 4) = *((_DWORD *)v399 + 4);
          *(_OWORD *)(v398 + 24) = *(_OWORD *)(v399 + 24);
          *(_OWORD *)(v398 + 40) = *(_OWORD *)(v399 + 40);
          *((void *)v398 + 7) = *((void *)v399 + 7);
          uint64_t v402 = *(int *)(v400 + 28);
          uint64_t v403 = &v398[v402];
          uint64_t v404 = &v399[v402];
          uint64_t v405 = sub_23309B300();
          uint64_t v406 = *(void *)(v405 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v406 + 48))(v404, 1, v405))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v403, v404, *(void *)(*(void *)(v407 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v406 + 32))(v403, v404, v405);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v406 + 56))(v403, 0, 1, v405);
          }
          uint64_t v400 = (uint64_t)v610;
          *(_OWORD *)&v398[v610[8]] = *(_OWORD *)&v399[v610[8]];
          ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v398, 0, 1, v610);
        }
        uint64_t v408 = v24[8];
        uint64_t v409 = v8 + v408;
        uint64_t v410 = &v9[v408];
        *(_OWORD *)uint64_t v409 = *(_OWORD *)v410;
        *(void *)(v409 + 16) = *((void *)v410 + 2);
        uint64_t v411 = v24[9];
        uint64_t v412 = v8 + v411;
        uint64_t v413 = &v9[v411];
        *(void *)(v412 + 16) = *((void *)v413 + 2);
        *(_OWORD *)uint64_t v412 = *(_OWORD *)v413;
        *(_OWORD *)(v8 + v24[10]) = *(_OWORD *)&v9[v24[10]];
        *(_OWORD *)(v8 + v24[11]) = *(_OWORD *)&v9[v24[11]];
        uint64_t v414 = v24[12];
        uint64_t v415 = v8 + v414;
        uint64_t v416 = &v9[v414];
        *(_OWORD *)uint64_t v415 = *(_OWORD *)v416;
        *(void *)(v415 + 16) = *((void *)v416 + 2);
        *(void *)(v8 + v24[13]) = *(void *)&v9[v24[13]];
        uint64_t v417 = v24[14];
        uint64_t v418 = (char *)(v8 + v417);
        uint64_t v419 = &v9[v417];
        if (v644(&v9[v417], 1, v400))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v418, v419, *(void *)(*(void *)(v420 - 8) + 64));
        }
        else
        {
          *uint64_t v418 = *v419;
          *((void *)v418 + 1) = *((void *)v419 + 1);
          *((_DWORD *)v418 + 4) = *((_DWORD *)v419 + 4);
          *(_OWORD *)(v418 + 24) = *(_OWORD *)(v419 + 24);
          *(_OWORD *)(v418 + 40) = *(_OWORD *)(v419 + 40);
          *((void *)v418 + 7) = *((void *)v419 + 7);
          uint64_t v421 = *(int *)(v400 + 28);
          long long v422 = &v418[v421];
          uint64_t v423 = &v419[v421];
          uint64_t v424 = sub_23309B300();
          uint64_t v425 = *(void *)(v424 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v425 + 48))(v423, 1, v424))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v422, v423, *(void *)(*(void *)(v426 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v425 + 32))(v422, v423, v424);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v425 + 56))(v422, 0, 1, v424);
          }
          uint64_t v400 = (uint64_t)v610;
          *(_OWORD *)&v418[v610[8]] = *(_OWORD *)&v419[v610[8]];
          ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v418, 0, 1, v610);
        }
        uint64_t v427 = v24[15];
        uint64_t v428 = (char *)(v8 + v427);
        uint64_t v429 = &v9[v427];
        uint64_t v430 = type metadata accessor for Period();
        v568 = *(void **)(v430 - 8);
        uint64_t v579 = (unsigned int (*)(char *, uint64_t, uint64_t))v568[6];
        uint64_t v621 = v430;
        if (v579(v429, 1, v430))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v428, v429, *(void *)(*(void *)(v431 - 8) + 64));
        }
        else
        {
          if (v644(v429, 1, v400))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v428, v429, *(void *)(*(void *)(v432 - 8) + 64));
          }
          else
          {
            *uint64_t v428 = *v429;
            *((void *)v428 + 1) = *((void *)v429 + 1);
            *((_DWORD *)v428 + 4) = *((_DWORD *)v429 + 4);
            *(_OWORD *)(v428 + 24) = *(_OWORD *)(v429 + 24);
            *(_OWORD *)(v428 + 40) = *(_OWORD *)(v429 + 40);
            *((void *)v428 + 7) = *((void *)v429 + 7);
            uint64_t v433 = *(int *)(v400 + 28);
            v553 = &v428[v433];
            uint64_t v434 = &v429[v433];
            uint64_t v435 = sub_23309B300();
            uint64_t v436 = *(void *)(v435 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v436 + 48))(v434, 1, v435))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v553, v434, *(void *)(*(void *)(v437 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v436 + 32))(v553, v434, v435);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v436 + 56))(v553, 0, 1, v435);
            }
            uint64_t v400 = (uint64_t)v610;
            uint64_t v430 = v621;
            *(_OWORD *)&v428[v610[8]] = *(_OWORD *)&v429[v610[8]];
            ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v428, 0, 1, v610);
          }
          uint64_t v475 = *(int *)(v430 + 20);
          uint64_t v476 = &v428[v475];
          uint64_t v477 = &v429[v475];
          if (v644(v477, 1, v400))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v476, v477, *(void *)(*(void *)(v478 - 8) + 64));
          }
          else
          {
            *uint64_t v476 = *v477;
            *((void *)v476 + 1) = *((void *)v477 + 1);
            *((_DWORD *)v476 + 4) = *((_DWORD *)v477 + 4);
            *(_OWORD *)(v476 + 24) = *(_OWORD *)(v477 + 24);
            *(_OWORD *)(v476 + 40) = *(_OWORD *)(v477 + 40);
            *((void *)v476 + 7) = *((void *)v477 + 7);
            uint64_t v479 = *(int *)(v400 + 28);
            v560 = &v476[v479];
            uint64_t v480 = &v477[v479];
            uint64_t v481 = sub_23309B300();
            __src = *(void (***)(void *, const void *, uint64_t))(v481 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v480, 1, v481))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v560, v480, *(void *)(*(void *)(v482 - 8) + 64));
            }
            else
            {
              __src[4](v560, v480, v481);
              ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(v560, 0, 1, v481);
            }
            uint64_t v400 = (uint64_t)v610;
            *(_OWORD *)&v476[v610[8]] = *(_OWORD *)&v477[v610[8]];
            ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v476, 0, 1, v610);
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v568[7])(v428, 0, 1, v621);
        }
        *(_OWORD *)(v8 + v24[16]) = *(_OWORD *)&v9[v24[16]];
        uint64_t v517 = v24[17];
        v518 = (char *)(v8 + v517);
        long long v519 = &v9[v517];
        if (v644(&v9[v517], 1, v400))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v518, v519, *(void *)(*(void *)(v520 - 8) + 64));
          a3 = v649;
          long long v521 = v579;
        }
        else
        {
          char *v518 = *v519;
          *((void *)v518 + 1) = *((void *)v519 + 1);
          *((_DWORD *)v518 + 4) = *((_DWORD *)v519 + 4);
          *(_OWORD *)(v518 + 24) = *(_OWORD *)(v519 + 24);
          *(_OWORD *)(v518 + 40) = *(_OWORD *)(v519 + 40);
          *((void *)v518 + 7) = *((void *)v519 + 7);
          uint64_t v522 = *(int *)(v400 + 28);
          uint64_t v523 = &v518[v522];
          v524 = &v519[v522];
          uint64_t v525 = sub_23309B300();
          uint64_t v526 = *(void *)(v525 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v526 + 48))(v524, 1, v525))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v523, v524, *(void *)(*(void *)(v527 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v526 + 32))(v523, v524, v525);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v526 + 56))(v523, 0, 1, v525);
          }
          uint64_t v400 = (uint64_t)v610;
          *(_OWORD *)&v518[v610[8]] = *(_OWORD *)&v519[v610[8]];
          ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v518, 0, 1, v610);
          a3 = v649;
          long long v521 = v579;
        }
        uint64_t v528 = v24[18];
        v529 = (char *)(v8 + v528);
        uint64_t v530 = &v9[v528];
        if (v521(&v9[v528], 1, v621))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v529, v530, *(void *)(*(void *)(v531 - 8) + 64));
        }
        else
        {
          if (v644(v530, 1, v400))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v529, v530, *(void *)(*(void *)(v532 - 8) + 64));
          }
          else
          {
            char *v529 = *v530;
            *((void *)v529 + 1) = *((void *)v530 + 1);
            *((_DWORD *)v529 + 4) = *((_DWORD *)v530 + 4);
            *(_OWORD *)(v529 + 24) = *(_OWORD *)(v530 + 24);
            *(_OWORD *)(v529 + 40) = *(_OWORD *)(v530 + 40);
            *((void *)v529 + 7) = *((void *)v530 + 7);
            uint64_t v533 = *(int *)(v400 + 28);
            uint64_t v534 = &v529[v533];
            uint64_t v535 = &v530[v533];
            uint64_t v536 = sub_23309B300();
            uint64_t v537 = *(void *)(v536 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v537 + 48))(v535, 1, v536))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v534, v535, *(void *)(*(void *)(v538 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v537 + 32))(v534, v535, v536);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v537 + 56))(v534, 0, 1, v536);
            }
            uint64_t v400 = (uint64_t)v610;
            *(_OWORD *)&v529[v610[8]] = *(_OWORD *)&v530[v610[8]];
            ((void (*)(char *, void, uint64_t, int *))__dstl[7])(v529, 0, 1, v610);
          }
          uint64_t v539 = *(int *)(v621 + 20);
          uint64_t v540 = &v529[v539];
          v541 = &v530[v539];
          if (v644(v541, 1, v400))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v540, v541, *(void *)(*(void *)(v542 - 8) + 64));
          }
          else
          {
            char *v540 = *v541;
            *((void *)v540 + 1) = *((void *)v541 + 1);
            *((_DWORD *)v540 + 4) = *((_DWORD *)v541 + 4);
            *(_OWORD *)(v540 + 24) = *(_OWORD *)(v541 + 24);
            *(_OWORD *)(v540 + 40) = *(_OWORD *)(v541 + 40);
            *((void *)v540 + 7) = *((void *)v541 + 7);
            uint64_t v543 = *(int *)(v400 + 28);
            v637 = &v540[v543];
            uint64_t v544 = &v541[v543];
            uint64_t v545 = sub_23309B300();
            uint64_t v546 = *(void *)(v545 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v546 + 48))(v544, 1, v545))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v637, v544, *(void *)(*(void *)(v547 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v546 + 32))(v637, v544, v545);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v546 + 56))(v637, 0, 1, v545);
            }
            *(_OWORD *)&v540[v610[8]] = *(_OWORD *)&v541[v610[8]];
            ((void (*)(char *, void, uint64_t))__dstl[7])(v540, 0, 1);
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v568[7])(v529, 0, 1, v621);
          a3 = v649;
        }
        *(_OWORD *)(v8 + v24[19]) = *(_OWORD *)&v9[v24[19]];
        *(_OWORD *)(v8 + v24[20]) = *(_OWORD *)&v9[v24[20]];
        *(_OWORD *)(v8 + v24[21]) = *(_OWORD *)&v9[v24[21]];
        goto LABEL_305;
      case 2u:
        long long v62 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v62;
        long long v63 = *((_OWORD *)v9 + 3);
        *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
        *(_OWORD *)(v8 + 48) = v63;
        *(void *)(v8 + 64) = *((void *)v9 + 8);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
        uint64_t v64 = (int *)type metadata accessor for ModelsDSTU2.DiagnosticReport(0);
        uint64_t v65 = v64[9];
        uint64_t v66 = (char *)(v8 + v65);
        uint64_t v67 = &v9[v65];
        uint64_t v68 = type metadata accessor for FHIRDateTime();
        uint64_t v614 = *(void *)(v68 - 8);
        unint64_t v639 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v614 + 48);
        uint64_t v626 = v64;
        if (v639(v67, 1, v68))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v66, v67, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          *uint64_t v66 = *v67;
          *((void *)v66 + 1) = *((void *)v67 + 1);
          *((_DWORD *)v66 + 4) = *((_DWORD *)v67 + 4);
          *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
          *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
          *((void *)v66 + 7) = *((void *)v67 + 7);
          uint64_t v116 = *(int *)(v68 + 28);
          uint64_t v601 = &v66[v116];
          uint64_t v117 = &v67[v116];
          uint64_t v118 = sub_23309B300();
          uint64_t v119 = *(void *)(v118 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v601, v117, *(void *)(*(void *)(v120 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v601, v117, v118);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v601, 0, 1, v118);
          }
          *(_OWORD *)&v66[*(int *)(v68 + 32)] = *(_OWORD *)&v67[*(int *)(v68 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v614 + 56))(v66, 0, 1, v68);
          uint64_t v64 = v626;
        }
        uint64_t v232 = v64[10];
        uint64_t v233 = (char *)(v8 + v232);
        uint64_t v234 = &v9[v232];
        uint64_t v235 = type metadata accessor for Period();
        uint64_t v236 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v235 - 8);
        if (v236[6](v234, 1, v235))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v233, v234, *(void *)(*(void *)(v237 - 8) + 64));
        }
        else
        {
          v606 = (void (**)(char *, void, uint64_t, uint64_t))v236;
          if (v639(v234, 1, v68))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v233, v234, *(void *)(*(void *)(v238 - 8) + 64));
          }
          else
          {
            *uint64_t v233 = *v234;
            *((void *)v233 + 1) = *((void *)v234 + 1);
            *((_DWORD *)v233 + 4) = *((_DWORD *)v234 + 4);
            *(_OWORD *)(v233 + 24) = *(_OWORD *)(v234 + 24);
            *(_OWORD *)(v233 + 40) = *(_OWORD *)(v234 + 40);
            *((void *)v233 + 7) = *((void *)v234 + 7);
            uint64_t v313 = *(int *)(v68 + 28);
            __dstj = &v233[v313];
            uint64_t v314 = &v234[v313];
            uint64_t v315 = sub_23309B300();
            v565 = *(void (***)(void *, const void *, uint64_t))(v315 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v565[6])(v314, 1, v315))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dstj, v314, *(void *)(*(void *)(v316 - 8) + 64));
            }
            else
            {
              v565[4](__dstj, v314, v315);
              ((void (*)(char *, void, uint64_t, uint64_t))v565[7])(__dstj, 0, 1, v315);
            }
            *(_OWORD *)&v233[*(int *)(v68 + 32)] = *(_OWORD *)&v234[*(int *)(v68 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v614 + 56))(v233, 0, 1, v68);
            uint64_t v64 = v626;
          }
          uint64_t v438 = *(int *)(v235 + 20);
          long long v439 = &v233[v438];
          long long v440 = &v234[v438];
          if (v639(v440, 1, v68))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v439, v440, *(void *)(*(void *)(v441 - 8) + 64));
          }
          else
          {
            *long long v439 = *v440;
            *((void *)v439 + 1) = *((void *)v440 + 1);
            *((_DWORD *)v439 + 4) = *((_DWORD *)v440 + 4);
            *(_OWORD *)(v439 + 24) = *(_OWORD *)(v440 + 24);
            *(_OWORD *)(v439 + 40) = *(_OWORD *)(v440 + 40);
            *((void *)v439 + 7) = *((void *)v440 + 7);
            uint64_t v442 = *(int *)(v68 + 28);
            __dstm = &v439[v442];
            uint64_t v443 = &v440[v442];
            uint64_t v444 = sub_23309B300();
            uint64_t v569 = *(void (***)(void *, const void *, void))(v444 - 8);
            uint64_t v580 = v443;
            uint64_t v445 = v443;
            uint64_t v446 = v444;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v569[6])(v445, 1, v444))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dstm, v580, *(void *)(*(void *)(v447 - 8) + 64));
            }
            else
            {
              v569[4](__dstm, v580, v446);
              ((void (*)(char *, void, uint64_t, uint64_t))v569[7])(__dstm, 0, 1, v446);
            }
            *(_OWORD *)&v439[*(int *)(v68 + 32)] = *(_OWORD *)&v440[*(int *)(v68 + 32)];
            uint64_t v64 = v626;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v614 + 56))(v439, 0, 1, v68);
          }
          v606[7](v233, 0, 1, v235);
        }
        a3 = v649;
        uint64_t v483 = v64[11];
        uint64_t v484 = (char *)(v8 + v483);
        long long v485 = &v9[v483];
        if (v639(&v9[v483], 1, v68))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v484, v485, *(void *)(*(void *)(v486 - 8) + 64));
          unint64_t v4 = v647;
        }
        else
        {
          char *v484 = *v485;
          *((void *)v484 + 1) = *((void *)v485 + 1);
          *((_DWORD *)v484 + 4) = *((_DWORD *)v485 + 4);
          *(_OWORD *)(v484 + 24) = *(_OWORD *)(v485 + 24);
          *(_OWORD *)(v484 + 40) = *(_OWORD *)(v485 + 40);
          *((void *)v484 + 7) = *((void *)v485 + 7);
          uint64_t v487 = *(int *)(v68 + 28);
          uint64_t v488 = &v484[v487];
          uint64_t v489 = &v485[v487];
          uint64_t v490 = sub_23309B300();
          uint64_t v491 = *(void *)(v490 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v491 + 48))(v489, 1, v490))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v488, v489, *(void *)(*(void *)(v492 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v491 + 32))(v488, v489, v490);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v491 + 56))(v488, 0, 1, v490);
          }
          a3 = v649;
          *(_OWORD *)&v484[*(int *)(v68 + 32)] = *(_OWORD *)&v485[*(int *)(v68 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v614 + 56))(v484, 0, 1, v68);
          unint64_t v4 = v647;
          uint64_t v64 = v626;
        }
        *(_OWORD *)(v8 + v64[12]) = *(_OWORD *)&v9[v64[12]];
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        long long v70 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v70;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        uint64_t v71 = (int *)type metadata accessor for ModelsDSTU2.Immunization(0);
        uint64_t v72 = v71[8];
        uint64_t v73 = (char *)(v8 + v72);
        uint64_t v74 = &v9[v72];
        uint64_t v75 = type metadata accessor for FHIRDateTime();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
        }
        else
        {
          uint64_t v616 = v71;
          *uint64_t v73 = *v74;
          *((void *)v73 + 1) = *((void *)v74 + 1);
          *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
          *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
          *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
          *((void *)v73 + 7) = *((void *)v74 + 7);
          uint64_t v121 = *(int *)(v75 + 28);
          v642 = &v73[v121];
          uint64_t v122 = &v74[v121];
          uint64_t v123 = sub_23309B300();
          uint64_t v124 = *(void *)(v123 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v642, v122, *(void *)(*(void *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v642, v122, v123);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v642, 0, 1, v123);
          }
          *(_OWORD *)&v73[*(int *)(v75 + 32)] = *(_OWORD *)&v74[*(int *)(v75 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          uint64_t v71 = v616;
        }
        uint64_t v239 = v71[9];
        uint64_t v240 = (void *)(v8 + v239);
        uint64_t v241 = &v9[v239];
        *uint64_t v240 = *(void *)v241;
        *(void *)((char *)v240 + 5) = *(void *)(v241 + 5);
        *(void *)(v8 + v71[10]) = *(void *)&v9[v71[10]];
        *(unsigned char *)(v8 + v71[11]) = v9[v71[11]];
        *(void *)(v8 + v71[12]) = *(void *)&v9[v71[12]];
        uint64_t v242 = v71[13];
        uint64_t v243 = v8 + v242;
        uint64_t v244 = &v9[v242];
        *(_OWORD *)uint64_t v243 = *(_OWORD *)v244;
        *(void *)(v243 + 16) = *((void *)v244 + 2);
        *(unsigned char *)(v8 + v71[14]) = v9[v71[14]];
        uint64_t v245 = v71[15];
        uint64_t v246 = (_OWORD *)(v8 + v245);
        uint64_t v247 = &v9[v245];
        uint64_t v248 = type metadata accessor for Reference();
        uint64_t v249 = *(void *)(v248 - 8);
        uint64_t v250 = *(unsigned int (**)(void, void, void))(v249 + 48);
        if (v250(v247, 1, v248))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v246, v247, *(void *)(*(void *)(v251 - 8) + 64));
        }
        else
        {
          uint64_t v632 = v250;
          uint64_t v643 = v249;
          long long v252 = *((_OWORD *)v247 + 1);
          _OWORD *v246 = *(_OWORD *)v247;
          v246[1] = v252;
          uint64_t v619 = v248;
          uint64_t v253 = *(int *)(v248 + 24);
          uint64_t v254 = (_OWORD *)((char *)v246 + v253);
          uint64_t v255 = &v247[v253];
          uint64_t v256 = type metadata accessor for Identifier();
          uint64_t v257 = *(void *)(v256 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v255, 1, v256))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v254, v255, *(void *)(*(void *)(v258 - 8) + 64));
            uint64_t v250 = (unsigned int (*)(void, void, void))v632;
          }
          else
          {
            uint64_t v578 = v257;
            __dstk = (int *)v256;
            long long v317 = *((_OWORD *)v255 + 1);
            *uint64_t v254 = *(_OWORD *)v255;
            v254[1] = v317;
            *((void *)v254 + 4) = *((void *)v255 + 4);
            uint64_t v318 = *(int *)(v256 + 24);
            v608 = (char *)v254;
            uint64_t v566 = (char *)v254 + v318;
            v319 = &v255[v318];
            uint64_t v320 = sub_23309AF80();
            uint64_t v321 = *(void *)(v320 - 8);
            uint64_t v322 = v320;
            if ((*(unsigned int (**)(char *, uint64_t))(v321 + 48))(v319, 1))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v566, v319, *(void *)(*(void *)(v323 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v321 + 32))(v566, v319, v322);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v321 + 56))(v566, 0, 1, v322);
            }
            uint64_t v250 = (unsigned int (*)(void, void, void))v632;
            *(_OWORD *)&v608[__dstk[7]] = *(_OWORD *)&v255[__dstk[7]];
            (*(void (**)(void))(v578 + 56))();
          }
          uint64_t v249 = v643;
          uint64_t v248 = v619;
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v643 + 56))(v246, 0, 1, v619);
        }
        *(_OWORD *)(v8 + v71[16]) = *(_OWORD *)&v9[v71[16]];
        uint64_t v448 = v71[17];
        long long v449 = (_OWORD *)(v8 + v448);
        long long v450 = &v9[v448];
        if (v250(&v9[v448], 1, v248))
        {
          sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v449, v450, *(void *)(*(void *)(v451 - 8) + 64));
        }
        else
        {
          uint64_t v645 = v249;
          long long v452 = *((_OWORD *)v450 + 1);
          *long long v449 = *(_OWORD *)v450;
          v449[1] = v452;
          uint64_t v453 = *(int *)(v248 + 24);
          uint64_t v454 = (_OWORD *)((char *)v449 + v453);
          uint64_t v455 = &v450[v453];
          uint64_t v456 = type metadata accessor for Identifier();
          uint64_t v457 = *(void *)(v456 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v457 + 48))(v455, 1, v456))
          {
            sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v454, v455, *(void *)(*(void *)(v458 - 8) + 64));
          }
          else
          {
            long long v459 = *((_OWORD *)v455 + 1);
            _OWORD *v454 = *(_OWORD *)v455;
            v454[1] = v459;
            *((void *)v454 + 4) = *((void *)v455 + 4);
            uint64_t v460 = *(int *)(v456 + 24);
            uint64_t v622 = v454;
            uint64_t v635 = (char *)v454 + v460;
            uint64_t v461 = &v455[v460];
            uint64_t v462 = sub_23309AF80();
            __dstn = *(void (***)(void *, void *, void))(v462 - 8);
            v611 = v461;
            long long v463 = v461;
            uint64_t v464 = v462;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstn[6])(v463, 1, v462))
            {
              sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v635, v611, *(void *)(*(void *)(v465 - 8) + 64));
            }
            else
            {
              __dstn[4](v635, v611, v464);
              ((void (*)(char *, void, uint64_t, uint64_t))__dstn[7])(v635, 0, 1, v464);
            }
            *(_OWORD *)((char *)v622 + *(int *)(v456 + 28)) = *(_OWORD *)&v455[*(int *)(v456 + 28)];
            (*(void (**)(void))(v457 + 56))();
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v645 + 56))(v449, 0, 1, v248);
        }
        a3 = v649;
        *(_OWORD *)(v8 + v71[18]) = *(_OWORD *)&v9[v71[18]];
LABEL_305:
        swift_storeEnumTagMultiPayload();
        unint64_t v4 = v647;
        break;
      case 4u:
        long long v78 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v78;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
        *(void *)(v8 + 72) = *((void *)v9 + 9);
        *(void *)(v8 + 96) = *((void *)v9 + 12);
        *(_OWORD *)(v8 + 80) = *((_OWORD *)v9 + 5);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(v9 + 104);
        uint64_t v79 = (int *)type metadata accessor for ModelsDSTU2.Observation(0);
        uint64_t v80 = v79[11];
        uint64_t v81 = (char *)(v8 + v80);
        uint64_t v82 = &v9[v80];
        uint64_t v83 = type metadata accessor for FHIRDateTime();
        v598 = *(void **)(v83 - 8);
        v627 = (unsigned int (*)(char *, uint64_t, uint64_t))v598[6];
        uint64_t v640 = v79;
        if (v627(v82, 1, v83))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          *uint64_t v81 = *v82;
          *((void *)v81 + 1) = *((void *)v82 + 1);
          *((_DWORD *)v81 + 4) = *((_DWORD *)v82 + 4);
          *(_OWORD *)(v81 + 24) = *(_OWORD *)(v82 + 24);
          *(_OWORD *)(v81 + 40) = *(_OWORD *)(v82 + 40);
          *((void *)v81 + 7) = *((void *)v82 + 7);
          uint64_t v126 = *(int *)(v83 + 28);
          __dstc = &v81[v126];
          uint64_t v127 = &v82[v126];
          uint64_t v128 = sub_23309B300();
          uint64_t v129 = *(void *)(v128 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstc, v127, *(void *)(*(void *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v129 + 32))(__dstc, v127, v128);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(__dstc, 0, 1, v128);
          }
          *(_OWORD *)&v81[*(int *)(v83 + 32)] = *(_OWORD *)&v82[*(int *)(v83 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v598[7])(v81, 0, 1, v83);
          uint64_t v79 = v640;
          unint64_t v4 = v647;
        }
        uint64_t v259 = v79[12];
        uint64_t v260 = (char *)(v8 + v259);
        uint64_t v261 = &v9[v259];
        uint64_t v262 = type metadata accessor for Period();
        uint64_t v263 = *(void *)(v262 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
        {
          sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v260, v261, *(void *)(*(void *)(v264 - 8) + 64));
        }
        else
        {
          uint64_t v575 = v263;
          __dsth = v260;
          if (v627(v261, 1, v83))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v260, v261, *(void *)(*(void *)(v265 - 8) + 64));
          }
          else
          {
            *uint64_t v260 = *v261;
            *((void *)v260 + 1) = *((void *)v261 + 1);
            *((_DWORD *)v260 + 4) = *((_DWORD *)v261 + 4);
            *(_OWORD *)(v260 + 24) = *(_OWORD *)(v261 + 24);
            *(_OWORD *)(v260 + 40) = *(_OWORD *)(v261 + 40);
            *((void *)v260 + 7) = *((void *)v261 + 7);
            uint64_t v324 = *(int *)(v83 + 28);
            v567 = &v260[v324];
            uint64_t v325 = &v261[v324];
            uint64_t v326 = sub_23309B300();
            uint64_t v327 = *(void *)(v326 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v327 + 48))(v325, 1, v326))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v567, v325, *(void *)(*(void *)(v328 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v327 + 32))(v567, v325, v326);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v327 + 56))(v567, 0, 1, v326);
            }
            uint64_t v260 = __dsth;
            *(_OWORD *)&__dsth[*(int *)(v83 + 32)] = *(_OWORD *)&v261[*(int *)(v83 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v598[7])(__dsth, 0, 1, v83);
            uint64_t v79 = v640;
            unint64_t v4 = v647;
          }
          uint64_t v466 = *(int *)(v262 + 20);
          uint64_t v467 = &v260[v466];
          uint64_t v468 = &v261[v466];
          if (v627(v468, 1, v83))
          {
            sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v467, v468, *(void *)(*(void *)(v469 - 8) + 64));
          }
          else
          {
            *uint64_t v467 = *v468;
            *((void *)v467 + 1) = *((void *)v468 + 1);
            *((_DWORD *)v467 + 4) = *((_DWORD *)v468 + 4);
            *(_OWORD *)(v467 + 24) = *(_OWORD *)(v468 + 24);
            *(_OWORD *)(v467 + 40) = *(_OWORD *)(v468 + 40);
            *((void *)v467 + 7) = *((void *)v468 + 7);
            uint64_t v470 = *(int *)(v83 + 28);
            uint64_t v570 = &v467[v470];
            uint64_t v471 = &v468[v470];
            uint64_t v472 = sub_23309B300();
            uint64_t v473 = *(void *)(v472 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v473 + 48))(v471, 1, v472))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v570, v471, *(void *)(*(void *)(v474 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v473 + 32))(v570, v471, v472);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v473 + 56))(v570, 0, 1, v472);
            }
            uint64_t v79 = v640;
            unint64_t v4 = v647;
            *(_OWORD *)&v467[*(int *)(v83 + 32)] = *(_OWORD *)&v468[*(int *)(v83 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v598[7])(v467, 0, 1, v83);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v575 + 56))(__dsth, 0, 1, v262);
        }
        uint64_t v493 = v79[13];
        uint64_t v494 = (char *)(v8 + v493);
        uint64_t v495 = &v9[v493];
        if (v627(&v9[v493], 1, v83))
        {
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v494, v495, *(void *)(*(void *)(v496 - 8) + 64));
        }
        else
        {
          char *v494 = *v495;
          *((void *)v494 + 1) = *((void *)v495 + 1);
          *((_DWORD *)v494 + 4) = *((_DWORD *)v495 + 4);
          *(_OWORD *)(v494 + 24) = *(_OWORD *)(v495 + 24);
          *(_OWORD *)(v494 + 40) = *(_OWORD *)(v495 + 40);
          *((void *)v494 + 7) = *((void *)v495 + 7);
          uint64_t v497 = *(int *)(v83 + 28);
          uint64_t v498 = &v494[v497];
          uint64_t v499 = &v495[v497];
          uint64_t v500 = sub_23309B300();
          uint64_t v501 = *(void *)(v500 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v501 + 48))(v499, 1, v500))
          {
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v498, v499, *(void *)(*(void *)(v502 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v501 + 32))(v498, v499, v500);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v501 + 56))(v498, 0, 1, v500);
          }
          unint64_t v4 = v647;
          *(_OWORD *)&v494[*(int *)(v83 + 32)] = *(_OWORD *)&v495[*(int *)(v83 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v598[7])(v494, 0, 1, v83);
          uint64_t v79 = v640;
        }
        *(void *)(v8 + v79[14]) = *(void *)&v9[v79[14]];
        *(_OWORD *)(v8 + v79[15]) = *(_OWORD *)&v9[v79[15]];
        uint64_t v503 = v79[16];
        uint64_t v504 = v8 + v503;
        uint64_t v505 = &v9[v503];
        *(_OWORD *)uint64_t v504 = *(_OWORD *)v505;
        *(void *)(v504 + 16) = *((void *)v505 + 2);
        uint64_t v506 = v79[17];
        long long v507 = (_OWORD *)(v8 + v506);
        uint64_t v508 = &v9[v506];
        uint64_t v509 = type metadata accessor for Quantity();
        uint64_t v510 = *(void *)(v509 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v510 + 48))(v508, 1, v509))
        {
          sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v507, v508, *(void *)(*(void *)(v511 - 8) + 64));
        }
        else
        {
          _OWORD *v507 = *(_OWORD *)v508;
          *(void *)((char *)v507 + 13) = *(void *)(v508 + 13);
          *(_OWORD *)((char *)v507 + 24) = *(_OWORD *)(v508 + 24);
          *(_OWORD *)((char *)v507 + 40) = *(_OWORD *)(v508 + 40);
          uint64_t v512 = *(int *)(v509 + 28);
          v636 = (char *)v507 + v512;
          uint64_t v513 = &v508[v512];
          uint64_t v514 = sub_23309AF80();
          uint64_t v515 = *(void *)(v514 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v515 + 48))(v513, 1, v514))
          {
            sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v636, v513, *(void *)(*(void *)(v516 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v515 + 32))(v636, v513, v514);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v515 + 56))(v636, 0, 1, v514);
          }
          unint64_t v4 = v647;
          *(_OWORD *)((char *)v507 + *(int *)(v509 + 32)) = *(_OWORD *)&v508[*(int *)(v509 + 32)];
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v510 + 56))(v507, 0, 1, v509);
        }
        a3 = v649;
        *(void *)(v8 + v640[18]) = *(void *)&v9[v640[18]];
        *(_OWORD *)(v8 + v640[19]) = *(_OWORD *)&v9[v640[19]];
        swift_storeEnumTagMultiPayload();
        break;
      default:
        size_t v23 = *(void *)(v11 + 64);
        goto LABEL_9;
    }
  }
LABEL_201:
  uint64_t v393 = *(int *)(a3 + 24);
  uint64_t v394 = *(void *)((char *)a1 + v393);
  unint64_t v395 = *(void *)((char *)a1 + v393 + 8);
  *(_OWORD *)((char *)a1 + v393) = *(_OWORD *)((char *)v4 + v393);
  sub_232E9AA4C(v394, v395);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FB07C8);
}

uint64_t sub_232FB07C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Bundle.BundleEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FB08C8);
}

uint64_t sub_232FB08C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_232F7CA40(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_232FB09A0()
{
  sub_232F7CA40(319, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Condition(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[2];
    swift_bridgeObjectRetain();
    if (v8 != 1) {
      swift_bridgeObjectRetain();
    }
    a1[2] = v8;
    uint64_t v9 = v6[6];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)v3 + v9);
    uint64_t v12 = type metadata accessor for Reference();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v205 = v13;
      uint64_t v206 = v3;
      uint64_t v16 = v11[1];
      void *v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = v11[3];
      void v10[2] = v11[2];
      v10[3] = v17;
      uint64_t v18 = *(int *)(v12 + 24);
      uint64_t v207 = v6;
      __dst = (void *)((char *)v10 + v18);
      uint64_t v19 = (void *)((char *)v11 + v18);
      uint64_t v20 = type metadata accessor for Identifier();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
        uint64_t v3 = v206;
        uint64_t v6 = v207;
        uint64_t v24 = v205;
      }
      else
      {
        uint64_t v203 = v21;
        uint64_t v25 = v19[1];
        void *__dst = *v19;
        __dst[1] = v25;
        uint64_t v26 = v19[3];
        swift_bridgeObjectRetain();
        uint64_t v27 = v19;
        if (v26 == 1)
        {
          *((_OWORD *)__dst + 1) = *((_OWORD *)v19 + 1);
          __dst[4] = v19[4];
        }
        else
        {
          __dst[2] = v19[2];
          __dst[3] = v26;
          __dst[4] = v19[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v6 = v207;
        uint64_t v208 = (int *)v20;
        uint64_t v28 = *(int *)(v20 + 24);
        uint64_t v201 = (char *)__dst + v28;
        uint64_t v29 = (char *)v27 + v28;
        uint64_t v30 = sub_23309AF80();
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v201, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v201, v29, v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v201, 0, 1, v30);
        }
        uint64_t v3 = v206;
        uint64_t v24 = v205;
        uint64_t v33 = v208[7];
        uint64_t v34 = (void *)((char *)__dst + v33);
        uint64_t v35 = (void *)((char *)v27 + v33);
        uint64_t v36 = v35[1];
        *uint64_t v34 = *v35;
        v34[1] = v36;
        uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v203 + 56);
        swift_bridgeObjectRetain();
        v37(__dst, 0, 1, v208);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v12);
    }
    uint64_t v38 = v6[7];
    uint64_t v39 = (char *)a1 + v38;
    long long v40 = (char *)v3 + v38;
    uint64_t v41 = type metadata accessor for FHIRDateTime();
    __dsta = *(void **)(v41 - 8);
    uint64_t v42 = (unsigned int (*)(void, void, void))__dsta[6];
    uint64_t v209 = v42;
    if (v42(v40, 1, v41))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      unsigned char *v39 = *v40;
      *((void *)v39 + 1) = *((void *)v40 + 1);
      *((_DWORD *)v39 + 4) = *((_DWORD *)v40 + 4);
      uint64_t v44 = *((void *)v40 + 7);
      if (v44 == 1)
      {
        long long v45 = *(_OWORD *)(v40 + 40);
        *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 + 24);
        *(_OWORD *)(v39 + 40) = v45;
        *((void *)v39 + 7) = *((void *)v40 + 7);
      }
      else
      {
        v39[24] = v40[24];
        *(_WORD *)(v39 + 25) = *(_WORD *)(v40 + 25);
        *(_OWORD *)(v39 + 28) = *(_OWORD *)(v40 + 28);
        *((_DWORD *)v39 + 11) = *((_DWORD *)v40 + 11);
        *((void *)v39 + 6) = *((void *)v40 + 6);
        *((void *)v39 + 7) = v44;
        swift_bridgeObjectRetain();
      }
      uint64_t v46 = *(int *)(v41 + 28);
      uint64_t v47 = &v39[v46];
      long long v48 = &v40[v46];
      uint64_t v49 = sub_23309B300();
      uint64_t v50 = *(void *)(v49 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v50 + 16))(v47, v48, v49);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      uint64_t v42 = (unsigned int (*)(void, void, void))v209;
      uint64_t v52 = *(int *)(v41 + 32);
      uint64_t v53 = &v39[v52];
      uint64_t v54 = &v40[v52];
      uint64_t v55 = v54[1];
      *uint64_t v53 = *v54;
      v53[1] = v55;
      uint64_t v56 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v56(v39, 0, 1, v41);
    }
    uint64_t v57 = v6[8];
    uint64_t v58 = v6[9];
    uint64_t v59 = (void *)((char *)a1 + v57);
    uint64_t v60 = (void *)((char *)v3 + v57);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    v59[2] = v60[2];
    long long v62 = (char *)a1 + v58;
    long long v63 = (char *)v3 + v58;
    uint64_t v64 = *(void *)((char *)v3 + v58 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v64 == 1)
    {
      *(_OWORD *)long long v62 = *(_OWORD *)v63;
      *((void *)v62 + 2) = *((void *)v63 + 2);
    }
    else
    {
      *(void *)long long v62 = *(void *)v63;
      *((void *)v62 + 1) = v64;
      *((void *)v62 + 2) = *((void *)v63 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v65 = v6[10];
    uint64_t v66 = v6[11];
    uint64_t v67 = (void *)((char *)a1 + v65);
    uint64_t v68 = (void *)((char *)v3 + v65);
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    long long v70 = (void *)((char *)a1 + v66);
    uint64_t v71 = (void *)((char *)v3 + v66);
    uint64_t v72 = v71[1];
    *long long v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = v6[12];
    uint64_t v74 = (char *)a1 + v73;
    uint64_t v75 = (char *)v3 + v73;
    uint64_t v76 = *(void *)((char *)v3 + v73 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v76 == 1)
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      *((void *)v74 + 2) = *((void *)v75 + 2);
    }
    else
    {
      *(void *)uint64_t v74 = *(void *)v75;
      *((void *)v74 + 1) = v76;
      *((void *)v74 + 2) = *((void *)v75 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v77 = v6[14];
    *(void *)((char *)a1 + v6[13]) = *(void *)((char *)v3 + v6[13]);
    long long v78 = (char *)a1 + v77;
    uint64_t v79 = (char *)v3 + v77;
    swift_bridgeObjectRetain();
    if (v42(v79, 1, v41))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    }
    else
    {
      unsigned char *v78 = *v79;
      *((void *)v78 + 1) = *((void *)v79 + 1);
      *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
      uint64_t v81 = *((void *)v79 + 7);
      if (v81 == 1)
      {
        long long v82 = *(_OWORD *)(v79 + 40);
        *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
        *(_OWORD *)(v78 + 40) = v82;
        *((void *)v78 + 7) = *((void *)v79 + 7);
      }
      else
      {
        v78[24] = v79[24];
        *(_WORD *)(v78 + 25) = *(_WORD *)(v79 + 25);
        *(_OWORD *)(v78 + 28) = *(_OWORD *)(v79 + 28);
        *((_DWORD *)v78 + 11) = *((_DWORD *)v79 + 11);
        *((void *)v78 + 6) = *((void *)v79 + 6);
        *((void *)v78 + 7) = v81;
        swift_bridgeObjectRetain();
      }
      uint64_t v83 = *(int *)(v41 + 28);
      uint64_t v84 = &v78[v83];
      uint64_t v85 = &v79[v83];
      uint64_t v86 = sub_23309B300();
      uint64_t v87 = *(void *)(v86 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v87 + 16))(v84, v85, v86);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      }
      uint64_t v42 = (unsigned int (*)(void, void, void))v209;
      uint64_t v89 = *(int *)(v41 + 32);
      uint64_t v90 = &v78[v89];
      long long v91 = &v79[v89];
      uint64_t v92 = v91[1];
      *uint64_t v90 = *v91;
      v90[1] = v92;
      uint64_t v93 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v93(v78, 0, 1, v41);
    }
    uint64_t v94 = v6[15];
    uint64_t v95 = (char *)a1 + v94;
    uint64_t v96 = (char *)v3 + v94;
    uint64_t v97 = type metadata accessor for Period();
    uint64_t v202 = *(void **)(v97 - 8);
    uint64_t v98 = (unsigned int (*)(void, void, void))v202[6];
    uint64_t v204 = v97;
    if (v98(v96, 1, v97))
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
    }
    else
    {
      long long v199 = v98;
      if (v42(v96, 1, v41))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v95, v96, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        *uint64_t v95 = *v96;
        *((void *)v95 + 1) = *((void *)v96 + 1);
        *((_DWORD *)v95 + 4) = *((_DWORD *)v96 + 4);
        uint64_t v101 = *((void *)v96 + 7);
        if (v101 == 1)
        {
          long long v102 = *(_OWORD *)(v96 + 40);
          *(_OWORD *)(v95 + 24) = *(_OWORD *)(v96 + 24);
          *(_OWORD *)(v95 + 40) = v102;
          *((void *)v95 + 7) = *((void *)v96 + 7);
        }
        else
        {
          v95[24] = v96[24];
          *(_WORD *)(v95 + 25) = *(_WORD *)(v96 + 25);
          *(_OWORD *)(v95 + 28) = *(_OWORD *)(v96 + 28);
          *((_DWORD *)v95 + 11) = *((_DWORD *)v96 + 11);
          *((void *)v95 + 6) = *((void *)v96 + 6);
          *((void *)v95 + 7) = v101;
          swift_bridgeObjectRetain();
        }
        uint64_t v103 = *(int *)(v41 + 28);
        uint64_t v197 = &v95[v103];
        long long v104 = &v96[v103];
        uint64_t v105 = sub_23309B300();
        uint64_t v106 = *(void *)(v105 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v197, v104, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v106 + 16))(v197, v104, v105);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v106 + 56))(v197, 0, 1, v105);
        }
        uint64_t v42 = (unsigned int (*)(void, void, void))v209;
        uint64_t v108 = *(int *)(v41 + 32);
        uint64_t v109 = &v95[v108];
        uint64_t v110 = &v96[v108];
        uint64_t v111 = v110[1];
        *uint64_t v109 = *v110;
        v109[1] = v111;
        uint64_t v112 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v112(v95, 0, 1, v41);
      }
      uint64_t v113 = *(int *)(v97 + 20);
      uint64_t v114 = &v95[v113];
      uint64_t v115 = &v96[v113];
      if (v42(v115, 1, v41))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
      }
      else
      {
        unsigned char *v114 = *v115;
        *((void *)v114 + 1) = *((void *)v115 + 1);
        *((_DWORD *)v114 + 4) = *((_DWORD *)v115 + 4);
        uint64_t v117 = *((void *)v115 + 7);
        if (v117 == 1)
        {
          long long v118 = *(_OWORD *)(v115 + 40);
          *(_OWORD *)(v114 + 24) = *(_OWORD *)(v115 + 24);
          *(_OWORD *)(v114 + 40) = v118;
          *((void *)v114 + 7) = *((void *)v115 + 7);
        }
        else
        {
          v114[24] = v115[24];
          *(_WORD *)(v114 + 25) = *(_WORD *)(v115 + 25);
          *(_OWORD *)(v114 + 28) = *(_OWORD *)(v115 + 28);
          *((_DWORD *)v114 + 11) = *((_DWORD *)v115 + 11);
          *((void *)v114 + 6) = *((void *)v115 + 6);
          *((void *)v114 + 7) = v117;
          swift_bridgeObjectRetain();
        }
        uint64_t v119 = *(int *)(v41 + 28);
        uint64_t v198 = &v114[v119];
        uint64_t v120 = &v115[v119];
        uint64_t v121 = sub_23309B300();
        uint64_t v196 = *(void *)(v121 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v196 + 48))(v120, 1, v121))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v198, v120, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v196 + 16))(v198, v120, v121);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v196 + 56))(v198, 0, 1, v121);
        }
        uint64_t v42 = (unsigned int (*)(void, void, void))v209;
        uint64_t v123 = *(int *)(v41 + 32);
        uint64_t v124 = &v114[v123];
        uint64_t v125 = &v115[v123];
        uint64_t v126 = v125[1];
        *uint64_t v124 = *v125;
        v124[1] = v126;
        uint64_t v127 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v127(v114, 0, 1, v41);
      }
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v202[7])(v95, 0, 1, v97);
      uint64_t v98 = v199;
    }
    uint64_t v128 = v6[16];
    uint64_t v129 = v6[17];
    uint64_t v130 = (void *)((char *)a1 + v128);
    uint64_t v131 = (void *)((char *)v3 + v128);
    uint64_t v132 = v131[1];
    *uint64_t v130 = *v131;
    v130[1] = v132;
    uint64_t v133 = (char *)a1 + v129;
    uint64_t v134 = (char *)v3 + v129;
    swift_bridgeObjectRetain();
    if (v42(v134, 1, v41))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v133, v134, *(void *)(*(void *)(v135 - 8) + 64));
    }
    else
    {
      *uint64_t v133 = *v134;
      *((void *)v133 + 1) = *((void *)v134 + 1);
      *((_DWORD *)v133 + 4) = *((_DWORD *)v134 + 4);
      uint64_t v136 = *((void *)v134 + 7);
      uint64_t v200 = v98;
      if (v136 == 1)
      {
        long long v137 = *(_OWORD *)(v134 + 40);
        *(_OWORD *)(v133 + 24) = *(_OWORD *)(v134 + 24);
        *(_OWORD *)(v133 + 40) = v137;
        *((void *)v133 + 7) = *((void *)v134 + 7);
      }
      else
      {
        v133[24] = v134[24];
        *(_WORD *)(v133 + 25) = *(_WORD *)(v134 + 25);
        *(_OWORD *)(v133 + 28) = *(_OWORD *)(v134 + 28);
        *((_DWORD *)v133 + 11) = *((_DWORD *)v134 + 11);
        *((void *)v133 + 6) = *((void *)v134 + 6);
        *((void *)v133 + 7) = v136;
        swift_bridgeObjectRetain();
      }
      uint64_t v138 = *(int *)(v41 + 28);
      long long v139 = &v133[v138];
      uint64_t v140 = &v134[v138];
      uint64_t v141 = sub_23309B300();
      uint64_t v142 = *(void *)(v141 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v139, v140, *(void *)(*(void *)(v143 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v142 + 16))(v139, v140, v141);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
      }
      uint64_t v144 = *(int *)(v41 + 32);
      uint64_t v145 = &v133[v144];
      uint64_t v146 = &v134[v144];
      uint64_t v147 = v146[1];
      *uint64_t v145 = *v146;
      v145[1] = v147;
      uint64_t v148 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v148(v133, 0, 1, v41);
      uint64_t v42 = (unsigned int (*)(void, void, void))v209;
      uint64_t v97 = v204;
      uint64_t v98 = v200;
    }
    uint64_t v149 = v6[18];
    uint64_t v150 = (char *)a1 + v149;
    long long v151 = (char *)v3 + v149;
    if (v98((char *)v3 + v149, 1, v97))
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v150, v151, *(void *)(*(void *)(v152 - 8) + 64));
    }
    else
    {
      if (v42(v151, 1, v41))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v150, v151, *(void *)(*(void *)(v153 - 8) + 64));
      }
      else
      {
        *uint64_t v150 = *v151;
        *((void *)v150 + 1) = *((void *)v151 + 1);
        *((_DWORD *)v150 + 4) = *((_DWORD *)v151 + 4);
        uint64_t v154 = *((void *)v151 + 7);
        if (v154 == 1)
        {
          long long v155 = *(_OWORD *)(v151 + 40);
          *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
          *(_OWORD *)(v150 + 40) = v155;
          *((void *)v150 + 7) = *((void *)v151 + 7);
        }
        else
        {
          v150[24] = v151[24];
          *(_WORD *)(v150 + 25) = *(_WORD *)(v151 + 25);
          *(_OWORD *)(v150 + 28) = *(_OWORD *)(v151 + 28);
          *((_DWORD *)v150 + 11) = *((_DWORD *)v151 + 11);
          *((void *)v150 + 6) = *((void *)v151 + 6);
          *((void *)v150 + 7) = v154;
          swift_bridgeObjectRetain();
        }
        uint64_t v156 = *(int *)(v41 + 28);
        uint64_t v157 = &v150[v156];
        uint64_t v158 = &v151[v156];
        uint64_t v159 = sub_23309B300();
        uint64_t v160 = *(void *)(v159 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v160 + 16))(v157, v158, v159);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
        }
        uint64_t v42 = (unsigned int (*)(void, void, void))v209;
        uint64_t v162 = *(int *)(v41 + 32);
        uint64_t v163 = &v150[v162];
        uint64_t v164 = &v151[v162];
        uint64_t v165 = v164[1];
        *uint64_t v163 = *v164;
        v163[1] = v165;
        uint64_t v166 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v166(v150, 0, 1, v41);
        uint64_t v97 = v204;
      }
      uint64_t v167 = *(int *)(v97 + 20);
      uint64_t v168 = &v150[v167];
      uint64_t v169 = &v151[v167];
      if (v42(v169, 1, v41))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
      }
      else
      {
        unsigned char *v168 = *v169;
        *((void *)v168 + 1) = *((void *)v169 + 1);
        *((_DWORD *)v168 + 4) = *((_DWORD *)v169 + 4);
        uint64_t v171 = *((void *)v169 + 7);
        if (v171 == 1)
        {
          long long v172 = *(_OWORD *)(v169 + 40);
          *(_OWORD *)(v168 + 24) = *(_OWORD *)(v169 + 24);
          *(_OWORD *)(v168 + 40) = v172;
          *((void *)v168 + 7) = *((void *)v169 + 7);
        }
        else
        {
          v168[24] = v169[24];
          *(_WORD *)(v168 + 25) = *(_WORD *)(v169 + 25);
          *(_OWORD *)(v168 + 28) = *(_OWORD *)(v169 + 28);
          *((_DWORD *)v168 + 11) = *((_DWORD *)v169 + 11);
          *((void *)v168 + 6) = *((void *)v169 + 6);
          *((void *)v168 + 7) = v171;
          swift_bridgeObjectRetain();
        }
        uint64_t v173 = *(int *)(v41 + 28);
        uint64_t v210 = &v168[v173];
        uint64_t v174 = &v169[v173];
        uint64_t v175 = sub_23309B300();
        uint64_t v176 = *(void *)(v175 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v210, v174, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v176 + 16))(v210, v174, v175);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v176 + 56))(v210, 0, 1, v175);
        }
        uint64_t v178 = *(int *)(v41 + 32);
        uint64_t v179 = &v168[v178];
        uint64_t v180 = &v169[v178];
        uint64_t v181 = v180[1];
        void *v179 = *v180;
        v179[1] = v181;
        uint64_t v182 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v182(v168, 0, 1, v41);
        uint64_t v97 = v204;
      }
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v202[7])(v150, 0, 1, v97);
    }
    uint64_t v183 = v6[19];
    uint64_t v184 = v6[20];
    uint64_t v185 = (void *)((char *)a1 + v183);
    long long v186 = (void *)((char *)v3 + v183);
    uint64_t v187 = v186[1];
    *uint64_t v185 = *v186;
    v185[1] = v187;
    uint64_t v188 = (void *)((char *)a1 + v184);
    uint64_t v189 = (void *)((char *)v3 + v184);
    uint64_t v190 = v189[1];
    *uint64_t v188 = *v189;
    v188[1] = v190;
    uint64_t v191 = v6[21];
    uint64_t v192 = (void *)((char *)a1 + v191);
    uint64_t v193 = (void *)((char *)v3 + v191);
    uint64_t v194 = v193[1];
    *uint64_t v192 = *v193;
    v192[1] = v194;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Condition(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16) != 1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Reference();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 24);
    uint64_t v7 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v6 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v8 = v6 + *(int *)(v7 + 24);
      uint64_t v9 = sub_23309AF80();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (!v13(v11, 1, v12))
  {
    if (*(void *)(v11 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v11 + *(int *)(v12 + 28);
    uint64_t v15 = sub_23309B300();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[9] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[12] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = a1 + a2[14];
  if (!v13(v17, 1, v12))
  {
    if (*(void *)(v17 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v17 + *(int *)(v12 + 28);
    uint64_t v19 = sub_23309B300();
    uint64_t v20 = *(void *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = a1 + a2[15];
  uint64_t v22 = type metadata accessor for Period();
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48);
  if (!v23(v21, 1, v22))
  {
    if (!v13(v21, 1, v12))
    {
      if (*(void *)(v21 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v24 = v21 + *(int *)(v12 + 28);
      uint64_t v25 = sub_23309B300();
      uint64_t v42 = *(void *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v24, 1, v25)) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v24, v25);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = v21 + *(int *)(v22 + 20);
    if (!v13(v26, 1, v12))
    {
      if (*(void *)(v26 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = v26 + *(int *)(v12 + 28);
      uint64_t v28 = sub_23309B300();
      uint64_t v43 = *(void *)(v28 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v27, 1, v28)) {
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v27, v28);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = a1 + a2[17];
  if (!v13(v29, 1, v12))
  {
    uint64_t v44 = v13;
    if (*(void *)(v29 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v30 = v29 + *(int *)(v12 + 28);
    uint64_t v31 = sub_23309B300();
    uint64_t v32 = *(void *)(v31 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v44;
  }
  uint64_t v33 = a1 + a2[18];
  if (!v23(v33, 1, v22))
  {
    if (!v13(v33, 1, v12))
    {
      if (*(void *)(v33 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v34 = v33 + *(int *)(v12 + 28);
      uint64_t v35 = sub_23309B300();
      uint64_t v36 = *(void *)(v35 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = v33 + *(int *)(v22 + 20);
    if (!v13(v37, 1, v12))
    {
      if (*(void *)(v37 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v38 = v37 + *(int *)(v12 + 28);
      uint64_t v39 = sub_23309B300();
      uint64_t v40 = *(void *)(v39 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39)) {
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsDSTU2.Condition(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  if (v7 != 1) {
    swift_bridgeObjectRetain();
  }
  a1[2] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)v4 + v8);
  uint64_t v11 = type metadata accessor for Reference();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v208 = a3;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    __src = v4;
    uint64_t v14 = v10[1];
    void *v9 = *v10;
    v9[1] = v14;
    uint64_t v15 = v10[3];
    v9[2] = v10[2];
    v9[3] = v15;
    uint64_t v16 = *(int *)(v11 + 24);
    __dst = (void *)((char *)v9 + v16);
    uint64_t v206 = a1;
    uint64_t v17 = (void *)((char *)v10 + v16);
    uint64_t v18 = type metadata accessor for Identifier();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
      a3 = v208;
      uint64_t v4 = __src;
    }
    else
    {
      uint64_t v202 = v19;
      uint64_t v22 = v17[1];
      void *__dst = *v17;
      __dst[1] = v22;
      uint64_t v23 = v17[3];
      swift_bridgeObjectRetain();
      uint64_t v24 = v17;
      if (v23 == 1)
      {
        *((_OWORD *)__dst + 1) = *((_OWORD *)v17 + 1);
        __dst[4] = v17[4];
      }
      else
      {
        __dst[2] = v17[2];
        __dst[3] = v23;
        __dst[4] = v17[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v4 = __src;
      uint64_t v25 = *(int *)(v18 + 24);
      uint64_t v200 = (char *)__dst + v25;
      uint64_t v26 = (char *)v24 + v25;
      uint64_t v27 = sub_23309AF80();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v200, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v200, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v200, 0, 1, v27);
      }
      a3 = v208;
      uint64_t v30 = *(int *)(v18 + 28);
      uint64_t v31 = (void *)((char *)__dst + v30);
      uint64_t v32 = (void *)((char *)v24 + v30);
      uint64_t v33 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v33;
      uint64_t v34 = *(void (**)(void *, void, uint64_t, uint64_t))(v202 + 56);
      swift_bridgeObjectRetain();
      v34(__dst, 0, 1, v18);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    a1 = v206;
  }
  uint64_t v35 = a3[7];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)v4 + v35;
  uint64_t v38 = type metadata accessor for FHIRDateTime();
  uint64_t v207 = *(void *)(v38 - 8);
  uint64_t v39 = *(unsigned int (**)(void, void, void))(v207 + 48);
  __dsta = v39;
  if (v39(v37, 1, v38))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    *uint64_t v36 = *v37;
    *((void *)v36 + 1) = *((void *)v37 + 1);
    *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
    uint64_t v41 = *((void *)v37 + 7);
    if (v41 == 1)
    {
      long long v42 = *(_OWORD *)(v37 + 40);
      *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
      *(_OWORD *)(v36 + 40) = v42;
      *((void *)v36 + 7) = *((void *)v37 + 7);
    }
    else
    {
      v36[24] = v37[24];
      *(_WORD *)(v36 + 25) = *(_WORD *)(v37 + 25);
      *(_OWORD *)(v36 + 28) = *(_OWORD *)(v37 + 28);
      *((_DWORD *)v36 + 11) = *((_DWORD *)v37 + 11);
      *((void *)v36 + 6) = *((void *)v37 + 6);
      *((void *)v36 + 7) = v41;
      swift_bridgeObjectRetain();
    }
    uint64_t v43 = *(int *)(v38 + 28);
    uint64_t v44 = &v36[v43];
    long long v45 = &v37[v43];
    uint64_t v46 = sub_23309B300();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    a3 = v208;
    uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
    uint64_t v49 = *(int *)(v38 + 32);
    uint64_t v50 = &v36[v49];
    uint64_t v51 = &v37[v49];
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
    swift_bridgeObjectRetain();
    v53(v36, 0, 1, v38);
  }
  uint64_t v54 = a3[8];
  uint64_t v55 = a3[9];
  uint64_t v56 = (void *)((char *)a1 + v54);
  uint64_t v57 = (void *)((char *)v4 + v54);
  uint64_t v58 = v57[1];
  *uint64_t v56 = *v57;
  v56[1] = v58;
  v56[2] = v57[2];
  uint64_t v59 = (char *)a1 + v55;
  uint64_t v60 = (char *)v4 + v55;
  uint64_t v61 = *(void *)((char *)v4 + v55 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v61 == 1)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
    *((void *)v59 + 2) = *((void *)v60 + 2);
  }
  else
  {
    *(void *)uint64_t v59 = *(void *)v60;
    *((void *)v59 + 1) = v61;
    *((void *)v59 + 2) = *((void *)v60 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v62 = a3[10];
  uint64_t v63 = a3[11];
  uint64_t v64 = (void *)((char *)a1 + v62);
  uint64_t v65 = (void *)((char *)v4 + v62);
  uint64_t v66 = v65[1];
  *uint64_t v64 = *v65;
  v64[1] = v66;
  uint64_t v67 = (void *)((char *)a1 + v63);
  uint64_t v68 = (void *)((char *)v4 + v63);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v69;
  uint64_t v70 = a3[12];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)v4 + v70;
  uint64_t v73 = *(void *)((char *)v4 + v70 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v73 == 1)
  {
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *((void *)v71 + 2) = *((void *)v72 + 2);
  }
  else
  {
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    *((void *)v71 + 2) = *((void *)v72 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v74 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)v4 + a3[13]);
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (char *)v4 + v74;
  swift_bridgeObjectRetain();
  if (v39(v76, 1, v38))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
  }
  else
  {
    *uint64_t v75 = *v76;
    *((void *)v75 + 1) = *((void *)v76 + 1);
    *((_DWORD *)v75 + 4) = *((_DWORD *)v76 + 4);
    uint64_t v78 = *((void *)v76 + 7);
    if (v78 == 1)
    {
      long long v79 = *(_OWORD *)(v76 + 40);
      *(_OWORD *)(v75 + 24) = *(_OWORD *)(v76 + 24);
      *(_OWORD *)(v75 + 40) = v79;
      *((void *)v75 + 7) = *((void *)v76 + 7);
    }
    else
    {
      v75[24] = v76[24];
      *(_WORD *)(v75 + 25) = *(_WORD *)(v76 + 25);
      *(_OWORD *)(v75 + 28) = *(_OWORD *)(v76 + 28);
      *((_DWORD *)v75 + 11) = *((_DWORD *)v76 + 11);
      *((void *)v75 + 6) = *((void *)v76 + 6);
      *((void *)v75 + 7) = v78;
      swift_bridgeObjectRetain();
    }
    uint64_t v80 = *(int *)(v38 + 28);
    uint64_t v81 = &v75[v80];
    long long v82 = &v76[v80];
    uint64_t v83 = sub_23309B300();
    uint64_t v84 = *(void *)(v83 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v84 + 16))(v81, v82, v83);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    a3 = v208;
    uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
    uint64_t v86 = *(int *)(v38 + 32);
    uint64_t v87 = &v75[v86];
    uint64_t v88 = &v76[v86];
    uint64_t v89 = v88[1];
    *uint64_t v87 = *v88;
    v87[1] = v89;
    uint64_t v90 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
    swift_bridgeObjectRetain();
    v90(v75, 0, 1, v38);
  }
  uint64_t v91 = a3[15];
  uint64_t v92 = (char *)a1 + v91;
  uint64_t v93 = (char *)v4 + v91;
  uint64_t v94 = type metadata accessor for Period();
  uint64_t v199 = *(void *)(v94 - 8);
  uint64_t v95 = *(unsigned int (**)(void, void, void))(v199 + 48);
  uint64_t v201 = (void *)v94;
  if (v95(v93, 1, v94))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
  }
  else
  {
    uint64_t v197 = v95;
    if (v39(v93, 1, v38))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v97 - 8) + 64));
    }
    else
    {
      *uint64_t v92 = *v93;
      *((void *)v92 + 1) = *((void *)v93 + 1);
      *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
      uint64_t v98 = *((void *)v93 + 7);
      if (v98 == 1)
      {
        long long v99 = *(_OWORD *)(v93 + 40);
        *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
        *(_OWORD *)(v92 + 40) = v99;
        *((void *)v92 + 7) = *((void *)v93 + 7);
      }
      else
      {
        v92[24] = v93[24];
        *(_WORD *)(v92 + 25) = *(_WORD *)(v93 + 25);
        *(_OWORD *)(v92 + 28) = *(_OWORD *)(v93 + 28);
        *((_DWORD *)v92 + 11) = *((_DWORD *)v93 + 11);
        *((void *)v92 + 6) = *((void *)v93 + 6);
        *((void *)v92 + 7) = v98;
        swift_bridgeObjectRetain();
      }
      uint64_t v100 = *(int *)(v38 + 28);
      uint64_t v101 = &v92[v100];
      long long v102 = &v93[v100];
      uint64_t v103 = sub_23309B300();
      uint64_t v104 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v104 + 16))(v101, v102, v103);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
      }
      uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
      uint64_t v106 = *(int *)(v38 + 32);
      uint64_t v107 = &v92[v106];
      uint64_t v108 = &v93[v106];
      uint64_t v109 = v108[1];
      *uint64_t v107 = *v108;
      v107[1] = v109;
      uint64_t v110 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
      swift_bridgeObjectRetain();
      v110(v92, 0, 1, v38);
      a3 = v208;
      uint64_t v94 = (uint64_t)v201;
    }
    uint64_t v111 = *(int *)(v94 + 20);
    uint64_t v112 = &v92[v111];
    uint64_t v113 = &v93[v111];
    if (v39(v113, 1, v38))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v112, v113, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      *uint64_t v112 = *v113;
      *((void *)v112 + 1) = *((void *)v113 + 1);
      *((_DWORD *)v112 + 4) = *((_DWORD *)v113 + 4);
      uint64_t v115 = *((void *)v113 + 7);
      if (v115 == 1)
      {
        long long v116 = *(_OWORD *)(v113 + 40);
        *(_OWORD *)(v112 + 24) = *(_OWORD *)(v113 + 24);
        *(_OWORD *)(v112 + 40) = v116;
        *((void *)v112 + 7) = *((void *)v113 + 7);
      }
      else
      {
        v112[24] = v113[24];
        *(_WORD *)(v112 + 25) = *(_WORD *)(v113 + 25);
        *(_OWORD *)(v112 + 28) = *(_OWORD *)(v113 + 28);
        *((_DWORD *)v112 + 11) = *((_DWORD *)v113 + 11);
        *((void *)v112 + 6) = *((void *)v113 + 6);
        *((void *)v112 + 7) = v115;
        swift_bridgeObjectRetain();
      }
      uint64_t v117 = *(int *)(v38 + 28);
      uint64_t v196 = &v112[v117];
      long long v118 = &v113[v117];
      uint64_t v119 = sub_23309B300();
      uint64_t v120 = *(void *)(v119 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v196, v118, *(void *)(*(void *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v120 + 16))(v196, v118, v119);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v120 + 56))(v196, 0, 1, v119);
      }
      a3 = v208;
      uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
      uint64_t v122 = *(int *)(v38 + 32);
      uint64_t v123 = &v112[v122];
      uint64_t v124 = &v113[v122];
      uint64_t v125 = v124[1];
      *uint64_t v123 = *v124;
      v123[1] = v125;
      uint64_t v126 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
      swift_bridgeObjectRetain();
      v126(v112, 0, 1, v38);
      uint64_t v94 = (uint64_t)v201;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v199 + 56))(v92, 0, 1, v94);
    uint64_t v95 = v197;
  }
  uint64_t v127 = a3[16];
  uint64_t v128 = a3[17];
  uint64_t v129 = (void *)((char *)a1 + v127);
  uint64_t v130 = (void *)((char *)v4 + v127);
  uint64_t v131 = v130[1];
  *uint64_t v129 = *v130;
  v129[1] = v131;
  uint64_t v132 = (char *)a1 + v128;
  uint64_t v133 = (char *)v4 + v128;
  swift_bridgeObjectRetain();
  if (v39(v133, 1, v38))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v132, v133, *(void *)(*(void *)(v134 - 8) + 64));
  }
  else
  {
    *uint64_t v132 = *v133;
    *((void *)v132 + 1) = *((void *)v133 + 1);
    *((_DWORD *)v132 + 4) = *((_DWORD *)v133 + 4);
    uint64_t v135 = *((void *)v133 + 7);
    uint64_t v198 = v95;
    if (v135 == 1)
    {
      long long v136 = *(_OWORD *)(v133 + 40);
      *(_OWORD *)(v132 + 24) = *(_OWORD *)(v133 + 24);
      *(_OWORD *)(v132 + 40) = v136;
      *((void *)v132 + 7) = *((void *)v133 + 7);
    }
    else
    {
      v132[24] = v133[24];
      *(_WORD *)(v132 + 25) = *(_WORD *)(v133 + 25);
      *(_OWORD *)(v132 + 28) = *(_OWORD *)(v133 + 28);
      *((_DWORD *)v132 + 11) = *((_DWORD *)v133 + 11);
      *((void *)v132 + 6) = *((void *)v133 + 6);
      *((void *)v132 + 7) = v135;
      swift_bridgeObjectRetain();
    }
    uint64_t v137 = *(int *)(v38 + 28);
    uint64_t v138 = &v132[v137];
    long long v139 = &v133[v137];
    uint64_t v140 = sub_23309B300();
    uint64_t v141 = *(void *)(v140 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v141 + 16))(v138, v139, v140);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
    }
    uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
    uint64_t v143 = *(int *)(v38 + 32);
    uint64_t v144 = &v132[v143];
    uint64_t v145 = &v133[v143];
    uint64_t v146 = v145[1];
    *uint64_t v144 = *v145;
    v144[1] = v146;
    uint64_t v147 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
    swift_bridgeObjectRetain();
    v147(v132, 0, 1, v38);
    a3 = v208;
    uint64_t v94 = (uint64_t)v201;
    uint64_t v95 = v198;
  }
  uint64_t v148 = a3[18];
  uint64_t v149 = (char *)a1 + v148;
  uint64_t v150 = (char *)v4 + v148;
  if (v95((char *)v4 + v148, 1, v94))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v149, v150, *(void *)(*(void *)(v151 - 8) + 64));
  }
  else
  {
    if (v39(v150, 1, v38))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v149, v150, *(void *)(*(void *)(v152 - 8) + 64));
    }
    else
    {
      *uint64_t v149 = *v150;
      *((void *)v149 + 1) = *((void *)v150 + 1);
      *((_DWORD *)v149 + 4) = *((_DWORD *)v150 + 4);
      uint64_t v153 = *((void *)v150 + 7);
      if (v153 == 1)
      {
        long long v154 = *(_OWORD *)(v150 + 40);
        *(_OWORD *)(v149 + 24) = *(_OWORD *)(v150 + 24);
        *(_OWORD *)(v149 + 40) = v154;
        *((void *)v149 + 7) = *((void *)v150 + 7);
      }
      else
      {
        v149[24] = v150[24];
        *(_WORD *)(v149 + 25) = *(_WORD *)(v150 + 25);
        *(_OWORD *)(v149 + 28) = *(_OWORD *)(v150 + 28);
        *((_DWORD *)v149 + 11) = *((_DWORD *)v150 + 11);
        *((void *)v149 + 6) = *((void *)v150 + 6);
        *((void *)v149 + 7) = v153;
        swift_bridgeObjectRetain();
      }
      uint64_t v155 = *(int *)(v38 + 28);
      uint64_t v156 = &v149[v155];
      uint64_t v157 = &v150[v155];
      uint64_t v158 = sub_23309B300();
      uint64_t v159 = *(void *)(v158 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v159 + 16))(v156, v157, v158);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
      }
      uint64_t v39 = (unsigned int (*)(void, void, void))__dsta;
      uint64_t v161 = *(int *)(v38 + 32);
      uint64_t v162 = &v149[v161];
      uint64_t v163 = &v150[v161];
      uint64_t v164 = v163[1];
      *uint64_t v162 = *v163;
      v162[1] = v164;
      uint64_t v165 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
      swift_bridgeObjectRetain();
      v165(v149, 0, 1, v38);
      a3 = v208;
      uint64_t v94 = (uint64_t)v201;
    }
    uint64_t v166 = *(int *)(v94 + 20);
    uint64_t v167 = &v149[v166];
    uint64_t v168 = &v150[v166];
    if (v39(v168, 1, v38))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
    }
    else
    {
      *uint64_t v167 = *v168;
      *((void *)v167 + 1) = *((void *)v168 + 1);
      *((_DWORD *)v167 + 4) = *((_DWORD *)v168 + 4);
      uint64_t v170 = *((void *)v168 + 7);
      if (v170 == 1)
      {
        long long v171 = *(_OWORD *)(v168 + 40);
        *(_OWORD *)(v167 + 24) = *(_OWORD *)(v168 + 24);
        *(_OWORD *)(v167 + 40) = v171;
        *((void *)v167 + 7) = *((void *)v168 + 7);
      }
      else
      {
        v167[24] = v168[24];
        *(_WORD *)(v167 + 25) = *(_WORD *)(v168 + 25);
        *(_OWORD *)(v167 + 28) = *(_OWORD *)(v168 + 28);
        *((_DWORD *)v167 + 11) = *((_DWORD *)v168 + 11);
        *((void *)v167 + 6) = *((void *)v168 + 6);
        *((void *)v167 + 7) = v170;
        swift_bridgeObjectRetain();
      }
      uint64_t v172 = *(int *)(v38 + 28);
      uint64_t v173 = &v167[v172];
      uint64_t v174 = &v168[v172];
      uint64_t v175 = sub_23309B300();
      uint64_t v176 = *(void *)(v175 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v176 + 16))(v173, v174, v175);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
      }
      a3 = v208;
      uint64_t v178 = *(int *)(v38 + 32);
      uint64_t v179 = &v167[v178];
      uint64_t v180 = &v168[v178];
      uint64_t v181 = v180[1];
      void *v179 = *v180;
      v179[1] = v181;
      uint64_t v182 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v207 + 56);
      swift_bridgeObjectRetain();
      v182(v167, 0, 1, v38);
      uint64_t v94 = (uint64_t)v201;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v199 + 56))(v149, 0, 1, v94);
  }
  uint64_t v183 = a3[19];
  uint64_t v184 = a3[20];
  uint64_t v185 = (void *)((char *)a1 + v183);
  long long v186 = (void *)((char *)v4 + v183);
  uint64_t v187 = v186[1];
  *uint64_t v185 = *v186;
  v185[1] = v187;
  uint64_t v188 = (void *)((char *)a1 + v184);
  uint64_t v189 = (void *)((char *)v4 + v184);
  uint64_t v190 = v189[1];
  *uint64_t v188 = *v189;
  v188[1] = v190;
  uint64_t v191 = a3[21];
  uint64_t v192 = (void *)((char *)a1 + v191);
  uint64_t v193 = (void *)((char *)v4 + v191);
  uint64_t v194 = v193[1];
  *uint64_t v192 = *v193;
  v192[1] = v194;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ModelsDSTU2.Condition(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + 2;
  uint64_t v7 = a2[2];
  if (v5[2] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(v5 + 2));
      uint64_t v8 = a2[2];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)((char *)v5 + v9);
  uint64_t v505 = a2;
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = type metadata accessor for Reference();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  uint64_t v506 = a3;
  long long v507 = v5;
  if (v15)
  {
    if (!v16)
    {
      uint64_t v508 = v13;
      void *v10 = *v11;
      v10[1] = v11[1];
      void v10[2] = v11[2];
      v10[3] = v11[3];
      uint64_t v17 = *(int *)(v12 + 24);
      uint64_t v18 = (void *)((char *)v10 + v17);
      uint64_t v19 = (void *)((char *)v11 + v17);
      uint64_t v20 = type metadata accessor for Identifier();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      uint64_t v23 = v19;
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
        uint64_t v5 = v507;
      }
      else
      {
        uint64_t v38 = v21;
        *uint64_t v18 = *v19;
        v18[1] = v19[1];
        uint64_t v39 = v19[3];
        swift_bridgeObjectRetain();
        uint64_t v40 = v18;
        if (v39 == 1)
        {
          long long v41 = *((_OWORD *)v19 + 1);
          void v18[4] = v19[4];
          *((_OWORD *)v18 + 1) = v41;
        }
        else
        {
          v18[2] = v19[2];
          v18[3] = v19[3];
          void v18[4] = v19[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v44 = v20;
        uint64_t v45 = *(int *)(v20 + 24);
        uint64_t v46 = (char *)v40 + v45;
        uint64_t v47 = v23;
        uint64_t v48 = (char *)v23 + v45;
        uint64_t v49 = sub_23309AF80();
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v46, v48, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v46, v48, v49);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v49);
        }
        a3 = v506;
        uint64_t v5 = v507;
        uint64_t v54 = *(int *)(v44 + 28);
        uint64_t v55 = (void *)((char *)v40 + v54);
        uint64_t v56 = (void *)((char *)v47 + v54);
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        uint64_t v57 = *(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56);
        swift_bridgeObjectRetain();
        v57(v40, 0, 1, v44);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v508 + 56))(v10, 0, 1, v12);
      goto LABEL_32;
    }
    goto LABEL_15;
  }
  if (v16)
  {
    sub_232F7CB8C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_15:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
    uint64_t v27 = v10;
    uint64_t v28 = v11;
    goto LABEL_16;
  }
  void *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v10[2] = v11[2];
  v10[3] = v11[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(v12 + 24);
  uint64_t v30 = (void *)((char *)v10 + v29);
  uint64_t v31 = (void *)((char *)v11 + v29);
  uint64_t v32 = type metadata accessor for Identifier();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      *uint64_t v30 = *v31;
      v30[1] = v31[1];
      uint64_t v52 = v31[3];
      swift_bridgeObjectRetain();
      if (v52 == 1)
      {
        long long v53 = *((_OWORD *)v31 + 1);
        v30[4] = v31[4];
        *((_OWORD *)v30 + 1) = v53;
      }
      else
      {
        v30[2] = v31[2];
        v30[3] = v31[3];
        v30[4] = v31[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v229 = *(int *)(v32 + 24);
      uint64_t v230 = (char *)v30 + v229;
      uint64_t v231 = (char *)v31 + v229;
      uint64_t v232 = sub_23309AF80();
      uint64_t v233 = *(void *)(v232 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v230, v231, *(void *)(*(void *)(v234 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v230, v231, v232);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v232);
      }
      a3 = v506;
      uint64_t v242 = *(int *)(v32 + 28);
      uint64_t v243 = (void *)((char *)v30 + v242);
      uint64_t v244 = (void *)((char *)v31 + v242);
      *uint64_t v243 = *v244;
      v243[1] = v244[1];
      uint64_t v245 = *(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56);
      swift_bridgeObjectRetain();
      v245(v30, 0, 1, v32);
      goto LABEL_32;
    }
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    size_t v26 = *(void *)(*(void *)(v37 - 8) + 64);
    uint64_t v27 = v30;
    uint64_t v28 = v31;
LABEL_16:
    memcpy(v27, v28, v26);
LABEL_32:
    long long v42 = v505;
    goto LABEL_33;
  }
  long long v42 = v505;
  if (v36)
  {
    sub_232F7CB8C((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_33;
  }
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v220 = (long long *)(v30 + 2);
  uint64_t v221 = (long long *)(v31 + 2);
  uint64_t v222 = v31[3];
  if (v30[3] == 1)
  {
    if (v222 == 1)
    {
      long long v223 = *v221;
      v30[4] = v31[4];
      long long *v220 = v223;
    }
    else
    {
      v30[2] = v31[2];
      v30[3] = v31[3];
      v30[4] = v31[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v222 == 1)
  {
    sub_232F042F8((uint64_t)(v30 + 2));
    uint64_t v421 = v31[4];
    long long *v220 = *v221;
    v30[4] = v421;
  }
  else
  {
    v30[2] = v31[2];
    v30[3] = v31[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v30[4] = v31[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v434 = *(int *)(v32 + 24);
  uint64_t v435 = (char *)v30 + v434;
  uint64_t v436 = (char *)v31 + v434;
  uint64_t v437 = sub_23309AF80();
  uint64_t v438 = *(void *)(v437 - 8);
  long long v439 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v438 + 48);
  int v440 = v439(v435, 1, v437);
  int v441 = v439(v436, 1, v437);
  if (!v440)
  {
    long long v42 = v505;
    if (!v441)
    {
      (*(void (**)(char *, char *, uint64_t))(v438 + 24))(v435, v436, v437);
      goto LABEL_272;
    }
    (*(void (**)(char *, uint64_t))(v438 + 8))(v435, v437);
    goto LABEL_271;
  }
  long long v42 = v505;
  if (v441)
  {
LABEL_271:
    sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v435, v436, *(void *)(*(void *)(v442 - 8) + 64));
    goto LABEL_272;
  }
  (*(void (**)(char *, char *, uint64_t))(v438 + 16))(v435, v436, v437);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v438 + 56))(v435, 0, 1, v437);
LABEL_272:
  uint64_t v5 = v507;
  uint64_t v443 = *(int *)(v32 + 28);
  uint64_t v444 = (void *)((char *)v30 + v443);
  uint64_t v445 = (void *)((char *)v31 + v443);
  *uint64_t v444 = *v445;
  v444[1] = v445[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a3 = v506;
LABEL_33:
  uint64_t v58 = a3[7];
  uint64_t v59 = (uint64_t)v5 + v58;
  uint64_t v60 = (uint64_t)v42 + v58;
  uint64_t v61 = type metadata accessor for FHIRDateTime();
  uint64_t v503 = *(void *)(v61 - 8);
  uint64_t v509 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v503 + 48);
  int v62 = v509(v59, 1, v61);
  int v63 = v509(v60, 1, v61);
  if (!v62)
  {
    if (v63)
    {
      sub_232F7CB8C(v59, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_39;
    }
    *(unsigned char *)uint64_t v59 = *(unsigned char *)v60;
    *(void *)(v59 + 8) = *(void *)(v60 + 8);
    *(_WORD *)(v59 + 16) = *(_WORD *)(v60 + 16);
    *(_WORD *)(v59 + 18) = *(_WORD *)(v60 + 18);
    uint64_t v68 = (long long *)(v59 + 24);
    uint64_t v69 = (long long *)(v60 + 24);
    uint64_t v70 = *(void *)(v60 + 56);
    if (*(void *)(v59 + 56) == 1)
    {
      if (v70 == 1)
      {
        long long v71 = *v69;
        long long v72 = *(_OWORD *)(v60 + 40);
        *(void *)(v59 + 56) = *(void *)(v60 + 56);
        *uint64_t v68 = v71;
        *(_OWORD *)(v59 + 40) = v72;
      }
      else
      {
        *(unsigned char *)(v59 + 24) = *(unsigned char *)(v60 + 24);
        *(unsigned char *)(v59 + 25) = *(unsigned char *)(v60 + 25);
        *(unsigned char *)(v59 + 26) = *(unsigned char *)(v60 + 26);
        long long v86 = *(_OWORD *)(v60 + 28);
        *(_DWORD *)(v59 + 44) = *(_DWORD *)(v60 + 44);
        *(_OWORD *)(v59 + 28) = v86;
        *(void *)(v59 + 48) = *(void *)(v60 + 48);
        *(void *)(v59 + 56) = *(void *)(v60 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v70 == 1)
    {
      sub_232F0434C(v59 + 24);
      uint64_t v84 = *(void *)(v60 + 56);
      long long v85 = *(_OWORD *)(v60 + 40);
      *uint64_t v68 = *v69;
      *(_OWORD *)(v59 + 40) = v85;
      *(void *)(v59 + 56) = v84;
    }
    else
    {
      *(unsigned char *)(v59 + 24) = *(unsigned char *)(v60 + 24);
      *(unsigned char *)(v59 + 25) = *(unsigned char *)(v60 + 25);
      *(unsigned char *)(v59 + 26) = *(unsigned char *)(v60 + 26);
      *(_DWORD *)(v59 + 28) = *(_DWORD *)(v60 + 28);
      *(_WORD *)(v59 + 32) = *(_WORD *)(v60 + 32);
      *(_WORD *)(v59 + 34) = *(_WORD *)(v60 + 34);
      *(_WORD *)(v59 + 36) = *(_WORD *)(v60 + 36);
      *(_WORD *)(v59 + 38) = *(_WORD *)(v60 + 38);
      *(_WORD *)(v59 + 40) = *(_WORD *)(v60 + 40);
      *(_WORD *)(v59 + 42) = *(_WORD *)(v60 + 42);
      *(_WORD *)(v59 + 44) = *(_WORD *)(v60 + 44);
      *(_WORD *)(v59 + 46) = *(_WORD *)(v60 + 46);
      *(void *)(v59 + 48) = *(void *)(v60 + 48);
      *(void *)(v59 + 56) = *(void *)(v60 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v87 = *(int *)(v61 + 28);
    uint64_t v88 = (void *)(v59 + v87);
    uint64_t v89 = (void *)(v60 + v87);
    uint64_t v90 = sub_23309B300();
    uint64_t v91 = *(void *)(v90 - 8);
    uint64_t v92 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 48);
    int v93 = v92(v88, 1, v90);
    int v94 = v92(v89, 1, v90);
    if (v93)
    {
      if (!v94)
      {
        (*(void (**)(void *, void *, uint64_t))(v91 + 16))(v88, v89, v90);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
LABEL_58:
        a3 = v506;
        uint64_t v5 = v507;
        long long v42 = v505;
        uint64_t v96 = *(int *)(v61 + 32);
        uint64_t v97 = (void *)(v59 + v96);
        uint64_t v98 = (void *)(v60 + v96);
        *uint64_t v97 = *v98;
        v97[1] = v98[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
    }
    else
    {
      if (!v94)
      {
        (*(void (**)(void *, void *, uint64_t))(v91 + 24))(v88, v89, v90);
        goto LABEL_58;
      }
      (*(void (**)(void *, uint64_t))(v91 + 8))(v88, v90);
    }
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v88, v89, *(void *)(*(void *)(v95 - 8) + 64));
    goto LABEL_58;
  }
  if (v63)
  {
LABEL_39:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v59, (const void *)v60, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_59;
  }
  *(unsigned char *)uint64_t v59 = *(unsigned char *)v60;
  uint64_t v64 = *(void *)(v60 + 8);
  *(_DWORD *)(v59 + 16) = *(_DWORD *)(v60 + 16);
  *(void *)(v59 + 8) = v64;
  if (*(void *)(v60 + 56) == 1)
  {
    long long v65 = *(_OWORD *)(v60 + 24);
    long long v66 = *(_OWORD *)(v60 + 40);
    *(void *)(v59 + 56) = *(void *)(v60 + 56);
    *(_OWORD *)(v59 + 24) = v65;
    *(_OWORD *)(v59 + 40) = v66;
  }
  else
  {
    *(unsigned char *)(v59 + 24) = *(unsigned char *)(v60 + 24);
    *(unsigned char *)(v59 + 25) = *(unsigned char *)(v60 + 25);
    *(unsigned char *)(v59 + 26) = *(unsigned char *)(v60 + 26);
    long long v73 = *(_OWORD *)(v60 + 28);
    *(_DWORD *)(v59 + 44) = *(_DWORD *)(v60 + 44);
    *(_OWORD *)(v59 + 28) = v73;
    *(void *)(v59 + 48) = *(void *)(v60 + 48);
    *(void *)(v59 + 56) = *(void *)(v60 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v74 = *(int *)(v61 + 28);
  uint64_t v75 = (void *)(v59 + v74);
  uint64_t v76 = (const void *)(v60 + v74);
  uint64_t v77 = sub_23309B300();
  uint64_t v78 = *(void *)(v77 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v78 + 16))(v75, v76, v77);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  a3 = v506;
  uint64_t v80 = *(int *)(v61 + 32);
  uint64_t v81 = (void *)(v59 + v80);
  long long v82 = (void *)(v60 + v80);
  *uint64_t v81 = *v82;
  v81[1] = v82[1];
  uint64_t v83 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
  swift_bridgeObjectRetain();
  v83(v59, 0, 1, v61);
LABEL_59:
  uint64_t v99 = a3[8];
  uint64_t v100 = (void *)((char *)v5 + v99);
  uint64_t v101 = (uint64_t)v42 + v99;
  *uint64_t v100 = *(void *)((char *)v42 + v99);
  v100[1] = *(void *)((char *)v42 + v99 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v100[2] = *(void *)(v101 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v102 = a3[9];
  uint64_t v103 = (uint64_t)v5 + v102;
  uint64_t v104 = (long long *)((char *)v42 + v102);
  uint64_t v105 = *(void *)((char *)v5 + v102 + 8);
  uint64_t v106 = *(void *)((char *)v42 + v102 + 8);
  if (v105 == 1)
  {
    if (v106 == 1)
    {
      long long v107 = *v104;
      *(void *)(v103 + 16) = *((void *)v104 + 2);
      *(_OWORD *)uint64_t v103 = v107;
    }
    else
    {
      *(void *)uint64_t v103 = *(void *)v104;
      *(void *)(v103 + 8) = *((void *)v104 + 1);
      *(void *)(v103 + 16) = *((void *)v104 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v106 == 1)
  {
    sub_232F042F8(v103);
    uint64_t v108 = *((void *)v104 + 2);
    *(_OWORD *)uint64_t v103 = *v104;
    *(void *)(v103 + 16) = v108;
  }
  else
  {
    *(void *)uint64_t v103 = *(void *)v104;
    *(void *)(v103 + 8) = *((void *)v104 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v103 + 16) = *((void *)v104 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v109 = a3[10];
  uint64_t v110 = (void *)((char *)v5 + v109);
  uint64_t v111 = (void *)((char *)v42 + v109);
  *uint64_t v110 = *v111;
  v110[1] = v111[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = a3[11];
  uint64_t v113 = (void *)((char *)v5 + v112);
  uint64_t v114 = (void *)((char *)v42 + v112);
  *uint64_t v113 = *v114;
  v113[1] = v114[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v115 = a3[12];
  uint64_t v116 = (uint64_t)v5 + v115;
  uint64_t v117 = (long long *)((char *)v42 + v115);
  uint64_t v118 = *(void *)((char *)v5 + v115 + 8);
  uint64_t v119 = *(void *)((char *)v42 + v115 + 8);
  if (v118 == 1)
  {
    if (v119 == 1)
    {
      long long v120 = *v117;
      *(void *)(v116 + 16) = *((void *)v117 + 2);
      *(_OWORD *)uint64_t v116 = v120;
    }
    else
    {
      *(void *)uint64_t v116 = *(void *)v117;
      *(void *)(v116 + 8) = *((void *)v117 + 1);
      *(void *)(v116 + 16) = *((void *)v117 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v119 == 1)
  {
    sub_232F042F8(v116);
    uint64_t v121 = *((void *)v117 + 2);
    *(_OWORD *)uint64_t v116 = *v117;
    *(void *)(v116 + 16) = v121;
  }
  else
  {
    *(void *)uint64_t v116 = *(void *)v117;
    *(void *)(v116 + 8) = *((void *)v117 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v116 + 16) = *((void *)v117 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)((char *)v5 + a3[13]) = *(void *)((char *)v42 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v122 = a3[14];
  uint64_t v123 = (uint64_t)v5 + v122;
  uint64_t v124 = (uint64_t)v42 + v122;
  int v125 = v509((uint64_t)v5 + v122, 1, v61);
  int v126 = v509(v124, 1, v61);
  uint64_t v504 = v61;
  if (!v125)
  {
    if (v126)
    {
      sub_232F7CB8C(v123, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_79;
    }
    *(unsigned char *)uint64_t v123 = *(unsigned char *)v124;
    *(void *)(v123 + 8) = *(void *)(v124 + 8);
    *(_WORD *)(v123 + 16) = *(_WORD *)(v124 + 16);
    *(_WORD *)(v123 + 18) = *(_WORD *)(v124 + 18);
    uint64_t v131 = (long long *)(v123 + 24);
    uint64_t v132 = (long long *)(v124 + 24);
    uint64_t v133 = *(void *)(v124 + 56);
    if (*(void *)(v123 + 56) == 1)
    {
      if (v133 == 1)
      {
        long long v134 = *v132;
        long long v135 = *(_OWORD *)(v124 + 40);
        *(void *)(v123 + 56) = *(void *)(v124 + 56);
        *uint64_t v131 = v134;
        *(_OWORD *)(v123 + 40) = v135;
      }
      else
      {
        *(unsigned char *)(v123 + 24) = *(unsigned char *)(v124 + 24);
        *(unsigned char *)(v123 + 25) = *(unsigned char *)(v124 + 25);
        *(unsigned char *)(v123 + 26) = *(unsigned char *)(v124 + 26);
        long long v149 = *(_OWORD *)(v124 + 28);
        *(_DWORD *)(v123 + 44) = *(_DWORD *)(v124 + 44);
        *(_OWORD *)(v123 + 28) = v149;
        *(void *)(v123 + 48) = *(void *)(v124 + 48);
        *(void *)(v123 + 56) = *(void *)(v124 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v133 == 1)
    {
      sub_232F0434C(v123 + 24);
      uint64_t v147 = *(void *)(v124 + 56);
      long long v148 = *(_OWORD *)(v124 + 40);
      *uint64_t v131 = *v132;
      *(_OWORD *)(v123 + 40) = v148;
      *(void *)(v123 + 56) = v147;
    }
    else
    {
      *(unsigned char *)(v123 + 24) = *(unsigned char *)(v124 + 24);
      *(unsigned char *)(v123 + 25) = *(unsigned char *)(v124 + 25);
      *(unsigned char *)(v123 + 26) = *(unsigned char *)(v124 + 26);
      *(_DWORD *)(v123 + 28) = *(_DWORD *)(v124 + 28);
      *(_WORD *)(v123 + 32) = *(_WORD *)(v124 + 32);
      *(_WORD *)(v123 + 34) = *(_WORD *)(v124 + 34);
      *(_WORD *)(v123 + 36) = *(_WORD *)(v124 + 36);
      *(_WORD *)(v123 + 38) = *(_WORD *)(v124 + 38);
      *(_WORD *)(v123 + 40) = *(_WORD *)(v124 + 40);
      *(_WORD *)(v123 + 42) = *(_WORD *)(v124 + 42);
      *(_WORD *)(v123 + 44) = *(_WORD *)(v124 + 44);
      *(_WORD *)(v123 + 46) = *(_WORD *)(v124 + 46);
      *(void *)(v123 + 48) = *(void *)(v124 + 48);
      *(void *)(v123 + 56) = *(void *)(v124 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v150 = *(int *)(v61 + 28);
    uint64_t v151 = (void *)(v123 + v150);
    uint64_t v152 = (void *)(v124 + v150);
    uint64_t v153 = sub_23309B300();
    uint64_t v154 = *(void *)(v153 - 8);
    uint64_t v155 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v154 + 48);
    int v156 = v155(v151, 1, v153);
    int v157 = v155(v152, 1, v153);
    if (v156)
    {
      if (!v157)
      {
        (*(void (**)(void *, void *, uint64_t))(v154 + 16))(v151, v152, v153);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
LABEL_98:
        a3 = v506;
        uint64_t v5 = v507;
        long long v42 = v505;
        uint64_t v159 = *(int *)(v61 + 32);
        uint64_t v160 = (void *)(v123 + v159);
        uint64_t v161 = (void *)(v124 + v159);
        *uint64_t v160 = *v161;
        v160[1] = v161[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_99;
      }
    }
    else
    {
      if (!v157)
      {
        (*(void (**)(void *, void *, uint64_t))(v154 + 24))(v151, v152, v153);
        goto LABEL_98;
      }
      (*(void (**)(void *, uint64_t))(v154 + 8))(v151, v153);
    }
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v151, v152, *(void *)(*(void *)(v158 - 8) + 64));
    goto LABEL_98;
  }
  if (v126)
  {
LABEL_79:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v123, (const void *)v124, *(void *)(*(void *)(v130 - 8) + 64));
    goto LABEL_99;
  }
  *(unsigned char *)uint64_t v123 = *(unsigned char *)v124;
  uint64_t v127 = *(void *)(v124 + 8);
  *(_DWORD *)(v123 + 16) = *(_DWORD *)(v124 + 16);
  *(void *)(v123 + 8) = v127;
  if (*(void *)(v124 + 56) == 1)
  {
    long long v128 = *(_OWORD *)(v124 + 24);
    long long v129 = *(_OWORD *)(v124 + 40);
    *(void *)(v123 + 56) = *(void *)(v124 + 56);
    *(_OWORD *)(v123 + 24) = v128;
    *(_OWORD *)(v123 + 40) = v129;
  }
  else
  {
    *(unsigned char *)(v123 + 24) = *(unsigned char *)(v124 + 24);
    *(unsigned char *)(v123 + 25) = *(unsigned char *)(v124 + 25);
    *(unsigned char *)(v123 + 26) = *(unsigned char *)(v124 + 26);
    long long v136 = *(_OWORD *)(v124 + 28);
    *(_DWORD *)(v123 + 44) = *(_DWORD *)(v124 + 44);
    *(_OWORD *)(v123 + 28) = v136;
    *(void *)(v123 + 48) = *(void *)(v124 + 48);
    *(void *)(v123 + 56) = *(void *)(v124 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v137 = *(int *)(v61 + 28);
  uint64_t v138 = (void *)(v123 + v137);
  long long v139 = (const void *)(v124 + v137);
  uint64_t v140 = sub_23309B300();
  uint64_t v141 = *(void *)(v140 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v141 + 16))(v138, v139, v140);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
  }
  a3 = v506;
  uint64_t v143 = *(int *)(v61 + 32);
  uint64_t v144 = (void *)(v123 + v143);
  uint64_t v145 = (void *)(v124 + v143);
  *uint64_t v144 = *v145;
  v144[1] = v145[1];
  uint64_t v146 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
  swift_bridgeObjectRetain();
  v146(v123, 0, 1, v61);
LABEL_99:
  uint64_t v162 = a3[15];
  uint64_t v163 = (uint64_t)v5 + v162;
  uint64_t v164 = v42;
  uint64_t v165 = (uint64_t)v42 + v162;
  uint64_t v166 = type metadata accessor for Period();
  uint64_t v500 = *(void *)(v166 - 8);
  uint64_t v167 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v500 + 48);
  int v168 = v167(v163, 1, v166);
  uint64_t v169 = v165;
  uint64_t v502 = (uint64_t (*)(char *, uint64_t, uint64_t))v167;
  int v170 = v167(v165, 1, v166);
  if (!v168)
  {
    if (v170)
    {
      sub_232F7CB8C(v163, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_105;
    }
    uint64_t v171 = v504;
    int v179 = v509(v163, 1, v504);
    int v180 = v509(v165, 1, v504);
    uint64_t v172 = v166;
    uint64_t v173 = v164;
    if (v179)
    {
      if (!v180)
      {
        uint64_t v187 = v165;
        *(unsigned char *)uint64_t v163 = *(unsigned char *)v165;
        uint64_t v195 = *(void *)(v165 + 8);
        *(_DWORD *)(v163 + 16) = *(_DWORD *)(v165 + 16);
        *(void *)(v163 + 8) = v195;
        if (*(void *)(v165 + 56) == 1)
        {
          long long v196 = *(_OWORD *)(v165 + 24);
          long long v197 = *(_OWORD *)(v165 + 40);
          *(void *)(v163 + 56) = *(void *)(v165 + 56);
          *(_OWORD *)(v163 + 24) = v196;
          *(_OWORD *)(v163 + 40) = v197;
        }
        else
        {
          *(unsigned char *)(v163 + 24) = *(unsigned char *)(v165 + 24);
          *(unsigned char *)(v163 + 25) = *(unsigned char *)(v165 + 25);
          *(unsigned char *)(v163 + 26) = *(unsigned char *)(v165 + 26);
          long long v235 = *(_OWORD *)(v165 + 28);
          *(_DWORD *)(v163 + 44) = *(_DWORD *)(v165 + 44);
          *(_OWORD *)(v163 + 28) = v235;
          *(void *)(v163 + 48) = *(void *)(v165 + 48);
          *(void *)(v163 + 56) = *(void *)(v165 + 56);
          swift_bridgeObjectRetain();
        }
        uint64_t v236 = *(int *)(v504 + 28);
        uint64_t v237 = (void *)(v163 + v236);
        uint64_t v238 = (const void *)(v165 + v236);
        uint64_t v239 = sub_23309B300();
        uint64_t v240 = *(void *)(v239 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v237, v238, *(void *)(*(void *)(v241 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v240 + 16))(v237, v238, v239);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v240 + 56))(v237, 0, 1, v239);
        }
        uint64_t v177 = (char *)v507;
        uint64_t v246 = *(int *)(v504 + 32);
        uint64_t v247 = (void *)(v163 + v246);
        uint64_t v248 = (void *)(v187 + v246);
        void *v247 = *v248;
        v247[1] = v248[1];
        uint64_t v249 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
        swift_bridgeObjectRetain();
        v249(v163, 0, 1, v504);
        a3 = v506;
        uint64_t v175 = v509;
LABEL_151:
        uint64_t v250 = *(int *)(v172 + 20);
        uint64_t v251 = v163 + v250;
        uint64_t v252 = v187 + v250;
        int v253 = v175(v251, 1, v504);
        int v254 = v175(v252, 1, v504);
        if (v253)
        {
          if (!v254)
          {
            *(unsigned char *)uint64_t v251 = *(unsigned char *)v252;
            uint64_t v255 = *(void *)(v252 + 8);
            *(_DWORD *)(v251 + 16) = *(_DWORD *)(v252 + 16);
            *(void *)(v251 + 8) = v255;
            if (*(void *)(v252 + 56) == 1)
            {
              long long v256 = *(_OWORD *)(v252 + 24);
              long long v257 = *(_OWORD *)(v252 + 40);
              *(void *)(v251 + 56) = *(void *)(v252 + 56);
              *(_OWORD *)(v251 + 24) = v256;
              *(_OWORD *)(v251 + 40) = v257;
            }
            else
            {
              *(unsigned char *)(v251 + 24) = *(unsigned char *)(v252 + 24);
              *(unsigned char *)(v251 + 25) = *(unsigned char *)(v252 + 25);
              *(unsigned char *)(v251 + 26) = *(unsigned char *)(v252 + 26);
              long long v374 = *(_OWORD *)(v252 + 28);
              *(_DWORD *)(v251 + 44) = *(_DWORD *)(v252 + 44);
              *(_OWORD *)(v251 + 28) = v374;
              *(void *)(v251 + 48) = *(void *)(v252 + 48);
              *(void *)(v251 + 56) = *(void *)(v252 + 56);
              swift_bridgeObjectRetain();
            }
            uint64_t v375 = *(int *)(v504 + 28);
            uint64_t v376 = (void *)(v251 + v375);
            uint64_t v377 = (const void *)(v252 + v375);
            uint64_t v378 = sub_23309B300();
            uint64_t v379 = *(void *)(v378 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v379 + 48))(v377, 1, v378))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v376, v377, *(void *)(*(void *)(v380 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v379 + 16))(v376, v377, v378);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v379 + 56))(v376, 0, 1, v378);
            }
            uint64_t v177 = (char *)v507;
            uint64_t v388 = *(int *)(v504 + 32);
            uint64_t v389 = (void *)(v251 + v388);
            uint64_t v390 = (void *)(v252 + v388);
            void *v389 = *v390;
            v389[1] = v390[1];
            uint64_t v391 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
            swift_bridgeObjectRetain();
            v391(v251, 0, 1, v504);
            a3 = v506;
            uint64_t v175 = v509;
            goto LABEL_158;
          }
LABEL_157:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v251, (const void *)v252, *(void *)(*(void *)(v258 - 8) + 64));
          goto LABEL_158;
        }
        if (v254)
        {
          sub_232F7CB8C(v251, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_157;
        }
        *(unsigned char *)uint64_t v251 = *(unsigned char *)v252;
        *(void *)(v251 + 8) = *(void *)(v252 + 8);
        *(_WORD *)(v251 + 16) = *(_WORD *)(v252 + 16);
        *(_WORD *)(v251 + 18) = *(_WORD *)(v252 + 18);
        long long v364 = (long long *)(v251 + 24);
        long long v365 = (long long *)(v252 + 24);
        uint64_t v366 = *(void *)(v252 + 56);
        if (*(void *)(v251 + 56) == 1)
        {
          if (v366 == 1)
          {
            long long v367 = *v365;
            long long v368 = *(_OWORD *)(v252 + 40);
            *(void *)(v251 + 56) = *(void *)(v252 + 56);
            long long *v364 = v367;
            *(_OWORD *)(v251 + 40) = v368;
          }
          else
          {
            *(unsigned char *)(v251 + 24) = *(unsigned char *)(v252 + 24);
            *(unsigned char *)(v251 + 25) = *(unsigned char *)(v252 + 25);
            *(unsigned char *)(v251 + 26) = *(unsigned char *)(v252 + 26);
            long long v431 = *(_OWORD *)(v252 + 28);
            *(_DWORD *)(v251 + 44) = *(_DWORD *)(v252 + 44);
            *(_OWORD *)(v251 + 28) = v431;
            *(void *)(v251 + 48) = *(void *)(v252 + 48);
            *(void *)(v251 + 56) = *(void *)(v252 + 56);
            swift_bridgeObjectRetain();
          }
        }
        else if (v366 == 1)
        {
          sub_232F0434C(v251 + 24);
          uint64_t v424 = *(void *)(v252 + 56);
          long long v425 = *(_OWORD *)(v252 + 40);
          long long *v364 = *v365;
          *(_OWORD *)(v251 + 40) = v425;
          *(void *)(v251 + 56) = v424;
        }
        else
        {
          *(unsigned char *)(v251 + 24) = *(unsigned char *)(v252 + 24);
          *(unsigned char *)(v251 + 25) = *(unsigned char *)(v252 + 25);
          *(unsigned char *)(v251 + 26) = *(unsigned char *)(v252 + 26);
          *(_DWORD *)(v251 + 28) = *(_DWORD *)(v252 + 28);
          *(_WORD *)(v251 + 32) = *(_WORD *)(v252 + 32);
          *(_WORD *)(v251 + 34) = *(_WORD *)(v252 + 34);
          *(_WORD *)(v251 + 36) = *(_WORD *)(v252 + 36);
          *(_WORD *)(v251 + 38) = *(_WORD *)(v252 + 38);
          *(_WORD *)(v251 + 40) = *(_WORD *)(v252 + 40);
          *(_WORD *)(v251 + 42) = *(_WORD *)(v252 + 42);
          *(_WORD *)(v251 + 44) = *(_WORD *)(v252 + 44);
          *(_WORD *)(v251 + 46) = *(_WORD *)(v252 + 46);
          *(void *)(v251 + 48) = *(void *)(v252 + 48);
          *(void *)(v251 + 56) = *(void *)(v252 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v457 = *(int *)(v504 + 28);
        uint64_t v458 = (void *)(v251 + v457);
        long long v459 = (void *)(v252 + v457);
        uint64_t v460 = sub_23309B300();
        uint64_t v461 = *(void *)(v460 - 8);
        uint64_t v462 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v461 + 48);
        uint64_t v499 = v458;
        LODWORD(v458) = v462(v458, 1, v460);
        int v463 = v462(v459, 1, v460);
        if (v458)
        {
          uint64_t v173 = v505;
          uint64_t v175 = v509;
          if (!v463)
          {
            (*(void (**)(void *, void *, uint64_t))(v461 + 16))(v499, v459, v460);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v461 + 56))(v499, 0, 1, v460);
            goto LABEL_309;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v465 = *(void *)(*(void *)(v464 - 8) + 64);
          uint64_t v466 = v499;
        }
        else
        {
          uint64_t v173 = v505;
          uint64_t v175 = v509;
          if (!v463)
          {
            (*(void (**)(void *, void *, uint64_t))(v461 + 24))(v499, v459, v460);
            goto LABEL_309;
          }
          (*(void (**)(void *, uint64_t))(v461 + 8))(v499, v460);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v465 = *(void *)(*(void *)(v467 - 8) + 64);
          uint64_t v466 = v499;
        }
        memcpy(v466, v459, v465);
LABEL_309:
        a3 = v506;
        uint64_t v495 = *(int *)(v504 + 32);
        uint64_t v496 = (void *)(v251 + v495);
        uint64_t v497 = (void *)(v252 + v495);
        *uint64_t v496 = *v497;
        v496[1] = v497[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      size_t v182 = *(void *)(*(void *)(v181 - 8) + 64);
      goto LABEL_114;
    }
    if (v180)
    {
      sub_232F7CB8C(v163, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      size_t v182 = *(void *)(*(void *)(v186 - 8) + 64);
LABEL_114:
      uint64_t v187 = v165;
      memcpy((void *)v163, (const void *)v165, v182);
      uint64_t v175 = v509;
LABEL_115:
      uint64_t v177 = (char *)v507;
      goto LABEL_151;
    }
    uint64_t v187 = v165;
    *(unsigned char *)uint64_t v163 = *(unsigned char *)v165;
    *(void *)(v163 + 8) = *(void *)(v165 + 8);
    *(_WORD *)(v163 + 16) = *(_WORD *)(v165 + 16);
    *(_WORD *)(v163 + 18) = *(_WORD *)(v165 + 18);
    uint64_t v224 = (long long *)(v163 + 24);
    uint64_t v225 = (long long *)(v165 + 24);
    uint64_t v226 = *(void *)(v169 + 56);
    if (*(void *)(v163 + 56) == 1)
    {
      if (v226 == 1)
      {
        long long v227 = *v225;
        long long v228 = *(_OWORD *)(v169 + 40);
        *(void *)(v163 + 56) = *(void *)(v169 + 56);
        *uint64_t v224 = v227;
        *(_OWORD *)(v163 + 40) = v228;
      }
      else
      {
        *(unsigned char *)(v163 + 24) = *(unsigned char *)(v169 + 24);
        *(unsigned char *)(v163 + 25) = *(unsigned char *)(v169 + 25);
        *(unsigned char *)(v163 + 26) = *(unsigned char *)(v169 + 26);
        long long v430 = *(_OWORD *)(v169 + 28);
        *(_DWORD *)(v163 + 44) = *(_DWORD *)(v169 + 44);
        *(_OWORD *)(v163 + 28) = v430;
        *(void *)(v163 + 48) = *(void *)(v169 + 48);
        *(void *)(v163 + 56) = *(void *)(v169 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v226 == 1)
    {
      sub_232F0434C(v163 + 24);
      uint64_t v422 = *(void *)(v169 + 56);
      long long v423 = *(_OWORD *)(v169 + 40);
      *uint64_t v224 = *v225;
      *(_OWORD *)(v163 + 40) = v423;
      *(void *)(v163 + 56) = v422;
    }
    else
    {
      *(unsigned char *)(v163 + 24) = *(unsigned char *)(v169 + 24);
      *(unsigned char *)(v163 + 25) = *(unsigned char *)(v169 + 25);
      *(unsigned char *)(v163 + 26) = *(unsigned char *)(v169 + 26);
      *(_DWORD *)(v163 + 28) = *(_DWORD *)(v169 + 28);
      *(_WORD *)(v163 + 32) = *(_WORD *)(v169 + 32);
      *(_WORD *)(v163 + 34) = *(_WORD *)(v169 + 34);
      *(_WORD *)(v163 + 36) = *(_WORD *)(v169 + 36);
      *(_WORD *)(v163 + 38) = *(_WORD *)(v169 + 38);
      *(_WORD *)(v163 + 40) = *(_WORD *)(v169 + 40);
      *(_WORD *)(v163 + 42) = *(_WORD *)(v169 + 42);
      *(_WORD *)(v163 + 44) = *(_WORD *)(v169 + 44);
      *(_WORD *)(v163 + 46) = *(_WORD *)(v169 + 46);
      *(void *)(v163 + 48) = *(void *)(v169 + 48);
      *(void *)(v163 + 56) = *(void *)(v169 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v446 = *(int *)(v504 + 28);
    uint64_t v447 = (void *)(v163 + v446);
    uint64_t v448 = (void *)(v169 + v446);
    uint64_t v449 = sub_23309B300();
    uint64_t v450 = *(void *)(v449 - 8);
    uint64_t v451 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v450 + 48);
    uint64_t v498 = v447;
    LODWORD(v447) = v451(v447, 1, v449);
    int v452 = v451(v448, 1, v449);
    if (v447)
    {
      uint64_t v173 = v505;
      uint64_t v175 = v509;
      if (!v452)
      {
        (*(void (**)(void *, void *, uint64_t))(v450 + 16))(v498, v448, v449);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v450 + 56))(v498, 0, 1, v449);
        goto LABEL_307;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v454 = *(void *)(*(void *)(v453 - 8) + 64);
      uint64_t v455 = v498;
    }
    else
    {
      uint64_t v173 = v505;
      uint64_t v175 = v509;
      if (!v452)
      {
        (*(void (**)(void *, void *, uint64_t))(v450 + 24))(v498, v448, v449);
        goto LABEL_307;
      }
      (*(void (**)(void *, uint64_t))(v450 + 8))(v498, v449);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v454 = *(void *)(*(void *)(v456 - 8) + 64);
      uint64_t v455 = v498;
    }
    memcpy(v455, v448, v454);
LABEL_307:
    a3 = v506;
    uint64_t v492 = *(int *)(v504 + 32);
    uint64_t v493 = (void *)(v163 + v492);
    uint64_t v494 = (void *)(v187 + v492);
    *uint64_t v493 = *v494;
    v493[1] = v494[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_115;
  }
  if (v170)
  {
LABEL_105:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v163, (const void *)v165, *(void *)(*(void *)(v178 - 8) + 64));
    uint64_t v171 = v504;
    uint64_t v172 = v166;
    uint64_t v173 = v164;
    uint64_t v175 = v509;
LABEL_106:
    uint64_t v177 = (char *)v507;
    goto LABEL_158;
  }
  uint64_t v171 = v504;
  uint64_t v172 = v166;
  uint64_t v173 = v164;
  if (v509(v165, 1, v504))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v163, (const void *)v165, *(void *)(*(void *)(v174 - 8) + 64));
    uint64_t v175 = v509;
    uint64_t v176 = v165;
    uint64_t v177 = (char *)v507;
  }
  else
  {
    *(unsigned char *)uint64_t v163 = *(unsigned char *)v165;
    uint64_t v183 = *(void *)(v165 + 8);
    *(_DWORD *)(v163 + 16) = *(_DWORD *)(v165 + 16);
    *(void *)(v163 + 8) = v183;
    uint64_t v176 = v165;
    if (*(void *)(v165 + 56) == 1)
    {
      long long v184 = *(_OWORD *)(v165 + 24);
      long long v185 = *(_OWORD *)(v165 + 40);
      *(void *)(v163 + 56) = *(void *)(v165 + 56);
      *(_OWORD *)(v163 + 24) = v184;
      *(_OWORD *)(v163 + 40) = v185;
    }
    else
    {
      *(unsigned char *)(v163 + 24) = *(unsigned char *)(v165 + 24);
      *(unsigned char *)(v163 + 25) = *(unsigned char *)(v165 + 25);
      *(unsigned char *)(v163 + 26) = *(unsigned char *)(v165 + 26);
      long long v188 = *(_OWORD *)(v165 + 28);
      *(_DWORD *)(v163 + 44) = *(_DWORD *)(v165 + 44);
      *(_OWORD *)(v163 + 28) = v188;
      *(void *)(v163 + 48) = *(void *)(v165 + 48);
      *(void *)(v163 + 56) = *(void *)(v165 + 56);
      swift_bridgeObjectRetain();
    }
    uint64_t v189 = *(int *)(v504 + 28);
    uint64_t v190 = (void *)(v163 + v189);
    uint64_t v191 = (const void *)(v165 + v189);
    uint64_t v192 = sub_23309B300();
    uint64_t v193 = *(void *)(v192 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v193 + 16))(v190, v191, v192);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
    }
    uint64_t v177 = (char *)v507;
    uint64_t v198 = *(int *)(v504 + 32);
    uint64_t v199 = (void *)(v163 + v198);
    uint64_t v200 = (void *)(v176 + v198);
    *uint64_t v199 = *v200;
    v199[1] = v200[1];
    uint64_t v201 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
    swift_bridgeObjectRetain();
    v201(v163, 0, 1, v504);
    a3 = v506;
    uint64_t v175 = v509;
  }
  uint64_t v202 = *(int *)(v172 + 20);
  uint64_t v203 = (unsigned char *)(v163 + v202);
  uint64_t v204 = (unsigned char *)(v176 + v202);
  if (v175((uint64_t)v204, 1, v504))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v203, v204, *(void *)(*(void *)(v205 - 8) + 64));
  }
  else
  {
    *uint64_t v203 = *v204;
    uint64_t v206 = *((void *)v204 + 1);
    *((_DWORD *)v203 + 4) = *((_DWORD *)v204 + 4);
    *((void *)v203 + 1) = v206;
    if (*((void *)v204 + 7) == 1)
    {
      long long v207 = *(_OWORD *)(v204 + 24);
      long long v208 = *(_OWORD *)(v204 + 40);
      *((void *)v203 + 7) = *((void *)v204 + 7);
      *(_OWORD *)(v203 + 24) = v207;
      *(_OWORD *)(v203 + 40) = v208;
    }
    else
    {
      v203[24] = v204[24];
      v203[25] = v204[25];
      v203[26] = v204[26];
      long long v209 = *(_OWORD *)(v204 + 28);
      *((_DWORD *)v203 + 11) = *((_DWORD *)v204 + 11);
      *(_OWORD *)(v203 + 28) = v209;
      *((void *)v203 + 6) = *((void *)v204 + 6);
      *((void *)v203 + 7) = *((void *)v204 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v210 = *(int *)(v504 + 28);
    uint64_t v211 = &v203[v210];
    uint64_t v212 = &v204[v210];
    uint64_t v213 = sub_23309B300();
    uint64_t v214 = *(void *)(v213 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v211, v212, *(void *)(*(void *)(v215 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v214 + 16))(v211, v212, v213);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v214 + 56))(v211, 0, 1, v213);
    }
    a3 = v506;
    uint64_t v216 = *(int *)(v504 + 32);
    uint64_t v217 = &v203[v216];
    uint64_t v218 = &v204[v216];
    void *v217 = *v218;
    v217[1] = v218[1];
    uint64_t v219 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v503 + 56);
    swift_bridgeObjectRetain();
    v219(v203, 0, 1, v504);
    uint64_t v177 = (char *)v507;
    uint64_t v175 = v509;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v500 + 56))(v163, 0, 1, v172);
LABEL_158:
  uint64_t v259 = a3[16];
  uint64_t v260 = &v177[v259];
  uint64_t v261 = (void *)((char *)v173 + v259);
  *(void *)uint64_t v260 = *v261;
  *((void *)v260 + 1) = v261[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v262 = a3[17];
  uint64_t v263 = (uint64_t)&v177[v262];
  uint64_t v264 = (uint64_t)v173 + v262;
  int v265 = v175((uint64_t)&v177[v262], 1, v171);
  int v266 = v175(v264, 1, v171);
  uint64_t v501 = v172;
  if (!v265)
  {
    if (v266)
    {
      sub_232F7CB8C(v263, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_164;
    }
    *(unsigned char *)uint64_t v263 = *(unsigned char *)v264;
    *(void *)(v263 + 8) = *(void *)(v264 + 8);
    *(_WORD *)(v263 + 16) = *(_WORD *)(v264 + 16);
    *(_WORD *)(v263 + 18) = *(_WORD *)(v264 + 18);
    uint64_t v271 = (long long *)(v263 + 24);
    uint64_t v272 = (long long *)(v264 + 24);
    uint64_t v273 = *(void *)(v264 + 56);
    if (*(void *)(v263 + 56) == 1)
    {
      if (v273 == 1)
      {
        long long v274 = *v272;
        long long v275 = *(_OWORD *)(v264 + 40);
        *(void *)(v263 + 56) = *(void *)(v264 + 56);
        *uint64_t v271 = v274;
        *(_OWORD *)(v263 + 40) = v275;
      }
      else
      {
        *(unsigned char *)(v263 + 24) = *(unsigned char *)(v264 + 24);
        *(unsigned char *)(v263 + 25) = *(unsigned char *)(v264 + 25);
        *(unsigned char *)(v263 + 26) = *(unsigned char *)(v264 + 26);
        long long v289 = *(_OWORD *)(v264 + 28);
        *(_DWORD *)(v263 + 44) = *(_DWORD *)(v264 + 44);
        *(_OWORD *)(v263 + 28) = v289;
        *(void *)(v263 + 48) = *(void *)(v264 + 48);
        *(void *)(v263 + 56) = *(void *)(v264 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v273 == 1)
    {
      sub_232F0434C(v263 + 24);
      uint64_t v287 = *(void *)(v264 + 56);
      long long v288 = *(_OWORD *)(v264 + 40);
      *uint64_t v271 = *v272;
      *(_OWORD *)(v263 + 40) = v288;
      *(void *)(v263 + 56) = v287;
    }
    else
    {
      *(unsigned char *)(v263 + 24) = *(unsigned char *)(v264 + 24);
      *(unsigned char *)(v263 + 25) = *(unsigned char *)(v264 + 25);
      *(unsigned char *)(v263 + 26) = *(unsigned char *)(v264 + 26);
      *(_DWORD *)(v263 + 28) = *(_DWORD *)(v264 + 28);
      *(_WORD *)(v263 + 32) = *(_WORD *)(v264 + 32);
      *(_WORD *)(v263 + 34) = *(_WORD *)(v264 + 34);
      *(_WORD *)(v263 + 36) = *(_WORD *)(v264 + 36);
      *(_WORD *)(v263 + 38) = *(_WORD *)(v264 + 38);
      *(_WORD *)(v263 + 40) = *(_WORD *)(v264 + 40);
      *(_WORD *)(v263 + 42) = *(_WORD *)(v264 + 42);
      *(_WORD *)(v263 + 44) = *(_WORD *)(v264 + 44);
      *(_WORD *)(v263 + 46) = *(_WORD *)(v264 + 46);
      *(void *)(v263 + 48) = *(void *)(v264 + 48);
      *(void *)(v263 + 56) = *(void *)(v264 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v290 = *(int *)(v171 + 28);
    uint64_t v291 = (void *)(v263 + v290);
    uint64_t v292 = (void *)(v264 + v290);
    uint64_t v293 = sub_23309B300();
    uint64_t v294 = *(void *)(v293 - 8);
    uint64_t v295 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v294 + 48);
    int v296 = v295(v291, 1, v293);
    int v297 = v295(v292, 1, v293);
    if (v296)
    {
      uint64_t v175 = v509;
      if (!v297)
      {
        (*(void (**)(void *, void *, uint64_t))(v294 + 16))(v291, v292, v293);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v294 + 56))(v291, 0, 1, v293);
LABEL_183:
        a3 = v506;
        uint64_t v177 = (char *)v507;
        uint64_t v173 = v505;
        uint64_t v299 = *(int *)(v171 + 32);
        uint64_t v300 = (void *)(v263 + v299);
        uint64_t v301 = (void *)(v264 + v299);
        *uint64_t v300 = *v301;
        v300[1] = v301[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v172 = v501;
        goto LABEL_184;
      }
    }
    else
    {
      uint64_t v175 = v509;
      if (!v297)
      {
        (*(void (**)(void *, void *, uint64_t))(v294 + 24))(v291, v292, v293);
        goto LABEL_183;
      }
      (*(void (**)(void *, uint64_t))(v294 + 8))(v291, v293);
    }
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v291, v292, *(void *)(*(void *)(v298 - 8) + 64));
    goto LABEL_183;
  }
  if (v266)
  {
LABEL_164:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v263, (const void *)v264, *(void *)(*(void *)(v270 - 8) + 64));
    goto LABEL_184;
  }
  *(unsigned char *)uint64_t v263 = *(unsigned char *)v264;
  uint64_t v267 = *(void *)(v264 + 8);
  *(_DWORD *)(v263 + 16) = *(_DWORD *)(v264 + 16);
  *(void *)(v263 + 8) = v267;
  if (*(void *)(v264 + 56) == 1)
  {
    long long v268 = *(_OWORD *)(v264 + 24);
    long long v269 = *(_OWORD *)(v264 + 40);
    *(void *)(v263 + 56) = *(void *)(v264 + 56);
    *(_OWORD *)(v263 + 24) = v268;
    *(_OWORD *)(v263 + 40) = v269;
  }
  else
  {
    *(unsigned char *)(v263 + 24) = *(unsigned char *)(v264 + 24);
    *(unsigned char *)(v263 + 25) = *(unsigned char *)(v264 + 25);
    *(unsigned char *)(v263 + 26) = *(unsigned char *)(v264 + 26);
    long long v276 = *(_OWORD *)(v264 + 28);
    *(_DWORD *)(v263 + 44) = *(_DWORD *)(v264 + 44);
    *(_OWORD *)(v263 + 28) = v276;
    *(void *)(v263 + 48) = *(void *)(v264 + 48);
    *(void *)(v263 + 56) = *(void *)(v264 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v277 = *(int *)(v171 + 28);
  uint64_t v278 = (void *)(v263 + v277);
  uint64_t v279 = (const void *)(v264 + v277);
  uint64_t v280 = sub_23309B300();
  uint64_t v281 = *(void *)(v280 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v281 + 48))(v279, 1, v280))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v278, v279, *(void *)(*(void *)(v282 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v281 + 16))(v278, v279, v280);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
  }
  a3 = v506;
  uint64_t v177 = (char *)v507;
  uint64_t v283 = *(int *)(v171 + 32);
  uint64_t v284 = (void *)(v263 + v283);
  uint64_t v285 = (void *)(v264 + v283);
  void *v284 = *v285;
  v284[1] = v285[1];
  uint64_t v286 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
  swift_bridgeObjectRetain();
  v286(v263, 0, 1, v171);
  uint64_t v175 = v509;
LABEL_184:
  uint64_t v302 = a3[18];
  uint64_t v303 = (uint64_t)&v177[v302];
  uint64_t v304 = (uint64_t)v173 + v302;
  int v305 = v502(&v177[v302], 1, v172);
  uint64_t v306 = v172;
  int v307 = v305;
  int v308 = v502((char *)v304, 1, v306);
  if (!v307)
  {
    if (v308)
    {
      sub_232F7CB8C(v303, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_190;
    }
    int v315 = v175(v303, 1, v504);
    int v316 = v175(v304, 1, v504);
    if (v315)
    {
      if (!v316)
      {
        *(unsigned char *)uint64_t v303 = *(unsigned char *)v304;
        uint64_t v317 = *(void *)(v304 + 8);
        *(_DWORD *)(v303 + 16) = *(_DWORD *)(v304 + 16);
        *(void *)(v303 + 8) = v317;
        uint64_t v318 = v501;
        if (*(void *)(v304 + 56) == 1)
        {
          long long v319 = *(_OWORD *)(v304 + 24);
          long long v320 = *(_OWORD *)(v304 + 40);
          *(void *)(v303 + 56) = *(void *)(v304 + 56);
          *(_OWORD *)(v303 + 24) = v319;
          *(_OWORD *)(v303 + 40) = v320;
        }
        else
        {
          *(unsigned char *)(v303 + 24) = *(unsigned char *)(v304 + 24);
          *(unsigned char *)(v303 + 25) = *(unsigned char *)(v304 + 25);
          *(unsigned char *)(v303 + 26) = *(unsigned char *)(v304 + 26);
          long long v381 = *(_OWORD *)(v304 + 28);
          *(_DWORD *)(v303 + 44) = *(_DWORD *)(v304 + 44);
          *(_OWORD *)(v303 + 28) = v381;
          *(void *)(v303 + 48) = *(void *)(v304 + 48);
          *(void *)(v303 + 56) = *(void *)(v304 + 56);
          swift_bridgeObjectRetain();
        }
        uint64_t v382 = *(int *)(v504 + 28);
        uint64_t v383 = (void *)(v303 + v382);
        uint64_t v384 = (const void *)(v304 + v382);
        uint64_t v385 = sub_23309B300();
        uint64_t v386 = *(void *)(v385 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v386 + 48))(v384, 1, v385))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v383, v384, *(void *)(*(void *)(v387 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v386 + 16))(v383, v384, v385);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v386 + 56))(v383, 0, 1, v385);
        }
        uint64_t v177 = (char *)v507;
        uint64_t v392 = *(int *)(v504 + 32);
        uint64_t v393 = (void *)(v303 + v392);
        uint64_t v394 = (void *)(v304 + v392);
        *uint64_t v393 = *v394;
        v393[1] = v394[1];
        unint64_t v395 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
        swift_bridgeObjectRetain();
        v395(v303, 0, 1, v504);
        a3 = v506;
        uint64_t v175 = v509;
LABEL_235:
        uint64_t v396 = *(int *)(v318 + 20);
        uint64_t v397 = v303 + v396;
        uint64_t v398 = v304 + v396;
        int v399 = v175(v397, 1, v504);
        int v400 = v175(v398, 1, v504);
        if (v399)
        {
          if (!v400)
          {
            *(unsigned char *)uint64_t v397 = *(unsigned char *)v398;
            uint64_t v401 = *(void *)(v398 + 8);
            *(_DWORD *)(v397 + 16) = *(_DWORD *)(v398 + 16);
            *(void *)(v397 + 8) = v401;
            if (*(void *)(v398 + 56) == 1)
            {
              long long v402 = *(_OWORD *)(v398 + 24);
              long long v403 = *(_OWORD *)(v398 + 40);
              *(void *)(v397 + 56) = *(void *)(v398 + 56);
              *(_OWORD *)(v397 + 24) = v402;
              *(_OWORD *)(v397 + 40) = v403;
            }
            else
            {
              *(unsigned char *)(v397 + 24) = *(unsigned char *)(v398 + 24);
              *(unsigned char *)(v397 + 25) = *(unsigned char *)(v398 + 25);
              *(unsigned char *)(v397 + 26) = *(unsigned char *)(v398 + 26);
              long long v410 = *(_OWORD *)(v398 + 28);
              *(_DWORD *)(v397 + 44) = *(_DWORD *)(v398 + 44);
              *(_OWORD *)(v397 + 28) = v410;
              *(void *)(v397 + 48) = *(void *)(v398 + 48);
              *(void *)(v397 + 56) = *(void *)(v398 + 56);
              swift_bridgeObjectRetain();
            }
            uint64_t v411 = *(int *)(v504 + 28);
            uint64_t v412 = (void *)(v397 + v411);
            uint64_t v413 = (const void *)(v398 + v411);
            uint64_t v414 = sub_23309B300();
            uint64_t v415 = *(void *)(v414 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v415 + 48))(v413, 1, v414))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v412, v413, *(void *)(*(void *)(v416 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v415 + 16))(v412, v413, v414);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v415 + 56))(v412, 0, 1, v414);
            }
            a3 = v506;
            uint64_t v417 = *(int *)(v504 + 32);
            uint64_t v418 = (void *)(v397 + v417);
            uint64_t v419 = (void *)(v398 + v417);
            *uint64_t v418 = *v419;
            v418[1] = v419[1];
            uint64_t v420 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
            swift_bridgeObjectRetain();
            v420(v397, 0, 1, v504);
            goto LABEL_217;
          }
          goto LABEL_241;
        }
        if (v400)
        {
          sub_232F7CB8C(v397, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_241:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v312 = *(void *)(*(void *)(v404 - 8) + 64);
          uint64_t v313 = (void *)v397;
          uint64_t v314 = (const void *)v398;
          goto LABEL_191;
        }
        *(unsigned char *)uint64_t v397 = *(unsigned char *)v398;
        *(void *)(v397 + 8) = *(void *)(v398 + 8);
        *(_WORD *)(v397 + 16) = *(_WORD *)(v398 + 16);
        *(_WORD *)(v397 + 18) = *(_WORD *)(v398 + 18);
        uint64_t v405 = (long long *)(v397 + 24);
        uint64_t v406 = (long long *)(v398 + 24);
        uint64_t v407 = *(void *)(v398 + 56);
        if (*(void *)(v397 + 56) == 1)
        {
          if (v407 == 1)
          {
            long long v408 = *v406;
            long long v409 = *(_OWORD *)(v398 + 40);
            *(void *)(v397 + 56) = *(void *)(v398 + 56);
            long long *v405 = v408;
            *(_OWORD *)(v397 + 40) = v409;
          }
          else
          {
            *(unsigned char *)(v397 + 24) = *(unsigned char *)(v398 + 24);
            *(unsigned char *)(v397 + 25) = *(unsigned char *)(v398 + 25);
            *(unsigned char *)(v397 + 26) = *(unsigned char *)(v398 + 26);
            long long v433 = *(_OWORD *)(v398 + 28);
            *(_DWORD *)(v397 + 44) = *(_DWORD *)(v398 + 44);
            *(_OWORD *)(v397 + 28) = v433;
            *(void *)(v397 + 48) = *(void *)(v398 + 48);
            *(void *)(v397 + 56) = *(void *)(v398 + 56);
            swift_bridgeObjectRetain();
          }
        }
        else if (v407 == 1)
        {
          sub_232F0434C(v397 + 24);
          uint64_t v428 = *(void *)(v398 + 56);
          long long v429 = *(_OWORD *)(v398 + 40);
          long long *v405 = *v406;
          *(_OWORD *)(v397 + 40) = v429;
          *(void *)(v397 + 56) = v428;
        }
        else
        {
          *(unsigned char *)(v397 + 24) = *(unsigned char *)(v398 + 24);
          *(unsigned char *)(v397 + 25) = *(unsigned char *)(v398 + 25);
          *(unsigned char *)(v397 + 26) = *(unsigned char *)(v398 + 26);
          *(_DWORD *)(v397 + 28) = *(_DWORD *)(v398 + 28);
          *(_WORD *)(v397 + 32) = *(_WORD *)(v398 + 32);
          *(_WORD *)(v397 + 34) = *(_WORD *)(v398 + 34);
          *(_WORD *)(v397 + 36) = *(_WORD *)(v398 + 36);
          *(_WORD *)(v397 + 38) = *(_WORD *)(v398 + 38);
          *(_WORD *)(v397 + 40) = *(_WORD *)(v398 + 40);
          *(_WORD *)(v397 + 42) = *(_WORD *)(v398 + 42);
          *(_WORD *)(v397 + 44) = *(_WORD *)(v398 + 44);
          *(_WORD *)(v397 + 46) = *(_WORD *)(v398 + 46);
          *(void *)(v397 + 48) = *(void *)(v398 + 48);
          *(void *)(v397 + 56) = *(void *)(v398 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v480 = *(int *)(v504 + 28);
        uint64_t v481 = (void *)(v397 + v480);
        uint64_t v482 = (void *)(v398 + v480);
        uint64_t v483 = sub_23309B300();
        uint64_t v484 = *(void *)(v483 - 8);
        long long v485 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v484 + 48);
        int v486 = v485(v481, 1, v483);
        int v487 = v485(v482, 1, v483);
        if (v486)
        {
          uint64_t v173 = v505;
          if (!v487)
          {
            (*(void (**)(void *, void *, uint64_t))(v484 + 16))(v481, v482, v483);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v484 + 56))(v481, 0, 1, v483);
LABEL_302:
            a3 = v506;
            uint64_t v177 = (char *)v507;
            uint64_t v489 = *(int *)(v504 + 32);
            uint64_t v490 = (void *)(v397 + v489);
            uint64_t v491 = (void *)(v398 + v489);
            *uint64_t v490 = *v491;
            v490[1] = v491[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            goto LABEL_217;
          }
        }
        else
        {
          uint64_t v173 = v505;
          if (!v487)
          {
            (*(void (**)(void *, void *, uint64_t))(v484 + 24))(v481, v482, v483);
            goto LABEL_302;
          }
          (*(void (**)(void *, uint64_t))(v484 + 8))(v481, v483);
        }
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v481, v482, *(void *)(*(void *)(v488 - 8) + 64));
        goto LABEL_302;
      }
      goto LABEL_200;
    }
    if (v316)
    {
      sub_232F7CB8C(v303, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_200:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v303, (const void *)v304, *(void *)(*(void *)(v324 - 8) + 64));
LABEL_201:
      uint64_t v318 = v501;
      goto LABEL_235;
    }
    *(unsigned char *)uint64_t v303 = *(unsigned char *)v304;
    *(void *)(v303 + 8) = *(void *)(v304 + 8);
    *(_WORD *)(v303 + 16) = *(_WORD *)(v304 + 16);
    *(_WORD *)(v303 + 18) = *(_WORD *)(v304 + 18);
    uint64_t v369 = (long long *)(v303 + 24);
    uint64_t v370 = (long long *)(v304 + 24);
    uint64_t v371 = *(void *)(v304 + 56);
    if (*(void *)(v303 + 56) == 1)
    {
      if (v371 == 1)
      {
        long long v372 = *v370;
        long long v373 = *(_OWORD *)(v304 + 40);
        *(void *)(v303 + 56) = *(void *)(v304 + 56);
        long long *v369 = v372;
        *(_OWORD *)(v303 + 40) = v373;
      }
      else
      {
        *(unsigned char *)(v303 + 24) = *(unsigned char *)(v304 + 24);
        *(unsigned char *)(v303 + 25) = *(unsigned char *)(v304 + 25);
        *(unsigned char *)(v303 + 26) = *(unsigned char *)(v304 + 26);
        long long v432 = *(_OWORD *)(v304 + 28);
        *(_DWORD *)(v303 + 44) = *(_DWORD *)(v304 + 44);
        *(_OWORD *)(v303 + 28) = v432;
        *(void *)(v303 + 48) = *(void *)(v304 + 48);
        *(void *)(v303 + 56) = *(void *)(v304 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v371 == 1)
    {
      sub_232F0434C(v303 + 24);
      uint64_t v426 = *(void *)(v304 + 56);
      long long v427 = *(_OWORD *)(v304 + 40);
      long long *v369 = *v370;
      *(_OWORD *)(v303 + 40) = v427;
      *(void *)(v303 + 56) = v426;
    }
    else
    {
      *(unsigned char *)(v303 + 24) = *(unsigned char *)(v304 + 24);
      *(unsigned char *)(v303 + 25) = *(unsigned char *)(v304 + 25);
      *(unsigned char *)(v303 + 26) = *(unsigned char *)(v304 + 26);
      *(_DWORD *)(v303 + 28) = *(_DWORD *)(v304 + 28);
      *(_WORD *)(v303 + 32) = *(_WORD *)(v304 + 32);
      *(_WORD *)(v303 + 34) = *(_WORD *)(v304 + 34);
      *(_WORD *)(v303 + 36) = *(_WORD *)(v304 + 36);
      *(_WORD *)(v303 + 38) = *(_WORD *)(v304 + 38);
      *(_WORD *)(v303 + 40) = *(_WORD *)(v304 + 40);
      *(_WORD *)(v303 + 42) = *(_WORD *)(v304 + 42);
      *(_WORD *)(v303 + 44) = *(_WORD *)(v304 + 44);
      *(_WORD *)(v303 + 46) = *(_WORD *)(v304 + 46);
      *(void *)(v303 + 48) = *(void *)(v304 + 48);
      *(void *)(v303 + 56) = *(void *)(v304 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v468 = *(int *)(v504 + 28);
    uint64_t v469 = (void *)(v303 + v468);
    uint64_t v470 = (void *)(v304 + v468);
    uint64_t v471 = sub_23309B300();
    uint64_t v472 = *(void *)(v471 - 8);
    uint64_t v473 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v472 + 48);
    int v474 = v473(v469, 1, v471);
    int v475 = v473(v470, 1, v471);
    if (v474)
    {
      uint64_t v173 = v505;
      uint64_t v175 = v509;
      if (!v475)
      {
        (*(void (**)(void *, void *, uint64_t))(v472 + 16))(v469, v470, v471);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v472 + 56))(v469, 0, 1, v471);
LABEL_294:
        uint64_t v477 = *(int *)(v504 + 32);
        uint64_t v478 = (void *)(v303 + v477);
        uint64_t v479 = (void *)(v304 + v477);
        void *v478 = *v479;
        v478[1] = v479[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = v506;
        uint64_t v177 = (char *)v507;
        goto LABEL_201;
      }
    }
    else
    {
      uint64_t v173 = v505;
      uint64_t v175 = v509;
      if (!v475)
      {
        (*(void (**)(void *, void *, uint64_t))(v472 + 24))(v469, v470, v471);
        goto LABEL_294;
      }
      (*(void (**)(void *, uint64_t))(v472 + 8))(v469, v471);
    }
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v469, v470, *(void *)(*(void *)(v476 - 8) + 64));
    goto LABEL_294;
  }
  if (v308)
  {
LABEL_190:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v312 = *(void *)(*(void *)(v311 - 8) + 64);
    uint64_t v313 = (void *)v303;
    uint64_t v314 = (const void *)v304;
LABEL_191:
    memcpy(v313, v314, v312);
    goto LABEL_217;
  }
  if (v175(v304, 1, v504))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v303, (const void *)v304, *(void *)(*(void *)(v309 - 8) + 64));
    uint64_t v310 = v501;
  }
  else
  {
    *(unsigned char *)uint64_t v303 = *(unsigned char *)v304;
    uint64_t v321 = *(void *)(v304 + 8);
    *(_DWORD *)(v303 + 16) = *(_DWORD *)(v304 + 16);
    *(void *)(v303 + 8) = v321;
    if (*(void *)(v304 + 56) == 1)
    {
      long long v322 = *(_OWORD *)(v304 + 24);
      long long v323 = *(_OWORD *)(v304 + 40);
      *(void *)(v303 + 56) = *(void *)(v304 + 56);
      *(_OWORD *)(v303 + 24) = v322;
      *(_OWORD *)(v303 + 40) = v323;
    }
    else
    {
      *(unsigned char *)(v303 + 24) = *(unsigned char *)(v304 + 24);
      *(unsigned char *)(v303 + 25) = *(unsigned char *)(v304 + 25);
      *(unsigned char *)(v303 + 26) = *(unsigned char *)(v304 + 26);
      long long v325 = *(_OWORD *)(v304 + 28);
      *(_DWORD *)(v303 + 44) = *(_DWORD *)(v304 + 44);
      *(_OWORD *)(v303 + 28) = v325;
      *(void *)(v303 + 48) = *(void *)(v304 + 48);
      *(void *)(v303 + 56) = *(void *)(v304 + 56);
      swift_bridgeObjectRetain();
    }
    uint64_t v326 = *(int *)(v504 + 28);
    uint64_t v327 = (void *)(v303 + v326);
    uint64_t v328 = (const void *)(v304 + v326);
    uint64_t v329 = sub_23309B300();
    uint64_t v330 = *(void *)(v329 - 8);
    uint64_t v310 = v501;
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v330 + 48))(v328, 1, v329))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v327, v328, *(void *)(*(void *)(v331 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v330 + 16))(v327, v328, v329);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v330 + 56))(v327, 0, 1, v329);
    }
    uint64_t v177 = (char *)v507;
    uint64_t v332 = *(int *)(v504 + 32);
    uint64_t v333 = (void *)(v303 + v332);
    uint64_t v334 = (void *)(v304 + v332);
    *uint64_t v333 = *v334;
    v333[1] = v334[1];
    uint64_t v335 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v503 + 56);
    swift_bridgeObjectRetain();
    v335(v303, 0, 1, v504);
    a3 = v506;
    uint64_t v175 = v509;
  }
  uint64_t v336 = *(int *)(v310 + 20);
  uint64_t v337 = (unsigned char *)(v303 + v336);
  uint64_t v338 = (unsigned char *)(v304 + v336);
  if (v175((uint64_t)v338, 1, v504))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v337, v338, *(void *)(*(void *)(v339 - 8) + 64));
  }
  else
  {
    *uint64_t v337 = *v338;
    uint64_t v340 = *((void *)v338 + 1);
    *((_DWORD *)v337 + 4) = *((_DWORD *)v338 + 4);
    *((void *)v337 + 1) = v340;
    if (*((void *)v338 + 7) == 1)
    {
      long long v341 = *(_OWORD *)(v338 + 24);
      long long v342 = *(_OWORD *)(v338 + 40);
      *((void *)v337 + 7) = *((void *)v338 + 7);
      *(_OWORD *)(v337 + 24) = v341;
      *(_OWORD *)(v337 + 40) = v342;
    }
    else
    {
      v337[24] = v338[24];
      v337[25] = v338[25];
      v337[26] = v338[26];
      long long v343 = *(_OWORD *)(v338 + 28);
      *((_DWORD *)v337 + 11) = *((_DWORD *)v338 + 11);
      *(_OWORD *)(v337 + 28) = v343;
      *((void *)v337 + 6) = *((void *)v338 + 6);
      *((void *)v337 + 7) = *((void *)v338 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v344 = *(int *)(v504 + 28);
    long long v345 = &v337[v344];
    uint64_t v346 = &v338[v344];
    uint64_t v347 = sub_23309B300();
    uint64_t v348 = *(void *)(v347 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v348 + 48))(v346, 1, v347))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v345, v346, *(void *)(*(void *)(v349 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v348 + 16))(v345, v346, v347);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v348 + 56))(v345, 0, 1, v347);
    }
    a3 = v506;
    uint64_t v350 = *(int *)(v504 + 32);
    uint64_t v351 = &v337[v350];
    uint64_t v352 = &v338[v350];
    *uint64_t v351 = *v352;
    v351[1] = v352[1];
    uint64_t v353 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v503 + 56);
    swift_bridgeObjectRetain();
    v353(v337, 0, 1, v504);
    uint64_t v177 = (char *)v507;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v500 + 56))(v303, 0, 1, v310);
LABEL_217:
  uint64_t v354 = a3[19];
  uint64_t v355 = &v177[v354];
  uint64_t v356 = (void *)((char *)v173 + v354);
  *(void *)uint64_t v355 = *v356;
  *((void *)v355 + 1) = v356[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v357 = a3[20];
  uint64_t v358 = &v177[v357];
  uint64_t v359 = (void *)((char *)v173 + v357);
  *(void *)uint64_t v358 = *v359;
  *((void *)v358 + 1) = v359[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v360 = a3[21];
  uint64_t v361 = &v177[v360];
  uint64_t v362 = (void *)((char *)v173 + v360);
  *(void *)uint64_t v361 = *v362;
  *((void *)v361 + 1) = v362[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v177;
}

uint64_t initializeWithTake for ModelsDSTU2.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Reference();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    uint64_t v13 = *(int *)(v9 + 24);
    uint64_t v14 = (_OWORD *)((char *)v7 + v13);
    int v15 = (_OWORD *)((char *)v8 + v13);
    uint64_t v16 = type metadata accessor for Identifier();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v123 = v17;
      long long v19 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v19;
      *((void *)v14 + 4) = *((void *)v15 + 4);
      uint64_t v20 = *(int *)(v16 + 24);
      uint64_t v127 = (char *)v14 + v20;
      uint64_t v21 = (char *)v15 + v20;
      uint64_t v22 = sub_23309AF80();
      uint64_t v122 = *(void *)(v22 - 8);
      uint64_t v124 = v21;
      uint64_t v23 = v21;
      uint64_t v24 = v22;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v23, 1, v22))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v127, v124, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v122 + 32))(v127, v124, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v127, 0, 1, v24);
      }
      *(_OWORD *)((char *)v14 + *(int *)(v16 + 28)) = *(_OWORD *)((char *)v15 + *(int *)(v16 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v123 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v26 = a3[7];
  uint64_t v27 = (unsigned char *)(a1 + v26);
  uint64_t v28 = (unsigned char *)(a2 + v26);
  uint64_t v29 = type metadata accessor for FHIRDateTime();
  uint64_t v128 = *(void *)(v29 - 8);
  uint64_t v30 = *(unsigned int (**)(void, void, void))(v128 + 48);
  int v125 = v30;
  if (v30(v28, 1, v29))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    *uint64_t v27 = *v28;
    *((void *)v27 + 1) = *((void *)v28 + 1);
    *((_DWORD *)v27 + 4) = *((_DWORD *)v28 + 4);
    *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
    *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
    *((void *)v27 + 7) = *((void *)v28 + 7);
    uint64_t v32 = *(int *)(v29 + 28);
    uint64_t v33 = &v27[v32];
    uint64_t v34 = &v28[v32];
    uint64_t v35 = sub_23309B300();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    *(_OWORD *)&v27[*(int *)(v29 + 32)] = *(_OWORD *)&v28[*(int *)(v29 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v27, 0, 1, v29);
    uint64_t v30 = (unsigned int (*)(void, void, void))v125;
  }
  uint64_t v38 = a3[8];
  uint64_t v39 = a3[9];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(void *)(v40 + 16) = *(void *)(v41 + 16);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(void *)(v42 + 16) = *(void *)(v43 + 16);
  uint64_t v44 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v44) = *(_OWORD *)(a2 + v44);
  uint64_t v45 = a3[12];
  uint64_t v46 = a3[13];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = (long long *)(a2 + v45);
  long long v49 = *v48;
  *(void *)(v47 + 16) = *((void *)v48 + 2);
  uint64_t v50 = *(void *)(a2 + v46);
  *(_OWORD *)uint64_t v47 = v49;
  *(void *)(a1 + v46) = v50;
  uint64_t v51 = a3[14];
  uint64_t v52 = (unsigned char *)(a1 + v51);
  long long v53 = (unsigned char *)(a2 + v51);
  if (v30(a2 + v51, 1, v29))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    *uint64_t v52 = *v53;
    *((void *)v52 + 1) = *((void *)v53 + 1);
    *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v53 + 24);
    *(_OWORD *)(v52 + 40) = *(_OWORD *)(v53 + 40);
    *((void *)v52 + 7) = *((void *)v53 + 7);
    uint64_t v55 = *(int *)(v29 + 28);
    uint64_t v56 = &v52[v55];
    uint64_t v57 = &v53[v55];
    uint64_t v58 = sub_23309B300();
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    *(_OWORD *)&v52[*(int *)(v29 + 32)] = *(_OWORD *)&v53[*(int *)(v29 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v52, 0, 1, v29);
    uint64_t v30 = (unsigned int (*)(void, void, void))v125;
  }
  uint64_t v61 = a3[15];
  int v62 = (unsigned char *)(a1 + v61);
  int v63 = (unsigned char *)(a2 + v61);
  uint64_t v64 = type metadata accessor for Period();
  uint64_t v121 = *(void *)(v64 - 8);
  long long v65 = *(unsigned int (**)(void, void, void))(v121 + 48);
  if (v65(v63, 1, v64))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    uint64_t v119 = v65;
    if (v30(v63, 1, v29))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      *int v62 = *v63;
      *((void *)v62 + 1) = *((void *)v63 + 1);
      *((_DWORD *)v62 + 4) = *((_DWORD *)v63 + 4);
      *(_OWORD *)(v62 + 24) = *(_OWORD *)(v63 + 24);
      *(_OWORD *)(v62 + 40) = *(_OWORD *)(v63 + 40);
      *((void *)v62 + 7) = *((void *)v63 + 7);
      uint64_t v68 = *(int *)(v29 + 28);
      __dst = &v62[v68];
      uint64_t v69 = &v63[v68];
      uint64_t v70 = sub_23309B300();
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 32))(__dst, v69, v70);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
      }
      *(_OWORD *)&v62[*(int *)(v29 + 32)] = *(_OWORD *)&v63[*(int *)(v29 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v62, 0, 1, v29);
      uint64_t v30 = (unsigned int (*)(void, void, void))v125;
    }
    uint64_t v73 = *(int *)(v64 + 20);
    uint64_t v74 = &v62[v73];
    uint64_t v75 = &v63[v73];
    if (v30(v75, 1, v29))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      *uint64_t v74 = *v75;
      *((void *)v74 + 1) = *((void *)v75 + 1);
      *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
      *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
      *(_OWORD *)(v74 + 40) = *(_OWORD *)(v75 + 40);
      *((void *)v74 + 7) = *((void *)v75 + 7);
      uint64_t v77 = *(int *)(v29 + 28);
      __dsta = &v74[v77];
      uint64_t v78 = &v75[v77];
      uint64_t v79 = sub_23309B300();
      uint64_t v113 = *(void *)(v79 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v113 + 48))(v78, 1, v79))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v78, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v113 + 32))(__dsta, v78, v79);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v113 + 56))(__dsta, 0, 1, v79);
      }
      *(_OWORD *)&v74[*(int *)(v29 + 32)] = *(_OWORD *)&v75[*(int *)(v29 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v74, 0, 1, v29);
      uint64_t v30 = (unsigned int (*)(void, void, void))v125;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v121 + 56))(v62, 0, 1, v64);
    long long v65 = v119;
  }
  uint64_t v81 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  long long v82 = (unsigned char *)(a1 + v81);
  uint64_t v83 = (unsigned char *)(a2 + v81);
  if (v30(a2 + v81, 1, v29))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    __dstb = (void *)v64;
    long long v120 = v65;
    *long long v82 = *v83;
    *((void *)v82 + 1) = *((void *)v83 + 1);
    *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
    *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
    *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
    *((void *)v82 + 7) = *((void *)v83 + 7);
    uint64_t v85 = *(int *)(v29 + 28);
    long long v86 = &v82[v85];
    uint64_t v87 = &v83[v85];
    uint64_t v88 = sub_23309B300();
    uint64_t v89 = *(void *)(v88 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v89 + 32))(v86, v87, v88);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
    }
    uint64_t v64 = (uint64_t)__dstb;
    *(_OWORD *)&v82[*(int *)(v29 + 32)] = *(_OWORD *)&v83[*(int *)(v29 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v82, 0, 1, v29);
    uint64_t v30 = (unsigned int (*)(void, void, void))v125;
    long long v65 = v120;
  }
  uint64_t v91 = a3[18];
  uint64_t v92 = (unsigned char *)(a1 + v91);
  int v93 = (unsigned char *)(a2 + v91);
  if (v65(a2 + v91, 1, v64))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
  }
  else
  {
    if (v30(v93, 1, v29))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64));
    }
    else
    {
      __dstc = (void *)v64;
      *uint64_t v92 = *v93;
      *((void *)v92 + 1) = *((void *)v93 + 1);
      *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
      *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
      *(_OWORD *)(v92 + 40) = *(_OWORD *)(v93 + 40);
      *((void *)v92 + 7) = *((void *)v93 + 7);
      uint64_t v96 = *(int *)(v29 + 28);
      uint64_t v97 = &v92[v96];
      uint64_t v98 = &v93[v96];
      uint64_t v99 = sub_23309B300();
      uint64_t v100 = *(void *)(v99 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v100 + 32))(v97, v98, v99);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      }
      uint64_t v64 = (uint64_t)__dstc;
      *(_OWORD *)&v92[*(int *)(v29 + 32)] = *(_OWORD *)&v93[*(int *)(v29 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v92, 0, 1, v29);
      uint64_t v30 = (unsigned int (*)(void, void, void))v125;
    }
    uint64_t v102 = *(int *)(v64 + 20);
    uint64_t v103 = &v92[v102];
    uint64_t v104 = &v93[v102];
    if (v30(v104, 1, v29))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
    }
    else
    {
      __dstd = (void *)v64;
      *uint64_t v103 = *v104;
      *((void *)v103 + 1) = *((void *)v104 + 1);
      *((_DWORD *)v103 + 4) = *((_DWORD *)v104 + 4);
      *(_OWORD *)(v103 + 24) = *(_OWORD *)(v104 + 24);
      *(_OWORD *)(v103 + 40) = *(_OWORD *)(v104 + 40);
      *((void *)v103 + 7) = *((void *)v104 + 7);
      uint64_t v106 = *(int *)(v29 + 28);
      int v126 = &v103[v106];
      long long v107 = &v104[v106];
      uint64_t v108 = sub_23309B300();
      uint64_t v109 = *(void *)(v108 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v126, v107, *(void *)(*(void *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v109 + 32))(v126, v107, v108);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v126, 0, 1, v108);
      }
      *(_OWORD *)&v103[*(int *)(v29 + 32)] = *(_OWORD *)&v104[*(int *)(v29 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v103, 0, 1, v29);
      uint64_t v64 = (uint64_t)__dstd;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v121 + 56))(v92, 0, 1, v64);
  }
  uint64_t v111 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v111) = *(_OWORD *)(a2 + v111);
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  return a1;
}

char *assignWithTake for ModelsDSTU2.Condition(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + 2;
  uint64_t v8 = v4[2];
  if (a1[2] == 1) {
    goto LABEL_4;
  }
  if (v8 == 1)
  {
    sub_232F042A4((uint64_t)(a1 + 2));
    uint64_t v8 = v4[2];
LABEL_4:
    *uint64_t v7 = v8;
    goto LABEL_6;
  }
  *uint64_t v7 = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v384 = a3;
  uint64_t v9 = a3[6];
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (void *)((char *)v4 + v9);
  uint64_t v12 = type metadata accessor for Reference();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14((uint64_t)v11, 1, v12);
  uint64_t v383 = v4;
  if (v15)
  {
    if (!v16)
    {
      long long v17 = *((_OWORD *)v11 + 1);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v17;
      uint64_t v18 = *(int *)(v12 + 24);
      long long v19 = (_OWORD *)(v10 + v18);
      uint64_t v20 = (_OWORD *)((char *)v11 + v18);
      uint64_t v21 = type metadata accessor for Identifier();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        long long v39 = v20[1];
        *long long v19 = *v20;
        v19[1] = v39;
        *((void *)v19 + 4) = *((void *)v20 + 4);
        uint64_t v40 = *(int *)(v21 + 24);
        __src = (char *)v19 + v40;
        uint64_t v41 = (char *)v20 + v40;
        uint64_t v42 = sub_23309AF80();
        uint64_t v385 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v385 + 48))(v41, 1, v42))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(__src, v41, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v385 + 32))(__src, v41, v42);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v385 + 56))(__src, 0, 1, v42);
        }
        uint64_t v4 = v383;
        *(_OWORD *)((char *)v19 + *(int *)(v21 + 28)) = *(_OWORD *)((char *)v20 + *(int *)(v21 + 28));
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v16)
  {
    sub_232F7CB8C(v10, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_12:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v25 = *(void *)(*(void *)(v24 - 8) + 64);
    uint64_t v26 = (void *)v10;
    uint64_t v27 = v11;
    goto LABEL_13;
  }
  uint64_t v28 = v11[1];
  *(void *)uint64_t v10 = *v11;
  *(void *)(v10 + 8) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = v11[3];
  *(void *)(v10 + 16) = v11[2];
  *(void *)(v10 + 24) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v12 + 24);
  uint64_t v31 = v10 + v30;
  uint64_t v32 = (char *)v11 + v30;
  uint64_t v33 = type metadata accessor for Identifier();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35((uint64_t)v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      long long v46 = *((_OWORD *)v32 + 1);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      *(_OWORD *)(v31 + 16) = v46;
      *(void *)(v31 + 32) = *((void *)v32 + 4);
      uint64_t v47 = *(int *)(v33 + 24);
      uint64_t v48 = (void *)(v31 + v47);
      long long v49 = &v32[v47];
      uint64_t v50 = sub_23309AF80();
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v51 + 32))(v48, v49, v50);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      uint64_t v4 = v383;
      *(_OWORD *)(v31 + *(int *)(v33 + 28)) = *(_OWORD *)&v32[*(int *)(v33 + 28)];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_26;
    }
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    size_t v25 = *(void *)(*(void *)(v38 - 8) + 64);
    uint64_t v26 = (void *)v31;
    uint64_t v27 = v32;
LABEL_13:
    memcpy(v26, v27, v25);
LABEL_26:
    uint64_t v44 = v384;
    goto LABEL_27;
  }
  uint64_t v44 = v384;
  if (v37)
  {
    sub_232F7CB8C(v31, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy((void *)v31, v32, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_27;
  }
  uint64_t v80 = *((void *)v32 + 1);
  *(void *)uint64_t v31 = *(void *)v32;
  *(void *)(v31 + 8) = v80;
  swift_bridgeObjectRelease();
  if (*(void *)(v31 + 24) == 1) {
    goto LABEL_51;
  }
  uint64_t v81 = *((void *)v32 + 3);
  if (v81 == 1)
  {
    sub_232F042F8(v31 + 16);
LABEL_51:
    *(_OWORD *)(v31 + 16) = *((_OWORD *)v32 + 1);
    *(void *)(v31 + 32) = *((void *)v32 + 4);
    goto LABEL_122;
  }
  *(void *)(v31 + 16) = *((void *)v32 + 2);
  *(void *)(v31 + 24) = v81;
  swift_bridgeObjectRelease();
  *(void *)(v31 + 32) = *((void *)v32 + 4);
  swift_bridgeObjectRelease();
LABEL_122:
  uint64_t v178 = *(int *)(v33 + 24);
  int v179 = (void *)(v31 + v178);
  int v180 = &v32[v178];
  uint64_t v181 = sub_23309AF80();
  uint64_t v182 = *(void *)(v181 - 8);
  uint64_t v183 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v182 + 48);
  uint64_t v387 = v179;
  LODWORD(v179) = v183(v179, 1, v181);
  int v184 = v183(v180, 1, v181);
  if (v179)
  {
    if (!v184)
    {
      (*(void (**)(void *, char *, uint64_t))(v182 + 32))(v387, v180, v181);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v182 + 56))(v387, 0, 1, v181);
      goto LABEL_243;
    }
    sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    size_t v186 = *(void *)(*(void *)(v185 - 8) + 64);
    uint64_t v187 = v387;
  }
  else
  {
    if (!v184)
    {
      (*(void (**)(void *, char *, uint64_t))(v182 + 40))(v387, v180, v181);
      goto LABEL_243;
    }
    (*(void (**)(void *, uint64_t))(v182 + 8))(v387, v181);
    sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    size_t v186 = *(void *)(*(void *)(v188 - 8) + 64);
    uint64_t v187 = v387;
  }
  memcpy(v187, v180, v186);
LABEL_243:
  uint64_t v44 = v384;
  uint64_t v347 = *(int *)(v33 + 28);
  uint64_t v348 = (void *)(v31 + v347);
  uint64_t v349 = &v32[v347];
  uint64_t v351 = *(void *)v349;
  uint64_t v350 = *((void *)v349 + 1);
  *uint64_t v348 = v351;
  v348[1] = v350;
  swift_bridgeObjectRelease();
  uint64_t v4 = v383;
LABEL_27:
  uint64_t v53 = v44[7];
  uint64_t v54 = (uint64_t)a1 + v53;
  uint64_t v55 = (char *)v4 + v53;
  uint64_t v56 = type metadata accessor for FHIRDateTime();
  uint64_t v382 = *(void *)(v56 - 8);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v382 + 48);
  unsigned int v58 = v57(v54, 1, v56);
  uint64_t v386 = v56;
  unsigned int v59 = v57((uint64_t)v55, 1, v56);
  if (!v58)
  {
    if (v59)
    {
      sub_232F7CB8C(v54, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_33;
    }
    *(unsigned char *)uint64_t v54 = *v55;
    *(void *)(v54 + 8) = *((void *)v55 + 1);
    *(_DWORD *)(v54 + 16) = *((_DWORD *)v55 + 4);
    if (*(void *)(v54 + 56) != 1)
    {
      uint64_t v67 = *((void *)v55 + 7);
      if (v67 != 1)
      {
        *(unsigned char *)(v54 + 24) = v55[24];
        *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
        *(_DWORD *)(v54 + 28) = *((_DWORD *)v55 + 7);
        *(_OWORD *)(v54 + 32) = *((_OWORD *)v55 + 2);
        *(void *)(v54 + 48) = *((void *)v55 + 6);
        *(void *)(v54 + 56) = v67;
        swift_bridgeObjectRelease();
LABEL_41:
        uint64_t v69 = *(int *)(v56 + 28);
        uint64_t v70 = (void *)(v54 + v69);
        uint64_t v71 = &v55[v69];
        uint64_t v72 = sub_23309B300();
        uint64_t v73 = *(void *)(v72 - 8);
        uint64_t v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v73 + 48);
        uint64_t v379 = v70;
        LODWORD(v70) = v74(v70, 1, v72);
        int v75 = v74(v71, 1, v72);
        if (v70)
        {
          if (!v75)
          {
            (*(void (**)(void *, char *, uint64_t))(v73 + 32))(v379, v71, v72);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v379, 0, 1, v72);
            goto LABEL_53;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v77 = *(void *)(*(void *)(v76 - 8) + 64);
          uint64_t v78 = v379;
        }
        else
        {
          if (!v75)
          {
            (*(void (**)(void *, char *, uint64_t))(v73 + 40))(v379, v71, v72);
            goto LABEL_53;
          }
          (*(void (**)(void *, uint64_t))(v73 + 8))(v379, v72);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v77 = *(void *)(*(void *)(v79 - 8) + 64);
          uint64_t v78 = v379;
        }
        memcpy(v78, v71, v77);
LABEL_53:
        uint64_t v4 = v383;
        uint64_t v44 = v384;
        uint64_t v82 = *(int *)(v386 + 32);
        uint64_t v83 = (void *)(v54 + v82);
        uint64_t v84 = &v55[v82];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        void *v83 = v86;
        v83[1] = v85;
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      sub_232F0434C(v54 + 24);
    }
    long long v68 = *(_OWORD *)(v55 + 40);
    *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
    *(_OWORD *)(v54 + 40) = v68;
    *(void *)(v54 + 56) = *((void *)v55 + 7);
    goto LABEL_41;
  }
  if (v59)
  {
LABEL_33:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v54, v55, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_54;
  }
  *(unsigned char *)uint64_t v54 = *v55;
  *(void *)(v54 + 8) = *((void *)v55 + 1);
  *(_DWORD *)(v54 + 16) = *((_DWORD *)v55 + 4);
  *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
  *(_OWORD *)(v54 + 40) = *(_OWORD *)(v55 + 40);
  *(void *)(v54 + 56) = *((void *)v55 + 7);
  uint64_t v60 = *(int *)(v56 + 28);
  uint64_t v61 = (void *)(v54 + v60);
  int v62 = &v55[v60];
  uint64_t v63 = sub_23309B300();
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  *(_OWORD *)(v54 + *(int *)(v386 + 32)) = *(_OWORD *)&v55[*(int *)(v386 + 32)];
  uint64_t v4 = v383;
  (*(void (**)(uint64_t, void, uint64_t))(v382 + 56))(v54, 0, 1);
LABEL_54:
  uint64_t v87 = v44[8];
  uint64_t v88 = (void *)((char *)a1 + v87);
  uint64_t v89 = (char *)v4 + v87;
  uint64_t v90 = *(void *)((char *)v4 + v87 + 8);
  void *v88 = *(void *)((char *)v4 + v87);
  v88[1] = v90;
  swift_bridgeObjectRelease();
  v88[2] = *((void *)v89 + 2);
  swift_bridgeObjectRelease();
  uint64_t v91 = v44[9];
  uint64_t v92 = (uint64_t)a1 + v91;
  int v93 = (char *)v4 + v91;
  if (*(void *)((char *)a1 + v91 + 8) == 1)
  {
LABEL_57:
    *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
    *(void *)(v92 + 16) = *((void *)v93 + 2);
    goto LABEL_59;
  }
  uint64_t v94 = *((void *)v93 + 1);
  if (v94 == 1)
  {
    sub_232F042F8(v92);
    goto LABEL_57;
  }
  *(void *)uint64_t v92 = *(void *)v93;
  *(void *)(v92 + 8) = v94;
  swift_bridgeObjectRelease();
  *(void *)(v92 + 16) = *((void *)v93 + 2);
  swift_bridgeObjectRelease();
LABEL_59:
  uint64_t v95 = (unsigned int (*)(char *, uint64_t, uint64_t))v57;
  uint64_t v96 = v44[10];
  uint64_t v97 = (void *)((char *)a1 + v96);
  uint64_t v98 = (void *)((char *)v4 + v96);
  uint64_t v100 = *v98;
  uint64_t v99 = v98[1];
  *uint64_t v97 = v100;
  v97[1] = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = v44[11];
  uint64_t v102 = (void *)((char *)a1 + v101);
  uint64_t v103 = (void *)((char *)v4 + v101);
  uint64_t v105 = *v103;
  uint64_t v104 = v103[1];
  *uint64_t v102 = v105;
  v102[1] = v104;
  swift_bridgeObjectRelease();
  uint64_t v106 = v44[12];
  uint64_t v107 = (uint64_t)a1 + v106;
  uint64_t v108 = (char *)v4 + v106;
  uint64_t v109 = v386;
  if (*(void *)((char *)a1 + v106 + 8) == 1)
  {
LABEL_62:
    *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
    *(void *)(v107 + 16) = *((void *)v108 + 2);
    goto LABEL_64;
  }
  uint64_t v110 = *((void *)v108 + 1);
  if (v110 == 1)
  {
    sub_232F042F8(v107);
    goto LABEL_62;
  }
  *(void *)uint64_t v107 = *(void *)v108;
  *(void *)(v107 + 8) = v110;
  swift_bridgeObjectRelease();
  *(void *)(v107 + 16) = *((void *)v108 + 2);
  swift_bridgeObjectRelease();
LABEL_64:
  *(void *)((char *)a1 + v44[13]) = *(void *)((char *)v4 + v44[13]);
  swift_bridgeObjectRelease();
  uint64_t v111 = v44[14];
  uint64_t v112 = (uint64_t)a1 + v111;
  uint64_t v113 = (char *)v4 + v111;
  unsigned int v114 = v95((char *)a1 + v111, 1, v386);
  unsigned int v115 = v95(v113, 1, v386);
  __srca = (char *)a1;
  if (!v114)
  {
    if (v115)
    {
      uint64_t v116 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v95;
      sub_232F7CB8C(v112, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_69;
    }
    *(unsigned char *)uint64_t v112 = *v113;
    *(void *)(v112 + 8) = *((void *)v113 + 1);
    *(_DWORD *)(v112 + 16) = *((_DWORD *)v113 + 4);
    if (*(void *)(v112 + 56) == 1)
    {
      uint64_t v124 = v95;
    }
    else
    {
      uint64_t v125 = *((void *)v113 + 7);
      uint64_t v124 = v95;
      if (v125 != 1)
      {
        *(unsigned char *)(v112 + 24) = v113[24];
        *(_WORD *)(v112 + 25) = *(_WORD *)(v113 + 25);
        *(_DWORD *)(v112 + 28) = *((_DWORD *)v113 + 7);
        *(_OWORD *)(v112 + 32) = *((_OWORD *)v113 + 2);
        *(void *)(v112 + 48) = *((void *)v113 + 6);
        *(void *)(v112 + 56) = v125;
        swift_bridgeObjectRelease();
LABEL_80:
        uint64_t v127 = *(int *)(v386 + 28);
        uint64_t v128 = (void *)(v112 + v127);
        long long v129 = &v113[v127];
        uint64_t v130 = sub_23309B300();
        uint64_t v131 = *(void *)(v130 - 8);
        uint64_t v132 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v131 + 48);
        int v133 = v132(v128, 1, v130);
        int v134 = v132(v129, 1, v130);
        if (v133)
        {
          if (!v134)
          {
            (*(void (**)(void *, char *, uint64_t))(v131 + 32))(v128, v129, v130);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
LABEL_86:
            uint64_t v4 = v383;
            uint64_t v44 = v384;
            uint64_t v116 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v124;
            uint64_t v109 = v386;
            uint64_t v136 = *(int *)(v386 + 32);
            uint64_t v137 = (void *)(v112 + v136);
            uint64_t v138 = &v113[v136];
            uint64_t v140 = *(void *)v138;
            uint64_t v139 = *((void *)v138 + 1);
            *uint64_t v137 = v140;
            v137[1] = v139;
            swift_bridgeObjectRelease();
            goto LABEL_87;
          }
        }
        else
        {
          if (!v134)
          {
            (*(void (**)(void *, char *, uint64_t))(v131 + 40))(v128, v129, v130);
            goto LABEL_86;
          }
          (*(void (**)(void *, uint64_t))(v131 + 8))(v128, v130);
        }
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v128, v129, *(void *)(*(void *)(v135 - 8) + 64));
        goto LABEL_86;
      }
      sub_232F0434C(v112 + 24);
    }
    long long v126 = *(_OWORD *)(v113 + 40);
    *(_OWORD *)(v112 + 24) = *(_OWORD *)(v113 + 24);
    *(_OWORD *)(v112 + 40) = v126;
    *(void *)(v112 + 56) = *((void *)v113 + 7);
    goto LABEL_80;
  }
  if (v115)
  {
    uint64_t v116 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v95;
LABEL_69:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v112, v113, *(void *)(*(void *)(v117 - 8) + 64));
    goto LABEL_87;
  }
  *(unsigned char *)uint64_t v112 = *v113;
  *(void *)(v112 + 8) = *((void *)v113 + 1);
  *(_DWORD *)(v112 + 16) = *((_DWORD *)v113 + 4);
  *(_OWORD *)(v112 + 24) = *(_OWORD *)(v113 + 24);
  *(_OWORD *)(v112 + 40) = *(_OWORD *)(v113 + 40);
  *(void *)(v112 + 56) = *((void *)v113 + 7);
  uint64_t v118 = *(int *)(v386 + 28);
  uint64_t v119 = (void *)(v112 + v118);
  long long v120 = &v113[v118];
  uint64_t v121 = sub_23309B300();
  uint64_t v122 = *(void *)(v121 - 8);
  uint64_t v116 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v95;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v122 + 32))(v119, v120, v121);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
  }
  *(_OWORD *)(v112 + *(int *)(v386 + 32)) = *(_OWORD *)&v113[*(int *)(v386 + 32)];
  uint64_t v4 = v383;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v112, 0, 1, v386);
LABEL_87:
  uint64_t v141 = v44[15];
  uint64_t v142 = (uint64_t)&__srca[v141];
  uint64_t v143 = (char *)v4 + v141;
  uint64_t v144 = type metadata accessor for Period();
  uint64_t v378 = *(void *)(v144 - 8);
  uint64_t v145 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v378 + 48);
  int v146 = v145(v142, 1, v144);
  uint64_t v380 = (uint64_t (*)(char *, uint64_t, uint64_t))v145;
  int v147 = v145((uint64_t)v143, 1, v144);
  if (!v146)
  {
    if (v147)
    {
      sub_232F7CB8C(v142, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_93;
    }
    long long v148 = v116;
    unsigned int v152 = v116(v142, 1, v109);
    unsigned int v153 = v116((uint64_t)v143, 1, v109);
    if (v152)
    {
      if (!v153)
      {
        *(unsigned char *)uint64_t v142 = *v143;
        *(void *)(v142 + 8) = *((void *)v143 + 1);
        *(_DWORD *)(v142 + 16) = *((_DWORD *)v143 + 4);
        *(_OWORD *)(v142 + 24) = *(_OWORD *)(v143 + 24);
        *(_OWORD *)(v142 + 40) = *(_OWORD *)(v143 + 40);
        *(void *)(v142 + 56) = *((void *)v143 + 7);
        uint64_t v154 = *(int *)(v109 + 28);
        uint64_t v155 = (void *)(v142 + v154);
        int v156 = &v143[v154];
        uint64_t v157 = sub_23309B300();
        uint64_t v158 = *(void *)(v157 - 8);
        uint64_t v150 = __srca;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v155, v156, *(void *)(*(void *)(v159 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v158 + 32))(v155, v156, v157);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
        }
        *(_OWORD *)(v142 + *(int *)(v109 + 32)) = *(_OWORD *)&v143[*(int *)(v109 + 32)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v142, 0, 1, v109);
        uint64_t v4 = v383;
        uint64_t v44 = v384;
LABEL_136:
        uint64_t v203 = *(int *)(v144 + 20);
        uint64_t v204 = v142 + v203;
        uint64_t v205 = &v143[v203];
        unsigned int v206 = v148(v204, 1, v109);
        unsigned int v207 = v148((uint64_t)v205, 1, v109);
        if (v206)
        {
          if (!v207)
          {
            *(unsigned char *)uint64_t v204 = *v205;
            *(void *)(v204 + 8) = *((void *)v205 + 1);
            *(_DWORD *)(v204 + 16) = *((_DWORD *)v205 + 4);
            *(_OWORD *)(v204 + 24) = *(_OWORD *)(v205 + 24);
            *(_OWORD *)(v204 + 40) = *(_OWORD *)(v205 + 40);
            *(void *)(v204 + 56) = *((void *)v205 + 7);
            uint64_t v208 = *(int *)(v109 + 28);
            long long v209 = (void *)(v204 + v208);
            uint64_t v210 = &v205[v208];
            uint64_t v211 = sub_23309B300();
            uint64_t v212 = *(void *)(v211 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v210, 1, v211))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v209, v210, *(void *)(*(void *)(v213 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v212 + 32))(v209, v210, v211);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v209, 0, 1, v211);
            }
            uint64_t v44 = v384;
            *(_OWORD *)(v204 + *(int *)(v109 + 32)) = *(_OWORD *)&v205[*(int *)(v109 + 32)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v204, 0, 1, v109);
            uint64_t v4 = v383;
            goto LABEL_157;
          }
LABEL_142:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v204, v205, *(void *)(*(void *)(v214 - 8) + 64));
          goto LABEL_157;
        }
        if (v207)
        {
          sub_232F7CB8C(v204, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_142;
        }
        *(unsigned char *)uint64_t v204 = *v205;
        *(void *)(v204 + 8) = *((void *)v205 + 1);
        *(_DWORD *)(v204 + 16) = *((_DWORD *)v205 + 4);
        long long v374 = v148;
        if (*(void *)(v204 + 56) != 1)
        {
          uint64_t v215 = *((void *)v205 + 7);
          if (v215 != 1)
          {
            *(unsigned char *)(v204 + 24) = v205[24];
            *(_WORD *)(v204 + 25) = *(_WORD *)(v205 + 25);
            *(_DWORD *)(v204 + 28) = *((_DWORD *)v205 + 7);
            *(_OWORD *)(v204 + 32) = *((_OWORD *)v205 + 2);
            *(void *)(v204 + 48) = *((void *)v205 + 6);
            *(void *)(v204 + 56) = v215;
            swift_bridgeObjectRelease();
LABEL_150:
            uint64_t v217 = *(int *)(v386 + 28);
            uint64_t v218 = (void *)(v204 + v217);
            uint64_t v219 = &v205[v217];
            uint64_t v220 = sub_23309B300();
            uint64_t v221 = *(void *)(v220 - 8);
            uint64_t v222 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v221 + 48);
            int v223 = v222(v218, 1, v220);
            int v224 = v222(v219, 1, v220);
            if (v223)
            {
              if (!v224)
              {
                (*(void (**)(void *, char *, uint64_t))(v221 + 32))(v218, v219, v220);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v221 + 56))(v218, 0, 1, v220);
LABEL_156:
                uint64_t v4 = v383;
                long long v148 = v374;
                uint64_t v109 = v386;
                uint64_t v226 = *(int *)(v386 + 32);
                long long v227 = (void *)(v204 + v226);
                long long v228 = (uint64_t *)&v205[v226];
                uint64_t v230 = *v228;
                uint64_t v229 = v228[1];
                *long long v227 = v230;
                v227[1] = v229;
                swift_bridgeObjectRelease();
                uint64_t v44 = v384;
                goto LABEL_157;
              }
            }
            else
            {
              if (!v224)
              {
                (*(void (**)(void *, char *, uint64_t))(v221 + 40))(v218, v219, v220);
                goto LABEL_156;
              }
              (*(void (**)(void *, uint64_t))(v221 + 8))(v218, v220);
            }
            sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v218, v219, *(void *)(*(void *)(v225 - 8) + 64));
            goto LABEL_156;
          }
          sub_232F0434C(v204 + 24);
        }
        long long v216 = *(_OWORD *)(v205 + 40);
        *(_OWORD *)(v204 + 24) = *(_OWORD *)(v205 + 24);
        *(_OWORD *)(v204 + 40) = v216;
        *(void *)(v204 + 56) = *((void *)v205 + 7);
        goto LABEL_150;
      }
LABEL_102:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v142, v143, *(void *)(*(void *)(v166 - 8) + 64));
      uint64_t v150 = __srca;
      goto LABEL_136;
    }
    if (v153)
    {
      sub_232F7CB8C(v142, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_102;
    }
    *(unsigned char *)uint64_t v142 = *v143;
    *(void *)(v142 + 8) = *((void *)v143 + 1);
    *(_DWORD *)(v142 + 16) = *((_DWORD *)v143 + 4);
    long long v373 = v116;
    if (*(void *)(v142 + 56) != 1)
    {
      uint64_t v176 = *((void *)v143 + 7);
      if (v176 != 1)
      {
        *(unsigned char *)(v142 + 24) = v143[24];
        *(_WORD *)(v142 + 25) = *(_WORD *)(v143 + 25);
        *(_DWORD *)(v142 + 28) = *((_DWORD *)v143 + 7);
        *(_OWORD *)(v142 + 32) = *((_OWORD *)v143 + 2);
        *(void *)(v142 + 48) = *((void *)v143 + 6);
        *(void *)(v142 + 56) = v176;
        swift_bridgeObjectRelease();
LABEL_129:
        uint64_t v150 = __srca;
        uint64_t v189 = *(int *)(v386 + 28);
        uint64_t v190 = (void *)(v142 + v189);
        uint64_t v191 = &v143[v189];
        uint64_t v192 = sub_23309B300();
        uint64_t v193 = *(void *)(v192 - 8);
        uint64_t v194 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v193 + 48);
        int v195 = v194(v190, 1, v192);
        int v196 = v194(v191, 1, v192);
        if (v195)
        {
          uint64_t v4 = v383;
          if (!v196)
          {
            (*(void (**)(void *, char *, uint64_t))(v193 + 32))(v190, v191, v192);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
LABEL_135:
            uint64_t v44 = v384;
            uint64_t v109 = v386;
            uint64_t v198 = *(int *)(v386 + 32);
            uint64_t v199 = (void *)(v142 + v198);
            uint64_t v200 = &v143[v198];
            uint64_t v202 = *(void *)v200;
            uint64_t v201 = *((void *)v200 + 1);
            *uint64_t v199 = v202;
            v199[1] = v201;
            swift_bridgeObjectRelease();
            long long v148 = v373;
            goto LABEL_136;
          }
        }
        else
        {
          uint64_t v4 = v383;
          if (!v196)
          {
            (*(void (**)(void *, char *, uint64_t))(v193 + 40))(v190, v191, v192);
            goto LABEL_135;
          }
          (*(void (**)(void *, uint64_t))(v193 + 8))(v190, v192);
        }
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v190, v191, *(void *)(*(void *)(v197 - 8) + 64));
        goto LABEL_135;
      }
      sub_232F0434C(v142 + 24);
    }
    long long v177 = *(_OWORD *)(v143 + 40);
    *(_OWORD *)(v142 + 24) = *(_OWORD *)(v143 + 24);
    *(_OWORD *)(v142 + 40) = v177;
    *(void *)(v142 + 56) = *((void *)v143 + 7);
    goto LABEL_129;
  }
  if (v147)
  {
LABEL_93:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v142, v143, *(void *)(*(void *)(v151 - 8) + 64));
    long long v148 = v116;
    uint64_t v150 = __srca;
    goto LABEL_157;
  }
  long long v148 = v116;
  if (v116((uint64_t)v143, 1, v109))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v142, v143, *(void *)(*(void *)(v149 - 8) + 64));
    uint64_t v150 = __srca;
  }
  else
  {
    *(unsigned char *)uint64_t v142 = *v143;
    *(void *)(v142 + 8) = *((void *)v143 + 1);
    *(_DWORD *)(v142 + 16) = *((_DWORD *)v143 + 4);
    *(_OWORD *)(v142 + 24) = *(_OWORD *)(v143 + 24);
    *(_OWORD *)(v142 + 40) = *(_OWORD *)(v143 + 40);
    *(void *)(v142 + 56) = *((void *)v143 + 7);
    uint64_t v160 = *(int *)(v109 + 28);
    uint64_t v161 = (void *)(v142 + v160);
    uint64_t v162 = &v143[v160];
    uint64_t v163 = sub_23309B300();
    uint64_t v164 = *(void *)(v163 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v161, v162, *(void *)(*(void *)(v165 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v164 + 32))(v161, v162, v163);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
    }
    uint64_t v150 = __srca;
    *(_OWORD *)(v142 + *(int *)(v109 + 32)) = *(_OWORD *)&v143[*(int *)(v109 + 32)];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v142, 0, 1, v109);
    uint64_t v4 = v383;
    uint64_t v44 = v384;
  }
  uint64_t v167 = *(int *)(v144 + 20);
  int v168 = (char *)(v142 + v167);
  uint64_t v169 = &v143[v167];
  if (v148((uint64_t)v169, 1, v109))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
  }
  else
  {
    char *v168 = *v169;
    *((void *)v168 + 1) = *((void *)v169 + 1);
    *((_DWORD *)v168 + 4) = *((_DWORD *)v169 + 4);
    *(_OWORD *)(v168 + 24) = *(_OWORD *)(v169 + 24);
    *(_OWORD *)(v168 + 40) = *(_OWORD *)(v169 + 40);
    *((void *)v168 + 7) = *((void *)v169 + 7);
    uint64_t v171 = *(int *)(v109 + 28);
    __dst = &v168[v171];
    uint64_t v172 = &v169[v171];
    uint64_t v173 = sub_23309B300();
    uint64_t v174 = *(void *)(v173 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v172, *(void *)(*(void *)(v175 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v174 + 32))(__dst, v172, v173);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(__dst, 0, 1, v173);
    }
    *(_OWORD *)&v168[*(int *)(v109 + 32)] = *(_OWORD *)&v169[*(int *)(v109 + 32)];
    uint64_t v4 = v383;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v382 + 56))(v168, 0, 1, v109);
    uint64_t v44 = v384;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v378 + 56))(v142, 0, 1, v144);
LABEL_157:
  uint64_t v231 = v44[16];
  uint64_t v232 = &v150[v231];
  uint64_t v233 = (void *)((char *)v4 + v231);
  uint64_t v235 = *v233;
  uint64_t v234 = v233[1];
  *(void *)uint64_t v232 = v235;
  *((void *)v232 + 1) = v234;
  swift_bridgeObjectRelease();
  uint64_t v236 = v44[17];
  uint64_t v237 = (uint64_t)&v150[v236];
  uint64_t v238 = (char *)v4 + v236;
  unsigned int v239 = v148((uint64_t)&v150[v236], 1, v109);
  unsigned int v240 = v148((uint64_t)v238, 1, v109);
  if (!v239)
  {
    if (v240)
    {
      uint64_t v241 = v109;
      uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
      sub_232F7CB8C(v237, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_162;
    }
    *(unsigned char *)uint64_t v237 = *v238;
    *(void *)(v237 + 8) = *((void *)v238 + 1);
    *(_DWORD *)(v237 + 16) = *((_DWORD *)v238 + 4);
    uint64_t v377 = v144;
    if (*(void *)(v237 + 56) == 1)
    {
      uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
    }
    else
    {
      uint64_t v250 = *((void *)v238 + 7);
      uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
      if (v250 != 1)
      {
        *(unsigned char *)(v237 + 24) = v238[24];
        *(_WORD *)(v237 + 25) = *(_WORD *)(v238 + 25);
        *(_DWORD *)(v237 + 28) = *((_DWORD *)v238 + 7);
        *(_OWORD *)(v237 + 32) = *((_OWORD *)v238 + 2);
        *(void *)(v237 + 48) = *((void *)v238 + 6);
        *(void *)(v237 + 56) = v250;
        swift_bridgeObjectRelease();
LABEL_173:
        uint64_t v252 = *(int *)(v386 + 28);
        int v253 = (void *)(v237 + v252);
        int v254 = &v238[v252];
        uint64_t v255 = sub_23309B300();
        uint64_t v256 = *(void *)(v255 - 8);
        long long v257 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v256 + 48);
        int v258 = v257(v253, 1, v255);
        int v259 = v257(v254, 1, v255);
        if (v258)
        {
          if (!v259)
          {
            (*(void (**)(void *, char *, uint64_t))(v256 + 32))(v253, v254, v255);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v256 + 56))(v253, 0, 1, v255);
LABEL_179:
            uint64_t v4 = v383;
            uint64_t v44 = v384;
            uint64_t v144 = v377;
            uint64_t v241 = v386;
            uint64_t v261 = *(int *)(v386 + 32);
            uint64_t v262 = (void *)(v237 + v261);
            uint64_t v263 = &v238[v261];
            uint64_t v265 = *(void *)v263;
            uint64_t v264 = *((void *)v263 + 1);
            void *v262 = v265;
            v262[1] = v264;
            swift_bridgeObjectRelease();
            goto LABEL_180;
          }
        }
        else
        {
          if (!v259)
          {
            (*(void (**)(void *, char *, uint64_t))(v256 + 40))(v253, v254, v255);
            goto LABEL_179;
          }
          (*(void (**)(void *, uint64_t))(v256 + 8))(v253, v255);
        }
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v253, v254, *(void *)(*(void *)(v260 - 8) + 64));
        goto LABEL_179;
      }
      sub_232F0434C(v237 + 24);
    }
    long long v251 = *(_OWORD *)(v238 + 40);
    *(_OWORD *)(v237 + 24) = *(_OWORD *)(v238 + 24);
    *(_OWORD *)(v237 + 40) = v251;
    *(void *)(v237 + 56) = *((void *)v238 + 7);
    goto LABEL_173;
  }
  if (v240)
  {
    uint64_t v241 = v109;
    uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
LABEL_162:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v237, v238, *(void *)(*(void *)(v243 - 8) + 64));
    goto LABEL_180;
  }
  *(unsigned char *)uint64_t v237 = *v238;
  *(void *)(v237 + 8) = *((void *)v238 + 1);
  *(_DWORD *)(v237 + 16) = *((_DWORD *)v238 + 4);
  *(_OWORD *)(v237 + 24) = *(_OWORD *)(v238 + 24);
  *(_OWORD *)(v237 + 40) = *(_OWORD *)(v238 + 40);
  *(void *)(v237 + 56) = *((void *)v238 + 7);
  uint64_t v244 = *(int *)(v109 + 28);
  uint64_t v245 = (void *)(v237 + v244);
  uint64_t v246 = &v238[v244];
  uint64_t v247 = sub_23309B300();
  uint64_t v248 = *(void *)(v247 - 8);
  uint64_t v241 = v109;
  uint64_t v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v248 + 32))(v245, v246, v247);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v248 + 56))(v245, 0, 1, v247);
  }
  uint64_t v4 = v383;
  uint64_t v44 = v384;
  *(_OWORD *)(v237 + *(int *)(v241 + 32)) = *(_OWORD *)&v238[*(int *)(v241 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v237, 0, 1, v241);
LABEL_180:
  uint64_t v266 = v44[18];
  uint64_t v267 = (uint64_t)&__srca[v266];
  long long v268 = (char *)v4 + v266;
  int v269 = v380(&__srca[v266], 1, v144);
  uint64_t v270 = v144;
  int v271 = v269;
  uint64_t v272 = v270;
  int v273 = ((uint64_t (*)(char *, uint64_t))v380)(v268, 1);
  if (!v271)
  {
    if (v273)
    {
      sub_232F7CB8C(v267, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_186;
    }
    uint64_t v279 = v242;
    uint64_t v280 = v241;
    int v281 = v279(v267, 1, v241);
    int v282 = v279((uint64_t)v268, 1, v241);
    if (v281)
    {
      if (!v282)
      {
        *(unsigned char *)uint64_t v267 = *v268;
        *(void *)(v267 + 8) = *((void *)v268 + 1);
        *(_DWORD *)(v267 + 16) = *((_DWORD *)v268 + 4);
        *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
        *(_OWORD *)(v267 + 40) = *(_OWORD *)(v268 + 40);
        *(void *)(v267 + 56) = *((void *)v268 + 7);
        uint64_t v283 = *(int *)(v241 + 28);
        uint64_t v284 = (void *)(v267 + v283);
        uint64_t v285 = &v268[v283];
        uint64_t v286 = sub_23309B300();
        uint64_t v287 = *(void *)(v286 - 8);
        uint64_t v278 = __srca;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v287 + 48))(v285, 1, v286))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v284, v285, *(void *)(*(void *)(v288 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v287 + 32))(v284, v285, v286);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v287 + 56))(v284, 0, 1, v286);
        }
        *(_OWORD *)(v267 + *(int *)(v280 + 32)) = *(_OWORD *)&v268[*(int *)(v280 + 32)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v267, 0, 1, v280);
        uint64_t v4 = v383;
        uint64_t v44 = v384;
LABEL_220:
        uint64_t v322 = *(int *)(v272 + 20);
        uint64_t v323 = v267 + v322;
        uint64_t v324 = &v268[v322];
        int v325 = v279(v323, 1, v280);
        int v326 = v279((uint64_t)v324, 1, v280);
        if (v325)
        {
          if (!v326)
          {
            *(unsigned char *)uint64_t v323 = *v324;
            *(void *)(v323 + 8) = *((void *)v324 + 1);
            *(_DWORD *)(v323 + 16) = *((_DWORD *)v324 + 4);
            *(_OWORD *)(v323 + 24) = *(_OWORD *)(v324 + 24);
            *(_OWORD *)(v323 + 40) = *(_OWORD *)(v324 + 40);
            *(void *)(v323 + 56) = *((void *)v324 + 7);
            uint64_t v327 = *(int *)(v280 + 28);
            uint64_t v328 = (void *)(v323 + v327);
            uint64_t v329 = &v324[v327];
            uint64_t v330 = sub_23309B300();
            uint64_t v331 = *(void *)(v330 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v331 + 48))(v329, 1, v330))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v328, v329, *(void *)(*(void *)(v332 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v331 + 32))(v328, v329, v330);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v331 + 56))(v328, 0, 1, v330);
            }
            uint64_t v4 = v383;
            *(_OWORD *)(v323 + *(int *)(v280 + 32)) = *(_OWORD *)&v324[*(int *)(v280 + 32)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v323, 0, 1, v280);
            goto LABEL_249;
          }
LABEL_226:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v323, v324, *(void *)(*(void *)(v333 - 8) + 64));
          goto LABEL_249;
        }
        if (v326)
        {
          sub_232F7CB8C(v323, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_226;
        }
        *(unsigned char *)uint64_t v323 = *v324;
        *(void *)(v323 + 8) = *((void *)v324 + 1);
        *(_DWORD *)(v323 + 16) = *((_DWORD *)v324 + 4);
        if (*(void *)(v323 + 56) != 1)
        {
          uint64_t v334 = *((void *)v324 + 7);
          if (v334 != 1)
          {
            *(unsigned char *)(v323 + 24) = v324[24];
            *(_WORD *)(v323 + 25) = *(_WORD *)(v324 + 25);
            *(_DWORD *)(v323 + 28) = *((_DWORD *)v324 + 7);
            *(_OWORD *)(v323 + 32) = *((_OWORD *)v324 + 2);
            *(void *)(v323 + 48) = *((void *)v324 + 6);
            *(void *)(v323 + 56) = v334;
            swift_bridgeObjectRelease();
LABEL_234:
            uint64_t v336 = *(int *)(v280 + 28);
            uint64_t v337 = (void *)(v323 + v336);
            uint64_t v338 = &v324[v336];
            uint64_t v339 = sub_23309B300();
            uint64_t v340 = *(void *)(v339 - 8);
            long long v341 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v340 + 48);
            uint64_t v388 = v337;
            LODWORD(v337) = v341(v337, 1, v339);
            int v342 = v341(v338, 1, v339);
            if (v337)
            {
              if (!v342)
              {
                (*(void (**)(void *, char *, uint64_t))(v340 + 32))(v388, v338, v339);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v340 + 56))(v388, 0, 1, v339);
                goto LABEL_248;
              }
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v344 = *(void *)(*(void *)(v343 - 8) + 64);
              long long v345 = v388;
            }
            else
            {
              if (!v342)
              {
                (*(void (**)(void *, char *, uint64_t))(v340 + 40))(v388, v338, v339);
                goto LABEL_248;
              }
              (*(void (**)(void *, uint64_t))(v340 + 8))(v388, v339);
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v344 = *(void *)(*(void *)(v346 - 8) + 64);
              long long v345 = v388;
            }
            memcpy(v345, v338, v344);
LABEL_248:
            uint64_t v4 = v383;
            uint64_t v44 = v384;
            uint64_t v352 = *(int *)(v280 + 32);
            uint64_t v353 = (void *)(v323 + v352);
            uint64_t v354 = (uint64_t *)&v324[v352];
            uint64_t v356 = *v354;
            uint64_t v355 = v354[1];
            *uint64_t v353 = v356;
            v353[1] = v355;
            swift_bridgeObjectRelease();
            goto LABEL_249;
          }
          sub_232F0434C(v323 + 24);
        }
        long long v335 = *(_OWORD *)(v324 + 40);
        *(_OWORD *)(v323 + 24) = *(_OWORD *)(v324 + 24);
        *(_OWORD *)(v323 + 40) = v335;
        *(void *)(v323 + 56) = *((void *)v324 + 7);
        goto LABEL_234;
      }
LABEL_195:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v267, v268, *(void *)(*(void *)(v295 - 8) + 64));
      uint64_t v278 = __srca;
      goto LABEL_220;
    }
    if (v282)
    {
      sub_232F7CB8C(v267, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_195;
    }
    *(unsigned char *)uint64_t v267 = *v268;
    *(void *)(v267 + 8) = *((void *)v268 + 1);
    *(_DWORD *)(v267 + 16) = *((_DWORD *)v268 + 4);
    uint64_t v375 = v279;
    if (*(void *)(v267 + 56) != 1)
    {
      uint64_t v306 = *((void *)v268 + 7);
      if (v306 != 1)
      {
        *(unsigned char *)(v267 + 24) = v268[24];
        *(_WORD *)(v267 + 25) = *(_WORD *)(v268 + 25);
        *(_DWORD *)(v267 + 28) = *((_DWORD *)v268 + 7);
        *(_OWORD *)(v267 + 32) = *((_OWORD *)v268 + 2);
        *(void *)(v267 + 48) = *((void *)v268 + 6);
        *(void *)(v267 + 56) = v306;
        swift_bridgeObjectRelease();
LABEL_213:
        uint64_t v308 = *(int *)(v386 + 28);
        uint64_t v309 = (void *)(v267 + v308);
        uint64_t v310 = &v268[v308];
        uint64_t v311 = sub_23309B300();
        uint64_t v312 = *(void *)(v311 - 8);
        uint64_t v313 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v312 + 48);
        int v314 = v313(v309, 1, v311);
        long long v381 = v310;
        int v315 = v313(v310, 1, v311);
        if (v314)
        {
          uint64_t v4 = v383;
          uint64_t v278 = __srca;
          if (!v315)
          {
            (*(void (**)(void *, char *, uint64_t))(v312 + 32))(v309, v381, v311);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v312 + 56))(v309, 0, 1, v311);
LABEL_219:
            uint64_t v279 = v375;
            uint64_t v280 = v386;
            uint64_t v317 = *(int *)(v386 + 32);
            uint64_t v318 = (void *)(v267 + v317);
            long long v319 = &v268[v317];
            uint64_t v321 = *(void *)v319;
            uint64_t v320 = *((void *)v319 + 1);
            *uint64_t v318 = v321;
            v318[1] = v320;
            swift_bridgeObjectRelease();
            uint64_t v44 = v384;
            goto LABEL_220;
          }
        }
        else
        {
          uint64_t v4 = v383;
          uint64_t v278 = __srca;
          if (!v315)
          {
            (*(void (**)(void *, char *, uint64_t))(v312 + 40))(v309, v381, v311);
            goto LABEL_219;
          }
          (*(void (**)(void *, uint64_t))(v312 + 8))(v309, v311);
        }
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v309, v381, *(void *)(*(void *)(v316 - 8) + 64));
        goto LABEL_219;
      }
      sub_232F0434C(v267 + 24);
    }
    long long v307 = *(_OWORD *)(v268 + 40);
    *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
    *(_OWORD *)(v267 + 40) = v307;
    *(void *)(v267 + 56) = *((void *)v268 + 7);
    goto LABEL_213;
  }
  if (v273)
  {
LABEL_186:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v267, v268, *(void *)(*(void *)(v277 - 8) + 64));
    uint64_t v278 = __srca;
    goto LABEL_249;
  }
  uint64_t v274 = v241;
  if (v242((uint64_t)v268, 1, v241))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v267, v268, *(void *)(*(void *)(v275 - 8) + 64));
    uint64_t v276 = v272;
  }
  else
  {
    *(unsigned char *)uint64_t v267 = *v268;
    *(void *)(v267 + 8) = *((void *)v268 + 1);
    *(_DWORD *)(v267 + 16) = *((_DWORD *)v268 + 4);
    *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
    *(_OWORD *)(v267 + 40) = *(_OWORD *)(v268 + 40);
    *(void *)(v267 + 56) = *((void *)v268 + 7);
    uint64_t v289 = *(int *)(v241 + 28);
    uint64_t v290 = (void *)(v267 + v289);
    uint64_t v291 = &v268[v289];
    uint64_t v292 = sub_23309B300();
    uint64_t v293 = *(void *)(v292 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v293 + 48))(v291, 1, v292))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v290, v291, *(void *)(*(void *)(v294 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v293 + 32))(v290, v291, v292);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v293 + 56))(v290, 0, 1, v292);
    }
    uint64_t v276 = v272;
    uint64_t v274 = v241;
    *(_OWORD *)(v267 + *(int *)(v241 + 32)) = *(_OWORD *)&v268[*(int *)(v241 + 32)];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v382 + 56))(v267, 0, 1, v241);
    uint64_t v4 = v383;
    uint64_t v44 = v384;
  }
  uint64_t v296 = *(int *)(v276 + 20);
  int v297 = (char *)(v267 + v296);
  uint64_t v298 = &v268[v296];
  uint64_t v278 = __srca;
  if (v242((uint64_t)v298, 1, v274))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v297, v298, *(void *)(*(void *)(v299 - 8) + 64));
  }
  else
  {
    *int v297 = *v298;
    *((void *)v297 + 1) = *((void *)v298 + 1);
    *((_DWORD *)v297 + 4) = *((_DWORD *)v298 + 4);
    *(_OWORD *)(v297 + 24) = *(_OWORD *)(v298 + 24);
    *(_OWORD *)(v297 + 40) = *(_OWORD *)(v298 + 40);
    *((void *)v297 + 7) = *((void *)v298 + 7);
    uint64_t v300 = *(int *)(v274 + 28);
    uint64_t v301 = &v297[v300];
    uint64_t v302 = &v298[v300];
    uint64_t v303 = sub_23309B300();
    uint64_t v304 = *(void *)(v303 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v304 + 48))(v302, 1, v303))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v301, v302, *(void *)(*(void *)(v305 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v304 + 32))(v301, v302, v303);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v301, 0, 1, v303);
    }
    uint64_t v4 = v383;
    *(_OWORD *)&v297[*(int *)(v274 + 32)] = *(_OWORD *)&v298[*(int *)(v274 + 32)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v382 + 56))(v297, 0, 1, v274);
    uint64_t v44 = v384;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v378 + 56))(v267, 0, 1, v276);
LABEL_249:
  uint64_t v357 = v44[19];
  uint64_t v358 = &v278[v357];
  uint64_t v359 = (void *)((char *)v4 + v357);
  uint64_t v361 = *v359;
  uint64_t v360 = v359[1];
  *(void *)uint64_t v358 = v361;
  *((void *)v358 + 1) = v360;
  swift_bridgeObjectRelease();
  uint64_t v362 = v44[20];
  uint64_t v363 = &v278[v362];
  long long v364 = (void *)((char *)v4 + v362);
  uint64_t v366 = *v364;
  uint64_t v365 = v364[1];
  *(void *)uint64_t v363 = v366;
  *((void *)v363 + 1) = v365;
  swift_bridgeObjectRelease();
  uint64_t v367 = v44[21];
  long long v368 = &v278[v367];
  uint64_t v369 = (void *)((char *)v4 + v367);
  uint64_t v371 = *v369;
  uint64_t v370 = v369[1];
  *(void *)long long v368 = v371;
  *((void *)v368 + 1) = v370;
  swift_bridgeObjectRelease();
  return v278;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Condition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FBCDAC);
}

uint64_t sub_232FBCDAC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[15];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Condition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FBCFC8);
}

uint64_t sub_232FBCFC8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[15];
  return v15(v17, a2, a2, v16);
}

void sub_232FBD1D0()
{
  sub_232F7CA40(319, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232F7CA40(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_232F7CA40(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsDSTU2.DiagnosticReport(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v17 = (void *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    uint64_t v10 = a3[9];
    __dst = (char *)a1 + v10;
    uint64_t v11 = (char *)a2 + v10;
    a1[10] = a2[10];
    uint64_t v12 = type metadata accessor for FHIRDateTime();
    uint64_t v97 = *(void *)(v12 - 8);
    uint64_t v13 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v100 = v13;
    if (v13(v11, 1, v12))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v16 = a3;
      int v15 = a2;
      uint64_t v17 = a1;
    }
    else
    {
      unsigned char *__dst = *v11;
      *((void *)__dst + 1) = *((void *)v11 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v11 + 4);
      uint64_t v19 = *((void *)v11 + 7);
      if (v19 == 1)
      {
        long long v20 = *(_OWORD *)(v11 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(__dst + 40) = v20;
        *((void *)__dst + 7) = *((void *)v11 + 7);
      }
      else
      {
        __dst[24] = v11[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v11 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v11 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v11 + 11);
        *((void *)__dst + 6) = *((void *)v11 + 6);
        *((void *)__dst + 7) = v19;
        swift_bridgeObjectRetain();
      }
      uint64_t v16 = a3;
      uint64_t v17 = a1;
      uint64_t v21 = v12;
      uint64_t v22 = *(int *)(v12 + 28);
      uint64_t v23 = &__dst[v22];
      uint64_t v24 = &v11[v22];
      uint64_t v25 = sub_23309B300();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      uint64_t v12 = v21;
      uint64_t v28 = *(int *)(v21 + 32);
      uint64_t v29 = &__dst[v28];
      uint64_t v30 = &v11[v28];
      uint64_t v31 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v31;
      uint64_t v32 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56);
      swift_bridgeObjectRetain();
      v32(__dst, 0, 1, v21);
      int v15 = a2;
    }
    uint64_t v33 = v16[10];
    uint64_t v34 = (char *)v17 + v33;
    uint64_t v35 = (char *)v15 + v33;
    uint64_t v36 = type metadata accessor for Period();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      if (v100(v35, 1, v12))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        *uint64_t v34 = *v35;
        *((void *)v34 + 1) = *((void *)v35 + 1);
        *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
        uint64_t v40 = *((void *)v35 + 7);
        if (v40 == 1)
        {
          long long v41 = *(_OWORD *)(v35 + 40);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
          *(_OWORD *)(v34 + 40) = v41;
          *((void *)v34 + 7) = *((void *)v35 + 7);
        }
        else
        {
          v34[24] = v35[24];
          *(_WORD *)(v34 + 25) = *(_WORD *)(v35 + 25);
          *(_OWORD *)(v34 + 28) = *(_OWORD *)(v35 + 28);
          *((_DWORD *)v34 + 11) = *((_DWORD *)v35 + 11);
          *((void *)v34 + 6) = *((void *)v35 + 6);
          *((void *)v34 + 7) = v40;
          swift_bridgeObjectRetain();
        }
        uint64_t v42 = v12;
        uint64_t v43 = *(int *)(v12 + 28);
        uint64_t v44 = &v34[v43];
        uint64_t v45 = &v35[v43];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        uint64_t v16 = a3;
        uint64_t v12 = v42;
        uint64_t v49 = *(int *)(v42 + 32);
        uint64_t v50 = &v34[v49];
        uint64_t v51 = &v35[v49];
        uint64_t v52 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v52;
        uint64_t v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56);
        swift_bridgeObjectRetain();
        v53(v34, 0, 1, v42);
        int v15 = a2;
      }
      uint64_t v54 = *(int *)(v36 + 20);
      uint64_t v55 = &v34[v54];
      uint64_t v56 = &v35[v54];
      if (v100(v56, 1, v12))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        *uint64_t v55 = *v56;
        *((void *)v55 + 1) = *((void *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        uint64_t v58 = *((void *)v56 + 7);
        if (v58 == 1)
        {
          long long v59 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v59;
          *((void *)v55 + 7) = *((void *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((void *)v55 + 6) = *((void *)v56 + 6);
          *((void *)v55 + 7) = v58;
          swift_bridgeObjectRetain();
        }
        uint64_t v96 = v12;
        uint64_t v60 = *(int *)(v12 + 28);
        uint64_t v61 = &v55[v60];
        int v62 = &v56[v60];
        uint64_t v63 = sub_23309B300();
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 + 16))(v61, v62, v63);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
        }
        uint64_t v16 = a3;
        uint64_t v12 = v96;
        uint64_t v66 = *(int *)(v96 + 32);
        uint64_t v67 = &v55[v66];
        long long v68 = &v56[v66];
        uint64_t v69 = v68[1];
        *uint64_t v67 = *v68;
        v67[1] = v69;
        uint64_t v70 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56);
        swift_bridgeObjectRetain();
        v70(v55, 0, 1, v96);
        int v15 = a2;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    uint64_t v71 = v16[11];
    uint64_t v72 = (char *)v17 + v71;
    uint64_t v73 = (char *)v15 + v71;
    if (v100((unsigned char *)v15 + v71, 1, v12))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      *uint64_t v72 = *v73;
      *((void *)v72 + 1) = *((void *)v73 + 1);
      *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
      uint64_t v75 = *((void *)v73 + 7);
      if (v75 == 1)
      {
        long long v76 = *(_OWORD *)(v73 + 40);
        *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
        *(_OWORD *)(v72 + 40) = v76;
        *((void *)v72 + 7) = *((void *)v73 + 7);
      }
      else
      {
        v72[24] = v73[24];
        *(_WORD *)(v72 + 25) = *(_WORD *)(v73 + 25);
        *(_OWORD *)(v72 + 28) = *(_OWORD *)(v73 + 28);
        *((_DWORD *)v72 + 11) = *((_DWORD *)v73 + 11);
        *((void *)v72 + 6) = *((void *)v73 + 6);
        *((void *)v72 + 7) = v75;
        swift_bridgeObjectRetain();
      }
      uint64_t v77 = v12;
      uint64_t v78 = *(int *)(v12 + 28);
      uint64_t v79 = &v72[v78];
      uint64_t v80 = &v73[v78];
      uint64_t v81 = sub_23309B300();
      uint64_t v82 = *(void *)(v81 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v82 + 16))(v79, v80, v81);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      }
      uint64_t v84 = *(int *)(v77 + 32);
      uint64_t v85 = &v72[v84];
      uint64_t v86 = &v73[v84];
      uint64_t v87 = v86[1];
      void *v85 = *v86;
      v85[1] = v87;
      uint64_t v88 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56);
      swift_bridgeObjectRetain();
      v88(v72, 0, 1, v77);
    }
    uint64_t v89 = v16[12];
    uint64_t v90 = (void *)((char *)v17 + v89);
    uint64_t v91 = (void *)((char *)v15 + v89);
    uint64_t v92 = v91[1];
    *uint64_t v90 = *v91;
    v90[1] = v92;
    swift_bridgeObjectRetain();
  }
  return v17;
}

uint64_t destroy for ModelsDSTU2.DiagnosticReport(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[10];
  uint64_t v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(void *)(v10 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = v10 + *(int *)(v5 + 28);
      uint64_t v13 = sub_23309B300();
      uint64_t v14 = *(void *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(void *)(v15 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = v15 + *(int *)(v5 + 28);
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v19 = a1 + a2[11];
  if (!v6(v19, 1, v5))
  {
    if (*(void *)(v19 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = v19 + *(int *)(v5 + 28);
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsDSTU2.DiagnosticReport(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a3[9];
  __dst = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  a1[10] = a2[10];
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v95 = v11;
  if (v11(v9, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(__dst, v9, *(void *)(*(void *)(v12 - 8) + 64));
    uint64_t v14 = a3;
    uint64_t v13 = a2;
    uint64_t v15 = a1;
  }
  else
  {
    unsigned char *__dst = *v9;
    *((void *)__dst + 1) = *((void *)v9 + 1);
    *((_DWORD *)__dst + 4) = *((_DWORD *)v9 + 4);
    uint64_t v16 = *((void *)v9 + 7);
    if (v16 == 1)
    {
      long long v17 = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(__dst + 24) = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(__dst + 40) = v17;
      *((void *)__dst + 7) = *((void *)v9 + 7);
    }
    else
    {
      __dst[24] = v9[24];
      *(_WORD *)(__dst + 25) = *(_WORD *)(v9 + 25);
      *(_OWORD *)(__dst + 28) = *(_OWORD *)(v9 + 28);
      *((_DWORD *)__dst + 11) = *((_DWORD *)v9 + 11);
      *((void *)__dst + 6) = *((void *)v9 + 6);
      *((void *)__dst + 7) = v16;
      swift_bridgeObjectRetain();
    }
    uint64_t v13 = a2;
    uint64_t v18 = *(int *)(v10 + 28);
    uint64_t v19 = &__dst[v18];
    uint64_t v20 = &v9[v18];
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v15 = a1;
    uint64_t v24 = *(int *)(v10 + 32);
    uint64_t v25 = &__dst[v24];
    uint64_t v26 = &v9[v24];
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56);
    swift_bridgeObjectRetain();
    v28(__dst, 0, 1, v10);
    uint64_t v14 = a3;
  }
  uint64_t v29 = v14[10];
  uint64_t v30 = (char *)v15 + v29;
  uint64_t v31 = (char *)v13 + v29;
  uint64_t v32 = type metadata accessor for Period();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    if (v95(v31, 1, v10))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      *uint64_t v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
      uint64_t v36 = *((void *)v31 + 7);
      if (v36 == 1)
      {
        long long v37 = *(_OWORD *)(v31 + 40);
        *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
        *(_OWORD *)(v30 + 40) = v37;
        *((void *)v30 + 7) = *((void *)v31 + 7);
      }
      else
      {
        v30[24] = v31[24];
        *(_WORD *)(v30 + 25) = *(_WORD *)(v31 + 25);
        *(_OWORD *)(v30 + 28) = *(_OWORD *)(v31 + 28);
        *((_DWORD *)v30 + 11) = *((_DWORD *)v31 + 11);
        *((void *)v30 + 6) = *((void *)v31 + 6);
        *((void *)v30 + 7) = v36;
        swift_bridgeObjectRetain();
      }
      uint64_t v38 = v10;
      uint64_t v39 = *(int *)(v10 + 28);
      uint64_t v40 = &v30[v39];
      long long v41 = &v31[v39];
      uint64_t v42 = sub_23309B300();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v10 = v38;
      uint64_t v45 = *(int *)(v38 + 32);
      uint64_t v46 = &v30[v45];
      uint64_t v47 = &v31[v45];
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56);
      swift_bridgeObjectRetain();
      v49(v30, 0, 1, v38);
      uint64_t v14 = a3;
      uint64_t v13 = a2;
      uint64_t v15 = a1;
    }
    uint64_t v50 = *(int *)(v32 + 20);
    uint64_t v51 = &v30[v50];
    uint64_t v52 = &v31[v50];
    if (v95(v52, 1, v10))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      *uint64_t v51 = *v52;
      *((void *)v51 + 1) = *((void *)v52 + 1);
      *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
      uint64_t v54 = *((void *)v52 + 7);
      if (v54 == 1)
      {
        long long v55 = *(_OWORD *)(v52 + 40);
        *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
        *(_OWORD *)(v51 + 40) = v55;
        *((void *)v51 + 7) = *((void *)v52 + 7);
      }
      else
      {
        v51[24] = v52[24];
        *(_WORD *)(v51 + 25) = *(_WORD *)(v52 + 25);
        *(_OWORD *)(v51 + 28) = *(_OWORD *)(v52 + 28);
        *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
        *((void *)v51 + 6) = *((void *)v52 + 6);
        *((void *)v51 + 7) = v54;
        swift_bridgeObjectRetain();
      }
      __dsta = (int *)v10;
      uint64_t v56 = *(int *)(v10 + 28);
      uint64_t v57 = &v51[v56];
      uint64_t v58 = &v52[v56];
      uint64_t v59 = sub_23309B300();
      uint64_t v60 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v60 + 16))(v57, v58, v59);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      }
      uint64_t v15 = a1;
      uint64_t v10 = (uint64_t)__dsta;
      uint64_t v62 = __dsta[8];
      uint64_t v63 = &v51[v62];
      uint64_t v64 = &v52[v62];
      uint64_t v65 = v64[1];
      void *v63 = *v64;
      v63[1] = v65;
      uint64_t v66 = *(void (**)(unsigned char *, void, uint64_t, int *))(v91 + 56);
      swift_bridgeObjectRetain();
      v66(v51, 0, 1, __dsta);
      uint64_t v14 = a3;
      uint64_t v13 = a2;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v67 = v14[11];
  long long v68 = (char *)v15 + v67;
  uint64_t v69 = (char *)v13 + v67;
  if (v95((unsigned char *)v13 + v67, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
  }
  else
  {
    *long long v68 = *v69;
    *((void *)v68 + 1) = *((void *)v69 + 1);
    *((_DWORD *)v68 + 4) = *((_DWORD *)v69 + 4);
    uint64_t v71 = *((void *)v69 + 7);
    if (v71 == 1)
    {
      long long v72 = *(_OWORD *)(v69 + 40);
      *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
      *(_OWORD *)(v68 + 40) = v72;
      *((void *)v68 + 7) = *((void *)v69 + 7);
    }
    else
    {
      v68[24] = v69[24];
      *(_WORD *)(v68 + 25) = *(_WORD *)(v69 + 25);
      *(_OWORD *)(v68 + 28) = *(_OWORD *)(v69 + 28);
      *((_DWORD *)v68 + 11) = *((_DWORD *)v69 + 11);
      *((void *)v68 + 6) = *((void *)v69 + 6);
      *((void *)v68 + 7) = v71;
      swift_bridgeObjectRetain();
    }
    uint64_t v73 = *(int *)(v10 + 28);
    uint64_t v74 = &v68[v73];
    uint64_t v75 = &v69[v73];
    uint64_t v76 = sub_23309B300();
    uint64_t v77 = *(void *)(v76 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 16))(v74, v75, v76);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
    }
    uint64_t v15 = a1;
    uint64_t v79 = *(int *)(v10 + 32);
    uint64_t v80 = &v68[v79];
    uint64_t v81 = &v69[v79];
    uint64_t v82 = v81[1];
    *uint64_t v80 = *v81;
    v80[1] = v82;
    uint64_t v83 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v91 + 56);
    swift_bridgeObjectRetain();
    v83(v68, 0, 1, v10);
  }
  uint64_t v84 = v14[12];
  uint64_t v85 = (void *)((char *)v15 + v84);
  uint64_t v86 = (void *)((char *)v13 + v84);
  uint64_t v87 = v86[1];
  void *v85 = *v86;
  v85[1] = v87;
  swift_bridgeObjectRetain();
  return v15;
}

void *assignWithCopy for ModelsDSTU2.DiagnosticReport(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FHIRDateTime();
  uint64_t v225 = *(void *)(v9 - 8);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
  int v11 = v10(v7, 1, v9);
  long long v227 = v10;
  int v12 = v10((uint64_t)v8, 1, v9);
  uint64_t v226 = a3;
  if (!v11)
  {
    if (v12)
    {
      sub_232F7CB8C(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    long long v17 = (long long *)(v7 + 24);
    uint64_t v18 = (long long *)(v8 + 24);
    uint64_t v19 = *((void *)v8 + 7);
    if (*(void *)(v7 + 56) == 1)
    {
      if (v19 == 1)
      {
        long long v20 = *v18;
        long long v21 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        long long *v17 = v20;
        *(_OWORD *)(v7 + 40) = v21;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v35 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v35;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v19 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v33 = *((void *)v8 + 7);
      long long v34 = *(_OWORD *)(v8 + 40);
      long long *v17 = *v18;
      *(_OWORD *)(v7 + 40) = v34;
      *(void *)(v7 + 56) = v33;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    __dst = (int *)v9;
    uint64_t v36 = *(int *)(v9 + 28);
    long long v37 = (void *)(v7 + v36);
    uint64_t v38 = &v8[v36];
    uint64_t v39 = sub_23309B300();
    uint64_t v40 = *(void *)(v39 - 8);
    long long v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    uint64_t v217 = v37;
    LODWORD(v37) = v41(v37, 1, v39);
    int v42 = v41(v38, 1, v39);
    if (v37)
    {
      if (!v42)
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v217, v38, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v217, 0, 1, v39);
        goto LABEL_28;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v44 = *(void *)(*(void *)(v43 - 8) + 64);
      uint64_t v45 = v217;
    }
    else
    {
      if (!v42)
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 24))(v217, v38, v39);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v217, v39);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v44 = *(void *)(*(void *)(v46 - 8) + 64);
      uint64_t v45 = v217;
    }
    memcpy(v45, v38, v44);
LABEL_28:
    a3 = v226;
    uint64_t v9 = (uint64_t)__dst;
    uint64_t v47 = __dst[8];
    uint64_t v48 = (void *)(v7 + v47);
    uint64_t v49 = &v8[v47];
    void *v48 = *(void *)v49;
    v48[1] = *((void *)v49 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (v12)
  {
LABEL_7:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v7 = *v8;
  uint64_t v13 = *((void *)v8 + 1);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
  *(void *)(v7 + 8) = v13;
  if (*((void *)v8 + 7) == 1)
  {
    long long v14 = *(_OWORD *)(v8 + 24);
    long long v15 = *(_OWORD *)(v8 + 40);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v14;
    *(_OWORD *)(v7 + 40) = v15;
  }
  else
  {
    *(unsigned char *)(v7 + 24) = v8[24];
    *(unsigned char *)(v7 + 25) = v8[25];
    *(unsigned char *)(v7 + 26) = v8[26];
    long long v22 = *(_OWORD *)(v8 + 28);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v22;
    *(void *)(v7 + 48) = *((void *)v8 + 6);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = *(int *)(v9 + 28);
  uint64_t v24 = (void *)(v7 + v23);
  uint64_t v25 = &v8[v23];
  uint64_t v26 = sub_23309B300();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = *(int *)(v9 + 32);
  uint64_t v30 = (void *)(v7 + v29);
  uint64_t v31 = &v8[v29];
  *uint64_t v30 = *(void *)v31;
  v30[1] = *((void *)v31 + 1);
  uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56);
  swift_bridgeObjectRetain();
  v32(v7, 0, 1, v9);
LABEL_29:
  uint64_t v50 = *(int *)(a3 + 40);
  uint64_t v51 = (uint64_t)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = type metadata accessor for Period();
  uint64_t v54 = *(void *)(v53 - 8);
  long long v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55((uint64_t)v52, 1, v53);
  if (!v56)
  {
    if (v57)
    {
      sub_232F7CB8C(v51, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_35;
    }
    int v61 = v227(v51, 1, v9);
    int v62 = v227((uint64_t)v52, 1, v9);
    uint64_t v58 = v226;
    if (v61)
    {
      if (!v62)
      {
        *(unsigned char *)uint64_t v51 = *v52;
        uint64_t v63 = *((void *)v52 + 1);
        *(_DWORD *)(v51 + 16) = *((_DWORD *)v52 + 4);
        *(void *)(v51 + 8) = v63;
        if (*((void *)v52 + 7) == 1)
        {
          long long v64 = *(_OWORD *)(v52 + 24);
          long long v65 = *(_OWORD *)(v52 + 40);
          *(void *)(v51 + 56) = *((void *)v52 + 7);
          *(_OWORD *)(v51 + 24) = v64;
          *(_OWORD *)(v51 + 40) = v65;
        }
        else
        {
          *(unsigned char *)(v51 + 24) = v52[24];
          *(unsigned char *)(v51 + 25) = v52[25];
          *(unsigned char *)(v51 + 26) = v52[26];
          long long v101 = *(_OWORD *)(v52 + 28);
          *(_DWORD *)(v51 + 44) = *((_DWORD *)v52 + 11);
          *(_OWORD *)(v51 + 28) = v101;
          *(void *)(v51 + 48) = *((void *)v52 + 6);
          *(void *)(v51 + 56) = *((void *)v52 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v102 = *(int *)(v9 + 28);
        uint64_t v103 = (void *)(v51 + v102);
        uint64_t v104 = &v52[v102];
        uint64_t v105 = sub_23309B300();
        uint64_t v106 = *(void *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        }
        uint64_t v58 = v226;
        uint64_t v108 = *(int *)(v9 + 32);
        uint64_t v109 = (void *)(v51 + v108);
        uint64_t v110 = &v52[v108];
        *uint64_t v109 = *(void *)v110;
        v109[1] = *((void *)v110 + 1);
        uint64_t v111 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56);
        swift_bridgeObjectRetain();
        v111(v51, 0, 1, v9);
LABEL_82:
        uint64_t v127 = *(int *)(v53 + 20);
        uint64_t v128 = v51 + v127;
        long long v129 = &v52[v127];
        int v130 = v227(v128, 1, v9);
        int v131 = v227((uint64_t)v129, 1, v9);
        if (v130)
        {
          if (!v131)
          {
            *(unsigned char *)uint64_t v128 = *v129;
            uint64_t v132 = *((void *)v129 + 1);
            *(_DWORD *)(v128 + 16) = *((_DWORD *)v129 + 4);
            *(void *)(v128 + 8) = v132;
            if (*((void *)v129 + 7) == 1)
            {
              long long v133 = *(_OWORD *)(v129 + 24);
              long long v134 = *(_OWORD *)(v129 + 40);
              *(void *)(v128 + 56) = *((void *)v129 + 7);
              *(_OWORD *)(v128 + 24) = v133;
              *(_OWORD *)(v128 + 40) = v134;
            }
            else
            {
              *(unsigned char *)(v128 + 24) = v129[24];
              *(unsigned char *)(v128 + 25) = v129[25];
              *(unsigned char *)(v128 + 26) = v129[26];
              long long v141 = *(_OWORD *)(v129 + 28);
              *(_DWORD *)(v128 + 44) = *((_DWORD *)v129 + 11);
              *(_OWORD *)(v128 + 28) = v141;
              *(void *)(v128 + 48) = *((void *)v129 + 6);
              *(void *)(v128 + 56) = *((void *)v129 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v142 = *(int *)(v9 + 28);
            uint64_t v143 = (void *)(v128 + v142);
            uint64_t v144 = &v129[v142];
            uint64_t v145 = sub_23309B300();
            uint64_t v146 = *(void *)(v145 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v146 + 16))(v143, v144, v145);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
            }
            uint64_t v148 = *(int *)(v9 + 32);
            uint64_t v149 = (void *)(v128 + v148);
            uint64_t v150 = &v129[v148];
            *uint64_t v149 = *(void *)v150;
            v149[1] = *((void *)v150 + 1);
            uint64_t v151 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56);
            swift_bridgeObjectRetain();
            v151(v128, 0, 1, v9);
            goto LABEL_97;
          }
LABEL_88:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v128, v129, *(void *)(*(void *)(v135 - 8) + 64));
          goto LABEL_97;
        }
        if (v131)
        {
          sub_232F7CB8C(v128, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_88;
        }
        *(unsigned char *)uint64_t v128 = *v129;
        *(void *)(v128 + 8) = *((void *)v129 + 1);
        *(_WORD *)(v128 + 16) = *((_WORD *)v129 + 8);
        *(_WORD *)(v128 + 18) = *((_WORD *)v129 + 9);
        uint64_t v136 = (long long *)(v128 + 24);
        uint64_t v137 = (long long *)(v129 + 24);
        uint64_t v138 = *((void *)v129 + 7);
        if (*(void *)(v128 + 56) == 1)
        {
          if (v138 == 1)
          {
            long long v139 = *v137;
            long long v140 = *(_OWORD *)(v129 + 40);
            *(void *)(v128 + 56) = *((void *)v129 + 7);
            *uint64_t v136 = v139;
            *(_OWORD *)(v128 + 40) = v140;
          }
          else
          {
            *(unsigned char *)(v128 + 24) = v129[24];
            *(unsigned char *)(v128 + 25) = v129[25];
            *(unsigned char *)(v128 + 26) = v129[26];
            long long v200 = *(_OWORD *)(v129 + 28);
            *(_DWORD *)(v128 + 44) = *((_DWORD *)v129 + 11);
            *(_OWORD *)(v128 + 28) = v200;
            *(void *)(v128 + 48) = *((void *)v129 + 6);
            *(void *)(v128 + 56) = *((void *)v129 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v138 == 1)
        {
          sub_232F0434C(v128 + 24);
          uint64_t v198 = *((void *)v129 + 7);
          long long v199 = *(_OWORD *)(v129 + 40);
          *uint64_t v136 = *v137;
          *(_OWORD *)(v128 + 40) = v199;
          *(void *)(v128 + 56) = v198;
        }
        else
        {
          *(unsigned char *)(v128 + 24) = v129[24];
          *(unsigned char *)(v128 + 25) = v129[25];
          *(unsigned char *)(v128 + 26) = v129[26];
          *(_DWORD *)(v128 + 28) = *((_DWORD *)v129 + 7);
          *(_WORD *)(v128 + 32) = *((_WORD *)v129 + 16);
          *(_WORD *)(v128 + 34) = *((_WORD *)v129 + 17);
          *(_WORD *)(v128 + 36) = *((_WORD *)v129 + 18);
          *(_WORD *)(v128 + 38) = *((_WORD *)v129 + 19);
          *(_WORD *)(v128 + 40) = *((_WORD *)v129 + 20);
          *(_WORD *)(v128 + 42) = *((_WORD *)v129 + 21);
          *(_WORD *)(v128 + 44) = *((_WORD *)v129 + 22);
          *(_WORD *)(v128 + 46) = *((_WORD *)v129 + 23);
          *(void *)(v128 + 48) = *((void *)v129 + 6);
          *(void *)(v128 + 56) = *((void *)v129 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v201 = *(int *)(v9 + 28);
        uint64_t v202 = (void *)(v128 + v201);
        uint64_t v203 = &v129[v201];
        uint64_t v204 = sub_23309B300();
        __srcb = *(void **)(v204 - 8);
        uint64_t v205 = (uint64_t (*)(void *, uint64_t, uint64_t))__srcb[6];
        __dste = v202;
        LODWORD(v202) = v205(v202, 1, v204);
        int v206 = v205(v203, 1, v204);
        if (v202)
        {
          if (!v206)
          {
            ((void (*)(void *, char *, uint64_t))__srcb[2])(__dste, v203, v204);
            ((void (*)(void *, void, uint64_t, uint64_t))__srcb[7])(__dste, 0, 1, v204);
            goto LABEL_138;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v208 = *(void *)(*(void *)(v207 - 8) + 64);
          long long v209 = __dste;
        }
        else
        {
          if (!v206)
          {
            ((void (*)(void *, char *, uint64_t))__srcb[3])(__dste, v203, v204);
            goto LABEL_138;
          }
          ((void (*)(void *, uint64_t))__srcb[1])(__dste, v204);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v208 = *(void *)(*(void *)(v210 - 8) + 64);
          long long v209 = __dste;
        }
        memcpy(v209, v203, v208);
LABEL_138:
        uint64_t v211 = *(int *)(v9 + 32);
        uint64_t v212 = (void *)(v128 + v211);
        uint64_t v213 = &v129[v211];
        *uint64_t v212 = *(void *)v213;
        v212[1] = *((void *)v213 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
LABEL_45:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v51, v52, *(void *)(*(void *)(v69 - 8) + 64));
      goto LABEL_82;
    }
    if (v62)
    {
      sub_232F7CB8C(v51, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_45;
    }
    *(unsigned char *)uint64_t v51 = *v52;
    *(void *)(v51 + 8) = *((void *)v52 + 1);
    *(_WORD *)(v51 + 16) = *((_WORD *)v52 + 8);
    *(_WORD *)(v51 + 18) = *((_WORD *)v52 + 9);
    uint64_t v96 = (long long *)(v51 + 24);
    uint64_t v97 = (long long *)(v52 + 24);
    uint64_t v98 = *((void *)v52 + 7);
    if (*(void *)(v51 + 56) == 1)
    {
      if (v98 == 1)
      {
        long long v99 = *v97;
        long long v100 = *(_OWORD *)(v52 + 40);
        *(void *)(v51 + 56) = *((void *)v52 + 7);
        long long *v96 = v99;
        *(_OWORD *)(v51 + 40) = v100;
      }
      else
      {
        *(unsigned char *)(v51 + 24) = v52[24];
        *(unsigned char *)(v51 + 25) = v52[25];
        *(unsigned char *)(v51 + 26) = v52[26];
        long long v114 = *(_OWORD *)(v52 + 28);
        *(_DWORD *)(v51 + 44) = *((_DWORD *)v52 + 11);
        *(_OWORD *)(v51 + 28) = v114;
        *(void *)(v51 + 48) = *((void *)v52 + 6);
        *(void *)(v51 + 56) = *((void *)v52 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v98 == 1)
    {
      sub_232F0434C(v51 + 24);
      uint64_t v112 = *((void *)v52 + 7);
      long long v113 = *(_OWORD *)(v52 + 40);
      long long *v96 = *v97;
      *(_OWORD *)(v51 + 40) = v113;
      *(void *)(v51 + 56) = v112;
    }
    else
    {
      *(unsigned char *)(v51 + 24) = v52[24];
      *(unsigned char *)(v51 + 25) = v52[25];
      *(unsigned char *)(v51 + 26) = v52[26];
      *(_DWORD *)(v51 + 28) = *((_DWORD *)v52 + 7);
      *(_WORD *)(v51 + 32) = *((_WORD *)v52 + 16);
      *(_WORD *)(v51 + 34) = *((_WORD *)v52 + 17);
      *(_WORD *)(v51 + 36) = *((_WORD *)v52 + 18);
      *(_WORD *)(v51 + 38) = *((_WORD *)v52 + 19);
      *(_WORD *)(v51 + 40) = *((_WORD *)v52 + 20);
      *(_WORD *)(v51 + 42) = *((_WORD *)v52 + 21);
      *(_WORD *)(v51 + 44) = *((_WORD *)v52 + 22);
      *(_WORD *)(v51 + 46) = *((_WORD *)v52 + 23);
      *(void *)(v51 + 48) = *((void *)v52 + 6);
      *(void *)(v51 + 56) = *((void *)v52 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v115 = *(int *)(v9 + 28);
    uint64_t v116 = (void *)(v51 + v115);
    __dstc = &v52[v115];
    uint64_t v117 = sub_23309B300();
    __srca = *(void **)(v117 - 8);
    uint64_t v118 = (uint64_t (*)(void *, uint64_t, uint64_t))__srca[6];
    uint64_t v218 = v116;
    LODWORD(v116) = v118(v116, 1, v117);
    int v119 = v118(__dstc, 1, v117);
    if (v116)
    {
      if (!v119)
      {
        ((void (*)(void *, char *, uint64_t))__srca[2])(v218, __dstc, v117);
        ((void (*)(void *, void, uint64_t, uint64_t))__srca[7])(v218, 0, 1, v117);
        goto LABEL_81;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v121 = *(void *)(*(void *)(v120 - 8) + 64);
      uint64_t v122 = v218;
    }
    else
    {
      if (!v119)
      {
        ((void (*)(void *, char *, uint64_t))__srca[3])(v218, __dstc, v117);
        goto LABEL_81;
      }
      ((void (*)(void *, uint64_t))__srca[1])(v218, v117);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v121 = *(void *)(*(void *)(v123 - 8) + 64);
      uint64_t v122 = v218;
    }
    memcpy(v122, __dstc, v121);
LABEL_81:
    uint64_t v124 = *(int *)(v9 + 32);
    uint64_t v125 = (void *)(v51 + v124);
    long long v126 = &v52[v124];
    *uint64_t v125 = *(void *)v126;
    v125[1] = *((void *)v126 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v58 = v226;
    goto LABEL_82;
  }
  if (v57)
  {
LABEL_35:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v51, v52, *(void *)(*(void *)(v60 - 8) + 64));
LABEL_36:
    uint64_t v58 = v226;
    goto LABEL_97;
  }
  uint64_t v58 = v226;
  if (v227((uint64_t)v52, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v51, v52, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v51 = *v52;
    uint64_t v66 = *((void *)v52 + 1);
    *(_DWORD *)(v51 + 16) = *((_DWORD *)v52 + 4);
    *(void *)(v51 + 8) = v66;
    if (*((void *)v52 + 7) == 1)
    {
      long long v67 = *(_OWORD *)(v52 + 24);
      long long v68 = *(_OWORD *)(v52 + 40);
      *(void *)(v51 + 56) = *((void *)v52 + 7);
      *(_OWORD *)(v51 + 24) = v67;
      *(_OWORD *)(v51 + 40) = v68;
    }
    else
    {
      *(unsigned char *)(v51 + 24) = v52[24];
      *(unsigned char *)(v51 + 25) = v52[25];
      *(unsigned char *)(v51 + 26) = v52[26];
      long long v70 = *(_OWORD *)(v52 + 28);
      *(_DWORD *)(v51 + 44) = *((_DWORD *)v52 + 11);
      *(_OWORD *)(v51 + 28) = v70;
      *(void *)(v51 + 48) = *((void *)v52 + 6);
      *(void *)(v51 + 56) = *((void *)v52 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v71 = *(int *)(v9 + 28);
    __dsta = (void *)(v51 + v71);
    long long v72 = &v52[v71];
    uint64_t v73 = sub_23309B300();
    uint64_t v74 = *(void *)(v73 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v72, *(void *)(*(void *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v74 + 16))(__dsta, v72, v73);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(__dsta, 0, 1, v73);
    }
    uint64_t v58 = v226;
    uint64_t v76 = *(int *)(v9 + 32);
    uint64_t v77 = (void *)(v51 + v76);
    uint64_t v78 = &v52[v76];
    *uint64_t v77 = *(void *)v78;
    v77[1] = *((void *)v78 + 1);
    uint64_t v79 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56);
    swift_bridgeObjectRetain();
    v79(v51, 0, 1, v9);
  }
  uint64_t v80 = *(int *)(v53 + 20);
  uint64_t v81 = (char *)(v51 + v80);
  uint64_t v82 = &v52[v80];
  if (v227((uint64_t)v82, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
  }
  else
  {
    *uint64_t v81 = *v82;
    uint64_t v84 = *((void *)v82 + 1);
    *((_DWORD *)v81 + 4) = *((_DWORD *)v82 + 4);
    *((void *)v81 + 1) = v84;
    if (*((void *)v82 + 7) == 1)
    {
      long long v85 = *(_OWORD *)(v82 + 24);
      long long v86 = *(_OWORD *)(v82 + 40);
      *((void *)v81 + 7) = *((void *)v82 + 7);
      *(_OWORD *)(v81 + 24) = v85;
      *(_OWORD *)(v81 + 40) = v86;
    }
    else
    {
      v81[24] = v82[24];
      v81[25] = v82[25];
      v81[26] = v82[26];
      long long v87 = *(_OWORD *)(v82 + 28);
      *((_DWORD *)v81 + 11) = *((_DWORD *)v82 + 11);
      *(_OWORD *)(v81 + 28) = v87;
      *((void *)v81 + 6) = *((void *)v82 + 6);
      *((void *)v81 + 7) = *((void *)v82 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v88 = *(int *)(v9 + 28);
    __dstb = &v81[v88];
    uint64_t v89 = &v82[v88];
    uint64_t v90 = sub_23309B300();
    __src = *(void (***)(void *, const void *, uint64_t))(v90 - 8);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v89, 1, v90))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dstb, v89, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      __src[2](__dstb, v89, v90);
      ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(__dstb, 0, 1, v90);
    }
    uint64_t v58 = v226;
    uint64_t v92 = *(int *)(v9 + 32);
    int v93 = &v81[v92];
    uint64_t v94 = &v82[v92];
    *(void *)int v93 = *(void *)v94;
    *((void *)v93 + 1) = *((void *)v94 + 1);
    uint64_t v95 = *(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56);
    swift_bridgeObjectRetain();
    v95(v81, 0, 1, v9);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_97:
  uint64_t v152 = *(int *)(v58 + 44);
  uint64_t v153 = (uint64_t)a1 + v152;
  uint64_t v154 = (char *)a2 + v152;
  int v155 = v227((uint64_t)a1 + v152, 1, v9);
  int v156 = v227((uint64_t)v154, 1, v9);
  if (!v155)
  {
    if (v156)
    {
      sub_232F7CB8C(v153, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_103;
    }
    *(unsigned char *)uint64_t v153 = *v154;
    *(void *)(v153 + 8) = *((void *)v154 + 1);
    *(_WORD *)(v153 + 16) = *((_WORD *)v154 + 8);
    *(_WORD *)(v153 + 18) = *((_WORD *)v154 + 9);
    uint64_t v161 = (long long *)(v153 + 24);
    uint64_t v162 = (long long *)(v154 + 24);
    uint64_t v163 = *((void *)v154 + 7);
    if (*(void *)(v153 + 56) == 1)
    {
      if (v163 == 1)
      {
        long long v164 = *v162;
        long long v165 = *(_OWORD *)(v154 + 40);
        *(void *)(v153 + 56) = *((void *)v154 + 7);
        *uint64_t v161 = v164;
        *(_OWORD *)(v153 + 40) = v165;
      }
      else
      {
        *(unsigned char *)(v153 + 24) = v154[24];
        *(unsigned char *)(v153 + 25) = v154[25];
        *(unsigned char *)(v153 + 26) = v154[26];
        long long v179 = *(_OWORD *)(v154 + 28);
        *(_DWORD *)(v153 + 44) = *((_DWORD *)v154 + 11);
        *(_OWORD *)(v153 + 28) = v179;
        *(void *)(v153 + 48) = *((void *)v154 + 6);
        *(void *)(v153 + 56) = *((void *)v154 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v163 == 1)
    {
      sub_232F0434C(v153 + 24);
      uint64_t v177 = *((void *)v154 + 7);
      long long v178 = *(_OWORD *)(v154 + 40);
      *uint64_t v161 = *v162;
      *(_OWORD *)(v153 + 40) = v178;
      *(void *)(v153 + 56) = v177;
    }
    else
    {
      *(unsigned char *)(v153 + 24) = v154[24];
      *(unsigned char *)(v153 + 25) = v154[25];
      *(unsigned char *)(v153 + 26) = v154[26];
      *(_DWORD *)(v153 + 28) = *((_DWORD *)v154 + 7);
      *(_WORD *)(v153 + 32) = *((_WORD *)v154 + 16);
      *(_WORD *)(v153 + 34) = *((_WORD *)v154 + 17);
      *(_WORD *)(v153 + 36) = *((_WORD *)v154 + 18);
      *(_WORD *)(v153 + 38) = *((_WORD *)v154 + 19);
      *(_WORD *)(v153 + 40) = *((_WORD *)v154 + 20);
      *(_WORD *)(v153 + 42) = *((_WORD *)v154 + 21);
      *(_WORD *)(v153 + 44) = *((_WORD *)v154 + 22);
      *(_WORD *)(v153 + 46) = *((_WORD *)v154 + 23);
      *(void *)(v153 + 48) = *((void *)v154 + 6);
      *(void *)(v153 + 56) = *((void *)v154 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    __dstd = (int *)v9;
    uint64_t v180 = *(int *)(v9 + 28);
    uint64_t v181 = (void *)(v153 + v180);
    uint64_t v182 = &v154[v180];
    uint64_t v183 = sub_23309B300();
    uint64_t v184 = *(void *)(v183 - 8);
    uint64_t v185 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v184 + 48);
    long long v228 = v181;
    LODWORD(v181) = v185(v181, 1, v183);
    int v186 = v185(v182, 1, v183);
    if (v181)
    {
      if (!v186)
      {
        (*(void (**)(void *, char *, uint64_t))(v184 + 16))(v228, v182, v183);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v184 + 56))(v228, 0, 1, v183);
        goto LABEL_124;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v188 = *(void *)(*(void *)(v187 - 8) + 64);
      uint64_t v189 = v228;
    }
    else
    {
      if (!v186)
      {
        (*(void (**)(void *, char *, uint64_t))(v184 + 24))(v228, v182, v183);
        goto LABEL_124;
      }
      (*(void (**)(void *, uint64_t))(v184 + 8))(v228, v183);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v188 = *(void *)(*(void *)(v190 - 8) + 64);
      uint64_t v189 = v228;
    }
    memcpy(v189, v182, v188);
LABEL_124:
    uint64_t v58 = v226;
    uint64_t v191 = __dstd[8];
    uint64_t v192 = (void *)(v153 + v191);
    uint64_t v193 = &v154[v191];
    *uint64_t v192 = *(void *)v193;
    v192[1] = *((void *)v193 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_125;
  }
  if (v156)
  {
LABEL_103:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v153, v154, *(void *)(*(void *)(v160 - 8) + 64));
    goto LABEL_125;
  }
  *(unsigned char *)uint64_t v153 = *v154;
  uint64_t v157 = *((void *)v154 + 1);
  *(_DWORD *)(v153 + 16) = *((_DWORD *)v154 + 4);
  *(void *)(v153 + 8) = v157;
  if (*((void *)v154 + 7) == 1)
  {
    long long v158 = *(_OWORD *)(v154 + 24);
    long long v159 = *(_OWORD *)(v154 + 40);
    *(void *)(v153 + 56) = *((void *)v154 + 7);
    *(_OWORD *)(v153 + 24) = v158;
    *(_OWORD *)(v153 + 40) = v159;
  }
  else
  {
    *(unsigned char *)(v153 + 24) = v154[24];
    *(unsigned char *)(v153 + 25) = v154[25];
    *(unsigned char *)(v153 + 26) = v154[26];
    long long v166 = *(_OWORD *)(v154 + 28);
    *(_DWORD *)(v153 + 44) = *((_DWORD *)v154 + 11);
    *(_OWORD *)(v153 + 28) = v166;
    *(void *)(v153 + 48) = *((void *)v154 + 6);
    *(void *)(v153 + 56) = *((void *)v154 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v167 = *(int *)(v9 + 28);
  int v168 = (void *)(v153 + v167);
  uint64_t v169 = &v154[v167];
  uint64_t v170 = sub_23309B300();
  uint64_t v171 = *(void *)(v170 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v168, v169, *(void *)(*(void *)(v172 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v171 + 16))(v168, v169, v170);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, v170);
  }
  uint64_t v173 = *(int *)(v9 + 32);
  uint64_t v174 = (void *)(v153 + v173);
  uint64_t v175 = &v154[v173];
  *uint64_t v174 = *(void *)v175;
  v174[1] = *((void *)v175 + 1);
  uint64_t v176 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v225 + 56);
  swift_bridgeObjectRetain();
  v176(v153, 0, 1, v9);
LABEL_125:
  uint64_t v194 = *(int *)(v58 + 48);
  int v195 = (void *)((char *)a1 + v194);
  int v196 = (void *)((char *)a2 + v194);
  *int v195 = *v196;
  v195[1] = v196[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.DiagnosticReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = a3[9];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v11 = type metadata accessor for FHIRDateTime();
  uint64_t v61 = *(void *)(v11 - 8);
  int v12 = *(unsigned int (**)(void, void, void))(v61 + 48);
  if (v12(v10, 1, v11))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    long long v55 = v12;
    uint64_t v58 = v3;
    unsigned char *v9 = *v10;
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    uint64_t v14 = *(int *)(v11 + 28);
    long long v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = sub_23309B300();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v9, 0, 1, v11);
    int v12 = v55;
    uint64_t v3 = v58;
  }
  uint64_t v20 = v3[10];
  long long v21 = (unsigned char *)(a1 + v20);
  long long v22 = (unsigned char *)(a2 + v20);
  uint64_t v23 = type metadata accessor for Period();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v24;
    if (v12(v22, 1, v11))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      int v56 = v12;
      uint64_t v59 = v3;
      *long long v21 = *v22;
      *((void *)v21 + 1) = *((void *)v22 + 1);
      *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
      *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
      *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
      *((void *)v21 + 7) = *((void *)v22 + 7);
      uint64_t v27 = *(int *)(v11 + 28);
      __dst = &v21[v27];
      uint64_t v28 = &v22[v27];
      uint64_t v29 = sub_23309B300();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 32))(__dst, v28, v29);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v21, 0, 1, v11);
      int v12 = v56;
      uint64_t v3 = v59;
    }
    uint64_t v32 = *(int *)(v23 + 20);
    uint64_t v33 = &v21[v32];
    long long v34 = &v22[v32];
    if (v12(v34, 1, v11))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      int v57 = v12;
      uint64_t v60 = v3;
      *uint64_t v33 = *v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
      *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
      *((void *)v33 + 7) = *((void *)v34 + 7);
      uint64_t v36 = *(int *)(v11 + 28);
      __dsta = &v33[v36];
      long long v37 = &v34[v36];
      uint64_t v38 = sub_23309B300();
      uint64_t v51 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v51 + 48))(v37, 1, v38))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v51 + 32))(__dsta, v37, v38);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v51 + 56))(__dsta, 0, 1, v38);
      }
      *(_OWORD *)&v33[*(int *)(v11 + 32)] = *(_OWORD *)&v34[*(int *)(v11 + 32)];
      uint64_t v3 = v60;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v33, 0, 1, v11);
      int v12 = v57;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v54 + 56))(v21, 0, 1, v23);
  }
  uint64_t v40 = v3[11];
  long long v41 = (unsigned char *)(a1 + v40);
  int v42 = (unsigned char *)(a2 + v40);
  if (v12(a2 + v40, 1, v11))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    *long long v41 = *v42;
    *((void *)v41 + 1) = *((void *)v42 + 1);
    *((_DWORD *)v41 + 4) = *((_DWORD *)v42 + 4);
    *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
    *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
    *((void *)v41 + 7) = *((void *)v42 + 7);
    uint64_t v44 = *(int *)(v11 + 28);
    uint64_t v45 = &v41[v44];
    uint64_t v46 = &v42[v44];
    uint64_t v47 = sub_23309B300();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *(_OWORD *)&v41[*(int *)(v11 + 32)] = *(_OWORD *)&v42[*(int *)(v11 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v41, 0, 1, v11);
  }
  *(_OWORD *)(a1 + v3[12]) = *(_OWORD *)(a2 + v3[12]);
  return a1;
}

void *assignWithTake for ModelsDSTU2.DiagnosticReport(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[9];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  long long v15 = (void **)(*(void *)(v14 - 8) + 48);
  uint64_t v174 = *(void *)(v14 - 8);
  uint64_t v176 = (uint64_t (*)(char *, uint64_t, uint64_t))*v15;
  int v16 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v15)(v12, 1, v14);
  int v17 = v176(v13, 1, v14);
  if (!v16)
  {
    if (v17)
    {
      sub_232F7CB8C(v12, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v12 = *v13;
    *(void *)(v12 + 8) = *((void *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    uint64_t v163 = a3;
    if (*(void *)(v12 + 56) != 1)
    {
      uint64_t v26 = *((void *)v13 + 7);
      if (v26 != 1)
      {
        *(unsigned char *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(void *)(v12 + 48) = *((void *)v13 + 6);
        *(void *)(v12 + 56) = v26;
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v28 = *(int *)(v14 + 28);
        uint64_t v29 = (void *)(v12 + v28);
        uint64_t v30 = &v13[v28];
        uint64_t v31 = sub_23309B300();
        uint64_t v158 = *(void *)(v31 - 8);
        uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v158 + 48);
        uint64_t v170 = v29;
        LODWORD(v29) = v32(v29, 1, v31);
        int v33 = v32(v30, 1, v31);
        if (v29)
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 32))(v170, v30, v31);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v158 + 56))(v170, 0, 1, v31);
            goto LABEL_23;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
          uint64_t v36 = v170;
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 40))(v170, v30, v31);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v158 + 8))(v170, v31);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v37 - 8) + 64);
          uint64_t v36 = v170;
        }
        memcpy(v36, v30, v35);
LABEL_23:
        a3 = v163;
        uint64_t v38 = *(int *)(v14 + 32);
        uint64_t v39 = (void *)(v12 + v38);
        uint64_t v40 = &v13[v38];
        uint64_t v42 = *(void *)v40;
        uint64_t v41 = *((void *)v40 + 1);
        void *v39 = v42;
        v39[1] = v41;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      sub_232F0434C(v12 + 24);
    }
    long long v27 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v27;
    *(void *)(v12 + 56) = *((void *)v13 + 7);
    goto LABEL_15;
  }
  if (v17)
  {
LABEL_7:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v18 = a3;
  *(unsigned char *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  uint64_t v19 = *(int *)(v14 + 28);
  uint64_t v20 = (void *)(v12 + v19);
  long long v21 = &v13[v19];
  uint64_t v22 = sub_23309B300();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a3 = v18;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v12, 0, 1, v14);
LABEL_24:
  uint64_t v43 = a3[10];
  uint64_t v44 = (uint64_t)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for Period();
  uint64_t v171 = *(void **)(v46 - 8);
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171[6];
  int v48 = v47(v44, 1, v46);
  int v49 = v47((uint64_t)v45, 1, v46);
  if (!v48)
  {
    if (v49)
    {
      sub_232F7CB8C(v44, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_30;
    }
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
    int v53 = v176((char *)v44, 1, v14);
    int v54 = v176(v45, 1, v14);
    if (v53)
    {
      if (!v54)
      {
        long long v164 = a3;
        *(unsigned char *)uint64_t v44 = *v45;
        *(void *)(v44 + 8) = *((void *)v45 + 1);
        *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
        *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
        *(void *)(v44 + 56) = *((void *)v45 + 7);
        uint64_t v55 = *(int *)(v14 + 28);
        int v56 = (void *)(v44 + v55);
        int v57 = &v45[v55];
        uint64_t v58 = sub_23309B300();
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        }
        *(_OWORD *)(v44 + *(int *)(v14 + 32)) = *(_OWORD *)&v45[*(int *)(v14 + 32)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v44, 0, 1, v14);
        a3 = v164;
        uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
LABEL_66:
        uint64_t v93 = *(int *)(v46 + 20);
        uint64_t v94 = v44 + v93;
        uint64_t v95 = &v45[v93];
        int v96 = v50(v94, 1, v14);
        int v97 = v50((uint64_t)v95, 1, v14);
        if (v96)
        {
          if (!v97)
          {
            uint64_t v98 = a3;
            *(unsigned char *)uint64_t v94 = *v95;
            *(void *)(v94 + 8) = *((void *)v95 + 1);
            *(_DWORD *)(v94 + 16) = *((_DWORD *)v95 + 4);
            *(_OWORD *)(v94 + 24) = *(_OWORD *)(v95 + 24);
            *(_OWORD *)(v94 + 40) = *(_OWORD *)(v95 + 40);
            *(void *)(v94 + 56) = *((void *)v95 + 7);
            uint64_t v99 = *(int *)(v14 + 28);
            long long v100 = (void *)(v94 + v99);
            long long v101 = &v95[v99];
            uint64_t v102 = sub_23309B300();
            uint64_t v103 = *(void *)(v102 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v103 + 32))(v100, v101, v102);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
            }
            a3 = v98;
            *(_OWORD *)(v94 + *(int *)(v14 + 32)) = *(_OWORD *)&v95[*(int *)(v14 + 32)];
            uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v94, 0, 1, v14);
            goto LABEL_79;
          }
LABEL_72:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v94, v95, *(void *)(*(void *)(v105 - 8) + 64));
          goto LABEL_79;
        }
        if (v97)
        {
          sub_232F7CB8C(v94, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_72;
        }
        *(unsigned char *)uint64_t v94 = *v95;
        *(void *)(v94 + 8) = *((void *)v95 + 1);
        *(_DWORD *)(v94 + 16) = *((_DWORD *)v95 + 4);
        int v168 = a3;
        if (*(void *)(v94 + 56) != 1)
        {
          uint64_t v106 = *((void *)v95 + 7);
          if (v106 != 1)
          {
            *(unsigned char *)(v94 + 24) = v95[24];
            *(_WORD *)(v94 + 25) = *(_WORD *)(v95 + 25);
            *(_DWORD *)(v94 + 28) = *((_DWORD *)v95 + 7);
            *(_OWORD *)(v94 + 32) = *((_OWORD *)v95 + 2);
            *(void *)(v94 + 48) = *((void *)v95 + 6);
            *(void *)(v94 + 56) = v106;
            swift_bridgeObjectRelease();
LABEL_104:
            uint64_t v143 = *(int *)(v14 + 28);
            uint64_t v144 = (void *)(v94 + v143);
            uint64_t v145 = &v95[v143];
            uint64_t v146 = sub_23309B300();
            uint64_t v160 = *(void *)(v146 - 8);
            uint64_t v147 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v160 + 48);
            uint64_t v173 = v144;
            LODWORD(v144) = v147(v144, 1, v146);
            int v148 = v147(v145, 1, v146);
            if (v144)
            {
              if (!v148)
              {
                (*(void (**)(void *, char *, uint64_t))(v160 + 32))(v173, v145, v146);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v173, 0, 1, v146);
                goto LABEL_112;
              }
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v150 = *(void *)(*(void *)(v149 - 8) + 64);
              uint64_t v151 = v173;
            }
            else
            {
              if (!v148)
              {
                (*(void (**)(void *, char *, uint64_t))(v160 + 40))(v173, v145, v146);
                goto LABEL_112;
              }
              (*(void (**)(void *, uint64_t))(v160 + 8))(v173, v146);
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v150 = *(void *)(*(void *)(v152 - 8) + 64);
              uint64_t v151 = v173;
            }
            memcpy(v151, v145, v150);
LABEL_112:
            a3 = v168;
            uint64_t v153 = *(int *)(v14 + 32);
            uint64_t v154 = (void *)(v94 + v153);
            int v155 = &v95[v153];
            uint64_t v157 = *(void *)v155;
            uint64_t v156 = *((void *)v155 + 1);
            *uint64_t v154 = v157;
            v154[1] = v156;
            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
          sub_232F0434C(v94 + 24);
        }
        long long v107 = *(_OWORD *)(v95 + 40);
        *(_OWORD *)(v94 + 24) = *(_OWORD *)(v95 + 24);
        *(_OWORD *)(v94 + 40) = v107;
        *(void *)(v94 + 56) = *((void *)v95 + 7);
        goto LABEL_104;
      }
LABEL_40:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v44, v45, *(void *)(*(void *)(v67 - 8) + 64));
      goto LABEL_66;
    }
    if (v54)
    {
      sub_232F7CB8C(v44, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_40;
    }
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
    uint64_t v167 = a3;
    if (*(void *)(v44 + 56) != 1)
    {
      uint64_t v77 = *((void *)v45 + 7);
      if (v77 != 1)
      {
        *(unsigned char *)(v44 + 24) = v45[24];
        *(_WORD *)(v44 + 25) = *(_WORD *)(v45 + 25);
        *(_DWORD *)(v44 + 28) = *((_DWORD *)v45 + 7);
        *(_OWORD *)(v44 + 32) = *((_OWORD *)v45 + 2);
        *(void *)(v44 + 48) = *((void *)v45 + 6);
        *(void *)(v44 + 56) = v77;
        swift_bridgeObjectRelease();
LABEL_57:
        uint64_t v79 = *(int *)(v14 + 28);
        uint64_t v80 = (void *)(v44 + v79);
        uint64_t v172 = &v45[v79];
        uint64_t v81 = sub_23309B300();
        uint64_t v159 = *(void *)(v81 - 8);
        uint64_t v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v159 + 48);
        __srca = v80;
        LODWORD(v80) = v82(v80, 1, v81);
        int v83 = v82(v172, 1, v81);
        if (v80)
        {
          if (!v83)
          {
            (*(void (**)(void *, char *, uint64_t))(v159 + 32))(__srca, v172, v81);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v159 + 56))(__srca, 0, 1, v81);
            goto LABEL_65;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v85 = *(void *)(*(void *)(v84 - 8) + 64);
          long long v86 = __srca;
        }
        else
        {
          if (!v83)
          {
            (*(void (**)(void *, char *, uint64_t))(v159 + 40))(__srca, v172, v81);
            goto LABEL_65;
          }
          (*(void (**)(void *, uint64_t))(v159 + 8))(__srca, v81);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v85 = *(void *)(*(void *)(v87 - 8) + 64);
          long long v86 = __srca;
        }
        memcpy(v86, v172, v85);
LABEL_65:
        uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
        uint64_t v88 = *(int *)(v14 + 32);
        uint64_t v89 = (void *)(v44 + v88);
        uint64_t v90 = &v45[v88];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        *uint64_t v89 = v92;
        v89[1] = v91;
        swift_bridgeObjectRelease();
        a3 = v167;
        goto LABEL_66;
      }
      sub_232F0434C(v44 + 24);
    }
    long long v78 = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = v78;
    *(void *)(v44 + 56) = *((void *)v45 + 7);
    goto LABEL_57;
  }
  if (v49)
  {
LABEL_30:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
LABEL_31:
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
    goto LABEL_79;
  }
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  if (v176(v45, 1, v14))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v44, v45, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    long long v165 = a3;
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *(void *)(v44 + 56) = *((void *)v45 + 7);
    uint64_t v61 = *(int *)(v14 + 28);
    int v62 = (void *)(v44 + v61);
    uint64_t v63 = &v45[v61];
    uint64_t v64 = sub_23309B300();
    uint64_t v65 = *(void *)(v64 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
    }
    *(_OWORD *)(v44 + *(int *)(v14 + 32)) = *(_OWORD *)&v45[*(int *)(v14 + 32)];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v44, 0, 1, v14);
    a3 = v165;
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  }
  uint64_t v68 = *(int *)(v46 + 20);
  uint64_t v69 = (char *)(v44 + v68);
  long long v70 = &v45[v68];
  if (v50((uint64_t)v70, 1, v14))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    char *v69 = *v70;
    *((void *)v69 + 1) = *((void *)v70 + 1);
    *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
    *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
    *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
    *((void *)v69 + 7) = *((void *)v70 + 7);
    uint64_t v72 = *(int *)(v14 + 28);
    __src = &v69[v72];
    long long v166 = a3;
    uint64_t v73 = &v70[v72];
    uint64_t v74 = sub_23309B300();
    uint64_t v75 = *(void *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v73, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(__src, v73, v74);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(__src, 0, 1, v74);
    }
    a3 = v166;
    *(_OWORD *)&v69[*(int *)(v14 + 32)] = *(_OWORD *)&v70[*(int *)(v14 + 32)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(v69, 0, 1, v14);
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v171[7])(v44, 0, 1, v46);
LABEL_79:
  uint64_t v108 = a3[11];
  uint64_t v109 = (uint64_t)a1 + v108;
  uint64_t v110 = (char *)a2 + v108;
  int v111 = v50((uint64_t)a1 + v108, 1, v14);
  int v112 = v50((uint64_t)v110, 1, v14);
  if (!v111)
  {
    if (v112)
    {
      sub_232F7CB8C(v109, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_85;
    }
    *(unsigned char *)uint64_t v109 = *v110;
    *(void *)(v109 + 8) = *((void *)v110 + 1);
    *(_DWORD *)(v109 + 16) = *((_DWORD *)v110 + 4);
    uint64_t v169 = a3;
    if (*(void *)(v109 + 56) != 1)
    {
      uint64_t v120 = *((void *)v110 + 7);
      if (v120 != 1)
      {
        *(unsigned char *)(v109 + 24) = v110[24];
        *(_WORD *)(v109 + 25) = *(_WORD *)(v110 + 25);
        *(_DWORD *)(v109 + 28) = *((_DWORD *)v110 + 7);
        *(_OWORD *)(v109 + 32) = *((_OWORD *)v110 + 2);
        *(void *)(v109 + 48) = *((void *)v110 + 6);
        *(void *)(v109 + 56) = v120;
        swift_bridgeObjectRelease();
LABEL_93:
        uint64_t v122 = *(int *)(v14 + 28);
        uint64_t v123 = (void *)(v109 + v122);
        uint64_t v124 = &v110[v122];
        uint64_t v125 = sub_23309B300();
        uint64_t v175 = *(void *)(v125 - 8);
        long long v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v175 + 48);
        uint64_t v177 = v123;
        LODWORD(v123) = v126(v123, 1, v125);
        int v127 = v126(v124, 1, v125);
        if (v123)
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v175 + 32))(v177, v124, v125);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v177, 0, 1, v125);
            goto LABEL_101;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
          int v130 = v177;
        }
        else
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v175 + 40))(v177, v124, v125);
            goto LABEL_101;
          }
          (*(void (**)(void *, uint64_t))(v175 + 8))(v177, v125);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
          int v130 = v177;
        }
        memcpy(v130, v124, v129);
LABEL_101:
        a3 = v169;
        uint64_t v132 = *(int *)(v14 + 32);
        long long v133 = (void *)(v109 + v132);
        long long v134 = &v110[v132];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        *long long v133 = v136;
        v133[1] = v135;
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
      sub_232F0434C(v109 + 24);
    }
    long long v121 = *(_OWORD *)(v110 + 40);
    *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
    *(_OWORD *)(v109 + 40) = v121;
    *(void *)(v109 + 56) = *((void *)v110 + 7);
    goto LABEL_93;
  }
  if (v112)
  {
LABEL_85:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v109, v110, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_102;
  }
  *(unsigned char *)uint64_t v109 = *v110;
  *(void *)(v109 + 8) = *((void *)v110 + 1);
  *(_DWORD *)(v109 + 16) = *((_DWORD *)v110 + 4);
  *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
  *(_OWORD *)(v109 + 40) = *(_OWORD *)(v110 + 40);
  *(void *)(v109 + 56) = *((void *)v110 + 7);
  uint64_t v113 = *(int *)(v14 + 28);
  long long v114 = (void *)(v109 + v113);
  uint64_t v115 = &v110[v113];
  uint64_t v116 = sub_23309B300();
  uint64_t v117 = *(void *)(v116 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v117 + 32))(v114, v115, v116);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  *(_OWORD *)(v109 + *(int *)(v14 + 32)) = *(_OWORD *)&v110[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v109, 0, 1, v14);
LABEL_102:
  uint64_t v137 = a3[12];
  uint64_t v138 = (void *)((char *)a1 + v137);
  long long v139 = (void *)((char *)a2 + v137);
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FC30A8);
}

uint64_t sub_232FC30A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.DiagnosticReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FC3248);
}

uint64_t sub_232FC3248(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_232FC33D4()
{
  sub_232F7CA40(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232F7CA40(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsDSTU2.Immunization(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1) {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    a1[6] = v11;
    uint64_t v12 = a3[8];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for FHIRDateTime();
    uint64_t v16 = *(void *)(v15 - 8);
    int v17 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v13 = *v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
      uint64_t v20 = *((void *)v14 + 7);
      if (v20 == 1)
      {
        long long v21 = *(_OWORD *)(v14 + 40);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
        *(_OWORD *)(v13 + 40) = v21;
        *((void *)v13 + 7) = *((void *)v14 + 7);
      }
      else
      {
        v13[24] = v14[24];
        *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
        *(_OWORD *)(v13 + 28) = *(_OWORD *)(v14 + 28);
        *((_DWORD *)v13 + 11) = *((_DWORD *)v14 + 11);
        *((void *)v13 + 6) = *((void *)v14 + 6);
        *((void *)v13 + 7) = v20;
        swift_bridgeObjectRetain();
      }
      uint64_t v22 = *(int *)(v15 + 28);
      __dst = &v13[v22];
      uint64_t v23 = &v14[v22];
      uint64_t v24 = sub_23309B300();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(__dst, v23, v24);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      uint64_t v27 = *(int *)(v15 + 32);
      uint64_t v28 = &v13[v27];
      uint64_t v29 = &v14[v27];
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56);
      swift_bridgeObjectRetain();
      v31(v13, 0, 1, v15);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = a3[10];
    uint64_t v34 = (void *)((char *)a1 + v32);
    size_t v35 = (void *)((char *)a2 + v32);
    *uint64_t v34 = *v35;
    *(void *)((char *)v34 + 5) = *(void *)((char *)v35 + 5);
    *(void *)((char *)a1 + v33) = *(void *)((char *)a2 + v33);
    uint64_t v36 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
    uint64_t v37 = a3[13];
    uint64_t v38 = a3[14];
    uint64_t v39 = (void *)((char *)a1 + v37);
    uint64_t v40 = (void *)((char *)a2 + v37);
    uint64_t v41 = v40[1];
    void *v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = v40[2];
    LOBYTE(v40) = *((unsigned char *)a2 + v38);
    v39[2] = v42;
    *((unsigned char *)a1 + v38) = (_BYTE)v40;
    uint64_t v119 = a3;
    uint64_t v43 = a3[15];
    uint64_t v44 = (void *)((char *)a1 + v43);
    uint64_t v45 = (void *)((char *)a2 + v43);
    uint64_t v46 = type metadata accessor for Reference();
    __dsta = *(void **)(v46 - 8);
    uint64_t v47 = (unsigned int (*)(void, void, void))__dsta[6];
    int v48 = (int *)v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v47(v45, 1, v48))
    {
      sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
      uint64_t v50 = v119;
    }
    else
    {
      long long v114 = v48;
      uint64_t v51 = v45[1];
      void *v44 = *v45;
      v44[1] = v51;
      uint64_t v52 = v45[3];
      v44[2] = v45[2];
      v44[3] = v52;
      uint64_t v53 = v48[6];
      int v111 = v47;
      int v112 = (void *)((char *)v44 + v53);
      int v54 = (void *)((char *)v45 + v53);
      uint64_t v55 = type metadata accessor for Identifier();
      uint64_t v56 = *(void *)(v55 - 8);
      int v57 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v56 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = v44;
      if (v57(v54, 1, v55))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v112, v54, *(void *)(*(void *)(v59 - 8) + 64));
        uint64_t v47 = v111;
        uint64_t v50 = v119;
      }
      else
      {
        uint64_t v108 = v56;
        uint64_t v110 = v55;
        uint64_t v60 = v54[1];
        *int v112 = *v54;
        v112[1] = v60;
        uint64_t v61 = v54[3];
        swift_bridgeObjectRetain();
        uint64_t v50 = v119;
        uint64_t v109 = v58;
        if (v61 == 1)
        {
          *((_OWORD *)v112 + 1) = *((_OWORD *)v54 + 1);
          v112[4] = v54[4];
        }
        else
        {
          v112[2] = v54[2];
          v112[3] = v61;
          v112[4] = v54[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v47 = v111;
        uint64_t v62 = *(int *)(v55 + 24);
        uint64_t v63 = (char *)v112 + v62;
        uint64_t v64 = (char *)v54 + v62;
        uint64_t v65 = sub_23309AF80();
        uint64_t v66 = *(void *)(v65 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
        }
        uint64_t v58 = v109;
        uint64_t v68 = *(int *)(v110 + 28);
        uint64_t v69 = (void *)((char *)v112 + v68);
        long long v70 = (void *)((char *)v54 + v68);
        uint64_t v71 = v70[1];
        void *v69 = *v70;
        v69[1] = v71;
        uint64_t v72 = *(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56);
        swift_bridgeObjectRetain();
        v72(v112, 0, 1, v110);
      }
      int v48 = v114;
      ((void (*)(void *, void, uint64_t, int *))__dsta[7])(v58, 0, 1, v114);
    }
    uint64_t v73 = v50[16];
    uint64_t v74 = v50[17];
    uint64_t v75 = (void *)((char *)a1 + v73);
    uint64_t v76 = (void *)((char *)a2 + v73);
    uint64_t v77 = v76[1];
    *uint64_t v75 = *v76;
    v75[1] = v77;
    long long v78 = (void *)((char *)a1 + v74);
    uint64_t v79 = (void *)((char *)a2 + v74);
    swift_bridgeObjectRetain();
    if (v47(v79, 1, v48))
    {
      sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    }
    else
    {
      uint64_t v81 = v79[1];
      void *v78 = *v79;
      v78[1] = v81;
      uint64_t v82 = v79[3];
      v78[2] = v79[2];
      v78[3] = v82;
      uint64_t v113 = v78;
      uint64_t v115 = v48;
      uint64_t v83 = v48[6];
      uint64_t v84 = (void *)((char *)v78 + v83);
      size_t v85 = (void *)((char *)v79 + v83);
      uint64_t v86 = type metadata accessor for Identifier();
      uint64_t v87 = *(void *)(v86 - 8);
      uint64_t v88 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v87 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v88(v85, 1, v86))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v84, v85, *(void *)(*(void *)(v89 - 8) + 64));
        uint64_t v90 = v115;
      }
      else
      {
        uint64_t v91 = v85[1];
        void *v84 = *v85;
        v84[1] = v91;
        uint64_t v92 = v85[3];
        swift_bridgeObjectRetain();
        if (v92 == 1)
        {
          *((_OWORD *)v84 + 1) = *((_OWORD *)v85 + 1);
          v84[4] = v85[4];
        }
        else
        {
          v84[2] = v85[2];
          v84[3] = v92;
          v84[4] = v85[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v90 = v115;
        uint64_t v93 = *(int *)(v86 + 24);
        uint64_t v116 = (char *)v84 + v93;
        uint64_t v94 = (char *)v85 + v93;
        uint64_t v95 = sub_23309AF80();
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v116, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v116, v94, v95);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v116, 0, 1, v95);
        }
        uint64_t v98 = *(int *)(v86 + 28);
        uint64_t v99 = (void *)((char *)v84 + v98);
        long long v100 = (void *)((char *)v85 + v98);
        uint64_t v101 = v100[1];
        *uint64_t v99 = *v100;
        v99[1] = v101;
        uint64_t v102 = *(void (**)(void *, void, uint64_t, uint64_t))(v87 + 56);
        swift_bridgeObjectRetain();
        v102(v84, 0, 1, v86);
      }
      ((void (*)(void *, void, uint64_t, int *))__dsta[7])(v113, 0, 1, v90);
      uint64_t v50 = v119;
    }
    uint64_t v103 = v50[18];
    uint64_t v104 = (void *)((char *)a1 + v103);
    uint64_t v105 = (void *)((char *)a2 + v103);
    uint64_t v106 = v105[1];
    *uint64_t v104 = *v105;
    v104[1] = v106;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Immunization(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v6 = v4 + *(int *)(v5 + 28);
    uint64_t v7 = sub_23309B300();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[15];
  uint64_t v10 = type metadata accessor for Reference();
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v9 + *(int *)(v10 + 24);
    uint64_t v13 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v12 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v14 = v12 + *(int *)(v13 + 24);
      uint64_t v15 = sub_23309AF80();
      uint64_t v16 = *(void *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = a1 + a2[17];
  if (!v11(v17, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = v17 + *(int *)(v10 + 24);
    uint64_t v19 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v18 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = v18 + *(int *)(v19 + 24);
      uint64_t v21 = sub_23309AF80();
      uint64_t v22 = *(void *)(v21 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      }
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsDSTU2.Immunization(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    unsigned char *v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
    uint64_t v18 = *((void *)v13 + 7);
    if (v18 == 1)
    {
      long long v19 = *(_OWORD *)(v13 + 40);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v12 + 40) = v19;
      *((void *)v12 + 7) = *((void *)v13 + 7);
    }
    else
    {
      v12[24] = v13[24];
      *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
      *(_OWORD *)(v12 + 28) = *(_OWORD *)(v13 + 28);
      *((_DWORD *)v12 + 11) = *((_DWORD *)v13 + 11);
      *((void *)v12 + 6) = *((void *)v13 + 6);
      *((void *)v12 + 7) = v18;
      swift_bridgeObjectRetain();
    }
    uint64_t v20 = *(int *)(v14 + 28);
    __dst = &v12[v20];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = sub_23309B300();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    uint64_t v25 = *(int *)(v14 + 32);
    uint64_t v26 = &v12[v25];
    uint64_t v27 = &v13[v25];
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56);
    swift_bridgeObjectRetain();
    v29(v12, 0, 1, v14);
  }
  uint64_t v30 = a3[9];
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)((char *)a1 + v30);
  uint64_t v33 = (void *)((char *)a2 + v30);
  *uint64_t v32 = *v33;
  *(void *)((char *)v32 + 5) = *(void *)((char *)v33 + 5);
  *(void *)((char *)a1 + v31) = *(void *)((char *)a2 + v31);
  uint64_t v34 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + v34) = *(void *)((char *)a2 + v34);
  uint64_t v35 = a3[13];
  uint64_t v36 = a3[14];
  uint64_t v37 = (void *)((char *)a1 + v35);
  uint64_t v38 = (void *)((char *)a2 + v35);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = v38[2];
  LOBYTE(v38) = *((unsigned char *)a2 + v36);
  v37[2] = v40;
  *((unsigned char *)a1 + v36) = (_BYTE)v38;
  uint64_t v115 = a3;
  uint64_t v41 = a3[15];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v44 = type metadata accessor for Reference();
  __dsta = *(void **)(v44 - 8);
  uint64_t v45 = (unsigned int (*)(void, void, void))__dsta[6];
  uint64_t v46 = (int *)v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45(v43, 1, v46))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    int v48 = v115;
  }
  else
  {
    uint64_t v110 = v46;
    uint64_t v49 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v49;
    uint64_t v50 = v43[3];
    v42[2] = v43[2];
    v42[3] = v50;
    uint64_t v51 = v46[6];
    long long v107 = v45;
    uint64_t v108 = (void *)((char *)v42 + v51);
    uint64_t v52 = (void *)((char *)v43 + v51);
    uint64_t v53 = type metadata accessor for Identifier();
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v55 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v56 = v42;
    if (v55(v52, 1, v53))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v108, v52, *(void *)(*(void *)(v57 - 8) + 64));
      uint64_t v45 = v107;
      int v48 = v115;
    }
    else
    {
      uint64_t v105 = v54;
      uint64_t v58 = v52[1];
      *uint64_t v108 = *v52;
      v108[1] = v58;
      uint64_t v59 = v52[3];
      swift_bridgeObjectRetain();
      int v48 = v115;
      uint64_t v106 = v56;
      if (v59 == 1)
      {
        *((_OWORD *)v108 + 1) = *((_OWORD *)v52 + 1);
        v108[4] = v52[4];
      }
      else
      {
        v108[2] = v52[2];
        v108[3] = v59;
        v108[4] = v52[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v45 = v107;
      uint64_t v60 = *(int *)(v53 + 24);
      uint64_t v61 = (char *)v108 + v60;
      uint64_t v62 = (char *)v52 + v60;
      uint64_t v63 = sub_23309AF80();
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      uint64_t v56 = v106;
      uint64_t v66 = *(int *)(v53 + 28);
      uint64_t v67 = (void *)((char *)v108 + v66);
      uint64_t v68 = (void *)((char *)v52 + v66);
      uint64_t v69 = v68[1];
      *uint64_t v67 = *v68;
      v67[1] = v69;
      long long v70 = *(void (**)(void *, void, uint64_t, uint64_t))(v105 + 56);
      swift_bridgeObjectRetain();
      v70(v108, 0, 1, v53);
    }
    uint64_t v46 = v110;
    ((void (*)(void *, void, uint64_t, int *))__dsta[7])(v56, 0, 1, v110);
  }
  uint64_t v71 = v48[16];
  uint64_t v72 = v48[17];
  uint64_t v73 = (void *)((char *)a1 + v71);
  uint64_t v74 = (void *)((char *)a2 + v71);
  uint64_t v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  uint64_t v76 = (void *)((char *)a1 + v72);
  uint64_t v77 = (void *)((char *)a2 + v72);
  swift_bridgeObjectRetain();
  if (v45(v77, 1, v46))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    uint64_t v79 = v77[1];
    *uint64_t v76 = *v77;
    v76[1] = v79;
    uint64_t v80 = v77[3];
    v76[2] = v77[2];
    v76[3] = v80;
    uint64_t v81 = v46[6];
    uint64_t v109 = (void *)((char *)v76 + v81);
    int v111 = v46;
    uint64_t v82 = (void *)((char *)v77 + v81);
    uint64_t v83 = type metadata accessor for Identifier();
    uint64_t v84 = *(void *)(v83 - 8);
    size_t v85 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v84 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v85(v82, 1, v83))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v109, v82, *(void *)(*(void *)(v86 - 8) + 64));
      uint64_t v87 = v111;
    }
    else
    {
      uint64_t v88 = v82[1];
      *uint64_t v109 = *v82;
      v109[1] = v88;
      uint64_t v89 = v82[3];
      swift_bridgeObjectRetain();
      if (v89 == 1)
      {
        *((_OWORD *)v109 + 1) = *((_OWORD *)v82 + 1);
        v109[4] = v82[4];
      }
      else
      {
        v109[2] = v82[2];
        v109[3] = v89;
        v109[4] = v82[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v87 = v111;
      uint64_t v90 = *(int *)(v83 + 24);
      int v112 = (char *)v109 + v90;
      uint64_t v91 = (char *)v82 + v90;
      uint64_t v92 = sub_23309AF80();
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v112, v91, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v112, v91, v92);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v112, 0, 1, v92);
      }
      uint64_t v95 = *(int *)(v83 + 28);
      uint64_t v96 = (void *)((char *)v109 + v95);
      uint64_t v97 = (void *)((char *)v82 + v95);
      uint64_t v98 = v97[1];
      void *v96 = *v97;
      v96[1] = v98;
      uint64_t v99 = *(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56);
      swift_bridgeObjectRetain();
      v99(v109, 0, 1, v83);
    }
    ((void (*)(void *, void, uint64_t, int *))__dsta[7])(v76, 0, 1, v87);
    int v48 = v115;
  }
  uint64_t v100 = v48[18];
  uint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = (void *)((char *)a2 + v100);
  uint64_t v103 = v102[1];
  *uint64_t v101 = *v102;
  v101[1] = v103;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsDSTU2.Immunization(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 4;
  uint64_t v7 = a2[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(a1 + 4));
      uint64_t v8 = a2[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(void, void, void))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  long long v227 = a3;
  if (!v15)
  {
    if (v16)
    {
      sub_232F7CB8C(v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_15;
    }
    *(unsigned char *)uint64_t v10 = *v11;
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    uint64_t v21 = (long long *)(v10 + 24);
    uint64_t v22 = (long long *)(v11 + 24);
    uint64_t v23 = *((void *)v11 + 7);
    if (*(void *)(v10 + 56) == 1)
    {
      if (v23 == 1)
      {
        long long v24 = *v22;
        long long v25 = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        *uint64_t v21 = v24;
        *(_OWORD *)(v10 + 40) = v25;
      }
      else
      {
        *(unsigned char *)(v10 + 24) = v11[24];
        *(unsigned char *)(v10 + 25) = v11[25];
        *(unsigned char *)(v10 + 26) = v11[26];
        long long v39 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v39;
        *(void *)(v10 + 48) = *((void *)v11 + 6);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v23 == 1)
    {
      sub_232F0434C(v10 + 24);
      uint64_t v37 = *((void *)v11 + 7);
      long long v38 = *(_OWORD *)(v11 + 40);
      *uint64_t v21 = *v22;
      *(_OWORD *)(v10 + 40) = v38;
      *(void *)(v10 + 56) = v37;
    }
    else
    {
      *(unsigned char *)(v10 + 24) = v11[24];
      *(unsigned char *)(v10 + 25) = v11[25];
      *(unsigned char *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(void *)(v10 + 48) = *((void *)v11 + 6);
      *(void *)(v10 + 56) = *((void *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = *(int *)(v12 + 28);
    uint64_t v41 = (void *)(v10 + v40);
    uint64_t v42 = &v11[v40];
    uint64_t v43 = sub_23309B300();
    uint64_t v214 = *(void **)(v43 - 8);
    uint64_t v44 = (uint64_t (*)(void, void, void))v214[6];
    int v223 = v41;
    LODWORD(v41) = v44(v41, 1, v43);
    int v45 = v44(v42, 1, v43);
    if (v41)
    {
      if (!v45)
      {
        ((void (*)(void *, char *, uint64_t))v214[2])(v223, v42, v43);
        ((void (*)(void *, void, uint64_t, uint64_t))v214[7])(v223, 0, 1, v43);
        goto LABEL_36;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
      int v48 = v223;
    }
    else
    {
      if (!v45)
      {
        ((void (*)(void *, char *, uint64_t))v214[3])(v223, v42, v43);
        goto LABEL_36;
      }
      ((void (*)(void *, uint64_t))v214[1])(v223, v43);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v47 = *(void *)(*(void *)(v49 - 8) + 64);
      int v48 = v223;
    }
    memcpy(v48, v42, v47);
LABEL_36:
    a3 = v227;
    uint64_t v50 = *(int *)(v12 + 32);
    uint64_t v51 = (void *)(v10 + v50);
    uint64_t v52 = &v11[v50];
    *uint64_t v51 = *(void *)v52;
    v51[1] = *((void *)v52 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v16)
  {
LABEL_15:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v10, v11, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_37;
  }
  *(unsigned char *)uint64_t v10 = *v11;
  uint64_t v17 = *((void *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(void *)(v10 + 8) = v17;
  if (*((void *)v11 + 7) == 1)
  {
    long long v18 = *(_OWORD *)(v11 + 24);
    long long v19 = *(_OWORD *)(v11 + 40);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v18;
    *(_OWORD *)(v10 + 40) = v19;
  }
  else
  {
    *(unsigned char *)(v10 + 24) = v11[24];
    *(unsigned char *)(v10 + 25) = v11[25];
    *(unsigned char *)(v10 + 26) = v11[26];
    long long v26 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v26;
    *(void *)(v10 + 48) = *((void *)v11 + 6);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = *(int *)(v12 + 28);
  uint64_t v28 = (void *)(v10 + v27);
  uint64_t v29 = &v11[v27];
  uint64_t v30 = sub_23309B300();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  a3 = v227;
  uint64_t v33 = *(int *)(v12 + 32);
  uint64_t v34 = (void *)(v10 + v33);
  uint64_t v35 = &v11[v33];
  *uint64_t v34 = *(void *)v35;
  v34[1] = *((void *)v35 + 1);
  uint64_t v36 = *(void (**)(void, void, void, void))(v13 + 56);
  swift_bridgeObjectRetain();
  v36(v10, 0, 1, v12);
LABEL_37:
  uint64_t v53 = a3[9];
  uint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v56 = *v55;
  *(void *)((char *)v54 + 5) = *(uint64_t *)((char *)v55 + 5);
  *uint64_t v54 = v56;
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[13];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (char *)a2 + v57;
  *uint64_t v58 = *(void *)((char *)a2 + v57);
  v58[1] = *(void *)((char *)a2 + v57 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58[2] = *((void *)v59 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v60 = a3[15];
  uint64_t v61 = (long long *)((char *)a1 + v60);
  uint64_t v62 = (void *)((char *)a2 + v60);
  uint64_t v63 = type metadata accessor for Reference();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = *(uint64_t (**)(void, void, void))(v64 + 48);
  int v66 = v65(v61, 1, v63);
  int v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      uint64_t v215 = v65;
      __src = (void *)v63;
      uint64_t v224 = v64;
      *(void *)uint64_t v61 = *v62;
      *((void *)v61 + 1) = v62[1];
      *((void *)v61 + 2) = v62[2];
      *((void *)v61 + 3) = v62[3];
      uint64_t v68 = *(int *)(v63 + 24);
      __dst = (void *)((char *)v61 + v68);
      uint64_t v69 = (void *)((char *)v62 + v68);
      uint64_t v70 = type metadata accessor for Identifier();
      uint64_t v71 = *(void *)(v70 - 8);
      uint64_t v72 = *(unsigned int (**)(void, void, void))(v71 + 48);
      uint64_t v73 = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v72(v69, 1, v70))
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(__dst, v69, *(void *)(*(void *)(v74 - 8) + 64));
        uint64_t v64 = v224;
        a3 = v227;
        uint64_t v65 = (uint64_t (*)(void, void, void))v215;
      }
      else
      {
        void *__dst = *v69;
        __dst[1] = v69[1];
        uint64_t v87 = v69[3];
        swift_bridgeObjectRetain();
        if (v87 == 1)
        {
          long long v88 = *((_OWORD *)v69 + 1);
          __dst[4] = v69[4];
          *((_OWORD *)__dst + 1) = v88;
        }
        else
        {
          __dst[2] = v69[2];
          __dst[3] = v69[3];
          __dst[4] = v69[4];
          swift_bridgeObjectRetain();
          uint64_t v73 = v69;
          swift_bridgeObjectRetain();
        }
        uint64_t v90 = v70;
        uint64_t v91 = *(int *)(v70 + 24);
        uint64_t v92 = (char *)__dst + v91;
        uint64_t v93 = (char *)v73 + v91;
        uint64_t v94 = sub_23309AF80();
        uint64_t v95 = *(void *)(v94 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        }
        uint64_t v64 = v224;
        a3 = v227;
        uint64_t v65 = (uint64_t (*)(void, void, void))v215;
        uint64_t v99 = *(int *)(v90 + 28);
        uint64_t v100 = (void *)((char *)__dst + v99);
        uint64_t v101 = (void *)((char *)v69 + v99);
        *uint64_t v100 = *v101;
        v100[1] = v101[1];
        uint64_t v102 = *(void (**)(void, void, void, void))(v71 + 56);
        swift_bridgeObjectRetain();
        v102(__dst, 0, 1, v90);
      }
      uint64_t v63 = (uint64_t)__src;
      (*(void (**)(long long *, void, uint64_t, void *))(v64 + 56))(v61, 0, 1, __src);
      goto LABEL_69;
    }
    goto LABEL_43;
  }
  if (v67)
  {
    sub_232F7CB8C((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_43:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v76 = *(void *)(*(void *)(v75 - 8) + 64);
    uint64_t v77 = v61;
    uint64_t v78 = v62;
LABEL_44:
    memcpy(v77, v78, v76);
    goto LABEL_69;
  }
  long long v216 = v65;
  uint64_t v225 = v64;
  *(void *)uint64_t v61 = *v62;
  *((void *)v61 + 1) = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v61 + 2) = v62[2];
  *((void *)v61 + 3) = v62[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v79 = *(int *)(v63 + 24);
  uint64_t v80 = (long long *)((char *)v61 + v79);
  uint64_t v81 = (void *)((char *)v62 + v79);
  uint64_t v82 = type metadata accessor for Identifier();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = *(uint64_t (**)(void, void, void))(v83 + 48);
  uint64_t v212 = v80;
  LODWORD(v80) = v84(v80, 1, v82);
  __srca = (char *)v81;
  int v85 = v84(v81, 1, v82);
  if (!v80)
  {
    uint64_t v64 = v225;
    a3 = v227;
    uint64_t v65 = (uint64_t (*)(void, void, void))v216;
    if (v85)
    {
      sub_232F7CB8C((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v76 = *(void *)(*(void *)(v89 - 8) + 64);
      uint64_t v77 = v212;
      uint64_t v78 = v81;
      goto LABEL_44;
    }
    *(void *)uint64_t v212 = *v81;
    *((void *)v212 + 1) = v81[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v103 = v212 + 1;
    uint64_t v104 = (long long *)(v81 + 2);
    uint64_t v105 = v81[3];
    if (*((void *)v212 + 3) == 1)
    {
      if (v105 == 1)
      {
        long long v106 = *v104;
        *((void *)v212 + 4) = v81[4];
        *uint64_t v103 = v106;
      }
      else
      {
        *((void *)v212 + 2) = v81[2];
        *((void *)v212 + 3) = v81[3];
        *((void *)v212 + 4) = v81[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v105 == 1)
    {
      sub_232F042F8((uint64_t)(v212 + 1));
      uint64_t v179 = v81[4];
      *uint64_t v103 = *v104;
      *((void *)v212 + 4) = v179;
    }
    else
    {
      *((void *)v212 + 2) = v81[2];
      *((void *)v212 + 3) = v81[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v212 + 4) = v81[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v181 = *(int *)(v82 + 24);
    uint64_t v182 = (char *)v212 + v181;
    uint64_t v183 = (char *)v81 + v181;
    uint64_t v184 = sub_23309AF80();
    uint64_t v208 = *(void *)(v184 - 8);
    uint64_t v185 = *(uint64_t (**)(void, void, void))(v208 + 48);
    __dstb = v182;
    LODWORD(v182) = v185(v182, 1, v184);
    int v186 = v185(v183, 1, v184);
    if (v182)
    {
      if (!v186)
      {
        (*(void (**)(void *, char *, uint64_t))(v208 + 16))(__dstb, v183, v184);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v208 + 56))(__dstb, 0, 1, v184);
        goto LABEL_124;
      }
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v188 = *(void *)(*(void *)(v187 - 8) + 64);
      uint64_t v189 = __dstb;
    }
    else
    {
      if (!v186)
      {
        (*(void (**)(void *, char *, uint64_t))(v208 + 24))(__dstb, v183, v184);
        goto LABEL_124;
      }
      (*(void (**)(void *, uint64_t))(v208 + 8))(__dstb, v184);
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v188 = *(void *)(*(void *)(v190 - 8) + 64);
      uint64_t v189 = __dstb;
    }
    memcpy(v189, v183, v188);
LABEL_124:
    uint64_t v64 = v225;
    uint64_t v65 = (uint64_t (*)(void, void, void))v216;
    uint64_t v201 = *(int *)(v82 + 28);
    uint64_t v202 = (void *)((char *)v212 + v201);
    uint64_t v203 = &__srca[v201];
    void *v202 = *(void *)v203;
    v202[1] = *((void *)v203 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v227;
    goto LABEL_69;
  }
  a3 = v227;
  if (v85)
  {
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v212, v81, *(void *)(*(void *)(v86 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v212 = *v81;
    *((void *)v212 + 1) = v81[1];
    uint64_t v97 = v81[3];
    swift_bridgeObjectRetain();
    if (v97 == 1)
    {
      long long v98 = *((_OWORD *)v81 + 1);
      *((void *)v212 + 4) = v81[4];
      v212[1] = v98;
    }
    else
    {
      *((void *)v212 + 2) = v81[2];
      *((void *)v212 + 3) = v81[3];
      *((void *)v212 + 4) = v81[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    long long v107 = v81;
    uint64_t v207 = v82;
    uint64_t v108 = *(int *)(v82 + 24);
    __dsta = (char *)v212 + v108;
    uint64_t v109 = (char *)v81 + v108;
    uint64_t v110 = sub_23309AF80();
    uint64_t v111 = *(void *)(v110 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v109, *(void *)(*(void *)(v112 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(__dsta, v109, v110);
      long long v107 = v81;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(__dsta, 0, 1, v110);
    }
    a3 = v227;
    uint64_t v113 = *(int *)(v207 + 28);
    long long v114 = (void *)((char *)v212 + v113);
    uint64_t v115 = (void *)((char *)v107 + v113);
    void *v114 = *v115;
    v114[1] = v115[1];
    uint64_t v116 = *(void (**)(void, void, void, void))(v83 + 56);
    swift_bridgeObjectRetain();
    v116(v212, 0, 1, v207);
  }
  uint64_t v64 = v225;
  uint64_t v65 = (uint64_t (*)(void, void, void))v216;
LABEL_69:
  uint64_t v117 = a3[16];
  uint64_t v118 = (void *)((char *)a1 + v117);
  uint64_t v119 = (void *)((char *)a2 + v117);
  void *v118 = *v119;
  v118[1] = v119[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v120 = a3[17];
  long long v121 = (void *)((char *)a1 + v120);
  uint64_t v122 = (void *)((char *)a2 + v120);
  int v123 = v65((char *)a1 + v120, 1, v63);
  int v124 = v65(v122, 1, v63);
  if (!v123)
  {
    if (v124)
    {
      sub_232F7CB8C((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_75;
    }
    *long long v121 = *v122;
    v121[1] = v122[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v121[2] = v122[2];
    v121[3] = v122[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v138 = *(int *)(v63 + 24);
    uint64_t v139 = (uint64_t)v121 + v138;
    uint64_t v140 = (char *)v122 + v138;
    uint64_t v141 = type metadata accessor for Identifier();
    uint64_t v142 = *(void *)(v141 - 8);
    uint64_t v143 = *(uint64_t (**)(void, void, void))(v142 + 48);
    int v144 = v143(v139, 1, v141);
    int v145 = v143(v140, 1, v141);
    if (v144)
    {
      if (!v145)
      {
        *(void *)uint64_t v139 = *(void *)v140;
        *(void *)(v139 + 8) = *((void *)v140 + 1);
        uint64_t v146 = *((void *)v140 + 3);
        swift_bridgeObjectRetain();
        if (v146 == 1)
        {
          long long v147 = *((_OWORD *)v140 + 1);
          *(void *)(v139 + 32) = *((void *)v140 + 4);
          *(_OWORD *)(v139 + 16) = v147;
        }
        else
        {
          *(void *)(v139 + 16) = *((void *)v140 + 2);
          *(void *)(v139 + 24) = *((void *)v140 + 3);
          *(void *)(v139 + 32) = *((void *)v140 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v169 = *(int *)(v141 + 24);
        uint64_t v170 = (void *)(v139 + v169);
        uint64_t v171 = &v140[v169];
        uint64_t v172 = sub_23309AF80();
        uint64_t v173 = *(void *)(v172 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v170, v171, *(void *)(*(void *)(v174 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v173 + 16))(v170, v171, v172);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
        }
        a3 = v227;
        uint64_t v175 = *(int *)(v141 + 28);
        uint64_t v176 = (void *)(v139 + v175);
        uint64_t v177 = &v140[v175];
        *uint64_t v176 = *(void *)v177;
        v176[1] = *((void *)v177 + 1);
        long long v178 = *(void (**)(void, void, void, void))(v142 + 56);
        swift_bridgeObjectRetain();
        v178(v139, 0, 1, v141);
        goto LABEL_92;
      }
      goto LABEL_86;
    }
    if (v145)
    {
      sub_232F7CB8C(v139, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_86:
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v135 = *(void *)(*(void *)(v150 - 8) + 64);
      uint64_t v136 = (void *)v139;
      uint64_t v137 = v140;
      goto LABEL_76;
    }
    *(void *)uint64_t v139 = *(void *)v140;
    *(void *)(v139 + 8) = *((void *)v140 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    long long v165 = (long long *)(v139 + 16);
    long long v166 = (long long *)(v140 + 16);
    uint64_t v167 = *((void *)v140 + 3);
    if (*(void *)(v139 + 24) == 1)
    {
      if (v167 == 1)
      {
        long long v168 = *v166;
        *(void *)(v139 + 32) = *((void *)v140 + 4);
        *long long v165 = v168;
      }
      else
      {
        *(void *)(v139 + 16) = *((void *)v140 + 2);
        *(void *)(v139 + 24) = *((void *)v140 + 3);
        *(void *)(v139 + 32) = *((void *)v140 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v167 == 1)
    {
      sub_232F042F8(v139 + 16);
      uint64_t v180 = *((void *)v140 + 4);
      *long long v165 = *v166;
      *(void *)(v139 + 32) = v180;
    }
    else
    {
      *(void *)(v139 + 16) = *((void *)v140 + 2);
      *(void *)(v139 + 24) = *((void *)v140 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v139 + 32) = *((void *)v140 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v191 = *(int *)(v141 + 24);
    uint64_t v192 = (void *)(v139 + v191);
    uint64_t v193 = &v140[v191];
    uint64_t v194 = sub_23309AF80();
    uint64_t v218 = *(void **)(v194 - 8);
    int v195 = (uint64_t (*)(void, void, void))v218[6];
    uint64_t v226 = v192;
    LODWORD(v192) = v195(v192, 1, v194);
    int v196 = v195(v193, 1, v194);
    if (v192)
    {
      if (!v196)
      {
        ((void (*)(void *, char *, uint64_t))v218[2])(v226, v193, v194);
        ((void (*)(void *, void, uint64_t, uint64_t))v218[7])(v226, 0, 1, v194);
        goto LABEL_126;
      }
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v198 = *(void *)(*(void *)(v197 - 8) + 64);
      long long v199 = v226;
    }
    else
    {
      if (!v196)
      {
        ((void (*)(void *, char *, uint64_t))v218[3])(v226, v193, v194);
        goto LABEL_126;
      }
      ((void (*)(void *, uint64_t))v218[1])(v226, v194);
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v198 = *(void *)(*(void *)(v200 - 8) + 64);
      long long v199 = v226;
    }
    memcpy(v199, v193, v198);
LABEL_126:
    a3 = v227;
    uint64_t v204 = *(int *)(v141 + 28);
    uint64_t v205 = (void *)(v139 + v204);
    int v206 = &v140[v204];
    *uint64_t v205 = *(void *)v206;
    v205[1] = *((void *)v206 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_92;
  }
  if (v124)
  {
LABEL_75:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v135 = *(void *)(*(void *)(v134 - 8) + 64);
    uint64_t v136 = v121;
    uint64_t v137 = v122;
LABEL_76:
    memcpy(v136, v137, v135);
    goto LABEL_92;
  }
  __srcb = (void *)v63;
  *long long v121 = *v122;
  v121[1] = v122[1];
  v121[2] = v122[2];
  v121[3] = v122[3];
  uint64_t v125 = *(int *)(v63 + 24);
  uint64_t v217 = (void *)((char *)v121 + v125);
  long long v126 = (void *)((char *)v122 + v125);
  uint64_t v127 = type metadata accessor for Identifier();
  uint64_t v128 = *(void *)(v127 - 8);
  size_t v129 = *(unsigned int (**)(void, void, void))(v128 + 48);
  int v130 = v126;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v129(v126, 1, v127))
  {
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v217, v126, *(void *)(*(void *)(v131 - 8) + 64));
    uint64_t v132 = v64;
    a3 = v227;
    long long v133 = __srcb;
  }
  else
  {
    void *v217 = *v126;
    v217[1] = v126[1];
    uint64_t v148 = v126[3];
    swift_bridgeObjectRetain();
    uint64_t v213 = (char *)v126;
    if (v148 == 1)
    {
      long long v149 = *((_OWORD *)v126 + 1);
      v217[4] = v126[4];
      *((_OWORD *)v217 + 1) = v149;
    }
    else
    {
      v217[2] = v126[2];
      v217[3] = v126[3];
      v217[4] = v126[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    long long v133 = __srcb;
    __srcc = (int *)v127;
    uint64_t v151 = *(int *)(v127 + 24);
    uint64_t v152 = (char *)v217 + v151;
    uint64_t v153 = (char *)v130 + v151;
    uint64_t v154 = sub_23309AF80();
    uint64_t v155 = *(void *)(v154 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v152, v153, v154);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
    }
    uint64_t v132 = v64;
    a3 = v227;
    uint64_t v157 = __srcc[7];
    uint64_t v158 = (void *)((char *)v217 + v157);
    uint64_t v159 = &v213[v157];
    *uint64_t v158 = *(void *)v159;
    v158[1] = *((void *)v159 + 1);
    uint64_t v160 = *(void (**)(void, void, void, void))(v128 + 56);
    swift_bridgeObjectRetain();
    v160(v217, 0, 1, __srcc);
  }
  (*(void (**)(void *, void, uint64_t, void *))(v132 + 56))(v121, 0, 1, v133);
LABEL_92:
  uint64_t v161 = a3[18];
  uint64_t v162 = (void *)((char *)a1 + v161);
  uint64_t v163 = (void *)((char *)a2 + v161);
  *uint64_t v162 = *v163;
  v162[1] = v163[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.Immunization(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = a3[8];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    unsigned char *v8 = *v9;
    *((void *)v8 + 1) = *((void *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((void *)v8 + 7) = *((void *)v9 + 7);
    uint64_t v13 = *(int *)(v10 + 28);
    __dst = &v8[v13];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = sub_23309B300();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (void *)(a2 + v18);
  *uint64_t v20 = *v21;
  *(void *)((char *)v20 + 5) = *(void *)((char *)v21 + 5);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v22 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  uint64_t v23 = a3[13];
  uint64_t v24 = a3[14];
  uint64_t v25 = a1 + v23;
  long long v26 = (long long *)(a2 + v23);
  long long v27 = *v26;
  *(void *)(v25 + 16) = *((void *)v26 + 2);
  LOBYTE(v26) = *(unsigned char *)(a2 + v24);
  *(_OWORD *)uint64_t v25 = v27;
  *(unsigned char *)(a1 + v24) = (_BYTE)v26;
  uint64_t v28 = a3[15];
  uint64_t v29 = (_OWORD *)(a1 + v28);
  uint64_t v30 = (_OWORD *)(a2 + v28);
  uint64_t v31 = type metadata accessor for Reference();
  uint64_t v32 = *(void **)(v31 - 8);
  uint64_t v33 = (unsigned int (*)(void, void, void))v32[6];
  if (v33(v30, 1, v31))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    uint64_t v75 = v33;
    __dsta = v32;
    long long v35 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v35;
    uint64_t v36 = *(int *)(v31 + 24);
    uint64_t v37 = (_OWORD *)((char *)v29 + v36);
    long long v38 = (_OWORD *)((char *)v30 + v36);
    uint64_t v39 = type metadata accessor for Identifier();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      uint64_t v33 = v75;
    }
    else
    {
      uint64_t v72 = v37;
      long long v42 = v38[1];
      *uint64_t v37 = *v38;
      v37[1] = v42;
      *((void *)v37 + 4) = *((void *)v38 + 4);
      uint64_t v43 = *(int *)(v39 + 24);
      uint64_t v70 = (char *)v37 + v43;
      uint64_t v71 = v39;
      uint64_t v44 = (char *)v38 + v43;
      uint64_t v45 = sub_23309AF80();
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v69 = v44;
      size_t v47 = v44;
      uint64_t v48 = v45;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v47, 1, v45))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v70, v69, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v46 + 32))(v70, v69, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v70, 0, 1, v48);
      }
      uint64_t v33 = v75;
      *(_OWORD *)((char *)v72 + *(int *)(v71 + 28)) = *(_OWORD *)((char *)v38 + *(int *)(v71 + 28));
      (*(void (**)(void))(v40 + 56))();
    }
    uint64_t v32 = __dsta;
    ((void (*)(_OWORD *, void, uint64_t, uint64_t))__dsta[7])(v29, 0, 1, v31);
  }
  uint64_t v50 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  uint64_t v51 = (_OWORD *)(a1 + v50);
  uint64_t v52 = (_OWORD *)(a2 + v50);
  if (v33(a2 + v50, 1, v31))
  {
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    __dstb = v32;
    long long v54 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v54;
    uint64_t v55 = *(int *)(v31 + 24);
    uint64_t v56 = (_OWORD *)((char *)v51 + v55);
    uint64_t v57 = (_OWORD *)((char *)v52 + v55);
    uint64_t v58 = type metadata accessor for Identifier();
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      long long v61 = v57[1];
      *uint64_t v56 = *v57;
      v56[1] = v61;
      *((void *)v56 + 4) = *((void *)v57 + 4);
      uint64_t v62 = *(int *)(v58 + 24);
      size_t v76 = (char *)v56 + v62;
      uint64_t v63 = (char *)v57 + v62;
      uint64_t v64 = sub_23309AF80();
      uint64_t v73 = *(void *)(v64 - 8);
      uint64_t v74 = v63;
      uint64_t v65 = v63;
      uint64_t v66 = v64;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v65, 1, v64))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v76, v74, *(void *)(*(void *)(v67 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v73 + 32))(v76, v74, v66);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v76, 0, 1, v66);
      }
      *(_OWORD *)((char *)v56 + *(int *)(v58 + 28)) = *(_OWORD *)((char *)v57 + *(int *)(v58 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    (*((void (**)(_OWORD *, void, uint64_t, uint64_t))__dstb + 7))(v51, 0, 1, v31);
  }
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  return a1;
}

void *assignWithTake for ModelsDSTU2.Immunization(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + 4;
  uint64_t v9 = a2[4];
  if (a1[4] == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4((uint64_t)(a1 + 4));
    uint64_t v9 = a2[4];
LABEL_4:
    void *v8 = v9;
    goto LABEL_6;
  }
  void *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  long long v199 = a3;
  uint64_t v11 = a3[8];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_232F7CB8C(v12, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_12;
    }
    *(unsigned char *)uint64_t v12 = *v13;
    *(void *)(v12 + 8) = *((void *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    if (*(void *)(v12 + 56) != 1)
    {
      uint64_t v27 = *((void *)v13 + 7);
      if (v27 != 1)
      {
        *(unsigned char *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(void *)(v12 + 48) = *((void *)v13 + 6);
        *(void *)(v12 + 56) = v27;
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t v29 = *(int *)(v14 + 28);
        uint64_t v30 = (void *)(v12 + v29);
        uint64_t v31 = &v13[v29];
        uint64_t v32 = sub_23309B300();
        uint64_t v187 = *(void *)(v32 - 8);
        uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v187 + 48);
        uint64_t v194 = v30;
        LODWORD(v30) = v33(v30, 1, v32);
        int v34 = v33(v31, 1, v32);
        if (v30)
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v187 + 32))(v194, v31, v32);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v187 + 56))(v194, 0, 1, v32);
            goto LABEL_28;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v36 = *(void *)(*(void *)(v35 - 8) + 64);
          uint64_t v37 = v194;
        }
        else
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v187 + 40))(v194, v31, v32);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v187 + 8))(v194, v32);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v36 = *(void *)(*(void *)(v38 - 8) + 64);
          uint64_t v37 = v194;
        }
        memcpy(v37, v31, v36);
LABEL_28:
        long long v26 = v199;
        uint64_t v39 = *(int *)(v14 + 32);
        uint64_t v40 = (void *)(v12 + v39);
        uint64_t v41 = &v13[v39];
        uint64_t v43 = *(void *)v41;
        uint64_t v42 = *((void *)v41 + 1);
        void *v40 = v43;
        v40[1] = v42;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      sub_232F0434C(v12 + 24);
    }
    long long v28 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v28;
    *(void *)(v12 + 56) = *((void *)v13 + 7);
    goto LABEL_20;
  }
  if (v18)
  {
LABEL_12:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v25 - 8) + 64));
    long long v26 = a3;
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  uint64_t v19 = *(int *)(v14 + 28);
  uint64_t v20 = (void *)(v12 + v19);
  uint64_t v21 = &v13[v19];
  uint64_t v22 = sub_23309B300();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  long long v26 = v199;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_29:
  uint64_t v44 = v26[9];
  uint64_t v45 = v26[10];
  uint64_t v46 = (void *)((char *)a1 + v44);
  size_t v47 = (void *)((char *)a2 + v44);
  *uint64_t v46 = *v47;
  *(void *)((char *)v46 + 5) = *(void *)((char *)v47 + 5);
  *(void *)((char *)a1 + v45) = *(void *)((char *)a2 + v45);
  swift_bridgeObjectRelease();
  uint64_t v48 = v26[12];
  *((unsigned char *)a1 + v26[11]) = *((unsigned char *)a2 + v26[11]);
  *(void *)((char *)a1 + v48) = *(void *)((char *)a2 + v48);
  swift_bridgeObjectRelease();
  uint64_t v49 = v26[13];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = *(void *)((char *)a2 + v49 + 8);
  *uint64_t v50 = *(void *)((char *)a2 + v49);
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v50[2] = *((void *)v51 + 2);
  swift_bridgeObjectRelease();
  uint64_t v53 = v26[15];
  *((unsigned char *)a1 + v26[14]) = *((unsigned char *)a2 + v26[14]);
  long long v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (char *)a2 + v53;
  uint64_t v56 = type metadata accessor for Reference();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      sub_232F7CB8C((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_35;
    }
    uint64_t v195 = v57;
    uint64_t v72 = *((void *)v55 + 1);
    *long long v54 = *(void *)v55;
    v54[1] = v72;
    swift_bridgeObjectRelease();
    uint64_t v73 = *((void *)v55 + 3);
    v54[2] = *((void *)v55 + 2);
    v54[3] = v73;
    swift_bridgeObjectRelease();
    uint64_t v74 = *(int *)(v56 + 24);
    uint64_t v75 = (char *)v54 + v74;
    size_t v76 = &v55[v74];
    uint64_t v77 = type metadata accessor for Identifier();
    uint64_t v184 = *(void **)(v77 - 8);
    uint64_t v188 = (uint64_t)v75;
    uint64_t v78 = (uint64_t (*)(char *, uint64_t, uint64_t))v184[6];
    LODWORD(v75) = v78(v75, 1, v77);
    __srca = v76;
    int v79 = v78(v76, 1, v77);
    if (v75)
    {
      long long v26 = v199;
      if (!v79)
      {
        long long v89 = *((_OWORD *)v76 + 1);
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v76;
        *(_OWORD *)(v188 + 16) = v89;
        *(void *)(v188 + 32) = *((void *)v76 + 4);
        uint64_t v90 = *(int *)(v77 + 24);
        uint64_t v180 = (void *)(v188 + v90);
        uint64_t v91 = &v76[v90];
        uint64_t v92 = sub_23309AF80();
        uint64_t v93 = *(void *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v180, v91, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v93 + 32))(v180, v91, v92);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v180, 0, 1, v92);
        }
        uint64_t v57 = v195;
        long long v26 = v199;
        *(_OWORD *)(v188 + *(int *)(v77 + 28)) = *(_OWORD *)&__srca[*(int *)(v77 + 28)];
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v184[7])(v188, 0, 1, v77);
        goto LABEL_49;
      }
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v69 = *(void *)(*(void *)(v80 - 8) + 64);
      uint64_t v70 = (void *)v188;
      uint64_t v71 = v76;
LABEL_36:
      memcpy(v70, v71, v69);
      goto LABEL_49;
    }
    long long v26 = v199;
    if (v79)
    {
      sub_232F7CB8C(v188, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v69 = *(void *)(*(void *)(v88 - 8) + 64);
      uint64_t v70 = (void *)v188;
      uint64_t v71 = v76;
      goto LABEL_36;
    }
    uint64_t v146 = *((void *)v76 + 1);
    *(void *)uint64_t v188 = *(void *)v76;
    *(void *)(v188 + 8) = v146;
    swift_bridgeObjectRelease();
    if (*(void *)(v188 + 24) != 1)
    {
      uint64_t v147 = *((void *)v76 + 3);
      if (v147 != 1)
      {
        *(void *)(v188 + 16) = *((void *)v76 + 2);
        *(void *)(v188 + 24) = v147;
        swift_bridgeObjectRelease();
        *(void *)(v188 + 32) = *((void *)v76 + 4);
        swift_bridgeObjectRelease();
LABEL_83:
        uint64_t v150 = *(int *)(v77 + 24);
        uint64_t v151 = (void *)(v188 + v150);
        int v186 = &v76[v150];
        uint64_t v152 = sub_23309AF80();
        uint64_t v181 = *(void *)(v152 - 8);
        uint64_t v153 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v181 + 48);
        uint64_t v183 = v151;
        LODWORD(v151) = v153(v151, 1, v152);
        int v154 = v153(v186, 1, v152);
        if (v151)
        {
          uint64_t v57 = v195;
          if (!v154)
          {
            (*(void (**)(void *, char *, uint64_t))(v181 + 32))(v183, v186, v152);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v181 + 56))(v183, 0, 1, v152);
            goto LABEL_99;
          }
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v156 = *(void *)(*(void *)(v155 - 8) + 64);
          uint64_t v157 = v183;
        }
        else
        {
          uint64_t v57 = v195;
          if (!v154)
          {
            (*(void (**)(void *, char *, uint64_t))(v181 + 40))(v183, v186, v152);
            goto LABEL_99;
          }
          (*(void (**)(void *, uint64_t))(v181 + 8))(v183, v152);
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v156 = *(void *)(*(void *)(v158 - 8) + 64);
          uint64_t v157 = v183;
        }
        memcpy(v157, v186, v156);
LABEL_99:
        long long v26 = v199;
        uint64_t v169 = *(int *)(v77 + 28);
        uint64_t v170 = (void *)(v188 + v169);
        uint64_t v171 = &__srca[v169];
        uint64_t v173 = *(void *)v171;
        uint64_t v172 = *((void *)v171 + 1);
        *uint64_t v170 = v173;
        v170[1] = v172;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      sub_232F042F8(v188 + 16);
    }
    *(_OWORD *)(v188 + 16) = *((_OWORD *)v76 + 1);
    *(void *)(v188 + 32) = *((void *)v76 + 4);
    goto LABEL_83;
  }
  if (v60)
  {
LABEL_35:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v69 = *(void *)(*(void *)(v68 - 8) + 64);
    uint64_t v70 = v54;
    uint64_t v71 = v55;
    goto LABEL_36;
  }
  __src = v58;
  long long v61 = *((_OWORD *)v55 + 1);
  *(_OWORD *)long long v54 = *(_OWORD *)v55;
  *((_OWORD *)v54 + 1) = v61;
  uint64_t v62 = *(int *)(v56 + 24);
  uint64_t v63 = (_OWORD *)((char *)v54 + v62);
  uint64_t v64 = &v55[v62];
  uint64_t v65 = type metadata accessor for Identifier();
  uint64_t v66 = *(void *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
  {
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
    long long v26 = v199;
    uint64_t v58 = __src;
  }
  else
  {
    uint64_t v179 = v63;
    uint64_t v182 = v66;
    uint64_t v196 = v57;
    long long v81 = *((_OWORD *)v64 + 1);
    _OWORD *v63 = *(_OWORD *)v64;
    v63[1] = v81;
    *((void *)v63 + 4) = *((void *)v64 + 4);
    uint64_t v82 = *(int *)(v65 + 24);
    uint64_t v189 = (char *)v63 + v82;
    uint64_t v83 = &v64[v82];
    uint64_t v84 = sub_23309AF80();
    uint64_t v85 = *(void *)(v84 - 8);
    uint64_t v86 = v84;
    if ((*(unsigned int (**)(char *, uint64_t))(v85 + 48))(v83, 1))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v189, v83, *(void *)(*(void *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v189, v83, v86);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v189, 0, 1, v86);
    }
    uint64_t v58 = __src;
    uint64_t v57 = v196;
    *(_OWORD *)((char *)v179 + *(int *)(v65 + 28)) = *(_OWORD *)&v64[*(int *)(v65 + 28)];
    (*(void (**)(void))(v182 + 56))();
    long long v26 = v199;
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_49:
  uint64_t v95 = v26[16];
  uint64_t v96 = (void *)((char *)a1 + v95);
  uint64_t v97 = (void *)((char *)a2 + v95);
  uint64_t v99 = *v97;
  uint64_t v98 = v97[1];
  void *v96 = v99;
  v96[1] = v98;
  swift_bridgeObjectRelease();
  uint64_t v100 = v26[17];
  uint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = (void *)((char *)a2 + v100);
  int v103 = v58((void *)((char *)a1 + v100), 1, v56);
  int v104 = v58(v102, 1, v56);
  if (!v103)
  {
    if (v104)
    {
      sub_232F7CB8C((uint64_t)v101, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_55;
    }
    uint64_t v116 = v102[1];
    *uint64_t v101 = *v102;
    v101[1] = v116;
    swift_bridgeObjectRelease();
    uint64_t v117 = v102[3];
    v101[2] = v102[2];
    v101[3] = v117;
    swift_bridgeObjectRelease();
    uint64_t v118 = *(int *)(v56 + 24);
    uint64_t v119 = (_OWORD *)((char *)v101 + v118);
    uint64_t v120 = (_OWORD *)((char *)v102 + v118);
    uint64_t v121 = type metadata accessor for Identifier();
    uint64_t v122 = *(void *)(v121 - 8);
    int v123 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v122 + 48);
    int v124 = v123(v119, 1, v121);
    int v125 = v123(v120, 1, v121);
    if (v124)
    {
      if (v125)
      {
        sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v119, v120, *(void *)(*(void *)(v126 - 8) + 64));
        long long v26 = v199;
      }
      else
      {
        long long v133 = v120[1];
        *uint64_t v119 = *v120;
        v119[1] = v133;
        *((void *)v119 + 4) = *((void *)v120 + 4);
        uint64_t v134 = *(int *)(v121 + 24);
        size_t v135 = (char *)v119 + v134;
        uint64_t v136 = (char *)v120 + v134;
        uint64_t v137 = sub_23309AF80();
        uint64_t v138 = *(void *)(v137 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
        {
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v135, v136, v137);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v135, 0, 1, v137);
        }
        *(_OWORD *)((char *)v119 + *(int *)(v121 + 28)) = *(_OWORD *)((char *)v120 + *(int *)(v121 + 28));
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
        long long v26 = v199;
      }
      goto LABEL_69;
    }
    long long v26 = v199;
    if (v125)
    {
      sub_232F7CB8C((uint64_t)v119, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v113 = *(void *)(*(void *)(v132 - 8) + 64);
      long long v114 = v119;
      uint64_t v115 = v120;
      goto LABEL_56;
    }
    uint64_t v148 = *((void *)v120 + 1);
    *(void *)uint64_t v119 = *(void *)v120;
    *((void *)v119 + 1) = v148;
    swift_bridgeObjectRelease();
    if (*((void *)v119 + 3) != 1)
    {
      uint64_t v149 = *((void *)v120 + 3);
      if (v149 != 1)
      {
        *((void *)v119 + 2) = *((void *)v120 + 2);
        *((void *)v119 + 3) = v149;
        swift_bridgeObjectRelease();
        *((void *)v119 + 4) = *((void *)v120 + 4);
        swift_bridgeObjectRelease();
LABEL_90:
        uint64_t v159 = *(int *)(v121 + 24);
        uint64_t v160 = (char *)v119 + v159;
        uint64_t v161 = (char *)v120 + v159;
        uint64_t v162 = sub_23309AF80();
        uint64_t v190 = *(void *)(v162 - 8);
        uint64_t v163 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v190 + 48);
        size_t v198 = v160;
        LODWORD(v160) = v163(v160, 1, v162);
        int v164 = v163(v161, 1, v162);
        if (v160)
        {
          if (!v164)
          {
            (*(void (**)(void *, char *, uint64_t))(v190 + 32))(v198, v161, v162);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v190 + 56))(v198, 0, 1, v162);
            goto LABEL_101;
          }
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v166 = *(void *)(*(void *)(v165 - 8) + 64);
          uint64_t v167 = v198;
        }
        else
        {
          if (!v164)
          {
            (*(void (**)(void *, char *, uint64_t))(v190 + 40))(v198, v161, v162);
            goto LABEL_101;
          }
          (*(void (**)(void *, uint64_t))(v190 + 8))(v198, v162);
          sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v166 = *(void *)(*(void *)(v168 - 8) + 64);
          uint64_t v167 = v198;
        }
        memcpy(v167, v161, v166);
LABEL_101:
        uint64_t v174 = *(int *)(v121 + 28);
        uint64_t v175 = (void *)((char *)v119 + v174);
        uint64_t v176 = (uint64_t *)((char *)v120 + v174);
        uint64_t v178 = *v176;
        uint64_t v177 = v176[1];
        *uint64_t v175 = v178;
        v175[1] = v177;
        swift_bridgeObjectRelease();
        long long v26 = v199;
        goto LABEL_69;
      }
      sub_232F042F8((uint64_t)(v119 + 1));
    }
    v119[1] = v120[1];
    *((void *)v119 + 4) = *((void *)v120 + 4);
    goto LABEL_90;
  }
  if (v104)
  {
LABEL_55:
    sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v113 = *(void *)(*(void *)(v112 - 8) + 64);
    long long v114 = v101;
    uint64_t v115 = v102;
LABEL_56:
    memcpy(v114, v115, v113);
    goto LABEL_69;
  }
  long long v105 = *((_OWORD *)v102 + 1);
  *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
  *((_OWORD *)v101 + 1) = v105;
  uint64_t v106 = *(int *)(v56 + 24);
  long long v107 = (_OWORD *)((char *)v101 + v106);
  uint64_t v108 = (_OWORD *)((char *)v102 + v106);
  uint64_t v109 = type metadata accessor for Identifier();
  uint64_t v110 = *(void *)(v109 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
  {
    sub_232F7CA40(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
  }
  else
  {
    long long v127 = v108[1];
    *long long v107 = *v108;
    v107[1] = v127;
    *((void *)v107 + 4) = *((void *)v108 + 4);
    uint64_t v128 = *(int *)(v109 + 24);
    __srcb = (char *)v107 + v128;
    uint64_t v197 = v57;
    size_t v129 = (char *)v108 + v128;
    uint64_t v130 = sub_23309AF80();
    uint64_t v185 = *(void (***)(void *, const void *, uint64_t))(v130 - 8);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v185[6])(v129, 1, v130))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__srcb, v129, *(void *)(*(void *)(v131 - 8) + 64));
    }
    else
    {
      v185[4](__srcb, v129, v130);
      ((void (*)(char *, void, uint64_t, uint64_t))v185[7])(__srcb, 0, 1, v130);
    }
    uint64_t v57 = v197;
    *(_OWORD *)((char *)v107 + *(int *)(v109 + 28)) = *(_OWORD *)((char *)v108 + *(int *)(v109 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
  }
  long long v26 = v199;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v101, 0, 1, v56);
LABEL_69:
  uint64_t v140 = v26[18];
  uint64_t v141 = (void *)((char *)a1 + v140);
  uint64_t v142 = (void *)((char *)a2 + v140);
  uint64_t v144 = *v142;
  uint64_t v143 = v142[1];
  *uint64_t v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Immunization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FC8C80);
}

uint64_t sub_232FC8C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 60);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Immunization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FC8E20);
}

uint64_t sub_232FC8E20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_232F7CA40(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 60);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_232FC8FAC()
{
  sub_232F7CA40(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232F7CA40(319, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.ImmunizationVaccinationProtocol(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.ImmunizationVaccinationProtocol(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ImmunizationVaccinationProtocol()
{
  return &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsDSTU2.Observation(uint64_t a1, void *a2, int *a3)
{
  char v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1) {
      swift_bridgeObjectRetain();
    }
    uint64_t v11 = v3[5];
    uint64_t v10 = v3[6];
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v10;
    uint64_t v12 = v3[8];
    swift_bridgeObjectRetain();
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 7);
      *(void *)(a1 + 72) = v3[9];
    }
    else
    {
      *(void *)(a1 + 56) = v3[7];
      *(void *)(a1 + 64) = v12;
      *(void *)(a1 + 72) = v3[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = v3[11];
    *(void *)(a1 + 80) = v3[10];
    *(void *)(a1 + 88) = v14;
    uint64_t v15 = v3[13];
    *(void *)(a1 + 96) = v3[12];
    *(void *)(a1 + 104) = v15;
    uint64_t v16 = v6[11];
    int v17 = (unsigned char *)(a1 + v16);
    size_t v129 = v3;
    int v18 = (char *)v3 + v16;
    *(void *)(a1 + 112) = v3[14];
    uint64_t v19 = type metadata accessor for FHIRDateTime();
    uint64_t v127 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(void, void, void))(v127 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v130 = v6;
    if (v20(v18, 1, v19))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      unsigned char *v17 = *v18;
      *((void *)v17 + 1) = *((void *)v18 + 1);
      *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
      uint64_t v22 = *((void *)v18 + 7);
      int v123 = v20;
      if (v22 == 1)
      {
        long long v23 = *(_OWORD *)(v18 + 40);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v17 + 40) = v23;
        *((void *)v17 + 7) = *((void *)v18 + 7);
      }
      else
      {
        v17[24] = v18[24];
        *(_WORD *)(v17 + 25) = *(_WORD *)(v18 + 25);
        *(_OWORD *)(v17 + 28) = *(_OWORD *)(v18 + 28);
        *((_DWORD *)v17 + 11) = *((_DWORD *)v18 + 11);
        *((void *)v17 + 6) = *((void *)v18 + 6);
        *((void *)v17 + 7) = v22;
        swift_bridgeObjectRetain();
      }
      uint64_t v24 = *(int *)(v19 + 28);
      uint64_t v25 = &v17[v24];
      long long v26 = &v18[v24];
      uint64_t v27 = sub_23309B300();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v20 = v123;
      uint64_t v30 = *(int *)(v19 + 32);
      uint64_t v31 = &v17[v30];
      uint64_t v32 = &v18[v30];
      uint64_t v33 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v33;
      int v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
      swift_bridgeObjectRetain();
      v34(v17, 0, 1, v19);
      uint64_t v6 = v130;
    }
    uint64_t v35 = v6[12];
    size_t v36 = (unsigned char *)(a1 + v35);
    uint64_t v37 = (char *)v3 + v35;
    uint64_t v38 = type metadata accessor for Period();
    uint64_t v39 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v38 - 8);
    if (v39[6](v37, 1, v38))
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v121 = v39;
      if (v20(v37, 1, v19))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *size_t v36 = *v37;
        *((void *)v36 + 1) = *((void *)v37 + 1);
        *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
        uint64_t v42 = *((void *)v37 + 7);
        int v124 = v20;
        if (v42 == 1)
        {
          long long v43 = *(_OWORD *)(v37 + 40);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
          *(_OWORD *)(v36 + 40) = v43;
          *((void *)v36 + 7) = *((void *)v37 + 7);
        }
        else
        {
          v36[24] = v37[24];
          *(_WORD *)(v36 + 25) = *(_WORD *)(v37 + 25);
          *(_OWORD *)(v36 + 28) = *(_OWORD *)(v37 + 28);
          *((_DWORD *)v36 + 11) = *((_DWORD *)v37 + 11);
          *((void *)v36 + 6) = *((void *)v37 + 6);
          *((void *)v36 + 7) = v42;
          swift_bridgeObjectRetain();
        }
        uint64_t v44 = *(int *)(v19 + 28);
        __dst = &v36[v44];
        uint64_t v45 = &v37[v44];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(__dst, v45, v46);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
        }
        uint64_t v20 = v124;
        uint64_t v49 = *(int *)(v19 + 32);
        uint64_t v50 = &v36[v49];
        uint64_t v51 = &v37[v49];
        uint64_t v52 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v52;
        uint64_t v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
        swift_bridgeObjectRetain();
        v53(v36, 0, 1, v19);
        uint64_t v6 = v130;
      }
      uint64_t v54 = *(int *)(v38 + 20);
      uint64_t v55 = &v36[v54];
      uint64_t v56 = &v37[v54];
      if (v20(v56, 1, v19))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        *uint64_t v55 = *v56;
        *((void *)v55 + 1) = *((void *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        uint64_t v58 = *((void *)v56 + 7);
        int v125 = v20;
        if (v58 == 1)
        {
          long long v59 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v59;
          *((void *)v55 + 7) = *((void *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((void *)v55 + 6) = *((void *)v56 + 6);
          *((void *)v55 + 7) = v58;
          swift_bridgeObjectRetain();
        }
        uint64_t v60 = *(int *)(v19 + 28);
        __dsta = &v55[v60];
        long long v61 = &v56[v60];
        uint64_t v62 = sub_23309B300();
        uint64_t v118 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v118 + 48))(v61, 1, v62))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dsta, v61, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v118 + 16))(__dsta, v61, v62);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v118 + 56))(__dsta, 0, 1, v62);
        }
        uint64_t v20 = v125;
        uint64_t v64 = *(int *)(v19 + 32);
        uint64_t v65 = &v55[v64];
        uint64_t v66 = &v56[v64];
        uint64_t v67 = v66[1];
        void *v65 = *v66;
        v65[1] = v67;
        uint64_t v68 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
        swift_bridgeObjectRetain();
        v68(v55, 0, 1, v19);
        uint64_t v6 = v130;
      }
      (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v121 + 7))(v36, 0, 1, v38);
    }
    uint64_t v69 = v6[13];
    uint64_t v70 = (unsigned char *)(a1 + v69);
    uint64_t v71 = (char *)v3 + v69;
    if (v20((char *)v3 + v69, 1, v19))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
    }
    else
    {
      *uint64_t v70 = *v71;
      *((void *)v70 + 1) = *((void *)v71 + 1);
      *((_DWORD *)v70 + 4) = *((_DWORD *)v71 + 4);
      uint64_t v73 = *((void *)v71 + 7);
      if (v73 == 1)
      {
        long long v74 = *(_OWORD *)(v71 + 40);
        *(_OWORD *)(v70 + 24) = *(_OWORD *)(v71 + 24);
        *(_OWORD *)(v70 + 40) = v74;
        *((void *)v70 + 7) = *((void *)v71 + 7);
      }
      else
      {
        v70[24] = v71[24];
        *(_WORD *)(v70 + 25) = *(_WORD *)(v71 + 25);
        *(_OWORD *)(v70 + 28) = *(_OWORD *)(v71 + 28);
        *((_DWORD *)v70 + 11) = *((_DWORD *)v71 + 11);
        *((void *)v70 + 6) = *((void *)v71 + 6);
        *((void *)v70 + 7) = v73;
        swift_bridgeObjectRetain();
      }
      uint64_t v75 = *(int *)(v19 + 28);
      size_t v76 = &v70[v75];
      uint64_t v77 = &v71[v75];
      uint64_t v78 = sub_23309B300();
      uint64_t v79 = *(void *)(v78 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v79 + 16))(v76, v77, v78);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
      uint64_t v81 = *(int *)(v19 + 32);
      uint64_t v82 = &v70[v81];
      uint64_t v83 = &v71[v81];
      uint64_t v84 = v83[1];
      *uint64_t v82 = *v83;
      v82[1] = v84;
      uint64_t v85 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
      swift_bridgeObjectRetain();
      v85(v70, 0, 1, v19);
      uint64_t v6 = v130;
    }
    uint64_t v86 = v6[15];
    *(void *)(a1 + v6[14]) = *(void *)((char *)v3 + v6[14]);
    uint64_t v87 = (void *)(a1 + v86);
    uint64_t v88 = (void *)((char *)v3 + v86);
    uint64_t v89 = v88[1];
    *uint64_t v87 = *v88;
    v87[1] = v89;
    uint64_t v90 = v6[16];
    uint64_t v91 = a1 + v90;
    uint64_t v92 = (char *)v3 + v90;
    uint64_t v93 = *(void *)((char *)v3 + v90 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v93 == 1)
    {
      *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      *(void *)(v91 + 16) = *((void *)v92 + 2);
    }
    else
    {
      *(void *)uint64_t v91 = *(void *)v92;
      *(void *)(v91 + 8) = v93;
      *(void *)(v91 + 16) = *((void *)v92 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v94 = v130;
    uint64_t v95 = v130[17];
    uint64_t v96 = (void *)(a1 + v95);
    uint64_t v97 = (void *)((char *)v3 + v95);
    uint64_t v98 = type metadata accessor for Quantity();
    uint64_t v99 = *(void *)(v98 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
    {
      sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
      memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
    }
    else
    {
      uint64_t v126 = v99;
      *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
      *(void *)((char *)v96 + 13) = *(void *)((char *)v97 + 13);
      uint64_t v101 = v97[4];
      v96[3] = v97[3];
      v96[4] = v101;
      uint64_t v102 = v97[6];
      v96[5] = v97[5];
      v96[6] = v102;
      uint64_t v103 = *(int *)(v98 + 28);
      uint64_t v122 = (char *)v96 + v103;
      int v104 = (char *)v97 + v103;
      uint64_t v105 = sub_23309AF80();
      uint64_t v106 = *(void *)(v105 - 8);
      uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v128(v104, 1, v105))
      {
        sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v122, v104, *(void *)(*(void *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v122, v104, v105);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v122, 0, 1, v105);
      }
      uint64_t v108 = *(int *)(v98 + 32);
      uint64_t v109 = (void *)((char *)v96 + v108);
      uint64_t v110 = (void *)((char *)v97 + v108);
      uint64_t v111 = v110[1];
      *uint64_t v109 = *v110;
      v109[1] = v111;
      uint64_t v112 = *(void (**)(void *, void, uint64_t, uint64_t))(v126 + 56);
      swift_bridgeObjectRetain();
      v112(v96, 0, 1, v98);
      char v3 = v129;
      uint64_t v94 = v130;
    }
    uint64_t v113 = v94[19];
    *(void *)(a1 + v94[18]) = *(void *)((char *)v3 + v94[18]);
    long long v114 = (void *)(a1 + v113);
    uint64_t v115 = (void *)((char *)v3 + v113);
    uint64_t v116 = v115[1];
    void *v114 = *v115;
    v114[1] = v116;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsDSTU2.Observation(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[11];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[12];
  uint64_t v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(void *)(v10 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = v10 + *(int *)(v5 + 28);
      uint64_t v13 = sub_23309B300();
      uint64_t v14 = *(void *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(void *)(v15 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = v15 + *(int *)(v5 + 28);
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v19 = a1 + a2[13];
  if (!v6(v19, 1, v5))
  {
    if (*(void *)(v19 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = v19 + *(int *)(v5 + 28);
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[16] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = a1 + a2[17];
  uint64_t v24 = type metadata accessor for Quantity();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v23 + *(int *)(v24 + 28);
    uint64_t v26 = sub_23309AF80();
    uint64_t v27 = *(void *)(v26 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26)) {
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
  uint64_t v11 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = *(void *)(a2 + 112);
  uint64_t v15 = a3[11];
  uint64_t v16 = (unsigned char *)(a1 + v15);
  uint64_t v130 = a2;
  uint64_t v17 = (unsigned char *)(a2 + v15);
  *(void *)(a1 + 112) = v14;
  uint64_t v18 = type metadata accessor for FHIRDateTime();
  uint64_t v127 = *(void *)(v18 - 8);
  uint64_t v19 = *(unsigned int (**)(void, void, void))(v127 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  size_t v129 = a3;
  if (v19(v17, 1, v18))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    uint64_t v21 = a3;
  }
  else
  {
    *uint64_t v16 = *v17;
    *((void *)v16 + 1) = *((void *)v17 + 1);
    *((_DWORD *)v16 + 4) = *((_DWORD *)v17 + 4);
    uint64_t v22 = *((void *)v17 + 7);
    __dst = v19;
    if (v22 == 1)
    {
      long long v23 = *(_OWORD *)(v17 + 40);
      *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
      *(_OWORD *)(v16 + 40) = v23;
      *((void *)v16 + 7) = *((void *)v17 + 7);
    }
    else
    {
      v16[24] = v17[24];
      *(_WORD *)(v16 + 25) = *(_WORD *)(v17 + 25);
      *(_OWORD *)(v16 + 28) = *(_OWORD *)(v17 + 28);
      *((_DWORD *)v16 + 11) = *((_DWORD *)v17 + 11);
      *((void *)v16 + 6) = *((void *)v17 + 6);
      *((void *)v16 + 7) = v22;
      swift_bridgeObjectRetain();
    }
    uint64_t v24 = *(int *)(v18 + 28);
    uint64_t v25 = &v16[v24];
    uint64_t v26 = &v17[v24];
    uint64_t v27 = sub_23309B300();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v19 = (unsigned int (*)(void, void, void))__dst;
    uint64_t v30 = *(int *)(v18 + 32);
    uint64_t v31 = &v16[v30];
    uint64_t v32 = &v17[v30];
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v21 = a3;
    int v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
    swift_bridgeObjectRetain();
    v34(v16, 0, 1, v18);
  }
  uint64_t v35 = v130;
  uint64_t v36 = v21[12];
  uint64_t v37 = (unsigned char *)(a1 + v36);
  uint64_t v38 = (unsigned char *)(v130 + v36);
  uint64_t v39 = type metadata accessor for Period();
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    uint64_t v121 = v40;
    if (v19(v38, 1, v18))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      *uint64_t v37 = *v38;
      *((void *)v37 + 1) = *((void *)v38 + 1);
      *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
      uint64_t v43 = *((void *)v38 + 7);
      __dsta = v19;
      if (v43 == 1)
      {
        long long v44 = *(_OWORD *)(v38 + 40);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
        *(_OWORD *)(v37 + 40) = v44;
        *((void *)v37 + 7) = *((void *)v38 + 7);
      }
      else
      {
        v37[24] = v38[24];
        *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
        *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
        *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
        *((void *)v37 + 6) = *((void *)v38 + 6);
        *((void *)v37 + 7) = v43;
        swift_bridgeObjectRetain();
      }
      uint64_t v45 = *(int *)(v18 + 28);
      uint64_t v46 = &v37[v45];
      uint64_t v47 = &v38[v45];
      uint64_t v48 = sub_23309B300();
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v49 + 16))(v46, v47, v48);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v21 = v129;
      uint64_t v51 = *(int *)(v18 + 32);
      uint64_t v52 = &v37[v51];
      uint64_t v53 = &v38[v51];
      uint64_t v54 = v53[1];
      *uint64_t v52 = *v53;
      v52[1] = v54;
      uint64_t v55 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
      swift_bridgeObjectRetain();
      v55(v37, 0, 1, v18);
      uint64_t v19 = (unsigned int (*)(void, void, void))__dsta;
    }
    uint64_t v56 = *(int *)(v39 + 20);
    uint64_t v57 = &v37[v56];
    uint64_t v58 = &v38[v56];
    if (v19(v58, 1, v18))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      *uint64_t v57 = *v58;
      *((void *)v57 + 1) = *((void *)v58 + 1);
      *((_DWORD *)v57 + 4) = *((_DWORD *)v58 + 4);
      uint64_t v60 = *((void *)v58 + 7);
      __dstb = v19;
      if (v60 == 1)
      {
        long long v61 = *(_OWORD *)(v58 + 40);
        *(_OWORD *)(v57 + 24) = *(_OWORD *)(v58 + 24);
        *(_OWORD *)(v57 + 40) = v61;
        *((void *)v57 + 7) = *((void *)v58 + 7);
      }
      else
      {
        v57[24] = v58[24];
        *(_WORD *)(v57 + 25) = *(_WORD *)(v58 + 25);
        *(_OWORD *)(v57 + 28) = *(_OWORD *)(v58 + 28);
        *((_DWORD *)v57 + 11) = *((_DWORD *)v58 + 11);
        *((void *)v57 + 6) = *((void *)v58 + 6);
        *((void *)v57 + 7) = v60;
        swift_bridgeObjectRetain();
      }
      uint64_t v62 = *(int *)(v18 + 28);
      uint64_t v120 = &v57[v62];
      uint64_t v63 = &v58[v62];
      uint64_t v64 = sub_23309B300();
      uint64_t v65 = *(void *)(v64 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v120, v63, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v65 + 16))(v120, v63, v64);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v65 + 56))(v120, 0, 1, v64);
      }
      uint64_t v67 = *(int *)(v18 + 32);
      uint64_t v68 = &v57[v67];
      uint64_t v69 = &v58[v67];
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v21 = v129;
      uint64_t v71 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
      swift_bridgeObjectRetain();
      v71(v57, 0, 1, v18);
      uint64_t v19 = (unsigned int (*)(void, void, void))__dstb;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v121 + 56))(v37, 0, 1, v39);
    uint64_t v35 = v130;
  }
  uint64_t v72 = v21[13];
  uint64_t v73 = (unsigned char *)(a1 + v72);
  long long v74 = (unsigned char *)(v35 + v72);
  if (v19(v35 + v72, 1, v18))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    *uint64_t v73 = *v74;
    *((void *)v73 + 1) = *((void *)v74 + 1);
    *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
    uint64_t v76 = *((void *)v74 + 7);
    if (v76 == 1)
    {
      long long v77 = *(_OWORD *)(v74 + 40);
      *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
      *(_OWORD *)(v73 + 40) = v77;
      *((void *)v73 + 7) = *((void *)v74 + 7);
    }
    else
    {
      v73[24] = v74[24];
      *(_WORD *)(v73 + 25) = *(_WORD *)(v74 + 25);
      *(_OWORD *)(v73 + 28) = *(_OWORD *)(v74 + 28);
      *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
      *((void *)v73 + 6) = *((void *)v74 + 6);
      *((void *)v73 + 7) = v76;
      swift_bridgeObjectRetain();
    }
    uint64_t v78 = *(int *)(v18 + 28);
    uint64_t v79 = &v73[v78];
    uint64_t v80 = &v74[v78];
    uint64_t v81 = sub_23309B300();
    uint64_t v82 = *(void *)(v81 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v82 + 16))(v79, v80, v81);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    uint64_t v84 = *(int *)(v18 + 32);
    uint64_t v85 = &v73[v84];
    uint64_t v86 = &v74[v84];
    uint64_t v87 = v86[1];
    void *v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v127 + 56);
    swift_bridgeObjectRetain();
    v88(v73, 0, 1, v18);
    uint64_t v35 = v130;
  }
  uint64_t v89 = v21[15];
  *(void *)(a1 + v21[14]) = *(void *)(v35 + v21[14]);
  uint64_t v90 = (void *)(a1 + v89);
  uint64_t v91 = (void *)(v35 + v89);
  uint64_t v92 = v91[1];
  *uint64_t v90 = *v91;
  v90[1] = v92;
  uint64_t v93 = v21[16];
  uint64_t v94 = a1 + v93;
  uint64_t v95 = v35 + v93;
  uint64_t v96 = *(void *)(v35 + v93 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96 == 1)
  {
    *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
    *(void *)(v94 + 16) = *(void *)(v95 + 16);
  }
  else
  {
    *(void *)uint64_t v94 = *(void *)v95;
    *(void *)(v94 + 8) = v96;
    *(void *)(v94 + 16) = *(void *)(v95 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v97 = v21[17];
  uint64_t v98 = (void *)(a1 + v97);
  uint64_t v99 = (void *)(v35 + v97);
  uint64_t v100 = type metadata accessor for Quantity();
  uint64_t v101 = *(void *)(v100 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
  {
    sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
  }
  else
  {
    uint64_t v128 = v101;
    *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
    *(void *)((char *)v98 + 13) = *(void *)((char *)v99 + 13);
    uint64_t v103 = v99[4];
    v98[3] = v99[3];
    v98[4] = v103;
    uint64_t v104 = v99[6];
    v98[5] = v99[5];
    v98[6] = v104;
    uint64_t v105 = *(int *)(v100 + 28);
    __dstc = (char *)v98 + v105;
    uint64_t v106 = (char *)v99 + v105;
    uint64_t v107 = sub_23309AF80();
    uint64_t v108 = *(void *)(v107 - 8);
    uint64_t v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v122(v106, 1, v107))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__dstc, v106, *(void *)(*(void *)(v109 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(__dstc, v106, v107);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(__dstc, 0, 1, v107);
    }
    uint64_t v110 = *(int *)(v100 + 32);
    uint64_t v111 = (void *)((char *)v98 + v110);
    uint64_t v112 = (void *)((char *)v99 + v110);
    uint64_t v113 = v112[1];
    *uint64_t v111 = *v112;
    v111[1] = v113;
    long long v114 = *(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56);
    swift_bridgeObjectRetain();
    v114(v98, 0, 1, v100);
    uint64_t v21 = v129;
    uint64_t v35 = v130;
  }
  uint64_t v115 = v21[19];
  *(void *)(a1 + v21[18]) = *(void *)(v35 + v21[18]);
  uint64_t v116 = (void *)(a1 + v115);
  uint64_t v117 = (void *)(v35 + v115);
  uint64_t v118 = v117[1];
  void *v116 = *v117;
  v116[1] = v118;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsDSTU2.Observation(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = v4[2];
  a1[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 4;
  uint64_t v7 = v4[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(a1 + 4));
      uint64_t v8 = v4[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = v4[5];
  a1[6] = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 7);
  uint64_t v10 = (long long *)(v4 + 7);
  uint64_t v11 = v4[8];
  if (a1[8] == 1)
  {
    if (v11 == 1)
    {
      long long v12 = *v10;
      a1[9] = v4[9];
      long long *v9 = v12;
    }
    else
    {
      a1[7] = v4[7];
      a1[8] = v4[8];
      a1[9] = v4[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_232F042F8((uint64_t)(a1 + 7));
    uint64_t v13 = v4[9];
    long long *v9 = *v10;
    a1[9] = v13;
  }
  else
  {
    a1[7] = v4[7];
    a1[8] = v4[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[9] = v4[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[10] = v4[10];
  a1[11] = v4[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = v4[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = v4[13];
  a1[14] = v4[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[11];
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (char *)v4 + v14;
  uint64_t v17 = type metadata accessor for FHIRDateTime();
  uint64_t v276 = *(void *)(v17 - 8);
  int v281 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v276 + 48);
  int v18 = v281(v15, 1, v17);
  int v19 = v281((uint64_t)v16, 1, v17);
  uint64_t v283 = a3;
  uint64_t v280 = v4;
  if (!v18)
  {
    if (v19)
    {
      sub_232F7CB8C(v15, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_22;
    }
    *(unsigned char *)uint64_t v15 = *v16;
    *(void *)(v15 + 8) = *((void *)v16 + 1);
    *(_WORD *)(v15 + 16) = *((_WORD *)v16 + 8);
    *(_WORD *)(v15 + 18) = *((_WORD *)v16 + 9);
    uint64_t v24 = (long long *)(v15 + 24);
    uint64_t v25 = (long long *)(v16 + 24);
    uint64_t v26 = *((void *)v16 + 7);
    if (*(void *)(v15 + 56) == 1)
    {
      if (v26 == 1)
      {
        long long v27 = *v25;
        long long v28 = *(_OWORD *)(v16 + 40);
        *(void *)(v15 + 56) = *((void *)v16 + 7);
        *uint64_t v24 = v27;
        *(_OWORD *)(v15 + 40) = v28;
      }
      else
      {
        *(unsigned char *)(v15 + 24) = v16[24];
        *(unsigned char *)(v15 + 25) = v16[25];
        *(unsigned char *)(v15 + 26) = v16[26];
        long long v42 = *(_OWORD *)(v16 + 28);
        *(_DWORD *)(v15 + 44) = *((_DWORD *)v16 + 11);
        *(_OWORD *)(v15 + 28) = v42;
        *(void *)(v15 + 48) = *((void *)v16 + 6);
        *(void *)(v15 + 56) = *((void *)v16 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v26 == 1)
    {
      sub_232F0434C(v15 + 24);
      uint64_t v40 = *((void *)v16 + 7);
      long long v41 = *(_OWORD *)(v16 + 40);
      *uint64_t v24 = *v25;
      *(_OWORD *)(v15 + 40) = v41;
      *(void *)(v15 + 56) = v40;
    }
    else
    {
      *(unsigned char *)(v15 + 24) = v16[24];
      *(unsigned char *)(v15 + 25) = v16[25];
      *(unsigned char *)(v15 + 26) = v16[26];
      *(_DWORD *)(v15 + 28) = *((_DWORD *)v16 + 7);
      *(_WORD *)(v15 + 32) = *((_WORD *)v16 + 16);
      *(_WORD *)(v15 + 34) = *((_WORD *)v16 + 17);
      *(_WORD *)(v15 + 36) = *((_WORD *)v16 + 18);
      *(_WORD *)(v15 + 38) = *((_WORD *)v16 + 19);
      *(_WORD *)(v15 + 40) = *((_WORD *)v16 + 20);
      *(_WORD *)(v15 + 42) = *((_WORD *)v16 + 21);
      *(_WORD *)(v15 + 44) = *((_WORD *)v16 + 22);
      *(_WORD *)(v15 + 46) = *((_WORD *)v16 + 23);
      *(void *)(v15 + 48) = *((void *)v16 + 6);
      *(void *)(v15 + 56) = *((void *)v16 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v43 = *(int *)(v17 + 28);
    long long v44 = (void *)(v15 + v43);
    uint64_t v45 = &v16[v43];
    uint64_t v46 = sub_23309B300();
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
    __dst = v44;
    LODWORD(v44) = v48(v44, 1, v46);
    int v49 = v48(v45, 1, v46);
    if (v44)
    {
      if (!v49)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 16))(__dst, v45, v46);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
        goto LABEL_43;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v51 = *(void *)(*(void *)(v50 - 8) + 64);
      uint64_t v52 = __dst;
    }
    else
    {
      if (!v49)
      {
        (*(void (**)(void *, char *, uint64_t))(v47 + 24))(__dst, v45, v46);
        goto LABEL_43;
      }
      (*(void (**)(void *, uint64_t))(v47 + 8))(__dst, v46);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v51 = *(void *)(*(void *)(v53 - 8) + 64);
      uint64_t v52 = __dst;
    }
    memcpy(v52, v45, v51);
LABEL_43:
    uint64_t v4 = v280;
    a3 = v283;
    uint64_t v54 = *(int *)(v17 + 32);
    uint64_t v55 = (void *)(v15 + v54);
    uint64_t v56 = &v16[v54];
    *uint64_t v55 = *(void *)v56;
    v55[1] = *((void *)v56 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if (v19)
  {
LABEL_22:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v15, v16, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_44;
  }
  *(unsigned char *)uint64_t v15 = *v16;
  uint64_t v20 = *((void *)v16 + 1);
  *(_DWORD *)(v15 + 16) = *((_DWORD *)v16 + 4);
  *(void *)(v15 + 8) = v20;
  if (*((void *)v16 + 7) == 1)
  {
    long long v21 = *(_OWORD *)(v16 + 24);
    long long v22 = *(_OWORD *)(v16 + 40);
    *(void *)(v15 + 56) = *((void *)v16 + 7);
    *(_OWORD *)(v15 + 24) = v21;
    *(_OWORD *)(v15 + 40) = v22;
  }
  else
  {
    *(unsigned char *)(v15 + 24) = v16[24];
    *(unsigned char *)(v15 + 25) = v16[25];
    *(unsigned char *)(v15 + 26) = v16[26];
    long long v29 = *(_OWORD *)(v16 + 28);
    *(_DWORD *)(v15 + 44) = *((_DWORD *)v16 + 11);
    *(_OWORD *)(v15 + 28) = v29;
    *(void *)(v15 + 48) = *((void *)v16 + 6);
    *(void *)(v15 + 56) = *((void *)v16 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v30 = *(int *)(v17 + 28);
  uint64_t v31 = (void *)(v15 + v30);
  uint64_t v32 = &v16[v30];
  uint64_t v33 = sub_23309B300();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  a3 = v283;
  uint64_t v36 = *(int *)(v17 + 32);
  uint64_t v37 = (void *)(v15 + v36);
  uint64_t v38 = &v16[v36];
  *uint64_t v37 = *(void *)v38;
  v37[1] = *((void *)v38 + 1);
  uint64_t v39 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56);
  swift_bridgeObjectRetain();
  v39(v15, 0, 1, v17);
LABEL_44:
  uint64_t v57 = a3[12];
  uint64_t v58 = (uint64_t)a1 + v57;
  uint64_t v59 = (char *)v4 + v57;
  uint64_t v60 = type metadata accessor for Period();
  __dsta = *(void **)(v60 - 8);
  long long v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dsta[6];
  int v62 = v61(v58, 1, v60);
  int v63 = v61((uint64_t)v59, 1, v60);
  if (!v62)
  {
    if (v63)
    {
      sub_232F7CB8C(v58, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_50;
    }
    uint64_t v64 = v281;
    int v68 = v281(v58, 1, v17);
    int v69 = v281((uint64_t)v59, 1, v17);
    uint64_t v65 = v283;
    if (v68)
    {
      if (!v69)
      {
        *(unsigned char *)uint64_t v58 = *v59;
        uint64_t v70 = *((void *)v59 + 1);
        *(_DWORD *)(v58 + 16) = *((_DWORD *)v59 + 4);
        *(void *)(v58 + 8) = v70;
        if (*((void *)v59 + 7) == 1)
        {
          long long v71 = *(_OWORD *)(v59 + 24);
          long long v72 = *(_OWORD *)(v59 + 40);
          *(void *)(v58 + 56) = *((void *)v59 + 7);
          *(_OWORD *)(v58 + 24) = v71;
          *(_OWORD *)(v58 + 40) = v72;
        }
        else
        {
          *(unsigned char *)(v58 + 24) = v59[24];
          *(unsigned char *)(v58 + 25) = v59[25];
          *(unsigned char *)(v58 + 26) = v59[26];
          long long v110 = *(_OWORD *)(v59 + 28);
          *(_DWORD *)(v58 + 44) = *((_DWORD *)v59 + 11);
          *(_OWORD *)(v58 + 28) = v110;
          *(void *)(v58 + 48) = *((void *)v59 + 6);
          *(void *)(v58 + 56) = *((void *)v59 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v111 = *(int *)(v17 + 28);
        uint64_t v112 = (void *)(v58 + v111);
        uint64_t v113 = &v59[v111];
        uint64_t v114 = sub_23309B300();
        uint64_t v115 = *(void *)(v114 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v115 + 16))(v112, v113, v114);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        uint64_t v4 = v280;
        uint64_t v117 = *(int *)(v17 + 32);
        uint64_t v118 = (void *)(v58 + v117);
        uint64_t v119 = &v59[v117];
        void *v118 = *(void *)v119;
        v118[1] = *((void *)v119 + 1);
        uint64_t v120 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56);
        swift_bridgeObjectRetain();
        v120(v58, 0, 1, v17);
        uint64_t v64 = v281;
        uint64_t v65 = v283;
LABEL_97:
        uint64_t v136 = *(int *)(v60 + 20);
        uint64_t v137 = v58 + v136;
        uint64_t v138 = &v59[v136];
        int v139 = v64(v137, 1, v17);
        int v140 = v64((uint64_t)v138, 1, v17);
        if (v139)
        {
          if (!v140)
          {
            *(unsigned char *)uint64_t v137 = *v138;
            uint64_t v141 = *((void *)v138 + 1);
            *(_DWORD *)(v137 + 16) = *((_DWORD *)v138 + 4);
            *(void *)(v137 + 8) = v141;
            if (*((void *)v138 + 7) == 1)
            {
              long long v142 = *(_OWORD *)(v138 + 24);
              long long v143 = *(_OWORD *)(v138 + 40);
              *(void *)(v137 + 56) = *((void *)v138 + 7);
              *(_OWORD *)(v137 + 24) = v142;
              *(_OWORD *)(v137 + 40) = v143;
            }
            else
            {
              *(unsigned char *)(v137 + 24) = v138[24];
              *(unsigned char *)(v137 + 25) = v138[25];
              *(unsigned char *)(v137 + 26) = v138[26];
              long long v240 = *(_OWORD *)(v138 + 28);
              *(_DWORD *)(v137 + 44) = *((_DWORD *)v138 + 11);
              *(_OWORD *)(v137 + 28) = v240;
              *(void *)(v137 + 48) = *((void *)v138 + 6);
              *(void *)(v137 + 56) = *((void *)v138 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v241 = *(int *)(v17 + 28);
            uint64_t v242 = (void *)(v137 + v241);
            uint64_t v243 = &v138[v241];
            uint64_t v244 = sub_23309B300();
            uint64_t v245 = *(void *)(v244 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v245 + 48))(v243, 1, v244))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v242, v243, *(void *)(*(void *)(v246 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v245 + 16))(v242, v243, v244);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v245 + 56))(v242, 0, 1, v244);
            }
            uint64_t v65 = v283;
            uint64_t v247 = *(int *)(v17 + 32);
            uint64_t v248 = (void *)(v137 + v247);
            uint64_t v249 = &v138[v247];
            *uint64_t v248 = *(void *)v249;
            v248[1] = *((void *)v249 + 1);
            uint64_t v250 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56);
            swift_bridgeObjectRetain();
            v250(v137, 0, 1, v17);
            goto LABEL_51;
          }
LABEL_103:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v137, v138, *(void *)(*(void *)(v144 - 8) + 64));
          goto LABEL_104;
        }
        if (v140)
        {
          sub_232F7CB8C(v137, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_103;
        }
        *(unsigned char *)uint64_t v137 = *v138;
        *(void *)(v137 + 8) = *((void *)v138 + 1);
        *(_WORD *)(v137 + 16) = *((_WORD *)v138 + 8);
        *(_WORD *)(v137 + 18) = *((_WORD *)v138 + 9);
        uint64_t v184 = (long long *)(v137 + 24);
        uint64_t v185 = (long long *)(v138 + 24);
        uint64_t v186 = *((void *)v138 + 7);
        if (*(void *)(v137 + 56) == 1)
        {
          if (v186 == 1)
          {
            long long v187 = *v185;
            long long v188 = *(_OWORD *)(v138 + 40);
            *(void *)(v137 + 56) = *((void *)v138 + 7);
            *uint64_t v184 = v187;
            *(_OWORD *)(v137 + 40) = v188;
          }
          else
          {
            *(unsigned char *)(v137 + 24) = v138[24];
            *(unsigned char *)(v137 + 25) = v138[25];
            *(unsigned char *)(v137 + 26) = v138[26];
            long long v253 = *(_OWORD *)(v138 + 28);
            *(_DWORD *)(v137 + 44) = *((_DWORD *)v138 + 11);
            *(_OWORD *)(v137 + 28) = v253;
            *(void *)(v137 + 48) = *((void *)v138 + 6);
            *(void *)(v137 + 56) = *((void *)v138 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v186 == 1)
        {
          sub_232F0434C(v137 + 24);
          uint64_t v251 = *((void *)v138 + 7);
          long long v252 = *(_OWORD *)(v138 + 40);
          *uint64_t v184 = *v185;
          *(_OWORD *)(v137 + 40) = v252;
          *(void *)(v137 + 56) = v251;
        }
        else
        {
          *(unsigned char *)(v137 + 24) = v138[24];
          *(unsigned char *)(v137 + 25) = v138[25];
          *(unsigned char *)(v137 + 26) = v138[26];
          *(_DWORD *)(v137 + 28) = *((_DWORD *)v138 + 7);
          *(_WORD *)(v137 + 32) = *((_WORD *)v138 + 16);
          *(_WORD *)(v137 + 34) = *((_WORD *)v138 + 17);
          *(_WORD *)(v137 + 36) = *((_WORD *)v138 + 18);
          *(_WORD *)(v137 + 38) = *((_WORD *)v138 + 19);
          *(_WORD *)(v137 + 40) = *((_WORD *)v138 + 20);
          *(_WORD *)(v137 + 42) = *((_WORD *)v138 + 21);
          *(_WORD *)(v137 + 44) = *((_WORD *)v138 + 22);
          *(_WORD *)(v137 + 46) = *((_WORD *)v138 + 23);
          *(void *)(v137 + 48) = *((void *)v138 + 6);
          *(void *)(v137 + 56) = *((void *)v138 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v254 = *(int *)(v17 + 28);
        uint64_t v255 = (void *)(v137 + v254);
        uint64_t v256 = &v138[v254];
        uint64_t v257 = sub_23309B300();
        uint64_t v268 = *(void *)(v257 - 8);
        int v258 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v268 + 48);
        __dstd = v255;
        LODWORD(v255) = v258(v255, 1, v257);
        int v259 = v258(v256, 1, v257);
        if (v255)
        {
          if (!v259)
          {
            (*(void (**)(void *, char *, uint64_t))(v268 + 16))(__dstd, v256, v257);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v268 + 56))(__dstd, 0, 1, v257);
            goto LABEL_178;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v261 = *(void *)(*(void *)(v260 - 8) + 64);
          uint64_t v262 = __dstd;
        }
        else
        {
          if (!v259)
          {
            (*(void (**)(void *, char *, uint64_t))(v268 + 24))(__dstd, v256, v257);
            goto LABEL_178;
          }
          (*(void (**)(void *, uint64_t))(v268 + 8))(__dstd, v257);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v261 = *(void *)(*(void *)(v263 - 8) + 64);
          uint64_t v262 = __dstd;
        }
        memcpy(v262, v256, v261);
LABEL_178:
        uint64_t v4 = v280;
        uint64_t v64 = v281;
        uint64_t v264 = *(int *)(v17 + 32);
        uint64_t v265 = (void *)(v137 + v264);
        uint64_t v266 = &v138[v264];
        *uint64_t v265 = *(void *)v266;
        v265[1] = *((void *)v266 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v65 = v283;
        goto LABEL_104;
      }
LABEL_60:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v58, v59, *(void *)(*(void *)(v76 - 8) + 64));
      goto LABEL_97;
    }
    if (v69)
    {
      sub_232F7CB8C(v58, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_60;
    }
    *(unsigned char *)uint64_t v58 = *v59;
    *(void *)(v58 + 8) = *((void *)v59 + 1);
    *(_WORD *)(v58 + 16) = *((_WORD *)v59 + 8);
    *(_WORD *)(v58 + 18) = *((_WORD *)v59 + 9);
    uint64_t v105 = (long long *)(v58 + 24);
    uint64_t v106 = (long long *)(v59 + 24);
    uint64_t v107 = *((void *)v59 + 7);
    if (*(void *)(v58 + 56) == 1)
    {
      if (v107 == 1)
      {
        long long v108 = *v106;
        long long v109 = *(_OWORD *)(v59 + 40);
        *(void *)(v58 + 56) = *((void *)v59 + 7);
        *uint64_t v105 = v108;
        *(_OWORD *)(v58 + 40) = v109;
      }
      else
      {
        *(unsigned char *)(v58 + 24) = v59[24];
        *(unsigned char *)(v58 + 25) = v59[25];
        *(unsigned char *)(v58 + 26) = v59[26];
        long long v123 = *(_OWORD *)(v59 + 28);
        *(_DWORD *)(v58 + 44) = *((_DWORD *)v59 + 11);
        *(_OWORD *)(v58 + 28) = v123;
        *(void *)(v58 + 48) = *((void *)v59 + 6);
        *(void *)(v58 + 56) = *((void *)v59 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v107 == 1)
    {
      sub_232F0434C(v58 + 24);
      uint64_t v121 = *((void *)v59 + 7);
      long long v122 = *(_OWORD *)(v59 + 40);
      *uint64_t v105 = *v106;
      *(_OWORD *)(v58 + 40) = v122;
      *(void *)(v58 + 56) = v121;
    }
    else
    {
      *(unsigned char *)(v58 + 24) = v59[24];
      *(unsigned char *)(v58 + 25) = v59[25];
      *(unsigned char *)(v58 + 26) = v59[26];
      *(_DWORD *)(v58 + 28) = *((_DWORD *)v59 + 7);
      *(_WORD *)(v58 + 32) = *((_WORD *)v59 + 16);
      *(_WORD *)(v58 + 34) = *((_WORD *)v59 + 17);
      *(_WORD *)(v58 + 36) = *((_WORD *)v59 + 18);
      *(_WORD *)(v58 + 38) = *((_WORD *)v59 + 19);
      *(_WORD *)(v58 + 40) = *((_WORD *)v59 + 20);
      *(_WORD *)(v58 + 42) = *((_WORD *)v59 + 21);
      *(_WORD *)(v58 + 44) = *((_WORD *)v59 + 22);
      *(_WORD *)(v58 + 46) = *((_WORD *)v59 + 23);
      *(void *)(v58 + 48) = *((void *)v59 + 6);
      *(void *)(v58 + 56) = *((void *)v59 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v124 = *(int *)(v17 + 28);
    int v125 = (void *)(v58 + v124);
    __dstb = &v59[v124];
    uint64_t v126 = sub_23309B300();
    uint64_t v267 = *(void *)(v126 - 8);
    uint64_t v127 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v267 + 48);
    __srca = v125;
    LODWORD(v125) = v127(v125, 1, v126);
    int v128 = v127(__dstb, 1, v126);
    if (v125)
    {
      uint64_t v64 = v281;
      if (!v128)
      {
        (*(void (**)(void *, char *, uint64_t))(v267 + 16))(__srca, __dstb, v126);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v267 + 56))(__srca, 0, 1, v126);
        goto LABEL_96;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v130 = *(void *)(*(void *)(v129 - 8) + 64);
      uint64_t v131 = __srca;
    }
    else
    {
      uint64_t v64 = v281;
      if (!v128)
      {
        (*(void (**)(void *, char *, uint64_t))(v267 + 24))(__srca, __dstb, v126);
        goto LABEL_96;
      }
      (*(void (**)(void *, uint64_t))(v267 + 8))(__srca, v126);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v130 = *(void *)(*(void *)(v132 - 8) + 64);
      uint64_t v131 = __srca;
    }
    memcpy(v131, __dstb, v130);
LABEL_96:
    uint64_t v65 = v283;
    uint64_t v133 = *(int *)(v17 + 32);
    uint64_t v134 = (void *)(v58 + v133);
    size_t v135 = &v59[v133];
    *uint64_t v134 = *(void *)v135;
    v134[1] = *((void *)v135 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v280;
    goto LABEL_97;
  }
  if (v63)
  {
LABEL_50:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v58, v59, *(void *)(*(void *)(v67 - 8) + 64));
    uint64_t v65 = v283;
LABEL_51:
    uint64_t v64 = v281;
    goto LABEL_104;
  }
  uint64_t v64 = v281;
  uint64_t v65 = v283;
  if (v281((uint64_t)v59, 1, v17))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v58, v59, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v58 = *v59;
    uint64_t v73 = *((void *)v59 + 1);
    *(_DWORD *)(v58 + 16) = *((_DWORD *)v59 + 4);
    *(void *)(v58 + 8) = v73;
    if (*((void *)v59 + 7) == 1)
    {
      long long v74 = *(_OWORD *)(v59 + 24);
      long long v75 = *(_OWORD *)(v59 + 40);
      *(void *)(v58 + 56) = *((void *)v59 + 7);
      *(_OWORD *)(v58 + 24) = v74;
      *(_OWORD *)(v58 + 40) = v75;
    }
    else
    {
      *(unsigned char *)(v58 + 24) = v59[24];
      *(unsigned char *)(v58 + 25) = v59[25];
      *(unsigned char *)(v58 + 26) = v59[26];
      long long v77 = *(_OWORD *)(v59 + 28);
      *(_DWORD *)(v58 + 44) = *((_DWORD *)v59 + 11);
      *(_OWORD *)(v58 + 28) = v77;
      *(void *)(v58 + 48) = *((void *)v59 + 6);
      *(void *)(v58 + 56) = *((void *)v59 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v78 = *(int *)(v17 + 28);
    uint64_t v79 = (void *)(v58 + v78);
    uint64_t v80 = &v59[v78];
    uint64_t v81 = sub_23309B300();
    uint64_t v82 = *(void *)(v81 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v82 + 16))(v79, v80, v81);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    uint64_t v4 = v280;
    uint64_t v84 = *(int *)(v17 + 32);
    uint64_t v85 = (void *)(v58 + v84);
    uint64_t v86 = &v59[v84];
    void *v85 = *(void *)v86;
    v85[1] = *((void *)v86 + 1);
    uint64_t v87 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56);
    swift_bridgeObjectRetain();
    v87(v58, 0, 1, v17);
    uint64_t v64 = v281;
    uint64_t v65 = v283;
  }
  uint64_t v88 = *(int *)(v60 + 20);
  uint64_t v89 = (char *)(v58 + v88);
  uint64_t v90 = &v59[v88];
  if (v64((uint64_t)v90, 1, v17))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    *uint64_t v89 = *v90;
    uint64_t v92 = *((void *)v90 + 1);
    *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
    *((void *)v89 + 1) = v92;
    if (*((void *)v90 + 7) == 1)
    {
      long long v93 = *(_OWORD *)(v90 + 24);
      long long v94 = *(_OWORD *)(v90 + 40);
      *((void *)v89 + 7) = *((void *)v90 + 7);
      *(_OWORD *)(v89 + 24) = v93;
      *(_OWORD *)(v89 + 40) = v94;
    }
    else
    {
      v89[24] = v90[24];
      v89[25] = v90[25];
      v89[26] = v90[26];
      long long v95 = *(_OWORD *)(v90 + 28);
      *((_DWORD *)v89 + 11) = *((_DWORD *)v90 + 11);
      *(_OWORD *)(v89 + 28) = v95;
      *((void *)v89 + 6) = *((void *)v90 + 6);
      *((void *)v89 + 7) = *((void *)v90 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v96 = *(int *)(v17 + 28);
    __src = &v89[v96];
    uint64_t v97 = &v90[v96];
    uint64_t v98 = sub_23309B300();
    uint64_t v99 = *(void *)(v98 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v97, *(void *)(*(void *)(v100 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(__src, v97, v98);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(__src, 0, 1, v98);
    }
    uint64_t v65 = v283;
    uint64_t v101 = *(int *)(v17 + 32);
    uint64_t v102 = &v89[v101];
    uint64_t v103 = &v90[v101];
    *(void *)uint64_t v102 = *(void *)v103;
    *((void *)v102 + 1) = *((void *)v103 + 1);
    uint64_t v104 = *(void (**)(char *, void, uint64_t, uint64_t))(v276 + 56);
    swift_bridgeObjectRetain();
    v104(v89, 0, 1, v17);
    uint64_t v4 = v280;
    uint64_t v64 = v281;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))__dsta[7])(v58, 0, 1, v60);
LABEL_104:
  uint64_t v145 = v65[13];
  uint64_t v146 = (uint64_t)a1 + v145;
  uint64_t v147 = (char *)v4 + v145;
  int v148 = v64((uint64_t)a1 + v145, 1, v17);
  int v149 = v64((uint64_t)v147, 1, v17);
  if (!v148)
  {
    if (v149)
    {
      sub_232F7CB8C(v146, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_110;
    }
    *(unsigned char *)uint64_t v146 = *v147;
    *(void *)(v146 + 8) = *((void *)v147 + 1);
    *(_WORD *)(v146 + 16) = *((_WORD *)v147 + 8);
    *(_WORD *)(v146 + 18) = *((_WORD *)v147 + 9);
    int v154 = (long long *)(v146 + 24);
    uint64_t v155 = (long long *)(v147 + 24);
    uint64_t v156 = *((void *)v147 + 7);
    if (*(void *)(v146 + 56) == 1)
    {
      if (v156 == 1)
      {
        long long v157 = *v155;
        long long v158 = *(_OWORD *)(v147 + 40);
        *(void *)(v146 + 56) = *((void *)v147 + 7);
        *int v154 = v157;
        *(_OWORD *)(v146 + 40) = v158;
      }
      else
      {
        *(unsigned char *)(v146 + 24) = v147[24];
        *(unsigned char *)(v146 + 25) = v147[25];
        *(unsigned char *)(v146 + 26) = v147[26];
        long long v172 = *(_OWORD *)(v147 + 28);
        *(_DWORD *)(v146 + 44) = *((_DWORD *)v147 + 11);
        *(_OWORD *)(v146 + 28) = v172;
        *(void *)(v146 + 48) = *((void *)v147 + 6);
        *(void *)(v146 + 56) = *((void *)v147 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v156 == 1)
    {
      sub_232F0434C(v146 + 24);
      uint64_t v170 = *((void *)v147 + 7);
      long long v171 = *(_OWORD *)(v147 + 40);
      *int v154 = *v155;
      *(_OWORD *)(v146 + 40) = v171;
      *(void *)(v146 + 56) = v170;
    }
    else
    {
      *(unsigned char *)(v146 + 24) = v147[24];
      *(unsigned char *)(v146 + 25) = v147[25];
      *(unsigned char *)(v146 + 26) = v147[26];
      *(_DWORD *)(v146 + 28) = *((_DWORD *)v147 + 7);
      *(_WORD *)(v146 + 32) = *((_WORD *)v147 + 16);
      *(_WORD *)(v146 + 34) = *((_WORD *)v147 + 17);
      *(_WORD *)(v146 + 36) = *((_WORD *)v147 + 18);
      *(_WORD *)(v146 + 38) = *((_WORD *)v147 + 19);
      *(_WORD *)(v146 + 40) = *((_WORD *)v147 + 20);
      *(_WORD *)(v146 + 42) = *((_WORD *)v147 + 21);
      *(_WORD *)(v146 + 44) = *((_WORD *)v147 + 22);
      *(_WORD *)(v146 + 46) = *((_WORD *)v147 + 23);
      *(void *)(v146 + 48) = *((void *)v147 + 6);
      *(void *)(v146 + 56) = *((void *)v147 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v173 = *(int *)(v17 + 28);
    uint64_t v174 = (void *)(v146 + v173);
    uint64_t v175 = &v147[v173];
    uint64_t v176 = sub_23309B300();
    uint64_t v177 = *(void *)(v176 - 8);
    uint64_t v178 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v177 + 48);
    uint64_t v277 = v174;
    LODWORD(v174) = v178(v174, 1, v176);
    int v179 = v178(v175, 1, v176);
    if (v174)
    {
      if (!v179)
      {
        (*(void (**)(void *, char *, uint64_t))(v177 + 16))(v277, v175, v176);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v177 + 56))(v277, 0, 1, v176);
        goto LABEL_134;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v181 = *(void *)(*(void *)(v180 - 8) + 64);
      uint64_t v182 = v277;
    }
    else
    {
      if (!v179)
      {
        (*(void (**)(void *, char *, uint64_t))(v177 + 24))(v277, v175, v176);
        goto LABEL_134;
      }
      (*(void (**)(void *, uint64_t))(v177 + 8))(v277, v176);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v181 = *(void *)(*(void *)(v183 - 8) + 64);
      uint64_t v182 = v277;
    }
    memcpy(v182, v175, v181);
LABEL_134:
    uint64_t v4 = v280;
    uint64_t v65 = v283;
    uint64_t v189 = *(int *)(v17 + 32);
    uint64_t v190 = (void *)(v146 + v189);
    uint64_t v191 = &v147[v189];
    *uint64_t v190 = *(void *)v191;
    v190[1] = *((void *)v191 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_135;
  }
  if (v149)
  {
LABEL_110:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v146, v147, *(void *)(*(void *)(v153 - 8) + 64));
    goto LABEL_135;
  }
  *(unsigned char *)uint64_t v146 = *v147;
  uint64_t v150 = *((void *)v147 + 1);
  *(_DWORD *)(v146 + 16) = *((_DWORD *)v147 + 4);
  *(void *)(v146 + 8) = v150;
  if (*((void *)v147 + 7) == 1)
  {
    long long v151 = *(_OWORD *)(v147 + 24);
    long long v152 = *(_OWORD *)(v147 + 40);
    *(void *)(v146 + 56) = *((void *)v147 + 7);
    *(_OWORD *)(v146 + 24) = v151;
    *(_OWORD *)(v146 + 40) = v152;
  }
  else
  {
    *(unsigned char *)(v146 + 24) = v147[24];
    *(unsigned char *)(v146 + 25) = v147[25];
    *(unsigned char *)(v146 + 26) = v147[26];
    long long v159 = *(_OWORD *)(v147 + 28);
    *(_DWORD *)(v146 + 44) = *((_DWORD *)v147 + 11);
    *(_OWORD *)(v146 + 28) = v159;
    *(void *)(v146 + 48) = *((void *)v147 + 6);
    *(void *)(v146 + 56) = *((void *)v147 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v160 = *(int *)(v17 + 28);
  uint64_t v161 = (void *)(v146 + v160);
  uint64_t v162 = &v147[v160];
  uint64_t v163 = sub_23309B300();
  uint64_t v164 = *(void *)(v163 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v161, v162, *(void *)(*(void *)(v165 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v164 + 16))(v161, v162, v163);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
  }
  uint64_t v65 = v283;
  uint64_t v166 = *(int *)(v17 + 32);
  uint64_t v167 = (void *)(v146 + v166);
  uint64_t v168 = &v147[v166];
  *uint64_t v167 = *(void *)v168;
  v167[1] = *((void *)v168 + 1);
  uint64_t v169 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56);
  swift_bridgeObjectRetain();
  v169(v146, 0, 1, v17);
LABEL_135:
  *(void *)((char *)a1 + v65[14]) = *(void *)((char *)v4 + v65[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v192 = v65[15];
  uint64_t v193 = (void *)((char *)a1 + v192);
  uint64_t v194 = (void *)((char *)v4 + v192);
  *uint64_t v193 = *v194;
  v193[1] = v194[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v195 = v65[16];
  uint64_t v196 = (uint64_t)a1 + v195;
  uint64_t v197 = (char *)v4 + v195;
  uint64_t v198 = *(void *)((char *)a1 + v195 + 8);
  uint64_t v199 = *(void *)((char *)v4 + v195 + 8);
  if (v198 == 1)
  {
    if (v199 == 1)
    {
      long long v200 = *(_OWORD *)v197;
      *(void *)(v196 + 16) = *((void *)v197 + 2);
      *(_OWORD *)uint64_t v196 = v200;
    }
    else
    {
      *(void *)uint64_t v196 = *(void *)v197;
      *(void *)(v196 + 8) = *((void *)v197 + 1);
      *(void *)(v196 + 16) = *((void *)v197 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v199 == 1)
  {
    sub_232F042F8(v196);
    uint64_t v201 = *((void *)v197 + 2);
    *(_OWORD *)uint64_t v196 = *(_OWORD *)v197;
    *(void *)(v196 + 16) = v201;
  }
  else
  {
    *(void *)uint64_t v196 = *(void *)v197;
    *(void *)(v196 + 8) = *((void *)v197 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v196 + 16) = *((void *)v197 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v202 = v65[17];
  uint64_t v203 = (void *)((char *)a1 + v202);
  uint64_t v204 = (void *)((char *)v4 + v202);
  uint64_t v205 = type metadata accessor for Quantity();
  uint64_t v206 = *(void *)(v205 - 8);
  uint64_t v207 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v206 + 48);
  int v208 = v207(v203, 1, v205);
  int v209 = v207(v204, 1, v205);
  if (!v208)
  {
    if (v209)
    {
      sub_232F7CB8C((uint64_t)v203, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_148;
    }
    long long v217 = *(_OWORD *)v204;
    *(void *)((char *)v203 + 13) = *(void *)((char *)v204 + 13);
    *(_OWORD *)uint64_t v203 = v217;
    v203[3] = v204[3];
    v203[4] = v204[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v203[5] = v204[5];
    v203[6] = v204[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v218 = *(int *)(v205 + 28);
    uint64_t v219 = (char *)v203 + v218;
    uint64_t v220 = (char *)v204 + v218;
    uint64_t v221 = sub_23309AF80();
    uint64_t v222 = *(void *)(v221 - 8);
    int v223 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v222 + 48);
    uint64_t v279 = v219;
    LODWORD(v219) = v223(v219, 1, v221);
    int v224 = v223(v220, 1, v221);
    if (v219)
    {
      if (!v224)
      {
        (*(void (**)(void *, char *, uint64_t))(v222 + 16))(v279, v220, v221);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v222 + 56))(v279, 0, 1, v221);
        goto LABEL_159;
      }
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v226 = *(void *)(*(void *)(v225 - 8) + 64);
      long long v227 = v279;
    }
    else
    {
      if (!v224)
      {
        (*(void (**)(void *, char *, uint64_t))(v222 + 24))(v279, v220, v221);
        goto LABEL_159;
      }
      (*(void (**)(void *, uint64_t))(v222 + 8))(v279, v221);
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v226 = *(void *)(*(void *)(v232 - 8) + 64);
      long long v227 = v279;
    }
    memcpy(v227, v220, v226);
LABEL_159:
    uint64_t v4 = v280;
    uint64_t v65 = v283;
    uint64_t v233 = *(int *)(v205 + 32);
    uint64_t v234 = (void *)((char *)v203 + v233);
    uint64_t v235 = (void *)((char *)v204 + v233);
    *uint64_t v234 = *v235;
    v234[1] = v235[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_160;
  }
  if (v209)
  {
LABEL_148:
    sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v203, v204, *(void *)(*(void *)(v216 - 8) + 64));
    goto LABEL_160;
  }
  long long v210 = *(_OWORD *)v204;
  *(void *)((char *)v203 + 13) = *(void *)((char *)v204 + 13);
  *(_OWORD *)uint64_t v203 = v210;
  v203[3] = v204[3];
  v203[4] = v204[4];
  v203[5] = v204[5];
  v203[6] = v204[6];
  uint64_t v211 = *(int *)(v205 + 28);
  __dstc = (char *)v203 + v211;
  uint64_t v278 = v206;
  int v282 = (char *)v204 + v211;
  uint64_t v212 = sub_23309AF80();
  uint64_t v213 = *(void *)(v212 - 8);
  uint64_t v214 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v214(v282, 1, v212))
  {
    sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(__dstc, v282, *(void *)(*(void *)(v215 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(__dstc, v282, v212);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v213 + 56))(__dstc, 0, 1, v212);
  }
  uint64_t v4 = v280;
  uint64_t v65 = v283;
  uint64_t v228 = *(int *)(v205 + 32);
  uint64_t v229 = (void *)((char *)v203 + v228);
  uint64_t v230 = (void *)((char *)v204 + v228);
  void *v229 = *v230;
  v229[1] = v230[1];
  uint64_t v231 = *(void (**)(void *, void, uint64_t, uint64_t))(v278 + 56);
  swift_bridgeObjectRetain();
  v231(v203, 0, 1, v205);
LABEL_160:
  *(void *)((char *)a1 + v65[18]) = *(void *)((char *)v4 + v65[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v236 = v65[19];
  uint64_t v237 = (void *)((char *)a1 + v236);
  uint64_t v238 = (void *)((char *)v4 + v236);
  void *v237 = *v238;
  v237[1] = v238[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v7 = a3[11];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  long long v77 = *(void **)(v10 - 8);
  uint64_t v11 = (unsigned int (*)(void, void, void))v77[6];
  if (v11(v9, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    unsigned char *v8 = *v9;
    *((void *)v8 + 1) = *((void *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((void *)v8 + 7) = *((void *)v9 + 7);
    uint64_t v13 = *(int *)(v10 + 28);
    __dst = &v8[v13];
    long long v74 = v11;
    uint64_t v14 = &v9[v13];
    uint64_t v15 = sub_23309B300();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v77[7])(v8, 0, 1, v10);
    uint64_t v11 = v74;
  }
  uint64_t v18 = a3[12];
  int v19 = (unsigned char *)(a1 + v18);
  uint64_t v20 = (unsigned char *)(a2 + v18);
  uint64_t v21 = type metadata accessor for Period();
  long long v22 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v21 - 8);
  if (v22[6](v20, 1, v21))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    __dsta = v22;
    if (v11(v20, 1, v10))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      long long v75 = v11;
      *int v19 = *v20;
      *((void *)v19 + 1) = *((void *)v20 + 1);
      *((_DWORD *)v19 + 4) = *((_DWORD *)v20 + 4);
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
      *((void *)v19 + 7) = *((void *)v20 + 7);
      uint64_t v25 = *(int *)(v10 + 28);
      uint64_t v70 = &v19[v25];
      uint64_t v26 = &v20[v25];
      uint64_t v27 = sub_23309B300();
      uint64_t v67 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v67 + 48))(v26, 1, v27))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v70, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v67 + 32))(v70, v26, v27);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v67 + 56))(v70, 0, 1, v27);
      }
      *(_OWORD *)&v19[*(int *)(v10 + 32)] = *(_OWORD *)&v20[*(int *)(v10 + 32)];
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v77[7])(v19, 0, 1, v10);
      uint64_t v11 = v75;
    }
    uint64_t v29 = *(int *)(v21 + 20);
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    if (v11(v31, 1, v10))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      uint64_t v76 = v11;
      *uint64_t v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
      *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
      *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
      *((void *)v30 + 7) = *((void *)v31 + 7);
      uint64_t v33 = *(int *)(v10 + 28);
      long long v71 = &v30[v33];
      uint64_t v34 = &v31[v33];
      uint64_t v35 = sub_23309B300();
      uint64_t v68 = *(void *)(v35 - 8);
      int v69 = v34;
      uint64_t v36 = v34;
      uint64_t v37 = v35;
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v68 + 48))(v36, 1, v35))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v71, v69, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, const void *, uint64_t))(v68 + 32))(v71, v69, v37);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v37);
      }
      *(_OWORD *)&v30[*(int *)(v10 + 32)] = *(_OWORD *)&v31[*(int *)(v10 + 32)];
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v77[7])(v30, 0, 1, v10);
      uint64_t v11 = v76;
    }
    (*((void (**)(unsigned char *, void, uint64_t, uint64_t))__dsta + 7))(v19, 0, 1, v21);
  }
  uint64_t v39 = a3[13];
  uint64_t v40 = (unsigned char *)(a1 + v39);
  long long v41 = (unsigned char *)(a2 + v39);
  if (v11(a2 + v39, 1, v10))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    unsigned char *v40 = *v41;
    *((void *)v40 + 1) = *((void *)v41 + 1);
    *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
    *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
    *((void *)v40 + 7) = *((void *)v41 + 7);
    uint64_t v43 = *(int *)(v10 + 28);
    long long v44 = &v40[v43];
    uint64_t v45 = &v41[v43];
    uint64_t v46 = sub_23309B300();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    *(_OWORD *)&v40[*(int *)(v10 + 32)] = *(_OWORD *)&v41[*(int *)(v10 + 32)];
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v77[7])(v40, 0, 1, v10);
  }
  uint64_t v49 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v49) = *(_OWORD *)(a2 + v49);
  uint64_t v50 = a3[16];
  uint64_t v51 = a3[17];
  uint64_t v52 = a1 + v50;
  uint64_t v53 = (long long *)(a2 + v50);
  long long v54 = *v53;
  *(void *)(v52 + 16) = *((void *)v53 + 2);
  *(_OWORD *)uint64_t v52 = v54;
  uint64_t v55 = (_OWORD *)(a1 + v51);
  uint64_t v56 = (_OWORD *)(a2 + v51);
  uint64_t v57 = type metadata accessor for Quantity();
  uint64_t v58 = *(void *)(v57 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    *uint64_t v55 = *v56;
    *(void *)((char *)v55 + 13) = *(void *)((char *)v56 + 13);
    *(_OWORD *)((char *)v55 + 24) = *(_OWORD *)((char *)v56 + 24);
    *(_OWORD *)((char *)v55 + 40) = *(_OWORD *)((char *)v56 + 40);
    uint64_t v60 = *(int *)(v57 + 28);
    uint64_t v78 = (char *)v55 + v60;
    long long v61 = (char *)v56 + v60;
    uint64_t v62 = sub_23309AF80();
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v78, v61, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v78, v61, v62);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v78, 0, 1, v62);
    }
    *(_OWORD *)((char *)v55 + *(int *)(v57 + 32)) = *(_OWORD *)((char *)v56 + *(int *)(v57 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  uint64_t v65 = a3[19];
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v65) = *(_OWORD *)(a2 + v65);
  return a1;
}

uint64_t assignWithTake for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
LABEL_4:
    void *v8 = v9;
    goto LABEL_6;
  }
  void *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  if (v11 == 1)
  {
    sub_232F042F8(a1 + 56);
    goto LABEL_9;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for FHIRDateTime();
  uint64_t v210 = *(void *)(v17 - 8);
  uint64_t v214 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  int v18 = v214(v15, 1, v17);
  int v19 = v214(v16, 1, v17);
  uint64_t v213 = a3;
  if (!v18)
  {
    if (v19)
    {
      sub_232F7CB8C(v15, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
    if (*(void *)(v15 + 56) != 1)
    {
      uint64_t v28 = *(void *)(v16 + 56);
      if (v28 != 1)
      {
        *(unsigned char *)(v15 + 24) = *(unsigned char *)(v16 + 24);
        *(_WORD *)(v15 + 25) = *(_WORD *)(v16 + 25);
        *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
        *(void *)(v15 + 48) = *(void *)(v16 + 48);
        *(void *)(v15 + 56) = v28;
        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v30 = *(int *)(v17 + 28);
        uint64_t v31 = (void *)(v15 + v30);
        uint64_t v32 = (void *)(v16 + v30);
        uint64_t v33 = sub_23309B300();
        uint64_t v201 = *(void *)(v33 - 8);
        uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v201 + 48);
        uint64_t v206 = v31;
        LODWORD(v31) = v34(v31, 1, v33);
        int v35 = v34(v32, 1, v33);
        if (v31)
        {
          if (!v35)
          {
            (*(void (**)(void *, void *, uint64_t))(v201 + 32))(v206, v32, v33);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v201 + 56))(v206, 0, 1, v33);
            goto LABEL_33;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v37 = *(void *)(*(void *)(v36 - 8) + 64);
          uint64_t v38 = v206;
        }
        else
        {
          if (!v35)
          {
            (*(void (**)(void *, void *, uint64_t))(v201 + 40))(v206, v32, v33);
            goto LABEL_33;
          }
          (*(void (**)(void *, uint64_t))(v201 + 8))(v206, v33);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v37 = *(void *)(*(void *)(v39 - 8) + 64);
          uint64_t v38 = v206;
        }
        memcpy(v38, v32, v37);
LABEL_33:
        a3 = v213;
        uint64_t v40 = *(int *)(v17 + 32);
        long long v41 = (void *)(v15 + v40);
        uint64_t v42 = (uint64_t *)(v16 + v40);
        uint64_t v44 = *v42;
        uint64_t v43 = v42[1];
        *long long v41 = v44;
        v41[1] = v43;
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      sub_232F0434C(v15 + 24);
    }
    long long v29 = *(_OWORD *)(v16 + 40);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
    *(_OWORD *)(v15 + 40) = v29;
    *(void *)(v15 + 56) = *(void *)(v16 + 56);
    goto LABEL_25;
  }
  if (v19)
  {
LABEL_17:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v15, (const void *)v16, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_34;
  }
  uint64_t v20 = a3;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *(void *)(v15 + 56) = *(void *)(v16 + 56);
  uint64_t v21 = *(int *)(v17 + 28);
  long long v22 = (void *)(v15 + v21);
  uint64_t v23 = (const void *)(v16 + v21);
  uint64_t v24 = sub_23309B300();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  a3 = v20;
  *(_OWORD *)(v15 + *(int *)(v17 + 32)) = *(_OWORD *)(v16 + *(int *)(v17 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v15, 0, 1, v17);
LABEL_34:
  uint64_t v45 = a3[12];
  uint64_t v46 = a1 + v45;
  uint64_t v47 = a2 + v45;
  uint64_t v48 = type metadata accessor for Period();
  uint64_t v207 = *(void **)(v48 - 8);
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v207[6];
  int v50 = v49(v46, 1, v48);
  int v51 = v49(v47, 1, v48);
  if (!v50)
  {
    if (v51)
    {
      sub_232F7CB8C(v46, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_40;
    }
    uint64_t v52 = v214;
    int v55 = v214(v46, 1, v17);
    int v56 = v214(v47, 1, v17);
    if (v55)
    {
      if (!v56)
      {
        *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
        *(void *)(v46 + 8) = *(void *)(v47 + 8);
        *(_DWORD *)(v46 + 16) = *(_DWORD *)(v47 + 16);
        *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
        *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
        *(void *)(v46 + 56) = *(void *)(v47 + 56);
        uint64_t v57 = *(int *)(v17 + 28);
        uint64_t v58 = (void *)(v46 + v57);
        uint64_t v59 = (const void *)(v47 + v57);
        uint64_t v60 = sub_23309B300();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v61 + 32))(v58, v59, v60);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        *(_OWORD *)(v46 + *(int *)(v17 + 32)) = *(_OWORD *)(v47 + *(int *)(v17 + 32));
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v46, 0, 1, v17);
        a3 = v213;
        uint64_t v52 = v214;
LABEL_76:
        uint64_t v95 = *(int *)(v48 + 20);
        uint64_t v96 = v46 + v95;
        uint64_t v97 = v47 + v95;
        int v98 = v52(v96, 1, v17);
        int v99 = v52(v97, 1, v17);
        if (v98)
        {
          if (!v99)
          {
            uint64_t v100 = a3;
            *(unsigned char *)uint64_t v96 = *(unsigned char *)v97;
            *(void *)(v96 + 8) = *(void *)(v97 + 8);
            *(_DWORD *)(v96 + 16) = *(_DWORD *)(v97 + 16);
            *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
            *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
            *(void *)(v96 + 56) = *(void *)(v97 + 56);
            uint64_t v101 = *(int *)(v17 + 28);
            uint64_t v102 = (void *)(v96 + v101);
            uint64_t v103 = (const void *)(v97 + v101);
            uint64_t v104 = sub_23309B300();
            uint64_t v105 = *(void *)(v104 - 8);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v105 + 32))(v102, v103, v104);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
            }
            a3 = v100;
            uint64_t v52 = v214;
            *(_OWORD *)(v96 + *(int *)(v17 + 32)) = *(_OWORD *)(v97 + *(int *)(v17 + 32));
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v96, 0, 1, v17);
            goto LABEL_89;
          }
LABEL_82:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v96, (const void *)v97, *(void *)(*(void *)(v107 - 8) + 64));
          goto LABEL_89;
        }
        if (v99)
        {
          sub_232F7CB8C(v96, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_82;
        }
        *(unsigned char *)uint64_t v96 = *(unsigned char *)v97;
        *(void *)(v96 + 8) = *(void *)(v97 + 8);
        *(_DWORD *)(v96 + 16) = *(_DWORD *)(v97 + 16);
        if (*(void *)(v96 + 56) != 1)
        {
          uint64_t v108 = *(void *)(v97 + 56);
          if (v108 != 1)
          {
            *(unsigned char *)(v96 + 24) = *(unsigned char *)(v97 + 24);
            *(_WORD *)(v96 + 25) = *(_WORD *)(v97 + 25);
            *(_DWORD *)(v96 + 28) = *(_DWORD *)(v97 + 28);
            *(_OWORD *)(v96 + 32) = *(_OWORD *)(v97 + 32);
            *(void *)(v96 + 48) = *(void *)(v97 + 48);
            *(void *)(v96 + 56) = v108;
            swift_bridgeObjectRelease();
LABEL_137:
            uint64_t v186 = *(int *)(v17 + 28);
            long long v187 = (void *)(v96 + v186);
            long long v188 = (void *)(v97 + v186);
            uint64_t v189 = sub_23309B300();
            uint64_t v203 = *(void *)(v189 - 8);
            uint64_t v190 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v203 + 48);
            int v209 = v187;
            LODWORD(v187) = v190(v187, 1, v189);
            int v191 = v190(v188, 1, v189);
            if (v187)
            {
              if (!v191)
              {
                (*(void (**)(void *, void *, uint64_t))(v203 + 32))(v209, v188, v189);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v203 + 56))(v209, 0, 1, v189);
                goto LABEL_145;
              }
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v193 = *(void *)(*(void *)(v192 - 8) + 64);
              uint64_t v194 = v209;
            }
            else
            {
              if (!v191)
              {
                (*(void (**)(void *, void *, uint64_t))(v203 + 40))(v209, v188, v189);
                goto LABEL_145;
              }
              (*(void (**)(void *, uint64_t))(v203 + 8))(v209, v189);
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v193 = *(void *)(*(void *)(v195 - 8) + 64);
              uint64_t v194 = v209;
            }
            memcpy(v194, v188, v193);
LABEL_145:
            a3 = v213;
            uint64_t v196 = *(int *)(v17 + 32);
            uint64_t v197 = (void *)(v96 + v196);
            uint64_t v198 = (uint64_t *)(v97 + v196);
            uint64_t v200 = *v198;
            uint64_t v199 = v198[1];
            *uint64_t v197 = v200;
            v197[1] = v199;
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
          sub_232F0434C(v96 + 24);
        }
        long long v109 = *(_OWORD *)(v97 + 40);
        *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
        *(_OWORD *)(v96 + 40) = v109;
        *(void *)(v96 + 56) = *(void *)(v97 + 56);
        goto LABEL_137;
      }
LABEL_50:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v46, (const void *)v47, *(void *)(*(void *)(v69 - 8) + 64));
      goto LABEL_76;
    }
    if (v56)
    {
      sub_232F7CB8C(v46, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_50;
    }
    *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
    *(void *)(v46 + 8) = *(void *)(v47 + 8);
    *(_DWORD *)(v46 + 16) = *(_DWORD *)(v47 + 16);
    if (*(void *)(v46 + 56) != 1)
    {
      uint64_t v79 = *(void *)(v47 + 56);
      if (v79 != 1)
      {
        *(unsigned char *)(v46 + 24) = *(unsigned char *)(v47 + 24);
        *(_WORD *)(v46 + 25) = *(_WORD *)(v47 + 25);
        *(_DWORD *)(v46 + 28) = *(_DWORD *)(v47 + 28);
        *(_OWORD *)(v46 + 32) = *(_OWORD *)(v47 + 32);
        *(void *)(v46 + 48) = *(void *)(v47 + 48);
        *(void *)(v46 + 56) = v79;
        swift_bridgeObjectRelease();
LABEL_67:
        uint64_t v81 = *(int *)(v17 + 28);
        uint64_t v82 = (void *)(v46 + v81);
        int v208 = (void *)(v47 + v81);
        uint64_t v83 = sub_23309B300();
        uint64_t v202 = *(void *)(v83 - 8);
        uint64_t v84 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v202 + 48);
        __srca = v82;
        LODWORD(v82) = v84(v82, 1, v83);
        int v85 = v84(v208, 1, v83);
        if (v82)
        {
          if (!v85)
          {
            (*(void (**)(void *, void *, uint64_t))(v202 + 32))(__srca, v208, v83);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v202 + 56))(__srca, 0, 1, v83);
            goto LABEL_75;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v87 = *(void *)(*(void *)(v86 - 8) + 64);
          uint64_t v88 = __srca;
        }
        else
        {
          if (!v85)
          {
            (*(void (**)(void *, void *, uint64_t))(v202 + 40))(__srca, v208, v83);
            goto LABEL_75;
          }
          (*(void (**)(void *, uint64_t))(v202 + 8))(__srca, v83);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v87 = *(void *)(*(void *)(v89 - 8) + 64);
          uint64_t v88 = __srca;
        }
        memcpy(v88, v208, v87);
LABEL_75:
        uint64_t v52 = v214;
        uint64_t v90 = *(int *)(v17 + 32);
        uint64_t v91 = (void *)(v46 + v90);
        uint64_t v92 = (uint64_t *)(v47 + v90);
        uint64_t v94 = *v92;
        uint64_t v93 = v92[1];
        *uint64_t v91 = v94;
        v91[1] = v93;
        swift_bridgeObjectRelease();
        a3 = v213;
        goto LABEL_76;
      }
      sub_232F0434C(v46 + 24);
    }
    long long v80 = *(_OWORD *)(v47 + 40);
    *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
    *(_OWORD *)(v46 + 40) = v80;
    *(void *)(v46 + 56) = *(void *)(v47 + 56);
    goto LABEL_67;
  }
  if (v51)
  {
LABEL_40:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v46, (const void *)v47, *(void *)(*(void *)(v54 - 8) + 64));
LABEL_41:
    uint64_t v52 = v214;
    goto LABEL_89;
  }
  uint64_t v52 = v214;
  if (v214(v47, 1, v17))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v46, (const void *)v47, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
    *(void *)(v46 + 8) = *(void *)(v47 + 8);
    *(_DWORD *)(v46 + 16) = *(_DWORD *)(v47 + 16);
    *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
    *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
    *(void *)(v46 + 56) = *(void *)(v47 + 56);
    uint64_t v63 = *(int *)(v17 + 28);
    uint64_t v64 = (void *)(v46 + v63);
    uint64_t v65 = (const void *)(v47 + v63);
    uint64_t v66 = sub_23309B300();
    uint64_t v67 = *(void *)(v66 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v64, v65, v66);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    *(_OWORD *)(v46 + *(int *)(v17 + 32)) = *(_OWORD *)(v47 + *(int *)(v17 + 32));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v46, 0, 1, v17);
    a3 = v213;
    uint64_t v52 = v214;
  }
  uint64_t v70 = *(int *)(v48 + 20);
  long long v71 = (unsigned char *)(v46 + v70);
  long long v72 = (unsigned char *)(v47 + v70);
  if (v52((uint64_t)v72, 1, v17))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    *long long v71 = *v72;
    *((void *)v71 + 1) = *((void *)v72 + 1);
    *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
    *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
    *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
    *((void *)v71 + 7) = *((void *)v72 + 7);
    uint64_t v74 = *(int *)(v17 + 28);
    __src = &v71[v74];
    long long v75 = &v72[v74];
    uint64_t v76 = sub_23309B300();
    uint64_t v77 = *(void *)(v76 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v75, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 32))(__src, v75, v76);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v77 + 56))(__src, 0, 1, v76);
    }
    *(_OWORD *)&v71[*(int *)(v17 + 32)] = *(_OWORD *)&v72[*(int *)(v17 + 32)];
    a3 = v213;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v210 + 56))(v71, 0, 1, v17);
    uint64_t v52 = v214;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v207[7])(v46, 0, 1, v48);
LABEL_89:
  uint64_t v110 = a3[13];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = a2 + v110;
  int v113 = v52(a1 + v110, 1, v17);
  int v114 = v52(v112, 1, v17);
  if (!v113)
  {
    if (v114)
    {
      sub_232F7CB8C(v111, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_95;
    }
    *(unsigned char *)uint64_t v111 = *(unsigned char *)v112;
    *(void *)(v111 + 8) = *(void *)(v112 + 8);
    *(_DWORD *)(v111 + 16) = *(_DWORD *)(v112 + 16);
    if (*(void *)(v111 + 56) != 1)
    {
      uint64_t v122 = *(void *)(v112 + 56);
      if (v122 != 1)
      {
        *(unsigned char *)(v111 + 24) = *(unsigned char *)(v112 + 24);
        *(_WORD *)(v111 + 25) = *(_WORD *)(v112 + 25);
        *(_DWORD *)(v111 + 28) = *(_DWORD *)(v112 + 28);
        *(_OWORD *)(v111 + 32) = *(_OWORD *)(v112 + 32);
        *(void *)(v111 + 48) = *(void *)(v112 + 48);
        *(void *)(v111 + 56) = v122;
        swift_bridgeObjectRelease();
LABEL_103:
        uint64_t v124 = *(int *)(v17 + 28);
        int v125 = (void *)(v111 + v124);
        uint64_t v126 = (void *)(v112 + v124);
        uint64_t v127 = sub_23309B300();
        uint64_t v211 = *(void *)(v127 - 8);
        int v128 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v211 + 48);
        uint64_t v215 = v125;
        LODWORD(v125) = v128(v125, 1, v127);
        int v129 = v128(v126, 1, v127);
        if (v125)
        {
          if (!v129)
          {
            (*(void (**)(void *, void *, uint64_t))(v211 + 32))(v215, v126, v127);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v211 + 56))(v215, 0, 1, v127);
            goto LABEL_111;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v131 = *(void *)(*(void *)(v130 - 8) + 64);
          uint64_t v132 = v215;
        }
        else
        {
          if (!v129)
          {
            (*(void (**)(void *, void *, uint64_t))(v211 + 40))(v215, v126, v127);
            goto LABEL_111;
          }
          (*(void (**)(void *, uint64_t))(v211 + 8))(v215, v127);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v131 = *(void *)(*(void *)(v133 - 8) + 64);
          uint64_t v132 = v215;
        }
        memcpy(v132, v126, v131);
LABEL_111:
        a3 = v213;
        uint64_t v134 = *(int *)(v17 + 32);
        size_t v135 = (void *)(v111 + v134);
        uint64_t v136 = (uint64_t *)(v112 + v134);
        uint64_t v138 = *v136;
        uint64_t v137 = v136[1];
        *size_t v135 = v138;
        v135[1] = v137;
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
      sub_232F0434C(v111 + 24);
    }
    long long v123 = *(_OWORD *)(v112 + 40);
    *(_OWORD *)(v111 + 24) = *(_OWORD *)(v112 + 24);
    *(_OWORD *)(v111 + 40) = v123;
    *(void *)(v111 + 56) = *(void *)(v112 + 56);
    goto LABEL_103;
  }
  if (v114)
  {
LABEL_95:
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v111, (const void *)v112, *(void *)(*(void *)(v121 - 8) + 64));
    goto LABEL_112;
  }
  *(unsigned char *)uint64_t v111 = *(unsigned char *)v112;
  *(void *)(v111 + 8) = *(void *)(v112 + 8);
  *(_DWORD *)(v111 + 16) = *(_DWORD *)(v112 + 16);
  *(_OWORD *)(v111 + 24) = *(_OWORD *)(v112 + 24);
  *(_OWORD *)(v111 + 40) = *(_OWORD *)(v112 + 40);
  *(void *)(v111 + 56) = *(void *)(v112 + 56);
  uint64_t v115 = *(int *)(v17 + 28);
  uint64_t v116 = (void *)(v111 + v115);
  uint64_t v117 = (const void *)(v112 + v115);
  uint64_t v118 = sub_23309B300();
  uint64_t v119 = *(void *)(v118 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
  {
    sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v119 + 32))(v116, v117, v118);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
  }
  *(_OWORD *)(v111 + *(int *)(v17 + 32)) = *(_OWORD *)(v112 + *(int *)(v17 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v111, 0, 1, v17);
LABEL_112:
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  uint64_t v139 = a3[15];
  int v140 = (void *)(a1 + v139);
  uint64_t v141 = (uint64_t *)(a2 + v139);
  uint64_t v143 = *v141;
  uint64_t v142 = v141[1];
  *int v140 = v143;
  v140[1] = v142;
  swift_bridgeObjectRelease();
  uint64_t v144 = a3[16];
  uint64_t v145 = a1 + v144;
  uint64_t v146 = a2 + v144;
  if (*(void *)(a1 + v144 + 8) == 1)
  {
LABEL_115:
    *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
    *(void *)(v145 + 16) = *(void *)(v146 + 16);
    goto LABEL_117;
  }
  uint64_t v147 = *(void *)(v146 + 8);
  if (v147 == 1)
  {
    sub_232F042F8(v145);
    goto LABEL_115;
  }
  *(void *)uint64_t v145 = *(void *)v146;
  *(void *)(v145 + 8) = v147;
  swift_bridgeObjectRelease();
  *(void *)(v145 + 16) = *(void *)(v146 + 16);
  swift_bridgeObjectRelease();
LABEL_117:
  uint64_t v148 = a3[17];
  uint64_t v149 = a1 + v148;
  uint64_t v150 = a2 + v148;
  uint64_t v151 = type metadata accessor for Quantity();
  uint64_t v152 = *(void *)(v151 - 8);
  uint64_t v153 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
  int v154 = v153(v149, 1, v151);
  int v155 = v153(v150, 1, v151);
  if (!v154)
  {
    if (v155)
    {
      sub_232F7CB8C(v149, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_123;
    }
    *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
    *(void *)(v149 + 13) = *(void *)(v150 + 13);
    uint64_t v163 = *(void *)(v150 + 32);
    *(void *)(v149 + 24) = *(void *)(v150 + 24);
    *(void *)(v149 + 32) = v163;
    swift_bridgeObjectRelease();
    uint64_t v164 = *(void *)(v150 + 48);
    *(void *)(v149 + 40) = *(void *)(v150 + 40);
    *(void *)(v149 + 48) = v164;
    swift_bridgeObjectRelease();
    uint64_t v165 = *(int *)(v151 + 28);
    uint64_t v166 = (void *)(v149 + v165);
    uint64_t v167 = (void *)(v150 + v165);
    uint64_t v168 = sub_23309AF80();
    uint64_t v212 = *(void *)(v168 - 8);
    uint64_t v169 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v212 + 48);
    uint64_t v216 = v166;
    LODWORD(v166) = v169(v166, 1, v168);
    int v170 = v169(v167, 1, v168);
    if (v166)
    {
      if (!v170)
      {
        (*(void (**)(void *, void *, uint64_t))(v212 + 32))(v216, v167, v168);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v216, 0, 1, v168);
        goto LABEL_134;
      }
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v172 = *(void *)(*(void *)(v171 - 8) + 64);
      uint64_t v173 = v216;
    }
    else
    {
      if (!v170)
      {
        (*(void (**)(void *, void *, uint64_t))(v212 + 40))(v216, v167, v168);
        goto LABEL_134;
      }
      (*(void (**)(void *, uint64_t))(v212 + 8))(v216, v168);
      sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v172 = *(void *)(*(void *)(v174 - 8) + 64);
      uint64_t v173 = v216;
    }
    memcpy(v173, v167, v172);
LABEL_134:
    a3 = v213;
    uint64_t v175 = *(int *)(v151 + 32);
    uint64_t v176 = (void *)(v149 + v175);
    uint64_t v177 = (uint64_t *)(v150 + v175);
    uint64_t v179 = *v177;
    uint64_t v178 = v177[1];
    *uint64_t v176 = v179;
    v176[1] = v178;
    swift_bridgeObjectRelease();
    goto LABEL_135;
  }
  if (v155)
  {
LABEL_123:
    sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy((void *)v149, (const void *)v150, *(void *)(*(void *)(v162 - 8) + 64));
    goto LABEL_135;
  }
  *(_OWORD *)uint64_t v149 = *(_OWORD *)v150;
  *(void *)(v149 + 13) = *(void *)(v150 + 13);
  *(_OWORD *)(v149 + 24) = *(_OWORD *)(v150 + 24);
  *(_OWORD *)(v149 + 40) = *(_OWORD *)(v150 + 40);
  uint64_t v156 = *(int *)(v151 + 28);
  long long v157 = (void *)(v149 + v156);
  long long v158 = (const void *)(v150 + v156);
  uint64_t v159 = sub_23309AF80();
  uint64_t v160 = *(void *)(v159 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
  {
    sub_232F7CA40(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v160 + 32))(v157, v158, v159);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
  }
  a3 = v213;
  *(_OWORD *)(v149 + *(int *)(v151 + 32)) = *(_OWORD *)(v150 + *(int *)(v151 + 32));
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
LABEL_135:
  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_bridgeObjectRelease();
  uint64_t v180 = a3[19];
  size_t v181 = (void *)(a1 + v180);
  uint64_t v182 = (uint64_t *)(a2 + v180);
  uint64_t v184 = *v182;
  uint64_t v183 = v182[1];
  *size_t v181 = v184;
  v181[1] = v183;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FD05A8);
}

uint64_t sub_232FD05A8(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[11];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[12];
    goto LABEL_9;
  }
  sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[17];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Observation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FD07C4);
}

uint64_t sub_232FD07C4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[11];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[12];
    goto LABEL_7;
  }
  sub_232F7CA40(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[17];
  return v15(v17, a2, a2, v16);
}

void sub_232FD09CC()
{
  sub_232F7CA40(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232F7CA40(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_232F7CA40(319, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsDSTU2.HumanName(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    uint64_t v9 = *(int *)(a3 + 40);
    uint64_t v10 = (char *)a2 + v9;
    __dst = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v11 = type metadata accessor for Period();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v58 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v58(v10, 1, v11))
    {
      sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v12;
      uint64_t v17 = type metadata accessor for FHIRDateTime();
      uint64_t v18 = *(void *)(v17 - 8);
      int v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      uint64_t v56 = v18;
      if (v19(v10, 1, v17))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        uint64_t v21 = __dst;
        memcpy(__dst, v13, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        unsigned char *__dst = *v10;
        *((void *)__dst + 1) = *((void *)v10 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v10 + 4);
        uint64_t v22 = *((void *)v10 + 7);
        uint64_t v55 = v11;
        if (v22 == 1)
        {
          long long v23 = *(_OWORD *)(v10 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v10 + 24);
          *(_OWORD *)(__dst + 40) = v23;
          *((void *)__dst + 7) = *((void *)v10 + 7);
        }
        else
        {
          __dst[24] = v10[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v10 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v10 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v10 + 11);
          *((void *)__dst + 6) = *((void *)v10 + 6);
          *((void *)__dst + 7) = v22;
          swift_bridgeObjectRetain();
        }
        uint64_t v24 = *(int *)(v17 + 28);
        uint64_t v25 = &__dst[v24];
        uint64_t v26 = &v10[v24];
        uint64_t v27 = sub_23309B300();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v11 = v55;
        uint64_t v13 = v10;
        uint64_t v30 = *(int *)(v17 + 32);
        uint64_t v31 = &__dst[v30];
        uint64_t v32 = &v10[v30];
        uint64_t v33 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v33;
        uint64_t v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56);
        swift_bridgeObjectRetain();
        v34(__dst, 0, 1, v17);
        uint64_t v21 = __dst;
      }
      uint64_t v35 = *(int *)(v11 + 20);
      uint64_t v36 = &v21[v35];
      size_t v37 = &v13[v35];
      if (v19(&v13[v35], 1, v17))
      {
        sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
        uint64_t v39 = v59;
      }
      else
      {
        *uint64_t v36 = *v37;
        *((void *)v36 + 1) = *((void *)v37 + 1);
        *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
        uint64_t v40 = *((void *)v37 + 7);
        uint64_t v41 = v11;
        if (v40 == 1)
        {
          long long v42 = *(_OWORD *)(v37 + 40);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
          *(_OWORD *)(v36 + 40) = v42;
          *((void *)v36 + 7) = *((void *)v37 + 7);
        }
        else
        {
          v36[24] = v37[24];
          *(_WORD *)(v36 + 25) = *(_WORD *)(v37 + 25);
          *(_OWORD *)(v36 + 28) = *(_OWORD *)(v37 + 28);
          *((_DWORD *)v36 + 11) = *((_DWORD *)v37 + 11);
          *((void *)v36 + 6) = *((void *)v37 + 6);
          *((void *)v36 + 7) = v40;
          swift_bridgeObjectRetain();
        }
        uint64_t v43 = *(int *)(v17 + 28);
        uint64_t v44 = &v36[v43];
        uint64_t v45 = &v37[v43];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        uint64_t v11 = v41;
        uint64_t v39 = v59;
        uint64_t v49 = *(int *)(v17 + 32);
        int v50 = &v36[v49];
        int v51 = &v37[v49];
        uint64_t v52 = *((void *)v51 + 1);
        *(void *)int v50 = *(void *)v51;
        *((void *)v50 + 1) = v52;
        uint64_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56);
        swift_bridgeObjectRetain();
        v53(v36, 0, 1, v17);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v39 + 56))(v21, 0, 1, v11);
    }
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t destroy for ModelsDSTU2.HumanName(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Period();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for FHIRDateTime();
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(void *)(v4 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v9 = v4 + *(int *)(v7 + 28);
      uint64_t v10 = sub_23309B300();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v4 + *(int *)(v5 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!result)
    {
      if (*(void *)(v12 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = v12 + *(int *)(v7 + 28);
      uint64_t v14 = sub_23309B300();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *initializeWithCopy for ModelsDSTU2.HumanName(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a2 + v7;
  __dst = (char *)a1 + v7;
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v55 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v55(v8, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v56 = v10;
    uint64_t v13 = type metadata accessor for FHIRDateTime();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v51 = v14;
    if (v15(v11, 1, v13))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      uint64_t v17 = __dst;
      memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      unsigned char *__dst = *v11;
      *((void *)__dst + 1) = *((void *)v11 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v11 + 4);
      uint64_t v18 = *((void *)v11 + 7);
      uint64_t v52 = v9;
      if (v18 == 1)
      {
        long long v19 = *(_OWORD *)(v11 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(__dst + 40) = v19;
        *((void *)__dst + 7) = *((void *)v11 + 7);
      }
      else
      {
        __dst[24] = v11[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v11 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v11 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v11 + 11);
        *((void *)__dst + 6) = *((void *)v11 + 6);
        *((void *)__dst + 7) = v18;
        swift_bridgeObjectRetain();
      }
      uint64_t v20 = *(int *)(v13 + 28);
      uint64_t v21 = &__dst[v20];
      uint64_t v22 = v11;
      long long v23 = &v11[v20];
      uint64_t v24 = sub_23309B300();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v21, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v21, v23, v24);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      uint64_t v27 = *(int *)(v13 + 32);
      uint64_t v28 = &__dst[v27];
      uint64_t v11 = v22;
      uint64_t v29 = &v22[v27];
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v13);
      uint64_t v17 = __dst;
      uint64_t v9 = v52;
    }
    uint64_t v32 = *(int *)(v9 + 20);
    uint64_t v33 = &v17[v32];
    uint64_t v34 = &v11[v32];
    if (v15(&v11[v32], 1, v13))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
      uint64_t v36 = v56;
    }
    else
    {
      *uint64_t v33 = *v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      uint64_t v37 = *((void *)v34 + 7);
      uint64_t v53 = v9;
      if (v37 == 1)
      {
        long long v38 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v38;
        *((void *)v33 + 7) = *((void *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((void *)v33 + 6) = *((void *)v34 + 6);
        *((void *)v33 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      uint64_t v39 = *(int *)(v13 + 28);
      uint64_t v40 = &v33[v39];
      uint64_t v41 = &v34[v39];
      uint64_t v42 = sub_23309B300();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v36 = v56;
      uint64_t v45 = *(int *)(v13 + 32);
      uint64_t v46 = &v33[v45];
      uint64_t v47 = &v34[v45];
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v51 + 56);
      swift_bridgeObjectRetain();
      v49(v33, 0, 1, v13);
      uint64_t v9 = v53;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v9);
  }
  return a1;
}

void *assignWithCopy for ModelsDSTU2.HumanName(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_232F7CB8C(v7, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v22 = type metadata accessor for FHIRDateTime();
    long long v23 = *(void **)(v22 - 8);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23[6];
    int v25 = v24(v7, 1, v22);
    int v26 = v24((uint64_t)v8, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        *(unsigned char *)uint64_t v7 = *v8;
        uint64_t v27 = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
        *(void *)(v7 + 8) = v27;
        __src = v23;
        if (*((void *)v8 + 7) == 1)
        {
          long long v28 = *(_OWORD *)(v8 + 24);
          long long v29 = *(_OWORD *)(v8 + 40);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(_OWORD *)(v7 + 24) = v28;
          *(_OWORD *)(v7 + 40) = v29;
        }
        else
        {
          *(unsigned char *)(v7 + 24) = v8[24];
          *(unsigned char *)(v7 + 25) = v8[25];
          *(unsigned char *)(v7 + 26) = v8[26];
          long long v67 = *(_OWORD *)(v8 + 28);
          *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
          *(_OWORD *)(v7 + 28) = v67;
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v68 = *(int *)(v22 + 28);
        __dstb = (void *)(v7 + v68);
        uint64_t v69 = &v8[v68];
        uint64_t v70 = sub_23309B300();
        uint64_t v71 = *(void *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstb, v69, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v71 + 16))(__dstb, v69, v70);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(__dstb, 0, 1, v70);
        }
        uint64_t v73 = *(int *)(v22 + 32);
        uint64_t v74 = (void *)(v7 + v73);
        long long v75 = &v8[v73];
        *uint64_t v74 = *(void *)v75;
        v74[1] = *((void *)v75 + 1);
        long long v23 = __src;
        uint64_t v76 = (void (*)(uint64_t, void, uint64_t, uint64_t))__src[7];
        swift_bridgeObjectRetain();
        v76(v7, 0, 1, v22);
LABEL_55:
        uint64_t v92 = *(int *)(v9 + 20);
        uint64_t v93 = v7 + v92;
        uint64_t v94 = &v8[v92];
        int v95 = v24(v93, 1, v22);
        int v96 = v24((uint64_t)v94, 1, v22);
        if (v95)
        {
          if (!v96)
          {
            *(unsigned char *)uint64_t v93 = *v94;
            uint64_t v97 = *((void *)v94 + 1);
            *(_DWORD *)(v93 + 16) = *((_DWORD *)v94 + 4);
            *(void *)(v93 + 8) = v97;
            int v98 = v23;
            if (*((void *)v94 + 7) == 1)
            {
              long long v99 = *(_OWORD *)(v94 + 24);
              long long v100 = *(_OWORD *)(v94 + 40);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              *(_OWORD *)(v93 + 24) = v99;
              *(_OWORD *)(v93 + 40) = v100;
            }
            else
            {
              *(unsigned char *)(v93 + 24) = v94[24];
              *(unsigned char *)(v93 + 25) = v94[25];
              *(unsigned char *)(v93 + 26) = v94[26];
              long long v107 = *(_OWORD *)(v94 + 28);
              *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
              *(_OWORD *)(v93 + 28) = v107;
              *(void *)(v93 + 48) = *((void *)v94 + 6);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v108 = *(int *)(v22 + 28);
            long long v109 = (void *)(v93 + v108);
            uint64_t v110 = &v94[v108];
            uint64_t v111 = sub_23309B300();
            uint64_t v112 = *(void *)(v111 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v112 + 16))(v109, v110, v111);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
            }
            uint64_t v114 = *(int *)(v22 + 32);
            uint64_t v115 = (void *)(v93 + v114);
            uint64_t v116 = &v94[v114];
            void *v115 = *(void *)v116;
            v115[1] = *((void *)v116 + 1);
            uint64_t v117 = (void (*)(uint64_t, void, uint64_t, uint64_t))v98[7];
            swift_bridgeObjectRetain();
            v117(v93, 0, 1, v22);
            return a1;
          }
          goto LABEL_61;
        }
        if (v96)
        {
          sub_232F7CB8C(v93, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_61:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v19 = *(void *)(*(void *)(v101 - 8) + 64);
          uint64_t v20 = (void *)v93;
          uint64_t v21 = v94;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v93 = *v94;
        *(void *)(v93 + 8) = *((void *)v94 + 1);
        *(_WORD *)(v93 + 16) = *((_WORD *)v94 + 8);
        *(_WORD *)(v93 + 18) = *((_WORD *)v94 + 9);
        uint64_t v102 = (long long *)(v93 + 24);
        uint64_t v103 = (long long *)(v94 + 24);
        uint64_t v104 = *((void *)v94 + 7);
        if (*(void *)(v93 + 56) == 1)
        {
          if (v104 == 1)
          {
            long long v105 = *v103;
            long long v106 = *(_OWORD *)(v94 + 40);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            *uint64_t v102 = v105;
            *(_OWORD *)(v93 + 40) = v106;
          }
          else
          {
            *(unsigned char *)(v93 + 24) = v94[24];
            *(unsigned char *)(v93 + 25) = v94[25];
            *(unsigned char *)(v93 + 26) = v94[26];
            long long v120 = *(_OWORD *)(v94 + 28);
            *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
            *(_OWORD *)(v93 + 28) = v120;
            *(void *)(v93 + 48) = *((void *)v94 + 6);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v104 == 1)
        {
          sub_232F0434C(v93 + 24);
          uint64_t v118 = *((void *)v94 + 7);
          long long v119 = *(_OWORD *)(v94 + 40);
          *uint64_t v102 = *v103;
          *(_OWORD *)(v93 + 40) = v119;
          *(void *)(v93 + 56) = v118;
        }
        else
        {
          *(unsigned char *)(v93 + 24) = v94[24];
          *(unsigned char *)(v93 + 25) = v94[25];
          *(unsigned char *)(v93 + 26) = v94[26];
          *(_DWORD *)(v93 + 28) = *((_DWORD *)v94 + 7);
          *(_WORD *)(v93 + 32) = *((_WORD *)v94 + 16);
          *(_WORD *)(v93 + 34) = *((_WORD *)v94 + 17);
          *(_WORD *)(v93 + 36) = *((_WORD *)v94 + 18);
          *(_WORD *)(v93 + 38) = *((_WORD *)v94 + 19);
          *(_WORD *)(v93 + 40) = *((_WORD *)v94 + 20);
          *(_WORD *)(v93 + 42) = *((_WORD *)v94 + 21);
          *(_WORD *)(v93 + 44) = *((_WORD *)v94 + 22);
          *(_WORD *)(v93 + 46) = *((_WORD *)v94 + 23);
          *(void *)(v93 + 48) = *((void *)v94 + 6);
          *(void *)(v93 + 56) = *((void *)v94 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v121 = *(int *)(v22 + 28);
        uint64_t v122 = (void *)(v93 + v121);
        long long v123 = &v94[v121];
        uint64_t v124 = sub_23309B300();
        uint64_t v125 = *(void *)(v124 - 8);
        uint64_t v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
        __dstd = v122;
        LODWORD(v122) = v126(v122, 1, v124);
        int v127 = v126(v123, 1, v124);
        if (v122)
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 16))(__dstd, v123, v124);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(__dstd, 0, 1, v124);
            goto LABEL_82;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        else
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 24))(__dstd, v123, v124);
            goto LABEL_82;
          }
          (*(void (**)(void *, uint64_t))(v125 + 8))(__dstd, v124);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        memcpy(v130, v123, v129);
LABEL_82:
        uint64_t v132 = *(int *)(v22 + 32);
        uint64_t v133 = (void *)(v93 + v132);
        uint64_t v134 = &v94[v132];
        *uint64_t v133 = *(void *)v134;
        v133[1] = *((void *)v134 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
LABEL_17:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
      goto LABEL_55;
    }
    if (v26)
    {
      sub_232F7CB8C(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    __srcc = v23;
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    uint64_t v62 = (long long *)(v7 + 24);
    uint64_t v63 = (long long *)(v8 + 24);
    uint64_t v64 = *((void *)v8 + 7);
    if (*(void *)(v7 + 56) == 1)
    {
      if (v64 == 1)
      {
        long long v65 = *v63;
        long long v66 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *uint64_t v62 = v65;
        *(_OWORD *)(v7 + 40) = v66;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v79 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v79;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v77 = *((void *)v8 + 7);
      long long v78 = *(_OWORD *)(v8 + 40);
      *uint64_t v62 = *v63;
      *(_OWORD *)(v7 + 40) = v78;
      *(void *)(v7 + 56) = v77;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v136 = v22;
    uint64_t v80 = *(int *)(v22 + 28);
    uint64_t v81 = (void *)(v7 + v80);
    __dstc = &v8[v80];
    uint64_t v82 = sub_23309B300();
    uint64_t v135 = *(void *)(v82 - 8);
    uint64_t v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v135 + 48);
    uint64_t v138 = v81;
    LODWORD(v81) = v83(v81, 1, v82);
    int v84 = v83(__dstc, 1, v82);
    if (v81)
    {
      long long v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v138, __dstc, v82);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v135 + 56))(v138, 0, 1, v82);
        goto LABEL_54;
      }
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v85 - 8) + 64);
      size_t v87 = v138;
    }
    else
    {
      long long v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 24))(v138, __dstc, v82);
        goto LABEL_54;
      }
      (*(void (**)(void *, uint64_t))(v135 + 8))(v138, v82);
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v88 - 8) + 64);
      size_t v87 = v138;
    }
    memcpy(v87, __dstc, v86);
LABEL_54:
    uint64_t v22 = v136;
    uint64_t v89 = *(int *)(v136 + 32);
    uint64_t v90 = (void *)(v7 + v89);
    uint64_t v91 = &v8[v89];
    *uint64_t v90 = *(void *)v91;
    v90[1] = *((void *)v91 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  if (v13)
  {
LABEL_7:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = (void *)v7;
    uint64_t v21 = v8;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = (unsigned int (*)(void, void, void))v15[6];
  if (v16(v8, 1, v14))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v7 = *v8;
    uint64_t v30 = *((void *)v8 + 1);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
    *(void *)(v7 + 8) = v30;
    __srca = v15;
    uint64_t v137 = v16;
    if (*((void *)v8 + 7) == 1)
    {
      long long v31 = *(_OWORD *)(v8 + 24);
      long long v32 = *(_OWORD *)(v8 + 40);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v31;
      *(_OWORD *)(v7 + 40) = v32;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      long long v34 = *(_OWORD *)(v8 + 28);
      *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v34;
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = *(int *)(v14 + 28);
    __dst = (void *)(v7 + v35);
    uint64_t v36 = &v8[v35];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    uint64_t v40 = *(int *)(v14 + 32);
    uint64_t v41 = (void *)(v7 + v40);
    uint64_t v42 = &v8[v40];
    *uint64_t v41 = *(void *)v42;
    v41[1] = *((void *)v42 + 1);
    uint64_t v15 = __srca;
    uint64_t v43 = (void (*)(uint64_t, void, uint64_t, uint64_t))__srca[7];
    swift_bridgeObjectRetain();
    v43(v7, 0, 1, v14);
    uint64_t v16 = v137;
  }
  uint64_t v44 = *(int *)(v9 + 20);
  uint64_t v45 = (char *)(v7 + v44);
  uint64_t v46 = &v8[v44];
  if (v16(v46, 1, v14))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    char *v45 = *v46;
    uint64_t v48 = *((void *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    *((void *)v45 + 1) = v48;
    __srcb = v15;
    if (*((void *)v46 + 7) == 1)
    {
      long long v49 = *(_OWORD *)(v46 + 24);
      long long v50 = *(_OWORD *)(v46 + 40);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      *(_OWORD *)(v45 + 24) = v49;
      *(_OWORD *)(v45 + 40) = v50;
    }
    else
    {
      v45[24] = v46[24];
      v45[25] = v46[25];
      v45[26] = v46[26];
      long long v51 = *(_OWORD *)(v46 + 28);
      *((_DWORD *)v45 + 11) = *((_DWORD *)v46 + 11);
      *(_OWORD *)(v45 + 28) = v51;
      *((void *)v45 + 6) = *((void *)v46 + 6);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = *(int *)(v14 + 28);
    __dsta = &v45[v52];
    uint64_t v53 = &v46[v52];
    uint64_t v54 = sub_23309B300();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dsta, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
    }
    uint64_t v57 = *(int *)(v14 + 32);
    uint64_t v58 = &v45[v57];
    uint64_t v59 = &v46[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    *((void *)v58 + 1) = *((void *)v59 + 1);
    uint64_t v60 = (void (*)(char *, void, uint64_t, uint64_t))__srcb[7];
    swift_bridgeObjectRetain();
    v60(v45, 0, 1, v14);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for ModelsDSTU2.HumanName(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for FHIRDateTime();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(void, void, void))(v13 + 48);
    if (v14(v8, 1, v12))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      long long v31 = v14;
      *uint64_t v7 = *v8;
      *((void *)v7 + 1) = *((void *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *((void *)v7 + 7) = *((void *)v8 + 7);
      uint64_t v16 = *(int *)(v12 + 28);
      __dst = &v7[v16];
      uint64_t v34 = v13;
      uint64_t v17 = &v8[v16];
      uint64_t v18 = sub_23309B300();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(__dst, v17, v18);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      *(_OWORD *)&v7[*(int *)(v12 + 32)] = *(_OWORD *)&v8[*(int *)(v12 + 32)];
      uint64_t v13 = v34;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v7, 0, 1, v12);
      uint64_t v14 = v31;
    }
    uint64_t v21 = *(int *)(v9 + 20);
    uint64_t v22 = &v7[v21];
    long long v23 = &v8[v21];
    if (v14(v23, 1, v12))
    {
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      unsigned char *v22 = *v23;
      *((void *)v22 + 1) = *((void *)v23 + 1);
      *((_DWORD *)v22 + 4) = *((_DWORD *)v23 + 4);
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
      *((void *)v22 + 7) = *((void *)v23 + 7);
      uint64_t v25 = *(int *)(v12 + 28);
      __dsta = &v22[v25];
      uint64_t v35 = v13;
      int v26 = &v23[v25];
      uint64_t v27 = sub_23309B300();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(__dsta, v26, v27);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
      }
      *(_OWORD *)&v22[*(int *)(v12 + 32)] = *(_OWORD *)&v23[*(int *)(v12 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v35 + 56))(v22, 0, 1, v12);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for ModelsDSTU2.HumanName(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (uint64_t)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Period();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_232F7CB8C(v9, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v24 = type metadata accessor for FHIRDateTime();
    uint64_t v25 = *(void **)(v24 - 8);
    int v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25[6];
    int v27 = v26(v9, 1, v24);
    int v28 = v26((uint64_t)v10, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        *(unsigned char *)uint64_t v9 = *v10;
        *(void *)(v9 + 8) = *((void *)v10 + 1);
        *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
        *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
        *(void *)(v9 + 56) = *((void *)v10 + 7);
        uint64_t v29 = *(int *)(v24 + 28);
        __dst = (void *)(v9 + v29);
        long long v105 = (void (**)(uint64_t, void, uint64_t, uint64_t))v25;
        uint64_t v30 = &v10[v29];
        uint64_t v31 = sub_23309B300();
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v32 + 32))(__dst, v30, v31);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
        }
        *(_OWORD *)(v9 + *(int *)(v24 + 32)) = *(_OWORD *)&v10[*(int *)(v24 + 32)];
        uint64_t v25 = v105;
        v105[7](v9, 0, 1, v24);
LABEL_44:
        uint64_t v65 = *(int *)(v11 + 20);
        uint64_t v66 = v9 + v65;
        long long v67 = &v10[v65];
        int v68 = v26(v66, 1, v24);
        int v69 = v26((uint64_t)v67, 1, v24);
        if (v68)
        {
          if (!v69)
          {
            uint64_t v70 = v25;
            *(unsigned char *)uint64_t v66 = *v67;
            *(void *)(v66 + 8) = *((void *)v67 + 1);
            *(_DWORD *)(v66 + 16) = *((_DWORD *)v67 + 4);
            *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
            *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
            *(void *)(v66 + 56) = *((void *)v67 + 7);
            uint64_t v71 = *(int *)(v24 + 28);
            uint64_t v72 = (void *)(v66 + v71);
            uint64_t v73 = &v67[v71];
            uint64_t v74 = sub_23309B300();
            uint64_t v75 = *(void *)(v74 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
            {
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v75 + 32))(v72, v73, v74);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
            }
            *(_OWORD *)(v66 + *(int *)(v24 + 32)) = *(_OWORD *)&v67[*(int *)(v24 + 32)];
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v70[7])(v66, 0, 1, v24);
            return a1;
          }
          goto LABEL_50;
        }
        if (v69)
        {
          sub_232F7CB8C(v66, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_50:
          sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v21 = *(void *)(*(void *)(v77 - 8) + 64);
          uint64_t v22 = (void *)v66;
          long long v23 = v67;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v66 = *v67;
        *(void *)(v66 + 8) = *((void *)v67 + 1);
        *(_DWORD *)(v66 + 16) = *((_DWORD *)v67 + 4);
        if (*(void *)(v66 + 56) != 1)
        {
          uint64_t v78 = *((void *)v67 + 7);
          if (v78 != 1)
          {
            *(unsigned char *)(v66 + 24) = v67[24];
            *(_WORD *)(v66 + 25) = *(_WORD *)(v67 + 25);
            *(_DWORD *)(v66 + 28) = *((_DWORD *)v67 + 7);
            *(_OWORD *)(v66 + 32) = *((_OWORD *)v67 + 2);
            *(void *)(v66 + 48) = *((void *)v67 + 6);
            *(void *)(v66 + 56) = v78;
            swift_bridgeObjectRelease();
LABEL_58:
            uint64_t v80 = *(int *)(v24 + 28);
            uint64_t v81 = (void *)(v66 + v80);
            uint64_t v82 = &v67[v80];
            uint64_t v83 = sub_23309B300();
            uint64_t v84 = *(void *)(v83 - 8);
            uint64_t v85 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v84 + 48);
            __dstd = v81;
            LODWORD(v81) = v85(v81, 1, v83);
            int v86 = v85(v82, 1, v83);
            if (v81)
            {
              if (!v86)
              {
                (*(void (**)(void *, char *, uint64_t))(v84 + 32))(__dstd, v82, v83);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(__dstd, 0, 1, v83);
                goto LABEL_66;
              }
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v88 = *(void *)(*(void *)(v87 - 8) + 64);
              uint64_t v89 = __dstd;
            }
            else
            {
              if (!v86)
              {
                (*(void (**)(void *, char *, uint64_t))(v84 + 40))(__dstd, v82, v83);
                goto LABEL_66;
              }
              (*(void (**)(void *, uint64_t))(v84 + 8))(__dstd, v83);
              sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v88 = *(void *)(*(void *)(v90 - 8) + 64);
              uint64_t v89 = __dstd;
            }
            memcpy(v89, v82, v88);
LABEL_66:
            uint64_t v91 = *(int *)(v24 + 32);
            uint64_t v92 = (void *)(v66 + v91);
            uint64_t v93 = &v67[v91];
            uint64_t v95 = *(void *)v93;
            uint64_t v94 = *((void *)v93 + 1);
            *uint64_t v92 = v95;
            v92[1] = v94;
            swift_bridgeObjectRelease();
            return a1;
          }
          sub_232F0434C(v66 + 24);
        }
        long long v79 = *(_OWORD *)(v67 + 40);
        *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
        *(_OWORD *)(v66 + 40) = v79;
        *(void *)(v66 + 56) = *((void *)v67 + 7);
        goto LABEL_58;
      }
LABEL_17:
      sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v9, v10, *(void *)(*(void *)(v39 - 8) + 64));
      goto LABEL_44;
    }
    if (v28)
    {
      sub_232F7CB8C(v9, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    uint64_t v108 = v25;
    *(unsigned char *)uint64_t v9 = *v10;
    *(void *)(v9 + 8) = *((void *)v10 + 1);
    *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
    if (*(void *)(v9 + 56) != 1)
    {
      uint64_t v50 = *((void *)v10 + 7);
      if (v50 != 1)
      {
        *(unsigned char *)(v9 + 24) = v10[24];
        *(_WORD *)(v9 + 25) = *(_WORD *)(v10 + 25);
        *(_DWORD *)(v9 + 28) = *((_DWORD *)v10 + 7);
        *(_OWORD *)(v9 + 32) = *((_OWORD *)v10 + 2);
        *(void *)(v9 + 48) = *((void *)v10 + 6);
        *(void *)(v9 + 56) = v50;
        swift_bridgeObjectRelease();
LABEL_35:
        uint64_t v52 = *(int *)(v24 + 28);
        __src = &v10[v52];
        __dstc = (void *)(v9 + v52);
        uint64_t v53 = sub_23309B300();
        uint64_t v96 = *(void *)(v53 - 8);
        uint64_t v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v96 + 48);
        int v98 = v54(__dstc, 1, v53);
        int v55 = v54(__src, 1, v53);
        if (v98)
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v96 + 32))(__dstc, __src, v53);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(__dstc, 0, 1, v53);
            goto LABEL_43;
          }
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v57 = *(void *)(*(void *)(v56 - 8) + 64);
          uint64_t v58 = __dstc;
        }
        else
        {
          if (!v55)
          {
            (*(void (**)(void *, char *, uint64_t))(v96 + 40))(__dstc, __src, v53);
            goto LABEL_43;
          }
          (*(void (**)(void *, uint64_t))(v96 + 8))(__dstc, v53);
          sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v57 = *(void *)(*(void *)(v59 - 8) + 64);
          uint64_t v58 = __dstc;
        }
        memcpy(v58, __src, v57);
LABEL_43:
        uint64_t v25 = v108;
        uint64_t v60 = *(int *)(v24 + 32);
        uint64_t v61 = (void *)(v9 + v60);
        uint64_t v62 = &v10[v60];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        *uint64_t v61 = v64;
        v61[1] = v63;
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      sub_232F0434C(v9 + 24);
    }
    long long v51 = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = v51;
    *(void *)(v9 + 56) = *((void *)v10 + 7);
    goto LABEL_35;
  }
  if (v15)
  {
LABEL_7:
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
    uint64_t v22 = (void *)v9;
    long long v23 = v10;
LABEL_8:
    memcpy(v22, v23, v21);
    return a1;
  }
  uint64_t v16 = type metadata accessor for FHIRDateTime();
  uint64_t v17 = *(void **)(v16 - 8);
  uint64_t v18 = (unsigned int (*)(void, void, void))v17[6];
  if (v18(v10, 1, v16))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v9, v10, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v97 = v18;
    *(unsigned char *)uint64_t v9 = *v10;
    *(void *)(v9 + 8) = *((void *)v10 + 1);
    *(_DWORD *)(v9 + 16) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *(void *)(v9 + 56) = *((void *)v10 + 7);
    uint64_t v34 = *(int *)(v16 + 28);
    __dsta = (void *)(v9 + v34);
    long long v106 = (void (**)(uint64_t, void, uint64_t, uint64_t))v17;
    uint64_t v35 = &v10[v34];
    uint64_t v36 = sub_23309B300();
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v37 + 32))(__dsta, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(__dsta, 0, 1, v36);
    }
    *(_OWORD *)(v9 + *(int *)(v16 + 32)) = *(_OWORD *)&v10[*(int *)(v16 + 32)];
    uint64_t v17 = v106;
    v106[7](v9, 0, 1, v16);
    uint64_t v18 = v97;
  }
  uint64_t v40 = *(int *)(v11 + 20);
  uint64_t v41 = (char *)(v9 + v40);
  uint64_t v42 = &v10[v40];
  if (v18(v42, 1, v16))
  {
    sub_232F7CA40(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    *uint64_t v41 = *v42;
    *((void *)v41 + 1) = *((void *)v42 + 1);
    *((_DWORD *)v41 + 4) = *((_DWORD *)v42 + 4);
    *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
    *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
    *((void *)v41 + 7) = *((void *)v42 + 7);
    uint64_t v44 = *(int *)(v16 + 28);
    __dstb = &v41[v44];
    long long v107 = (void (**)(char *, void, uint64_t, uint64_t))v17;
    uint64_t v45 = &v42[v44];
    uint64_t v46 = sub_23309B300();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_232F7CA40(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dstb, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(__dstb, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dstb, 0, 1, v46);
    }
    *(_OWORD *)&v41[*(int *)(v16 + 32)] = *(_OWORD *)&v42[*(int *)(v16 + 32)];
    v107[7](v41, 0, 1, v16);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.HumanName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232FD4430);
}

uint64_t sub_232FD4430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 40);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.HumanName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232FD4530);
}

uint64_t sub_232FD4530(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_232F7CA40(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_232FD4608()
{
  sub_232F7CA40(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for ModelsDSTU2.Patient(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsDSTU2.Patient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  else
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsDSTU2.Patient(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[4];
  *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
  a1[4] = v4;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (long long *)(a1 + 12);
  uint64_t v6 = (long long *)(a2 + 12);
  uint64_t v7 = a2[13];
  if (a1[13] == 1)
  {
    if (v7 == 1)
    {
      long long v8 = *v6;
      a1[14] = a2[14];
      *uint64_t v5 = v8;
    }
    else
    {
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_232F042F8((uint64_t)(a1 + 12));
    uint64_t v9 = a2[14];
    *uint64_t v5 = *v6;
    a1[14] = v9;
  }
  else
  {
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

void *assignWithTake for ModelsDSTU2.Patient(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    uint64_t v7 = a2[13];
    if (v7 != 1)
    {
      a1[12] = a2[12];
      a1[13] = v7;
      swift_bridgeObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_232F042F8((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  a1[14] = a2[14];
LABEL_6:
  a1[15] = a2[15];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[17];
  a1[16] = a2[16];
  a1[17] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Patient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsDSTU2.Patient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Patient()
{
  return &type metadata for ModelsDSTU2.Patient;
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.HumanName.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD4D54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.HumanName.CodingKeys()
{
  return &type metadata for ModelsDSTU2.HumanName.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys()
{
  return &type metadata for ModelsDSTU2.ImmunizationVaccinationProtocol.CodingKeys;
}

unsigned char *_s23HealthRecordsExtraction11ModelsDSTU2V31ImmunizationVaccinationProtocolV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD4E6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Bundle.BundleEntry.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Bundle.BundleEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Patient.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.Patient.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD5000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Patient.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Patient.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Observation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.Observation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *__n128 result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD5194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Observation.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Observation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsDSTU2.Immunization.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsDSTU2.Immunization.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *__n128 result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232FD5328);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsDSTU2.Immunization.CodingKeys()
{
  return &type metadata for ModelsDSTU2.Immunization.CodingKeys;
}