void sub_232E6ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

id _DateTimeFormatRegularExpressionYearMonthDayTime()
{
  if (_DateTimeFormatRegularExpressionYearMonthDayTime_onceToken != -1) {
    dispatch_once(&_DateTimeFormatRegularExpressionYearMonthDayTime_onceToken, &__block_literal_global_858);
  }
  v0 = (void *)_DateTimeFormatRegularExpressionYearMonthDayTime_regex;
  return v0;
}

void sub_232E6FAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _RegularExpressionFromPattern(uint64_t a1)
{
  id v5 = 0;
  v1 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:a1 options:0 error:&v5];
  id v2 = v5;
  if (!v1)
  {
    _HKInitializeLogging();
    v3 = *MEMORY[0x263F09908];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x263F09908], OS_LOG_TYPE_ERROR)) {
      _RegularExpressionFromPattern_cold_1((uint64_t)v2, v3);
    }
  }

  return v1;
}

void *__getNSDocumentTypeDocumentAttributeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = (void *)UIFoundationLibrary();
  result = dlsym(v2, "NSDocumentTypeDocumentAttribute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSDocumentTypeDocumentAttributeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t UIFoundationLibrary()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v2[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x263EF8330];
    v2[2] = (void *)3221225472;
    v2[3] = __UIFoundationLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_264BD98D8;
    uint64_t v4 = 0;
    UIFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = UIFoundationLibraryCore_frameworkLibrary;
  if (!UIFoundationLibraryCore_frameworkLibrary) {
    UIFoundationLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __UIFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getNSRTFTextDocumentTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = (void *)UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSRTFTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSRTFTextDocumentTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v5, OS_LOG_TYPE_DEBUG, a4, v4, 0xCu);
}

void sub_232E752B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_232E75800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_232E75E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_232E7DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_232E830AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2 == 1)
  {
    id v59 = objc_begin_catch(exception_object);
    v60 = (void *)MEMORY[0x263F087E8];
    objc_opt_class();
    objc_msgSend(v60, "hk_assignError:code:format:", a18, 3, @"%@ keypath %@ exception %@");

    objc_end_catch();
    JUMPOUT(0x232E82ABCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_232E83934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_232E8A4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

uint64_t Meta.security.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Meta.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static Meta.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = swift_bridgeObjectRetain();
      char v4 = sub_232E9021C(v3, v2, (void (*)(void))type metadata accessor for Coding, (uint64_t (*)(void))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0, (uint64_t (*)(void))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4) {
        return 1;
      }
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_232E8F50C()
{
  return 1;
}

uint64_t sub_232E8F514()
{
  return sub_23309C420();
}

uint64_t sub_232E8F558()
{
  return sub_23309C3E0();
}

uint64_t sub_232E8F580()
{
  return sub_23309C420();
}

uint64_t sub_232E8F5C0()
{
  return 0x7974697275636573;
}

uint64_t sub_232E8F5D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7974697275636573 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_23309C220();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_232E8F670()
{
  return 0;
}

void sub_232E8F67C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_232E8F688(uint64_t a1)
{
  unint64_t v2 = sub_232E95C84();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232E8F6C4(uint64_t a1)
{
  unint64_t v2 = sub_232E95C84();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Meta.encode(to:)(void *a1)
{
  sub_232E95D1C(0, &qword_268756448, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232E95C84();
  sub_23309C480();
  v10[1] = v8;
  sub_232E9AAB8(0, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
  sub_232E95DD0(&qword_268756460, &qword_268756468);
  sub_23309C150();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Meta.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_23309C3D0();
  sub_23309C3F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_232E95864((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_23309C420();
}

uint64_t Meta.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_232E95D1C(0, &qword_268756470, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232E95C84();
  sub_23309C460();
  if (!v2)
  {
    sub_232E9AAB8(0, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
    sub_232E95DD0(&qword_268756478, &qword_268756480);
    sub_23309C080();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_232E8FB48@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Meta.init(from:)(a1, a2);
}

uint64_t sub_232E8FB60(void *a1)
{
  return Meta.encode(to:)(a1);
}

uint64_t sub_232E8FB78()
{
  uint64_t v1 = *v0;
  sub_23309C3D0();
  sub_23309C3F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_232E95864((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_23309C420();
}

uint64_t sub_232E8FBEC(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_232E8FC6C()
{
  uint64_t v1 = *v0;
  sub_23309C3D0();
  sub_23309C3F0();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_232E95864((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_23309C420();
}

uint64_t sub_232E8FCDC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = swift_bridgeObjectRetain();
      char v4 = sub_232E9021C(v3, v2, (void (*)(void))type metadata accessor for Coding, (uint64_t (*)(void))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0, (uint64_t (*)(void))type metadata accessor for Coding);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4) {
        return 1;
      }
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_232E8FDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 48);
    for (i = (uint64_t *)(a2 + 48); ; i += 9)
    {
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = *v3;
      uint64_t v8 = v3[1];
      uint64_t v9 = v3[2];
      uint64_t v10 = v3[3];
      uint64_t v11 = v3[5];
      uint64_t v39 = v3[6];
      uint64_t v12 = *(i - 1);
      uint64_t v13 = *i;
      uint64_t v14 = i[1];
      uint64_t v15 = i[2];
      uint64_t v16 = i[3];
      uint64_t v37 = v3[4];
      uint64_t v38 = i[4];
      uint64_t v18 = i[5];
      uint64_t v17 = i[6];
      if (v6)
      {
        if (!v12) {
          return 0;
        }
        if (*(v3 - 2) != *(i - 2) || v6 != v12)
        {
          uint64_t v35 = i[6];
          uint64_t v36 = v3[2];
          uint64_t v33 = v3[5];
          uint64_t v34 = *v3;
          uint64_t v19 = v3[3];
          uint64_t v20 = i[3];
          uint64_t v21 = *i;
          char v22 = sub_23309C220();
          uint64_t v13 = v21;
          uint64_t v11 = v33;
          uint64_t v7 = v34;
          uint64_t v16 = v20;
          uint64_t v10 = v19;
          uint64_t v17 = v35;
          uint64_t v9 = v36;
          if ((v22 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v12)
      {
        return 0;
      }
      if (v8)
      {
        if (!v14) {
          return 0;
        }
        if (v7 != v13 || v8 != v14)
        {
          uint64_t v23 = v11;
          uint64_t v24 = v18;
          uint64_t v25 = v10;
          uint64_t v26 = v16;
          char v27 = sub_23309C220();
          uint64_t v16 = v26;
          uint64_t v10 = v25;
          uint64_t v18 = v24;
          uint64_t v11 = v23;
          if ((v27 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v14)
      {
        return 0;
      }
      if (v10)
      {
        if (!v16) {
          return 0;
        }
        if (v9 != v15 || v10 != v16)
        {
          uint64_t v28 = v11;
          char v29 = sub_23309C220();
          uint64_t v11 = v28;
          if ((v29 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v16)
      {
        return 0;
      }
      if (v11)
      {
        uint64_t v30 = v39;
        if (!v18 || (v37 != v38 || v11 != v18) && (sub_23309C220() & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v30 = v39;
        if (v18) {
          return 0;
        }
      }
      if (v30)
      {
        if (!v17) {
          return 0;
        }
        swift_bridgeObjectRetain();
        uint64_t v31 = swift_bridgeObjectRetain();
        char v32 = sub_232E8FDA0(v31, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0) {
          return 0;
        }
      }
      else if (v17)
      {
        return 0;
      }
      v3 += 9;
      uint64_t result = 1;
      if (!--v2) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t sub_232E8FFD0(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for Extension, (uint64_t (*)(void))type metadata accessor for Extension, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction9ExtensionV2eeoiySbAC_ACtFZ_0, (uint64_t (*)(void))type metadata accessor for Extension);
}

BOOL sub_232E90024(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        long long v7 = *(_OWORD *)(v3 + 112);
        v19[6] = *(_OWORD *)(v3 + 96);
        v19[7] = v7;
        uint64_t v20 = *(void *)(v3 + 128);
        long long v8 = *(_OWORD *)(v3 + 48);
        v19[2] = *(_OWORD *)(v3 + 32);
        v19[3] = v8;
        long long v9 = *(_OWORD *)(v3 + 80);
        v19[4] = *(_OWORD *)(v3 + 64);
        v19[5] = v9;
        long long v10 = *(_OWORD *)(v3 + 16);
        v19[0] = *(_OWORD *)v3;
        v19[1] = v10;
        long long v11 = *(_OWORD *)(v4 + 112);
        v17[6] = *(_OWORD *)(v4 + 96);
        v17[7] = v11;
        uint64_t v18 = *(void *)(v4 + 128);
        long long v12 = *(_OWORD *)(v4 + 48);
        v17[2] = *(_OWORD *)(v4 + 32);
        v17[3] = v12;
        long long v13 = *(_OWORD *)(v4 + 80);
        v17[4] = *(_OWORD *)(v4 + 64);
        v17[5] = v13;
        long long v14 = *(_OWORD *)(v4 + 16);
        v17[0] = *(_OWORD *)v4;
        v17[1] = v14;
        BOOL v15 = _s23HealthRecordsExtraction5VCJWKV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
        if (!v15) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v4 += 136;
        v3 += 136;
      }
      while (v6);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_232E90100(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_23309C220(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    long long v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_23309C220() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_232E901C8(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for ModelsR4.HumanName, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction8ModelsR4V9HumanNameV2eeoiySbAE_AEtFZ_0, type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_232E9021C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  a3(0);
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  long long v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 == *(void *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      char v22 = 1;
    }
    else
    {
      uint64_t v27 = a2;
      uint64_t v18 = a5;
      unint64_t v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v20 = *(void *)(v14 + 72);
      uint64_t v21 = v17 - 1;
      do
      {
        sub_232E96790(a1 + v19, (uint64_t)v16, a4);
        sub_232E96790(v27 + v19, (uint64_t)v13, a4);
        char v22 = v18(v16, v13);
        sub_232E9AB78((uint64_t)v13, a6);
        sub_232E9AB78((uint64_t)v16, a6);
        BOOL v24 = v21-- != 0;
        if ((v22 & 1) == 0) {
          break;
        }
        v19 += v20;
      }
      while (v24);
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_232E903B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 56);
    uint64_t v4 = (uint64_t *)(a2 + 56);
    do
    {
      uint64_t v5 = *(v3 - 2);
      uint64_t v6 = *(v3 - 1);
      uint64_t v7 = *v3;
      uint64_t v8 = *(v4 - 2);
      uint64_t v9 = *(v4 - 1);
      uint64_t v10 = *v4;
      if (v5)
      {
        if (!v8) {
          return 0;
        }
        BOOL v11 = *(v3 - 3) == *(v4 - 3) && v5 == v8;
        if (!v11 && (sub_23309C220() & 1) == 0) {
          return 0;
        }
      }
      else if (v8)
      {
        return 0;
      }
      if (v7)
      {
        if (!v10 || (v6 != v9 || v7 != v10) && (sub_23309C220() & 1) == 0) {
          return 0;
        }
      }
      else if (v10)
      {
        return 0;
      }
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_232E904A8(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for Identifier, (uint64_t (*)(void))type metadata accessor for Identifier, (uint64_t (*)(char *, char *))static Identifier.== infix(_:_:), (uint64_t (*)(void))type metadata accessor for Identifier);
}

BOOL sub_232E904FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        long long v7 = *(_OWORD *)(v3 + 112);
        v19[6] = *(_OWORD *)(v3 + 96);
        v19[7] = v7;
        uint64_t v20 = *(void *)(v3 + 128);
        long long v8 = *(_OWORD *)(v3 + 48);
        v19[2] = *(_OWORD *)(v3 + 32);
        v19[3] = v8;
        long long v9 = *(_OWORD *)(v3 + 80);
        v19[4] = *(_OWORD *)(v3 + 64);
        v19[5] = v9;
        long long v10 = *(_OWORD *)(v3 + 16);
        v19[0] = *(_OWORD *)v3;
        v19[1] = v10;
        long long v11 = *(_OWORD *)(v4 + 112);
        v17[6] = *(_OWORD *)(v4 + 96);
        v17[7] = v11;
        uint64_t v18 = *(void *)(v4 + 128);
        long long v12 = *(_OWORD *)(v4 + 48);
        v17[2] = *(_OWORD *)(v4 + 32);
        v17[3] = v12;
        long long v13 = *(_OWORD *)(v4 + 80);
        v17[4] = *(_OWORD *)(v4 + 64);
        v17[5] = v13;
        long long v14 = *(_OWORD *)(v4 + 16);
        v17[0] = *(_OWORD *)v4;
        v17[1] = v14;
        BOOL v15 = _s23HealthRecordsExtraction7AddressV2eeoiySbAC_ACtFZ_0(v19, v17);
        if (!v15) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v4 += 136;
        v3 += 136;
      }
      while (v6);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_232E905D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Identifier();
  uint64_t v57 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v46 - v8;
  sub_232E9A97C(0, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  long long v13 = (char *)&v46 - v12;
  uint64_t v14 = type metadata accessor for ModelsR4.PatientLink(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v21 = (uint64_t *)((char *)&v46 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v50 = v18;
  uint64_t v55 = v4;
  v56 = v9;
  if (!v22 || a1 == a2) {
    return 1;
  }
  v47 = v6;
  v48 = (char *)&v46 - v20;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v49 = *(void *)(v19 + 72);
  uint64_t v51 = v11;
  v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  uint64_t v24 = v50;
  while (1)
  {
    sub_232E96790(v53 + v23, (uint64_t)v21, type metadata accessor for ModelsR4.PatientLink);
    sub_232E96790(v54 + v23, (uint64_t)v17, type metadata accessor for ModelsR4.PatientLink);
    uint64_t v26 = v21[1];
    uint64_t v27 = v17[1];
    if (v26)
    {
      if (!v27) {
        goto LABEL_34;
      }
      BOOL v28 = *v21 == *v17 && v26 == v27;
      if (!v28 && (sub_23309C220() & 1) == 0) {
        goto LABEL_34;
      }
    }
    else if (v27)
    {
      goto LABEL_34;
    }
    uint64_t v29 = v21[3];
    uint64_t v30 = v17[3];
    if (v29)
    {
      if (!v30 || (v21[2] != v17[2] || v29 != v30) && (sub_23309C220() & 1) == 0) {
        goto LABEL_34;
      }
    }
    else if (v30)
    {
      goto LABEL_34;
    }
    uint64_t v57 = v22;
    uint64_t v31 = *(int *)(type metadata accessor for Reference() + 24);
    uint64_t v32 = (uint64_t)v17 + v31;
    uint64_t v33 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_232E96888((uint64_t)v21 + v31, (uint64_t)v13, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    sub_232E96888(v32, v33, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v34 = *v52;
    uint64_t v35 = v55;
    if ((*v52)(v13, 1, v55) != 1) {
      break;
    }
    if (v34((char *)v33, 1, v35) != 1) {
      goto LABEL_33;
    }
    sub_232E96908((uint64_t)v13, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v11 = v51;
    uint64_t v36 = v57;
    uint64_t v21 = v48;
LABEL_28:
    uint64_t v41 = *(int *)(v24 + 20);
    uint64_t v42 = *(void *)((char *)v21 + v41);
    uint64_t v43 = *(void *)((char *)v21 + v41 + 8);
    v44 = (void *)((char *)v17 + v41);
    if (v42 == *v44 && v43 == v44[1])
    {
      sub_232E9AB78((uint64_t)v17, type metadata accessor for ModelsR4.PatientLink);
      sub_232E9AB78((uint64_t)v21, type metadata accessor for ModelsR4.PatientLink);
    }
    else
    {
      char v25 = sub_23309C220();
      sub_232E9AB78((uint64_t)v17, type metadata accessor for ModelsR4.PatientLink);
      sub_232E9AB78((uint64_t)v21, type metadata accessor for ModelsR4.PatientLink);
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
    v23 += v49;
    uint64_t v22 = v36 - 1;
    if (!v22) {
      return 1;
    }
  }
  uint64_t v37 = v35;
  uint64_t v38 = (uint64_t)v56;
  sub_232E96888((uint64_t)v13, (uint64_t)v56, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v34((char *)v33, 1, v37) != 1)
  {
    uint64_t v39 = (uint64_t)v47;
    sub_232E9ABD8(v33, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Identifier);
    char v40 = static Identifier.== infix(_:_:)(v56, v39);
    sub_232E9AB78(v39, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E9AB78((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E96908((uint64_t)v13, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v24 = v50;
    uint64_t v11 = v51;
    uint64_t v36 = v57;
    if ((v40 & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  sub_232E9AB78(v38, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_33:
  sub_232E9AB1C((uint64_t)v13, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v21 = v48;
LABEL_34:
  sub_232E9AB78((uint64_t)v17, type metadata accessor for ModelsR4.PatientLink);
  sub_232E9AB78((uint64_t)v21, type metadata accessor for ModelsR4.PatientLink);
  return 0;
}

uint64_t sub_232E90BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = type metadata accessor for Identifier();
  uint64_t v4 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v40 - v8;
  sub_232E9A97C(0, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (uint64_t)&v40 - v11;
  uint64_t v47 = type metadata accessor for Reference();
  uint64_t v12 = MEMORY[0x270FA5388](v47);
  uint64_t v14 = (char **)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char **)((char *)&v40 - v16);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v18 || a1 == a2) {
    return 1;
  }
  char v40 = v6;
  uint64_t v41 = v9;
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v42 = *(void *)(v15 + 72);
  uint64_t v43 = a2;
  uint64_t v20 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  uint64_t v44 = a1;
  v45 = v14;
  while (1)
  {
    sub_232E96790(a1 + v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Reference);
    sub_232E96790(a2 + v19, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Reference);
    uint64_t v21 = v17[1];
    uint64_t v22 = v14[1];
    if (v21)
    {
      if (!v22) {
        goto LABEL_31;
      }
      BOOL v23 = *v17 == *v14 && v21 == v22;
      if (!v23 && (sub_23309C220() & 1) == 0) {
        goto LABEL_31;
      }
    }
    else if (v22)
    {
      goto LABEL_31;
    }
    uint64_t v24 = v17[3];
    uint64_t v25 = v14[3];
    if (v24)
    {
      if (!v25 || (v17[2] != v14[2] || v24 != v25) && (sub_23309C220() & 1) == 0) {
        goto LABEL_31;
      }
    }
    else if (v25)
    {
      goto LABEL_31;
    }
    uint64_t v26 = v46;
    uint64_t v27 = *(int *)(v47 + 24);
    uint64_t v28 = (uint64_t)v14 + v27;
    uint64_t v29 = v46 + *(int *)(v48 + 48);
    uint64_t v30 = v20;
    sub_232E96888((uint64_t)v17 + v27, v46, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v31 = v49;
    sub_232E96888(v28, v29, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v32 = *v20;
    if ((*v20)(v26, 1, v31) != 1) {
      break;
    }
    if (v32(v29, 1, v49) != 1) {
      goto LABEL_30;
    }
    sub_232E96908(v26, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v43;
    a1 = v44;
    uint64_t v14 = v45;
LABEL_5:
    sub_232E9AB78((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Reference);
    sub_232E9AB78((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Reference);
    v19 += v42;
    if (!--v18) {
      return 1;
    }
  }
  uint64_t v33 = v26;
  uint64_t v34 = v26;
  uint64_t v35 = (uint64_t)v41;
  sub_232E96888(v33, (uint64_t)v41, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v32(v29, 1, v49) != 1)
  {
    uint64_t v36 = (uint64_t)v40;
    sub_232E9ABD8(v29, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for Identifier);
    char v37 = static Identifier.== infix(_:_:)(v35, v36);
    uint64_t v38 = v36;
    uint64_t v20 = v30;
    sub_232E9AB78(v38, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E9AB78(v35, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E96908(v34, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v43;
    a1 = v44;
    uint64_t v14 = v45;
    if ((v37 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  sub_232E9AB78(v35, (uint64_t (*)(void))type metadata accessor for Identifier);
  uint64_t v26 = v34;
LABEL_30:
  sub_232E9AB1C(v26, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v14 = v45;
LABEL_31:
  sub_232E9AB78((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232E9AB78((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Reference);
  return 0;
}

uint64_t sub_232E91178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v85 = (uint64_t)&v66 - v10;
  sub_232E9A97C(0, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, v8);
  uint64_t v84 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v86 = (uint64_t)&v66 - v12;
  uint64_t v83 = type metadata accessor for Coding();
  uint64_t v13 = MEMORY[0x270FA5388](v83);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v66 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v19 || a1 == a2) {
    return 1;
  }
  v76 = v7;
  uint64_t v20 = 0;
  uint64_t v21 = a1 + 32;
  uint64_t v22 = a2 + 32;
  v82 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v75 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  v77 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v72 = v19;
  uint64_t v73 = v16;
  while (1)
  {
    uint64_t v24 = (void *)(v21 + 24 * v20);
    uint64_t v25 = v24[1];
    uint64_t v26 = v24[2];
    uint64_t v27 = (void *)(v22 + 24 * v20);
    uint64_t v28 = v27[1];
    uint64_t v29 = v27[2];
    if (v25)
    {
      if (!v28) {
        return 0;
      }
      if (*v24 != *v27 || v25 != v28)
      {
        uint64_t v31 = v27[1];
        uint64_t v32 = v22;
        char v33 = sub_23309C220();
        uint64_t v28 = v31;
        uint64_t v22 = v32;
        uint64_t v19 = v72;
        uint64_t v16 = v73;
        if ((v33 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v28)
    {
      return 0;
    }
    if (!v26)
    {
      if (v29) {
        return 0;
      }
      goto LABEL_7;
    }
    if (!v29) {
      return 0;
    }
    uint64_t v34 = *(void *)(v26 + 16);
    if (v34 != *(void *)(v29 + 16)) {
      return 0;
    }
    if (v34 && v26 != v29) {
      break;
    }
LABEL_7:
    ++v20;
    uint64_t result = 1;
    if (v20 == v19) {
      return result;
    }
  }
  uint64_t v67 = v22;
  uint64_t v68 = v21;
  uint64_t v69 = v20;
  unint64_t v35 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v71 = v28;
  uint64_t v36 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v79 = *(void *)(v36 + 72);
  uint64_t v70 = v25;
  swift_bridgeObjectRetain();
  uint64_t v81 = v26;
  swift_bridgeObjectRetain();
  unint64_t v37 = 0;
  v74 = v18;
  uint64_t v80 = v29;
  while (1)
  {
    uint64_t result = sub_232E96790(v81 + v35, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Coding);
    if (v37 >= *(void *)(v29 + 16)) {
      break;
    }
    sub_232E96790(v29 + v35, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Coding);
    uint64_t v38 = v86;
    uint64_t v39 = v86 + *(int *)(v84 + 48);
    char v40 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_232E96888((uint64_t)v18, v86, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_232E96888((uint64_t)v15, v39, (unint64_t *)&qword_268756520, v40);
    uint64_t v41 = *v82;
    if ((*v82)(v38, 1, v4) == 1)
    {
      if (v41(v39, 1, v4) != 1) {
        goto LABEL_53;
      }
      sub_232E96908(v86, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      uint64_t v42 = (int *)v83;
    }
    else
    {
      sub_232E96888(v86, v85, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if (v41(v39, 1, v4) == 1)
      {
        (*v77)(v85, v4);
LABEL_53:
        sub_232E9AB1C(v86, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
LABEL_54:
        sub_232E9AB78((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Coding);
        sub_232E9AB78((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Coding);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      uint64_t v43 = *v75;
      uint64_t v44 = v15;
      unint64_t v78 = v35;
      uint64_t v45 = v85;
      uint64_t v46 = v76;
      v43(v76, v39, v4);
      sub_232E95E90((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
      char v47 = sub_23309B6D0();
      uint64_t v48 = *v77;
      uint64_t v49 = (uint64_t)v46;
      uint64_t v15 = v44;
      uint64_t v18 = v74;
      (*v77)(v49, v4);
      uint64_t v50 = v45;
      unint64_t v35 = v78;
      v48(v50, v4);
      sub_232E96908(v86, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      uint64_t v42 = (int *)v83;
      if ((v47 & 1) == 0) {
        goto LABEL_54;
      }
    }
    uint64_t v51 = v42[5];
    v52 = &v18[v51];
    uint64_t v53 = *(void *)&v18[v51 + 8];
    uint64_t v54 = &v15[v51];
    uint64_t v55 = *((void *)v54 + 1);
    if (v53)
    {
      if (!v55 || (*(void *)v52 != *(void *)v54 || v53 != v55) && (sub_23309C220() & 1) == 0) {
        goto LABEL_54;
      }
    }
    else if (v55)
    {
      goto LABEL_54;
    }
    uint64_t v56 = v42[6];
    uint64_t v57 = &v18[v56];
    uint64_t v58 = *(void *)&v18[v56 + 8];
    id v59 = &v15[v56];
    uint64_t v60 = *((void *)v59 + 1);
    if (v58)
    {
      if (!v60 || (*(void *)v57 != *(void *)v59 || v58 != v60) && (sub_23309C220() & 1) == 0) {
        goto LABEL_54;
      }
    }
    else if (v60)
    {
      goto LABEL_54;
    }
    uint64_t v61 = v42[7];
    v62 = &v18[v61];
    uint64_t v63 = *(void *)&v18[v61 + 8];
    v64 = &v15[v61];
    uint64_t v65 = *((void *)v64 + 1);
    if (v63)
    {
      if (!v65 || (*(void *)v62 != *(void *)v64 || v63 != v65) && (sub_23309C220() & 1) == 0) {
        goto LABEL_54;
      }
    }
    else if (v65)
    {
      goto LABEL_54;
    }
    ++v37;
    sub_232E9AB78((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Coding);
    sub_232E9AB78((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Coding);
    uint64_t v29 = v80;
    v35 += v79;
    if (v34 == v37)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v19 = v72;
      uint64_t v16 = v73;
      uint64_t v21 = v68;
      uint64_t v20 = v69;
      uint64_t v22 = v67;
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_232E91944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v99 = (uint64_t)&v80 - v10;
  sub_232E9A97C(0, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, v8);
  uint64_t v100 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v102 = (uint64_t)&v80 - v12;
  v103 = (int *)type metadata accessor for Coding();
  uint64_t v98 = *((void *)v103 - 1);
  uint64_t v13 = MEMORY[0x270FA5388](v103);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v101 = (char *)&v80 - v16;
  uint64_t v17 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v104 = (uint64_t)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v80 - v21;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v23 || a1 == a2) {
    return 1;
  }
  uint64_t v84 = v7;
  uint64_t v24 = 0;
  unint64_t v25 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v96 = a2 + v25;
  uint64_t v97 = a1 + v25;
  uint64_t v26 = *(void *)(v20 + 72);
  v94 = v15;
  uint64_t v95 = v26;
  v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v83 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v85 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v86 = v17;
  uint64_t v27 = (uint64_t)v101;
  uint64_t v28 = v98;
  uint64_t v92 = v4;
  uint64_t v93 = v23;
  while (1)
  {
    uint64_t v30 = v95 * v24;
    sub_232E96790(v97 + v95 * v24, (uint64_t)v22, type metadata accessor for ModelsR4.DocumentReferenceContent);
    uint64_t v31 = v104;
    sub_232E96790(v96 + v30, v104, type metadata accessor for ModelsR4.DocumentReferenceContent);
    if ((static Attachment.== infix(_:_:)(v22, v31) & 1) == 0) {
      goto LABEL_69;
    }
    uint64_t v32 = *(int *)(v17 + 20);
    uint64_t v33 = *(void *)&v22[v32];
    uint64_t v34 = *(void *)&v22[v32 + 8];
    uint64_t v35 = *(void *)&v22[v32 + 16];
    uint64_t v36 = (uint64_t *)(v104 + v32);
    uint64_t v38 = *v36;
    uint64_t v37 = v36[1];
    uint64_t v39 = v36[2];
    if (v34 != 1) {
      break;
    }
    if (v37 != 1) {
      goto LABEL_62;
    }
LABEL_6:
    ++v24;
    sub_232E9AB78(v104, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_232E9AB78((uint64_t)v22, type metadata accessor for ModelsR4.DocumentReferenceContent);
    uint64_t result = 1;
    if (v24 == v93) {
      return result;
    }
  }
  if (v37 == 1)
  {
    uint64_t v76 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = v76;
LABEL_62:
    uint64_t v77 = v33;
    sub_232E967F8(v38, v37);
    sub_232E96840(v77, v34);
    uint64_t v78 = v38;
    uint64_t v79 = v37;
    goto LABEL_68;
  }
  if (v34)
  {
    if (!v37
      || (v33 == v38 ? (BOOL v40 = v34 == v37) : (BOOL v40 = 0),
          !v40 && (v41 = v33, v42 = sub_23309C220(), uint64_t v33 = v41, (v42 & 1) == 0)))
    {
LABEL_66:
      uint64_t v82 = v33;
      sub_232E967F8(v33, v34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_67:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v78 = v82;
      uint64_t v79 = v34;
LABEL_68:
      sub_232E96840(v78, v79);
LABEL_69:
      sub_232E9AB78(v104, type metadata accessor for ModelsR4.DocumentReferenceContent);
      sub_232E9AB78((uint64_t)v22, type metadata accessor for ModelsR4.DocumentReferenceContent);
      return 0;
    }
  }
  else if (v37)
  {
    goto LABEL_66;
  }
  if (!v35)
  {
    uint64_t v47 = v33;
    sub_232E967F8(v33, v34);
    swift_bridgeObjectRetain();
    if (v39)
    {
      uint64_t v82 = v47;
      goto LABEL_67;
    }
    goto LABEL_57;
  }
  uint64_t v43 = (uint64_t)v94;
  if (!v39) {
    goto LABEL_66;
  }
  uint64_t v44 = *(void *)(v35 + 16);
  if (v44 != *(void *)(v39 + 16)) {
    goto LABEL_66;
  }
  if (!v44)
  {
    uint64_t v47 = v33;
    sub_232E967F8(v33, v34);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v47, v34);
    uint64_t v17 = v86;
    goto LABEL_6;
  }
  uint64_t v88 = *(void *)(v35 + 16);
  uint64_t v45 = v34;
  uint64_t v46 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v47 = v33;
  sub_232E967F8(v33, v45);
  if (v35 == v39)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = v45;
    goto LABEL_57;
  }
  uint64_t v48 = (v46 + 32) & ~v46;
  uint64_t v82 = v47;
  uint64_t v81 = v45;
  sub_232E967F8(v47, v45);
  swift_bridgeObjectRetain();
  uint64_t v90 = v35;
  swift_bridgeObjectRetain();
  unint64_t v49 = 0;
  uint64_t v87 = *(void *)(v28 + 72);
  uint64_t v89 = v39;
  while (1)
  {
    uint64_t result = sub_232E96790(v90 + v48, v27, (uint64_t (*)(void))type metadata accessor for Coding);
    if (v49 >= *(void *)(v39 + 16)) {
      break;
    }
    sub_232E96790(v39 + v48, v43, (uint64_t (*)(void))type metadata accessor for Coding);
    uint64_t v50 = v27;
    uint64_t v51 = v102;
    uint64_t v52 = v102 + *(int *)(v100 + 48);
    uint64_t v53 = (uint64_t (*)(uint64_t))MEMORY[0x263F06EA8];
    sub_232E96888(v50, v102, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
    sub_232E96888(v43, v52, (unint64_t *)&qword_268756520, v53);
    uint64_t v54 = v92;
    uint64_t v55 = *v91;
    if ((*v91)(v51, 1, v92) == 1)
    {
      if (v55(v52, 1, v54) != 1) {
        goto LABEL_64;
      }
      sub_232E96908(v102, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      uint64_t v43 = (uint64_t)v94;
      uint64_t v27 = (uint64_t)v101;
      uint64_t v39 = v89;
    }
    else
    {
      sub_232E96888(v102, v99, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if (v55(v52, 1, v54) == 1)
      {
        (*v85)(v99, v54);
LABEL_64:
        sub_232E9AB1C(v102, (unint64_t *)&qword_268756528, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
        uint64_t v43 = (uint64_t)v94;
        uint64_t v27 = (uint64_t)v101;
LABEL_65:
        sub_232E9AB78(v43, (uint64_t (*)(void))type metadata accessor for Coding);
        sub_232E9AB78(v27, (uint64_t (*)(void))type metadata accessor for Coding);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v34 = v81;
        goto LABEL_67;
      }
      uint64_t v56 = v99;
      uint64_t v57 = v84;
      (*v83)(v84, v52, v54);
      sub_232E95E90((unint64_t *)&qword_268756530, MEMORY[0x263F06EA8]);
      uint64_t v58 = v54;
      char v59 = sub_23309B6D0();
      uint64_t v60 = *v85;
      (*v85)((uint64_t)v57, v58);
      v60(v56, v58);
      sub_232E96908(v102, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      uint64_t v43 = (uint64_t)v94;
      uint64_t v27 = (uint64_t)v101;
      uint64_t v39 = v89;
      if ((v59 & 1) == 0) {
        goto LABEL_65;
      }
    }
    uint64_t v61 = v103[5];
    v62 = (void *)(v27 + v61);
    uint64_t v63 = *(void *)(v27 + v61 + 8);
    v64 = (void *)(v43 + v61);
    uint64_t v65 = v64[1];
    if (v63)
    {
      if (!v65 || (*v62 != *v64 || v63 != v65) && (sub_23309C220() & 1) == 0) {
        goto LABEL_65;
      }
    }
    else if (v65)
    {
      goto LABEL_65;
    }
    uint64_t v66 = v103[6];
    uint64_t v67 = (void *)(v27 + v66);
    uint64_t v68 = *(void *)(v27 + v66 + 8);
    uint64_t v69 = (void *)(v43 + v66);
    uint64_t v70 = v69[1];
    if (v68)
    {
      if (!v70 || (*v67 != *v69 || v68 != v70) && (sub_23309C220() & 1) == 0) {
        goto LABEL_65;
      }
    }
    else if (v70)
    {
      goto LABEL_65;
    }
    uint64_t v71 = v103[7];
    uint64_t v72 = (void *)(v27 + v71);
    uint64_t v73 = *(void *)(v27 + v71 + 8);
    v74 = (void *)(v43 + v71);
    uint64_t v75 = v74[1];
    if (v73)
    {
      if (!v75 || (*v72 != *v74 || v73 != v75) && (sub_23309C220() & 1) == 0) {
        goto LABEL_65;
      }
    }
    else if (v75)
    {
      goto LABEL_65;
    }
    ++v49;
    sub_232E9AB78(v43, (uint64_t (*)(void))type metadata accessor for Coding);
    sub_232E9AB78(v27, (uint64_t (*)(void))type metadata accessor for Coding);
    v48 += v87;
    if (v88 == v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v98;
      uint64_t v34 = v81;
      uint64_t v47 = v82;
      goto LABEL_57;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_232E92414(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for Attachment, (uint64_t (*)(void))type metadata accessor for Attachment, (uint64_t (*)(char *, char *))static Attachment.== infix(_:_:), (uint64_t (*)(void))type metadata accessor for Attachment);
}

uint64_t sub_232E92468(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FHIRDateTime();
  uint64_t v43 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v36 - v8;
  sub_232E9A97C(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for Annotation();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v21 = (uint64_t *)((char *)&v36 - v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 == *(void *)(a2 + 16))
  {
    uint64_t v38 = v9;
    uint64_t v39 = v11;
    if (!v22 || a1 == a2) {
      return 1;
    }
    uint64_t v37 = v6;
    unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v40 = *(void *)(v19 + 72);
    uint64_t v41 = a2;
    v43 += 6;
    uint64_t v44 = v18;
    uint64_t v24 = v39;
    uint64_t v42 = a1;
    uint64_t v45 = v17;
    while (1)
    {
      sub_232E96790(a1 + v23, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Annotation);
      sub_232E96790(a2 + v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Annotation);
      BOOL v25 = *v21 == *v17 && v21[1] == v17[1];
      if (!v25 && (sub_23309C220() & 1) == 0) {
        break;
      }
      uint64_t v26 = *(int *)(v44 + 20);
      uint64_t v27 = (uint64_t)v17 + v26;
      uint64_t v28 = (uint64_t)&v13[*(int *)(v24 + 48)];
      sub_232E96888((uint64_t)v21 + v26, (uint64_t)v13, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232E96888(v27, v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      uint64_t v29 = *v43;
      if ((*v43)(v13, 1, v4) == 1)
      {
        if (v29((char *)v28, 1, v4) != 1) {
          goto LABEL_19;
        }
        sub_232E96908((uint64_t)v13, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v17 = v45;
      }
      else
      {
        uint64_t v30 = (uint64_t)v38;
        sub_232E96888((uint64_t)v13, (uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if (v29((char *)v28, 1, v4) == 1)
        {
          sub_232E9AB78(v30, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_19:
          sub_232E9AB1C((uint64_t)v13, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          uint64_t v17 = v45;
          break;
        }
        uint64_t v31 = v30;
        uint64_t v32 = (uint64_t)v37;
        sub_232E9ABD8(v28, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        char v33 = static FHIRDateTime.== infix(_:_:)(v31, v32);
        uint64_t v34 = v31;
        uint64_t v24 = v39;
        sub_232E9AB78(v34, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_232E9AB78(v32, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_232E96908((uint64_t)v13, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v17 = v45;
        if ((v33 & 1) == 0) {
          break;
        }
      }
      sub_232E9AB78((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Annotation);
      sub_232E9AB78((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Annotation);
      a2 = v41;
      v23 += v40;
      --v22;
      a1 = v42;
      if (!v22) {
        return 1;
      }
    }
    sub_232E9AB78((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Annotation);
    sub_232E9AB78((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Annotation);
  }
  return 0;
}

BOOL sub_232E929BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v2 - 1;
      do
      {
        char v7 = *(unsigned char *)(a1 + v5 + 40);
        uint64_t v8 = *(void *)(a1 + v5 + 64);
        char v9 = *(unsigned char *)(a1 + v5 + 72);
        uint64_t v10 = *(void *)(a1 + v5 + 112);
        uint64_t v29 = *(void *)(a1 + v5 + 32);
        char v30 = v7;
        long long v31 = *(_OWORD *)(a1 + v5 + 48);
        uint64_t v32 = v8;
        char v33 = v9;
        long long v11 = *(_OWORD *)(a1 + v5 + 96);
        long long v34 = *(_OWORD *)(a1 + v5 + 80);
        long long v35 = v11;
        uint64_t v36 = v10;
        char v12 = *(unsigned char *)(a2 + v5 + 40);
        uint64_t v13 = *(void *)(a2 + v5 + 64);
        char v14 = *(unsigned char *)(a2 + v5 + 72);
        uint64_t v15 = *(void *)(a2 + v5 + 112);
        uint64_t v21 = *(void *)(a2 + v5 + 32);
        char v22 = v12;
        long long v23 = *(_OWORD *)(a2 + v5 + 48);
        uint64_t v24 = v13;
        char v25 = v14;
        long long v16 = *(_OWORD *)(a2 + v5 + 96);
        long long v26 = *(_OWORD *)(a2 + v5 + 80);
        long long v27 = v16;
        uint64_t v28 = v15;
        BOOL v17 = _s23HealthRecordsExtraction8ModelsR4V20ImmunizationProtocolV2eeoiySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)&v21);
        BOOL v19 = v6-- != 0;
        if (!v17) {
          break;
        }
        v5 += 88;
      }
      while (v19);
    }
  }
  else
  {
    return 0;
  }
  return v17;
}

uint64_t sub_232E92ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a1;
  uint64_t v67 = type metadata accessor for Identifier();
  uint64_t v74 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v64 = (uint64_t)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232E9AAB8(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v65 = (uint64_t)&v58 - v6;
  sub_232E9A97C(0, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t v11 = type metadata accessor for Reference();
  uint64_t v68 = *(char **)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v4);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v58 - v15;
  sub_232E9A97C(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = type metadata accessor for ModelsR4.ImmunizationPerformer(0) - 8;
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  MEMORY[0x270FA5388](v22);
  long long v27 = (char *)&v58 - v26;
  uint64_t v28 = *(void *)(v25 + 16);
  if (v28 != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v29 = (uint64_t)v68;
  uint64_t v70 = v24;
  uint64_t v71 = v13;
  uint64_t v72 = v16;
  uint64_t v73 = v11;
  uint64_t v63 = v8;
  if (!v28 || v25 == a2) {
    return 1;
  }
  uint64_t v30 = a2;
  uint64_t v68 = v20;
  uint64_t v69 = v18;
  unint64_t v31 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v66 = *(void *)(v23 + 72);
  uint64_t v32 = (uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v61 = v10;
  v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  uint64_t v33 = v70;
  char v59 = (uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v60 = a2;
  while (1)
  {
    uint64_t v74 = v28;
    sub_232E96790(v75 + v31, (uint64_t)v27, type metadata accessor for ModelsR4.ImmunizationPerformer);
    uint64_t v35 = v30;
    sub_232E96790(v30 + v31, v33, type metadata accessor for ModelsR4.ImmunizationPerformer);
    uint64_t v36 = (uint64_t)&v20[*(int *)(v69 + 48)];
    uint64_t v37 = v27;
    sub_232E96888((uint64_t)v27, (uint64_t)v20, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232E96888(v33, v36, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    uint64_t v38 = *v32;
    uint64_t v39 = v73;
    if ((*v32)(v20, 1, v73) != 1) {
      break;
    }
    int v34 = v38((char *)v36, 1, v39);
    long long v27 = v37;
    uint64_t v30 = v35;
    if (v34 != 1) {
      goto LABEL_31;
    }
LABEL_6:
    uint64_t v20 = v68;
    sub_232E96908((uint64_t)v68, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232E9AB78(v33, type metadata accessor for ModelsR4.ImmunizationPerformer);
    sub_232E9AB78((uint64_t)v27, type metadata accessor for ModelsR4.ImmunizationPerformer);
    v31 += v66;
    uint64_t v28 = v74 - 1;
    if (v74 == 1) {
      return 1;
    }
  }
  uint64_t v40 = (uint64_t)v72;
  sub_232E96888((uint64_t)v20, (uint64_t)v72, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v38((char *)v36, 1, v39) == 1)
  {
    sub_232E9AB78(v40, (uint64_t (*)(void))type metadata accessor for Reference);
    uint64_t v33 = v70;
    long long v27 = v37;
LABEL_31:
    sub_232E9AB1C((uint64_t)v68, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    goto LABEL_35;
  }
  uint64_t v41 = v36;
  uint64_t v42 = v71;
  sub_232E9ABD8(v41, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for Reference);
  uint64_t v43 = *(void *)(v40 + 8);
  uint64_t v44 = v42[1];
  uint64_t v45 = (void *)v40;
  if (v43)
  {
    uint64_t v33 = v70;
    long long v27 = v37;
    if (!v44 || (*v45 != *v42 || v43 != v44) && (sub_23309C220() & 1) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v33 = v70;
    long long v27 = v37;
    if (v44) {
      goto LABEL_34;
    }
  }
  uint64_t v46 = v45[3];
  uint64_t v47 = v42[3];
  if (v46)
  {
    if (!v47 || (v45[2] != v42[2] || v46 != v47) && (sub_23309C220() & 1) == 0) {
      goto LABEL_34;
    }
  }
  else if (v47)
  {
    goto LABEL_34;
  }
  uint64_t v48 = *(int *)(v73 + 24);
  uint64_t v49 = (uint64_t)v42 + v48;
  uint64_t v50 = (uint64_t)v61;
  uint64_t v51 = (uint64_t)&v61[*(int *)(v63 + 48)];
  sub_232E96888((uint64_t)v45 + v48, (uint64_t)v61, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  sub_232E96888(v49, v51, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v52 = *v62;
  uint64_t v53 = v67;
  if ((*v62)(v50, 1, v67) == 1)
  {
    if (v52(v51, 1, v53) != 1) {
      goto LABEL_33;
    }
    sub_232E96908(v50, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v30 = v60;
    uint64_t v42 = v71;
    uint64_t v45 = v72;
    goto LABEL_28;
  }
  uint64_t v54 = v65;
  sub_232E96888(v50, v65, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v52(v51, 1, v53) != 1)
  {
    uint64_t v55 = v64;
    sub_232E9ABD8(v51, v64, (uint64_t (*)(void))type metadata accessor for Identifier);
    char v56 = static Identifier.== infix(_:_:)(v54, v55);
    sub_232E9AB78(v55, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E9AB78(v54, (uint64_t (*)(void))type metadata accessor for Identifier);
    sub_232E96908(v50, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    uint64_t v30 = v60;
    uint64_t v33 = v70;
    uint64_t v42 = v71;
    uint64_t v45 = v72;
    if ((v56 & 1) == 0) {
      goto LABEL_34;
    }
LABEL_28:
    sub_232E9AB78((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for Reference);
    sub_232E9AB78((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Reference);
    uint64_t v32 = v59;
    goto LABEL_6;
  }
  sub_232E9AB78(v54, (uint64_t (*)(void))type metadata accessor for Identifier);
  uint64_t v33 = v70;
LABEL_33:
  sub_232E9AB1C(v50, (unint64_t *)&qword_268756540, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  uint64_t v42 = v71;
  uint64_t v45 = v72;
LABEL_34:
  sub_232E9AB78((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232E9AB78((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232E96908((uint64_t)v68, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
LABEL_35:
  sub_232E9AB78(v33, type metadata accessor for ModelsR4.ImmunizationPerformer);
  sub_232E9AB78((uint64_t)v27, type metadata accessor for ModelsR4.ImmunizationPerformer);
  return 0;
}

uint64_t sub_232E93404(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for ReferenceRange, (uint64_t (*)(void))type metadata accessor for ReferenceRange, (uint64_t (*)(char *, char *))static ReferenceRange.== infix(_:_:), (uint64_t (*)(void))type metadata accessor for ReferenceRange);
}

uint64_t sub_232E93458(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v3 = a2;
    if (a1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v14 = a1;
      while (1)
      {
        uint64_t v5 = *(void *)(a1 + v4 + 48);
        uint64_t v6 = *(void *)(a1 + v4 + 56);
        uint64_t v8 = *(void *)(a1 + v4 + 64);
        uint64_t v7 = *(void *)(a1 + v4 + 72);
        uint64_t v30 = *(void *)(a1 + v4 + 88);
        uint64_t v31 = *(void *)(a1 + v4 + 80);
        uint64_t v26 = *(void *)(a1 + v4 + 104);
        uint64_t v27 = *(void *)(a1 + v4 + 96);
        uint64_t v22 = *(void *)(a1 + v4 + 120);
        uint64_t v23 = *(void *)(a1 + v4 + 112);
        uint64_t v18 = *(void *)(a1 + v4 + 136);
        uint64_t v19 = *(void *)(a1 + v4 + 128);
        uint64_t v9 = *(void *)(v3 + v4 + 48);
        uint64_t v10 = *(void *)(v3 + v4 + 56);
        uint64_t v12 = *(void *)(v3 + v4 + 64);
        uint64_t v11 = *(void *)(v3 + v4 + 72);
        uint64_t v28 = *(void *)(v3 + v4 + 80);
        uint64_t v29 = *(void *)(v3 + v4 + 88);
        uint64_t v24 = *(void *)(v3 + v4 + 104);
        uint64_t v25 = *(void *)(v3 + v4 + 96);
        uint64_t v20 = *(void *)(v3 + v4 + 120);
        uint64_t v21 = *(void *)(v3 + v4 + 112);
        uint64_t v16 = *(void *)(v3 + v4 + 136);
        uint64_t v17 = *(void *)(v3 + v4 + 128);
        if ((*(void *)(a1 + v4 + 32) != *(void *)(v3 + v4 + 32)
           || *(void *)(a1 + v4 + 40) != *(void *)(v3 + v4 + 40))
          && (sub_23309C220() & 1) == 0)
        {
          break;
        }
        if ((v5 != v9 || v6 != v10) && (sub_23309C220() & 1) == 0
          || (v8 != v12 || v7 != v11) && (sub_23309C220() & 1) == 0
          || (v31 != v28 || v30 != v29) && (sub_23309C220() & 1) == 0
          || (v27 != v25 || v26 != v24) && (sub_23309C220() & 1) == 0
          || (v23 != v21 || v22 != v20) && (sub_23309C220() & 1) == 0
          || (v19 != v17 || v18 != v16) && (sub_23309C220() & 1) == 0)
        {
          break;
        }
        v4 += 112;
        --v2;
        a1 = v14;
        uint64_t v3 = a2;
        if (!v2) {
          return 1;
        }
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_232E9366C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v17 = 1;
    }
    else
    {
      uint64_t v3 = (_OWORD *)(a1 + 32);
      uint64_t v4 = (_OWORD *)(a2 + 32);
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        long long v7 = v3[7];
        v20[6] = v3[6];
        v20[7] = v7;
        long long v8 = v3[9];
        v20[8] = v3[8];
        v20[9] = v8;
        long long v9 = v3[3];
        v20[2] = v3[2];
        v20[3] = v9;
        long long v10 = v3[5];
        v20[4] = v3[4];
        v20[5] = v10;
        long long v11 = v3[1];
        v20[0] = *v3;
        v20[1] = v11;
        long long v12 = v4[7];
        v19[6] = v4[6];
        v19[7] = v12;
        long long v13 = v4[9];
        _OWORD v19[8] = v4[8];
        v19[9] = v13;
        long long v14 = v4[3];
        v19[2] = v4[2];
        v19[3] = v14;
        long long v15 = v4[5];
        v19[4] = v4[4];
        v19[5] = v15;
        long long v16 = v4[1];
        v19[0] = *v4;
        v19[1] = v16;
        char v17 = _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV2eeoiySbAE_AEtFZ_0(v20, v19);
        if ((v17 & 1) == 0) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v4 += 10;
        v3 += 10;
      }
      while (v6);
    }
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_232E93748(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 88);
    for (i = (uint64_t *)(a2 + 88); ; i += 18)
    {
      uint64_t v5 = *(v3 - 5);
      uint64_t v6 = *(v3 - 4);
      uint64_t v7 = *(v3 - 3);
      uint64_t v38 = *(v3 - 1);
      uint64_t v39 = *(v3 - 2);
      uint64_t v35 = v3[1];
      uint64_t v36 = *v3;
      uint64_t v31 = v3[3];
      uint64_t v32 = v3[2];
      uint64_t v27 = v3[5];
      uint64_t v28 = v3[4];
      uint64_t v24 = v3[6];
      uint64_t v21 = v3[8];
      uint64_t v22 = v3[7];
      uint64_t v17 = v3[10];
      uint64_t v18 = v3[9];
      uint64_t v8 = *(i - 5);
      uint64_t v9 = *(i - 4);
      uint64_t v11 = *(i - 3);
      uint64_t v10 = *(i - 2);
      uint64_t v37 = *(i - 1);
      uint64_t v34 = *i;
      uint64_t v33 = i[1];
      uint64_t v29 = i[3];
      uint64_t v30 = i[2];
      uint64_t v25 = i[5];
      uint64_t v26 = i[4];
      uint64_t v23 = i[6];
      uint64_t v19 = i[8];
      uint64_t v20 = i[7];
      uint64_t v15 = i[10];
      uint64_t v16 = i[9];
      if ((*(v3 - 7) != *(i - 7) || *(v3 - 6) != *(i - 6)) && (sub_23309C220() & 1) == 0) {
        break;
      }
      if (v5 == v8 && v6 == v9)
      {
        if (v7 != v11) {
          return 0;
        }
      }
      else
      {
        char v12 = sub_23309C220();
        uint64_t result = 0;
        if ((v12 & 1) == 0 || v7 != v11) {
          return result;
        }
      }
      if ((v39 != v10 || v38 != v37) && (sub_23309C220() & 1) == 0
        || (v36 != v34 || v35 != v33) && (sub_23309C220() & 1) == 0
        || (v32 != v30 || v31 != v29) && (sub_23309C220() & 1) == 0)
      {
        break;
      }
      if (v28 == v26 && v27 == v25)
      {
        if (v24 != v23) {
          return 0;
        }
      }
      else
      {
        char v14 = sub_23309C220();
        uint64_t result = 0;
        if ((v14 & 1) == 0 || v24 != v23) {
          return result;
        }
      }
      if ((v22 != v20 || v21 != v19) && (sub_23309C220() & 1) == 0
        || (v18 != v16 || v17 != v15) && (sub_23309C220() & 1) == 0)
      {
        break;
      }
      v3 += 18;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_232E939F0(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (uint64_t)&v64 - v9;
  sub_232E9A97C(0, &qword_2687565B0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t v73 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v64 - v11;
  uint64_t v76 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  uint64_t v12 = MEMORY[0x270FA5388](v76);
  uint64_t v75 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (uint64_t *)((char *)&v64 - v15);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v17 || a1 == a2) {
    return 1;
  }
  uint64_t v65 = v7;
  uint64_t v66 = 0;
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v67 = *(void *)(v14 + 72);
  uint64_t v68 = a1;
  uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v71 = v4;
  uint64_t v19 = v75;
  uint64_t v69 = a2;
  while (1)
  {
    sub_232E96790(a1 + v18, (uint64_t)v16, type metadata accessor for ModelsR4.Bundle.BundleEntry);
    sub_232E96790(a2 + v18, (uint64_t)v19, type metadata accessor for ModelsR4.Bundle.BundleEntry);
    uint64_t v20 = v16[1];
    uint64_t v21 = v19[1];
    if (v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      BOOL v22 = *v16 == *v19 && v20 == v21;
      if (!v22 && (sub_23309C220() & 1) == 0) {
        goto LABEL_56;
      }
    }
    else if (v21)
    {
      goto LABEL_56;
    }
    uint64_t v23 = *(int *)(v76 + 20);
    uint64_t v24 = (uint64_t)v19 + v23;
    uint64_t v25 = v74;
    uint64_t v26 = v74 + *(int *)(v73 + 48);
    sub_232E96888((uint64_t)v16 + v23, v74, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232E96888(v24, v26, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v27 = v71;
    uint64_t v28 = *v70;
    if ((*v70)(v25, 1, v71) != 1) {
      break;
    }
    if (v28(v26, 1, v27) != 1) {
      goto LABEL_55;
    }
    sub_232E96908(v25, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v19 = v75;
LABEL_21:
    uint64_t v32 = *(int *)(v76 + 24);
    uint64_t v34 = *(void *)((char *)v16 + v32);
    unint64_t v33 = *(void *)((char *)v16 + v32 + 8);
    uint64_t v35 = (void *)((char *)v19 + v32);
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    uint64_t v38 = 0;
    switch(v33 >> 62)
    {
      case 1uLL:
        LODWORD(v38) = HIDWORD(v34) - v34;
        if (__OFSUB__(HIDWORD(v34), v34))
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
        uint64_t v38 = (int)v38;
LABEL_26:
        switch(v37 >> 62)
        {
          case 1uLL:
            LODWORD(v42) = HIDWORD(v36) - v36;
            if (__OFSUB__(HIDWORD(v36), v36)) {
              goto LABEL_60;
            }
            uint64_t v42 = (int)v42;
LABEL_31:
            if (v38 != v42) {
              goto LABEL_56;
            }
            if (v38 < 1) {
              goto LABEL_6;
            }
            break;
          case 2uLL:
            uint64_t v44 = *(void *)(v36 + 16);
            uint64_t v43 = *(void *)(v36 + 24);
            BOOL v41 = __OFSUB__(v43, v44);
            uint64_t v42 = v43 - v44;
            if (!v41) {
              goto LABEL_31;
            }
            goto LABEL_61;
          case 3uLL:
            if (!v38) {
              goto LABEL_6;
            }
            goto LABEL_56;
          default:
            uint64_t v42 = BYTE6(v37);
            goto LABEL_31;
        }
        switch(v33 >> 62)
        {
          case 1uLL:
            if (v34 >> 32 < (int)v34) {
              goto LABEL_62;
            }
            sub_232E9A9F4(v34, v33);
            uint64_t v45 = sub_23309ACB0();
            if (v45)
            {
              uint64_t v64 = (v34 >> 32) - (int)v34;
              uint64_t v46 = v45;
              uint64_t v47 = sub_23309ACD0();
              if (__OFSUB__((int)v34, v47)) {
                goto LABEL_64;
              }
              uint64_t v48 = v46 + (int)v34 - v47;
            }
            else
            {
              uint64_t v48 = 0;
            }
            sub_23309ACC0();
            uint64_t v61 = v36;
            uint64_t v62 = v66;
            sub_232FFDDE0(v48, v61, v37, (char *)__s1);
            uint64_t v66 = v62;
            sub_232E9AA4C(v34, v33);
            goto LABEL_51;
          case 2uLL:
            uint64_t v49 = *(void *)(v34 + 16);
            uint64_t v50 = *(void *)(v34 + 24);
            swift_retain();
            swift_retain();
            uint64_t v51 = sub_23309ACB0();
            if (v51)
            {
              uint64_t v52 = v51;
              uint64_t v53 = sub_23309ACD0();
              if (__OFSUB__(v49, v53)) {
                goto LABEL_65;
              }
              uint64_t v54 = v49;
              uint64_t v55 = v52 + v49 - v53;
              if (__OFSUB__(v50, v54)) {
                goto LABEL_63;
              }
            }
            else
            {
              uint64_t v58 = v49;
              uint64_t v55 = 0;
              if (__OFSUB__(v50, v58)) {
                goto LABEL_63;
              }
            }
            sub_23309ACC0();
            uint64_t v59 = v36;
            uint64_t v60 = v66;
            sub_232FFDDE0(v55, v59, v37, (char *)__s1);
            uint64_t v66 = v60;
            swift_release();
            swift_release();
LABEL_51:
            uint64_t v19 = v75;
            if ((__s1[0] & 1) == 0) {
              goto LABEL_56;
            }
LABEL_6:
            sub_232E9AB78((uint64_t)v19, type metadata accessor for ModelsR4.Bundle.BundleEntry);
            sub_232E9AB78((uint64_t)v16, type metadata accessor for ModelsR4.Bundle.BundleEntry);
            a1 = v68;
            v18 += v67;
            --v17;
            a2 = v69;
            if (!v17) {
              return 1;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            goto LABEL_45;
          default:
            __s1[0] = v34;
            LOWORD(__s1[1]) = v33;
            BYTE2(__s1[1]) = BYTE2(v33);
            BYTE3(__s1[1]) = BYTE3(v33);
            BYTE4(__s1[1]) = BYTE4(v33);
            BYTE5(__s1[1]) = BYTE5(v33);
LABEL_45:
            uint64_t v56 = v36;
            uint64_t v57 = v66;
            sub_232FFDDE0((uint64_t)__s1, v56, v37, &v77);
            uint64_t v66 = v57;
            if ((v77 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_6;
        }
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v34 + 16);
        uint64_t v39 = *(void *)(v34 + 24);
        BOOL v41 = __OFSUB__(v39, v40);
        uint64_t v38 = v39 - v40;
        if (!v41) {
          goto LABEL_26;
        }
        goto LABEL_59;
      case 3uLL:
        goto LABEL_26;
      default:
        uint64_t v38 = BYTE6(v33);
        goto LABEL_26;
    }
  }
  uint64_t v29 = v72;
  sub_232E96888(v25, v72, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  if (v28(v26, 1, v27) != 1)
  {
    uint64_t v30 = (uint64_t)v65;
    sub_232E9ABD8(v26, (uint64_t)v65, type metadata accessor for ModelsR4.ResourceProxy);
    char v31 = _s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0(v29, v30);
    sub_232E9AB78(v30, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232E9AB78(v29, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232E96908(v25, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v19 = v75;
    if ((v31 & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_21;
  }
  sub_232E9AB78(v29, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_55:
  sub_232E9AB1C(v25, &qword_2687565B0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t v19 = v75;
LABEL_56:
  sub_232E9AB78((uint64_t)v19, type metadata accessor for ModelsR4.Bundle.BundleEntry);
  sub_232E9AB78((uint64_t)v16, type metadata accessor for ModelsR4.Bundle.BundleEntry);
  return 0;
}

BOOL sub_232E942A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 33);
  uint64_t v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_232E94310(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for ModelsDSTU2.HumanName, type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction11ModelsDSTU2V9HumanNameV2eeoiySbAE_AEtFZ_0, type metadata accessor for ModelsDSTU2.HumanName);
}

uint64_t sub_232E94364(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v72 = (uint64_t)&v64 - v9;
  sub_232E9A97C(0, &qword_268756560, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  uint64_t v73 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (uint64_t)&v64 - v11;
  uint64_t v76 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  uint64_t v12 = MEMORY[0x270FA5388](v76);
  uint64_t v75 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (uint64_t *)((char *)&v64 - v15);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v17 || a1 == a2) {
    return 1;
  }
  uint64_t v65 = v7;
  uint64_t v66 = 0;
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v67 = *(void *)(v14 + 72);
  uint64_t v68 = a1;
  uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v71 = v4;
  uint64_t v19 = v75;
  uint64_t v69 = a2;
  while (1)
  {
    sub_232E96790(a1 + v18, (uint64_t)v16, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
    sub_232E96790(a2 + v18, (uint64_t)v19, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
    uint64_t v20 = v16[1];
    uint64_t v21 = v19[1];
    if (v20)
    {
      if (!v21) {
        goto LABEL_56;
      }
      BOOL v22 = *v16 == *v19 && v20 == v21;
      if (!v22 && (sub_23309C220() & 1) == 0) {
        goto LABEL_56;
      }
    }
    else if (v21)
    {
      goto LABEL_56;
    }
    uint64_t v23 = *(int *)(v76 + 20);
    uint64_t v24 = (uint64_t)v19 + v23;
    uint64_t v25 = v74;
    uint64_t v26 = v74 + *(int *)(v73 + 48);
    sub_232E96888((uint64_t)v16 + v23, v74, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232E96888(v24, v26, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v27 = v71;
    uint64_t v28 = *v70;
    if ((*v70)(v25, 1, v71) != 1) {
      break;
    }
    if (v28(v26, 1, v27) != 1) {
      goto LABEL_55;
    }
    sub_232E96908(v25, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v19 = v75;
LABEL_21:
    uint64_t v32 = *(int *)(v76 + 24);
    uint64_t v34 = *(void *)((char *)v16 + v32);
    unint64_t v33 = *(void *)((char *)v16 + v32 + 8);
    uint64_t v35 = (void *)((char *)v19 + v32);
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    uint64_t v38 = 0;
    switch(v33 >> 62)
    {
      case 1uLL:
        LODWORD(v38) = HIDWORD(v34) - v34;
        if (__OFSUB__(HIDWORD(v34), v34))
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
        uint64_t v38 = (int)v38;
LABEL_26:
        switch(v37 >> 62)
        {
          case 1uLL:
            LODWORD(v42) = HIDWORD(v36) - v36;
            if (__OFSUB__(HIDWORD(v36), v36)) {
              goto LABEL_60;
            }
            uint64_t v42 = (int)v42;
LABEL_31:
            if (v38 != v42) {
              goto LABEL_56;
            }
            if (v38 < 1) {
              goto LABEL_6;
            }
            break;
          case 2uLL:
            uint64_t v44 = *(void *)(v36 + 16);
            uint64_t v43 = *(void *)(v36 + 24);
            BOOL v41 = __OFSUB__(v43, v44);
            uint64_t v42 = v43 - v44;
            if (!v41) {
              goto LABEL_31;
            }
            goto LABEL_61;
          case 3uLL:
            if (!v38) {
              goto LABEL_6;
            }
            goto LABEL_56;
          default:
            uint64_t v42 = BYTE6(v37);
            goto LABEL_31;
        }
        switch(v33 >> 62)
        {
          case 1uLL:
            if (v34 >> 32 < (int)v34) {
              goto LABEL_62;
            }
            sub_232E9A9F4(v34, v33);
            uint64_t v45 = sub_23309ACB0();
            if (v45)
            {
              uint64_t v64 = (v34 >> 32) - (int)v34;
              uint64_t v46 = v45;
              uint64_t v47 = sub_23309ACD0();
              if (__OFSUB__((int)v34, v47)) {
                goto LABEL_64;
              }
              uint64_t v48 = v46 + (int)v34 - v47;
            }
            else
            {
              uint64_t v48 = 0;
            }
            sub_23309ACC0();
            uint64_t v61 = v36;
            uint64_t v62 = v66;
            sub_232FFDDE0(v48, v61, v37, (char *)__s1);
            uint64_t v66 = v62;
            sub_232E9AA4C(v34, v33);
            goto LABEL_51;
          case 2uLL:
            uint64_t v49 = *(void *)(v34 + 16);
            uint64_t v50 = *(void *)(v34 + 24);
            swift_retain();
            swift_retain();
            uint64_t v51 = sub_23309ACB0();
            if (v51)
            {
              uint64_t v52 = v51;
              uint64_t v53 = sub_23309ACD0();
              if (__OFSUB__(v49, v53)) {
                goto LABEL_65;
              }
              uint64_t v54 = v49;
              uint64_t v55 = v52 + v49 - v53;
              if (__OFSUB__(v50, v54)) {
                goto LABEL_63;
              }
            }
            else
            {
              uint64_t v58 = v49;
              uint64_t v55 = 0;
              if (__OFSUB__(v50, v58)) {
                goto LABEL_63;
              }
            }
            sub_23309ACC0();
            uint64_t v59 = v36;
            uint64_t v60 = v66;
            sub_232FFDDE0(v55, v59, v37, (char *)__s1);
            uint64_t v66 = v60;
            swift_release();
            swift_release();
LABEL_51:
            uint64_t v19 = v75;
            if ((__s1[0] & 1) == 0) {
              goto LABEL_56;
            }
LABEL_6:
            sub_232E9AB78((uint64_t)v19, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
            sub_232E9AB78((uint64_t)v16, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
            a1 = v68;
            v18 += v67;
            --v17;
            a2 = v69;
            if (!v17) {
              return 1;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            goto LABEL_45;
          default:
            __s1[0] = v34;
            LOWORD(__s1[1]) = v33;
            BYTE2(__s1[1]) = BYTE2(v33);
            BYTE3(__s1[1]) = BYTE3(v33);
            BYTE4(__s1[1]) = BYTE4(v33);
            BYTE5(__s1[1]) = BYTE5(v33);
LABEL_45:
            uint64_t v56 = v36;
            uint64_t v57 = v66;
            sub_232FFDDE0((uint64_t)__s1, v56, v37, &v77);
            uint64_t v66 = v57;
            if ((v77 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_6;
        }
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v34 + 16);
        uint64_t v39 = *(void *)(v34 + 24);
        BOOL v41 = __OFSUB__(v39, v40);
        uint64_t v38 = v39 - v40;
        if (!v41) {
          goto LABEL_26;
        }
        goto LABEL_59;
      case 3uLL:
        goto LABEL_26;
      default:
        uint64_t v38 = BYTE6(v33);
        goto LABEL_26;
    }
  }
  uint64_t v29 = v72;
  sub_232E96888(v25, v72, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  if (v28(v26, 1, v27) != 1)
  {
    uint64_t v30 = (uint64_t)v65;
    sub_232E9ABD8(v26, (uint64_t)v65, type metadata accessor for ModelsDSTU2.ResourceProxy);
    char v31 = static ModelsDSTU2.ResourceProxy.== infix(_:_:)(v29, v30);
    sub_232E9AB78(v30, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232E9AB78(v29, type metadata accessor for ModelsDSTU2.ResourceProxy);
    sub_232E96908(v25, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
    uint64_t v19 = v75;
    if ((v31 & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_21;
  }
  sub_232E9AB78(v29, type metadata accessor for ModelsDSTU2.ResourceProxy);
LABEL_55:
  sub_232E9AB1C(v25, &qword_268756560, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
  uint64_t v19 = v75;
LABEL_56:
  sub_232E9AB78((uint64_t)v19, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  sub_232E9AB78((uint64_t)v16, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
  return 0;
}

uint64_t sub_232E94C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (char *)(a2 + 48);
    for (i = (unsigned char *)(a1 + 48); *((void *)i - 2) == *((void *)v3 - 2); i += 24)
    {
      char v5 = *v3;
      if (*i)
      {
        if (!*v3) {
          return 0;
        }
      }
      else
      {
        if (*((void *)i - 1) != *((void *)v3 - 1)) {
          char v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      v3 += 24;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_232E94C94(uint64_t a1, uint64_t a2)
{
  return sub_232E9021C(a1, a2, (void (*)(void))type metadata accessor for Coding, (uint64_t (*)(void))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0, (uint64_t (*)(void))type metadata accessor for Coding);
}

uint64_t sub_232E94CE8(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90(&qword_2687564D0, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_232E94D54(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90(&qword_2687564D0, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t sub_232E94DC4(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EEF788](a1, v2);
}

id sub_232E94E30()
{
  return *v0;
}

uint64_t sub_232E94E38@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_232E94E40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_23309B710();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_232E94E6C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_232E94E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void sub_232E94E8C(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_232E94E98@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_232E94EA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_232E94EB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_232E94ECC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_232E94EE0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_232E94F10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_232E94F3C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_232E94F60(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_232E94F74(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_232E94F88(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_232E94F9C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_232E94FB0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_232E94FC4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_232E94FD8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_232E94FEC()
{
  return *v0 == 0;
}

void *sub_232E94FFC(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_232E95010(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_232E95024(uint64_t a1, uint64_t a2)
{
  return sub_232E956CC(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_232E95048(uint64_t a1, id *a2)
{
  uint64_t result = sub_23309B6F0();
  *a2 = 0;
  return result;
}

uint64_t sub_232E950C0(uint64_t a1, id *a2)
{
  char v3 = sub_23309B700();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_232E95140@<X0>(uint64_t *a1@<X8>)
{
  sub_23309B710();
  uint64_t v2 = sub_23309B6E0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_232E95184(uint64_t a1, uint64_t a2)
{
  return sub_232E956CC(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_232E951A4()
{
  return sub_23309B710();
}

uint64_t sub_232E951B4(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EEF7E8](a1, v2);
}

uint64_t sub_232E95220(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EEF7A0](a1, v2);
}

uint64_t sub_232E9528C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  id v5 = a1;
  return MEMORY[0x270EEF790](v5, a2, v4);
}

uint64_t sub_232E9531C()
{
  id v1 = *v0;
  uint64_t v2 = sub_23309BC10();

  return v2;
}

uint64_t sub_232E95354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EEF7D0](a1, a2, v4);
}

uint64_t sub_232E953D0()
{
  return sub_23309C420();
}

void *sub_232E95430@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_232E95440@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_232E9B104(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_232E95484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
  return MEMORY[0x270EEF7B8](a1, a2, a3, v6);
}

uint64_t sub_232E9550C(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90(&qword_268756678, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_232E95E90(&qword_268756680, type metadata accessor for FileProtectionType);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_232E955C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_23309B6E0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_232E95610(uint64_t a1)
{
  uint64_t v2 = sub_232E95E90(&qword_268756668, type metadata accessor for VNImageOption);
  uint64_t v3 = sub_232E95E90(&qword_268756670, type metadata accessor for VNImageOption);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_232E956CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_23309B710();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_232E95710()
{
  sub_23309B710();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232E95764()
{
  sub_23309B710();
  sub_23309C3D0();
  sub_23309B800();
  uint64_t v0 = sub_23309C420();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_232E957D8()
{
  uint64_t v0 = sub_23309B710();
  uint64_t v2 = v1;
  if (v0 == sub_23309B710() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_23309C220();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_232E95864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_23309AF80();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388]();
  BOOL v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388]();
  int v7 = (char *)&v19 - v6;
  uint64_t v8 = (int *)type metadata accessor for Coding();
  uint64_t v9 = *((void *)v8 - 1);
  MEMORY[0x270FA5388]();
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v12)
  {
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v23 = v3;
    uint64_t v24 = v15;
    uint64_t v16 = v4;
    uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v20 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    do
    {
      sub_232E96790(v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
      sub_232E96888((uint64_t)v11, (uint64_t)v7, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if ((*v17)(v7, 1, v3) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        unint64_t v18 = v22;
        (*v21)(v22, v7, v3);
        sub_23309C3F0();
        sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
        sub_23309B690();
        (*v20)(v18, v3);
      }
      if (*(void *)&v11[v8[5] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      if (*(void *)&v11[v8[6] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      if (*(void *)&v11[v8[7] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t v3 = v23;
      uint64_t result = sub_232E9AB78((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
      v14 += v24;
      --v12;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_232E95C84()
{
  unint64_t result = qword_268756450;
  if (!qword_268756450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756450);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

void sub_232E95D1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_232E95C84();
    unint64_t v7 = a3(a1, &type metadata for Meta.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_232E95DD0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232E9AAB8(255, &qword_268756458, (uint64_t (*)(uint64_t))type metadata accessor for Coding, MEMORY[0x263F8D488]);
    sub_232E95E90(a2, (void (*)(uint64_t))type metadata accessor for Coding);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232E95E90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_232E95ED8(void *a1)
{
  a1[1] = sub_232E95F10();
  a1[2] = sub_232E95F64();
  unint64_t result = sub_232E95FB8();
  a1[3] = result;
  return result;
}

unint64_t sub_232E95F10()
{
  unint64_t result = qword_268756488;
  if (!qword_268756488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756488);
  }
  return result;
}

unint64_t sub_232E95F64()
{
  unint64_t result = qword_268756490;
  if (!qword_268756490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756490);
  }
  return result;
}

unint64_t sub_232E95FB8()
{
  unint64_t result = qword_268756498;
  if (!qword_268756498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756498);
  }
  return result;
}

unint64_t sub_232E96010()
{
  unint64_t result = qword_2687564A0;
  if (!qword_2687564A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687564A0);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Meta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Meta()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Meta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  void *result = *a2;
  return result;
}

void *assignWithTake for Meta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Meta(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Meta(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Meta()
{
  return &type metadata for Meta;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_232E961EC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_232E9620C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

void type metadata accessor for HDHRExtractionError(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for Meta.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for Meta.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x232E96350);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232E96378()
{
  return 0;
}

ValueMetadata *type metadata accessor for Meta.CodingKeys()
{
  return &type metadata for Meta.CodingKeys;
}

unint64_t sub_232E96398()
{
  unint64_t result = qword_2687564B8;
  if (!qword_2687564B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687564B8);
  }
  return result;
}

uint64_t sub_232E963EC()
{
  return sub_232E95E90(&qword_2687564C0, type metadata accessor for HDHRExtractionError);
}

uint64_t sub_232E96434()
{
  return sub_232E95E90(&qword_2687564C8, type metadata accessor for HDHRExtractionError);
}

uint64_t sub_232E9647C()
{
  return sub_232E95E90(&qword_2687564D0, type metadata accessor for HDHRExtractionError);
}

uint64_t sub_232E964C4()
{
  return sub_232E95E90(&qword_2687564D8, type metadata accessor for HDHRExtractionError);
}

uint64_t sub_232E9650C()
{
  return sub_232E95E90(&qword_2687564E0, type metadata accessor for HDHRExtractionError);
}

uint64_t sub_232E96554()
{
  return sub_232E95E90(&qword_2687564E8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_232E965B0()
{
  return sub_232E95E90(&qword_2687564F0, type metadata accessor for Code);
}

unint64_t sub_232E965FC()
{
  unint64_t result = qword_2687564F8;
  if (!qword_2687564F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687564F8);
  }
  return result;
}

uint64_t sub_232E96650()
{
  return sub_232E95E90(&qword_268756500, type metadata accessor for Code);
}

uint64_t sub_232E96698()
{
  return sub_232E95E90((unint64_t *)&qword_268756508, type metadata accessor for HDHRExtractionError);
}

unint64_t sub_232E966E4()
{
  unint64_t result = qword_268756510;
  if (!qword_268756510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756510);
  }
  return result;
}

unint64_t sub_232E9673C()
{
  unint64_t result = qword_268756518;
  if (!qword_268756518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756518);
  }
  return result;
}

uint64_t sub_232E96790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_232E967F8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_232E96840(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_232E96888(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232E9AAB8(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_232E96908(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_232E9AAB8(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232E96978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v4)
  {
    uint64_t v6 = (void *)(a2 + 48);
    do
    {
      uint64_t v7 = v6[1];
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[5];
      uint64_t v10 = v6[6];
      if (*(v6 - 1))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v7) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v7)
        {
LABEL_7:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          if (v8) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      sub_23309C3F0();
      if (v8)
      {
LABEL_8:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v9) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
LABEL_13:
      sub_23309C3F0();
      if (v9)
      {
LABEL_9:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v10) {
          goto LABEL_15;
        }
        goto LABEL_3;
      }
LABEL_14:
      sub_23309C3F0();
      if (v10)
      {
LABEL_15:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E96978(a1, v10);
        swift_bridgeObjectRelease_n();
        goto LABEL_4;
      }
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRelease();
LABEL_4:
      v6 += 9;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_232E96B88(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = type metadata accessor for Attachment();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v35 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232E9AAB8(0, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v39 = (uint64_t)&v32 - v8;
  uint64_t v40 = sub_23309AF80();
  uint64_t v9 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v34 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], v6);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = (int *)type metadata accessor for Extension();
  uint64_t v15 = *((void *)v14 - 1);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (void (***)(char *, uint64_t))((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v18)
  {
    uint64_t v20 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v37 = *(void *)(v15 + 72);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v32 = (void (**)(char *, uint64_t))(v9 + 8);
    unint64_t v33 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v36 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    while (1)
    {
      sub_232E96790(v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Extension);
      uint64_t v22 = *v17;
      if (*v17)
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E96B88(a1, v22);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t v23 = v40;
      sub_232E96888((uint64_t)v17 + v14[5], (uint64_t)v13, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if ((*v38)(v13, 1, v23) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v24 = v34;
        (*v33)(v34, v13, v23);
        sub_23309C3F0();
        sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
        sub_23309B690();
        (*v32)(v24, v23);
      }
      if (*(void *)((char *)v17 + v14[6] + 8))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      if (*((unsigned char *)v17 + v14[7] + 8) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        sub_23309C3F0();
        sub_23309C410();
      }
      if (*(void *)((char *)v17 + v14[8] + 8))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232EB29B4();
      uint64_t v25 = (void *)((char *)v17 + v14[10]);
      uint64_t v26 = v25[1];
      if (v26 != 1) {
        break;
      }
      sub_23309C3F0();
LABEL_28:
      uint64_t v31 = v39;
      sub_232E96888((uint64_t)v17 + v14[11], v39, &qword_268756588, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
      if ((*v36)(v31, 1, v41) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v21 = v35;
        sub_232E9ABD8(v31, v35, (uint64_t (*)(void))type metadata accessor for Attachment);
        sub_23309C3F0();
        Attachment.hash(into:)();
        sub_232E9AB78(v21, (uint64_t (*)(void))type metadata accessor for Attachment);
      }
      uint64_t result = sub_232E9AB78((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Extension);
      v20 += v37;
      if (!--v18) {
        return result;
      }
    }
    uint64_t v27 = *v25;
    uint64_t v28 = v25[2];
    sub_23309C3F0();
    if (v26)
    {
      sub_23309C3F0();
      sub_232E967F8(v27, v26);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_24:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v28);
        swift_bridgeObjectRelease();
        uint64_t v29 = v27;
        uint64_t v30 = v26;
LABEL_27:
        sub_232E96840(v29, v30);
        goto LABEL_28;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v28) {
        goto LABEL_24;
      }
    }
    sub_23309C3F0();
    uint64_t v29 = v27;
    uint64_t v30 = v26;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_232E97280(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = sub_23309B300();
  uint64_t v3 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232E9AAB8(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v42 = (char *)&v31 - v7;
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  uint64_t v45 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v5);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v46 = type metadata accessor for Annotation();
  uint64_t v14 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v17)
  {
    uint64_t v19 = a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v44 = v8;
    v45 += 6;
    uint64_t v20 = *(void *)(v14 + 72);
    uint64_t v40 = v13;
    uint64_t v41 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    uint64_t v32 = (void (**)(char *, uint64_t))(v3 + 8);
    unint64_t v33 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v39 = v20;
    do
    {
      sub_232E96790(v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Annotation);
      sub_23309B800();
      sub_232E96888((uint64_t)&v16[*(int *)(v46 + 20)], (uint64_t)v13, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if ((*v45)(v13, 1, v8) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        sub_232E9ABD8((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        sub_23309C3F0();
        sub_23309C3F0();
        char v21 = v10[17];
        char v22 = v10[19];
        sub_23309C3E0();
        if ((v21 & 1) == 0) {
          sub_23309C3F0();
        }
        sub_23309C3F0();
        if ((v22 & 1) == 0) {
          sub_23309C3F0();
        }
        uint64_t v8 = v44;
        sub_23309C3F0();
        uint64_t v23 = *((void *)v10 + 7);
        if (v23 == 1)
        {
          sub_23309C3F0();
          uint64_t v24 = (uint64_t)v42;
          uint64_t v25 = v43;
        }
        else
        {
          unint64_t v26 = *((void *)v10 + 3);
          uint64_t v27 = *((void *)v10 + 4);
          unint64_t v28 = *((void *)v10 + 5);
          uint64_t v35 = *((void *)v10 + 6);
          unint64_t v36 = v26 >> 8;
          unint64_t v37 = v26 >> 16;
          unint64_t v38 = HIDWORD(v28);
          sub_23309C3F0();
          sub_23309C3F0();
          sub_23309C3F0();
          sub_23309C3F0();
          sub_23309BC90();
          sub_23309C3F0();
          if (v23)
          {
            swift_bridgeObjectRetain();
            uint64_t v29 = v35;
            sub_23309B800();
            sub_232E9AAA4(v26, v27, v28, v29, v23);
          }
          uint64_t v24 = (uint64_t)v42;
          uint64_t v25 = v43;
          uint64_t v8 = v44;
        }
        sub_232E96888((uint64_t)&v10[*(int *)(v8 + 28)], v24, &qword_268756590, MEMORY[0x263F079C8]);
        if ((*v41)(v24, 1, v25) == 1)
        {
          sub_23309C3F0();
        }
        else
        {
          uint64_t v30 = v34;
          (*v33)(v34, v24, v25);
          sub_23309C3F0();
          sub_232E95E90(&qword_268756598, MEMORY[0x263F079C8]);
          sub_23309B690();
          (*v32)(v30, v25);
        }
        if (*(void *)&v10[*(int *)(v8 + 32) + 8])
        {
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_23309C3F0();
        }
        uint64_t v20 = v39;
        uint64_t v13 = v40;
        sub_232E9AB78((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      }
      uint64_t result = sub_232E9AB78((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Annotation);
      v19 += v20;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_232E978F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_23309AF80();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t v9 = (int *)type metadata accessor for Coding();
  uint64_t v23 = *((void *)v9 - 1);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  uint64_t v27 = v12;
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v26 = a2 + 32;
    uint64_t v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v29 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      uint64_t v15 = v26 + 24 * v14;
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v17 = *(void *)(v15 + 16);
      if (v16)
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        if (v17)
        {
LABEL_7:
          uint64_t v28 = v14;
          sub_23309C3F0();
          sub_23309C3E0();
          uint64_t v18 = *(void *)(v17 + 16);
          if (v18)
          {
            uint64_t v24 = v17;
            uint64_t v25 = v16;
            uint64_t v19 = v23;
            uint64_t v20 = v17 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
            swift_bridgeObjectRetain();
            uint64_t v33 = *(void *)(v19 + 72);
            do
            {
              sub_232E96790(v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
              sub_232E96888((uint64_t)v11, (uint64_t)v8, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
              if ((*v32)(v8, 1, v3) == 1)
              {
                sub_23309C3F0();
              }
              else
              {
                char v21 = v31;
                (*v30)(v31, v8, v3);
                sub_23309C3F0();
                sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
                sub_23309B690();
                (*v29)(v21, v3);
              }
              if (*(void *)&v11[v9[5] + 8])
              {
                sub_23309C3F0();
                swift_bridgeObjectRetain();
                sub_23309B800();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_23309C3F0();
              }
              if (*(void *)&v11[v9[6] + 8])
              {
                sub_23309C3F0();
                swift_bridgeObjectRetain();
                sub_23309B800();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_23309C3F0();
              }
              if (*(void *)&v11[v9[7] + 8])
              {
                sub_23309C3F0();
                swift_bridgeObjectRetain();
                sub_23309B800();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_23309C3F0();
              }
              sub_232E9AB78((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Coding);
              v20 += v33;
              --v18;
            }
            while (v18);
            swift_bridgeObjectRelease_n();
            uint64_t v14 = v28;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v14 = v28;
          }
          goto LABEL_4;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      ++v14;
    }
    while (v14 != v27);
  }
  return result;
}

uint64_t sub_232E97E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.PatientLink(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v8)
  {
    uint64_t v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_232E96790(v10, (uint64_t)v7, type metadata accessor for ModelsR4.PatientLink);
      if (*((void *)v7 + 1))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (!*((void *)v7 + 3)) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_23309C3F0();
        if (!*((void *)v7 + 3))
        {
LABEL_9:
          sub_23309C3F0();
          goto LABEL_4;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
LABEL_4:
      type metadata accessor for Reference();
      sub_232EB2488(a1);
      sub_23309B800();
      uint64_t result = sub_232E9AB78((uint64_t)v7, type metadata accessor for ModelsR4.PatientLink);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_232E9800C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v29 = type metadata accessor for Identifier();
  uint64_t v10 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v12 = (void (***)(char *, uint64_t))((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v13)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v28 = v16;
    uint64_t v24 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v25 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    while (1)
    {
      sub_232E96790(v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Identifier);
      if (v12[1])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t v17 = v12[3];
      if (v17 != 1) {
        break;
      }
      sub_23309C3F0();
LABEL_16:
      uint64_t v22 = v29;
      sub_232E96888((uint64_t)v12 + *(int *)(v29 + 24), (uint64_t)v9, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if ((*v27)(v9, 1, v4) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v23 = v26;
        (*v25)(v26, v9, v4);
        sub_23309C3F0();
        sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
        sub_23309B690();
        (*v24)(v23, v4);
      }
      if (*(void *)((char *)v12 + *(int *)(v22 + 28) + 8))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t result = sub_232E9AB78((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Identifier);
      v15 += v28;
      if (!--v13) {
        return result;
      }
    }
    uint64_t v18 = v12[2];
    uint64_t v19 = v12[4];
    sub_23309C3F0();
    if (v17)
    {
      sub_23309C3F0();
      sub_232E967F8(v18, v17);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_12:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v19);
        swift_bridgeObjectRelease();
        uint64_t v20 = v18;
        uint64_t v21 = v17;
LABEL_15:
        sub_232E96840(v20, v21);
        goto LABEL_16;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v19) {
        goto LABEL_12;
      }
    }
    sub_23309C3F0();
    uint64_t v20 = v18;
    uint64_t v21 = v17;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_232E984B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(a2 + 56);
    do
    {
      uint64_t v6 = *v5;
      if (*(v5 - 2))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v6) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        if (v6)
        {
LABEL_9:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease_n();
          goto LABEL_4;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRelease();
LABEL_4:
      v5 += 4;
      uint64_t result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_232E985C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v8)
  {
    uint64_t v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_232E96790(v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Reference);
      if (*((void *)v7 + 1))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (!*((void *)v7 + 3)) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_23309C3F0();
        if (!*((void *)v7 + 3))
        {
LABEL_9:
          sub_23309C3F0();
          goto LABEL_4;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
LABEL_4:
      sub_232EB2488(a1);
      uint64_t result = sub_232E9AB78((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Reference);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_232E9879C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_23309AF80();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v25 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v28 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  uint64_t v10 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v13)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v27 = v16;
    uint64_t v23 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      sub_232E96790(v15, (uint64_t)v12, type metadata accessor for ModelsR4.DocumentReferenceContent);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (*((void *)v12 + 3))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t v17 = (int *)type metadata accessor for Attachment();
      sub_232E96888((uint64_t)&v12[v17[6]], (uint64_t)v9, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if ((*v26)(v9, 1, v4) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v18 = v25;
        (*v24)(v25, v9, v4);
        sub_23309C3F0();
        sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
        sub_23309B690();
        (*v23)(v18, v4);
      }
      if (v12[v17[7] + 4] == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        sub_23309C3F0();
        sub_23309C400();
      }
      if (*(void *)&v12[v17[8] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      if (*(void *)&v12[v17[9] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232EB2E40();
      if (*(void *)&v12[v17[11] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t v19 = (uint64_t *)&v12[*(int *)(v28 + 20)];
      uint64_t v20 = v19[1];
      if (v20 == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v21 = *v19;
        uint64_t v22 = v19[2];
        sub_23309C3F0();
        if (v20)
        {
          sub_23309C3F0();
          sub_232E967F8(v21, v20);
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          if (!v22) {
            goto LABEL_28;
          }
        }
        else
        {
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          if (!v22)
          {
LABEL_28:
            sub_23309C3F0();
            sub_232E96840(v21, v20);
            goto LABEL_4;
          }
        }
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v22);
        swift_bridgeObjectRelease();
        sub_232E96840(v21, v20);
      }
LABEL_4:
      uint64_t result = sub_232E9AB78((uint64_t)v12, type metadata accessor for ModelsR4.DocumentReferenceContent);
      v15 += v27;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_232E98D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_23309AF80();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = (int *)type metadata accessor for Attachment();
  uint64_t v10 = *((void *)v9 - 1);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v13)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v23 = v16;
    uint64_t v19 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v20 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      sub_232E96790(v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Attachment);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (*((void *)v12 + 3))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232E96888((uint64_t)&v12[v9[6]], (uint64_t)v8, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
      if ((*v22)(v8, 1, v3) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v17 = v21;
        (*v20)(v21, v8, v3);
        sub_23309C3F0();
        sub_232E95E90(&qword_268756568, MEMORY[0x263F06EA8]);
        sub_23309B690();
        (*v19)(v17, v3);
      }
      if (v12[v9[7] + 4] == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        sub_23309C3F0();
        sub_23309C400();
      }
      if (*(void *)&v12[v9[8] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      if (*(void *)&v12[v9[9] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232EB2E40();
      if (*(void *)&v12[v9[11] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t result = sub_232E9AB78((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Attachment);
      v15 += v23;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_232E99248(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for Reference();
  uint64_t v4 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = type metadata accessor for ModelsR4.ImmunizationPerformer(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v14)
  {
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v18 = v17;
    while (1)
    {
      sub_232E96790(v16, (uint64_t)v13, type metadata accessor for ModelsR4.ImmunizationPerformer);
      sub_232E96888((uint64_t)v13, (uint64_t)v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v19) != 1) {
        break;
      }
      sub_23309C3F0();
LABEL_4:
      uint64_t result = sub_232E9AB78((uint64_t)v13, type metadata accessor for ModelsR4.ImmunizationPerformer);
      v16 += v17;
      if (!--v14) {
        return result;
      }
    }
    sub_232E9ABD8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Reference);
    sub_23309C3F0();
    if (*((void *)v6 + 1))
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (*((void *)v6 + 3))
      {
LABEL_8:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
LABEL_11:
        uint64_t v17 = v18;
        sub_232EB2488(a1);
        sub_232E9AB78((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Reference);
        goto LABEL_4;
      }
    }
    else
    {
      sub_23309C3F0();
      if (*((void *)v6 + 3)) {
        goto LABEL_8;
      }
    }
    sub_23309C3F0();
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_232E995C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a2 + 56);
    do
    {
      uint64_t v7 = *v6;
      uint64_t v8 = v6[4];
      uint64_t v10 = v6[5];
      uint64_t v9 = v6[6];
      uint64_t v11 = v6[7];
      int v12 = *((unsigned __int8 *)v6 + 16);
      if (*((unsigned char *)v6 - 16) == 1)
      {
        sub_23309C3F0();
        if (v7) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_23309C3F0();
        sub_23309C3E0();
        if (v7)
        {
LABEL_7:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          if (v12) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      sub_23309C3F0();
      if (v12)
      {
LABEL_8:
        sub_23309C3F0();
        if (v8) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
LABEL_13:
      sub_23309C3F0();
      sub_23309C3E0();
      if (v8)
      {
LABEL_9:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (v9 == 1) {
          goto LABEL_3;
        }
        goto LABEL_15;
      }
LABEL_14:
      sub_23309C3F0();
      if (v9 == 1)
      {
LABEL_3:
        uint64_t result = sub_23309C3F0();
        goto LABEL_4;
      }
LABEL_15:
      sub_23309C3F0();
      if (v9)
      {
        sub_23309C3F0();
        sub_232E967F8(v10, v9);
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (!v11) {
          goto LABEL_19;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        if (!v11)
        {
LABEL_19:
          sub_23309C3F0();
          uint64_t result = sub_232E96840(v10, v9);
          goto LABEL_4;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v11);
      swift_bridgeObjectRelease();
      uint64_t result = sub_232E96840(v10, v9);
LABEL_4:
      v6 += 11;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_232E9980C(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = type metadata accessor for Range();
  uint64_t v4 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v66 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232E9AAB8(0, &qword_268756570, (uint64_t (*)(uint64_t))type metadata accessor for Range, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for Quantity();
  uint64_t v68 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v65 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v6);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v57 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v58 = (uint64_t)&v57 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v63 = (uint64_t)&v57 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v64 = (uint64_t)&v57 - v19;
  uint64_t v20 = (int *)type metadata accessor for ReferenceRange();
  uint64_t v21 = *((void *)v20 - 1);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v24)
  {
    uint64_t v26 = a2 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v27 = *(void *)(v21 + 72);
    v68 += 6;
    uint64_t v61 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v62 = v27;
    uint64_t v59 = v10;
    uint64_t v60 = v9;
    do
    {
      sub_232E96790(v26, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
      uint64_t v28 = v64;
      sub_232E96888((uint64_t)v23, v64, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
      uint64_t v29 = *v68;
      if ((*v68)(v28, 1, v10) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v30 = v65;
        sub_232E9ABD8(v28, v65, (uint64_t (*)(void))type metadata accessor for Quantity);
        sub_23309C3F0();
        Quantity.hash(into:)();
        sub_232E9AB78(v30, (uint64_t (*)(void))type metadata accessor for Quantity);
      }
      uint64_t v31 = v63;
      sub_232E96888((uint64_t)&v23[v20[5]], v63, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
      if (v29(v31, 1, v10) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v32 = v65;
        sub_232E9ABD8(v31, v65, (uint64_t (*)(void))type metadata accessor for Quantity);
        sub_23309C3F0();
        Quantity.hash(into:)();
        sub_232E9AB78(v32, (uint64_t (*)(void))type metadata accessor for Quantity);
      }
      uint64_t v33 = (uint64_t *)&v23[v20[6]];
      uint64_t v34 = v33[1];
      if (v34 == 1)
      {
        sub_23309C3F0();
        goto LABEL_19;
      }
      uint64_t v35 = *v33;
      uint64_t v36 = v33[2];
      sub_23309C3F0();
      if (v34)
      {
        sub_23309C3F0();
        sub_232E967F8(v35, v34);
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (!v36) {
          goto LABEL_17;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        if (!v36)
        {
LABEL_17:
          sub_23309C3F0();
          uint64_t v37 = v35;
          uint64_t v38 = v34;
          goto LABEL_18;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v36);
      swift_bridgeObjectRelease();
      uint64_t v37 = v35;
      uint64_t v38 = v34;
LABEL_18:
      sub_232E96840(v37, v38);
LABEL_19:
      uint64_t v39 = (uint64_t *)&v23[v20[7]];
      uint64_t v40 = v39[1];
      if (v40 == 1)
      {
        sub_23309C3F0();
        goto LABEL_27;
      }
      uint64_t v41 = *v39;
      uint64_t v42 = v39[2];
      sub_23309C3F0();
      if (v40)
      {
        sub_23309C3F0();
        sub_232E967F8(v41, v40);
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        if (!v42) {
          goto LABEL_25;
        }
      }
      else
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        if (!v42)
        {
LABEL_25:
          sub_23309C3F0();
          uint64_t v43 = v41;
          uint64_t v44 = v40;
          goto LABEL_26;
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v41;
      uint64_t v44 = v40;
LABEL_26:
      sub_232E96840(v43, v44);
LABEL_27:
      uint64_t v45 = (uint64_t *)&v23[v20[8]];
      uint64_t v46 = v45[1];
      if (v46 != 1)
      {
        uint64_t v47 = *v45;
        uint64_t v48 = v45[2];
        sub_23309C3F0();
        if (v46)
        {
          sub_23309C3F0();
          sub_232E967F8(v47, v46);
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          if (v48) {
            goto LABEL_31;
          }
LABEL_33:
          sub_23309C3F0();
          uint64_t v49 = v47;
          uint64_t v50 = v46;
        }
        else
        {
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          if (!v48) {
            goto LABEL_33;
          }
LABEL_31:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_232E95864(a1, v48);
          swift_bridgeObjectRelease();
          uint64_t v49 = v47;
          uint64_t v50 = v46;
        }
        sub_232E96840(v49, v50);
        goto LABEL_35;
      }
      sub_23309C3F0();
LABEL_35:
      uint64_t v10 = v59;
      uint64_t v51 = (uint64_t)v60;
      sub_232E96888((uint64_t)&v23[v20[9]], (uint64_t)v60, &qword_268756570, (uint64_t (*)(uint64_t))type metadata accessor for Range);
      if ((*v61)(v51, 1, v67) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v52 = v66;
        sub_232E9ABD8(v51, v66, (uint64_t (*)(void))type metadata accessor for Range);
        sub_23309C3F0();
        uint64_t v53 = v58;
        sub_232E96888(v52, v58, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
        if (v29(v53, 1, v10) == 1)
        {
          sub_23309C3F0();
        }
        else
        {
          uint64_t v54 = v65;
          sub_232E9ABD8(v53, v65, (uint64_t (*)(void))type metadata accessor for Quantity);
          sub_23309C3F0();
          Quantity.hash(into:)();
          sub_232E9AB78(v54, (uint64_t (*)(void))type metadata accessor for Quantity);
        }
        uint64_t v55 = v57;
        sub_232E96888(v66 + *(int *)(v67 + 20), v57, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
        if (v29(v55, 1, v10) == 1)
        {
          sub_23309C3F0();
        }
        else
        {
          uint64_t v56 = v65;
          sub_232E9ABD8(v55, v65, (uint64_t (*)(void))type metadata accessor for Quantity);
          sub_23309C3F0();
          Quantity.hash(into:)();
          sub_232E9AB78(v56, (uint64_t (*)(void))type metadata accessor for Quantity);
        }
        sub_232E9AB78(v66, (uint64_t (*)(void))type metadata accessor for Range);
      }
      if (*(void *)&v23[v20[10] + 8])
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      uint64_t result = sub_232E9AB78((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ReferenceRange);
      v26 += v62;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_232E9A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v4 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v22 = (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v13)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v23 = *(void *)(v10 + 72);
    uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    do
    {
      sub_232E96790(v15, (uint64_t)v12, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      if (*((void *)v12 + 1))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232E96888((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      if ((*v16)(v8, 1, v24) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v17 = v22;
        sub_232E9ABD8((uint64_t)v8, v22, type metadata accessor for ModelsR4.ResourceProxy);
        sub_23309C3F0();
        ModelsR4.ResourceProxy.hash(into:)(a1);
        sub_232E9AB78(v17, type metadata accessor for ModelsR4.ResourceProxy);
      }
      uint64_t v18 = (uint64_t *)&v12[*(int *)(v9 + 24)];
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      sub_232E9A9F4(*v18, v20);
      sub_23309B040();
      sub_232E9AA4C(v19, v20);
      uint64_t result = sub_232E9AB78((uint64_t)v12, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      v15 += v23;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_232E9A5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  uint64_t v4 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v19 = (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232E9AAB8(0, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v13)
  {
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v20 = *(void *)(v10 + 72);
    uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    do
    {
      sub_232E96790(v15, (uint64_t)v12, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      if (*((void *)v12 + 1))
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_23309C3F0();
      }
      sub_232E96888((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8, &qword_268756558, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if ((*v16)(v8, 1, v21) == 1)
      {
        sub_23309C3F0();
      }
      else
      {
        uint64_t v17 = v19;
        sub_232E9ABD8((uint64_t)v8, v19, type metadata accessor for ModelsDSTU2.ResourceProxy);
        sub_23309C3F0();
        ModelsDSTU2.ResourceProxy.hash(into:)(a1);
        sub_232E9AB78(v17, type metadata accessor for ModelsDSTU2.ResourceProxy);
      }
      sub_23309B040();
      uint64_t result = sub_232E9AB78((uint64_t)v12, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      v15 += v20;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_232E9A8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_23309C3E0();
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)(a2 + 48);
    do
    {
      int v6 = *v5;
      sub_23309C3E0();
      if (v6 == 1)
      {
        uint64_t result = sub_23309C3F0();
      }
      else
      {
        sub_23309C3F0();
        uint64_t result = sub_23309C3E0();
      }
      v5 += 24;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_232E9A97C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_232E9AAB8(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_232E9A9F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_232E9AA4C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_232E9AAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_232E9AAB8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_232E9AB1C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232E9A97C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_232E9AB78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_232E9ABD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for HKSignedClinicalDataSourceType(uint64_t a1)
{
}

void type metadata accessor for HKSignedClinicalDataProcessingOptions(uint64_t a1)
{
}

void type metadata accessor for HDFHIRResourceExtractionHints(uint64_t a1)
{
}

void sub_232E9ACCC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_232E9AD14()
{
  return sub_232E95E90(&qword_2687565F8, type metadata accessor for HDFHIRResourceExtractionHints);
}

uint64_t sub_232E9AD5C()
{
  return sub_232E95E90(&qword_268756600, type metadata accessor for HDFHIRResourceExtractionHints);
}

uint64_t sub_232E9ADA4()
{
  return sub_232E95E90(&qword_268756608, type metadata accessor for HDFHIRResourceExtractionHints);
}

uint64_t sub_232E9ADEC()
{
  return sub_232E95E90(&qword_268756610, type metadata accessor for HDFHIRResourceExtractionHints);
}

uint64_t sub_232E9AE34()
{
  return sub_232E95E90(&qword_268756618, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_232E9AE7C()
{
  return sub_232E95E90(&qword_268756620, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_232E9AEC4()
{
  return sub_232E95E90(&qword_268756628, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_232E9AF0C()
{
  return sub_232E95E90(&qword_268756630, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_232E9AF54()
{
  return sub_232E95E90(&qword_268756638, type metadata accessor for FileProtectionType);
}

uint64_t sub_232E9AF9C()
{
  return sub_232E95E90(&qword_268756640, type metadata accessor for FileProtectionType);
}

uint64_t sub_232E9AFE4()
{
  return sub_232E95E90(&qword_268756648, type metadata accessor for FileProtectionType);
}

uint64_t sub_232E9B02C()
{
  return sub_232E95E90(&qword_268756650, type metadata accessor for VNImageOption);
}

uint64_t sub_232E9B074()
{
  return sub_232E95E90(&qword_268756658, type metadata accessor for VNImageOption);
}

uint64_t sub_232E9B0BC()
{
  return sub_232E95E90(&qword_268756660, type metadata accessor for VNImageOption);
}

uint64_t sub_232E9B104(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

__n128 ModelsR4.ResourceProxy.get()@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (__n128 *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232EBDBF8(v2, (uint64_t)v6, type metadata accessor for ModelsR4.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      __n128 v12 = *v6;
      __n128 v27 = v6[1];
      __n128 v28 = v12;
      unint64_t v13 = v6[2].n128_u64[0];
      a1[3] = (uint64_t)&type metadata for ModelsR4.Bundle;
      a1[4] = sub_232E9B8DC();
      uint64_t v14 = swift_allocObject();
      *a1 = v14;
      __n128 result = v27;
      *(__n128 *)(v14 + 16) = v28;
      *(__n128 *)(v14 + 32) = result;
      *(void *)(v14 + 48) = v13;
      return result;
    case 2u:
      a1[3] = type metadata accessor for ModelsR4.Condition(0);
      a1[4] = sub_232E9B834(&qword_2687566B8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t v16 = type metadata accessor for ModelsR4.Condition;
      goto LABEL_9;
    case 3u:
      a1[3] = type metadata accessor for ModelsR4.DiagnosticReport(0);
      a1[4] = sub_232E9B834(&qword_2687566B0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t v16 = type metadata accessor for ModelsR4.DiagnosticReport;
      goto LABEL_9;
    case 4u:
      a1[3] = type metadata accessor for ModelsR4.DocumentReference(0);
      a1[4] = sub_232E9B834(&qword_2687566A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t v16 = type metadata accessor for ModelsR4.DocumentReference;
      goto LABEL_9;
    case 5u:
      a1[3] = type metadata accessor for ModelsR4.Immunization(0);
      a1[4] = sub_232E9B834(&qword_2687566A0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t v16 = type metadata accessor for ModelsR4.Immunization;
      goto LABEL_9;
    case 6u:
      a1[3] = type metadata accessor for ModelsR4.Observation(0);
      a1[4] = sub_232E9B834(&qword_268756698, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
      uint64_t v16 = type metadata accessor for ModelsR4.Observation;
LABEL_9:
      sub_232F3718C((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, v16);
      break;
    case 7u:
      a1[3] = (uint64_t)&type metadata for ModelsR4.Patient;
      a1[4] = sub_232E9B6A4();
      uint64_t v17 = swift_allocObject();
      *a1 = v17;
      __n128 v18 = v6[7];
      *(__n128 *)(v17 + 112) = v6[6];
      *(__n128 *)(v17 + 128) = v18;
      *(__n128 *)(v17 + 144) = v6[8];
      *(void *)(v17 + 160) = v6[9].n128_u64[0];
      __n128 v19 = v6[3];
      *(__n128 *)(v17 + 48) = v6[2];
      *(__n128 *)(v17 + 64) = v19;
      __n128 v20 = v6[5];
      *(__n128 *)(v17 + 80) = v6[4];
      *(__n128 *)(v17 + 96) = v20;
      __n128 result = *v6;
      __n128 v21 = v6[1];
      *(__n128 *)(v17 + 16) = *v6;
      *(__n128 *)(v17 + 32) = v21;
      break;
    case 8u:
      __n128 v22 = *v6;
      __n128 v27 = v6[1];
      __n128 v28 = v22;
      unint64_t v24 = v6[2].n128_u64[0];
      unint64_t v23 = v6[2].n128_u64[1];
      a1[3] = (uint64_t)&type metadata for UnknownResource;
      a1[4] = sub_232E9B608();
      uint64_t v25 = swift_allocObject();
      *a1 = v25;
      __n128 result = v27;
      *(__n128 *)(v25 + 16) = v28;
      *(__n128 *)(v25 + 32) = result;
      *(void *)(v25 + 48) = v24;
      *(void *)(v25 + 56) = v23;
      break;
    default:
      __n128 v7 = *v6;
      __n128 v27 = v6[1];
      __n128 v28 = v7;
      __n128 v26 = v6[2];
      unint64_t v9 = v6[3].n128_u64[0];
      unint64_t v8 = v6[3].n128_u64[1];
      a1[3] = (uint64_t)&type metadata for ModelsR4.Binary;
      a1[4] = sub_232E9B978();
      uint64_t v10 = swift_allocObject();
      *a1 = v10;
      __n128 result = v27;
      *(__n128 *)(v10 + 16) = v28;
      *(__n128 *)(v10 + 32) = result;
      result.n128_u64[0] = v26.n128_u64[0];
      *(__n128 *)(v10 + 48) = v26;
      *(void *)(v10 + 64) = v9;
      *(void *)(v10 + 72) = v8;
      break;
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.ResourceProxy(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D10);
}

unint64_t sub_232E9B608()
{
  unint64_t result = qword_268756688;
  if (!qword_268756688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756688);
  }
  return result;
}

uint64_t sub_232E9B65C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_232E9B6A4()
{
  unint64_t result = qword_268756690;
  if (!qword_268756690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756690);
  }
  return result;
}

uint64_t sub_232E9B6F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 168, 7);
}

uint64_t type metadata accessor for ModelsR4.Observation(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756DA0);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ModelsR4.Immunization(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D80);
}

uint64_t sub_232E9B834(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.DocumentReference(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D50);
}

uint64_t type metadata accessor for ModelsR4.DiagnosticReport(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D40);
}

uint64_t type metadata accessor for ModelsR4.Condition(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D30);
}

unint64_t sub_232E9B8DC()
{
  unint64_t result = qword_2687566C0;
  if (!qword_2687566C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687566C0);
  }
  return result;
}

uint64_t sub_232E9B930()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

unint64_t sub_232E9B978()
{
  unint64_t result = qword_2687566C8;
  if (!qword_2687566C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687566C8);
  }
  return result;
}

uint64_t sub_232E9B9CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t ModelsR4.ResourceProxy.get<A>(if:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  ModelsR4.ResourceProxy.get()(v6);
  sub_232E9BAB0();
  int v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v4 ^ 1u, 1, a1);
}

unint64_t sub_232E9BAB0()
{
  unint64_t result = qword_2687566D0;
  if (!qword_2687566D0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687566D0);
  }
  return result;
}

uint64_t sub_232E9BB08()
{
  return sub_23309C420();
}

uint64_t sub_232E9BB64()
{
  return sub_23309B800();
}

uint64_t sub_232E9BB84()
{
  return sub_23309C420();
}

uint64_t sub_232E9BBDC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_232E9BC30(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_232E9BC54()
{
  return 0x656372756F736572;
}

uint64_t sub_232E9BC74@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_232E9BCCC(uint64_t a1)
{
  unint64_t v2 = sub_232EA358C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232E9BD08(uint64_t a1)
{
  unint64_t v2 = sub_232EA358C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.ResourceProxy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v87 = a2;
  sub_232EBDC60(0, &qword_2687566D8, (uint64_t (*)(void))sub_232EA358C, (uint64_t)&type metadata for ModelsR4.ResourceProxy.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v90 = v3;
  uint64_t v88 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v80 - v4;
  uint64_t v86 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v6 = MEMORY[0x270FA5388](v86);
  uint64_t v82 = (uint64_t *)((char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v83 = (char *)&v80 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v84 = (uint64_t)&v80 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v85 = (uint64_t)&v80 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v89 = (char *)&v80 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  __n128 v18 = (char *)&v80 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  __n128 v21 = (char *)&v80 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  unint64_t v24 = (char *)&v80 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  __n128 v27 = (char *)&v80 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v80 - v28;
  uint64_t v30 = a1[3];
  uint64_t v104 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  sub_232EA358C();
  v91 = v5;
  uint64_t v31 = v92;
  sub_23309C460();
  if (v31) {
    goto LABEL_2;
  }
  uint64_t v33 = (uint64_t)v89;
  uint64_t v81 = v29;
  uint64_t v34 = sub_23309C0A0();
  uint64_t v92 = 0;
  uint64_t v36 = v34;
  uint64_t v37 = v35;
  BOOL v38 = v34 == 0x7972616E6942 && v35 == 0xE600000000000000;
  if (v38 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v103);
    uint64_t v39 = v92;
    ModelsR4.Binary.init(from:)(&v103, (uint64_t *)&v93);
    uint64_t v40 = (uint64_t)v81;
    if (v39)
    {
LABEL_9:
      uint64_t v41 = v88;
LABEL_10:
      (*(void (**)(char *, uint64_t))(v41 + 8))(v91, v90);
      return __swift_destroy_boxed_opaque_existential_1(v32);
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v90);
    uint64_t v42 = *((void *)&v93 + 1);
    *(void *)__n128 v27 = v93;
    *((void *)v27 + 1) = v42;
    long long v43 = v95;
    *((_OWORD *)v27 + 1) = v94;
    *((_OWORD *)v27 + 2) = v43;
    *((_OWORD *)v27 + 3) = v96;
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = (uint64_t)v27;
    goto LABEL_12;
  }
  if (v36 == 0x656C646E7542 && v37 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v87;
    uint64_t v49 = v91;
    goto LABEL_21;
  }
  char v47 = sub_23309C220();
  uint64_t v48 = v37;
  uint64_t v49 = v91;
  if (v47)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v87;
LABEL_21:
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v103);
    uint64_t v50 = v92;
    ModelsR4.Bundle.init(from:)(&v103, (uint64_t *)&v93);
    if (v50)
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v90);
      return __swift_destroy_boxed_opaque_existential_1(v32);
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v90);
    uint64_t v51 = *((void *)&v93 + 1);
    uint64_t v52 = v95;
    *(void *)unint64_t v24 = v93;
    *((void *)v24 + 1) = v51;
    *((_OWORD *)v24 + 1) = v94;
    *((void *)v24 + 4) = v52;
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t)v24;
    uint64_t v40 = (uint64_t)v81;
LABEL_24:
    sub_232F3718C(v53, v40, type metadata accessor for ModelsR4.ResourceProxy);
    goto LABEL_25;
  }
  uint64_t v55 = v48;
  if (v36 == 0x6F697469646E6F43 && v48 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = (uint64_t)v81;
LABEL_32:
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v93);
    uint64_t v58 = v92;
    ModelsR4.Condition.init(from:)(&v93, (uint64_t)v21);
    uint64_t v41 = v88;
    uint64_t v45 = v87;
    if (v58) {
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v90);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t)v21;
    goto LABEL_24;
  }
  char v56 = sub_23309C220();
  uint64_t v57 = (uint64_t)v81;
  if (v56)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = v57;
    goto LABEL_32;
  }
  uint64_t v80 = v55;
  if (v36 == 0xD000000000000010 && v80 == 0x800000023309F320 || (uint64_t v59 = v80, (sub_23309C220() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v93);
    uint64_t v60 = v18;
    uint64_t v61 = v92;
    ModelsR4.DiagnosticReport.init(from:)(&v93, (uint64_t)v18);
    uint64_t v45 = v87;
    if (v61) {
      goto LABEL_9;
    }
    uint64_t v40 = v57;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v90);
    swift_storeEnumTagMultiPayload();
    uint64_t v53 = (uint64_t)v60;
    goto LABEL_24;
  }
  if (v36 == 0xD000000000000011 && v59 == 0x800000023309F340 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v93);
    uint64_t v62 = v92;
    ModelsR4.DocumentReference.init(from:)(&v93, v33);
    if (v62)
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v90);
      return __swift_destroy_boxed_opaque_existential_1(v32);
    }
    uint64_t v40 = v57;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v90);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = v33;
    goto LABEL_12;
  }
  if (v36 == 0x617A696E756D6D49 && v59 == 0xEC0000006E6F6974)
  {
    uint64_t v63 = v90;
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t)v104;
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v93);
    uint64_t v64 = v85;
    uint64_t v65 = v92;
    ModelsR4.Immunization.init(from:)(&v93, v85);
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v63);
      return __swift_destroy_boxed_opaque_existential_1(v32);
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v63);
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = v64;
    uint64_t v40 = (uint64_t)v81;
LABEL_12:
    sub_232F3718C(v44, v40, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_13:
    uint64_t v45 = v87;
LABEL_25:
    sub_232F3718C(v40, v45, type metadata accessor for ModelsR4.ResourceProxy);
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  uint64_t v63 = v90;
  if (sub_23309C220()) {
    goto LABEL_49;
  }
  if ((v36 != 0x746176726573624FLL || v80 != 0xEB000000006E6F69) && (sub_23309C220() & 1) == 0)
  {
    if (v36 == 0x746E6569746150 && v80 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v69 = sub_23309C220();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0)
      {
        sub_232EA35E0((uint64_t)v104, (uint64_t)&v103);
        uint64_t v77 = v92;
        UnknownResource.init(from:)(&v103, (uint64_t *)&v93);
        if (v77) {
          goto LABEL_56;
        }
        (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v63);
        uint64_t v78 = *((void *)&v93 + 1);
        uint64_t v73 = v82;
        *uint64_t v82 = v93;
        v73[1] = v78;
        long long v79 = v95;
        *((_OWORD *)v73 + 1) = v94;
        *((_OWORD *)v73 + 2) = v79;
        goto LABEL_67;
      }
    }
    sub_232EA35E0((uint64_t)v104, (uint64_t)&v103);
    uint64_t v70 = v92;
    ModelsR4.Patient.init(from:)(&v103, (uint64_t)&v93);
    uint64_t v71 = (void (**)(char *, uint64_t))(v88 + 8);
    if (v70)
    {
      (*v71)(v91, v63);
      goto LABEL_2;
    }
    (*v71)(v91, v63);
    long long v72 = v100;
    uint64_t v73 = v83;
    *((_OWORD *)v83 + 6) = v99;
    *((_OWORD *)v73 + 7) = v72;
    *((_OWORD *)v73 + 8) = v101;
    v73[18] = v102;
    long long v74 = v96;
    *((_OWORD *)v73 + 2) = v95;
    *((_OWORD *)v73 + 3) = v74;
    long long v75 = v98;
    *((_OWORD *)v73 + 4) = v97;
    *((_OWORD *)v73 + 5) = v75;
    long long v76 = v94;
    *(_OWORD *)uint64_t v73 = v93;
    *((_OWORD *)v73 + 1) = v76;
LABEL_67:
    swift_storeEnumTagMultiPayload();
    uint64_t v68 = (uint64_t)v73;
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  sub_232EA35E0((uint64_t)v104, (uint64_t)&v93);
  uint64_t v66 = v92;
  ModelsR4.Observation.init(from:)(&v93, v84);
  if (!v66)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v63);
    uint64_t v67 = v84;
    swift_storeEnumTagMultiPayload();
    uint64_t v68 = v67;
LABEL_68:
    uint64_t v40 = (uint64_t)v81;
    sub_232F3718C(v68, (uint64_t)v81, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v32 = (uint64_t)v104;
    goto LABEL_13;
  }
LABEL_56:
  (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v63);
LABEL_2:
  uint64_t v32 = (uint64_t)v104;
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t ModelsR4.Binary.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v29 = a2;
  sub_232EBDC60(0, &qword_2687566E8, (uint64_t (*)(void))sub_232EA3644, (uint64_t)&type metadata for ModelsR4.Binary.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v30 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v35 = &type metadata for ModelsR4.Binary;
  sub_232EA3698();
  sub_23309B770();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3644();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v5;
    char v34 = 0;
    uint64_t v9 = v30;
    uint64_t v10 = sub_23309C0A0();
    uint64_t v13 = v12;
    uint64_t v28 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v33 = 1;
    uint64_t v14 = sub_23309C040();
    uint64_t v16 = v15;
    char v32 = 2;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_23309C040();
    uint64_t v27 = v17;
    char v31 = 3;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_23309C040();
    uint64_t v20 = v19;
    __n128 v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v25 = v18;
    v21(v7, v9);
    swift_bridgeObjectRetain();
    uint64_t v22 = v29;
    *uint64_t v29 = v28;
    v22[1] = v13;
    v22[2] = v14;
    v22[3] = v16;
    uint64_t v23 = v27;
    v22[4] = v26;
    v22[5] = v23;
    v22[6] = v25;
    v22[7] = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Bundle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v20 = a2;
  sub_232EBDC60(0, &qword_268756700, (uint64_t (*)(void))sub_232EA36D4, (uint64_t)&type metadata for ModelsR4.Bundle.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v21 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v23 = &type metadata for ModelsR4.Bundle;
  sub_232EA3728();
  sub_23309B770();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA36D4();
  sub_23309C460();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v5;
    LOBYTE(v23) = 0;
    uint64_t v9 = v21;
    uint64_t v11 = sub_23309C0A0();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_232EA3854(0, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    char v22 = 1;
    sub_232EA3784();
    sub_23309C080();
    uint64_t v19 = v11;
    uint64_t v14 = v23;
    LOBYTE(v23) = 2;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_23309C040();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
    swift_bridgeObjectRetain();
    uint64_t v18 = v20;
    *uint64_t v20 = v19;
    v18[1] = v13;
    v18[2] = (uint64_t)v14;
    v18[3] = v15;
    v18[4] = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Condition.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v77 = (uint64_t)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v76 = (uint64_t)&v74 - v7;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v79 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v80 = (uint64_t)&v74 - v11;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v74 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v74 - v19;
  sub_232EBDC60(0, &qword_268756738, (uint64_t (*)(void))sub_232EA38B8, (uint64_t)&type metadata for ModelsR4.Condition.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v81 = *(void *)(v21 - 8);
  uint64_t v82 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v24 = type metadata accessor for ModelsR4.Condition(0);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (uint64_t *)((char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v85 = (int *)v25;
  *(void *)&long long v88 = v25;
  sub_232EA3B14(0, (unint64_t *)&qword_268756748, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  *uint64_t v27 = sub_23309B770();
  v27[1] = v28;
  v27[2] = 0;
  v27[3] = 0;
  uint64_t v86 = v27;
  uint64_t v29 = a1[3];
  uint64_t v84 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v29);
  sub_232EA38B8();
  uint64_t v83 = v23;
  uint64_t v30 = v87;
  sub_23309C460();
  if (v30)
  {
    uint64_t v87 = v30;
    LODWORD(v75) = 0;
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    int v36 = 0;
    int v37 = 0;
    int v38 = 0;
    int v39 = 0;
    LODWORD(v76) = 0;
    LODWORD(v77) = 0;
    LODWORD(v78) = 0;
    LODWORD(v79) = 0;
    LODWORD(v80) = 0;
    LODWORD(v81) = 0;
    LODWORD(v82) = 0;
    LODWORD(v83) = 0;
  }
  else
  {
    uint64_t v31 = (uint64_t)v20;
    long long v74 = v15;
    long long v75 = v18;
    uint64_t v32 = v81;
    LOBYTE(v88) = 0;
    uint64_t v43 = sub_23309C0A0();
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = v86;
    *uint64_t v86 = v43;
    v46[1] = v45;
    LOBYTE(v88) = 1;
    v46[2] = sub_23309C040();
    v46[3] = v47;
    char v90 = 2;
    sub_232E95F10();
    sub_23309C080();
    v46[4] = v88;
    char v90 = 3;
    sub_232EA391C();
    sub_23309C080();
    uint64_t v48 = v89;
    *(_OWORD *)(v46 + 5) = v88;
    v46[7] = v48;
    char v90 = 4;
    sub_23309C080();
    uint64_t v49 = v89;
    *((_OWORD *)v46 + 4) = v88;
    v46[10] = v49;
    sub_232EBDA84(0, &qword_268756758);
    char v90 = 5;
    sub_232EA3970();
    sub_23309C080();
    v46[11] = v88;
    char v90 = 6;
    sub_23309C080();
    uint64_t v50 = v89;
    *((_OWORD *)v46 + 6) = v88;
    v46[14] = v50;
    char v90 = 7;
    sub_23309C080();
    uint64_t v51 = v89;
    *(_OWORD *)(v46 + 15) = v88;
    v46[17] = v51;
    char v90 = 8;
    sub_23309C080();
    uint64_t v87 = 0;
    v46[18] = v88;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v88) = 9;
    sub_232E9B834(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v52 = v87;
    sub_23309C080();
    uint64_t v87 = v52;
    if (v52)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
      int v39 = 0;
      LODWORD(v76) = 0;
      LODWORD(v77) = 0;
      LODWORD(v78) = 0;
      LODWORD(v79) = 0;
      LODWORD(v80) = 0;
      LODWORD(v81) = 0;
      LODWORD(v82) = 0;
      LODWORD(v83) = 0;
      LODWORD(v75) = 1;
      int v33 = 1;
      int v34 = 1;
      int v35 = 1;
      int v36 = 1;
      int v37 = 1;
      int v38 = 1;
    }
    else
    {
      sub_232EBCD8C(v31, (uint64_t)v86 + v85[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      type metadata accessor for Period();
      LOBYTE(v88) = 10;
      sub_232E9B834(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
      uint64_t v53 = v87;
      sub_23309C080();
      uint64_t v87 = v53;
      if (v53)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
        LODWORD(v76) = 0;
        LODWORD(v77) = 0;
        LODWORD(v78) = 0;
        LODWORD(v79) = 0;
        LODWORD(v80) = 0;
        LODWORD(v81) = 0;
        LODWORD(v82) = 0;
        LODWORD(v83) = 0;
        LODWORD(v75) = 1;
        int v33 = 1;
        int v34 = 1;
        int v35 = 1;
        int v36 = 1;
        int v37 = 1;
        int v38 = 1;
        int v39 = 1;
      }
      else
      {
        sub_232EBCD8C(v80, (uint64_t)v86 + v85[14], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        LOBYTE(v88) = 11;
        uint64_t v54 = v87;
        uint64_t v55 = sub_23309C040();
        uint64_t v87 = v54;
        if (v54)
        {
          (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
          LODWORD(v77) = 0;
          LODWORD(v78) = 0;
          LODWORD(v79) = 0;
          LODWORD(v80) = 0;
          LODWORD(v81) = 0;
          LODWORD(v82) = 0;
          LODWORD(v83) = 0;
          LODWORD(v75) = 1;
          int v33 = 1;
          int v34 = 1;
          int v35 = 1;
          int v36 = 1;
          int v37 = 1;
          int v38 = 1;
          int v39 = 1;
          LODWORD(v76) = 1;
        }
        else
        {
          uint64_t v57 = (uint64_t *)((char *)v86 + v85[15]);
          *uint64_t v57 = v55;
          v57[1] = v56;
          LOBYTE(v88) = 12;
          uint64_t v58 = v87;
          sub_23309C080();
          uint64_t v87 = v58;
          if (v58)
          {
            (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
            LODWORD(v78) = 0;
            LODWORD(v79) = 0;
            LODWORD(v80) = 0;
            LODWORD(v81) = 0;
            LODWORD(v82) = 0;
            LODWORD(v83) = 0;
            LODWORD(v75) = 1;
            int v33 = 1;
            int v34 = 1;
            int v35 = 1;
            int v36 = 1;
            int v37 = 1;
            int v38 = 1;
            int v39 = 1;
            LODWORD(v76) = 1;
            LODWORD(v77) = 1;
          }
          else
          {
            sub_232EBCD8C((uint64_t)v75, (uint64_t)v86 + v85[16], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            LOBYTE(v88) = 13;
            uint64_t v59 = v87;
            sub_23309C080();
            uint64_t v87 = v59;
            if (v59)
            {
              (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
              LODWORD(v79) = 0;
              LODWORD(v80) = 0;
              LODWORD(v81) = 0;
              LODWORD(v82) = 0;
              LODWORD(v83) = 0;
              LODWORD(v75) = 1;
              int v33 = 1;
              int v34 = 1;
              int v35 = 1;
              int v36 = 1;
              int v37 = 1;
              int v38 = 1;
              int v39 = 1;
              LODWORD(v76) = 1;
              LODWORD(v77) = 1;
              LODWORD(v78) = 1;
            }
            else
            {
              sub_232EBCD8C(v79, (uint64_t)v86 + v85[17], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
              LOBYTE(v88) = 14;
              uint64_t v60 = v87;
              uint64_t v61 = sub_23309C040();
              uint64_t v87 = v60;
              if (v60)
              {
                (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                LODWORD(v80) = 0;
                LODWORD(v81) = 0;
                LODWORD(v82) = 0;
                LODWORD(v83) = 0;
                LODWORD(v75) = 1;
                int v33 = 1;
                int v34 = 1;
                int v35 = 1;
                int v36 = 1;
                int v37 = 1;
                int v38 = 1;
                int v39 = 1;
                LODWORD(v76) = 1;
                LODWORD(v77) = 1;
                LODWORD(v78) = 1;
                LODWORD(v79) = 1;
              }
              else
              {
                uint64_t v63 = (uint64_t *)((char *)v86 + v85[18]);
                *uint64_t v63 = v61;
                v63[1] = v62;
                LOBYTE(v88) = 15;
                uint64_t v64 = v87;
                sub_23309C080();
                uint64_t v87 = v64;
                if (v64)
                {
                  (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                  LODWORD(v81) = 0;
                  LODWORD(v82) = 0;
                  LODWORD(v83) = 0;
                  LODWORD(v75) = 1;
                  int v33 = 1;
                  int v34 = 1;
                  int v35 = 1;
                  int v36 = 1;
                  int v37 = 1;
                  int v38 = 1;
                  int v39 = 1;
                  LODWORD(v76) = 1;
                  LODWORD(v77) = 1;
                  LODWORD(v78) = 1;
                  LODWORD(v79) = 1;
                  LODWORD(v80) = 1;
                }
                else
                {
                  sub_232EBCD8C((uint64_t)v74, (uint64_t)v86 + v85[19], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                  type metadata accessor for Reference();
                  LOBYTE(v88) = 16;
                  sub_232E9B834(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
                  uint64_t v65 = v87;
                  sub_23309C080();
                  uint64_t v87 = v65;
                  if (v65)
                  {
                    (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                    LODWORD(v82) = 0;
                    LODWORD(v83) = 0;
                    LODWORD(v75) = 1;
                    int v33 = 1;
                    int v34 = 1;
                    int v35 = 1;
                    int v36 = 1;
                    int v37 = 1;
                    int v38 = 1;
                    int v39 = 1;
                    LODWORD(v76) = 1;
                    LODWORD(v77) = 1;
                    LODWORD(v78) = 1;
                    LODWORD(v79) = 1;
                    LODWORD(v80) = 1;
                    LODWORD(v81) = 1;
                  }
                  else
                  {
                    sub_232EBCD8C(v76, (uint64_t)v86 + v85[20], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    LOBYTE(v88) = 17;
                    uint64_t v66 = v87;
                    sub_23309C080();
                    uint64_t v87 = v66;
                    if (v66)
                    {
                      (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                      LODWORD(v83) = 0;
                      LODWORD(v75) = 1;
                      int v33 = 1;
                      int v34 = 1;
                      int v35 = 1;
                      int v36 = 1;
                      int v37 = 1;
                      int v38 = 1;
                      int v39 = 1;
                      LODWORD(v76) = 1;
                      LODWORD(v77) = 1;
                      LODWORD(v78) = 1;
                      LODWORD(v79) = 1;
                      LODWORD(v80) = 1;
                      LODWORD(v81) = 1;
                      LODWORD(v82) = 1;
                    }
                    else
                    {
                      sub_232EBCD8C(v77, (uint64_t)v86 + v85[21], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
                      char v90 = 18;
                      sub_232EA39F0();
                      uint64_t v67 = v87;
                      sub_23309C080();
                      uint64_t v87 = v67;
                      if (!v67)
                      {
                        *(uint64_t *)((char *)v86 + v85[22]) = v88;
                        LOBYTE(v88) = 19;
                        uint64_t v68 = sub_23309C040();
                        uint64_t v87 = 0;
                        uint64_t v69 = v68;
                        uint64_t v71 = v70;
                        (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                        uint64_t v72 = (uint64_t)v86;
                        uint64_t v73 = (uint64_t *)((char *)v86 + v85[23]);
                        *uint64_t v73 = v69;
                        v73[1] = v71;
                        sub_232EBDBF8(v72, v78, type metadata accessor for ModelsR4.Condition);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
                        return sub_232EA3DC4(v72, type metadata accessor for ModelsR4.Condition);
                      }
                      (*(void (**)(char *, uint64_t))(v32 + 8))(v83, v82);
                      LODWORD(v75) = 1;
                      int v33 = 1;
                      int v34 = 1;
                      int v35 = 1;
                      int v36 = 1;
                      int v37 = 1;
                      int v38 = 1;
                      int v39 = 1;
                      LODWORD(v76) = 1;
                      LODWORD(v77) = 1;
                      LODWORD(v78) = 1;
                      LODWORD(v79) = 1;
                      LODWORD(v80) = 1;
                      LODWORD(v81) = 1;
                      LODWORD(v82) = 1;
                      LODWORD(v83) = 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v40 = v86;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v75)
  {
    uint64_t result = sub_232EA390C(v40[4]);
    if (!v33)
    {
LABEL_6:
      if (!v34) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_232E96840(v40[5], v40[6]);
  if (!v34)
  {
LABEL_7:
    if (!v35) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_232E96840(v40[8], v40[9]);
  if (!v35)
  {
LABEL_8:
    if (!v36) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_9:
    if (!v37) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = sub_232E96840(v40[12], v40[13]);
  if (!v37)
  {
LABEL_10:
    uint64_t v42 = v85;
    if (!v38) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = sub_232E96840(v40[15], v40[16]);
  uint64_t v42 = v85;
  if (!v38)
  {
LABEL_11:
    if (!v39) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_12:
    if (!v76) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v76)
  {
LABEL_13:
    if (!v77) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[14], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v77)
  {
LABEL_14:
    if (!v78) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v78)
  {
LABEL_15:
    if (!v79) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[16], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v79)
  {
LABEL_16:
    if (!v80) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[17], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v80)
  {
LABEL_17:
    if (!v81) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v81)
  {
LABEL_18:
    if (!v82) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[19], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v82)
  {
LABEL_19:
    if (!v83) {
      return result;
    }
    return sub_232EBCD1C((uint64_t)v40 + v42[21], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  }
LABEL_35:
  uint64_t result = sub_232EBCD1C((uint64_t)v40 + v42[20], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v83) {
    return sub_232EBCD1C((uint64_t)v40 + v42[21], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  }
  return result;
}

uint64_t ModelsR4.DiagnosticReport.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v58 = (char *)v55 - v5;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)v55 - v10;
  sub_232EBDC60(0, &qword_268756798, (uint64_t (*)(void))sub_232EA3AC0, (uint64_t)&type metadata for ModelsR4.DiagnosticReport.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v55 - v13;
  uint64_t v15 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (void *)((char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v67 = v16;
  sub_232EA3B14(0, &qword_2687567A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  *uint64_t v18 = sub_23309B770();
  v18[1] = v19;
  v18[2] = 0;
  v18[3] = 0;
  uint64_t v20 = *(int *)(v15 + 60);
  uint64_t v62 = a1;
  uint64_t v63 = v20;
  uint64_t v65 = v18;
  *(uint64_t *)((char *)v18 + v20) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3AC0();
  uint64_t v61 = v14;
  uint64_t v21 = v66;
  sub_23309C460();
  uint64_t v64 = (int *)v15;
  if (v21)
  {
    uint64_t v66 = v21;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    int v31 = 0;
    LODWORD(v61) = 0;
    goto LABEL_4;
  }
  uint64_t v22 = (uint64_t)v11;
  uint64_t v56 = v9;
  uint64_t v23 = v59;
  LOBYTE(v67) = 0;
  uint64_t v35 = sub_23309C0A0();
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  int v38 = v65;
  *uint64_t v65 = v35;
  v38[1] = v37;
  LOBYTE(v67) = 1;
  v38[2] = sub_23309C040();
  v38[3] = v39;
  sub_232EA3854(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
  char v69 = 2;
  sub_232EA3B54();
  sub_23309C080();
  uint64_t v40 = v15;
  v38[4] = v67;
  LOBYTE(v67) = 3;
  v38[5] = sub_23309C0A0();
  v38[6] = v41;
  sub_232EBDA84(0, &qword_268756758);
  char v69 = 4;
  sub_232EA3970();
  sub_23309C080();
  v38[7] = v67;
  char v69 = 5;
  sub_232EA391C();
  sub_23309C0E0();
  uint64_t v42 = v68;
  *((_OWORD *)v38 + 4) = v67;
  v38[10] = v42;
  LOBYTE(v67) = 6;
  v38[11] = sub_23309C040();
  v38[12] = v43;
  uint64_t v44 = type metadata accessor for FHIRDateTime();
  LOBYTE(v67) = 7;
  v55[2] = sub_232E9B834(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_23309C080();
  v55[1] = v44;
  sub_232EBCD8C(v22, (uint64_t)v38 + *(int *)(v40 + 44), &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  type metadata accessor for Period();
  LOBYTE(v67) = 8;
  sub_232E9B834(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
  uint64_t v45 = (uint64_t)v58;
  sub_23309C080();
  uint64_t v66 = 0;
  sub_232EBCD8C(v45, (uint64_t)v38 + v64[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  LOBYTE(v67) = 9;
  uint64_t v46 = v66;
  sub_23309C080();
  uint64_t v66 = v46;
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v61, v60);
    int v31 = 0;
    LODWORD(v61) = 0;
    int v24 = 1;
    int v25 = 1;
    int v26 = 1;
    int v27 = 1;
    int v28 = 1;
    int v29 = 1;
    int v30 = 1;
    goto LABEL_4;
  }
  sub_232EBCD8C((uint64_t)v56, (uint64_t)v65 + v64[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
  char v69 = 10;
  sub_232EA3C24();
  uint64_t v47 = v66;
  sub_23309C080();
  uint64_t v66 = v47;
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v61, v60);
    LODWORD(v61) = 0;
    int v24 = 1;
    int v25 = 1;
    int v26 = 1;
    int v27 = 1;
    int v28 = 1;
    int v29 = 1;
    int v30 = 1;
    int v31 = 1;
    goto LABEL_4;
  }
  *(uint64_t *)((char *)v65 + v64[14]) = v67;
  sub_232EA3854(0, &qword_2687567D8, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D488]);
  char v69 = 11;
  sub_232EA3CF4();
  uint64_t v48 = v66;
  sub_23309C080();
  uint64_t v66 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v61, v60);
    int v24 = 1;
    int v25 = 1;
    int v26 = 1;
    int v27 = 1;
    int v28 = 1;
    int v29 = 1;
    int v30 = 1;
    int v31 = 1;
    LODWORD(v61) = 1;
LABEL_4:
    uint64_t v32 = v65;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24)
    {
      swift_bridgeObjectRelease();
      if (!v25)
      {
LABEL_6:
        if (!v26) {
          goto LABEL_7;
        }
        goto LABEL_17;
      }
    }
    else if (!v25)
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_7:
      if (!v27) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (!v27)
    {
LABEL_8:
      int v33 = v64;
      if (!v28) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v33 = v64;
    if (!v28)
    {
LABEL_9:
      if (!v29) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    if (!v29)
    {
LABEL_10:
      if (!v30) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
LABEL_20:
    sub_232EBCD1C((uint64_t)v32 + v33[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (!v30)
    {
LABEL_11:
      if (!v31) {
        goto LABEL_12;
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_232EBCD1C((uint64_t)v32 + v33[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (!v31)
    {
LABEL_12:
      if (!v61) {
        return swift_bridgeObjectRelease();
      }
LABEL_13:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_22:
    sub_232EBCD1C((uint64_t)v32 + v33[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (!v61) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_13;
  }
  *(uint64_t *)((char *)v65 + v63) = v67;
  LOBYTE(v67) = 12;
  uint64_t v49 = sub_23309C040();
  uint64_t v66 = 0;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v61, v60);
  uint64_t v53 = (uint64_t)v65;
  uint64_t v54 = (uint64_t *)((char *)v65 + v64[16]);
  *uint64_t v54 = v50;
  v54[1] = v52;
  sub_232EBDBF8(v53, v57, type metadata accessor for ModelsR4.DiagnosticReport);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return sub_232EA3DC4(v53, type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DocumentReference.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v53 - v5;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v53 - v8;
  sub_232EBDC60(0, &qword_2687567F8, (uint64_t (*)(void))sub_232EA3E44, (uint64_t)&type metadata for ModelsR4.DocumentReference.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v53 - v11;
  uint64_t v13 = type metadata accessor for ModelsR4.DocumentReference(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (uint64_t *)((char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v63 = v14;
  sub_232EA3B14(0, &qword_268756808, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  *uint64_t v16 = sub_23309B770();
  v16[1] = v17;
  v16[2] = 0;
  v16[3] = 0;
  uint64_t v59 = a1;
  uint64_t v60 = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3E44();
  uint64_t v58 = v12;
  uint64_t v18 = v62;
  sub_23309C460();
  uint64_t v61 = (int *)v13;
  if (v18)
  {
    uint64_t v62 = v18;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    LODWORD(v57) = 0;
    LODWORD(v58) = 0;
  }
  else
  {
    uint64_t v19 = (uint64_t)v9;
    uint64_t v54 = v6;
    uint64_t v20 = v56;
    LOBYTE(v63) = 0;
    uint64_t v32 = sub_23309C0A0();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v35 = v60;
    uint64_t *v60 = v32;
    v35[1] = v34;
    LOBYTE(v63) = 1;
    v35[2] = sub_23309C040();
    v35[3] = v36;
    char v65 = 2;
    sub_232E95F10();
    sub_23309C080();
    v35[4] = v63;
    LOBYTE(v63) = 3;
    v35[5] = sub_23309C0A0();
    v35[6] = v37;
    LOBYTE(v63) = 4;
    v35[7] = sub_23309C040();
    v35[8] = v38;
    char v65 = 5;
    sub_232EA391C();
    sub_23309C0E0();
    uint64_t v39 = v64;
    *(_OWORD *)(v35 + 9) = v63;
    v35[11] = v39;
    sub_232EBDA84(0, &qword_268756758);
    char v65 = 6;
    sub_232EA3970();
    sub_23309C0E0();
    v35[12] = v63;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v63) = 7;
    sub_232E9B834(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    sub_232EBCD8C(v19, (uint64_t)v35 + *(int *)(v13 + 44), &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v63) = 8;
    uint64_t v40 = sub_23309C040();
    uint64_t v62 = 0;
    uint64_t v42 = (uint64_t *)((char *)v35 + v61[12]);
    *uint64_t v42 = v40;
    v42[1] = v41;
    sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    char v65 = 9;
    sub_232EA3C24();
    uint64_t v43 = v62;
    sub_23309C080();
    uint64_t v62 = v43;
    if (v43)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v57);
      int v28 = 0;
      LODWORD(v57) = 0;
      LODWORD(v58) = 0;
      int v21 = 1;
      int v22 = 1;
      int v23 = 1;
      int v24 = 1;
      int v25 = 1;
      int v26 = 1;
      int v27 = 1;
    }
    else
    {
      *(uint64_t *)((char *)v60 + v61[13]) = v63;
      sub_232EA3854(0, &qword_268756810, type metadata accessor for ModelsR4.DocumentReferenceContent, MEMORY[0x263F8D488]);
      char v65 = 10;
      sub_232EA3EB8();
      uint64_t v44 = v62;
      sub_23309C0E0();
      uint64_t v62 = v44;
      if (v44)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v57);
        LODWORD(v57) = 0;
        LODWORD(v58) = 0;
        int v21 = 1;
        int v22 = 1;
        int v23 = 1;
        int v24 = 1;
        int v25 = 1;
        int v26 = 1;
        int v27 = 1;
        int v28 = 1;
      }
      else
      {
        *(uint64_t *)((char *)v60 + v61[14]) = v63;
        type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        LOBYTE(v63) = 11;
        sub_232E9B834(&qword_268756828, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
        uint64_t v45 = v62;
        sub_23309C080();
        uint64_t v62 = v45;
        if (v45)
        {
          (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v57);
          LODWORD(v58) = 0;
          int v21 = 1;
          int v22 = 1;
          int v23 = 1;
          int v24 = 1;
          int v25 = 1;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          LODWORD(v57) = 1;
        }
        else
        {
          sub_232EBCD8C((uint64_t)v54, (uint64_t)v60 + v61[15], &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
          LOBYTE(v63) = 12;
          uint64_t v46 = v62;
          uint64_t v47 = sub_23309C040();
          uint64_t v62 = v46;
          if (!v46)
          {
            uint64_t v49 = v47;
            uint64_t v50 = v48;
            (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v57);
            uint64_t v51 = (uint64_t)v60;
            uint64_t v52 = (uint64_t *)((char *)v60 + v61[16]);
            uint64_t *v52 = v49;
            v52[1] = v50;
            sub_232EBDBF8(v51, v55, type metadata accessor for ModelsR4.DocumentReference);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
            return sub_232EA3DC4(v51, type metadata accessor for ModelsR4.DocumentReference);
          }
          (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v57);
          int v21 = 1;
          int v22 = 1;
          int v23 = 1;
          int v24 = 1;
          int v25 = 1;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          LODWORD(v57) = 1;
          LODWORD(v58) = 1;
        }
      }
    }
  }
  int v29 = v60;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v21)
  {
    uint64_t result = sub_232EA390C(v29[4]);
    if (!v22)
    {
LABEL_6:
      if (!v23) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_7:
    if (!v24) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_8:
    if (!v25) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_9:
    int v31 = v61;
    if (!v26) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = swift_bridgeObjectRelease();
  int v31 = v61;
  if (!v26)
  {
LABEL_10:
    if (!v27) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = sub_232EBCD1C((uint64_t)v29 + v31[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v27)
  {
LABEL_11:
    if (!v28) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_12:
    if (!v57) {
      goto LABEL_13;
    }
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v58) {
      return result;
    }
    return sub_232EBCD1C((uint64_t)v29 + v31[15], &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_23;
  }
LABEL_13:
  if (!v58) {
    return result;
  }
  return sub_232EBCD1C((uint64_t)v29 + v31[15], &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t ModelsR4.Immunization.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v67 = (uint64_t)&v65 - v5;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v65 - v10;
  sub_232EBDC60(0, &qword_268756830, (uint64_t (*)(void))sub_232EA3F88, (uint64_t)&type metadata for ModelsR4.Immunization.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v70 = v12;
  uint64_t v68 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = type metadata accessor for ModelsR4.Immunization(0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v75 = v16;
  sub_232EA3B14(0, (unint64_t *)&qword_268756840, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  *uint64_t v18 = sub_23309B770();
  v18[1] = v19;
  v18[2] = 0;
  v18[3] = 0;
  uint64_t v71 = a1;
  uint64_t v72 = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3F88();
  char v69 = v14;
  uint64_t v20 = v74;
  sub_23309C460();
  uint64_t v73 = (int *)v15;
  if (v20)
  {
    uint64_t v74 = v20;
    int v22 = 0;
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
    LODWORD(v70) = 0;
  }
  else
  {
    uint64_t v21 = (uint64_t)v11;
    char v65 = v9;
    LOBYTE(v75) = 0;
    uint64_t v33 = sub_23309C0A0();
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v36 = v72;
    *uint64_t v72 = v33;
    v36[1] = v35;
    LOBYTE(v75) = 1;
    v36[2] = sub_23309C040();
    v36[3] = v37;
    char v79 = 2;
    sub_232E95F10();
    sub_23309C080();
    v36[4] = v75;
    LOBYTE(v75) = 3;
    v36[5] = sub_23309C0A0();
    v36[6] = v38;
    char v79 = 4;
    sub_232EA4058();
    sub_23309C080();
    int v39 = DWORD2(v75);
    char v40 = BYTE12(v75);
    v36[7] = v75;
    *((_DWORD *)v36 + 16) = v39;
    *((unsigned char *)v36 + 68) = v40;
    sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    char v79 = 5;
    sub_232EA39F0();
    sub_23309C080();
    v36[9] = v75;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v75) = 6;
    sub_232E9B834(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C080();
    sub_232EBCD8C(v21, (uint64_t)v36 + *(int *)(v15 + 40), &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_232EBDA84(0, &qword_268756850);
    char v79 = 7;
    sub_232EA40AC();
    sub_23309C080();
    *(uint64_t *)((char *)v36 + *(int *)(v15 + 44)) = v75;
    LOBYTE(v75) = 8;
    uint64_t v41 = (uint64_t)v65;
    sub_23309C080();
    uint64_t v74 = 0;
    sub_232EBCD8C(v41, (uint64_t)v36 + v73[12], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    char v79 = 9;
    sub_232EA391C();
    uint64_t v42 = v74;
    sub_23309C0E0();
    uint64_t v74 = v42;
    if (v42)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      int v28 = 0;
      int v29 = 0;
      LODWORD(v68) = 0;
      LODWORD(v69) = 0;
      LODWORD(v70) = 0;
      int v22 = 1;
      int v23 = 1;
      int v24 = 1;
      int v25 = 1;
      int v26 = 1;
      int v27 = 1;
    }
    else
    {
      uint64_t v43 = v76;
      uint64_t v44 = (char *)v72 + v73[13];
      *(_OWORD *)uint64_t v44 = v75;
      *((void *)v44 + 2) = v43;
      type metadata accessor for Reference();
      LOBYTE(v75) = 10;
      sub_232E9B834(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
      uint64_t v45 = v74;
      sub_23309C080();
      uint64_t v74 = v45;
      if (v45)
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
        int v29 = 0;
        LODWORD(v68) = 0;
        LODWORD(v69) = 0;
        LODWORD(v70) = 0;
        int v22 = 1;
        int v23 = 1;
        int v24 = 1;
        int v25 = 1;
        int v26 = 1;
        int v27 = 1;
        int v28 = 1;
      }
      else
      {
        sub_232EBCD8C(v67, (uint64_t)v72 + v73[14], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
        LOBYTE(v75) = 11;
        uint64_t v46 = v74;
        char v47 = sub_23309C050();
        uint64_t v74 = v46;
        if (v46
          || (*((unsigned char *)v72 + v73[15]) = v47, LOBYTE(v75) = 12, v48 = v74, uint64_t v49 = sub_23309C040(), (v74 = v48) != 0))
        {
          (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
          LODWORD(v68) = 0;
          LODWORD(v69) = 0;
          LODWORD(v70) = 0;
          int v22 = 1;
          int v23 = 1;
          int v24 = 1;
          int v25 = 1;
          int v26 = 1;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
        }
        else
        {
          uint64_t v51 = (uint64_t *)((char *)v72 + v73[16]);
          *uint64_t v51 = v49;
          v51[1] = v50;
          sub_232EA3854(0, &qword_268756868, type metadata accessor for ModelsR4.ImmunizationPerformer, MEMORY[0x263F8D488]);
          char v79 = 13;
          sub_232EA41A0();
          uint64_t v52 = v74;
          sub_23309C080();
          uint64_t v74 = v52;
          if (v52)
          {
            (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
            LODWORD(v69) = 0;
            LODWORD(v70) = 0;
            int v22 = 1;
            int v23 = 1;
            int v24 = 1;
            int v25 = 1;
            int v26 = 1;
            int v27 = 1;
            int v28 = 1;
            int v29 = 1;
            LODWORD(v68) = 1;
          }
          else
          {
            *(uint64_t *)((char *)v72 + v73[17]) = v75;
            LOBYTE(v75) = 14;
            char v53 = sub_23309C050();
            uint64_t v74 = 0;
            *((unsigned char *)v72 + v73[18]) = v53;
            char v79 = 15;
            sub_232EA4270();
            uint64_t v54 = v74;
            sub_23309C080();
            uint64_t v74 = v54;
            if (v54)
            {
              (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
              LODWORD(v70) = 0;
              int v22 = 1;
              int v23 = 1;
              int v24 = 1;
              int v25 = 1;
              int v26 = 1;
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
            }
            else
            {
              uint64_t v55 = v78;
              uint64_t v56 = (char *)v72 + v73[19];
              long long v57 = v76;
              *(_OWORD *)uint64_t v56 = v75;
              *((_OWORD *)v56 + 1) = v57;
              *((_OWORD *)v56 + 2) = v77;
              *((void *)v56 + 6) = v55;
              LOBYTE(v75) = 16;
              uint64_t v58 = v74;
              uint64_t v59 = sub_23309C040();
              uint64_t v74 = v58;
              if (!v58)
              {
                uint64_t v61 = v59;
                uint64_t v62 = v60;
                (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
                uint64_t v63 = (uint64_t)v72;
                uint64_t v64 = (uint64_t *)((char *)v72 + v73[20]);
                uint64_t *v64 = v61;
                v64[1] = v62;
                sub_232EBDBF8(v63, v66, type metadata accessor for ModelsR4.Immunization);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
                return sub_232EA3DC4(v63, type metadata accessor for ModelsR4.Immunization);
              }
              (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
              int v22 = 1;
              int v23 = 1;
              int v24 = 1;
              int v25 = 1;
              int v26 = 1;
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
              LODWORD(v70) = 1;
            }
          }
        }
      }
    }
  }
  int v30 = v72;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t result = sub_232EA390C(v30[4]);
    if (!v23)
    {
LABEL_6:
      if (!v24) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_7:
    uint64_t v32 = v73;
    if (!v25) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v32 = v73;
  if (!v25)
  {
LABEL_8:
    if (!v26) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = sub_232EBCD1C((uint64_t)v30 + v32[10], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v26)
  {
LABEL_9:
    if (!v27) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_10:
    if (!v28) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = sub_232EBCD1C((uint64_t)v30 + v32[12], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v28)
  {
LABEL_11:
    if (!v29) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_12:
    if (!v68) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_232EBCD1C((uint64_t)v30 + v32[14], &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!v68)
  {
LABEL_13:
    if (!v69) {
      goto LABEL_14;
    }
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v70) {
      return result;
    }
    return sub_232EA3FDC(*(uint64_t *)((char *)v30 + v32[19]), *(uint64_t *)((char *)v30 + v32[19] + 8), *(uint64_t *)((char *)v30 + v32[19] + 16));
  }
LABEL_24:
  uint64_t result = swift_bridgeObjectRelease();
  if (v69) {
    goto LABEL_25;
  }
LABEL_14:
  if (!v70) {
    return result;
  }
  return sub_232EA3FDC(*(uint64_t *)((char *)v30 + v32[19]), *(uint64_t *)((char *)v30 + v32[19] + 8), *(uint64_t *)((char *)v30 + v32[19] + 16));
}

uint64_t ModelsR4.Observation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v69 = (uint64_t)v66 - v5;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v70 = (char *)v66 - v7;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v66 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v66 - v15;
  sub_232EBDC60(0, &qword_268756888, (uint64_t (*)(void))sub_232EA42C4, (uint64_t)&type metadata for ModelsR4.Observation.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v71 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v66 - v18;
  uint64_t v20 = type metadata accessor for ModelsR4.Observation(0);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  int v23 = (void *)((char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v76 = (int *)v21;
  *(void *)&long long v78 = v21;
  sub_232EA3B14(0, (unint64_t *)&qword_268756898, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  *int v23 = sub_23309B770();
  v23[1] = v24;
  v23[2] = 0;
  v23[3] = 0;
  uint64_t v74 = a1;
  long long v75 = v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA42C4();
  uint64_t v73 = v19;
  uint64_t v25 = v77;
  sub_23309C460();
  if (v25)
  {
    uint64_t v77 = v25;
    int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    LODWORD(v67) = 0;
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
    LODWORD(v70) = 0;
    LODWORD(v71) = 0;
    LODWORD(v72) = 0;
    LODWORD(v73) = 0;
  }
  else
  {
    uint64_t v26 = (uint64_t)v16;
    uint64_t v67 = v11;
    LOBYTE(v78) = 0;
    uint64_t v37 = sub_23309C0A0();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    char v40 = v75;
    *long long v75 = v37;
    v40[1] = v39;
    LOBYTE(v78) = 1;
    uint64_t v41 = sub_23309C040();
    uint64_t v42 = v76;
    v40[2] = v41;
    v40[3] = v43;
    char v80 = 2;
    sub_232E95F10();
    sub_23309C080();
    v40[4] = v78;
    LOBYTE(v78) = 3;
    v40[5] = sub_23309C0A0();
    v40[6] = v44;
    sub_232EBDA84(0, &qword_268756758);
    char v80 = 4;
    sub_232EA3970();
    sub_23309C080();
    v40[7] = v78;
    char v80 = 5;
    unint64_t v45 = sub_232EA391C();
    sub_23309C0E0();
    v66[0] = v45;
    uint64_t v46 = v79;
    *((_OWORD *)v40 + 4) = v78;
    v40[10] = v46;
    uint64_t v47 = type metadata accessor for FHIRDateTime();
    LOBYTE(v78) = 6;
    v66[1] = sub_232E9B834(&qword_268756768, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v66[2] = v47;
    sub_23309C080();
    sub_232EBCD8C(v26, (uint64_t)v40 + v42[10], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v78) = 7;
    sub_23309C080();
    sub_232EBCD8C((uint64_t)v14, (uint64_t)v40 + v42[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v78) = 8;
    sub_232E9B834(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
    uint64_t v48 = (uint64_t)v70;
    sub_23309C080();
    uint64_t v77 = 0;
    sub_232EBCD8C(v48, (uint64_t)v40 + v42[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v78) = 9;
    uint64_t v49 = v77;
    sub_23309C080();
    uint64_t v77 = v49;
    if (v49)
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
      LODWORD(v67) = 0;
      LODWORD(v68) = 0;
      LODWORD(v69) = 0;
      LODWORD(v70) = 0;
      LODWORD(v71) = 0;
      LODWORD(v72) = 0;
      LODWORD(v73) = 0;
      int v27 = 1;
      int v28 = 1;
      int v29 = 1;
      int v30 = 1;
      int v31 = 1;
      int v32 = 1;
      int v33 = 1;
    }
    else
    {
      sub_232EBCD8C((uint64_t)v67, (uint64_t)v75 + v76[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
      char v80 = 10;
      sub_232EA39F0();
      uint64_t v50 = v77;
      sub_23309C080();
      uint64_t v77 = v50;
      if (v50)
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
        LODWORD(v68) = 0;
        LODWORD(v69) = 0;
        LODWORD(v70) = 0;
        LODWORD(v71) = 0;
        LODWORD(v72) = 0;
        LODWORD(v73) = 0;
        int v27 = 1;
        int v28 = 1;
        int v29 = 1;
        int v30 = 1;
        int v31 = 1;
        int v32 = 1;
        int v33 = 1;
        LODWORD(v67) = 1;
      }
      else
      {
        *(uint64_t *)((char *)v75 + v76[14]) = v78;
        sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
        char v80 = 11;
        sub_232EA3C24();
        uint64_t v51 = v77;
        sub_23309C080();
        uint64_t v77 = v51;
        if (v51)
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
          LODWORD(v69) = 0;
          LODWORD(v70) = 0;
          LODWORD(v71) = 0;
          LODWORD(v72) = 0;
          LODWORD(v73) = 0;
          int v27 = 1;
          int v28 = 1;
          int v29 = 1;
          int v30 = 1;
          int v31 = 1;
          int v32 = 1;
          int v33 = 1;
          LODWORD(v67) = 1;
          LODWORD(v68) = 1;
        }
        else
        {
          *(uint64_t *)((char *)v75 + v76[15]) = v78;
          LOBYTE(v78) = 12;
          uint64_t v52 = sub_23309C040();
          uint64_t v77 = 0;
          char v53 = (uint64_t *)((char *)v75 + v76[16]);
          *char v53 = v52;
          v53[1] = v54;
          char v80 = 13;
          uint64_t v55 = v77;
          sub_23309C080();
          uint64_t v77 = v55;
          if (v55)
          {
            (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
            LODWORD(v71) = 0;
            LODWORD(v72) = 0;
            LODWORD(v73) = 0;
            int v27 = 1;
            int v28 = 1;
            int v29 = 1;
            int v30 = 1;
            int v31 = 1;
            int v32 = 1;
            int v33 = 1;
            LODWORD(v67) = 1;
            LODWORD(v68) = 1;
            LODWORD(v69) = 1;
            LODWORD(v70) = 1;
          }
          else
          {
            uint64_t v56 = v79;
            long long v57 = (char *)v75 + v76[17];
            *(_OWORD *)long long v57 = v78;
            *((void *)v57 + 2) = v56;
            type metadata accessor for Quantity();
            LOBYTE(v78) = 14;
            sub_232E9B834(&qword_2687568A0, (void (*)(uint64_t))type metadata accessor for Quantity);
            uint64_t v58 = v77;
            sub_23309C080();
            uint64_t v77 = v58;
            if (v58)
            {
              (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
              LODWORD(v72) = 0;
              LODWORD(v73) = 0;
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              int v30 = 1;
              int v31 = 1;
              int v32 = 1;
              int v33 = 1;
              LODWORD(v67) = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
              LODWORD(v70) = 1;
              LODWORD(v71) = 1;
            }
            else
            {
              sub_232EBCD8C(v69, (uint64_t)v75 + v76[18], &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
              sub_232EA3854(0, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
              char v80 = 15;
              sub_232EA4318();
              uint64_t v59 = v77;
              sub_23309C080();
              uint64_t v77 = v59;
              if (!v59)
              {
                *(uint64_t *)((char *)v75 + v76[19]) = v78;
                LOBYTE(v78) = 16;
                uint64_t v60 = sub_23309C040();
                uint64_t v77 = 0;
                uint64_t v61 = v60;
                uint64_t v63 = v62;
                (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
                uint64_t v64 = (uint64_t)v75;
                char v65 = (uint64_t *)((char *)v75 + v76[20]);
                *char v65 = v61;
                v65[1] = v63;
                sub_232EBDBF8(v64, v68, type metadata accessor for ModelsR4.Observation);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
                return sub_232EA3DC4(v64, type metadata accessor for ModelsR4.Observation);
              }
              (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
              LODWORD(v73) = 0;
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              int v30 = 1;
              int v31 = 1;
              int v32 = 1;
              int v33 = 1;
              LODWORD(v67) = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
              LODWORD(v70) = 1;
              LODWORD(v71) = 1;
              LODWORD(v72) = 1;
            }
          }
        }
      }
    }
  }
  uint64_t v34 = v75;
  uint64_t v35 = v76;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v27)
  {
    uint64_t result = sub_232EA390C(v34[4]);
    if (!v28)
    {
LABEL_6:
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_21;
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_7:
    if (!v30) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_8:
    if (!v31) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v31)
  {
LABEL_9:
    if (!v32) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_232EBCD1C((uint64_t)v34 + v35[10], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v32)
  {
LABEL_10:
    if (!v33) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = sub_232EBCD1C((uint64_t)v34 + v35[11], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v33)
  {
LABEL_11:
    if (!v67) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = sub_232EBCD1C((uint64_t)v34 + v35[12], &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!v67)
  {
LABEL_12:
    if (!v68) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = sub_232EBCD1C((uint64_t)v34 + v35[13], &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v68)
  {
LABEL_13:
    if (!v69) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v69)
  {
LABEL_14:
    if (!v70) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v70)
  {
LABEL_15:
    if (!v71) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  if (!v71)
  {
LABEL_16:
    if (!v72) {
      goto LABEL_17;
    }
LABEL_31:
    uint64_t result = sub_232EBCD1C((uint64_t)v34 + v35[18], &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
    if (!v73) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_30:
  uint64_t result = sub_232E96840(*(uint64_t *)((char *)v34 + v35[17]), *(uint64_t *)((char *)v34 + v35[17] + 8));
  if (v72) {
    goto LABEL_31;
  }
LABEL_17:
  if (!v73) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Patient.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_232EBDC60(0, &qword_2687568C0, (uint64_t (*)(void))sub_232EA43E8, (uint64_t)&type metadata for ModelsR4.Patient.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v72 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v56 - v7;
  uint64_t v87 = &type metadata for ModelsR4.Patient;
  sub_232EA443C();
  sub_23309B770();
  v112 = v9;
  uint64_t v10 = a1[3];
  uint64_t v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_232EA43E8();
  uint64_t v73 = v8;
  sub_23309C460();
  if (v2)
  {
    uint64_t v76 = v2;
    long long v75 = 0;
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    goto LABEL_4;
  }
  LOBYTE(v87) = 0;
  uint64_t v18 = sub_23309C0A0();
  uint64_t v20 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v87) = 1;
  uint64_t v21 = sub_23309C040();
  uint64_t v23 = v22;
  uint64_t v64 = v21;
  v112 = (ValueMetadata *)v18;
  LOBYTE(v77) = 2;
  sub_232EA4058();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v62 = v23;
  uint64_t v63 = v20;
  uint64_t v61 = v87;
  LODWORD(v23) = v88;
  int v24 = BYTE4(v88);
  char v111 = BYTE4(v88);
  LOBYTE(v87) = 3;
  uint64_t v25 = sub_23309C040();
  int v58 = v24;
  uint64_t v59 = v25;
  int v60 = v23;
  uint64_t v27 = v26;
  sub_232EA3854(0, &qword_2687568D8, type metadata accessor for ModelsR4.HumanName, MEMORY[0x263F8D488]);
  LOBYTE(v77) = 4;
  sub_232EA4498();
  swift_bridgeObjectRetain();
  sub_23309C0E0();
  uint64_t v57 = v27;
  int v28 = v87;
  sub_232EBDA84(0, &qword_2687568F0);
  LOBYTE(v77) = 5;
  sub_232EA4568();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v67 = v28;
  int v29 = v87;
  sub_232EA3854(0, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
  LOBYTE(v77) = 6;
  sub_232EA463C();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v71 = v29;
  int v30 = v87;
  sub_232EBDA84(0, &qword_268756920);
  LOBYTE(v77) = 7;
  sub_232EA470C();
  uint64_t v70 = v30;
  swift_bridgeObjectRetain();
  sub_23309C080();
  int v31 = v87;
  LOBYTE(v77) = 8;
  sub_232EA391C();
  swift_bridgeObjectRetain();
  sub_23309C080();
  uint64_t v76 = 0;
  uint64_t v69 = v31;
  uint64_t v32 = (uint64_t)v87;
  uint64_t v33 = v88;
  uint64_t v34 = v89;
  sub_232EA3854(0, &qword_268756938, type metadata accessor for ModelsR4.PatientLink, MEMORY[0x263F8D488]);
  LOBYTE(v77) = 9;
  *(void *)&long long v65 = v32;
  *((void *)&v65 + 1) = v33;
  uint64_t v66 = v34;
  sub_232E967F8(v32, v33);
  sub_232EA4838();
  uint64_t v35 = v76;
  sub_23309C080();
  uint64_t v76 = v35;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v73, v72);
    sub_232E96840(v65, *((uint64_t *)&v65 + 1));
    uint64_t v36 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v75 = 0;
LABEL_22:
    int v16 = 0;
    int v11 = 1;
    v112 = v36;
    int v12 = 1;
    int v13 = 1;
    int v14 = 1;
    int v15 = 1;
    goto LABEL_4;
  }
  uint64_t v37 = v87;
  sub_232EA3854(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
  LOBYTE(v77) = 10;
  sub_232EA3B54();
  long long v75 = v37;
  swift_bridgeObjectRetain();
  uint64_t v38 = v76;
  sub_23309C080();
  uint64_t v76 = v38;
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v73, v72);
    swift_bridgeObjectRelease();
    sub_232E96840(v65, *((uint64_t *)&v65 + 1));
    uint64_t v36 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  char v108 = 11;
  uint64_t v68 = v87;
  swift_bridgeObjectRetain();
  uint64_t v39 = v76;
  uint64_t v40 = sub_23309C040();
  uint64_t v76 = v39;
  if (!v39)
  {
    uint64_t v43 = v40;
    uint64_t v44 = v41;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v73, v72);
    *(void *)&long long v77 = v112;
    *((void *)&v77 + 1) = v63;
    *(void *)&long long v78 = v64;
    *((void *)&v78 + 1) = v62;
    *(void *)&long long v79 = v61;
    DWORD2(v79) = v60;
    BYTE12(v79) = v58;
    *(void *)&long long v80 = v59;
    *((void *)&v80 + 1) = v57;
    *(void *)&long long v81 = v67;
    *((void *)&v81 + 1) = v71;
    *(void *)&long long v82 = v70;
    *((void *)&v82 + 1) = v69;
    long long v45 = v65;
    long long v83 = v65;
    *(void *)&long long v84 = v66;
    *((void *)&v84 + 1) = v75;
    *(void *)&long long v85 = v68;
    *((void *)&v85 + 1) = v43;
    uint64_t v56 = v43;
    uint64_t v86 = v44;
    sub_232EA4908((uint64_t)&v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v45, *((uint64_t *)&v45 + 1));
    uint64_t v46 = (uint64_t)v63;
    swift_bridgeObjectRelease();
    uint64_t v47 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v67;
    swift_bridgeObjectRelease();
    uint64_t v49 = v71;
    swift_bridgeObjectRelease();
    uint64_t v50 = v70;
    swift_bridgeObjectRelease();
    uint64_t v51 = v69;
    swift_bridgeObjectRelease();
    long long v52 = v84;
    *(_OWORD *)(a2 + 96) = v83;
    *(_OWORD *)(a2 + 112) = v52;
    *(_OWORD *)(a2 + 128) = v85;
    *(void *)(a2 + 144) = v86;
    long long v53 = v80;
    *(_OWORD *)(a2 + 32) = v79;
    *(_OWORD *)(a2 + 48) = v53;
    long long v54 = v82;
    *(_OWORD *)(a2 + 64) = v81;
    *(_OWORD *)(a2 + 80) = v54;
    long long v55 = v78;
    *(_OWORD *)a2 = v77;
    *(_OWORD *)(a2 + 16) = v55;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    uint64_t v87 = v112;
    uint64_t v88 = v46;
    uint64_t v89 = v64;
    uint64_t v90 = v47;
    v91 = v61;
    int v92 = v60;
    char v93 = v111;
    __int16 v94 = v109;
    char v95 = v110;
    uint64_t v96 = v59;
    uint64_t v97 = v57;
    long long v98 = v48;
    long long v99 = v49;
    long long v100 = v50;
    long long v101 = v51;
    long long v102 = v65;
    uint64_t v103 = v66;
    uint64_t v104 = v75;
    v105 = v68;
    uint64_t v106 = v56;
    uint64_t v107 = v44;
    return sub_232EA49DC((uint64_t)&v87);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v73, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v65, *((uint64_t *)&v65 + 1));
  uint64_t v42 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v11 = 1;
  v112 = v42;
  int v12 = 1;
  int v13 = 1;
  int v14 = 1;
  int v15 = 1;
  int v16 = 1;
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11) {
    swift_bridgeObjectRelease();
  }
  if (v12)
  {
    swift_bridgeObjectRelease();
    if (!v13)
    {
LABEL_8:
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if (!v13)
  {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  if (!v14)
  {
LABEL_9:
    if (!v15) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (v15) {
LABEL_10:
  }
    sub_232E96840(v65, *((uint64_t *)&v65 + 1));
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)v68;
  if (v16) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ModelsR4.ResourceProxy.encode(to:)()
{
  ModelsR4.ResourceProxy.get()(v1);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23309B670();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t ModelsR4.ResourceProxy.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Observation(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ModelsR4.Immunization(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ModelsR4.Condition(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EBDBF8(v1, (uint64_t)v20, type metadata accessor for ModelsR4.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v28 = *((void *)v20 + 2);
      uint64_t v29 = *((void *)v20 + 4);
      sub_23309C3E0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (!v28) {
        goto LABEL_15;
      }
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E9A24C(a1, v28);
      goto LABEL_13;
    case 2u:
      sub_232F3718C((uint64_t)v20, (uint64_t)v17, type metadata accessor for ModelsR4.Condition);
      sub_23309C3E0();
      ModelsR4.Condition.hash(into:)(a1);
      return sub_232EA3DC4((uint64_t)v17, type metadata accessor for ModelsR4.Condition);
    case 3u:
      sub_232F3718C((uint64_t)v20, (uint64_t)v14, type metadata accessor for ModelsR4.DiagnosticReport);
      sub_23309C3E0();
      ModelsR4.DiagnosticReport.hash(into:)(a1);
      return sub_232EA3DC4((uint64_t)v14, type metadata accessor for ModelsR4.DiagnosticReport);
    case 4u:
      sub_232F3718C((uint64_t)v20, (uint64_t)v11, type metadata accessor for ModelsR4.DocumentReference);
      sub_23309C3E0();
      ModelsR4.DocumentReference.hash(into:)(a1);
      return sub_232EA3DC4((uint64_t)v11, type metadata accessor for ModelsR4.DocumentReference);
    case 5u:
      sub_232F3718C((uint64_t)v20, (uint64_t)v8, type metadata accessor for ModelsR4.Immunization);
      sub_23309C3E0();
      ModelsR4.Immunization.hash(into:)(a1);
      return sub_232EA3DC4((uint64_t)v8, type metadata accessor for ModelsR4.Immunization);
    case 6u:
      sub_232F3718C((uint64_t)v20, (uint64_t)v5, type metadata accessor for ModelsR4.Observation);
      sub_23309C3E0();
      ModelsR4.Observation.hash(into:)(a1);
      return sub_232EA3DC4((uint64_t)v5, type metadata accessor for ModelsR4.Observation);
    case 7u:
      long long v31 = *((_OWORD *)v20 + 7);
      long long v54 = *((_OWORD *)v20 + 6);
      long long v55 = v31;
      long long v56 = *((_OWORD *)v20 + 8);
      uint64_t v57 = *((void *)v20 + 18);
      long long v32 = *((_OWORD *)v20 + 3);
      long long v50 = *((_OWORD *)v20 + 2);
      long long v51 = v32;
      long long v33 = *((_OWORD *)v20 + 5);
      long long v52 = *((_OWORD *)v20 + 4);
      long long v53 = v33;
      long long v34 = *((_OWORD *)v20 + 1);
      long long v48 = *(_OWORD *)v20;
      long long v49 = v34;
      sub_23309C3E0();
      long long v44 = v54;
      long long v45 = v55;
      long long v46 = v56;
      uint64_t v47 = v57;
      long long v40 = v50;
      long long v41 = v51;
      long long v42 = v52;
      long long v43 = v53;
      long long v38 = v48;
      long long v39 = v49;
      ModelsR4.Patient.hash(into:)(a1);
      return sub_232EA49DC((uint64_t)&v48);
    case 8u:
      uint64_t v35 = *((void *)v20 + 3);
      uint64_t v29 = *((void *)v20 + 5);
      sub_23309C3E0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v35)
      {
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_23309B800();
LABEL_13:
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_14;
        }
      }
      else
      {
LABEL_15:
        sub_23309C3F0();
        if (v29)
        {
LABEL_14:
          sub_23309C3F0();
          swift_bridgeObjectRetain();
          sub_23309B800();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
      }
      sub_23309C3F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      uint64_t v22 = *(void *)v20;
      uint64_t v21 = *((void *)v20 + 1);
      uint64_t v24 = *((void *)v20 + 2);
      uint64_t v23 = *((void *)v20 + 3);
      uint64_t v25 = *((void *)v20 + 4);
      uint64_t v26 = *((void *)v20 + 5);
      uint64_t v27 = *((void *)v20 + 7);
      uint64_t v36 = *((void *)v20 + 6);
      uint64_t v37 = v25;
      sub_23309C3E0();
      *(void *)&long long v48 = v22;
      *((void *)&v48 + 1) = v21;
      *(void *)&long long v49 = v24;
      *((void *)&v49 + 1) = v23;
      *(void *)&long long v50 = v37;
      *((void *)&v50 + 1) = v26;
      *(void *)&long long v51 = v36;
      *((void *)&v51 + 1) = v27;
      ModelsR4.Binary.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
  }
}

uint64_t ModelsR4.ResourceProxy.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t sub_232EA3254@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ResourceProxy.init(from:)(a1, a2);
}

uint64_t sub_232EA326C()
{
  ModelsR4.ResourceProxy.get()(v1);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23309B670();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t sub_232EA32E8(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t sub_232EA3304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t ModelsR4.Binary.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Binary.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Binary.contentType.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.hash(into:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[7];
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_8:
    sub_23309C3F0();
    if (v3) {
      goto LABEL_4;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  if (!v2) {
    goto LABEL_8;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3) {
    return sub_23309C3F0();
  }
LABEL_4:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232EA358C()
{
  unint64_t result = qword_2687566E0;
  if (!qword_2687566E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687566E0);
  }
  return result;
}

uint64_t sub_232EA35E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_232EA3644()
{
  unint64_t result = qword_2687566F0;
  if (!qword_2687566F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687566F0);
  }
  return result;
}

unint64_t sub_232EA3698()
{
  unint64_t result = qword_2687566F8;
  if (!qword_2687566F8)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687566F8);
  }
  return result;
}

unint64_t sub_232EA36D4()
{
  unint64_t result = qword_268756708;
  if (!qword_268756708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756708);
  }
  return result;
}

unint64_t sub_232EA3728()
{
  unint64_t result = qword_268756710;
  if (!qword_268756710)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_268756710);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.Bundle.BundleEntry(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D20);
}

unint64_t sub_232EA3784()
{
  unint64_t result = qword_268756720;
  if (!qword_268756720)
  {
    sub_232EA3854(255, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756728, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756720);
  }
  return result;
}

void sub_232EA3854(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_232EA38B8()
{
  unint64_t result = qword_268756740;
  if (!qword_268756740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756740);
  }
  return result;
}

uint64_t sub_232EA390C(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_232EA391C()
{
  unint64_t result = qword_268756750;
  if (!qword_268756750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756750);
  }
  return result;
}

unint64_t sub_232EA3970()
{
  unint64_t result = qword_268756760;
  if (!qword_268756760)
  {
    sub_232EBDA84(255, &qword_268756758);
    sub_232EA391C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756760);
  }
  return result;
}

unint64_t sub_232EA39F0()
{
  unint64_t result = qword_268756788;
  if (!qword_268756788)
  {
    sub_232EA3854(255, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756790, (void (*)(uint64_t))type metadata accessor for Annotation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756788);
  }
  return result;
}

unint64_t sub_232EA3AC0()
{
  unint64_t result = qword_2687567A0;
  if (!qword_2687567A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687567A0);
  }
  return result;
}

uint64_t sub_232EA3B14(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_232EA3B54()
{
  unint64_t result = qword_2687567B8;
  if (!qword_2687567B8)
  {
    sub_232EA3854(255, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687567C0, (void (*)(uint64_t))type metadata accessor for Extension);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687567B8);
  }
  return result;
}

unint64_t sub_232EA3C24()
{
  unint64_t result = qword_2687567D0;
  if (!qword_2687567D0)
  {
    sub_232EA3854(255, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687567D0);
  }
  return result;
}

unint64_t sub_232EA3CF4()
{
  unint64_t result = qword_2687567E0;
  if (!qword_2687567E0)
  {
    sub_232EA3854(255, &qword_2687567D8, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687567E8, (void (*)(uint64_t))type metadata accessor for Attachment);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687567E0);
  }
  return result;
}

uint64_t sub_232EA3DC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ModelsR4.DocumentReferenceContext(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D70);
}

unint64_t sub_232EA3E44()
{
  unint64_t result = qword_268756800;
  if (!qword_268756800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756800);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.DocumentReferenceContent(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D60);
}

unint64_t sub_232EA3EB8()
{
  unint64_t result = qword_268756818;
  if (!qword_268756818)
  {
    sub_232EA3854(255, &qword_268756810, type metadata accessor for ModelsR4.DocumentReferenceContent, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756820, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756818);
  }
  return result;
}

unint64_t sub_232EA3F88()
{
  unint64_t result = qword_268756838;
  if (!qword_268756838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756838);
  }
  return result;
}

uint64_t sub_232EA3FDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    sub_232E96840(a2, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_232EA4058()
{
  unint64_t result = qword_268756848;
  if (!qword_268756848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756848);
  }
  return result;
}

unint64_t sub_232EA40AC()
{
  unint64_t result = qword_268756858;
  if (!qword_268756858)
  {
    sub_232EBDA84(255, &qword_268756850);
    sub_232EA412C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756858);
  }
  return result;
}

unint64_t sub_232EA412C()
{
  unint64_t result = qword_268756860;
  if (!qword_268756860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756860);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.ImmunizationPerformer(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756D90);
}

unint64_t sub_232EA41A0()
{
  unint64_t result = qword_268756870;
  if (!qword_268756870)
  {
    sub_232EA3854(255, &qword_268756868, type metadata accessor for ModelsR4.ImmunizationPerformer, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756878, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756870);
  }
  return result;
}

unint64_t sub_232EA4270()
{
  unint64_t result = qword_268756880;
  if (!qword_268756880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756880);
  }
  return result;
}

unint64_t sub_232EA42C4()
{
  unint64_t result = qword_268756890;
  if (!qword_268756890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756890);
  }
  return result;
}

unint64_t sub_232EA4318()
{
  unint64_t result = qword_2687568B0;
  if (!qword_2687568B0)
  {
    sub_232EA3854(255, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687568B8, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687568B0);
  }
  return result;
}

unint64_t sub_232EA43E8()
{
  unint64_t result = qword_2687568C8;
  if (!qword_2687568C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687568C8);
  }
  return result;
}

unint64_t sub_232EA443C()
{
  unint64_t result = qword_2687568D0;
  if (!qword_2687568D0)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2687568D0);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.HumanName(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756DB0);
}

unint64_t sub_232EA4498()
{
  unint64_t result = qword_2687568E0;
  if (!qword_2687568E0)
  {
    sub_232EA3854(255, &qword_2687568D8, type metadata accessor for ModelsR4.HumanName, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687568E8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687568E0);
  }
  return result;
}

unint64_t sub_232EA4568()
{
  unint64_t result = qword_2687568F8;
  if (!qword_2687568F8)
  {
    sub_232EBDA84(255, &qword_2687568F0);
    sub_232EA45E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687568F8);
  }
  return result;
}

unint64_t sub_232EA45E8()
{
  unint64_t result = qword_268756900;
  if (!qword_268756900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756900);
  }
  return result;
}

unint64_t sub_232EA463C()
{
  unint64_t result = qword_268756910;
  if (!qword_268756910)
  {
    sub_232EA3854(255, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756918, (void (*)(uint64_t))type metadata accessor for Identifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756910);
  }
  return result;
}

unint64_t sub_232EA470C()
{
  unint64_t result = qword_268756928;
  if (!qword_268756928)
  {
    sub_232EBDA84(255, &qword_268756920);
    sub_232EA478C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756928);
  }
  return result;
}

unint64_t sub_232EA478C()
{
  unint64_t result = qword_268756930;
  if (!qword_268756930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756930);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.PatientLink(uint64_t a1)
{
  return sub_232EA4800(a1, (uint64_t *)&unk_268756DC0);
}

uint64_t sub_232EA4800(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_232EA4838()
{
  unint64_t result = qword_268756940;
  if (!qword_268756940)
  {
    sub_232EA3854(255, &qword_268756938, type metadata accessor for ModelsR4.PatientLink, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756948, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756940);
  }
  return result;
}

uint64_t sub_232EA4908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_232E967F8(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_232EA49DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_232EA4AB8()
{
  uint64_t result = 0x656372756F736572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x54746E65746E6F63;
      break;
    case 2:
      uint64_t result = 1635017060;
      break;
    case 3:
      uint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232EA4B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F33FC8(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EA4B78(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_232EA4B84(uint64_t a1)
{
  unint64_t v2 = sub_232EA3644();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA4BC0(uint64_t a1)
{
  unint64_t v2 = sub_232EA3644();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Binary.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756950, (uint64_t (*)(void))sub_232EA3644, (uint64_t)&type metadata for ModelsR4.Binary.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v13 - v6;
  uint64_t v8 = v1[2];
  v13[5] = v1[3];
  v13[6] = v8;
  uint64_t v9 = v1[4];
  v13[3] = v1[5];
  v13[4] = v9;
  uint64_t v10 = v1[6];
  v13[1] = v1[7];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3644();
  sub_23309C480();
  char v17 = 0;
  uint64_t v11 = v13[7];
  sub_23309C170();
  if (!v11)
  {
    char v16 = 1;
    sub_23309C110();
    char v15 = 2;
    sub_23309C110();
    char v14 = 3;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Binary.hashValue.getter()
{
  return sub_23309C420();
}

uint64_t sub_232EA4E78()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232EA4EA8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232EA4ED8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsR4.Binary.init(from:)(a1, a2);
}

uint64_t sub_232EA4EF0(void *a1)
{
  return ModelsR4.Binary.encode(to:)(a1);
}

uint64_t sub_232EA4F08()
{
  return sub_23309C420();
}

uint64_t sub_232EA4F68()
{
  return sub_23309C420();
}

uint64_t ModelsR4.Bundle.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Bundle.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t sub_232EA504C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2330346AC(*a1, *a2);
}

uint64_t sub_232EA5058()
{
  return sub_23309C420();
}

uint64_t sub_232EA50DC()
{
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232EA514C()
{
  return sub_23309C420();
}

uint64_t sub_232EA51CC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_232EA522C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C72556C6C7566;
  if (*v1) {
    uint64_t v2 = 0x656372756F736572;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_232EA526C()
{
  if (*v0) {
    return 0x656372756F736572;
  }
  else {
    return 0x6C72556C6C7566;
  }
}

uint64_t sub_232EA52A8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_23309C010();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_232EA530C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_232EA5318(uint64_t a1)
{
  unint64_t v2 = sub_232EBCCC8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA5354(uint64_t a1)
{
  unint64_t v2 = sub_232EBCCC8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Bundle.BundleEntry.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  long long v33 = (char *)&v31 - v4;
  sub_232EBDC60(0, &qword_268756958, (uint64_t (*)(void))sub_232EBCCC8, (uint64_t)&type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v34 = *((void *)v5 - 1);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBCCC8();
  uint64_t v12 = v35;
  sub_23309C460();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = (uint64_t)v33;
  LOBYTE(v36) = 0;
  uint64_t v15 = (uint64_t)v11;
  *uint64_t v11 = sub_23309C040();
  v11[1] = v16;
  type metadata accessor for ModelsR4.ResourceProxy(0);
  LOBYTE(v36) = 1;
  sub_232E9B834((unint64_t *)&qword_268756968, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  sub_23309C080();
  sub_232EBCD8C(v13, (uint64_t)v11 + *(int *)(v9 + 20), &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  char v39 = 1;
  sub_232EBCE0C();
  uint64_t v35 = 0;
  sub_23309C080();
  char v17 = v6;
  uint64_t v18 = (uint64_t)a1;
  long long v31 = v8;
  long long v33 = v17;
  uint64_t v19 = v36;
  uint64_t v20 = v37;
  int v21 = v38;
  if (qword_268756398 != -1) {
    swift_once();
  }
  if (v21 == 255) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v19;
  }
  if (v21 == 255) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v20;
  }
  if (v21 == 255) {
    char v24 = 5;
  }
  else {
    char v24 = v21;
  }
  uint64_t v36 = v22;
  uint64_t v37 = v23;
  unsigned __int8 v38 = v24;
  sub_232EBCE60(v19, v20, v21);
  sub_232EBCEC8();
  uint64_t v25 = sub_23309AB80();
  uint64_t v26 = v32;
  uint64_t v27 = v25;
  uint64_t v35 = v28;
  sub_232EBCF1C(v19, v20, v21);
  sub_232EBCF1C(v19, v20, v21);
  (*(void (**)(char *, char *))(v34 + 8))(v31, v33);
  uint64_t v29 = (uint64_t *)(v15 + *(int *)(v9 + 24));
  uint64_t v30 = v35;
  *uint64_t v29 = v27;
  v29[1] = v30;
  sub_232EBDBF8(v15, v26, type metadata accessor for ModelsR4.Bundle.BundleEntry);
  __swift_destroy_boxed_opaque_existential_1(v18);
  return sub_232EA3DC4(v15, type metadata accessor for ModelsR4.Bundle.BundleEntry);
}

uint64_t ModelsR4.Bundle.BundleEntry.fullURL.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.BundleEntry.resource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAAB2C(type metadata accessor for ModelsR4.Bundle.BundleEntry, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, a1);
}

uint64_t ModelsR4.Bundle.BundleEntry.rawResourceData.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ModelsR4.Bundle.BundleEntry(0) + 24);
  uint64_t v2 = *(void *)v1;
  sub_232E9A9F4(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ModelsR4.Bundle.BundleEntry.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v15 - v8;
  if (*(void *)(v1 + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v10 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_232F371F4(v1 + *(int *)(v10 + 20), (uint64_t)v9, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C((uint64_t)v9, (uint64_t)v6, type metadata accessor for ModelsR4.ResourceProxy);
    sub_23309C3F0();
    ModelsR4.ResourceProxy.hash(into:)(a1);
    sub_232EA3DC4((uint64_t)v6, type metadata accessor for ModelsR4.ResourceProxy);
  }
  uint64_t v11 = (uint64_t *)(v1 + *(int *)(v10 + 24));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_232E9A9F4(*v11, v13);
  sub_23309B040();
  return sub_232E9AA4C(v12, v13);
}

uint64_t ModelsR4.Bundle.BundleEntry.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756980, (uint64_t (*)(void))sub_232EBCCC8, (uint64_t)&type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBCCC8();
  sub_23309C480();
  char v11 = 0;
  sub_23309C110();
  if (!v1)
  {
    type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
    char v10 = 1;
    type metadata accessor for ModelsR4.ResourceProxy(0);
    sub_232E9B834(&qword_268756988, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Bundle.BundleEntry.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t sub_232EA5DD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Bundle.BundleEntry.init(from:)(a1, a2);
}

uint64_t sub_232EA5DEC(void *a1)
{
  return ModelsR4.Bundle.BundleEntry.encode(to:)(a1);
}

uint64_t sub_232EA5E04(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t sub_232EA5E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t ModelsR4.Bundle.entry.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Bundle.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_23309C3F0();
    if (v4) {
      goto LABEL_3;
    }
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A24C(a1, v3);
  swift_bridgeObjectRelease();
  if (!v4) {
    return sub_23309C3F0();
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232EA5F74()
{
  uint64_t v1 = 0x7972746E65;
  if (*v0 != 1) {
    uint64_t v1 = 0x65676175676E616CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F736572;
  }
}

uint64_t sub_232EA5FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F341A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EA5FFC(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_232EA6008(uint64_t a1)
{
  unint64_t v2 = sub_232EA36D4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA6044(uint64_t a1)
{
  unint64_t v2 = sub_232EA36D4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Bundle.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756990, (uint64_t (*)(void))sub_232EA36D4, (uint64_t)&type metadata for ModelsR4.Bundle.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = v1[2];
  void v11[2] = v1[3];
  uint64_t v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA36D4();
  sub_23309C480();
  char v17 = 0;
  uint64_t v9 = v13;
  sub_23309C170();
  if (!v9)
  {
    uint64_t v14 = v12;
    char v16 = 1;
    sub_232EA3854(0, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232EBCF84();
    sub_23309C150();
    char v15 = 2;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Bundle.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A24C((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t sub_232EA639C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232EA63CC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsR4.Bundle.init(from:)(a1, a2);
}

uint64_t sub_232EA63E4(void *a1)
{
  return ModelsR4.Bundle.encode(to:)(a1);
}

uint64_t sub_232EA6404()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  sub_23309C3D0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_23309C3F0();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    sub_23309C3F0();
    return sub_23309C420();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E9A24C((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  return sub_23309C420();
}

uint64_t (*ModelsR4.Condition.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.Condition.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Condition.clinicalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.Condition.verificationStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.Condition.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.severity.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.Condition.code.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[15];
  uint64_t v3 = v1[16];
  uint64_t v4 = v1[17];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.Condition.bodySite.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.onsetDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA8158(type metadata accessor for ModelsR4.Condition, a1);
}

uint64_t ModelsR4.Condition.onsetPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAB714(type metadata accessor for ModelsR4.Condition, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.Condition.onsetString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.abatementDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 64), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.Condition.abatementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 68), a1, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsR4.Condition.abatementString.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.recordedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 76), a1, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.Condition.recorder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 80), a1, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.Condition.asserter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 84), a1, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.Condition.note.getter()
{
  type metadata accessor for ModelsR4.Condition(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.language.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v64 = (char *)&v60 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v63 = (char *)&v60 - v13;
  uint64_t v14 = type metadata accessor for Period();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v9);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v62 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v60 - v21;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v23 = v2[3];
  uint64_t v61 = v7;
  sub_23309C3F0();
  if (v23)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = v2[4];
  if (v24 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v24)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v24);
      uint64_t v25 = v24;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v25 = 0;
    }
    sub_232EA390C(v25);
  }
  uint64_t v26 = v2[6];
  if (v26 == 1)
  {
    sub_23309C3F0();
    goto LABEL_17;
  }
  uint64_t v27 = v2[5];
  uint64_t v28 = v2[7];
  sub_23309C3F0();
  if (!v26)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_13;
    }
LABEL_15:
    sub_23309C3F0();
    uint64_t v29 = v27;
    uint64_t v30 = v26;
    goto LABEL_16;
  }
  sub_23309C3F0();
  sub_232E967F8(v27, v26);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_15;
  }
LABEL_13:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = v27;
  uint64_t v30 = v26;
LABEL_16:
  sub_232E96840(v29, v30);
LABEL_17:
  uint64_t v31 = v2[9];
  if (v31 != 1)
  {
    uint64_t v33 = v2[8];
    uint64_t v34 = v2[10];
    sub_23309C3F0();
    if (v31)
    {
      sub_23309C3F0();
      sub_232E967F8(v33, v31);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v34)
      {
LABEL_22:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v34);
        swift_bridgeObjectRelease();
        uint64_t v35 = v33;
        uint64_t v36 = v31;
        goto LABEL_25;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v34) {
        goto LABEL_22;
      }
    }
    sub_23309C3F0();
    uint64_t v35 = v33;
    uint64_t v36 = v31;
LABEL_25:
    sub_232E96840(v35, v36);
    uint64_t v32 = v2[11];
    if (!v32) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  sub_23309C3F0();
  uint64_t v32 = v2[11];
  if (!v32)
  {
LABEL_19:
    sub_23309C3F0();
    goto LABEL_27;
  }
LABEL_26:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E978F0(a1, v32);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v37 = v2[13];
  if (v37 == 1)
  {
    sub_23309C3F0();
    goto LABEL_35;
  }
  uint64_t v38 = v2[12];
  uint64_t v39 = v2[14];
  sub_23309C3F0();
  if (!v37)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v39) {
      goto LABEL_31;
    }
LABEL_33:
    sub_23309C3F0();
    uint64_t v40 = v38;
    uint64_t v41 = v37;
    goto LABEL_34;
  }
  sub_23309C3F0();
  sub_232E967F8(v38, v37);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_33;
  }
LABEL_31:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = v38;
  uint64_t v41 = v37;
LABEL_34:
  sub_232E96840(v40, v41);
LABEL_35:
  uint64_t v42 = v2[16];
  if (v42 != 1)
  {
    uint64_t v44 = v2[15];
    uint64_t v45 = v2[17];
    sub_23309C3F0();
    if (v42)
    {
      sub_23309C3F0();
      sub_232E967F8(v44, v42);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v45)
      {
LABEL_40:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v45);
        swift_bridgeObjectRelease();
        uint64_t v46 = v44;
        uint64_t v47 = v42;
        goto LABEL_43;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v45) {
        goto LABEL_40;
      }
    }
    sub_23309C3F0();
    uint64_t v46 = v44;
    uint64_t v47 = v42;
LABEL_43:
    sub_232E96840(v46, v47);
    uint64_t v43 = v2[18];
    if (v43) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
  sub_23309C3F0();
  uint64_t v43 = v2[18];
  if (v43)
  {
LABEL_37:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E978F0(a1, v43);
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_44:
  sub_23309C3F0();
LABEL_45:
  long long v48 = (int *)type metadata accessor for ModelsR4.Condition(0);
  sub_232EB2E40();
  sub_232F371F4((uint64_t)v2 + v48[14], (uint64_t)v22, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  long long v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v49(v22, 1, v14) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C((uint64_t)v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232EA3DC4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Period);
  }
  if (*(void *)((char *)v2 + v48[15] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v50 = (uint64_t)v62;
  sub_232EB2E40();
  sub_232F371F4((uint64_t)v2 + v48[17], v50, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v49((char *)v50, 1, v14) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C(v50, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232EA3DC4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Period);
  }
  uint64_t v52 = v66;
  uint64_t v51 = v67;
  uint64_t v53 = (uint64_t)v64;
  if (*(void *)((char *)v2 + v48[18] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v54 = (uint64_t)v63;
  sub_232EB2E40();
  sub_232F371F4((uint64_t)v2 + v48[20], v54, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  long long v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v55(v54, 1, v51) == 1)
  {
    sub_23309C3F0();
    goto LABEL_65;
  }
  sub_232F3718C(v54, v53, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*(void *)(v53 + 8))
  {
    sub_23309C3F0();
    if (*(void *)(v53 + 24)) {
      goto LABEL_61;
    }
LABEL_63:
    sub_23309C3F0();
    goto LABEL_64;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*(void *)(v53 + 24)) {
    goto LABEL_63;
  }
LABEL_61:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_64:
  sub_232EB2488(a1);
  sub_232EA3DC4(v53, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_65:
  uint64_t v56 = v65;
  sub_232F371F4((uint64_t)v2 + v48[21], v65, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v55(v56, 1, v51) == 1)
  {
    sub_23309C3F0();
    goto LABEL_73;
  }
  uint64_t v57 = (uint64_t)v61;
  sub_232F3718C(v56, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*(void *)(v57 + 8))
  {
    sub_23309C3F0();
    if (*(void *)(v57 + 24)) {
      goto LABEL_69;
    }
LABEL_71:
    sub_23309C3F0();
    goto LABEL_72;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*(void *)(v57 + 24)) {
    goto LABEL_71;
  }
LABEL_69:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_72:
  sub_232EB2488(a1);
  sub_232EA3DC4(v57, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_73:
  uint64_t v58 = *(void *)((char *)v2 + v48[22]);
  sub_23309C3F0();
  if (v58)
  {
    swift_bridgeObjectRetain();
    sub_232E97280(a1, v58);
    swift_bridgeObjectRelease();
  }
  if (!*(void *)((char *)v2 + v48[23] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232EA7584(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 1635018093;
      break;
    case 3:
      unint64_t result = 0x6C6163696E696C63;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x79726F6765746163;
      break;
    case 6:
      unint64_t result = 0x7974697265766573;
      break;
    case 7:
      unint64_t result = 1701080931;
      break;
    case 8:
      unint64_t result = 0x6574695379646F62;
      break;
    case 9:
      unint64_t result = 0x7461447465736E6FLL;
      break;
    case 10:
      unint64_t result = 0x7265507465736E6FLL;
      break;
    case 11:
      unint64_t result = 0x7274537465736E6FLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 13:
    case 14:
      unint64_t result = 0x6E656D6574616261;
      break;
    case 15:
      unint64_t result = 0x646564726F636572;
      break;
    case 16:
      unint64_t result = 0x726564726F636572;
      break;
    case 17:
      unint64_t result = 0x7265747265737361;
      break;
    case 18:
      unint64_t result = 1702129518;
      break;
    case 19:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232EA7800()
{
  return sub_232EA7584(*v0);
}

uint64_t sub_232EA7808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F3430C(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EA7830(unsigned char *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_232EA783C(uint64_t a1)
{
  unint64_t v2 = sub_232EA38B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA7878(uint64_t a1)
{
  unint64_t v2 = sub_232EA38B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Condition.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_2687569A8, (uint64_t (*)(void))sub_232EA38B8, (uint64_t)&type metadata for ModelsR4.Condition.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA38B8();
  sub_23309C480();
  LOBYTE(v19) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v19) = 1;
    sub_23309C110();
    *(void *)&long long v19 = *(void *)(v3 + 32);
    char v21 = 2;
    sub_232E95F64();
    sub_23309C150();
    uint64_t v10 = *(void *)(v3 + 56);
    long long v19 = *(_OWORD *)(v3 + 40);
    uint64_t v20 = v10;
    char v21 = 3;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v11 = *(void *)(v3 + 80);
    long long v19 = *(_OWORD *)(v3 + 64);
    uint64_t v20 = v11;
    char v21 = 4;
    sub_23309C150();
    *(void *)&long long v19 = *(void *)(v3 + 88);
    char v21 = 5;
    sub_232EBDA84(0, &qword_268756758);
    sub_232EBD0B8();
    sub_23309C150();
    uint64_t v12 = *(void *)(v3 + 112);
    long long v19 = *(_OWORD *)(v3 + 96);
    uint64_t v20 = v12;
    char v21 = 6;
    sub_23309C150();
    uint64_t v13 = *(void *)(v3 + 136);
    long long v19 = *(_OWORD *)(v3 + 120);
    uint64_t v20 = v13;
    char v21 = 7;
    sub_23309C150();
    *(void *)&long long v19 = *(void *)(v3 + 144);
    char v21 = 8;
    sub_23309C150();
    uint64_t v14 = type metadata accessor for ModelsR4.Condition(0);
    LOBYTE(v19) = 9;
    type metadata accessor for FHIRDateTime();
    sub_232E9B834(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    uint64_t v18 = v14;
    LOBYTE(v19) = 10;
    uint64_t v15 = type metadata accessor for Period();
    sub_232E9B834(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    uint64_t v17 = v15;
    sub_23309C150();
    LOBYTE(v19) = 11;
    sub_23309C110();
    LOBYTE(v19) = 12;
    sub_23309C150();
    LOBYTE(v19) = 13;
    sub_23309C150();
    LOBYTE(v19) = 14;
    sub_23309C110();
    LOBYTE(v19) = 15;
    sub_23309C150();
    LOBYTE(v19) = 16;
    type metadata accessor for Reference();
    sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_23309C150();
    LOBYTE(v19) = 17;
    sub_23309C150();
    *(void *)&long long v19 = *(void *)(v3 + *(int *)(v18 + 88));
    char v21 = 18;
    sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232EBD138();
    sub_23309C150();
    LOBYTE(v19) = 19;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Condition.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_232EA7FD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Condition.init(from:)(a1, a2);
}

uint64_t sub_232EA7FEC(void *a1)
{
  return ModelsR4.Condition.encode(to:)(a1);
}

uint64_t sub_232EA8004(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_232EA8020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_232EA8038(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 92));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*ModelsR4.DiagnosticReport.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.DiagnosticReport.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DiagnosticReport.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DiagnosticReport.conclusion.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DiagnosticReport.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA90B0(type metadata accessor for ModelsR4.DiagnosticReport, a1);
}

uint64_t ModelsR4.DiagnosticReport.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAB630(type metadata accessor for ModelsR4.DiagnosticReport, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.DiagnosticReport.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA8158(type metadata accessor for ModelsR4.DiagnosticReport, a1);
}

uint64_t sub_232EA8158@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return sub_232F371F4(v2 + *(int *)(v4 + 52), a2, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.DiagnosticReport.performer.getter()
{
  return sub_232EAE278((void (*)(void))type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.presentedForm.getter()
{
  return sub_232EAE2CC((void (*)(void))type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.presentedForm.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ModelsR4.DiagnosticReport(0) + 60);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ModelsR4.DiagnosticReport.presentedForm.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DiagnosticReport.language.getter()
{
  return sub_232EA92A8(type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Period();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - v8;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v1[3])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v10 = v1[4];
    if (v10)
    {
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E96B88(a1, v10);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23309C3F0();
    uint64_t v10 = v1[4];
    if (v10) {
      goto LABEL_3;
    }
  }
  sub_23309C3F0();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1[7];
  if (v11)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E978F0(a1, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v1[10];
    if (v1[9]) {
      goto LABEL_8;
    }
LABEL_11:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  sub_23309C3F0();
  uint64_t v12 = v1[10];
  if (!v1[9]) {
    goto LABEL_11;
  }
LABEL_8:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_9:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E95864(a1, v12);
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
LABEL_12:
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRelease();
  if (v1[12])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v13 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
  sub_232EB2E40();
  sub_232F371F4((uint64_t)v1 + v13[12], (uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232EA3DC4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
  }
  sub_232EB2E40();
  uint64_t v14 = *(void *)((char *)v1 + v13[14]);
  sub_23309C3F0();
  if (v14)
  {
    swift_bridgeObjectRetain();
    sub_232E985C0(a1, v14);
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = *(void *)((char *)v1 + v13[15]);
  sub_23309C3F0();
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_232E98D70(a1, v15);
    swift_bridgeObjectRelease();
  }
  if (!*(void *)((char *)v1 + v13[16] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232EA878C(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 0x6F69736E65747865;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0x79726F6765746163;
      break;
    case 5:
      unint64_t result = 1701080931;
      break;
    case 6:
      unint64_t result = 0x6973756C636E6F63;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x7669746365666665;
      break;
    case 9:
      unint64_t result = 0x646575737369;
      break;
    case 10:
      unint64_t result = 0x656D726F66726570;
      break;
    case 11:
      unint64_t result = 0x65746E6573657270;
      break;
    case 12:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232EA8934()
{
  return sub_232EA878C(*v0);
}

uint64_t sub_232EA893C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F34B94(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EA8964(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_232EA8970(uint64_t a1)
{
  unint64_t v2 = sub_232EA3AC0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA89AC(uint64_t a1)
{
  unint64_t v2 = sub_232EA3AC0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.DiagnosticReport.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_2687569E8, (uint64_t (*)(void))sub_232EA3AC0, (uint64_t)&type metadata for ModelsR4.DiagnosticReport.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3AC0();
  sub_23309C480();
  LOBYTE(v16) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    sub_23309C110();
    *(void *)&long long v16 = *(void *)(v3 + 32);
    char v18 = 2;
    sub_232EA3854(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_232EBD208();
    sub_23309C150();
    LOBYTE(v16) = 3;
    sub_23309C170();
    *(void *)&long long v16 = *(void *)(v3 + 56);
    char v18 = 4;
    sub_232EBDA84(0, &qword_268756758);
    sub_232EBD0B8();
    sub_23309C150();
    uint64_t v10 = *(void *)(v3 + 80);
    long long v16 = *(_OWORD *)(v3 + 64);
    uint64_t v17 = v10;
    char v18 = 5;
    sub_232EBD064();
    sub_23309C1B0();
    LOBYTE(v16) = 6;
    sub_23309C110();
    uint64_t v11 = type metadata accessor for ModelsR4.DiagnosticReport(0);
    LOBYTE(v16) = 7;
    type metadata accessor for FHIRDateTime();
    sub_232E9B834(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    uint64_t v15 = v11;
    LOBYTE(v16) = 8;
    type metadata accessor for Period();
    sub_232E9B834(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
    uint64_t v12 = v15;
    LOBYTE(v16) = 9;
    sub_23309C150();
    *(void *)&long long v16 = *(void *)(v3 + *(int *)(v12 + 56));
    char v18 = 10;
    sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232EBD2D8();
    sub_23309C150();
    *(void *)&long long v16 = *(void *)(v3 + *(int *)(v15 + 60));
    char v18 = 11;
    sub_232EA3854(0, &qword_2687567D8, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D488]);
    sub_232EBD3A8();
    sub_23309C150();
    LOBYTE(v16) = 12;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DiagnosticReport.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t sub_232EA8F6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DiagnosticReport.init(from:)(a1, a2);
}

uint64_t sub_232EA8F84(void *a1)
{
  return ModelsR4.DiagnosticReport.encode(to:)(a1);
}

uint64_t sub_232EA8F9C(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t sub_232EA8FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t (*ModelsR4.DocumentReference.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.DocumentReference.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReference.docStatus.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DocumentReference.type.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[10];
  uint64_t v3 = v1[11];
  *a1 = v1[9];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA90B0(type metadata accessor for ModelsR4.DocumentReference, a1);
}

uint64_t sub_232EA90B0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  return sub_232F371F4(v2 + *(int *)(v4 + 44), a2, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.DocumentReference.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsR4.DocumentReference(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DocumentReference.author.getter()
{
  type metadata accessor for ModelsR4.DocumentReference(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.content.getter()
{
  type metadata accessor for ModelsR4.DocumentReference(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.content.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ModelsR4.DocumentReference(0) + 56);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ModelsR4.DocumentReference.content.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReference.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.DocumentReference(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 60), a1, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t ModelsR4.DocumentReference.language.getter()
{
  return sub_232EA92A8(type metadata accessor for ModelsR4.DocumentReference);
}

uint64_t sub_232EA92A8(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.DocumentReference.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v32 = type metadata accessor for Period();
  uint64_t v4 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v30 = (uint64_t)&v29 - v9;
  uint64_t v10 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, v7);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v29 - v15;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v17 = v2[3];
  uint64_t v29 = v6;
  uint64_t v31 = v4;
  sub_23309C3F0();
  if (v17)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v2[4];
  if (v18 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v18)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v18);
      uint64_t v19 = v18;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v19 = 0;
    }
    sub_232EA390C(v19);
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v2[8])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v20 = v2[11];
    if (v2[10]) {
      goto LABEL_11;
    }
LABEL_14:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  sub_23309C3F0();
  uint64_t v20 = v2[11];
  if (!v2[10]) {
    goto LABEL_14;
  }
LABEL_11:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_12:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E95864(a1, v20);
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
LABEL_15:
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v21 = v2[12];
  swift_bridgeObjectRetain();
  sub_232E978F0(a1, v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
  sub_232EB2E40();
  if (*(void *)((char *)v2 + v22[12] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v23 = *(void *)((char *)v2 + v22[13]);
  sub_23309C3F0();
  if (v23)
  {
    swift_bridgeObjectRetain();
    sub_232E985C0(a1, v23);
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = *(void *)((char *)v2 + v22[14]);
  swift_bridgeObjectRetain();
  sub_232E9879C(a1, v24);
  swift_bridgeObjectRelease();
  sub_232F371F4((uint64_t)v2 + v22[15], (uint64_t)v16, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C((uint64_t)v16, (uint64_t)v13, type metadata accessor for ModelsR4.DocumentReferenceContext);
    sub_23309C3F0();
    uint64_t v25 = *v13;
    if (*v13)
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E985C0(a1, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23309C3F0();
    }
    uint64_t v26 = v30;
    sub_232F371F4((uint64_t)v13 + *(int *)(v10 + 20), v30, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v26, 1, v32) == 1)
    {
      sub_23309C3F0();
    }
    else
    {
      uint64_t v27 = (uint64_t)v29;
      sub_232F3718C(v26, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Period);
      sub_23309C3F0();
      sub_232EB2E40();
      sub_232EB2E40();
      sub_232EA3DC4(v27, (uint64_t (*)(void))type metadata accessor for Period);
    }
    sub_232EA3DC4((uint64_t)v13, type metadata accessor for ModelsR4.DocumentReferenceContext);
  }
  if (!*(void *)((char *)v2 + v22[16] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232EA9A00(char a1)
{
  uint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 1635018093;
      break;
    case 3:
      uint64_t result = 0x737574617473;
      break;
    case 4:
      uint64_t result = 0x7574617453636F64;
      break;
    case 5:
      uint64_t result = 1701869940;
      break;
    case 6:
      uint64_t result = 0x79726F6765746163;
      break;
    case 7:
      uint64_t result = 1702125924;
      break;
    case 8:
      uint64_t result = 0x7470697263736564;
      break;
    case 9:
      uint64_t result = 0x726F68747561;
      break;
    case 10:
      uint64_t result = 0x746E65746E6F63;
      break;
    case 11:
      uint64_t result = 0x747865746E6F63;
      break;
    case 12:
      uint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232EA9B78()
{
  return sub_232EA9A00(*v0);
}

uint64_t sub_232EA9B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F35110(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232EA9BA8(uint64_t a1)
{
  unint64_t v2 = sub_232EA3E44();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EA9BE4(uint64_t a1)
{
  unint64_t v2 = sub_232EA3E44();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.DocumentReference.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756A18, (uint64_t (*)(void))sub_232EA3E44, (uint64_t)&type metadata for ModelsR4.DocumentReference.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3E44();
  sub_23309C480();
  LOBYTE(v13) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_23309C110();
    *(void *)&long long v13 = *(void *)(v3 + 32);
    char v15 = 2;
    sub_232E95F64();
    sub_23309C150();
    LOBYTE(v13) = 3;
    sub_23309C170();
    LOBYTE(v13) = 4;
    sub_23309C110();
    uint64_t v10 = *(void *)(v3 + 88);
    long long v13 = *(_OWORD *)(v3 + 72);
    uint64_t v14 = v10;
    char v15 = 5;
    sub_232EBD064();
    sub_23309C1B0();
    *(void *)&long long v13 = *(void *)(v3 + 96);
    char v15 = 6;
    sub_232EBDA84(0, &qword_268756758);
    sub_232EBD0B8();
    sub_23309C1B0();
    uint64_t v11 = type metadata accessor for ModelsR4.DocumentReference(0);
    LOBYTE(v13) = 7;
    type metadata accessor for FHIRDateTime();
    sub_232E9B834(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    LOBYTE(v13) = 8;
    sub_23309C110();
    *(void *)&long long v13 = *(void *)(v3 + *(int *)(v11 + 52));
    char v15 = 9;
    sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232EBD2D8();
    sub_23309C150();
    *(void *)&long long v13 = *(void *)(v3 + *(int *)(v11 + 56));
    char v15 = 10;
    sub_232EA3854(0, &qword_268756810, type metadata accessor for ModelsR4.DocumentReferenceContent, MEMORY[0x263F8D488]);
    sub_232EBD478();
    sub_23309C1B0();
    LOBYTE(v13) = 11;
    type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    sub_232E9B834(&qword_268756A30, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
    sub_23309C150();
    LOBYTE(v13) = 12;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReference.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_232EAA154@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReference.init(from:)(a1, a2);
}

uint64_t sub_232EAA16C(void *a1)
{
  return ModelsR4.DocumentReference.encode(to:)(a1);
}

uint64_t sub_232EAA184(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_232EAA1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_232EAA1B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.DocumentReferenceContent.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EBDBF8(v1, a1, (uint64_t (*)(void))type metadata accessor for Attachment);
}

uint64_t ModelsR4.DocumentReferenceContent.attachment.setter(uint64_t a1)
{
  return sub_232EBDB3C(a1, v1, (uint64_t (*)(void))type metadata accessor for Attachment);
}

uint64_t (*ModelsR4.DocumentReferenceContent.attachment.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReferenceContent.format.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ModelsR4.DocumentReferenceContent.hash(into:)(uint64_t a1)
{
  Attachment.hash(into:)();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
  uint64_t v4 = v3[1];
  if (v4 == 1) {
    return sub_23309C3F0();
  }
  uint64_t v6 = *v3;
  uint64_t v7 = v3[2];
  sub_23309C3F0();
  if (!v4)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_5;
    }
LABEL_7:
    sub_23309C3F0();
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    goto LABEL_8;
  }
  sub_23309C3F0();
  sub_232E967F8(v6, v4);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_7;
  }
LABEL_5:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = v6;
  uint64_t v9 = v4;
LABEL_8:
  return sub_232E96840(v8, v9);
}

uint64_t sub_232EAA40C()
{
  if (*v0) {
    return 0x74616D726F66;
  }
  else {
    return 0x656D686361747461;
  }
}

uint64_t sub_232EAA448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F35634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232EAA470(uint64_t a1)
{
  unint64_t v2 = sub_232EBD548();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAA4AC(uint64_t a1)
{
  unint64_t v2 = sub_232EBD548();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.DocumentReferenceContent.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756A38, (uint64_t (*)(void))sub_232EBD548, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContent.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD548();
  sub_23309C480();
  LOBYTE(v13) = 0;
  type metadata accessor for Attachment();
  sub_232E9B834(&qword_268756A10, (void (*)(uint64_t))type metadata accessor for Attachment);
  sub_23309C1B0();
  if (!v2)
  {
    uint64_t v10 = (long long *)(v3 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
    uint64_t v11 = *((void *)v10 + 2);
    long long v13 = *v10;
    uint64_t v14 = v11;
    char v15 = 1;
    sub_232EBD064();
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReferenceContent.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v21 = type metadata accessor for Attachment();
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EBDC60(0, &qword_268756A48, (uint64_t (*)(void))sub_232EBD548, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContent.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v23 = v5;
  uint64_t v20 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD548();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v11 = v8;
  uint64_t v12 = v20;
  LOBYTE(v24) = 0;
  sub_232E9B834(&qword_2687567E8, (void (*)(uint64_t))type metadata accessor for Attachment);
  uint64_t v13 = (uint64_t)v22;
  uint64_t v14 = v23;
  sub_23309C0E0();
  sub_232F3718C(v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Attachment);
  char v26 = 1;
  sub_232EA391C();
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = v25;
  long long v16 = &v10[*(int *)(v11 + 20)];
  *(_OWORD *)long long v16 = v24;
  *((void *)v16 + 2) = v15;
  sub_232EBDBF8((uint64_t)v10, v19, type metadata accessor for ModelsR4.DocumentReferenceContent);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_232EA3DC4((uint64_t)v10, type metadata accessor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_232EAAA88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReferenceContent.init(from:)(a1, a2);
}

uint64_t sub_232EAAAA0(void *a1)
{
  return ModelsR4.DocumentReferenceContent.encode(to:)(a1);
}

uint64_t sub_232EAAAB8(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t sub_232EAAAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContext.encounter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReferenceContext.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAAB2C(type metadata accessor for ModelsR4.DocumentReferenceContext, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t sub_232EAAB2C@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F371F4(v4 + *(int *)(v8 + 20), a4, a2, a3);
}

uint64_t ModelsR4.DocumentReferenceContext.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Period();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *v1;
  if (*v1)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E985C0(a1, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v11 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  sub_232F371F4((uint64_t)v1 + *(int *)(v11 + 20), (uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1) {
    return sub_23309C3F0();
  }
  sub_232F3718C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
  sub_23309C3F0();
  sub_232EB2E40();
  sub_232EB2E40();
  return sub_232EA3DC4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Period);
}

uint64_t sub_232EAADBC()
{
  if (*v0) {
    return 0x646F69726570;
  }
  else {
    return 0x65746E756F636E65;
  }
}

uint64_t sub_232EAADF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F3572C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232EAAE20(uint64_t a1)
{
  unint64_t v2 = sub_232EBD59C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAAE5C(uint64_t a1)
{
  unint64_t v2 = sub_232EBD59C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.DocumentReferenceContext.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756A50, (uint64_t (*)(void))sub_232EBD59C, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContext.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD59C();
  sub_23309C480();
  uint64_t v12 = *v3;
  v11[15] = 0;
  sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
  sub_232EBD2D8();
  sub_23309C150();
  if (!v2)
  {
    type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    v11[14] = 1;
    type metadata accessor for Period();
    sub_232E9B834(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReferenceContext.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContext.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v17 - v4;
  sub_232EBDC60(0, &qword_268756A60, (uint64_t (*)(void))sub_232EBD59C, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContext.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v20 = v6;
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD59C();
  uint64_t v19 = v8;
  uint64_t v12 = (uint64_t)v21;
  sub_23309C460();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v21 = a1;
  uint64_t v13 = v18;
  sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
  char v23 = 0;
  sub_232EA3C24();
  uint64_t v14 = v20;
  uint64_t v15 = v19;
  sub_23309C080();
  *uint64_t v11 = v24;
  type metadata accessor for Period();
  char v22 = 1;
  sub_232E9B834(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v14);
  sub_232EBCD8C((uint64_t)v5, (uint64_t)v11 + *(int *)(v9 + 20), &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232EBDBF8((uint64_t)v11, v17, type metadata accessor for ModelsR4.DocumentReferenceContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_232EA3DC4((uint64_t)v11, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t sub_232EAB4C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReferenceContext.init(from:)(a1, a2);
}

uint64_t sub_232EAB4DC(void *a1)
{
  return ModelsR4.DocumentReferenceContext.encode(to:)(a1);
}

uint64_t sub_232EAB4F4(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t sub_232EAB510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t (*ModelsR4.Immunization.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.Immunization.id.modify())()
{
  return nullsub_1;
}

void ModelsR4.Immunization.expirationDate.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 64);
  char v3 = *(unsigned char *)(v1 + 68);
  *(void *)a1 = *(void *)(v1 + 56);
  *(_DWORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 12) = v3;
}

uint64_t ModelsR4.Immunization.note.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.occurrenceDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAE1A4(type metadata accessor for ModelsR4.Immunization, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t ModelsR4.Immunization.protocolApplied.getter()
{
  type metadata accessor for ModelsR4.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.recorded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAB630(type metadata accessor for ModelsR4.Immunization, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t sub_232EAB630@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F371F4(v4 + *(int *)(v8 + 48), a4, a2, a3);
}

uint64_t ModelsR4.Immunization.vaccineCode.getter@<X0>(void *a1@<X8>)
{
  char v3 = (void *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 52));
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.manufacturer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAB714(type metadata accessor for ModelsR4.Immunization, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_232EAB714@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F371F4(v4 + *(int *)(v8 + 56), a4, a2, a3);
}

uint64_t ModelsR4.Immunization.primarySource.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 60));
}

uint64_t ModelsR4.Immunization.lotNumber.getter()
{
  return sub_232EA92A8(type metadata accessor for ModelsR4.Immunization);
}

uint64_t ModelsR4.Immunization.performer.getter()
{
  type metadata accessor for ModelsR4.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.isSubpotent.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 72));
}

uint64_t ModelsR4.Immunization.location.getter@<X0>(uint64_t *a1@<X8>)
{
  char v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 76));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return sub_232EBD5F0(v4, v5, v6);
}

uint64_t ModelsR4.Immunization.language.getter()
{
  return sub_232EAE410(type metadata accessor for ModelsR4.Immunization);
}

uint64_t ModelsR4.Immunization.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Reference();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v24 - v8;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 24))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v10 = *(void *)(v1 + 32);
  if (v10 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v10);
      uint64_t v11 = v10;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v11 = 0;
    }
    sub_232EA390C(v11);
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v1 + 68) & 1) == 0)
  {
    int v12 = *(_DWORD *)(v1 + 64);
    sub_23309C3F0();
    sub_23309C3E0();
    if ((v12 & 0x100) == 0) {
      sub_23309C3F0();
    }
    sub_23309C3F0();
    if ((v12 & 0x1000000) == 0) {
      sub_23309C3F0();
    }
  }
  sub_23309C3F0();
  uint64_t v13 = *(void *)(v1 + 72);
  sub_23309C3F0();
  if (v13)
  {
    swift_bridgeObjectRetain();
    sub_232E97280(a1, v13);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = type metadata accessor for ModelsR4.Immunization(0);
  sub_232EB2E40();
  uint64_t v15 = *(void *)(v1 + *(int *)(v14 + 44));
  sub_23309C3F0();
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_232E995C0(a1, v15);
    swift_bridgeObjectRelease();
  }
  sub_232EB2E40();
  uint64_t v16 = v1 + *(int *)(v14 + 52);
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = *(void *)(v16 + 16);
  v24[0] = v14;
  if (v17)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23309B800();
    swift_bridgeObjectRelease();
    if (v18)
    {
LABEL_21:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v18);
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_21;
    }
  }
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v19 = (int *)v24[0];
  swift_bridgeObjectRelease();
  sub_232F371F4(v1 + v19[14], (uint64_t)v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23309C3F0();
    goto LABEL_32;
  }
  sub_232F3718C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*((void *)v6 + 1))
  {
    sub_23309C3F0();
    if (*((void *)v6 + 3)) {
      goto LABEL_28;
    }
LABEL_30:
    sub_23309C3F0();
    goto LABEL_31;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*((void *)v6 + 3)) {
    goto LABEL_30;
  }
LABEL_28:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_31:
  sub_232EB2488(a1);
  sub_232EA3DC4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_32:
  if (*(unsigned char *)(v1 + v19[15]) != 2) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if (*(void *)(v1 + v19[16] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v20 = *(void *)(v1 + v19[17]);
  sub_23309C3F0();
  if (v20)
  {
    swift_bridgeObjectRetain();
    sub_232E99248(a1, v20);
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v1 + v19[18]) != 2) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  uint64_t v21 = v1 + v19[19];
  if (*(void *)v21 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    v24[1] = *(void *)v21;
    long long v22 = *(_OWORD *)(v21 + 24);
    long long v25 = *(_OWORD *)(v21 + 8);
    long long v26 = v22;
    long long v27 = *(_OWORD *)(v21 + 40);
    sub_23309C3F0();
    Location.hash(into:)(a1);
  }
  if (!*(void *)(v1 + v19[20] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232EABF98(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 1635018093;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0x6974617269707865;
      break;
    case 5:
      unint64_t result = 1702129518;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x6C6F636F746F7270;
      break;
    case 8:
      unint64_t result = 0x646564726F636572;
      break;
    case 9:
      unint64_t result = 0x43656E6963636176;
      break;
    case 10:
      unint64_t result = 0x74636166756E616DLL;
      break;
    case 11:
      unint64_t result = 0x537972616D697270;
      break;
    case 12:
      unint64_t result = 0x65626D754E746F6CLL;
      break;
    case 13:
      unint64_t result = 0x656D726F66726570;
      break;
    case 14:
      unint64_t result = 0x746F706275537369;
      break;
    case 15:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 16:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232EAC1C0()
{
  return sub_232EABF98(*v0);
}

uint64_t sub_232EAC1C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F35824(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EAC1F0(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_232EAC1FC(uint64_t a1)
{
  unint64_t v2 = sub_232EA3F88();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAC238(uint64_t a1)
{
  unint64_t v2 = sub_232EA3F88();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Immunization.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756A68, (uint64_t (*)(void))sub_232EA3F88, (uint64_t)&type metadata for ModelsR4.Immunization.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA3F88();
  sub_23309C480();
  LOBYTE(v19) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v19) = 1;
    sub_23309C110();
    *(void *)&long long v19 = *(void *)(v3 + 32);
    char v23 = 2;
    sub_232E95F64();
    sub_23309C150();
    LOBYTE(v19) = 3;
    sub_23309C170();
    int v10 = *(_DWORD *)(v3 + 64);
    char v11 = *(unsigned char *)(v3 + 68);
    *(void *)&long long v19 = *(void *)(v3 + 56);
    DWORD2(v19) = v10;
    BYTE12(v19) = v11;
    char v23 = 4;
    sub_232EBD66C();
    sub_23309C150();
    *(void *)&long long v19 = *(void *)(v3 + 72);
    char v23 = 5;
    sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232EBD138();
    sub_23309C150();
    int v12 = (int *)type metadata accessor for ModelsR4.Immunization(0);
    LOBYTE(v19) = 6;
    type metadata accessor for FHIRDateTime();
    sub_232E9B834(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    *(void *)&long long v19 = *(void *)(v3 + v12[11]);
    char v23 = 7;
    sub_232EBDA84(0, &qword_268756850);
    sub_232EBD6C0();
    sub_23309C150();
    LOBYTE(v19) = 8;
    sub_23309C150();
    uint64_t v13 = (long long *)(v3 + v12[13]);
    uint64_t v14 = *((void *)v13 + 2);
    long long v19 = *v13;
    *(void *)&long long v20 = v14;
    char v23 = 9;
    sub_232EBD064();
    sub_23309C1B0();
    LOBYTE(v19) = 10;
    type metadata accessor for Reference();
    sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
    sub_23309C150();
    LOBYTE(v19) = 11;
    sub_23309C120();
    LOBYTE(v19) = 12;
    sub_23309C110();
    *(void *)&long long v19 = *(void *)(v3 + v12[17]);
    char v23 = 13;
    sub_232EA3854(0, &qword_268756868, type metadata accessor for ModelsR4.ImmunizationPerformer, MEMORY[0x263F8D488]);
    sub_232EBD794();
    sub_23309C150();
    LOBYTE(v19) = 14;
    sub_23309C120();
    uint64_t v15 = (long long *)(v3 + v12[19]);
    uint64_t v16 = *((void *)v15 + 6);
    long long v17 = v15[1];
    long long v19 = *v15;
    long long v20 = v17;
    long long v21 = v15[2];
    uint64_t v22 = v16;
    char v23 = 15;
    sub_232EBD864();
    sub_23309C150();
    LOBYTE(v19) = 16;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Immunization.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.Immunization.hash(into:));
}

uint64_t sub_232EAC8C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Immunization.init(from:)(a1, a2);
}

uint64_t sub_232EAC8D8(void *a1)
{
  return ModelsR4.Immunization.encode(to:)(a1);
}

uint64_t sub_232EAC8F0(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.Immunization.hash(into:));
}

uint64_t sub_232EAC90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.Immunization.hash(into:));
}

uint64_t ModelsR4.ImmunizationProtocol.doseNumberPositiveInt.getter()
{
  return *(void *)v0;
}

uint64_t ModelsR4.ImmunizationProtocol.doseNumberString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.ImmunizationProtocol.seriesDosesPositiveInt.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t ModelsR4.ImmunizationProtocol.seriesDosesString.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.ImmunizationProtocol.targetedDisease.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.ImmunizationProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 24);
  int v5 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v7 = *(void *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 80);
  if (*(unsigned char *)(v2 + 8) == 1)
  {
    sub_23309C3F0();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3E0();
    if (v4)
    {
LABEL_3:
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  sub_23309C3F0();
  if (v5)
  {
LABEL_4:
    sub_23309C3F0();
    if (v6) {
      goto LABEL_5;
    }
LABEL_10:
    sub_23309C3F0();
    if (v7 == 1) {
      return sub_23309C3F0();
    }
    goto LABEL_11;
  }
LABEL_9:
  sub_23309C3F0();
  sub_23309C3E0();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_5:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v7 == 1) {
    return sub_23309C3F0();
  }
LABEL_11:
  sub_23309C3F0();
  if (!v7)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_13;
    }
LABEL_15:
    sub_23309C3F0();
    uint64_t v11 = v8;
    uint64_t v12 = v7;
    goto LABEL_16;
  }
  sub_23309C3F0();
  sub_232E967F8(v8, v7);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_15;
  }
LABEL_13:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
LABEL_16:
  return sub_232E96840(v11, v12);
}

unint64_t sub_232EACBFC(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x6465746567726174;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232EACCC0()
{
  return sub_232EACBFC(*v0);
}

uint64_t sub_232EACCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F35F90(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EACCF0(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_232EACCFC(uint64_t a1)
{
  unint64_t v2 = sub_232EBD8B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EACD38(uint64_t a1)
{
  unint64_t v2 = sub_232EBD8B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.ImmunizationProtocol.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756AA0, (uint64_t (*)(void))sub_232EBD8B8, (uint64_t)&type metadata for ModelsR4.ImmunizationProtocol.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v21 = v8;
  uint64_t v9 = *(void *)(v1 + 32);
  int v26 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v18 = *(void *)(v1 + 48);
  uint64_t v19 = v9;
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v14 = *(void *)(v1 + 64);
  uint64_t v15 = v11;
  uint64_t v16 = *(void *)(v1 + 80);
  uint64_t v17 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD8B8();
  sub_23309C480();
  LOBYTE(v23) = 0;
  uint64_t v12 = v22;
  sub_23309C140();
  if (!v12)
  {
    LOBYTE(v23) = 1;
    sub_23309C110();
    LOBYTE(v23) = 2;
    sub_23309C140();
    LOBYTE(v23) = 3;
    sub_23309C110();
    uint64_t v23 = v14;
    uint64_t v24 = v15;
    uint64_t v25 = v16;
    char v27 = 4;
    sub_232EBD064();
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.ImmunizationProtocol.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 80);
  v7[9] = *(void *)v0;
  char v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v10 = v2;
  char v11 = v3;
  long long v5 = *(_OWORD *)(v0 + 64);
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = v5;
  uint64_t v14 = v4;
  sub_23309C3D0();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_23309C420();
}

uint64_t ModelsR4.ImmunizationProtocol.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_232EBDC60(0, &qword_268756AB0, (uint64_t (*)(void))sub_232EBD8B8, (uint64_t)&type metadata for ModelsR4.ImmunizationProtocol.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v32 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v28 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD8B8();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  LOBYTE(v33) = 0;
  uint64_t v10 = sub_23309C070();
  char v12 = v11;
  LOBYTE(v33) = 1;
  uint64_t v13 = sub_23309C040();
  uint64_t v15 = v14;
  uint64_t v31 = v13;
  LOBYTE(v33) = 2;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_23309C070();
  int v36 = v17;
  uint64_t v30 = v16;
  LOBYTE(v33) = 3;
  uint64_t v18 = sub_23309C040();
  uint64_t v20 = v19;
  uint64_t v28 = v18;
  char v37 = 4;
  sub_232EA391C();
  uint64_t v29 = v20;
  swift_bridgeObjectRetain();
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v32);
  uint64_t v21 = v33;
  uint64_t v32 = v33;
  uint64_t v22 = v15;
  uint64_t v23 = v34;
  uint64_t v24 = v35;
  swift_bridgeObjectRetain();
  uint64_t v25 = v29;
  swift_bridgeObjectRetain();
  sub_232E967F8(v21, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v12 & 1;
  uint64_t v26 = v32;
  *(void *)(a2 + 16) = v31;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v30;
  *(unsigned char *)(a2 + 40) = v36 & 1;
  *(void *)(a2 + 48) = v28;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v26;
  *(void *)(a2 + 72) = v23;
  *(void *)(a2 + 80) = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_232E96840(v26, v23);
}

uint64_t sub_232EAD42C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ImmunizationProtocol.init(from:)(a1, a2);
}

uint64_t sub_232EAD444(void *a1)
{
  return ModelsR4.ImmunizationProtocol.encode(to:)(a1);
}

uint64_t sub_232EAD45C()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 80);
  v7[9] = *(void *)v0;
  char v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v10 = v2;
  char v11 = v3;
  long long v5 = *(_OWORD *)(v0 + 64);
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = v5;
  uint64_t v14 = v4;
  sub_23309C3D0();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_23309C420();
}

uint64_t sub_232EAD4E0()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 80);
  v7[9] = *(void *)v0;
  char v8 = v1;
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v10 = v2;
  char v11 = v3;
  long long v5 = *(_OWORD *)(v0 + 64);
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = v5;
  uint64_t v14 = v4;
  sub_23309C3D0();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_23309C420();
}

uint64_t ModelsR4.ImmunizationPerformer.actor.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232F371F4(v1, a1, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.ImmunizationPerformer.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_232F371F4(v2, (uint64_t)&v12 - v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
    return sub_23309C3F0();
  }
  sub_232F3718C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_23309C3F0();
  if (!*((void *)v7 + 1))
  {
    sub_23309C3F0();
    if (*((void *)v7 + 3)) {
      goto LABEL_5;
    }
LABEL_7:
    sub_23309C3F0();
    goto LABEL_8;
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!*((void *)v7 + 3)) {
    goto LABEL_7;
  }
LABEL_5:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
LABEL_8:
  sub_232EB2488(a1);
  return sub_232EA3DC4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Reference);
}

uint64_t sub_232EAD804()
{
  return 0x726F746361;
}

uint64_t sub_232EAD818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x726F746361 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_23309C220();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_232EAD8A8(uint64_t a1)
{
  unint64_t v2 = sub_232EBD90C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAD8E4(uint64_t a1)
{
  unint64_t v2 = sub_232EBD90C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.ImmunizationPerformer.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756AB8, (uint64_t (*)(void))sub_232EBD90C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD90C();
  sub_23309C480();
  type metadata accessor for Reference();
  sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
  sub_23309C150();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ModelsR4.ImmunizationPerformer.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t ModelsR4.ImmunizationPerformer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v19 = (char *)&v17 - v5;
  sub_232EBDC60(0, &qword_268756AC8, (uint64_t (*)(void))sub_232EBD90C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v7 = v6;
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for ModelsR4.ImmunizationPerformer(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD90C();
  sub_23309C460();
  if (!v2)
  {
    uint64_t v14 = v17;
    uint64_t v13 = v18;
    type metadata accessor for Reference();
    sub_232E9B834(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
    uint64_t v15 = (uint64_t)v19;
    sub_23309C080();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    sub_232EBCD8C(v15, (uint64_t)v12, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232F3718C((uint64_t)v12, v13, type metadata accessor for ModelsR4.ImmunizationPerformer);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_232EADDD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ImmunizationPerformer.init(from:)(a1, a2);
}

uint64_t sub_232EADDEC(void *a1)
{
  sub_232EBDC60(0, &qword_268756AB8, (uint64_t (*)(void))sub_232EBD90C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBD90C();
  sub_23309C480();
  type metadata accessor for Reference();
  sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
  sub_23309C150();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_232EADF98(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t sub_232EADFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t ModelsR4.Observation.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Observation.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Observation.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Observation.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V9ConditionV2idSSSgvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsR4.Observation.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Observation.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *a1 = v2;
  return sub_232EBD054(v2);
}

uint64_t ModelsR4.Observation.status.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Observation.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V16DiagnosticReportV4codeAA15CodeableConceptVvg_0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[9];
  uint64_t v3 = v1[10];
  *a1 = v1[8];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAE1A4(type metadata accessor for ModelsR4.Observation, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t sub_232EAE1A4@<X0>(uint64_t (*a1)(void)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1(0);
  return sub_232F371F4(v4 + *(int *)(v8 + 40), a4, a2, a3);
}

uint64_t ModelsR4.Observation.effectiveInstant.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA90B0(type metadata accessor for ModelsR4.Observation, a1);
}

uint64_t ModelsR4.Observation.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAB630(type metadata accessor for ModelsR4.Observation, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.Observation.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EA8158(type metadata accessor for ModelsR4.Observation, a1);
}

uint64_t ModelsR4.Observation.note.getter()
{
  return sub_232EAE278((void (*)(void))type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_232EAE278(void (*a1)(void))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.performer.getter()
{
  return sub_232EAE2CC((void (*)(void))type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_232EAE2CC(void (*a1)(void))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.valueString.getter()
{
  return sub_232EA92A8(type metadata accessor for ModelsR4.Observation);
}

uint64_t ModelsR4.Observation.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.Observation(0) + 68));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_232E967F8(v4, v5);
}

uint64_t ModelsR4.Observation.valueQuantity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ModelsR4.Observation(0);
  return sub_232F371F4(v1 + *(int *)(v3 + 72), a1, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ModelsR4.Observation.referenceRange.getter()
{
  type metadata accessor for ModelsR4.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.language.getter()
{
  return sub_232EAE410(type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_232EAE410(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 80));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.Observation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Quantity();
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v40 = (uint64_t)&v37 - v9;
  uint64_t v10 = type metadata accessor for Period();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v7);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v37 - v15;
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v17 = v2[3];
  char v37 = v6;
  sub_23309C3F0();
  if (v17)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v2[4];
  if (v18 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3F0();
    if (v18)
    {
      swift_bridgeObjectRetain();
      sub_232E95864(a1, v18);
      uint64_t v19 = v18;
    }
    else
    {
      sub_232EA390C(0);
      uint64_t v19 = 0;
    }
    sub_232EA390C(v19);
  }
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  uint64_t v20 = v2[7];
  if (v20)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E978F0(a1, v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = v2[10];
    if (v2[9]) {
      goto LABEL_11;
    }
LABEL_14:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  sub_23309C3F0();
  uint64_t v21 = v2[10];
  if (!v2[9]) {
    goto LABEL_14;
  }
LABEL_11:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_12:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E95864(a1, v21);
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
LABEL_15:
  sub_23309C3F0();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v22 = (int *)type metadata accessor for ModelsR4.Observation(0);
  sub_232EB2E40();
  sub_232EB2E40();
  sub_232F371F4((uint64_t)v2 + v22[12], (uint64_t)v16, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    sub_232F3718C((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Period);
    sub_23309C3F0();
    sub_232EB2E40();
    sub_232EB2E40();
    sub_232EA3DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Period);
  }
  sub_232EB2E40();
  uint64_t v23 = *(void *)((char *)v2 + v22[14]);
  sub_23309C3F0();
  if (v23)
  {
    swift_bridgeObjectRetain();
    sub_232E97280(a1, v23);
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = *(void *)((char *)v2 + v22[15]);
  sub_23309C3F0();
  if (v24)
  {
    swift_bridgeObjectRetain();
    sub_232E985C0(a1, v24);
    swift_bridgeObjectRelease();
  }
  if (*(void *)((char *)v2 + v22[16] + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v26 = v38;
  uint64_t v25 = v39;
  char v27 = (void *)((char *)v2 + v22[17]);
  uint64_t v28 = v27[1];
  if (v28 == 1)
  {
    sub_23309C3F0();
    goto LABEL_34;
  }
  uint64_t v29 = *v27;
  uint64_t v30 = v27[2];
  sub_23309C3F0();
  if (!v28)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    if (v30) {
      goto LABEL_30;
    }
LABEL_32:
    sub_23309C3F0();
    uint64_t v31 = v29;
    uint64_t v32 = v28;
    goto LABEL_33;
  }
  sub_23309C3F0();
  sub_232E967F8(v29, v28);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_32;
  }
LABEL_30:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E95864(a1, v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = v29;
  uint64_t v32 = v28;
LABEL_33:
  sub_232E96840(v31, v32);
LABEL_34:
  uint64_t v33 = v40;
  sub_232F371F4((uint64_t)v2 + v22[18], v40, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v33, 1, v25) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v34 = (uint64_t)v37;
    sub_232F3718C(v33, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232EA3DC4(v34, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v35 = *(void *)((char *)v2 + v22[19]);
  sub_23309C3F0();
  if (v35)
  {
    swift_bridgeObjectRetain();
    sub_232E9980C(a1, v35);
    swift_bridgeObjectRelease();
  }
  if (!*(void *)((char *)v2 + v22[20] + 8)) {
    return sub_23309C3F0();
  }
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

unint64_t sub_232EAEC70(char a1)
{
  unint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      unint64_t result = 25705;
      break;
    case 2:
      unint64_t result = 1635018093;
      break;
    case 3:
      unint64_t result = 0x737574617473;
      break;
    case 4:
      unint64_t result = 0x79726F6765746163;
      break;
    case 5:
      unint64_t result = 1701080931;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x7669746365666665;
      break;
    case 9:
      unint64_t result = 0x646575737369;
      break;
    case 10:
      unint64_t result = 1702129518;
      break;
    case 11:
      unint64_t result = 0x656D726F66726570;
      break;
    case 12:
      unint64_t result = 0x72745365756C6176;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0x61755165756C6176;
      break;
    case 15:
      unint64_t result = 0x636E657265666572;
      break;
    case 16:
      unint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_232EAEE88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_232EAEE9C()
{
  return sub_23309C3E0();
}

unint64_t sub_232EAEEC8()
{
  return sub_232EAEC70(*v0);
}

uint64_t sub_232EAEED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F361B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232EAEEF8(uint64_t a1)
{
  unint64_t v2 = sub_232EA42C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAEF34(uint64_t a1)
{
  unint64_t v2 = sub_232EA42C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Observation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756AD0, (uint64_t (*)(void))sub_232EA42C4, (uint64_t)&type metadata for ModelsR4.Observation.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EA42C4();
  sub_23309C480();
  LOBYTE(v16) = 0;
  sub_23309C170();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    sub_23309C110();
    *(void *)&long long v16 = *(void *)(v3 + 32);
    char v18 = 2;
    sub_232E95F64();
    sub_23309C150();
    LOBYTE(v16) = 3;
    sub_23309C170();
    *(void *)&long long v16 = *(void *)(v3 + 56);
    char v18 = 4;
    sub_232EBDA84(0, &qword_268756758);
    sub_232EBD0B8();
    sub_23309C150();
    uint64_t v10 = *(void *)(v3 + 80);
    long long v16 = *(_OWORD *)(v3 + 64);
    uint64_t v17 = v10;
    char v18 = 5;
    sub_232EBD064();
    sub_23309C1B0();
    uint64_t v15 = (int *)type metadata accessor for ModelsR4.Observation(0);
    LOBYTE(v16) = 6;
    type metadata accessor for FHIRDateTime();
    sub_232E9B834(&qword_2687569C0, (void (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_23309C150();
    LOBYTE(v16) = 7;
    sub_23309C150();
    uint64_t v14 = v3 + v15[12];
    LOBYTE(v16) = 8;
    type metadata accessor for Period();
    sub_232E9B834(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
    LOBYTE(v16) = 9;
    sub_23309C150();
    *(void *)&long long v16 = *(void *)(v3 + v15[14]);
    char v18 = 10;
    sub_232EA3854(0, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232EBD138();
    sub_23309C150();
    *(void *)&long long v16 = *(void *)(v3 + v15[15]);
    char v18 = 11;
    sub_232EA3854(0, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232EBD2D8();
    sub_23309C150();
    LOBYTE(v16) = 12;
    sub_23309C110();
    uint64_t v11 = (long long *)(v3 + v15[17]);
    uint64_t v12 = *((void *)v11 + 2);
    long long v16 = *v11;
    uint64_t v17 = v12;
    char v18 = 13;
    sub_23309C150();
    LOBYTE(v16) = 14;
    type metadata accessor for Quantity();
    sub_232E9B834(&qword_268756AD8, (void (*)(uint64_t))type metadata accessor for Quantity);
    sub_23309C150();
    *(void *)&long long v16 = *(void *)(v3 + v15[19]);
    char v18 = 15;
    sub_232EA3854(0, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
    sub_232EBD960();
    sub_23309C150();
    LOBYTE(v16) = 16;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Observation.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_232EAF658()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232EAF688@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Observation.init(from:)(a1, a2);
}

uint64_t sub_232EAF6A0(void *a1)
{
  return ModelsR4.Observation.encode(to:)(a1);
}

uint64_t sub_232EAF6B8(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_232EAF6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_232EAF6EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 80));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.HumanName.prefix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.family.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.HumanName.given.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.suffix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EAE1A4(type metadata accessor for ModelsR4.HumanName, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.HumanName.hash(into:)()
{
  uint64_t v19 = type metadata accessor for Period();
  uint64_t v1 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - v5;
  if (v0[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v7 = v0[2];
    if (v7) {
      goto LABEL_3;
    }
LABEL_21:
    sub_23309C3F0();
    if (v0[4]) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
  sub_23309C3F0();
  uint64_t v7 = v0[2];
  if (!v7) {
    goto LABEL_21;
  }
LABEL_3:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  if (v0[4])
  {
LABEL_8:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    uint64_t v10 = v0[5];
    if (v10) {
      goto LABEL_9;
    }
LABEL_23:
    sub_23309C3F0();
    uint64_t v13 = v0[6];
    if (v13) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_22:
  sub_23309C3F0();
  uint64_t v10 = v0[5];
  if (!v10) {
    goto LABEL_23;
  }
LABEL_9:
  sub_23309C3F0();
  sub_23309C3E0();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v10 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v0[6];
  if (v13)
  {
LABEL_14:
    sub_23309C3F0();
    sub_23309C3E0();
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = v13 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23309B800();
        swift_bridgeObjectRelease();
        v15 += 16;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
    }
    if (v0[8]) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_24:
  sub_23309C3F0();
  if (v0[8])
  {
LABEL_19:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_25:
  sub_23309C3F0();
LABEL_26:
  uint64_t v16 = type metadata accessor for ModelsR4.HumanName(0);
  sub_232F371F4((uint64_t)v0 + *(int *)(v16 + 40), (uint64_t)v6, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v19) == 1) {
    return sub_23309C3F0();
  }
  sub_232F3718C((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Period);
  sub_23309C3F0();
  sub_232EB2E40();
  sub_232EB2E40();
  return sub_232EA3DC4((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Period);
}

uint64_t sub_232EAFC00()
{
  uint64_t result = 6648693;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x786966657270;
      break;
    case 2:
      uint64_t result = 0x796C696D6166;
      break;
    case 3:
      uint64_t result = 0x6E65766967;
      break;
    case 4:
      uint64_t result = 0x786966667573;
      break;
    case 5:
      uint64_t result = 1954047348;
      break;
    case 6:
      uint64_t result = 0x646F69726570;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232EAFCC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F368C0(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EAFCE8(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_232EAFCF4(uint64_t a1)
{
  unint64_t v2 = sub_232EBDA30();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EAFD30(uint64_t a1)
{
  unint64_t v2 = sub_232EBDA30();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.HumanName.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_232EBDC60(0, &qword_268756AF0, (uint64_t (*)(void))sub_232EBDA30, (uint64_t)&type metadata for ModelsR4.HumanName.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBDA30();
  sub_23309C480();
  LOBYTE(v13) = 0;
  sub_23309C110();
  if (!v2)
  {
    uint64_t v13 = v3[2];
    char v12 = 1;
    sub_232EBDA84(0, (unint64_t *)&qword_268756B00);
    sub_232EBDACC(&qword_268756B08);
    sub_23309C150();
    LOBYTE(v13) = 2;
    sub_23309C110();
    uint64_t v13 = v3[5];
    char v12 = 3;
    sub_23309C150();
    uint64_t v13 = v3[6];
    char v12 = 4;
    sub_23309C150();
    LOBYTE(v13) = 5;
    sub_23309C110();
    type metadata accessor for ModelsR4.HumanName(0);
    LOBYTE(v13) = 6;
    type metadata accessor for Period();
    sub_232E9B834(&qword_2687569C8, (void (*)(uint64_t))type metadata accessor for Period);
    sub_23309C150();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.HumanName.hashValue.getter()
{
  return sub_232EB00B4((void (*)(unsigned char *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_232EB00B4(void (*a1)(unsigned char *))
{
  sub_23309C3D0();
  a1(v3);
  return sub_23309C420();
}

uint64_t ModelsR4.HumanName.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v24 - v4;
  sub_232EBDC60(0, &qword_268756B10, (uint64_t (*)(void))sub_232EBDA30, (uint64_t)&type metadata for ModelsR4.HumanName.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for ModelsR4.HumanName(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[3];
  char v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_232EBDA30();
  uint64_t v13 = v8;
  uint64_t v14 = v28;
  sub_23309C460();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  uint64_t v15 = v9;
  uint64_t v28 = v5;
  uint64_t v17 = v25;
  uint64_t v16 = v26;
  LOBYTE(v30) = 0;
  uint64_t v18 = v13;
  *uint64_t v11 = sub_23309C040();
  v11[1] = v19;
  sub_232EBDA84(0, (unint64_t *)&qword_268756B00);
  char v29 = 1;
  sub_232EBDACC(&qword_268756B18);
  sub_23309C080();
  void v11[2] = v30;
  LOBYTE(v30) = 2;
  void v11[3] = sub_23309C040();
  v11[4] = v20;
  char v29 = 3;
  sub_23309C080();
  v11[5] = v30;
  char v29 = 4;
  sub_23309C080();
  v11[6] = v30;
  LOBYTE(v30) = 5;
  v11[7] = sub_23309C040();
  v11[8] = v21;
  type metadata accessor for Period();
  LOBYTE(v30) = 6;
  sub_232E9B834(&qword_268756770, (void (*)(uint64_t))type metadata accessor for Period);
  uint64_t v22 = (uint64_t)v28;
  sub_23309C080();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v16);
  sub_232EBCD8C(v22, (uint64_t)v11 + *(int *)(v15 + 40), &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232EBDBF8((uint64_t)v11, v24, type metadata accessor for ModelsR4.HumanName);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_232EA3DC4((uint64_t)v11, type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_232EB06C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.HumanName.init(from:)(a1, a2);
}

uint64_t sub_232EB06DC(void *a1)
{
  return ModelsR4.HumanName.encode(to:)(a1);
}

uint64_t sub_232EB06F4(uint64_t a1, uint64_t a2)
{
  return sub_232EB070C(a1, a2, (void (*)(unsigned char *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_232EB070C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  sub_23309C3D0();
  a3(v5);
  return sub_23309C420();
}

uint64_t sub_232EB0758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EB0770(a1, a2, a3, (void (*)(unsigned char *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_232EB0770(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  sub_23309C3D0();
  a4(v6);
  return sub_23309C420();
}

uint64_t ModelsR4.PatientLink.other.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_232EBDBF8(v1, a1, (uint64_t (*)(void))type metadata accessor for Reference);
}

uint64_t ModelsR4.PatientLink.other.setter(uint64_t a1)
{
  return sub_232EBDB3C(a1, v1, (uint64_t (*)(void))type metadata accessor for Reference);
}

uint64_t (*ModelsR4.PatientLink.other.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.PatientLink.type.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.PatientLink.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ModelsR4.PatientLink.type.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.PatientLink.hash(into:)(uint64_t a1)
{
  Reference.hash(into:)(a1);
  type metadata accessor for ModelsR4.PatientLink(0);
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t static ModelsR4.PatientLink.== infix(_:_:)(void *a1, void *a2)
{
  if (!_s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20);
  uint64_t v5 = *(void *)((char *)a1 + v4);
  uint64_t v6 = *(void *)((char *)a1 + v4 + 8);
  uint64_t v7 = (void *)((char *)a2 + v4);
  if (v5 == *v7 && v6 == v7[1]) {
    return 1;
  }
  return sub_23309C220();
}

BOOL sub_232EB09F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_232EB0A10()
{
  return sub_23309C420();
}

uint64_t sub_232EB0A58()
{
  return sub_23309C420();
}

uint64_t sub_232EB0A9C()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 0x726568746FLL;
  }
}

uint64_t sub_232EB0ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F36B60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_232EB0AF4(uint64_t a1)
{
  unint64_t v2 = sub_232EBDBA4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EB0B30(uint64_t a1)
{
  unint64_t v2 = sub_232EBDBA4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.PatientLink.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756B20, (uint64_t (*)(void))sub_232EBDBA4, (uint64_t)&type metadata for ModelsR4.PatientLink.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBDBA4();
  sub_23309C480();
  char v11 = 0;
  type metadata accessor for Reference();
  sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
  sub_23309C1B0();
  if (!v1)
  {
    type metadata accessor for ModelsR4.PatientLink(0);
    char v10 = 1;
    sub_23309C170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.PatientLink.hashValue.getter()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  type metadata accessor for ModelsR4.PatientLink(0);
  sub_23309B800();
  return sub_23309C420();
}

uint64_t ModelsR4.PatientLink.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for Reference();
  MEMORY[0x270FA5388](v24);
  uint64_t v25 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EBDC60(0, &qword_268756B30, (uint64_t (*)(void))sub_232EBDBA4, (uint64_t)&type metadata for ModelsR4.PatientLink.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v26 = v5;
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = type metadata accessor for ModelsR4.PatientLink(0);
  MEMORY[0x270FA5388](v8);
  char v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_232EBDBA4();
  sub_23309C460();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v21 = v8;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v23;
  char v28 = 0;
  sub_232E9B834(&qword_268756778, (void (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v13 = (uint64_t)v25;
  uint64_t v14 = v26;
  sub_23309C0E0();
  sub_232F3718C(v13, v11, (uint64_t (*)(void))type metadata accessor for Reference);
  char v27 = 1;
  uint64_t v15 = sub_23309C0A0();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v18 = v22;
  uint64_t v19 = (uint64_t *)(v11 + *(int *)(v21 + 20));
  *uint64_t v19 = v15;
  v19[1] = v17;
  sub_232EBDBF8(v11, v18, type metadata accessor for ModelsR4.PatientLink);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_232EA3DC4(v11, type metadata accessor for ModelsR4.PatientLink);
}

uint64_t sub_232EB1114@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.PatientLink.init(from:)(a1, a2);
}

uint64_t sub_232EB112C(void *a1)
{
  return ModelsR4.PatientLink.encode(to:)(a1);
}

uint64_t sub_232EB1144()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  sub_23309B800();
  return sub_23309C420();
}

uint64_t sub_232EB119C(uint64_t a1)
{
  Reference.hash(into:)(a1);
  return sub_23309B800();
}

uint64_t sub_232EB11EC()
{
  sub_23309C3D0();
  Reference.hash(into:)((uint64_t)v1);
  sub_23309B800();
  return sub_23309C420();
}

uint64_t sub_232EB1240(void *a1, void *a2, uint64_t a3)
{
  if (!static Reference.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)((char *)a1 + v6);
  uint64_t v8 = *(void *)((char *)a1 + v6 + 8);
  uint64_t v9 = (void *)((char *)a2 + v6);
  if (v7 == *v9 && v8 == v9[1]) {
    return 1;
  }
  return sub_23309C220();
}

uint64_t ModelsR4.Patient.resourceType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.resourceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.id.modify())()
{
  return nullsub_1;
}

void ModelsR4.Patient.birthDate.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 40);
  char v3 = *(unsigned char *)(v1 + 44);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 12) = v3;
}

uint64_t ModelsR4.Patient.gender.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.gender.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.gender.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.name.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.telecom.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.address.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.maritalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[12];
  uint64_t v3 = v1[13];
  uint64_t v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_232E967F8(v2, v3);
}

uint64_t ModelsR4.Patient.link.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.link.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 120) = a1;
  return result;
}

uint64_t (*ModelsR4.Patient.link.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ModelsR4.HumanName(0);
  uint64_t v43 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v41 = *(void *)(v1 + 16);
  v39[1] = *(void *)(v1 + 32);
  int v46 = *(_DWORD *)(v1 + 40);
  int v45 = *(unsigned __int8 *)(v1 + 44);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v42 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v50 = *(void *)(v1 + 72);
  uint64_t v51 = v8;
  uint64_t v47 = *(void *)(v1 + 80);
  uint64_t v52 = *(void *)(v1 + 88);
  uint64_t v9 = *(void *)(v1 + 104);
  uint64_t v40 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 120);
  uint64_t v48 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 128);
  uint64_t v44 = *(void *)(v1 + 136);
  uint64_t v49 = *(void *)(v1 + 144);
  swift_bridgeObjectRetain();
  sub_23309B800();
  swift_bridgeObjectRelease();
  sub_23309C3F0();
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v11;
  uint64_t v13 = v10;
  uint64_t v14 = v9;
  uint64_t v15 = v52;
  uint64_t v16 = v7;
  int v17 = v46;
  if (v45)
  {
    uint64_t v18 = v48;
  }
  else
  {
    sub_23309C3F0();
    sub_23309C3E0();
    if ((v17 & 0x100) == 0) {
      sub_23309C3F0();
    }
    uint64_t v18 = v48;
    sub_23309C3F0();
    if ((v17 & 0x1000000) == 0) {
      sub_23309C3F0();
    }
  }
  sub_23309C3F0();
  sub_23309C3F0();
  if (v16)
  {
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v51;
  sub_23309C3E0();
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v21 = v19 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    uint64_t v22 = *(void *)(v43 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_232EBDBF8(v21, (uint64_t)v5, type metadata accessor for ModelsR4.HumanName);
      ModelsR4.HumanName.hash(into:)();
      sub_232EA3DC4((uint64_t)v5, type metadata accessor for ModelsR4.HumanName);
      v21 += v22;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v15 = v52;
  }
  uint64_t v23 = v50;
  if (v50)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E984B8(a1, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v24 = v49;
  uint64_t v25 = v47;
  if (v47)
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E9800C(a1, v25);
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_20;
    }
LABEL_31:
    sub_23309C3F0();
    if (v14 == 1) {
      goto LABEL_26;
    }
LABEL_32:
    sub_23309C3F0();
    if (v14)
    {
      sub_23309C3F0();
      uint64_t v38 = v40;
      sub_232E967F8(v40, v14);
      swift_bridgeObjectRetain();
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_34;
      }
    }
    else
    {
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      uint64_t v38 = v40;
      if (v18)
      {
LABEL_34:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(a1, v18);
        swift_bridgeObjectRelease();
        sub_232E96840(v38, v14);
        if (v13) {
          goto LABEL_38;
        }
        goto LABEL_27;
      }
    }
    sub_23309C3F0();
    sub_232E96840(v38, v14);
    if (v13) {
      goto LABEL_38;
    }
LABEL_27:
    sub_23309C3F0();
    if (!v12) {
      goto LABEL_28;
    }
LABEL_39:
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_232E96B88(a1, v12);
    swift_bridgeObjectRelease();
    if (!v24) {
      return sub_23309C3F0();
    }
    goto LABEL_40;
  }
  sub_23309C3F0();
  if (!v15) {
    goto LABEL_31;
  }
LABEL_20:
  sub_23309C3F0();
  uint64_t v26 = *(void *)(v15 + 16);
  sub_23309C3E0();
  if (v26)
  {
    swift_bridgeObjectRetain();
    long long v27 = *(_OWORD *)(v15 + 144);
    long long v59 = *(_OWORD *)(v15 + 128);
    long long v60 = v27;
    uint64_t v61 = *(void *)(v15 + 160);
    long long v28 = *(_OWORD *)(v15 + 80);
    long long v55 = *(_OWORD *)(v15 + 64);
    long long v56 = v28;
    long long v29 = *(_OWORD *)(v15 + 112);
    long long v57 = *(_OWORD *)(v15 + 96);
    long long v58 = v29;
    long long v30 = *(_OWORD *)(v15 + 48);
    long long v53 = *(_OWORD *)(v15 + 32);
    long long v54 = v30;
    Address.hash(into:)();
    uint64_t v31 = v26 - 1;
    if (v31)
    {
      uint64_t v32 = (long long *)(v15 + 168);
      do
      {
        long long v33 = v32[7];
        long long v59 = v32[6];
        long long v60 = v33;
        uint64_t v61 = *((void *)v32 + 16);
        long long v34 = v32[3];
        long long v55 = v32[2];
        long long v56 = v34;
        long long v35 = v32[5];
        long long v57 = v32[4];
        long long v58 = v35;
        long long v36 = v32[1];
        long long v53 = *v32;
        long long v54 = v36;
        Address.hash(into:)();
        uint64_t v32 = (long long *)((char *)v32 + 136);
        --v31;
      }
      while (v31);
    }
    swift_bridgeObjectRelease();
  }
  if (v14 != 1) {
    goto LABEL_32;
  }
LABEL_26:
  sub_23309C3F0();
  if (!v13) {
    goto LABEL_27;
  }
LABEL_38:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_232E97E14(a1, v13);
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_39;
  }
LABEL_28:
  sub_23309C3F0();
  if (!v24) {
    return sub_23309C3F0();
  }
LABEL_40:
  sub_23309C3F0();
  swift_bridgeObjectRetain();
  sub_23309B800();
  return swift_bridgeObjectRelease();
}

uint64_t sub_232EB1B60(char a1)
{
  uint64_t result = 0x656372756F736572;
  switch(a1)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 0x7461446874726962;
      break;
    case 3:
      uint64_t result = 0x7265646E6567;
      break;
    case 4:
      uint64_t result = 1701667182;
      break;
    case 5:
      uint64_t result = 0x6D6F63656C6574;
      break;
    case 6:
      uint64_t result = 0x696669746E656469;
      break;
    case 7:
      uint64_t result = 0x73736572646461;
      break;
    case 8:
      uint64_t result = 0x536C61746972616DLL;
      break;
    case 9:
      uint64_t result = 1802398060;
      break;
    case 10:
      uint64_t result = 0x6F69736E65747865;
      break;
    case 11:
      uint64_t result = 0x65676175676E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_232EB1CD8()
{
  return sub_232EB1B60(*v0);
}

uint64_t sub_232EB1CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_232F36C3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_232EB1D08(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_232EB1D14(uint64_t a1)
{
  unint64_t v2 = sub_232EA43E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_232EB1D50(uint64_t a1)
{
  unint64_t v2 = sub_232EA43E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ModelsR4.Patient.encode(to:)(void *a1)
{
  sub_232EBDC60(0, &qword_268756B38, (uint64_t (*)(void))sub_232EA43E8, (uint64_t)&type metadata for ModelsR4.Patient.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v23 - v5;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v37 = *(void *)(v1 + 24);
  uint64_t v38 = v7;
  uint64_t v36 = *(void *)(v1 + 32);
  int v43 = *(_DWORD *)(v1 + 40);
  int v35 = *(unsigned __int8 *)(v1 + 44);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v33 = *(void *)(v1 + 56);
  uint64_t v34 = v8;
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v31 = *(void *)(v1 + 72);
  uint64_t v32 = v9;
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v29 = *(void *)(v1 + 88);
  uint64_t v30 = v10;
  uint64_t v11 = *(void *)(v1 + 104);
  uint64_t v26 = *(void *)(v1 + 96);
  uint64_t v27 = v11;
  uint64_t v28 = *(void *)(v1 + 112);
  uint64_t v12 = *(void *)(v1 + 120);
  uint64_t v24 = *(void *)(v1 + 128);
  uint64_t v25 = v12;
  uint64_t v13 = *(void *)(v1 + 136);
  v23[0] = *(void *)(v1 + 144);
  v23[1] = v13;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1;
  uint64_t v17 = v16;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  sub_232EA43E8();
  sub_23309C480();
  LOBYTE(v40) = 0;
  uint64_t v18 = v39;
  sub_23309C170();
  if (!v18)
  {
    char v19 = v35;
    int v20 = v43;
    uint64_t v21 = v36;
    LOBYTE(v40) = 1;
    sub_23309C110();
    uint64_t v40 = v21;
    LODWORD(v41) = v20;
    BYTE4(v41) = v19;
    char v44 = 2;
    sub_232EBD66C();
    sub_23309C150();
    uint64_t v39 = v4;
    LOBYTE(v40) = 3;
    sub_23309C110();
    uint64_t v40 = v32;
    char v44 = 4;
    sub_232EA3854(0, &qword_2687568D8, type metadata accessor for ModelsR4.HumanName, MEMORY[0x263F8D488]);
    sub_232EBDCC8();
    sub_23309C1B0();
    uint64_t v40 = v31;
    char v44 = 5;
    sub_232EBDA84(0, &qword_2687568F0);
    sub_232EBDD98();
    sub_23309C150();
    uint64_t v40 = v30;
    char v44 = 6;
    sub_232EA3854(0, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
    sub_232EBDE6C();
    sub_23309C150();
    uint64_t v40 = v29;
    char v44 = 7;
    sub_232EBDA84(0, &qword_268756920);
    sub_232EBDF3C();
    sub_23309C150();
    uint64_t v40 = v26;
    uint64_t v41 = v27;
    uint64_t v42 = v28;
    char v44 = 8;
    sub_232EBD064();
    sub_23309C150();
    uint64_t v40 = v25;
    char v44 = 9;
    sub_232EA3854(0, &qword_268756938, type metadata accessor for ModelsR4.PatientLink, MEMORY[0x263F8D488]);
    sub_232EBE010();
    sub_23309C150();
    uint64_t v40 = v24;
    char v44 = 10;
    sub_232EA3854(0, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_232EBD208();
    sub_23309C150();
    LOBYTE(v40) = 11;
    sub_23309C110();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v17);
}

uint64_t ModelsR4.Patient.hashValue.getter()
{
  sub_23309C3D0();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232EB23A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Patient.init(from:)(a1, a2);
}

uint64_t sub_232EB23BC(void *a1)
{
  return ModelsR4.Patient.encode(to:)(a1);
}

uint64_t sub_232EB23D4()
{
  sub_23309C3D0();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232EB2418()
{
  sub_23309C3D0();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_23309C420();
}

uint64_t sub_232EB2454()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_232EB2488(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v2 = sub_23309AF80();
  uint64_t v31 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = type metadata accessor for Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v5);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v29 - v14;
  sub_232F371F4(v1, (uint64_t)&v29 - v14, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1) {
    return sub_23309C3F0();
  }
  uint64_t v30 = v8;
  uint64_t v17 = v31;
  sub_232F3718C((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Identifier);
  uint64_t v18 = v32;
  sub_23309C3F0();
  if (v12[1])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  uint64_t v19 = v2;
  int v20 = v4;
  uint64_t v21 = v12[3];
  if (v21 != 1)
  {
    uint64_t v22 = v12[2];
    uint64_t v23 = v18;
    uint64_t v24 = v12[4];
    sub_23309C3F0();
    if (v21)
    {
      sub_23309C3F0();
      sub_232E967F8(v22, v21);
      swift_bridgeObjectRetain();
      uint64_t v25 = v23;
      sub_23309B800();
      swift_bridgeObjectRelease();
      if (v24)
      {
LABEL_10:
        sub_23309C3F0();
        swift_bridgeObjectRetain();
        sub_232E95864(v25, v24);
        swift_bridgeObjectRelease();
        uint64_t v26 = v22;
        uint64_t v27 = v21;
LABEL_13:
        sub_232E96840(v26, v27);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v25 = v23;
      sub_23309C3F0();
      swift_bridgeObjectRetain();
      if (v24) {
        goto LABEL_10;
      }
    }
    sub_23309C3F0();
    uint64_t v26 = v22;
    uint64_t v27 = v21;
    goto LABEL_13;
  }
  sub_23309C3F0();
LABEL_14:
  uint64_t v28 = (uint64_t)v30;
  sub_232F371F4((uint64_t)v12 + *(int *)(v9 + 24), (uint64_t)v30, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v28, 1, v19) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v20, v28, v19);
    sub_23309C3F0();
    sub_232E9B834(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v19);
  }
  if (*(void *)((char *)v12 + *(int *)(v9 + 28) + 8))
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  return sub_232EA3DC4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Identifier);
}

uint64_t sub_232EB29B4()
{
  uint64_t v1 = sub_23309AF80();
  uint64_t v18 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v17 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = (int *)type metadata accessor for Coding();
  uint64_t v8 = *((void *)v7 - 1);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v3);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v17 - v12;
  sub_232F371F4(v0, (uint64_t)&v17 - v12, &qword_268756F50, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v13, 1, v7) == 1) {
    return sub_23309C3F0();
  }
  sub_232F3718C((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Coding);
  sub_23309C3F0();
  sub_232F371F4((uint64_t)v10, (uint64_t)v6, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8]);
  uint64_t v15 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v6, 1, v1) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v16 = v17;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v6, v1);
    sub_23309C3F0();
    sub_232E9B834(&qword_268756568, MEMORY[0x263F06EA8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v1);
  }
  if (*(void *)&v10[v7[5] + 8])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*(void *)&v10[v7[6] + 8])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  if (*(void *)&v10[v7[7] + 8])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  return sub_232EA3DC4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Coding);
}

uint64_t sub_232EB2E40()
{
  uint64_t v1 = sub_23309B300();
  uint64_t v31 = *(void *)(v1 - 8);
  uint64_t v32 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v28 - v6;
  uint64_t v8 = type metadata accessor for FHIRDateTime();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v4);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v28 - v13;
  sub_232F371F4(v0, (uint64_t)v28 - v13, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1) {
    return sub_23309C3F0();
  }
  uint64_t v29 = v7;
  uint64_t v30 = v3;
  sub_232F3718C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
  sub_23309C3F0();
  sub_23309C3F0();
  char v16 = v11[17];
  char v17 = v11[19];
  sub_23309C3E0();
  if ((v16 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  if ((v17 & 1) == 0) {
    sub_23309C3F0();
  }
  sub_23309C3F0();
  uint64_t v18 = *((void *)v11 + 7);
  if (v18 == 1) {
    goto LABEL_10;
  }
  uint64_t v20 = *((void *)v11 + 3);
  uint64_t v19 = *((void *)v11 + 4);
  unint64_t v21 = *((void *)v11 + 5);
  v28[0] = *((void *)v11 + 6);
  v28[1] = HIDWORD(v21);
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309C3F0();
  sub_23309BC90();
  if (!v18)
  {
LABEL_10:
    sub_23309C3F0();
  }
  else
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    uint64_t v22 = v28[0];
    sub_23309B800();
    sub_232E9AAA4(v20, v19, v21, v22, v18);
  }
  uint64_t v23 = v31;
  uint64_t v24 = (uint64_t)v29;
  sub_232F371F4((uint64_t)&v11[*(int *)(v8 + 28)], (uint64_t)v29, &qword_268756590, MEMORY[0x263F079C8]);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v32);
  uint64_t v26 = v30;
  if (v25 == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v27 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v30, v24, v32);
    sub_23309C3F0();
    sub_232E9B834(&qword_268756598, MEMORY[0x263F079C8]);
    sub_23309B690();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v27);
  }
  if (*(void *)&v11[*(int *)(v8 + 32) + 8])
  {
    sub_23309C3F0();
    swift_bridgeObjectRetain();
    sub_23309B800();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23309C3F0();
  }
  return sub_232EA3DC4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
}

uint64_t sub_232EB3350(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for Quantity();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v26 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v25 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for Range();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232EA3854(0, &qword_268756570, (uint64_t (*)(uint64_t))type metadata accessor for Range, v5);
  MEMORY[0x270FA5388](v15 - 8);
  char v17 = (char *)&v24 - v16;
  sub_232F371F4(v1, (uint64_t)&v24 - v16, &qword_268756570, (uint64_t (*)(uint64_t))type metadata accessor for Range);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1) {
    return sub_23309C3F0();
  }
  sub_232F3718C((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Range);
  sub_23309C3F0();
  sub_232F371F4((uint64_t)v14, (uint64_t)v10, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v19(v10, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v20 = (uint64_t)v10;
    uint64_t v21 = v26;
    sub_232F3718C(v20, v26, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232EA3DC4(v21, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  uint64_t v22 = v25;
  sub_232F371F4((uint64_t)&v14[*(int *)(v11 + 20)], v25, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if (v19((char *)v22, 1, v2) == 1)
  {
    sub_23309C3F0();
  }
  else
  {
    uint64_t v23 = v26;
    sub_232F3718C(v22, v26, (uint64_t (*)(void))type metadata accessor for Quantity);
    sub_23309C3F0();
    Quantity.hash(into:)();
    sub_232EA3DC4(v23, (uint64_t (*)(void))type metadata accessor for Quantity);
  }
  return sub_232EA3DC4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Range);
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V6BinaryV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[7];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v11 = a2[7];
  uint64_t v16 = a2[6];
  uint64_t v17 = a1[6];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_23309C220(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v4 != v7)
      {
        char v14 = sub_23309C220();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9) {
        return 0;
      }
      if (v3 != v10 || v5 != v9)
      {
        char v15 = sub_23309C220();
        uint64_t result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (v11 && (v17 == v16 && v6 == v11 || (sub_23309C220() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v11)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V9HumanNameV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v40 - v10;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  char v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v40 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v22) {
    return 0;
  }
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_23309C220(), BOOL result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v25 = (void *)a1[2];
    uint64_t v26 = (void *)a2[2];
    if (v25)
    {
      if (!v26 || (sub_232E90100(v25, v26) & 1) == 0) {
        return 0;
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v27 = a1[4];
    uint64_t v28 = a2[4];
    if (v27)
    {
      if (!v28) {
        return 0;
      }
      if (a1[3] != a2[3] || v27 != v28)
      {
        char v29 = sub_23309C220();
        BOOL result = 0;
        if ((v29 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v28)
    {
      return 0;
    }
    uint64_t v30 = (void *)a1[5];
    uint64_t v31 = (void *)a2[5];
    if (v30)
    {
      if (!v31 || (sub_232E90100(v30, v31) & 1) == 0) {
        return 0;
      }
    }
    else if (v31)
    {
      return 0;
    }
    uint64_t v32 = (void *)a1[6];
    uint64_t v33 = (void *)a2[6];
    if (v32)
    {
      if (!v33 || (sub_232E90100(v32, v33) & 1) == 0) {
        return 0;
      }
    }
    else if (v33)
    {
      return 0;
    }
    uint64_t v34 = a1[8];
    uint64_t v35 = a2[8];
    if (v34)
    {
      if (!v35) {
        return 0;
      }
      if (a1[7] != a2[7] || v34 != v35)
      {
        char v36 = sub_23309C220();
        BOOL result = 0;
        if ((v36 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v35)
    {
      return 0;
    }
    uint64_t v41 = type metadata accessor for ModelsR4.HumanName(0);
    sub_232F371F4((uint64_t)a1 + *(int *)(v41 + 40), (uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F371F4((uint64_t)a2 + *(int *)(v41 + 40), (uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    uint64_t v37 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_232F371F4((uint64_t)v20, (uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232F371F4((uint64_t)v18, v37, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v38((uint64_t)v11, 1, v4) == 1)
    {
      sub_232EBCD1C((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232EBCD1C((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      if (v38(v37, 1, v4) == 1)
      {
        sub_232EBCD1C((uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        return 1;
      }
      goto LABEL_42;
    }
    sub_232F371F4((uint64_t)v11, (uint64_t)v15, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v38(v37, 1, v4) == 1)
    {
      sub_232EBCD1C((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232EBCD1C((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_232EA3DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Period);
LABEL_42:
      sub_232F37130((uint64_t)v11, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 0;
    }
    sub_232F3718C(v37, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Period);
    char v39 = static Period.== infix(_:_:)(v15, v7);
    sub_232EA3DC4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Period);
    sub_232EBCD1C((uint64_t)v18, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232EBCD1C((uint64_t)v20, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232EA3DC4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Period);
    sub_232EBCD1C((uint64_t)v11, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return (v39 & 1) != 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V7PatientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 44);
  uint64_t v48 = *(void *)(a1 + 48);
  uint64_t v50 = *(void *)(a1 + 56);
  uint64_t v46 = *(void *)(a1 + 64);
  uint64_t v44 = *(void *)(a1 + 72);
  uint64_t v42 = *(void *)(a1 + 80);
  uint64_t v39 = *(void *)(a1 + 96);
  uint64_t v40 = *(void *)(a1 + 88);
  uint64_t v37 = *(void *)(a1 + 104);
  uint64_t v35 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v30 = *(void *)(a1 + 128);
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v28 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  int v10 = *(_DWORD *)(a2 + 40);
  char v11 = *(unsigned char *)(a2 + 44);
  uint64_t v47 = *(void *)(a2 + 48);
  uint64_t v49 = *(void *)(a2 + 56);
  uint64_t v45 = *(void *)(a2 + 64);
  uint64_t v43 = *(void *)(a2 + 72);
  uint64_t v41 = *(void *)(a2 + 80);
  uint64_t v38 = *(void *)(a2 + 88);
  uint64_t v36 = *(void *)(a2 + 104);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v34 = *(void *)(a2 + 112);
  uint64_t v31 = *(void *)(a2 + 120);
  uint64_t v29 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 136);
  uint64_t v27 = *(void *)(a2 + 144);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v12 = sub_23309C220(), BOOL result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7) {
        return 0;
      }
      if (v2 != v8 || v4 != v7)
      {
        char v14 = sub_23309C220();
        BOOL result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v6)
    {
      if ((v11 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v54 = v3;
      LODWORD(v55) = v5;
      BYTE4(v55) = 0;
      if (v11) {
        return 0;
      }
      uint64_t v51 = v9;
      LOWORD(v52) = v10 & 0x1FF;
      BYTE2(v52) = BYTE2(v10);
      BYTE3(v52) = HIBYTE(v10) & 1;
      if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v54, (uint64_t)&v51) & 1) == 0) {
        return 0;
      }
    }
    if (v50)
    {
      if (!v49) {
        return 0;
      }
      if (v48 != v47 || v50 != v49)
      {
        char v15 = sub_23309C220();
        BOOL result = 0;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v49)
    {
      return 0;
    }
    if ((sub_232E901C8(v46, v45) & 1) == 0) {
      return 0;
    }
    if (v44)
    {
      if (!v43 || (sub_232E903B8(v44, v43) & 1) == 0) {
        return 0;
      }
    }
    else if (v43)
    {
      return 0;
    }
    if (v42)
    {
      if (!v41) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v16 = swift_bridgeObjectRetain();
      char v17 = sub_232E904A8(v16, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        return 0;
      }
    }
    else if (v41)
    {
      return 0;
    }
    if (v40)
    {
      uint64_t v18 = v39;
      if (!v38 || !sub_232E904FC(v40, v38)) {
        return 0;
      }
    }
    else
    {
      uint64_t v18 = v39;
      if (v38) {
        return 0;
      }
    }
    if (v37 == 1)
    {
      uint64_t v19 = v36;
      if (v36 == 1)
      {
LABEL_48:
        if (v32)
        {
          if (!v31) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v21 = swift_bridgeObjectRetain();
          char v22 = sub_232E905D8(v21, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0) {
            return 0;
          }
        }
        else if (v31)
        {
          return 0;
        }
        if (v30)
        {
          if (!v29) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v23 = swift_bridgeObjectRetain();
          char v24 = sub_232E8FFD0(v23, v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0) {
            return 0;
          }
        }
        else if (v29)
        {
          return 0;
        }
        if (v28) {
          return v27 && (v26 == v25 && v28 == v27 || (sub_23309C220() & 1) != 0);
        }
        return !v27;
      }
    }
    else
    {
      uint64_t v54 = v18;
      uint64_t v55 = v37;
      uint64_t v56 = v35;
      if (v36 != 1)
      {
        uint64_t v51 = v33;
        uint64_t v52 = v36;
        uint64_t v53 = v34;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v20 = static CodeableConcept.== infix(_:_:)(&v54, &v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232E96840(v18, v37);
        if ((v20 & 1) == 0) {
          return 0;
        }
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = 1;
    }
    sub_232E967F8(v33, v19);
    sub_232E96840(v18, v37);
    sub_232E96840(v33, v19);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V6BundleV0F5EntryV2eeoiySbAG_AGtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, &qword_2687565B0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v34 - v10;
  sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  char v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v34 - v17;
  MEMORY[0x270FA5388](v16);
  char v20 = (char *)&v34 - v19;
  uint64_t v21 = a1[1];
  uint64_t v22 = a2[1];
  if (!v21)
  {
    if (v22) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  if (!v22) {
    goto LABEL_14;
  }
  if (*a1 == *a2 && v21 == v22 || (char v23 = sub_23309C220(), v24 = 0, (v23 & 1) != 0))
  {
LABEL_8:
    uint64_t v39 = v15;
    uint64_t v35 = v7;
    uint64_t v25 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
    uint64_t v26 = *(int *)(v25 + 20);
    uint64_t v37 = a1;
    sub_232F371F4((uint64_t)a1 + v26, (uint64_t)v20, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v36 = v25;
    uint64_t v27 = *(int *)(v25 + 20);
    uint64_t v38 = a2;
    sub_232F371F4((uint64_t)a2 + v27, (uint64_t)v18, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_232F371F4((uint64_t)v20, (uint64_t)v11, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232F371F4((uint64_t)v18, v28, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v29((uint64_t)v11, 1, v4) == 1)
    {
      sub_232EBCD1C((uint64_t)v18, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      sub_232EBCD1C((uint64_t)v20, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      if (v29(v28, 1, v4) == 1)
      {
        sub_232EBCD1C((uint64_t)v11, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_17:
        char v24 = sub_232FFE1E4(*(void *)((char *)v37 + *(int *)(v36 + 24)), *(void *)((char *)v37 + *(int *)(v36 + 24) + 8), *(void *)((char *)v38 + *(int *)(v36 + 24)), *(void *)((char *)v38 + *(int *)(v36 + 24) + 8));
        return v24 & 1;
      }
      goto LABEL_13;
    }
    uint64_t v30 = (uint64_t)v39;
    sub_232F371F4((uint64_t)v11, (uint64_t)v39, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    if (v29(v28, 1, v4) == 1)
    {
      sub_232EBCD1C((uint64_t)v18, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      sub_232EBCD1C((uint64_t)v20, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      sub_232EA3DC4(v30, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_13:
      sub_232F37130((uint64_t)v11, &qword_2687565B0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
      goto LABEL_14;
    }
    uint64_t v32 = (uint64_t)v35;
    sub_232F3718C(v28, (uint64_t)v35, type metadata accessor for ModelsR4.ResourceProxy);
    char v33 = _s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0(v30, v32);
    sub_232EA3DC4(v32, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232EBCD1C((uint64_t)v18, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232EBCD1C((uint64_t)v20, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232EA3DC4(v30, type metadata accessor for ModelsR4.ResourceProxy);
    sub_232EBCD1C((uint64_t)v11, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy);
    if (v33) {
      goto LABEL_17;
    }
LABEL_14:
    char v24 = 0;
  }
  return v24 & 1;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContextV2eeoiySbAE_AEtFZ_0(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v32 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v31 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - v8;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = *a2;
  if (*a1)
  {
    if (!v18) {
      return 0;
    }
    uint64_t v30 = v15;
    swift_bridgeObjectRetain();
    uint64_t v19 = swift_bridgeObjectRetain();
    char v20 = sub_232E90BE8(v19, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v30 = v15;
    if (v18) {
      return 0;
    }
  }
  uint64_t v21 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  sub_232F371F4((uint64_t)a1 + *(int *)(v21 + 20), (uint64_t)v17, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F371F4((uint64_t)a2 + *(int *)(v21 + 20), (uint64_t)v14, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_232F371F4((uint64_t)v17, (uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232F371F4((uint64_t)v14, v22, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  char v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v23((uint64_t)v9, 1, v4) == 1)
  {
    sub_232EBCD1C((uint64_t)v14, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232EBCD1C((uint64_t)v17, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v23(v22, 1, v4) == 1)
    {
      sub_232EBCD1C((uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 1;
    }
    goto LABEL_11;
  }
  uint64_t v24 = v30;
  sub_232F371F4((uint64_t)v9, v30, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v23(v22, 1, v4) == 1)
  {
    sub_232EBCD1C((uint64_t)v14, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232EBCD1C((uint64_t)v17, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_232EA3DC4(v24, (uint64_t (*)(void))type metadata accessor for Period);
LABEL_11:
    sub_232F37130((uint64_t)v9, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return 0;
  }
  uint64_t v25 = v24;
  uint64_t v26 = v31;
  sub_232F3718C(v22, v31, (uint64_t (*)(void))type metadata accessor for Period);
  char v27 = static Period.== infix(_:_:)(v25, v26);
  sub_232EA3DC4(v26, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232EBCD1C((uint64_t)v14, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232EBCD1C((uint64_t)v17, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_232EA3DC4(v25, (uint64_t (*)(void))type metadata accessor for Period);
  sub_232EBCD1C((uint64_t)v9, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  return (v27 & 1) != 0;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContentV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((static Attachment.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v7 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a1 + v4 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = (uint64_t *)(a2 + v4);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v9[2];
  if (v6 == 1)
  {
    if (v10 == 1) {
      return 1;
    }
    goto LABEL_7;
  }
  v16[0] = v7;
  v16[1] = v6;
  v16[2] = v8;
  if (v10 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_7:
    sub_232E967F8(v11, v10);
    sub_232E96840(v7, v6);
    sub_232E96840(v11, v10);
    return 0;
  }
  v15[0] = v11;
  v15[1] = v10;
  v15[2] = v12;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v13 = static CodeableConcept.== infix(_:_:)(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_232E96840(v7, v6);
  return (v13 & 1) != 0;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V21ImmunizationPerformerV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for Reference();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v25 = (void **)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232F37274(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - v8;
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  char v13 = (void **)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v25 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v25 - v17;
  sub_232F371F4(a1, (uint64_t)&v25 - v17, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232F371F4(v26, (uint64_t)v16, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_232F371F4((uint64_t)v18, (uint64_t)v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232F371F4((uint64_t)v16, v19, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  char v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    sub_232EBCD1C((uint64_t)v16, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232EBCD1C((uint64_t)v18, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    if (v20(v19, 1, v3) == 1)
    {
      sub_232EBCD1C((uint64_t)v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      return 1;
    }
    goto LABEL_6;
  }
  sub_232F371F4((uint64_t)v9, (uint64_t)v13, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v20(v19, 1, v3) == 1)
  {
    sub_232EBCD1C((uint64_t)v16, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232EBCD1C((uint64_t)v18, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_232EA3DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Reference);
LABEL_6:
    sub_232F37130((uint64_t)v9, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    return 0;
  }
  uint64_t v21 = v19;
  uint64_t v22 = v25;
  sub_232F3718C(v21, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Reference);
  BOOL v23 = static Reference.== infix(_:_:)(v13, v22);
  sub_232EA3DC4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232EBCD1C((uint64_t)v16, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232EBCD1C((uint64_t)v18, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_232EA3DC4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Reference);
  sub_232EBCD1C((uint64_t)v9, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  return v23;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V20ImmunizationProtocolV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  int v16 = *(unsigned __int8 *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v19 = *(void *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 80);
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v22 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v22 = 1;
    }
    if (v22) {
      return 0;
    }
  }
  if (!v6)
  {
    if (v14) {
      return 0;
    }
    goto LABEL_15;
  }
  if (!v14) {
    return 0;
  }
  if (v5 == *(void *)(a2 + 16) && v6 == v14) {
    goto LABEL_15;
  }
  uint64_t v41 = v12;
  uint64_t v42 = v11;
  uint64_t v39 = v13;
  uint64_t v40 = *(void *)(a2 + 72);
  uint64_t v23 = *(void *)(a2 + 80);
  uint64_t v24 = *(void *)(a2 + 64);
  char v25 = sub_23309C220();
  uint64_t v20 = v24;
  uint64_t v13 = v39;
  uint64_t v19 = v40;
  uint64_t v21 = v23;
  uint64_t v12 = v41;
  uint64_t v11 = v42;
  char v26 = v25;
  BOOL result = 0;
  if (v26)
  {
LABEL_15:
    if (v8)
    {
      if (!v16) {
        return 0;
      }
    }
    else
    {
      if (v7 == v15) {
        char v28 = v16;
      }
      else {
        char v28 = 1;
      }
      if (v28) {
        return 0;
      }
    }
    if (v10)
    {
      if (!v17) {
        return 0;
      }
      if (v9 != v18 || v10 != v17)
      {
        uint64_t v29 = v13;
        uint64_t v30 = v21;
        uint64_t v31 = v19;
        uint64_t v32 = v20;
        char v33 = sub_23309C220();
        uint64_t v20 = v32;
        uint64_t v19 = v31;
        uint64_t v21 = v30;
        uint64_t v13 = v29;
        char v34 = v33;
        BOOL result = 0;
        if ((v34 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v12 == 1)
    {
      if (v19 == 1) {
        return 1;
      }
      goto LABEL_34;
    }
    v44[0] = v11;
    v44[1] = v12;
    v44[2] = v13;
    if (v19 == 1)
    {
      uint64_t v35 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v35;
      uint64_t v19 = 1;
LABEL_34:
      uint64_t v36 = v19;
      uint64_t v37 = v20;
      sub_232E967F8(v20, v19);
      sub_232E96840(v11, v12);
      sub_232E96840(v37, v36);
      return 0;
    }
    v43[0] = v20;
    v43[1] = v19;
    v43[2] = v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v38 = static CodeableConcept.== infix(_:_:)(v44, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_232E96840(v11, v12);
    return (v38 & 1) != 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V12ImmunizationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v137 = type metadata accessor for Reference();
  uint64_t v136 = *(void *)(v137 - 8);
  MEMORY[0x270FA5388](v137);
  v133 = (uint64_t *)((char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232F37274(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v135 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v127 - v6;
  char v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  v134 = (uint64_t *)((char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v138 = (uint64_t)&v127 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v139 = (uint64_t)&v127 - v14;
  uint64_t v15 = type metadata accessor for FHIRDateTime();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v143 = v15;
  uint64_t v144 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v141 = (uint64_t)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v19 = v18;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v140 = (uint64_t)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v127 - v22;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v8);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  char v27 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v127 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v142 = (uint64_t)&v127 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v127 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  char v38 = (char *)&v127 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v40 = (char *)&v127 - v39;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v41 = sub_23309C220(), uint64_t result = 0, (v41 & 1) != 0))
  {
    uint64_t v43 = *(void *)(a1 + 24);
    uint64_t v44 = *(void *)(a2 + 24);
    if (v43)
    {
      if (!v44) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v43 != v44)
      {
        char v45 = sub_23309C220();
        uint64_t result = 0;
        if ((v45 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v44)
    {
      return 0;
    }
    v131 = v27;
    v132 = v7;
    uint64_t v46 = *(void *)(a1 + 32);
    uint64_t v47 = *(void *)(a2 + 32);
    if (v46 == 1)
    {
      if (v47 == 1) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v47 != 1)
      {
        if (v46)
        {
          uint64_t v50 = *(void *)(a1 + 32);
          if (!v47)
          {
            sub_232EBD054(v50);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v50);
          sub_232EBD054(v46);
          sub_232EBD054(v47);
          uint64_t v51 = swift_bridgeObjectRetain();
          LODWORD(v130) = sub_232E94C94(v51, v47);
          swift_bridgeObjectRelease();
          sub_232EA390C(v47);
          swift_bridgeObjectRelease();
          sub_232EA390C(v46);
          if ((v130 & 1) == 0) {
            return 0;
          }
        }
        else if (v47)
        {
          return 0;
        }
LABEL_13:
        if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || *(void *)(a1 + 48) != *(void *)(a2 + 48))
        {
          char v48 = sub_23309C220();
          uint64_t result = 0;
          if ((v48 & 1) == 0) {
            return result;
          }
        }
        char v49 = *(unsigned char *)(a2 + 68);
        if (*(unsigned char *)(a1 + 68))
        {
          if ((*(unsigned char *)(a2 + 68) & 1) == 0) {
            return 0;
          }
        }
        else
        {
          uint64_t v52 = *(void *)(a2 + 56);
          int v53 = *(_DWORD *)(a2 + 64);
          int v54 = *(_DWORD *)(a1 + 64);
          *(void *)&long long v151 = *(void *)(a1 + 56);
          DWORD2(v151) = v54;
          BYTE12(v151) = 0;
          if (v49) {
            return 0;
          }
          *(void *)&long long v145 = v52;
          WORD4(v145) = v53 & 0x1FF;
          BYTE10(v145) = BYTE2(v53);
          BYTE11(v145) = HIBYTE(v53) & 1;
          if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v151, (uint64_t)&v145) & 1) == 0) {
            return 0;
          }
        }
        uint64_t v55 = *(void *)(a2 + 72);
        if (*(void *)(a1 + 72))
        {
          if (!v55) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v56 = swift_bridgeObjectRetain();
          LODWORD(v130) = sub_232E92468(v56, v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v130 & 1) == 0) {
            return 0;
          }
        }
        else if (v55)
        {
          return 0;
        }
        uint64_t v57 = type metadata accessor for ModelsR4.Immunization(0);
        sub_232F371F4(a1 + *(int *)(v57 + 40), (uint64_t)v40, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v128 = (int *)v57;
        sub_232F371F4(a2 + *(int *)(v57 + 40), (uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v58 = (uint64_t)&v23[*(int *)(v19 + 48)];
        sub_232F371F4((uint64_t)v40, (uint64_t)v23, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v130 = v58;
        sub_232F371F4((uint64_t)v38, v58, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v59 = v143;
        uint64_t v60 = v144 + 48;
        v129 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
        if (v129((uint64_t)v23, 1, v143) == 1)
        {
          uint64_t v144 = v60;
          sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v40, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v129(v130, 1, v143) == 1)
          {
            sub_232EBCD1C((uint64_t)v23, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_45;
          }
        }
        else
        {
          sub_232F371F4((uint64_t)v23, (uint64_t)v35, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v129(v130, 1, v59) != 1)
          {
            uint64_t v144 = v60;
            uint64_t v61 = v141;
            sub_232F3718C(v130, v141, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            LODWORD(v130) = static FHIRDateTime.== infix(_:_:)(v35, v61);
            sub_232EA3DC4(v61, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v40, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232EA3DC4((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v23, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v130 & 1) == 0) {
              return 0;
            }
LABEL_45:
            uint64_t v62 = v128;
            uint64_t v63 = v128[11];
            uint64_t v64 = *(void *)(a2 + v63);
            if (*(void *)(a1 + v63))
            {
              uint64_t v65 = v142;
              if (!v64) {
                return 0;
              }
              swift_bridgeObjectRetain();
              uint64_t v66 = swift_bridgeObjectRetain();
              BOOL v67 = sub_232E929BC(v66, v64);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (!v67) {
                return 0;
              }
            }
            else
            {
              uint64_t v65 = v142;
              if (v64) {
                return 0;
              }
            }
            sub_232F371F4(a1 + v62[12], v65, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4(a2 + v62[12], (uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v68 = *(int *)(v19 + 48);
            uint64_t v69 = v140;
            uint64_t v70 = v140 + v68;
            sub_232F371F4(v65, v140, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4((uint64_t)v30, v70, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v71 = v143;
            uint64_t v72 = v129;
            if (v129(v69, 1, v143) == 1)
            {
              sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C(v65, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v72(v70, 1, v143) == 1)
              {
                sub_232EBCD1C(v69, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                uint64_t v73 = (uint64_t)v132;
                goto LABEL_57;
              }
            }
            else
            {
              uint64_t v74 = (uint64_t)v131;
              sub_232F371F4(v69, (uint64_t)v131, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v72(v70, 1, v71) != 1)
              {
                uint64_t v75 = v141;
                sub_232F3718C(v70, v141, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                char v76 = static FHIRDateTime.== infix(_:_:)(v74, v75);
                sub_232EA3DC4(v75, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C(v142, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EA3DC4(v74, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                uint64_t v73 = (uint64_t)v132;
                sub_232EBCD1C(v69, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v76 & 1) == 0) {
                  return 0;
                }
LABEL_57:
                uint64_t v77 = v62[13];
                uint64_t v78 = *(void *)(a1 + v77 + 16);
                long long v151 = *(_OWORD *)(a1 + v77);
                uint64_t v152 = v78;
                long long v79 = (long long *)(a2 + v77);
                uint64_t v80 = *((void *)v79 + 2);
                long long v145 = *v79;
                uint64_t v146 = v80;
                if ((static CodeableConcept.== infix(_:_:)(&v151, &v145) & 1) == 0) {
                  return 0;
                }
                uint64_t v81 = v139;
                sub_232F371F4(a1 + v62[14], v139, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                uint64_t v82 = v138;
                sub_232F371F4(a2 + v62[14], v138, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                uint64_t v83 = v73 + *(int *)(v135 + 48);
                sub_232F371F4(v81, v73, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_232F371F4(v82, v83, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                uint64_t v84 = v73;
                long long v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
                uint64_t v86 = v137;
                if (v85(v84, 1, v137) == 1)
                {
                  sub_232EBCD1C(v138, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232EBCD1C(v139, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v85(v83, 1, v86) == 1)
                  {
                    sub_232EBCD1C((uint64_t)v132, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    goto LABEL_65;
                  }
                }
                else
                {
                  uint64_t v87 = v134;
                  sub_232F371F4((uint64_t)v132, (uint64_t)v134, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v85(v83, 1, v86) != 1)
                  {
                    uint64_t v88 = v133;
                    sub_232F3718C(v83, (uint64_t)v133, (uint64_t (*)(void))type metadata accessor for Reference);
                    BOOL v89 = static Reference.== infix(_:_:)(v87, v88);
                    sub_232EA3DC4((uint64_t)v88, (uint64_t (*)(void))type metadata accessor for Reference);
                    sub_232EBCD1C(v138, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_232EBCD1C(v139, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_232EA3DC4((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for Reference);
                    sub_232EBCD1C((uint64_t)v132, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (!v89) {
                      return 0;
                    }
LABEL_65:
                    uint64_t v90 = v128[15];
                    int v91 = *(unsigned __int8 *)(a1 + v90);
                    int v92 = *(unsigned __int8 *)(a2 + v90);
                    if (v91 == 2)
                    {
                      if (v92 != 2) {
                        return 0;
                      }
                    }
                    else
                    {
                      uint64_t result = 0;
                      BOOL v93 = (v91 & 1) == 0;
                      if (v92 == 2 || ((v93 ^ v92) & 1) == 0) {
                        return result;
                      }
                    }
                    uint64_t v94 = v128[16];
                    char v95 = (void *)(a1 + v94);
                    uint64_t v96 = *(void *)(a1 + v94 + 8);
                    uint64_t v97 = (void *)(a2 + v94);
                    uint64_t v98 = v97[1];
                    if (v96)
                    {
                      if (!v98) {
                        return 0;
                      }
                      if (*v95 != *v97 || v96 != v98)
                      {
                        char v99 = sub_23309C220();
                        uint64_t result = 0;
                        if ((v99 & 1) == 0) {
                          return result;
                        }
                      }
                    }
                    else if (v98)
                    {
                      return 0;
                    }
                    uint64_t v100 = v128[17];
                    uint64_t v101 = *(void *)(a2 + v100);
                    if (*(void *)(a1 + v100))
                    {
                      if (!v101) {
                        return 0;
                      }
                      swift_bridgeObjectRetain();
                      uint64_t v102 = swift_bridgeObjectRetain();
                      char v103 = sub_232E92ACC(v102, v101);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v103 & 1) == 0) {
                        return 0;
                      }
                    }
                    else if (v101)
                    {
                      return 0;
                    }
                    uint64_t v104 = v128[18];
                    int v105 = *(unsigned __int8 *)(a1 + v104);
                    int v106 = *(unsigned __int8 *)(a2 + v104);
                    if (v105 == 2)
                    {
                      if (v106 != 2) {
                        return 0;
                      }
                    }
                    else
                    {
                      uint64_t result = 0;
                      BOOL v107 = (v105 & 1) == 0;
                      if (v106 == 2 || ((v107 ^ v106) & 1) == 0) {
                        return result;
                      }
                    }
                    uint64_t v108 = v128[19];
                    uint64_t v109 = *(void *)(a1 + v108);
                    uint64_t v110 = *(void *)(a1 + v108 + 8);
                    uint64_t v112 = *(void *)(a1 + v108 + 16);
                    uint64_t v111 = *(void *)(a1 + v108 + 24);
                    uint64_t v142 = *(void *)(a1 + v108 + 32);
                    uint64_t v113 = *(void *)(a1 + v108 + 48);
                    uint64_t v141 = *(void *)(a1 + v108 + 40);
                    uint64_t v143 = v113;
                    uint64_t v144 = v111;
                    v114 = (uint64_t *)(a2 + v108);
                    uint64_t v116 = *v114;
                    uint64_t v115 = v114[1];
                    uint64_t v117 = v114[2];
                    uint64_t v137 = v114[3];
                    uint64_t v138 = v114[4];
                    uint64_t v119 = v114[5];
                    uint64_t v118 = v114[6];
                    uint64_t v139 = v119;
                    uint64_t v140 = v118;
                    if (v109 == 1)
                    {
                      if (v116 == 1)
                      {
LABEL_94:
                        uint64_t v122 = v128[20];
                        v123 = (void *)(a1 + v122);
                        uint64_t v124 = *(void *)(a1 + v122 + 8);
                        v125 = (void *)(a2 + v122);
                        uint64_t v126 = v125[1];
                        if (v124)
                        {
                          if (v126 && (*v123 == *v125 && v124 == v126 || (sub_23309C220() & 1) != 0)) {
                            return 1;
                          }
                        }
                        else if (!v126)
                        {
                          return 1;
                        }
                        return 0;
                      }
                    }
                    else
                    {
                      *(void *)&long long v151 = v109;
                      *((void *)&v151 + 1) = v110;
                      uint64_t v152 = v112;
                      uint64_t v153 = v144;
                      uint64_t v154 = v142;
                      uint64_t v155 = v141;
                      uint64_t v156 = v143;
                      if (v116 != 1)
                      {
                        *(void *)&long long v145 = v116;
                        *((void *)&v145 + 1) = v115;
                        uint64_t v146 = v117;
                        uint64_t v147 = v137;
                        uint64_t v148 = v138;
                        uint64_t v149 = v139;
                        uint64_t v150 = v140;
                        swift_bridgeObjectRetain();
                        uint64_t v136 = v110;
                        sub_232E967F8(v110, v112);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        sub_232E967F8(v110, v112);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        LODWORD(v140) = static Location.== infix(_:_:)(&v151, &v145);
                        uint64_t v120 = *((void *)&v151 + 1);
                        uint64_t v121 = v152;
                        swift_bridgeObjectRelease();
                        sub_232E96840(v120, v121);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_232EA3FDC(v109, v136, v112);
                        if ((v140 & 1) == 0) {
                          return 0;
                        }
                        goto LABEL_94;
                      }
                      swift_bridgeObjectRetain();
                      uint64_t v135 = v112;
                      sub_232E967F8(v110, v112);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_232E967F8(v110, v112);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      sub_232E96840(v110, v135);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    sub_232EBD5F0(v116, v115, v117);
                    sub_232EA3FDC(v109, v110, v112);
                    sub_232EA3FDC(v116, v115, v117);
                    return 0;
                  }
                  sub_232EBCD1C(v138, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232EBCD1C(v139, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_232EA3DC4((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for Reference);
                }
                sub_232F37130((uint64_t)v132, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                return 0;
              }
              sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C(v142, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EA3DC4(v74, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            sub_232F37130(v69, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v40, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EA3DC4((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        }
        sub_232F37130((uint64_t)v23, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v47);
    sub_232EA390C(v46);
    sub_232EA390C(v47);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11ObservationV2eeoiySbAE_AEtFZ_0(uint64_t a1, void *a2)
{
  uint64_t v162 = type metadata accessor for Quantity();
  uint64_t v159 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  uint64_t v156 = &v151[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F37274(0, (unint64_t *)&qword_268756F60, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  uint64_t v158 = v5;
  MEMORY[0x270FA5388](v5);
  v163 = &v151[-v6];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  v157 = &v151[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v160 = &v151[-v12];
  MEMORY[0x270FA5388](v11);
  v161 = &v151[-v13];
  uint64_t v14 = type metadata accessor for Period();
  uint64_t v169 = *(void *)(v14 - 8);
  uint64_t v170 = v14;
  MEMORY[0x270FA5388](v14);
  v165 = &v151[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F37274(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v168 = v16;
  MEMORY[0x270FA5388](v16);
  v173 = &v151[-v17];
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v7);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  v167 = &v151[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v174 = &v151[-v22];
  MEMORY[0x270FA5388](v21);
  v175 = &v151[-v23];
  uint64_t v24 = type metadata accessor for FHIRDateTime();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v179 = v24;
  uint64_t v180 = v25;
  MEMORY[0x270FA5388](v24);
  v176 = &v151[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F37274(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v178 = v27;
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  v166 = &v151[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  v177 = &v151[-v31];
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = &v151[-v32];
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v7);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  v164 = &v151[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  v171 = &v151[-v38];
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  v172 = &v151[-v40];
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v43 = &v151[-v42];
  uint64_t v44 = MEMORY[0x270FA5388](v41);
  uint64_t v46 = &v151[-v45];
  uint64_t v47 = MEMORY[0x270FA5388](v44);
  char v49 = &v151[-v48];
  uint64_t v50 = MEMORY[0x270FA5388](v47);
  uint64_t v52 = &v151[-v51];
  uint64_t v53 = MEMORY[0x270FA5388](v50);
  uint64_t v55 = &v151[-v54];
  MEMORY[0x270FA5388](v53);
  uint64_t v57 = &v151[-v56];
  if (*(void *)a1 == *a2 && *(void *)(a1 + 8) == a2[1] || (v58 = sub_23309C220(), uint64_t result = 0, (v58 & 1) != 0))
  {
    uint64_t v60 = *(void *)(a1 + 24);
    uint64_t v61 = a2[3];
    if (v60)
    {
      if (!v61) {
        return 0;
      }
      if (*(void *)(a1 + 16) != a2[2] || v60 != v61)
      {
        char v62 = sub_23309C220();
        uint64_t result = 0;
        if ((v62 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v61)
    {
      return 0;
    }
    uint64_t v63 = a2;
    uint64_t v64 = *(void *)(a1 + 32);
    uint64_t v155 = v63;
    uint64_t v65 = v63[4];
    if (v64 == 1)
    {
      if (v65 == 1) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v65 != 1)
      {
        if (v64)
        {
          if (!v65)
          {
            sub_232EBD054(v64);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v64);
          sub_232EBD054(v64);
          sub_232EBD054(v65);
          uint64_t v70 = swift_bridgeObjectRetain();
          LODWORD(v154) = sub_232E94C94(v70, v65);
          swift_bridgeObjectRelease();
          sub_232EA390C(v65);
          swift_bridgeObjectRelease();
          sub_232EA390C(v64);
          if ((v154 & 1) == 0) {
            return 0;
          }
        }
        else if (v65)
        {
          return 0;
        }
LABEL_13:
        uint64_t v66 = v155;
        if (*(void *)(a1 + 40) != v155[5] || *(void *)(a1 + 48) != v155[6])
        {
          char v67 = sub_23309C220();
          uint64_t result = 0;
          if ((v67 & 1) == 0) {
            return result;
          }
        }
        uint64_t v68 = v66[7];
        if (*(void *)(a1 + 56))
        {
          if (!v68) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v69 = swift_bridgeObjectRetain();
          LODWORD(v154) = sub_232E91178(v69, v68);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v154 & 1) == 0) {
            return 0;
          }
        }
        else if (v68)
        {
          return 0;
        }
        uint64_t v71 = *(void *)(a1 + 80);
        long long v183 = *(_OWORD *)(a1 + 64);
        uint64_t v184 = v71;
        uint64_t v72 = v155[10];
        long long v181 = *((_OWORD *)v155 + 4);
        uint64_t v182 = v72;
        if ((static CodeableConcept.== infix(_:_:)(&v183, &v181) & 1) == 0) {
          return 0;
        }
        uint64_t v73 = type metadata accessor for ModelsR4.Observation(0);
        sub_232F371F4(a1 + *(int *)(v73 + 40), (uint64_t)v57, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v153 = (int *)v73;
        sub_232F371F4((uint64_t)v155 + *(int *)(v73 + 40), (uint64_t)v55, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v74 = (uint64_t)&v33[*(int *)(v178 + 48)];
        sub_232F371F4((uint64_t)v57, (uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v154 = v74;
        sub_232F371F4((uint64_t)v55, v74, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v75 = v180 + 48;
        char v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48);
        if (v76((uint64_t)v33, 1, v179) == 1)
        {
          uint64_t v180 = v75;
          sub_232EBCD1C((uint64_t)v55, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v57, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v76(v154, 1, v179) == 1)
          {
            sub_232EBCD1C((uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_41;
          }
        }
        else
        {
          sub_232F371F4((uint64_t)v33, (uint64_t)v52, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v76(v154, 1, v179) != 1)
          {
            uint64_t v180 = v75;
            uint64_t v77 = v176;
            sub_232F3718C(v154, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            int v152 = static FHIRDateTime.== infix(_:_:)(v52, v77);
            uint64_t v154 = (uint64_t)v76;
            sub_232EA3DC4((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v55, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v57, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            char v76 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v154;
            sub_232EA3DC4((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v152 & 1) == 0) {
              return 0;
            }
LABEL_41:
            uint64_t v78 = v153;
            sub_232F371F4(a1 + v153[11], (uint64_t)v49, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4((uint64_t)v155 + v78[11], (uint64_t)v46, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            long long v79 = v177;
            uint64_t v80 = (uint64_t)&v177[*(int *)(v178 + 48)];
            sub_232F371F4((uint64_t)v49, (uint64_t)v177, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4((uint64_t)v46, v80, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v81 = v179;
            if (v76((uint64_t)v79, 1, v179) == 1)
            {
              sub_232EBCD1C((uint64_t)v46, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C((uint64_t)v49, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v76(v80, 1, v81) == 1)
              {
                sub_232EBCD1C((uint64_t)v79, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_48;
              }
            }
            else
            {
              sub_232F371F4((uint64_t)v79, (uint64_t)v43, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v76(v80, 1, v81) != 1)
              {
                uint64_t v82 = v176;
                sub_232F3718C(v80, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                char v83 = static FHIRDateTime.== infix(_:_:)(v43, v82);
                sub_232EA3DC4((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v46, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v49, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EA3DC4((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v79, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v83 & 1) == 0) {
                  return 0;
                }
LABEL_48:
                uint64_t v154 = (uint64_t)v76;
                uint64_t v84 = v153;
                long long v85 = v175;
                sub_232F371F4(a1 + v153[12], (uint64_t)v175, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v86 = v174;
                sub_232F371F4((uint64_t)v155 + v84[12], (uint64_t)v174, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v87 = v173;
                uint64_t v88 = (uint64_t)&v173[*(int *)(v168 + 48)];
                sub_232F371F4((uint64_t)v85, (uint64_t)v173, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_232F371F4((uint64_t)v86, v88, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v89 = v170;
                uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
                if (v90((uint64_t)v87, 1, v170) == 1)
                {
                  sub_232EBCD1C((uint64_t)v86, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EBCD1C((uint64_t)v85, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  int v91 = v90(v88, 1, v89);
                  uint64_t v92 = (uint64_t)v171;
                  uint64_t v93 = (uint64_t)v172;
                  if (v91 == 1)
                  {
                    sub_232EBCD1C((uint64_t)v87, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    uint64_t v94 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v154;
                    goto LABEL_55;
                  }
                }
                else
                {
                  char v95 = v167;
                  sub_232F371F4((uint64_t)v87, (uint64_t)v167, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  int v96 = v90(v88, 1, v89);
                  uint64_t v92 = (uint64_t)v171;
                  uint64_t v93 = (uint64_t)v172;
                  uint64_t v94 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v154;
                  if (v96 != 1)
                  {
                    uint64_t v97 = (uint64_t)v95;
                    uint64_t v98 = v165;
                    sub_232F3718C(v88, (uint64_t)v165, (uint64_t (*)(void))type metadata accessor for Period);
                    char v99 = static Period.== infix(_:_:)(v97, v98);
                    sub_232EA3DC4((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232EBCD1C((uint64_t)v174, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232EBCD1C((uint64_t)v175, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232EA3DC4(v97, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232EBCD1C((uint64_t)v87, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if ((v99 & 1) == 0) {
                      return 0;
                    }
LABEL_55:
                    uint64_t v100 = v153;
                    sub_232F371F4(a1 + v153[13], v93, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_232F371F4((uint64_t)v155 + v100[13], v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v101 = v166;
                    uint64_t v102 = (uint64_t)&v166[*(int *)(v178 + 48)];
                    sub_232F371F4(v93, (uint64_t)v166, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_232F371F4(v92, v102, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v103 = v179;
                    if (v94((uint64_t)v101, 1, v179) == 1)
                    {
                      sub_232EBCD1C(v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EBCD1C(v93, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v94(v102, 1, v103) == 1)
                      {
                        sub_232EBCD1C((uint64_t)v101, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                      uint64_t v104 = v164;
                      sub_232F371F4((uint64_t)v101, (uint64_t)v164, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v94(v102, 1, v103) != 1)
                      {
                        uint64_t v105 = v92;
                        uint64_t v106 = (uint64_t)v104;
                        BOOL v107 = v176;
                        sub_232F3718C(v102, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        char v108 = static FHIRDateTime.== infix(_:_:)(v106, v107);
                        sub_232EA3DC4((uint64_t)v107, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C(v105, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C(v93, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232EA3DC4(v106, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C((uint64_t)v101, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v108 & 1) == 0) {
                          return 0;
                        }
LABEL_62:
                        uint64_t v109 = v153[14];
                        uint64_t v110 = *(void *)((char *)v155 + v109);
                        if (*(void *)(a1 + v109))
                        {
                          if (!v110) {
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          uint64_t v111 = swift_bridgeObjectRetain();
                          char v112 = sub_232E92468(v111, v110);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v112 & 1) == 0) {
                            return 0;
                          }
                        }
                        else if (v110)
                        {
                          return 0;
                        }
                        uint64_t v113 = v153[15];
                        uint64_t v114 = *(void *)((char *)v155 + v113);
                        if (*(void *)(a1 + v113))
                        {
                          if (!v114) {
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          uint64_t v115 = swift_bridgeObjectRetain();
                          char v116 = sub_232E90BE8(v115, v114);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v116 & 1) == 0) {
                            return 0;
                          }
                        }
                        else if (v114)
                        {
                          return 0;
                        }
                        uint64_t v117 = v153[16];
                        uint64_t v118 = (void *)(a1 + v117);
                        uint64_t v119 = *(void *)(a1 + v117 + 8);
                        uint64_t v120 = (void *)((char *)v155 + v117);
                        uint64_t v121 = v120[1];
                        if (v119)
                        {
                          if (!v121) {
                            return 0;
                          }
                          uint64_t v122 = v155;
                          if (*v118 != *v120 || v119 != v121)
                          {
                            char v123 = sub_23309C220();
                            uint64_t result = 0;
                            if ((v123 & 1) == 0) {
                              return result;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v122 = v155;
                          if (v121) {
                            return 0;
                          }
                        }
                        uint64_t v124 = v153[17];
                        uint64_t v126 = *(void *)(a1 + v124);
                        uint64_t v125 = *(void *)(a1 + v124 + 8);
                        uint64_t v127 = *(void *)(a1 + v124 + 16);
                        v128 = (void *)((char *)v122 + v124);
                        uint64_t v130 = *v128;
                        uint64_t v129 = v128[1];
                        uint64_t v131 = v128[2];
                        if (v125 == 1)
                        {
                          if (v129 == 1) {
                            goto LABEL_86;
                          }
                        }
                        else
                        {
                          *(void *)&long long v183 = v126;
                          *((void *)&v183 + 1) = v125;
                          uint64_t v184 = v127;
                          if (v129 != 1)
                          {
                            *(void *)&long long v181 = v130;
                            *((void *)&v181 + 1) = v129;
                            uint64_t v182 = v131;
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain_n();
                            char v132 = static CodeableConcept.== infix(_:_:)(&v183, &v181);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_232E96840(v126, v125);
                            if ((v132 & 1) == 0) {
                              return 0;
                            }
LABEL_86:
                            v133 = v153;
                            v134 = v161;
                            sub_232F371F4(a1 + v153[18], (uint64_t)v161, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v135 = v160;
                            sub_232F371F4((uint64_t)v155 + v133[18], (uint64_t)v160, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v136 = v163;
                            uint64_t v137 = (uint64_t)&v163[*(int *)(v158 + 48)];
                            sub_232F371F4((uint64_t)v134, (uint64_t)v163, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            sub_232F371F4((uint64_t)v135, v137, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            uint64_t v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48);
                            if (v138((uint64_t)v136, 1, v162) == 1)
                            {
                              sub_232EBCD1C((uint64_t)v160, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232EBCD1C((uint64_t)v161, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v138(v137, 1, v162) == 1)
                              {
                                sub_232EBCD1C((uint64_t)v163, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
LABEL_93:
                                uint64_t v142 = v153[19];
                                uint64_t v143 = *(void *)((char *)v155 + v142);
                                if (*(void *)(a1 + v142))
                                {
                                  if (!v143) {
                                    return 0;
                                  }
                                  swift_bridgeObjectRetain();
                                  uint64_t v144 = swift_bridgeObjectRetain();
                                  char v145 = sub_232E93404(v144, v143);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if ((v145 & 1) == 0) {
                                    return 0;
                                  }
                                }
                                else if (v143)
                                {
                                  return 0;
                                }
                                uint64_t v146 = v153[20];
                                uint64_t v147 = (void *)(a1 + v146);
                                uint64_t v148 = *(void *)(a1 + v146 + 8);
                                uint64_t v149 = (void *)((char *)v155 + v146);
                                uint64_t v150 = v149[1];
                                if (v148)
                                {
                                  if (v150 && (*v147 == *v149 && v148 == v150 || (sub_23309C220() & 1) != 0)) {
                                    return 1;
                                  }
                                }
                                else if (!v150)
                                {
                                  return 1;
                                }
                                return 0;
                              }
                            }
                            else
                            {
                              sub_232F371F4((uint64_t)v163, (uint64_t)v157, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v138(v137, 1, v162) != 1)
                              {
                                uint64_t v139 = v156;
                                sub_232F3718C(v137, (uint64_t)v156, (uint64_t (*)(void))type metadata accessor for Quantity);
                                uint64_t v140 = v157;
                                char v141 = static Quantity.== infix(_:_:)(v157, v139);
                                sub_232EA3DC4((uint64_t)v139, (uint64_t (*)(void))type metadata accessor for Quantity);
                                sub_232EBCD1C((uint64_t)v160, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_232EBCD1C((uint64_t)v161, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_232EA3DC4((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for Quantity);
                                sub_232EBCD1C((uint64_t)v163, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                if ((v141 & 1) == 0) {
                                  return 0;
                                }
                                goto LABEL_93;
                              }
                              sub_232EBCD1C((uint64_t)v160, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232EBCD1C((uint64_t)v161, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_232EA3DC4((uint64_t)v157, (uint64_t (*)(void))type metadata accessor for Quantity);
                            }
                            sub_232F37130((uint64_t)v163, (unint64_t *)&qword_268756F60, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        sub_232E967F8(v130, v129);
                        sub_232E96840(v126, v125);
                        sub_232E96840(v130, v129);
                        return 0;
                      }
                      sub_232EBCD1C(v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EBCD1C(v93, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EA3DC4((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                    }
                    sub_232F37130((uint64_t)v101, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_232EBCD1C((uint64_t)v174, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EBCD1C((uint64_t)v175, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EA3DC4((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for Period);
                }
                sub_232F37130((uint64_t)v87, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                return 0;
              }
              sub_232EBCD1C((uint64_t)v46, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C((uint64_t)v49, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EA3DC4((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            sub_232F37130((uint64_t)v79, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          sub_232EBCD1C((uint64_t)v55, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v57, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EA3DC4((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        }
        sub_232F37130((uint64_t)v33, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v65);
    sub_232EA390C(v64);
    sub_232EA390C(v65);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v85 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v82 = (uint64_t *)((char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232F37274(0, &qword_268756F68, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
  uint64_t v84 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v78 - v7;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  char v83 = (int **)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v86 = (uint64_t)&v78 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v87 = (uint64_t)&v78 - v15;
  uint64_t v16 = type metadata accessor for FHIRDateTime();
  uint64_t v88 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v89 = (uint64_t)&v78 - v21;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v78 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v78 - v29;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v31 = sub_23309C220(), uint64_t result = 0, (v31 & 1) != 0))
  {
    uint64_t v33 = *(void *)(a1 + 24);
    uint64_t v34 = *(void *)(a2 + 24);
    if (v33)
    {
      if (!v34) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v33 != v34)
      {
        char v35 = sub_23309C220();
        uint64_t result = 0;
        if ((v35 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v34)
    {
      return 0;
    }
    uint64_t v80 = v4;
    uint64_t v81 = v8;
    uint64_t v36 = *(void *)(a1 + 32);
    uint64_t v37 = *(void *)(a2 + 32);
    if (v36 == 1)
    {
      if (v37 == 1) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v37 != 1)
      {
        if (v36)
        {
          uint64_t v42 = *(void *)(a1 + 32);
          if (!v37)
          {
            sub_232EBD054(v42);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v42);
          sub_232EBD054(v36);
          sub_232EBD054(v37);
          uint64_t v43 = swift_bridgeObjectRetain();
          LODWORD(v79) = sub_232E94C94(v43, v37);
          swift_bridgeObjectRelease();
          sub_232EA390C(v37);
          swift_bridgeObjectRelease();
          sub_232EA390C(v36);
          if ((v79 & 1) == 0) {
            return 0;
          }
        }
        else if (v37)
        {
          return 0;
        }
LABEL_13:
        if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || *(void *)(a1 + 48) != *(void *)(a2 + 48))
        {
          char v38 = sub_23309C220();
          uint64_t result = 0;
          if ((v38 & 1) == 0) {
            return result;
          }
        }
        uint64_t v39 = *(void *)(a1 + 64);
        uint64_t v40 = *(void *)(a2 + 64);
        if (v39)
        {
          if (!v40) {
            return 0;
          }
          if (*(void *)(a1 + 56) != *(void *)(a2 + 56) || v39 != v40)
          {
            char v41 = sub_23309C220();
            uint64_t result = 0;
            if ((v41 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v40)
        {
          return 0;
        }
        uint64_t v44 = *(void *)(a1 + 88);
        long long v92 = *(_OWORD *)(a1 + 72);
        uint64_t v93 = v44;
        uint64_t v45 = *(void *)(a2 + 88);
        long long v90 = *(_OWORD *)(a2 + 72);
        uint64_t v91 = v45;
        if ((static CodeableConcept.== infix(_:_:)(&v92, &v90) & 1) == 0
          || (sub_232E91178(*(void *)(a1 + 96), *(void *)(a2 + 96)) & 1) == 0)
        {
          return 0;
        }
        uint64_t v46 = type metadata accessor for ModelsR4.DocumentReference(0);
        sub_232F371F4(a1 + *(int *)(v46 + 44), (uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v78 = (int *)v46;
        sub_232F371F4(a2 + *(int *)(v46 + 44), (uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v47 = v89;
        uint64_t v48 = v89 + *(int *)(v20 + 48);
        sub_232F371F4((uint64_t)v30, v89, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v79 = v48;
        sub_232F371F4((uint64_t)v28, v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        char v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
        if (v49(v47, 1, v16) == 1)
        {
          sub_232EBCD1C((uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v49(v79, 1, v16) == 1)
          {
            sub_232EBCD1C(v89, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_44;
          }
        }
        else
        {
          sub_232F371F4(v89, (uint64_t)v25, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          uint64_t v50 = v79;
          if (v49(v79, 1, v16) != 1)
          {
            sub_232F3718C(v50, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            char v51 = static FHIRDateTime.== infix(_:_:)(v25, v18);
            sub_232EA3DC4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232EA3DC4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            sub_232EBCD1C(v89, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v51 & 1) == 0) {
              return 0;
            }
LABEL_44:
            uint64_t v52 = v78;
            uint64_t v53 = v78[12];
            uint64_t v54 = (void *)(a1 + v53);
            uint64_t v55 = *(void *)(a1 + v53 + 8);
            uint64_t v56 = (void *)(a2 + v53);
            uint64_t v57 = v56[1];
            if (v55)
            {
              uint64_t v59 = v80;
              uint64_t v58 = (uint64_t)v81;
              if (!v57) {
                return 0;
              }
              if (*v54 != *v56 || v55 != v57)
              {
                char v60 = sub_23309C220();
                uint64_t result = 0;
                if ((v60 & 1) == 0) {
                  return result;
                }
              }
            }
            else
            {
              uint64_t v59 = v80;
              uint64_t v58 = (uint64_t)v81;
              if (v57) {
                return 0;
              }
            }
            uint64_t v61 = v52[13];
            uint64_t v62 = *(void *)(a2 + v61);
            if (*(void *)(a1 + v61))
            {
              if (!v62) {
                return 0;
              }
              swift_bridgeObjectRetain();
              uint64_t v63 = swift_bridgeObjectRetain();
              char v64 = sub_232E90BE8(v63, v62);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v64 & 1) == 0) {
                return 0;
              }
            }
            else if (v62)
            {
              return 0;
            }
            if ((sub_232E91944(*(void *)(a1 + v52[14]), *(void *)(a2 + v52[14])) & 1) == 0) {
              return 0;
            }
            uint64_t v65 = v87;
            sub_232F371F4(a1 + v52[15], v87, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
            uint64_t v66 = a2 + v52[15];
            uint64_t v67 = v86;
            sub_232F371F4(v66, v86, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
            uint64_t v68 = v58 + *(int *)(v84 + 48);
            sub_232F371F4(v65, v58, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
            sub_232F371F4(v67, v68, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
            uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
            if (v69(v58, 1, v59) == 1)
            {
              sub_232EBCD1C(v86, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_232EBCD1C(v87, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
              if (v69(v68, 1, v59) == 1)
              {
                sub_232EBCD1C(v58, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
LABEL_64:
                uint64_t v73 = v78[16];
                uint64_t v74 = (void *)(a1 + v73);
                uint64_t v75 = *(void *)(a1 + v73 + 8);
                char v76 = (void *)(a2 + v73);
                uint64_t v77 = v76[1];
                if (v75)
                {
                  if (v77 && (*v74 == *v76 && v75 == v77 || (sub_23309C220() & 1) != 0)) {
                    return 1;
                  }
                }
                else if (!v77)
                {
                  return 1;
                }
                return 0;
              }
            }
            else
            {
              uint64_t v70 = v83;
              sub_232F371F4(v58, (uint64_t)v83, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
              if (v69(v68, 1, v59) != 1)
              {
                uint64_t v71 = v82;
                sub_232F3718C(v68, (uint64_t)v82, type metadata accessor for ModelsR4.DocumentReferenceContext);
                BOOL v72 = _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContextV2eeoiySbAE_AEtFZ_0(v70, v71);
                sub_232EA3DC4((uint64_t)v71, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_232EBCD1C(v86, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_232EBCD1C(v87, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_232EA3DC4((uint64_t)v70, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_232EBCD1C(v58, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
                if (!v72) {
                  return 0;
                }
                goto LABEL_64;
              }
              sub_232EBCD1C(v86, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_232EBCD1C(v87, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_232EA3DC4((uint64_t)v70, type metadata accessor for ModelsR4.DocumentReferenceContext);
            }
            sub_232F37130(v58, &qword_268756F68, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext);
            return 0;
          }
          sub_232EBCD1C((uint64_t)v28, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EBCD1C((uint64_t)v30, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_232EA3DC4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        }
        sub_232F37130(v89, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v37);
    sub_232EA390C(v36);
    sub_232EA390C(v37);
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V16DiagnosticReportV2eeoiySbAE_AEtFZ_0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Period();
  uint64_t v126 = *(void *)(v4 - 8);
  uint64_t v127 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v121 = &v112[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F37274(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v125 = v6;
  MEMORY[0x270FA5388](v6);
  v128 = &v112[-v7];
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v124 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v129 = &v112[-v13];
  MEMORY[0x270FA5388](v12);
  uint64_t v130 = &v112[-v14];
  uint64_t v15 = type metadata accessor for FHIRDateTime();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v112[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_232F37274(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v132 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = &v112[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v20);
  uint64_t v131 = &v112[-v23];
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v8);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v120 = &v112[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v122 = &v112[-v28];
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  char v123 = &v112[-v30];
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v33 = &v112[-v32];
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = &v112[-v35];
  MEMORY[0x270FA5388](v34);
  char v38 = &v112[-v37];
  if (*a1 == *(void *)a2 && a1[1] == *(void *)(a2 + 8) || (v39 = sub_23309C220(), BOOL result = 0, (v39 & 1) != 0))
  {
    uint64_t v41 = a1[3];
    uint64_t v42 = *(void *)(a2 + 24);
    if (v41)
    {
      if (!v42) {
        return 0;
      }
      if (a1[2] != *(void *)(a2 + 16) || v41 != v42)
      {
        char v43 = sub_23309C220();
        BOOL result = 0;
        if ((v43 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v42)
    {
      return 0;
    }
    uint64_t v118 = v18;
    uint64_t v119 = a1;
    uint64_t v44 = *(void *)(a2 + 32);
    if (a1[4])
    {
      if (!v44) {
        return 0;
      }
      uint64_t v45 = v16;
      uint64_t v46 = v15;
      uint64_t v47 = v22;
      swift_bridgeObjectRetain();
      uint64_t v48 = swift_bridgeObjectRetain();
      char v49 = sub_232E8FFD0(v48, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v45 = v16;
      uint64_t v46 = v15;
      uint64_t v47 = v22;
      if (v44) {
        return 0;
      }
    }
    uint64_t v50 = v119;
    uint64_t v51 = (uint64_t)v47;
    uint64_t v52 = v46;
    uint64_t v53 = v45;
    if (v119[5] != *(void *)(a2 + 40) || v119[6] != *(void *)(a2 + 48))
    {
      char v54 = sub_23309C220();
      BOOL result = 0;
      if ((v54 & 1) == 0) {
        return result;
      }
    }
    uint64_t v55 = v50[7];
    uint64_t v56 = *(void *)(a2 + 56);
    if (v55)
    {
      if (!v56) {
        return 0;
      }
      uint64_t v117 = v51;
      swift_bridgeObjectRetain();
      uint64_t v57 = swift_bridgeObjectRetain();
      char v58 = sub_232E91178(v57, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v117 = v51;
      if (v56) {
        return 0;
      }
    }
    uint64_t v59 = v119;
    uint64_t v60 = v119[10];
    long long v135 = *((_OWORD *)v119 + 4);
    uint64_t v136 = v60;
    uint64_t v61 = *(void *)(a2 + 80);
    long long v133 = *(_OWORD *)(a2 + 64);
    uint64_t v134 = v61;
    if ((static CodeableConcept.== infix(_:_:)(&v135, &v133) & 1) == 0) {
      return 0;
    }
    uint64_t v62 = v59[12];
    uint64_t v63 = *(void *)(a2 + 96);
    if (v62)
    {
      uint64_t v64 = v117;
      if (!v63) {
        return 0;
      }
      if (v59[11] != *(void *)(a2 + 88) || v62 != v63)
      {
        char v65 = sub_23309C220();
        BOOL result = 0;
        if ((v65 & 1) == 0) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v64 = v117;
      if (v63) {
        return 0;
      }
    }
    uint64_t v117 = v64;
    uint64_t v66 = type metadata accessor for ModelsR4.DiagnosticReport(0);
    sub_232F371F4((uint64_t)v59 + *(int *)(v66 + 44), (uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v115 = (int *)v66;
    sub_232F371F4(a2 + *(int *)(v66 + 44), (uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v67 = v131;
    uint64_t v68 = (uint64_t)&v131[*(int *)(v132 + 48)];
    sub_232F371F4((uint64_t)v38, (uint64_t)v131, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v116 = v68;
    sub_232F371F4((uint64_t)v36, v68, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    if (v69((uint64_t)v67, 1, v52) == 1)
    {
      uint64_t v114 = v69;
      sub_232EBCD1C((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if (v114(v116, 1, v52) == 1)
      {
        sub_232EBCD1C((uint64_t)v67, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        uint64_t v70 = v115;
        goto LABEL_39;
      }
    }
    else
    {
      sub_232F371F4((uint64_t)v67, (uint64_t)v33, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      uint64_t v71 = v116;
      uint64_t v72 = (uint64_t)v67;
      if (v69(v116, 1, v52) != 1)
      {
        uint64_t v114 = v69;
        uint64_t v77 = (uint64_t)v118;
        sub_232F3718C(v71, (uint64_t)v118, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        int v113 = static FHIRDateTime.== infix(_:_:)(v33, v77);
        sub_232EA3DC4(v77, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        uint64_t v116 = a2;
        sub_232EBCD1C((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_232EA3DC4((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        uint64_t v70 = v115;
        a2 = v116;
        sub_232EBCD1C(v72, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if ((v113 & 1) == 0) {
          return 0;
        }
LABEL_39:
        uint64_t v78 = v130;
        sub_232F371F4((uint64_t)v119 + v70[12], (uint64_t)v130, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v79 = v129;
        sub_232F371F4(a2 + v70[12], (uint64_t)v129, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v80 = v128;
        uint64_t v81 = &v128[*(int *)(v125 + 48)];
        sub_232F371F4((uint64_t)v78, (uint64_t)v128, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v131 = v81;
        sub_232F371F4((uint64_t)v79, (uint64_t)v81, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        uint64_t v82 = v127;
        char v83 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v126 + 48);
        if (v83(v80, 1, v127) == 1)
        {
          sub_232EBCD1C((uint64_t)v79, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232EBCD1C((uint64_t)v78, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v83(v131, 1, v82) == 1)
          {
            sub_232EBCD1C((uint64_t)v80, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
LABEL_46:
            uint64_t v88 = v115;
            uint64_t v89 = v119;
            long long v90 = v123;
            sub_232F371F4((uint64_t)v119 + v115[13], (uint64_t)v123, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v91 = v122;
            sub_232F371F4(a2 + v88[13], (uint64_t)v122, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v92 = v117;
            uint64_t v93 = v117 + *(int *)(v132 + 48);
            sub_232F371F4((uint64_t)v90, v117, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4((uint64_t)v91, v93, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v94 = v114;
            if (v114(v92, 1, v52) == 1)
            {
              sub_232EBCD1C((uint64_t)v91, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              uint64_t v92 = v117;
              sub_232EBCD1C((uint64_t)v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v94(v93, 1, v52) == 1)
              {
                sub_232EBCD1C(v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_56:
                uint64_t v98 = v115;
                uint64_t v99 = v115[14];
                uint64_t v100 = *(void *)(a2 + v99);
                if (*(void *)((char *)v89 + v99))
                {
                  if (!v100) {
                    return 0;
                  }
                  swift_bridgeObjectRetain();
                  uint64_t v101 = swift_bridgeObjectRetain();
                  char v102 = sub_232E90BE8(v101, v100);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v102 & 1) == 0) {
                    return 0;
                  }
                }
                else if (v100)
                {
                  return 0;
                }
                uint64_t v103 = v98[15];
                uint64_t v104 = *(void *)(a2 + v103);
                if (*(void *)((char *)v89 + v103))
                {
                  if (!v104) {
                    return 0;
                  }
                  swift_bridgeObjectRetain();
                  uint64_t v105 = swift_bridgeObjectRetain();
                  char v106 = sub_232E92414(v105, v104);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v106 & 1) == 0) {
                    return 0;
                  }
                }
                else if (v104)
                {
                  return 0;
                }
                uint64_t v107 = v115[16];
                char v108 = (void *)((char *)v119 + v107);
                uint64_t v109 = *(void *)((char *)v119 + v107 + 8);
                uint64_t v110 = (void *)(a2 + v107);
                uint64_t v111 = v110[1];
                if (v109) {
                  return v111 && (*v108 == *v110 && v109 == v111 || (sub_23309C220() & 1) != 0);
                }
                return !v111;
              }
            }
            else
            {
              char v95 = v120;
              sub_232F371F4(v92, (uint64_t)v120, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v94(v93, 1, v52) != 1)
              {
                uint64_t v96 = (uint64_t)v118;
                sub_232F3718C(v93, (uint64_t)v118, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                char v97 = static FHIRDateTime.== infix(_:_:)(v95, v96);
                sub_232EA3DC4(v96, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v91, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EA3DC4((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                uint64_t v89 = v119;
                sub_232EBCD1C(v92, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v97 & 1) == 0) {
                  return 0;
                }
                goto LABEL_56;
              }
              sub_232EBCD1C((uint64_t)v91, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C((uint64_t)v90, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EA3DC4((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            uint64_t v73 = (unint64_t *)&qword_268756550;
            uint64_t v74 = &qword_268756548;
            uint64_t v75 = type metadata accessor for FHIRDateTime;
            uint64_t v76 = v92;
LABEL_52:
            sub_232F37130(v76, v73, v74, (uint64_t (*)(uint64_t))v75);
            return 0;
          }
        }
        else
        {
          uint64_t v84 = v124;
          sub_232F371F4((uint64_t)v80, (uint64_t)v124, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          uint64_t v85 = v131;
          if (v83(v131, 1, v82) != 1)
          {
            uint64_t v86 = v121;
            sub_232F3718C((uint64_t)v85, (uint64_t)v121, (uint64_t (*)(void))type metadata accessor for Period);
            char v87 = static Period.== infix(_:_:)(v84, v86);
            sub_232EA3DC4((uint64_t)v86, (uint64_t (*)(void))type metadata accessor for Period);
            sub_232EBCD1C((uint64_t)v129, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_232EBCD1C((uint64_t)v130, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_232EA3DC4((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for Period);
            sub_232EBCD1C((uint64_t)v80, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            if ((v87 & 1) == 0) {
              return 0;
            }
            goto LABEL_46;
          }
          sub_232EBCD1C((uint64_t)v129, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232EBCD1C((uint64_t)v130, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_232EA3DC4((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for Period);
        }
        uint64_t v73 = &qword_268756F58;
        uint64_t v74 = &qword_268756730;
        uint64_t v75 = type metadata accessor for Period;
        uint64_t v76 = (uint64_t)v80;
        goto LABEL_52;
      }
      sub_232EBCD1C((uint64_t)v36, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232EBCD1C((uint64_t)v38, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_232EA3DC4((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
    }
    uint64_t v73 = (unint64_t *)&qword_268756550;
    uint64_t v74 = &qword_268756548;
    uint64_t v75 = type metadata accessor for FHIRDateTime;
    uint64_t v76 = (uint64_t)v67;
    goto LABEL_52;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V9ConditionV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v216 = type metadata accessor for Reference();
  uint64_t v211 = *(void *)(v216 - 8);
  MEMORY[0x270FA5388](v216);
  v207 = (int **)((char *)&v200 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_232F37274(0, &qword_2687565A0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  uint64_t v212 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v200 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v215 = (uint64_t)&v200 - v9;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  v206 = (int **)((char *)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v208 = (uint64_t)&v200 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v209 = (uint64_t)&v200 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v210 = (int **)((char *)&v200 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v213 = (uint64_t)&v200 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v214 = (uint64_t)&v200 - v22;
  uint64_t v233 = type metadata accessor for Period();
  uint64_t v230 = *(void *)(v233 - 8);
  MEMORY[0x270FA5388](v233);
  uint64_t v225 = (uint64_t)&v200 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, &qword_268756F58, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  uint64_t v232 = v24;
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v223 = (uint64_t)&v200 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v200 - v27;
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, v10);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v220 = (uint64_t)&v200 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v221 = (uint64_t)&v200 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v222 = (uint64_t)&v200 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v231 = (uint64_t)&v200 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v234 = (uint64_t)&v200 - v39;
  MEMORY[0x270FA5388](v38);
  uint64_t v235 = (uint64_t)&v200 - v40;
  uint64_t v238 = type metadata accessor for FHIRDateTime();
  uint64_t v236 = *(void *)(v238 - 8);
  MEMORY[0x270FA5388](v238);
  uint64_t v229 = (uint64_t)&v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_232F37274(0, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  uint64_t v237 = v42;
  uint64_t v43 = MEMORY[0x270FA5388](v42);
  uint64_t v219 = (uint64_t)&v200 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v228 = (uint64_t)&v200 - v46;
  MEMORY[0x270FA5388](v45);
  uint64_t v48 = (char *)&v200 - v47;
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v10);
  uint64_t v50 = MEMORY[0x270FA5388](v49 - 8);
  uint64_t v52 = (char *)&v200 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = MEMORY[0x270FA5388](v50);
  uint64_t v217 = (uint64_t)&v200 - v54;
  uint64_t v55 = MEMORY[0x270FA5388](v53);
  uint64_t v218 = (uint64_t)&v200 - v56;
  uint64_t v57 = MEMORY[0x270FA5388](v55);
  uint64_t v224 = (uint64_t)&v200 - v58;
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  uint64_t v226 = (uint64_t)&v200 - v60;
  uint64_t v61 = MEMORY[0x270FA5388](v59);
  uint64_t v227 = (uint64_t)&v200 - v62;
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  char v65 = (char *)&v200 - v64;
  uint64_t v66 = MEMORY[0x270FA5388](v63);
  uint64_t v68 = (char *)&v200 - v67;
  MEMORY[0x270FA5388](v66);
  uint64_t v70 = (char *)&v200 - v69;
  if (*a1 == *a2 && a1[1] == a2[1] || (v71 = sub_23309C220(), uint64_t result = 0, (v71 & 1) != 0))
  {
    uint64_t v73 = a1[3];
    uint64_t v74 = a2[3];
    if (v73)
    {
      if (!v74) {
        return 0;
      }
      if (a1[2] != a2[2] || v73 != v74)
      {
        char v75 = sub_23309C220();
        uint64_t result = 0;
        if ((v75 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v74)
    {
      return 0;
    }
    v205 = v28;
    v204 = v8;
    uint64_t v76 = a1[4];
    uint64_t v77 = a2[4];
    if (v76 == 1)
    {
      if (v77 == 1)
      {
LABEL_13:
        v201 = v52;
        uint64_t v78 = a1;
        uint64_t v79 = a1[5];
        uint64_t v80 = v78[6];
        uint64_t v81 = v78[7];
        v202 = v78;
        uint64_t v82 = a2;
        uint64_t v83 = a2[5];
        uint64_t v84 = a2[6];
        v203 = v82;
        uint64_t v85 = v82[7];
        if (v80 == 1)
        {
          if (v84 != 1) {
            goto LABEL_32;
          }
          goto LABEL_25;
        }
        uint64_t v242 = v79;
        uint64_t v243 = v80;
        uint64_t v244 = v81;
        if (v84 == 1) {
          goto LABEL_31;
        }
        uint64_t v239 = v83;
        uint64_t v240 = v84;
        uint64_t v241 = v85;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v89 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_232E96840(v79, v80);
        if (v89)
        {
LABEL_25:
          uint64_t v79 = v202[8];
          uint64_t v80 = v202[9];
          uint64_t v90 = v202[10];
          uint64_t v83 = v203[8];
          uint64_t v84 = v203[9];
          uint64_t v91 = v203[10];
          if (v80 == 1)
          {
            if (v84 != 1) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v242 = v202[8];
            uint64_t v243 = v80;
            uint64_t v244 = v90;
            if (v84 == 1) {
              goto LABEL_31;
            }
            uint64_t v239 = v83;
            uint64_t v240 = v84;
            uint64_t v241 = v91;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v92 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_232E96840(v79, v80);
            if ((v92 & 1) == 0) {
              return 0;
            }
          }
          uint64_t v93 = v202;
          uint64_t v94 = v203[11];
          if (v202[11])
          {
            if (!v94) {
              return 0;
            }
            swift_bridgeObjectRetain();
            uint64_t v95 = swift_bridgeObjectRetain();
            char v96 = sub_232E91178(v95, v94);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v96 & 1) == 0) {
              return 0;
            }
          }
          else if (v94)
          {
            return 0;
          }
          char v97 = v93;
          uint64_t v79 = v93[12];
          uint64_t v80 = v93[13];
          uint64_t v98 = v97[14];
          uint64_t v83 = v203[12];
          uint64_t v84 = v203[13];
          uint64_t v99 = v203[14];
          if (v80 == 1)
          {
            if (v84 != 1) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v242 = v79;
            uint64_t v243 = v80;
            uint64_t v244 = v98;
            if (v84 == 1) {
              goto LABEL_31;
            }
            uint64_t v239 = v83;
            uint64_t v240 = v84;
            uint64_t v241 = v99;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v100 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_232E96840(v79, v80);
            if ((v100 & 1) == 0) {
              return 0;
            }
          }
          uint64_t v79 = v202[15];
          uint64_t v80 = v202[16];
          uint64_t v101 = v202[17];
          uint64_t v83 = v203[15];
          uint64_t v84 = v203[16];
          uint64_t v102 = v203[17];
          if (v80 == 1)
          {
            if (v84 == 1) {
              goto LABEL_52;
            }
LABEL_32:
            sub_232E967F8(v83, v84);
            sub_232E96840(v79, v80);
            sub_232E96840(v83, v84);
            return 0;
          }
          uint64_t v242 = v202[15];
          uint64_t v243 = v80;
          uint64_t v244 = v101;
          if (v84 != 1)
          {
            uint64_t v239 = v83;
            uint64_t v240 = v84;
            uint64_t v241 = v102;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            char v103 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_232E96840(v79, v80);
            if ((v103 & 1) == 0) {
              return 0;
            }
LABEL_52:
            uint64_t v104 = v202;
            uint64_t v105 = v203[18];
            if (v202[18])
            {
              if (!v105) {
                return 0;
              }
              swift_bridgeObjectRetain();
              uint64_t v106 = swift_bridgeObjectRetain();
              char v107 = sub_232E91178(v106, v105);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v107 & 1) == 0) {
                return 0;
              }
            }
            else if (v105)
            {
              return 0;
            }
            uint64_t v108 = type metadata accessor for ModelsR4.Condition(0);
            sub_232F371F4((uint64_t)v104 + *(int *)(v108 + 52), (uint64_t)v70, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v200 = (int *)v108;
            sub_232F371F4((uint64_t)v203 + *(int *)(v108 + 52), (uint64_t)v68, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v109 = (uint64_t)&v48[*(int *)(v237 + 48)];
            sub_232F371F4((uint64_t)v70, (uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_232F371F4((uint64_t)v68, v109, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            uint64_t v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48);
            uint64_t v111 = v238;
            if (v110((uint64_t)v48, 1, v238) == 1)
            {
              sub_232EBCD1C((uint64_t)v68, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C((uint64_t)v70, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v110(v109, 1, v111) == 1)
              {
                sub_232EBCD1C((uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_64;
              }
            }
            else
            {
              sub_232F371F4((uint64_t)v48, (uint64_t)v65, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v110(v109, 1, v111) != 1)
              {
                uint64_t v112 = v229;
                sub_232F3718C(v109, v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                char v113 = static FHIRDateTime.== infix(_:_:)(v65, v112);
                sub_232EA3DC4(v112, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v68, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v70, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_232EA3DC4((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                sub_232EBCD1C((uint64_t)v48, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v113 & 1) == 0) {
                  return 0;
                }
LABEL_64:
                uint64_t v114 = v200;
                uint64_t v115 = v235;
                sub_232F371F4((uint64_t)v202 + v200[14], v235, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v116 = v234;
                sub_232F371F4((uint64_t)v203 + v114[14], v234, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v117 = (uint64_t)v205;
                uint64_t v118 = (uint64_t)&v205[*(int *)(v232 + 48)];
                sub_232F371F4(v115, (uint64_t)v205, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_232F371F4(v116, v118, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                uint64_t v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v230 + 48);
                uint64_t v120 = v117;
                uint64_t v121 = v233;
                if (v119(v120, 1, v233) == 1)
                {
                  sub_232EBCD1C(v234, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EBCD1C(v235, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v119(v118, 1, v121) == 1)
                  {
                    sub_232EBCD1C((uint64_t)v205, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    goto LABEL_72;
                  }
                }
                else
                {
                  sub_232F371F4((uint64_t)v205, v231, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v119(v118, 1, v121) != 1)
                  {
                    uint64_t v126 = v225;
                    sub_232F3718C(v118, v225, (uint64_t (*)(void))type metadata accessor for Period);
                    uint64_t v127 = v231;
                    char v128 = static Period.== infix(_:_:)(v231, v126);
                    sub_232EA3DC4(v126, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232EBCD1C(v234, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232EBCD1C(v235, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_232EA3DC4(v127, (uint64_t (*)(void))type metadata accessor for Period);
                    sub_232EBCD1C((uint64_t)v205, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if ((v128 & 1) == 0) {
                      return 0;
                    }
LABEL_72:
                    uint64_t v129 = v200[15];
                    uint64_t v130 = (void *)((char *)v202 + v129);
                    uint64_t v131 = *(void *)((char *)v202 + v129 + 8);
                    uint64_t v132 = (void *)((char *)v203 + v129);
                    uint64_t v133 = v132[1];
                    if (v131)
                    {
                      if (!v133) {
                        return 0;
                      }
                      uint64_t v134 = v203;
                      long long v135 = v202;
                      if (*v130 != *v132 || v131 != v133)
                      {
                        char v136 = sub_23309C220();
                        uint64_t result = 0;
                        if ((v136 & 1) == 0) {
                          return result;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v134 = v203;
                      long long v135 = v202;
                      if (v133) {
                        return 0;
                      }
                    }
                    uint64_t v137 = v200;
                    uint64_t v138 = v227;
                    sub_232F371F4((uint64_t)v135 + v200[16], v227, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v139 = v226;
                    sub_232F371F4((uint64_t)v134 + v137[16], v226, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    uint64_t v140 = v228;
                    uint64_t v141 = v228 + *(int *)(v237 + 48);
                    sub_232F371F4(v138, v228, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_232F371F4(v139, v141, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    if (v110(v140, 1, v238) == 1)
                    {
                      sub_232EBCD1C(v226, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EBCD1C(v227, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v110(v141, 1, v238) == 1)
                      {
                        sub_232EBCD1C(v228, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_86;
                      }
                    }
                    else
                    {
                      sub_232F371F4(v228, v224, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v110(v141, 1, v238) != 1)
                      {
                        uint64_t v142 = v141;
                        uint64_t v143 = v229;
                        sub_232F3718C(v142, v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        uint64_t v144 = v224;
                        char v145 = static FHIRDateTime.== infix(_:_:)(v224, v143);
                        sub_232EA3DC4(v143, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C(v226, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C(v227, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_232EA3DC4(v144, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                        sub_232EBCD1C(v228, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v145 & 1) == 0) {
                          return 0;
                        }
LABEL_86:
                        uint64_t v146 = v200;
                        uint64_t v147 = v222;
                        sub_232F371F4((uint64_t)v202 + v200[17], v222, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        uint64_t v148 = v221;
                        sub_232F371F4((uint64_t)v203 + v146[17], v221, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        uint64_t v149 = v223;
                        uint64_t v150 = v223 + *(int *)(v232 + 48);
                        sub_232F371F4(v147, v223, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        sub_232F371F4(v148, v150, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        if (v119(v149, 1, v233) == 1)
                        {
                          sub_232EBCD1C(v221, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_232EBCD1C(v222, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          if (v119(v150, 1, v233) == 1)
                          {
                            sub_232EBCD1C(v223, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            goto LABEL_93;
                          }
                        }
                        else
                        {
                          sub_232F371F4(v223, v220, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          if (v119(v150, 1, v233) != 1)
                          {
                            uint64_t v151 = v150;
                            uint64_t v152 = v225;
                            sub_232F3718C(v151, v225, (uint64_t (*)(void))type metadata accessor for Period);
                            uint64_t v153 = v220;
                            char v154 = static Period.== infix(_:_:)(v220, v152);
                            sub_232EA3DC4(v152, (uint64_t (*)(void))type metadata accessor for Period);
                            sub_232EBCD1C(v221, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            sub_232EBCD1C(v222, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            sub_232EA3DC4(v153, (uint64_t (*)(void))type metadata accessor for Period);
                            sub_232EBCD1C(v223, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            if ((v154 & 1) == 0) {
                              return 0;
                            }
LABEL_93:
                            uint64_t v155 = v200[18];
                            uint64_t v156 = (void *)((char *)v202 + v155);
                            uint64_t v157 = *(void *)((char *)v202 + v155 + 8);
                            uint64_t v158 = (void *)((char *)v203 + v155);
                            uint64_t v159 = v158[1];
                            if (v157)
                            {
                              if (!v159) {
                                return 0;
                              }
                              v160 = v203;
                              v161 = v202;
                              if (*v156 != *v158 || v157 != v159)
                              {
                                char v162 = sub_23309C220();
                                uint64_t result = 0;
                                if ((v162 & 1) == 0) {
                                  return result;
                                }
                              }
                            }
                            else
                            {
                              v160 = v203;
                              v161 = v202;
                              if (v159) {
                                return 0;
                              }
                            }
                            v163 = v200;
                            uint64_t v164 = v218;
                            sub_232F371F4((uint64_t)v161 + v200[19], v218, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            uint64_t v165 = v217;
                            sub_232F371F4((uint64_t)v160 + v163[19], v217, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            uint64_t v166 = v219;
                            uint64_t v167 = v219 + *(int *)(v237 + 48);
                            sub_232F371F4(v164, v219, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            sub_232F371F4(v165, v167, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            if (v110(v166, 1, v238) == 1)
                            {
                              sub_232EBCD1C(v217, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_232EBCD1C(v218, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              if (v110(v167, 1, v238) == 1)
                              {
                                sub_232EBCD1C(v219, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                goto LABEL_107;
                              }
                            }
                            else
                            {
                              sub_232F371F4(v219, (uint64_t)v201, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              if (v110(v167, 1, v238) != 1)
                              {
                                uint64_t v168 = v167;
                                uint64_t v169 = v229;
                                sub_232F3718C(v168, v229, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                                uint64_t v170 = (uint64_t)v201;
                                char v171 = static FHIRDateTime.== infix(_:_:)(v201, v169);
                                sub_232EA3DC4(v169, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                                sub_232EBCD1C(v217, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                sub_232EBCD1C(v218, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                sub_232EA3DC4(v170, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                                sub_232EBCD1C(v219, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                if ((v171 & 1) == 0) {
                                  return 0;
                                }
LABEL_107:
                                v172 = v200;
                                uint64_t v173 = v214;
                                sub_232F371F4((uint64_t)v202 + v200[20], v214, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                uint64_t v174 = v213;
                                sub_232F371F4((uint64_t)v203 + v172[20], v213, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                uint64_t v175 = v215;
                                uint64_t v176 = v215 + *(int *)(v212 + 48);
                                sub_232F371F4(v173, v215, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                sub_232F371F4(v174, v176, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                v177 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48);
                                if (v177(v175, 1, v216) == 1)
                                {
                                  sub_232EBCD1C(v213, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_232EBCD1C(v214, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  if (v177(v176, 1, v216) == 1)
                                  {
                                    sub_232EBCD1C(v215, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
LABEL_114:
                                    uint64_t v182 = v200;
                                    uint64_t v183 = v209;
                                    sub_232F371F4((uint64_t)v202 + v200[21], v209, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    uint64_t v184 = v208;
                                    sub_232F371F4((uint64_t)v203 + v182[21], v208, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    uint64_t v185 = (uint64_t)v204;
                                    uint64_t v186 = (uint64_t)&v204[*(int *)(v212 + 48)];
                                    sub_232F371F4(v183, (uint64_t)v204, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_232F371F4(v184, v186, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    if (v177(v185, 1, v216) == 1)
                                    {
                                      sub_232EBCD1C(v208, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_232EBCD1C(v209, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      if (v177(v186, 1, v216) == 1)
                                      {
                                        sub_232EBCD1C((uint64_t)v204, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        goto LABEL_121;
                                      }
                                    }
                                    else
                                    {
                                      sub_232F371F4((uint64_t)v204, (uint64_t)v206, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      if (v177(v186, 1, v216) != 1)
                                      {
                                        uint64_t v187 = v186;
                                        v188 = v207;
                                        sub_232F3718C(v187, (uint64_t)v207, (uint64_t (*)(void))type metadata accessor for Reference);
                                        v189 = v206;
                                        BOOL v190 = static Reference.== infix(_:_:)(v206, v188);
                                        sub_232EA3DC4((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for Reference);
                                        sub_232EBCD1C(v208, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        sub_232EBCD1C(v209, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        sub_232EA3DC4((uint64_t)v189, (uint64_t (*)(void))type metadata accessor for Reference);
                                        sub_232EBCD1C((uint64_t)v204, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        if (!v190) {
                                          return 0;
                                        }
LABEL_121:
                                        uint64_t v191 = v200[22];
                                        uint64_t v192 = *(void *)((char *)v203 + v191);
                                        if (*(void *)((char *)v202 + v191))
                                        {
                                          if (!v192) {
                                            return 0;
                                          }
                                          swift_bridgeObjectRetain();
                                          uint64_t v193 = swift_bridgeObjectRetain();
                                          char v194 = sub_232E92468(v193, v192);
                                          swift_bridgeObjectRelease();
                                          swift_bridgeObjectRelease();
                                          if ((v194 & 1) == 0) {
                                            return 0;
                                          }
                                        }
                                        else if (v192)
                                        {
                                          return 0;
                                        }
                                        uint64_t v195 = v200[23];
                                        v196 = (void *)((char *)v202 + v195);
                                        uint64_t v197 = *(void *)((char *)v202 + v195 + 8);
                                        v198 = (void *)((char *)v203 + v195);
                                        uint64_t v199 = v198[1];
                                        if (v197)
                                        {
                                          if (!v199 || (*v196 != *v198 || v197 != v199) && (sub_23309C220() & 1) == 0) {
                                            return 0;
                                          }
                                        }
                                        else if (v199)
                                        {
                                          return 0;
                                        }
                                        return 1;
                                      }
                                      sub_232EBCD1C(v208, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_232EBCD1C(v209, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_232EA3DC4((uint64_t)v206, (uint64_t (*)(void))type metadata accessor for Reference);
                                    }
                                    uint64_t v122 = &qword_2687565A0;
                                    char v123 = &qword_268756580;
                                    uint64_t v124 = type metadata accessor for Reference;
                                    uint64_t v125 = &v236;
LABEL_70:
                                    sub_232F37130(*(v125 - 32), v122, v123, (uint64_t (*)(uint64_t))v124);
                                    return 0;
                                  }
                                }
                                else
                                {
                                  sub_232F371F4(v215, (uint64_t)v210, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  if (v177(v176, 1, v216) != 1)
                                  {
                                    uint64_t v178 = v176;
                                    uint64_t v179 = v207;
                                    sub_232F3718C(v178, (uint64_t)v207, (uint64_t (*)(void))type metadata accessor for Reference);
                                    uint64_t v180 = v210;
                                    BOOL v181 = static Reference.== infix(_:_:)(v210, v179);
                                    sub_232EA3DC4((uint64_t)v179, (uint64_t (*)(void))type metadata accessor for Reference);
                                    sub_232EBCD1C(v213, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_232EBCD1C(v214, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_232EA3DC4((uint64_t)v180, (uint64_t (*)(void))type metadata accessor for Reference);
                                    sub_232EBCD1C(v215, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    if (!v181) {
                                      return 0;
                                    }
                                    goto LABEL_114;
                                  }
                                  sub_232EBCD1C(v213, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_232EBCD1C(v214, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_232EA3DC4((uint64_t)v210, (uint64_t (*)(void))type metadata accessor for Reference);
                                }
                                uint64_t v122 = &qword_2687565A0;
                                char v123 = &qword_268756580;
                                uint64_t v124 = type metadata accessor for Reference;
                                uint64_t v125 = &v245;
                                goto LABEL_70;
                              }
                              sub_232EBCD1C(v217, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_232EBCD1C(v218, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_232EA3DC4((uint64_t)v201, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                            }
                            uint64_t v122 = (unint64_t *)&qword_268756550;
                            char v123 = &qword_268756548;
                            uint64_t v124 = type metadata accessor for FHIRDateTime;
                            uint64_t v125 = &v246;
                            goto LABEL_70;
                          }
                          sub_232EBCD1C(v221, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_232EBCD1C(v222, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_232EA3DC4(v220, (uint64_t (*)(void))type metadata accessor for Period);
                        }
                        uint64_t v122 = &qword_268756F58;
                        char v123 = &qword_268756730;
                        uint64_t v124 = type metadata accessor for Period;
                        uint64_t v125 = &v247;
                        goto LABEL_70;
                      }
                      sub_232EBCD1C(v226, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EBCD1C(v227, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_232EA3DC4(v224, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
                    }
                    sub_232F37130(v228, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_232EBCD1C(v234, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EBCD1C(v235, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_232EA3DC4(v231, (uint64_t (*)(void))type metadata accessor for Period);
                }
                uint64_t v122 = &qword_268756F58;
                char v123 = &qword_268756730;
                uint64_t v124 = type metadata accessor for Period;
                uint64_t v125 = &v237;
                goto LABEL_70;
              }
              sub_232EBCD1C((uint64_t)v68, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EBCD1C((uint64_t)v70, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_232EA3DC4((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
            }
            sub_232F37130((uint64_t)v48, (unint64_t *)&qword_268756550, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
LABEL_31:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_32;
        }
        return 0;
      }
    }
    else
    {
      if (v77 != 1)
      {
        if (v76)
        {
          uint64_t v86 = a1[4];
          if (!v77)
          {
            sub_232EBD054(v86);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_232EBD054(v86);
          sub_232EBD054(v76);
          sub_232EBD054(v77);
          uint64_t v87 = swift_bridgeObjectRetain();
          char v88 = sub_232E94C94(v87, v77);
          swift_bridgeObjectRelease();
          sub_232EA390C(v77);
          swift_bridgeObjectRelease();
          sub_232EA390C(v76);
          if ((v88 & 1) == 0) {
            return 0;
          }
        }
        else if (v77)
        {
          return 0;
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
    }
    sub_232EBD054(v77);
    sub_232EA390C(v76);
    sub_232EA390C(v77);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v116 = a2;
  *(void *)&long long v115 = a1;
  uint64_t v2 = type metadata accessor for ModelsR4.Observation(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v110 = (uint64_t *)((char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for ModelsR4.Immunization(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v109 = (uint64_t *)((char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v108 = (uint64_t *)((char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x270FA5388](v8 - 8);
  char v107 = (uint64_t *)((char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for ModelsR4.Condition(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v106 = (uint64_t *)((char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v114 = (uint64_t)&v105 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  char v113 = (uint64_t *)((char *)&v105 - v19);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v112 = (uint64_t *)((char *)&v105 - v21);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v111 = (uint64_t *)((char *)&v105 - v23);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (uint64_t *)((char *)&v105 - v25);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (uint64_t *)((char *)&v105 - v28);
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = (uint64_t *)((char *)&v105 - v31);
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = (uint64_t *)((char *)&v105 - v33);
  sub_232F372EC();
  uint64_t v36 = MEMORY[0x270FA5388](v35 - 8);
  uint64_t v38 = (char *)&v105 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = (uint64_t)&v38[*(int *)(v36 + 56)];
  sub_232EBDBF8(v115, (uint64_t)v38, type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t v40 = v116;
  *(void *)&long long v116 = v39;
  sub_232EBDBF8(v40, v39, type metadata accessor for ModelsR4.ResourceProxy);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v32, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v47 = v32[1];
      uint64_t v46 = v32[2];
      uint64_t v48 = v32[4];
      uint64_t v49 = (void *)v116;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_30;
      }
      uint64_t v50 = v32[3];
      uint64_t v51 = v49;
      uint64_t v52 = *v49;
      uint64_t v53 = v49[1];
      uint64_t v54 = v51[4];
      *(void *)&long long v129 = *v32;
      *((void *)&v129 + 1) = v47;
      *(void *)&long long v130 = v46;
      *((void *)&v130 + 1) = v50;
      *(void *)&long long v131 = v48;
      *(void *)&long long v121 = v52;
      *((void *)&v121 + 1) = v53;
      long long v116 = *((_OWORD *)v51 + 1);
      v122[0] = v116;
      *(void *)&v122[1] = v54;
      char v55 = _s23HealthRecordsExtraction8ModelsR4V6BundleV2eeoiySbAE_AEtFZ_0(&v129, &v121);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_33;
    case 2u:
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v29, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v56 = v116;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v57 = v106;
        sub_232F3718C(v56, (uint64_t)v106, type metadata accessor for ModelsR4.Condition);
        char v55 = _s23HealthRecordsExtraction8ModelsR4V9ConditionV2eeoiySbAE_AEtFZ_0(v29, v57);
        uint64_t v58 = type metadata accessor for ModelsR4.Condition;
        sub_232EA3DC4((uint64_t)v57, type metadata accessor for ModelsR4.Condition);
        uint64_t v59 = (uint64_t)v29;
        goto LABEL_17;
      }
      sub_232EA3DC4((uint64_t)v29, type metadata accessor for ModelsR4.Condition);
      goto LABEL_31;
    case 3u:
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v26, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v60 = v116;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v61 = v107;
        sub_232F3718C(v60, (uint64_t)v107, type metadata accessor for ModelsR4.DiagnosticReport);
        char v55 = _s23HealthRecordsExtraction8ModelsR4V16DiagnosticReportV2eeoiySbAE_AEtFZ_0(v26, (uint64_t)v61);
        uint64_t v62 = type metadata accessor for ModelsR4.DiagnosticReport;
        goto LABEL_16;
      }
      uint64_t v95 = type metadata accessor for ModelsR4.DiagnosticReport;
      goto LABEL_28;
    case 4u:
      uint64_t v26 = v111;
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v111, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v63 = v116;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v61 = v108;
        sub_232F3718C(v63, (uint64_t)v108, type metadata accessor for ModelsR4.DocumentReference);
        char v55 = _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV2eeoiySbAE_AEtFZ_0((uint64_t)v26, (uint64_t)v61);
        uint64_t v62 = type metadata accessor for ModelsR4.DocumentReference;
        goto LABEL_16;
      }
      uint64_t v95 = type metadata accessor for ModelsR4.DocumentReference;
      goto LABEL_28;
    case 5u:
      uint64_t v26 = v112;
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v112, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v64 = v116;
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v61 = v109;
        sub_232F3718C(v64, (uint64_t)v109, type metadata accessor for ModelsR4.Immunization);
        char v55 = _s23HealthRecordsExtraction8ModelsR4V12ImmunizationV2eeoiySbAE_AEtFZ_0((uint64_t)v26, (uint64_t)v61);
        uint64_t v62 = type metadata accessor for ModelsR4.Immunization;
        goto LABEL_16;
      }
      uint64_t v95 = type metadata accessor for ModelsR4.Immunization;
      goto LABEL_28;
    case 6u:
      uint64_t v26 = v113;
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v113, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v65 = v116;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v61 = v110;
        sub_232F3718C(v65, (uint64_t)v110, type metadata accessor for ModelsR4.Observation);
        char v55 = _s23HealthRecordsExtraction8ModelsR4V11ObservationV2eeoiySbAE_AEtFZ_0((uint64_t)v26, v61);
        uint64_t v62 = type metadata accessor for ModelsR4.Observation;
LABEL_16:
        uint64_t v58 = v62;
        sub_232EA3DC4((uint64_t)v61, v62);
        uint64_t v59 = (uint64_t)v26;
LABEL_17:
        sub_232EA3DC4(v59, v58);
        goto LABEL_35;
      }
      uint64_t v95 = type metadata accessor for ModelsR4.Observation;
LABEL_28:
      sub_232EA3DC4((uint64_t)v26, v95);
      goto LABEL_31;
    case 7u:
      uint64_t v66 = v114;
      sub_232EBDBF8((uint64_t)v38, v114, type metadata accessor for ModelsR4.ResourceProxy);
      long long v67 = *(_OWORD *)(v66 + 112);
      long long v135 = *(_OWORD *)(v66 + 96);
      long long v136 = v67;
      long long v137 = *(_OWORD *)(v66 + 128);
      uint64_t v138 = *(void *)(v66 + 144);
      long long v68 = *(_OWORD *)(v66 + 48);
      long long v131 = *(_OWORD *)(v66 + 32);
      long long v132 = v68;
      long long v69 = *(_OWORD *)(v66 + 80);
      long long v133 = *(_OWORD *)(v66 + 64);
      long long v134 = v69;
      long long v70 = *(_OWORD *)(v66 + 16);
      long long v129 = *(_OWORD *)v66;
      long long v130 = v70;
      char v71 = (long long *)v116;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        long long v72 = v71[7];
        long long v73 = v71[5];
        long long v125 = v71[6];
        long long v126 = v72;
        long long v74 = v71[7];
        long long v127 = v71[8];
        long long v75 = v71[3];
        long long v76 = v71[1];
        v122[1] = v71[2];
        v122[2] = v75;
        long long v77 = v71[3];
        long long v78 = v71[5];
        long long v123 = v71[4];
        long long v124 = v78;
        long long v79 = v71[1];
        long long v121 = *v71;
        v122[0] = v79;
        long long v80 = *(_OWORD *)(v66 + 112);
        v119[6] = *(_OWORD *)(v66 + 96);
        v119[7] = v80;
        v119[8] = *(_OWORD *)(v66 + 128);
        long long v81 = *(_OWORD *)(v66 + 48);
        v119[2] = *(_OWORD *)(v66 + 32);
        v119[3] = v81;
        long long v82 = *(_OWORD *)(v66 + 80);
        v119[4] = *(_OWORD *)(v66 + 64);
        v119[5] = v82;
        long long v83 = *(_OWORD *)(v66 + 16);
        v119[0] = *(_OWORD *)v66;
        v119[1] = v83;
        v117[6] = v125;
        v117[7] = v74;
        v117[8] = v71[8];
        v117[2] = v122[1];
        v117[3] = v77;
        v117[4] = v123;
        v117[5] = v73;
        uint64_t v128 = *((void *)v71 + 18);
        uint64_t v120 = *(void *)(v66 + 144);
        uint64_t v118 = *((void *)v71 + 18);
        v117[0] = v121;
        v117[1] = v76;
        char v55 = _s23HealthRecordsExtraction8ModelsR4V7PatientV2eeoiySbAE_AEtFZ_0((uint64_t)v119, (uint64_t)v117);
        sub_232EA49DC((uint64_t)&v121);
        sub_232EA49DC((uint64_t)&v129);
        goto LABEL_35;
      }
      sub_232EA49DC((uint64_t)&v129);
      goto LABEL_31;
    case 8u:
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v15, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v84 = v15[1];
      uint64_t v85 = v15[3];
      uint64_t v86 = v15[5];
      uint64_t v87 = (uint64_t *)v116;
      if (swift_getEnumCaseMultiPayload() != 8) {
        goto LABEL_30;
      }
      uint64_t v88 = v15[4];
      uint64_t v89 = v15[2];
      uint64_t v90 = *v15;
      uint64_t v91 = *v87;
      uint64_t v92 = v87[1];
      uint64_t v93 = v87[2];
      uint64_t v94 = v87[5];
      *(void *)&long long v129 = v90;
      *((void *)&v129 + 1) = v84;
      *(void *)&long long v130 = v89;
      *((void *)&v130 + 1) = v85;
      *(void *)&long long v131 = v88;
      *((void *)&v131 + 1) = v86;
      *(void *)&long long v121 = v91;
      *((void *)&v121 + 1) = v92;
      long long v116 = *(_OWORD *)(v87 + 3);
      *(_OWORD *)((char *)v122 + 8) = v116;
      *(void *)&v122[0] = v93;
      *((void *)&v122[1] + 1) = v94;
      char v55 = _s23HealthRecordsExtraction15UnknownResourceV2eeoiySbAC_ACtFZ_0(&v129, &v121);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_34;
    default:
      sub_232EBDBF8((uint64_t)v38, (uint64_t)v34, type metadata accessor for ModelsR4.ResourceProxy);
      uint64_t v41 = v34[1];
      uint64_t v42 = v34[3];
      uint64_t v43 = v34[5];
      uint64_t v44 = v34[7];
      uint64_t v45 = (uint64_t *)v116;
      if (swift_getEnumCaseMultiPayload())
      {
        swift_bridgeObjectRelease();
LABEL_30:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_31:
        sub_232EA3DC4((uint64_t)v38, (uint64_t (*)(void))sub_232F372EC);
        char v55 = 0;
      }
      else
      {
        uint64_t v96 = v34[6];
        uint64_t v97 = v34[4];
        uint64_t v98 = v34[2];
        uint64_t v99 = *v34;
        uint64_t v100 = *v45;
        uint64_t v101 = v45[1];
        uint64_t v102 = v45[2];
        uint64_t v103 = v45[7];
        *(void *)&long long v129 = v99;
        *((void *)&v129 + 1) = v41;
        *(void *)&long long v130 = v98;
        *((void *)&v130 + 1) = v42;
        *(void *)&long long v131 = v97;
        *((void *)&v131 + 1) = v43;
        *(void *)&long long v132 = v96;
        *((void *)&v132 + 1) = v44;
        *(void *)&long long v121 = v100;
        *((void *)&v121 + 1) = v101;
        long long v115 = *(_OWORD *)(v45 + 3);
        *(_OWORD *)((char *)v122 + 8) = v115;
        long long v116 = *(_OWORD *)(v45 + 5);
        *(_OWORD *)((char *)&v122[1] + 8) = v116;
        *(void *)&v122[0] = v102;
        *((void *)&v122[2] + 1) = v103;
        char v55 = _s23HealthRecordsExtraction8ModelsR4V6BinaryV2eeoiySbAE_AEtFZ_0(&v129, &v121);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_33:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_34:
        swift_bridgeObjectRelease();
LABEL_35:
        sub_232EA3DC4((uint64_t)v38, type metadata accessor for ModelsR4.ResourceProxy);
      }
      return v55 & 1;
  }
}

BOOL _s23HealthRecordsExtraction8ModelsR4V6BundleV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_23309C220(), BOOL result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = swift_bridgeObjectRetain();
      char v12 = sub_232E939F0(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
    else if (v6)
    {
      return 0;
    }
    if (v4) {
      return v7 && (v3 == v5 && v4 == v7 || (sub_23309C220() & 1) != 0);
    }
    return !v7;
  }
  return result;
}

unint64_t sub_232EBCCC8()
{
  unint64_t result = qword_268756960;
  if (!qword_268756960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756960);
  }
  return result;
}

uint64_t sub_232EBCD1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_232EA3854(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_232EBCD8C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_232EA3854(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t sub_232EBCE0C()
{
  unint64_t result = qword_268756970;
  if (!qword_268756970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756970);
  }
  return result;
}

id sub_232EBCE60(id result, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_232EBCE74(result, a2, a3);
  }
  return result;
}

id sub_232EBCE74(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      unint64_t result = result;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_232EBCEC8()
{
  unint64_t result = qword_268756978;
  if (!qword_268756978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756978);
  }
  return result;
}

void sub_232EBCF1C(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    sub_232EBCF30(a1, a2, a3);
  }
}

void sub_232EBCF30(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:

      break;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

unint64_t sub_232EBCF84()
{
  unint64_t result = qword_268756998;
  if (!qword_268756998)
  {
    sub_232EA3854(255, &qword_268756718, type metadata accessor for ModelsR4.Bundle.BundleEntry, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687569A0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756998);
  }
  return result;
}

uint64_t sub_232EBD054(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_232EBD064()
{
  unint64_t result = qword_2687569B0;
  if (!qword_2687569B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687569B0);
  }
  return result;
}

unint64_t sub_232EBD0B8()
{
  unint64_t result = qword_2687569B8;
  if (!qword_2687569B8)
  {
    sub_232EBDA84(255, &qword_268756758);
    sub_232EBD064();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687569B8);
  }
  return result;
}

unint64_t sub_232EBD138()
{
  unint64_t result = qword_2687569D8;
  if (!qword_2687569D8)
  {
    sub_232EA3854(255, &qword_268756780, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687569E0, (void (*)(uint64_t))type metadata accessor for Annotation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687569D8);
  }
  return result;
}

unint64_t sub_232EBD208()
{
  unint64_t result = qword_2687569F0;
  if (!qword_2687569F0)
  {
    sub_232EA3854(255, &qword_2687567B0, (uint64_t (*)(uint64_t))type metadata accessor for Extension, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687569F8, (void (*)(uint64_t))type metadata accessor for Extension);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687569F0);
  }
  return result;
}

unint64_t sub_232EBD2D8()
{
  unint64_t result = qword_268756A00;
  if (!qword_268756A00)
  {
    sub_232EA3854(255, &qword_2687567C8, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_2687569D0, (void (*)(uint64_t))type metadata accessor for Reference);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A00);
  }
  return result;
}

unint64_t sub_232EBD3A8()
{
  unint64_t result = qword_268756A08;
  if (!qword_268756A08)
  {
    sub_232EA3854(255, &qword_2687567D8, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756A10, (void (*)(uint64_t))type metadata accessor for Attachment);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A08);
  }
  return result;
}

unint64_t sub_232EBD478()
{
  unint64_t result = qword_268756A20;
  if (!qword_268756A20)
  {
    sub_232EA3854(255, &qword_268756810, type metadata accessor for ModelsR4.DocumentReferenceContent, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756A28, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A20);
  }
  return result;
}

unint64_t sub_232EBD548()
{
  unint64_t result = qword_268756A40;
  if (!qword_268756A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A40);
  }
  return result;
}

unint64_t sub_232EBD59C()
{
  unint64_t result = qword_268756A58;
  if (!qword_268756A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A58);
  }
  return result;
}

uint64_t sub_232EBD5F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    sub_232E967F8(a2, a3);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_232EBD66C()
{
  unint64_t result = qword_268756A70;
  if (!qword_268756A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A70);
  }
  return result;
}

unint64_t sub_232EBD6C0()
{
  unint64_t result = qword_268756A78;
  if (!qword_268756A78)
  {
    sub_232EBDA84(255, &qword_268756850);
    sub_232EBD740();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A78);
  }
  return result;
}

unint64_t sub_232EBD740()
{
  unint64_t result = qword_268756A80;
  if (!qword_268756A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A80);
  }
  return result;
}

unint64_t sub_232EBD794()
{
  unint64_t result = qword_268756A88;
  if (!qword_268756A88)
  {
    sub_232EA3854(255, &qword_268756868, type metadata accessor for ModelsR4.ImmunizationPerformer, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756A90, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A88);
  }
  return result;
}

unint64_t sub_232EBD864()
{
  unint64_t result = qword_268756A98;
  if (!qword_268756A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756A98);
  }
  return result;
}

unint64_t sub_232EBD8B8()
{
  unint64_t result = qword_268756AA8;
  if (!qword_268756AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756AA8);
  }
  return result;
}

unint64_t sub_232EBD90C()
{
  unint64_t result = qword_268756AC0;
  if (!qword_268756AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756AC0);
  }
  return result;
}

unint64_t sub_232EBD960()
{
  unint64_t result = qword_268756AE0;
  if (!qword_268756AE0)
  {
    sub_232EA3854(255, &qword_2687568A8, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756AE8, (void (*)(uint64_t))type metadata accessor for ReferenceRange);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756AE0);
  }
  return result;
}

unint64_t sub_232EBDA30()
{
  unint64_t result = qword_268756AF8;
  if (!qword_268756AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756AF8);
  }
  return result;
}

void sub_232EBDA84(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_23309BA00();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_232EBDACC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_232EBDA84(255, (unint64_t *)&qword_268756B00);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_232EBDB3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_232EBDBA4()
{
  unint64_t result = qword_268756B28;
  if (!qword_268756B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B28);
  }
  return result;
}

uint64_t sub_232EBDBF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_232EBDC60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_232EBDCC8()
{
  unint64_t result = qword_268756B40;
  if (!qword_268756B40)
  {
    sub_232EA3854(255, &qword_2687568D8, type metadata accessor for ModelsR4.HumanName, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756B48, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B40);
  }
  return result;
}

unint64_t sub_232EBDD98()
{
  unint64_t result = qword_268756B50;
  if (!qword_268756B50)
  {
    sub_232EBDA84(255, &qword_2687568F0);
    sub_232EBDE18();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B50);
  }
  return result;
}

unint64_t sub_232EBDE18()
{
  unint64_t result = qword_268756B58;
  if (!qword_268756B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B58);
  }
  return result;
}

unint64_t sub_232EBDE6C()
{
  unint64_t result = qword_268756B60;
  if (!qword_268756B60)
  {
    sub_232EA3854(255, (unint64_t *)&qword_268756908, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756B68, (void (*)(uint64_t))type metadata accessor for Identifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B60);
  }
  return result;
}

unint64_t sub_232EBDF3C()
{
  unint64_t result = qword_268756B70;
  if (!qword_268756B70)
  {
    sub_232EBDA84(255, &qword_268756920);
    sub_232EBDFBC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B70);
  }
  return result;
}

unint64_t sub_232EBDFBC()
{
  unint64_t result = qword_268756B78;
  if (!qword_268756B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B78);
  }
  return result;
}

unint64_t sub_232EBE010()
{
  unint64_t result = qword_268756B80;
  if (!qword_268756B80)
  {
    sub_232EA3854(255, &qword_268756938, type metadata accessor for ModelsR4.PatientLink, MEMORY[0x263F8D488]);
    sub_232E9B834(&qword_268756B88, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756B80);
  }
  return result;
}

uint64_t sub_232EBE0E0(void *a1)
{
  a1[1] = sub_232E9B834((unint64_t *)&qword_268756968, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  a1[2] = sub_232E9B834(&qword_268756988, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  uint64_t result = sub_232E9B834(&qword_268756B90, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBE18C()
{
  return sub_232E9B834(&qword_268756B98, (void (*)(uint64_t))type metadata accessor for ModelsR4.ResourceProxy);
}

uint64_t sub_232EBE1D4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF548(a1, a2, a3, (uint64_t (*)(void))sub_232EBE214, (uint64_t (*)(void))sub_232EBE268, (uint64_t (*)(void))sub_232EBE2BC);
}

unint64_t sub_232EBE214()
{
  unint64_t result = qword_268756BA0;
  if (!qword_268756BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BA0);
  }
  return result;
}

unint64_t sub_232EBE268()
{
  unint64_t result = qword_268756BA8;
  if (!qword_268756BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BA8);
  }
  return result;
}

unint64_t sub_232EBE2BC()
{
  unint64_t result = qword_268756BB0;
  if (!qword_268756BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BB0);
  }
  return result;
}

uint64_t sub_232EBE310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF744(a1, a2, a3, (uint64_t (*)(void))sub_232EBE214, (uint64_t (*)(void))sub_232EBE268);
}

unint64_t sub_232EBE340()
{
  unint64_t result = qword_268756BB8;
  if (!qword_268756BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BB8);
  }
  return result;
}

uint64_t sub_232EBE394(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756728, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
  a1[2] = sub_232E9B834(&qword_2687569A0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
  uint64_t result = sub_232E9B834(&qword_268756BC0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBE440()
{
  return sub_232E9B834(&qword_268756BC8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Bundle.BundleEntry);
}

uint64_t sub_232EBE488(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF548(a1, a2, a3, (uint64_t (*)(void))sub_232EBE4C8, (uint64_t (*)(void))sub_232EBE51C, (uint64_t (*)(void))sub_232EBE570);
}

unint64_t sub_232EBE4C8()
{
  unint64_t result = qword_268756BD0;
  if (!qword_268756BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BD0);
  }
  return result;
}

unint64_t sub_232EBE51C()
{
  unint64_t result = qword_268756BD8;
  if (!qword_268756BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BD8);
  }
  return result;
}

unint64_t sub_232EBE570()
{
  unint64_t result = qword_268756BE0;
  if (!qword_268756BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BE0);
  }
  return result;
}

uint64_t sub_232EBE5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF744(a1, a2, a3, (uint64_t (*)(void))sub_232EBE4C8, (uint64_t (*)(void))sub_232EBE51C);
}

unint64_t sub_232EBE5F4()
{
  unint64_t result = qword_268756BE8;
  if (!qword_268756BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756BE8);
  }
  return result;
}

uint64_t sub_232EBE648(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756BF0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  a1[2] = sub_232E9B834((unint64_t *)&qword_268756BF8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  uint64_t result = sub_232E9B834(&qword_268756C00, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBE6F4(uint64_t a1)
{
  uint64_t result = sub_232E9B834(&qword_2687566B8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232EBE74C()
{
  return sub_232E9B834(&qword_268756C08, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
}

uint64_t sub_232EBE794(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232E9B834(&qword_268756BF0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  uint64_t result = sub_232E9B834((unint64_t *)&qword_268756BF8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Condition);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232EBE818(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756C10, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  a1[2] = sub_232E9B834(&qword_268756C18, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  uint64_t result = sub_232E9B834(&qword_268756C20, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBE8C4(uint64_t a1)
{
  uint64_t result = sub_232E9B834(&qword_2687566B0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232EBE91C()
{
  return sub_232E9B834(&qword_268756C28, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t sub_232EBE964(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232E9B834(&qword_268756C10, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  uint64_t result = sub_232E9B834(&qword_268756C18, (void (*)(uint64_t))type metadata accessor for ModelsR4.DiagnosticReport);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232EBE9E8(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756C30, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  a1[2] = sub_232E9B834(&qword_268756C38, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  uint64_t result = sub_232E9B834(&qword_268756C40, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBEA94(uint64_t a1)
{
  uint64_t result = sub_232E9B834(&qword_2687566A8, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232EBEAEC()
{
  return sub_232E9B834(&qword_268756C48, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
}

uint64_t sub_232EBEB34(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232E9B834(&qword_268756C30, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  uint64_t result = sub_232E9B834(&qword_268756C38, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReference);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232EBEBB8(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756820, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
  a1[2] = sub_232E9B834(&qword_268756A28, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
  uint64_t result = sub_232E9B834(&qword_268756C50, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBEC64()
{
  return sub_232E9B834(&qword_268756C58, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_232EBECAC(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756828, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  a1[2] = sub_232E9B834(&qword_268756A30, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  uint64_t result = sub_232E9B834(&qword_268756C60, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBED58()
{
  return sub_232E9B834(&qword_268756C68, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t sub_232EBEDA0(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756C70, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  a1[2] = sub_232E9B834((unint64_t *)&qword_268756C78, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  uint64_t result = sub_232E9B834(&qword_268756C80, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBEE4C(uint64_t a1)
{
  uint64_t result = sub_232E9B834(&qword_2687566A0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232EBEEA4()
{
  return sub_232E9B834(&qword_268756C88, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
}

uint64_t sub_232EBEEEC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232E9B834(&qword_268756C70, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  uint64_t result = sub_232E9B834((unint64_t *)&qword_268756C78, (void (*)(uint64_t))type metadata accessor for ModelsR4.Immunization);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232EBEF70(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF548(a1, a2, a3, (uint64_t (*)(void))sub_232EA412C, (uint64_t (*)(void))sub_232EBD740, (uint64_t (*)(void))sub_232EBEFB0);
}

unint64_t sub_232EBEFB0()
{
  unint64_t result = qword_268756C90;
  if (!qword_268756C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756C90);
  }
  return result;
}

unint64_t sub_232EBF008()
{
  unint64_t result = qword_268756C98;
  if (!qword_268756C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756C98);
  }
  return result;
}

uint64_t sub_232EBF05C(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756878, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
  a1[2] = sub_232E9B834(&qword_268756A90, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
  uint64_t result = sub_232E9B834(&qword_268756CA0, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBF108()
{
  return sub_232E9B834(&qword_268756CA8, (void (*)(uint64_t))type metadata accessor for ModelsR4.ImmunizationPerformer);
}

uint64_t sub_232EBF150(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756CB0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  a1[2] = sub_232E9B834((unint64_t *)&qword_268756CB8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  uint64_t result = sub_232E9B834(&qword_268756CC0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBF1FC(uint64_t a1)
{
  uint64_t result = sub_232E9B834(&qword_268756698, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_232EBF254()
{
  return sub_232E9B834(&qword_268756CC8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_232EBF29C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_232E9B834(&qword_268756CB0, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  uint64_t result = sub_232E9B834((unint64_t *)&qword_268756CB8, (void (*)(uint64_t))type metadata accessor for ModelsR4.Observation);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_232EBF320(void *a1)
{
  a1[1] = sub_232E9B834(&qword_2687568E8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  a1[2] = sub_232E9B834(&qword_268756B48, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  uint64_t result = sub_232E9B834(&qword_268756CD0, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBF3CC()
{
  return sub_232E9B834(&qword_268756CD8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_232EBF414(void *a1)
{
  a1[1] = sub_232E9B834(&qword_268756948, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
  a1[2] = sub_232E9B834(&qword_268756B88, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
  uint64_t result = sub_232E9B834(&qword_268756CE0, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
  a1[3] = result;
  return result;
}

uint64_t sub_232EBF4C0()
{
  return sub_232E9B834(&qword_268756CE8, (void (*)(uint64_t))type metadata accessor for ModelsR4.PatientLink);
}

uint64_t sub_232EBF508(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF548(a1, a2, a3, (uint64_t (*)(void))sub_232EBF59C, (uint64_t (*)(void))sub_232EBF5F0, (uint64_t (*)(void))sub_232EBF644);
}

uint64_t sub_232EBF548(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_232EBF59C()
{
  unint64_t result = qword_268756CF0;
  if (!qword_268756CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756CF0);
  }
  return result;
}

unint64_t sub_232EBF5F0()
{
  unint64_t result = qword_268756CF8;
  if (!qword_268756CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756CF8);
  }
  return result;
}

unint64_t sub_232EBF644()
{
  unint64_t result = qword_268756D00;
  if (!qword_268756D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756D00);
  }
  return result;
}

unint64_t sub_232EBF698(uint64_t a1)
{
  unint64_t result = sub_232E9B6A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_232EBF6C4()
{
  unint64_t result = qword_268756D08;
  if (!qword_268756D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756D08);
  }
  return result;
}

uint64_t sub_232EBF718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232EBF744(a1, a2, a3, (uint64_t (*)(void))sub_232EBF59C, (uint64_t (*)(void))sub_232EBF5F0);
}

uint64_t sub_232EBF744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4()
{
  return &type metadata for ModelsR4;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsR4.ResourceProxy(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v12;
        uint64_t v13 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v13;
        *(void *)(a1 + 32) = v3[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v14 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v14;
        uint64_t v15 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v15;
        uint64_t v16 = v3[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v16 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 32) = v16;
        uint64_t v17 = v3[6];
        if (v17 == 1)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 5);
          *(void *)(a1 + 56) = v3[7];
        }
        else
        {
          *(void *)(a1 + 40) = v3[5];
          *(void *)(a1 + 48) = v17;
          *(void *)(a1 + 56) = v3[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v93 = v3[9];
        if (v93 == 1)
        {
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v3 + 4);
          *(void *)(a1 + 80) = v3[10];
        }
        else
        {
          *(void *)(a1 + 64) = v3[8];
          *(void *)(a1 + 72) = v93;
          *(void *)(a1 + 80) = v3[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 88) = v3[11];
        uint64_t v97 = v3[13];
        swift_bridgeObjectRetain();
        if (v97 == 1)
        {
          *(_OWORD *)(a1 + 96) = *((_OWORD *)v3 + 6);
          *(void *)(a1 + 112) = v3[14];
        }
        else
        {
          *(void *)(a1 + 96) = v3[12];
          *(void *)(a1 + 104) = v97;
          *(void *)(a1 + 112) = v3[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v98 = v3[16];
        if (v98 == 1)
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(v3 + 15);
          *(void *)(a1 + 136) = v3[17];
        }
        else
        {
          *(void *)(a1 + 120) = v3[15];
          *(void *)(a1 + 128) = v98;
          *(void *)(a1 + 136) = v3[17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 144) = v3[18];
        uint64_t v99 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v100 = v99[13];
        uint64_t v101 = (unsigned char *)(a1 + v100);
        uint64_t v102 = (char *)v3 + v100;
        uint64_t v103 = type metadata accessor for FHIRDateTime();
        v681 = *(void **)(v103 - 8);
        uint64_t v104 = (unsigned int (*)(void, void, void))v681[6];
        swift_bridgeObjectRetain();
        v692 = v99;
        v670 = v104;
        if (v104(v102, 1, v103))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          unsigned char *v101 = *v102;
          *((void *)v101 + 1) = *((void *)v102 + 1);
          *((_DWORD *)v101 + 4) = *((_DWORD *)v102 + 4);
          uint64_t v114 = *((void *)v102 + 7);
          if (v114 == 1)
          {
            long long v115 = *(_OWORD *)(v102 + 40);
            *(_OWORD *)(v101 + 24) = *(_OWORD *)(v102 + 24);
            *(_OWORD *)(v101 + 40) = v115;
            *((void *)v101 + 7) = *((void *)v102 + 7);
          }
          else
          {
            v101[24] = v102[24];
            *(_WORD *)(v101 + 25) = *(_WORD *)(v102 + 25);
            *(_OWORD *)(v101 + 28) = *(_OWORD *)(v102 + 28);
            *((_DWORD *)v101 + 11) = *((_DWORD *)v102 + 11);
            *((void *)v101 + 6) = *((void *)v102 + 6);
            *((void *)v101 + 7) = v114;
            swift_bridgeObjectRetain();
          }
          uint64_t v141 = *(int *)(v103 + 28);
          uint64_t v142 = &v101[v141];
          uint64_t v143 = &v102[v141];
          uint64_t v144 = sub_23309B300();
          uint64_t v145 = *(void *)(v144 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v145 + 16))(v142, v143, v144);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
          }
          uint64_t v99 = v692;
          uint64_t v221 = *(int *)(v103 + 32);
          uint64_t v222 = &v101[v221];
          uint64_t v223 = &v102[v221];
          uint64_t v224 = v223[1];
          *uint64_t v222 = *v223;
          v222[1] = v224;
          uint64_t v225 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
          swift_bridgeObjectRetain();
          v225(v101, 0, 1, v103);
          uint64_t v104 = (unsigned int (*)(void, void, void))v670;
        }
        uint64_t v226 = v99[14];
        uint64_t v227 = (unsigned char *)(a1 + v226);
        uint64_t v228 = (char *)v3 + v226;
        uint64_t v229 = type metadata accessor for Period();
        __dstb = *(void **)(v229 - 8);
        uint64_t v230 = (unsigned int (*)(void, void, void))__dstb[6];
        __srca = (void *)v229;
        if (v230(v228, 1, v229))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v227, v228, *(void *)(*(void *)(v231 - 8) + 64));
        }
        else
        {
          v641 = v230;
          if (v104(v228, 1, v103))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v227, v228, *(void *)(*(void *)(v232 - 8) + 64));
          }
          else
          {
            *uint64_t v227 = *v228;
            *((void *)v227 + 1) = *((void *)v228 + 1);
            *((_DWORD *)v227 + 4) = *((_DWORD *)v228 + 4);
            uint64_t v279 = *((void *)v228 + 7);
            if (v279 == 1)
            {
              long long v280 = *(_OWORD *)(v228 + 40);
              *(_OWORD *)(v227 + 24) = *(_OWORD *)(v228 + 24);
              *(_OWORD *)(v227 + 40) = v280;
              *((void *)v227 + 7) = *((void *)v228 + 7);
            }
            else
            {
              v227[24] = v228[24];
              *(_WORD *)(v227 + 25) = *(_WORD *)(v228 + 25);
              *(_OWORD *)(v227 + 28) = *(_OWORD *)(v228 + 28);
              *((_DWORD *)v227 + 11) = *((_DWORD *)v228 + 11);
              *((void *)v227 + 6) = *((void *)v228 + 6);
              *((void *)v227 + 7) = v279;
              swift_bridgeObjectRetain();
            }
            uint64_t v293 = *(int *)(v103 + 28);
            v294 = &v227[v293];
            v295 = &v228[v293];
            uint64_t v296 = sub_23309B300();
            uint64_t v297 = *(void *)(v296 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v297 + 48))(v295, 1, v296))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v294, v295, *(void *)(*(void *)(v298 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v297 + 16))(v294, v295, v296);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v297 + 56))(v294, 0, 1, v296);
            }
            uint64_t v332 = *(int *)(v103 + 32);
            v333 = &v227[v332];
            v334 = &v228[v332];
            uint64_t v335 = v334[1];
            void *v333 = *v334;
            v333[1] = v335;
            v336 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
            swift_bridgeObjectRetain();
            v336(v227, 0, 1, v103);
            uint64_t v99 = v692;
            uint64_t v104 = (unsigned int (*)(void, void, void))v670;
            uint64_t v229 = (uint64_t)__srca;
          }
          uint64_t v337 = *(int *)(v229 + 20);
          v338 = &v227[v337];
          v339 = &v228[v337];
          if (v104(v339, 1, v103))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v338, v339, *(void *)(*(void *)(v340 - 8) + 64));
          }
          else
          {
            unsigned char *v338 = *v339;
            *((void *)v338 + 1) = *((void *)v339 + 1);
            *((_DWORD *)v338 + 4) = *((_DWORD *)v339 + 4);
            uint64_t v341 = *((void *)v339 + 7);
            if (v341 == 1)
            {
              long long v342 = *(_OWORD *)(v339 + 40);
              *(_OWORD *)(v338 + 24) = *(_OWORD *)(v339 + 24);
              *(_OWORD *)(v338 + 40) = v342;
              *((void *)v338 + 7) = *((void *)v339 + 7);
            }
            else
            {
              v338[24] = v339[24];
              *(_WORD *)(v338 + 25) = *(_WORD *)(v339 + 25);
              *(_OWORD *)(v338 + 28) = *(_OWORD *)(v339 + 28);
              *((_DWORD *)v338 + 11) = *((_DWORD *)v339 + 11);
              *((void *)v338 + 6) = *((void *)v339 + 6);
              *((void *)v338 + 7) = v341;
              swift_bridgeObjectRetain();
            }
            uint64_t v343 = *(int *)(v103 + 28);
            v637 = &v338[v343];
            v344 = &v339[v343];
            uint64_t v345 = sub_23309B300();
            uint64_t v346 = *(void *)(v345 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v346 + 48))(v344, 1, v345))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v637, v344, *(void *)(*(void *)(v347 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v346 + 16))(v637, v344, v345);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v346 + 56))(v637, 0, 1, v345);
            }
            uint64_t v99 = v692;
            uint64_t v411 = *(int *)(v103 + 32);
            v412 = &v338[v411];
            v413 = &v339[v411];
            uint64_t v414 = v413[1];
            void *v412 = *v413;
            v412[1] = v414;
            v415 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
            swift_bridgeObjectRetain();
            v415(v338, 0, 1, v103);
            uint64_t v104 = (unsigned int (*)(void, void, void))v670;
            uint64_t v229 = (uint64_t)__srca;
          }
          uint64_t v230 = v641;
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstb[7])(v227, 0, 1, v229);
        }
        uint64_t v416 = v99[15];
        v417 = (void *)(a1 + v416);
        v418 = (void *)((char *)v3 + v416);
        uint64_t v419 = v418[1];
        void *v417 = *v418;
        v417[1] = v419;
        uint64_t v420 = v99[16];
        v421 = (unsigned char *)(a1 + v420);
        v422 = (char *)v3 + v420;
        swift_bridgeObjectRetain();
        if (v104(v422, 1, v103))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v421, v422, *(void *)(*(void *)(v423 - 8) + 64));
        }
        else
        {
          unsigned char *v421 = *v422;
          *((void *)v421 + 1) = *((void *)v422 + 1);
          *((_DWORD *)v421 + 4) = *((_DWORD *)v422 + 4);
          uint64_t v424 = *((void *)v422 + 7);
          v645 = v230;
          if (v424 == 1)
          {
            long long v425 = *(_OWORD *)(v422 + 40);
            *(_OWORD *)(v421 + 24) = *(_OWORD *)(v422 + 24);
            *(_OWORD *)(v421 + 40) = v425;
            *((void *)v421 + 7) = *((void *)v422 + 7);
          }
          else
          {
            v421[24] = v422[24];
            *(_WORD *)(v421 + 25) = *(_WORD *)(v422 + 25);
            *(_OWORD *)(v421 + 28) = *(_OWORD *)(v422 + 28);
            *((_DWORD *)v421 + 11) = *((_DWORD *)v422 + 11);
            *((void *)v421 + 6) = *((void *)v422 + 6);
            *((void *)v421 + 7) = v424;
            swift_bridgeObjectRetain();
          }
          uint64_t v426 = *(int *)(v103 + 28);
          v427 = &v421[v426];
          v428 = &v422[v426];
          uint64_t v429 = sub_23309B300();
          uint64_t v430 = *(void *)(v429 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v430 + 48))(v428, 1, v429))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v427, v428, *(void *)(*(void *)(v431 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v430 + 16))(v427, v428, v429);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v430 + 56))(v427, 0, 1, v429);
          }
          uint64_t v99 = v692;
          uint64_t v230 = v645;
          uint64_t v432 = *(int *)(v103 + 32);
          v433 = &v421[v432];
          v434 = &v422[v432];
          uint64_t v435 = v434[1];
          void *v433 = *v434;
          v433[1] = v435;
          v436 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
          swift_bridgeObjectRetain();
          v436(v421, 0, 1, v103);
          uint64_t v104 = (unsigned int (*)(void, void, void))v670;
          uint64_t v229 = (uint64_t)__srca;
        }
        uint64_t v437 = v99[17];
        v438 = (unsigned char *)(a1 + v437);
        v439 = (char *)v3 + v437;
        if (v230((char *)v3 + v437, 1, v229))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v438, v439, *(void *)(*(void *)(v440 - 8) + 64));
        }
        else
        {
          if (v104(v439, 1, v103))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v438, v439, *(void *)(*(void *)(v441 - 8) + 64));
          }
          else
          {
            unsigned char *v438 = *v439;
            *((void *)v438 + 1) = *((void *)v439 + 1);
            *((_DWORD *)v438 + 4) = *((_DWORD *)v439 + 4);
            uint64_t v442 = *((void *)v439 + 7);
            if (v442 == 1)
            {
              long long v443 = *(_OWORD *)(v439 + 40);
              *(_OWORD *)(v438 + 24) = *(_OWORD *)(v439 + 24);
              *(_OWORD *)(v438 + 40) = v443;
              *((void *)v438 + 7) = *((void *)v439 + 7);
            }
            else
            {
              v438[24] = v439[24];
              *(_WORD *)(v438 + 25) = *(_WORD *)(v439 + 25);
              *(_OWORD *)(v438 + 28) = *(_OWORD *)(v439 + 28);
              *((_DWORD *)v438 + 11) = *((_DWORD *)v439 + 11);
              *((void *)v438 + 6) = *((void *)v439 + 6);
              *((void *)v438 + 7) = v442;
              swift_bridgeObjectRetain();
            }
            uint64_t v444 = *(int *)(v103 + 28);
            v445 = &v438[v444];
            v446 = &v439[v444];
            uint64_t v447 = sub_23309B300();
            uint64_t v448 = *(void *)(v447 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v448 + 48))(v446, 1, v447))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v445, v446, *(void *)(*(void *)(v449 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v448 + 16))(v445, v446, v447);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v448 + 56))(v445, 0, 1, v447);
            }
            uint64_t v501 = *(int *)(v103 + 32);
            v502 = &v438[v501];
            v503 = &v439[v501];
            uint64_t v504 = v503[1];
            void *v502 = *v503;
            v502[1] = v504;
            v505 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
            swift_bridgeObjectRetain();
            v505(v438, 0, 1, v103);
            uint64_t v99 = v692;
            uint64_t v104 = (unsigned int (*)(void, void, void))v670;
            uint64_t v229 = (uint64_t)__srca;
          }
          uint64_t v506 = *(int *)(v229 + 20);
          v507 = &v438[v506];
          v508 = &v439[v506];
          if (v104(v508, 1, v103))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v507, v508, *(void *)(*(void *)(v509 - 8) + 64));
          }
          else
          {
            unsigned char *v507 = *v508;
            *((void *)v507 + 1) = *((void *)v508 + 1);
            *((_DWORD *)v507 + 4) = *((_DWORD *)v508 + 4);
            uint64_t v510 = *((void *)v508 + 7);
            if (v510 == 1)
            {
              long long v511 = *(_OWORD *)(v508 + 40);
              *(_OWORD *)(v507 + 24) = *(_OWORD *)(v508 + 24);
              *(_OWORD *)(v507 + 40) = v511;
              *((void *)v507 + 7) = *((void *)v508 + 7);
            }
            else
            {
              v507[24] = v508[24];
              *(_WORD *)(v507 + 25) = *(_WORD *)(v508 + 25);
              *(_OWORD *)(v507 + 28) = *(_OWORD *)(v508 + 28);
              *((_DWORD *)v507 + 11) = *((_DWORD *)v508 + 11);
              *((void *)v507 + 6) = *((void *)v508 + 6);
              *((void *)v507 + 7) = v510;
              swift_bridgeObjectRetain();
            }
            uint64_t v512 = *(int *)(v103 + 28);
            v665 = &v507[v512];
            v513 = &v508[v512];
            uint64_t v514 = sub_23309B300();
            uint64_t v515 = *(void *)(v514 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v515 + 48))(v513, 1, v514))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v665, v513, *(void *)(*(void *)(v516 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v515 + 16))(v665, v513, v514);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v515 + 56))(v665, 0, 1, v514);
            }
            uint64_t v517 = *(int *)(v103 + 32);
            v518 = &v507[v517];
            v519 = &v508[v517];
            uint64_t v520 = v519[1];
            void *v518 = *v519;
            v518[1] = v520;
            v521 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
            swift_bridgeObjectRetain();
            v521(v507, 0, 1, v103);
            uint64_t v99 = v692;
            uint64_t v104 = (unsigned int (*)(void, void, void))v670;
            uint64_t v229 = (uint64_t)__srca;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstb[7])(v438, 0, 1, v229);
        }
        uint64_t v522 = v99[18];
        v523 = (void *)(a1 + v522);
        v524 = (void *)((char *)v3 + v522);
        uint64_t v525 = v524[1];
        void *v523 = *v524;
        v523[1] = v525;
        uint64_t v526 = v99[19];
        v527 = (unsigned char *)(a1 + v526);
        v528 = (char *)v3 + v526;
        swift_bridgeObjectRetain();
        if (v104(v528, 1, v103))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v527, v528, *(void *)(*(void *)(v529 - 8) + 64));
        }
        else
        {
          unsigned char *v527 = *v528;
          *((void *)v527 + 1) = *((void *)v528 + 1);
          *((_DWORD *)v527 + 4) = *((_DWORD *)v528 + 4);
          uint64_t v530 = *((void *)v528 + 7);
          if (v530 == 1)
          {
            long long v531 = *(_OWORD *)(v528 + 40);
            *(_OWORD *)(v527 + 24) = *(_OWORD *)(v528 + 24);
            *(_OWORD *)(v527 + 40) = v531;
            *((void *)v527 + 7) = *((void *)v528 + 7);
          }
          else
          {
            v527[24] = v528[24];
            *(_WORD *)(v527 + 25) = *(_WORD *)(v528 + 25);
            *(_OWORD *)(v527 + 28) = *(_OWORD *)(v528 + 28);
            *((_DWORD *)v527 + 11) = *((_DWORD *)v528 + 11);
            *((void *)v527 + 6) = *((void *)v528 + 6);
            *((void *)v527 + 7) = v530;
            swift_bridgeObjectRetain();
          }
          uint64_t v532 = *(int *)(v103 + 28);
          v533 = &v527[v532];
          v534 = &v528[v532];
          uint64_t v535 = sub_23309B300();
          uint64_t v536 = *(void *)(v535 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v536 + 48))(v534, 1, v535))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v533, v534, *(void *)(*(void *)(v537 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v536 + 16))(v533, v534, v535);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v536 + 56))(v533, 0, 1, v535);
          }
          uint64_t v99 = v692;
          uint64_t v538 = *(int *)(v103 + 32);
          v539 = &v527[v538];
          v540 = &v528[v538];
          uint64_t v541 = v540[1];
          void *v539 = *v540;
          v539[1] = v541;
          v542 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v681[7];
          swift_bridgeObjectRetain();
          v542(v527, 0, 1, v103);
        }
        uint64_t v543 = v99[20];
        v544 = (void *)(a1 + v543);
        v545 = (void *)((char *)v3 + v543);
        uint64_t v546 = type metadata accessor for Reference();
        v547 = *(void **)(v546 - 8);
        v548 = (unsigned int (*)(void, void, void))v547[6];
        if (v548(v545, 1, v546))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v544, v545, *(void *)(*(void *)(v549 - 8) + 64));
        }
        else
        {
          v675 = v548;
          v687 = v547;
          uint64_t v550 = v545[1];
          void *v544 = *v545;
          v544[1] = v550;
          uint64_t v551 = v545[3];
          v544[2] = v545[2];
          v544[3] = v551;
          uint64_t v552 = *(int *)(v546 + 24);
          __dstc = (void *)((char *)v544 + v552);
          __srcf = (void *)v546;
          v553 = (void *)((char *)v545 + v552);
          uint64_t v554 = type metadata accessor for Identifier();
          uint64_t v555 = *(void *)(v554 - 8);
          v556 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v555 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v556(v553, 1, v554))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(__dstc, v553, *(void *)(*(void *)(v557 - 8) + 64));
            v547 = v687;
            uint64_t v99 = v692;
            v548 = (unsigned int (*)(void, void, void))v675;
            uint64_t v546 = (uint64_t)__srcf;
          }
          else
          {
            uint64_t v646 = v555;
            uint64_t v558 = v553[1];
            void *__dstc = *v553;
            __dstc[1] = v558;
            uint64_t v559 = v553[3];
            swift_bridgeObjectRetain();
            if (v559 == 1)
            {
              *((_OWORD *)__dstc + 1) = *((_OWORD *)v553 + 1);
              __dstc[4] = v553[4];
            }
            else
            {
              __dstc[2] = v553[2];
              __dstc[3] = v559;
              __dstc[4] = v553[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            v548 = (unsigned int (*)(void, void, void))v675;
            uint64_t v560 = v554;
            uint64_t v546 = (uint64_t)__srcf;
            uint64_t v639 = v560;
            uint64_t v561 = *(int *)(v560 + 24);
            v676 = (char *)__dstc + v561;
            v562 = (char *)v553 + v561;
            uint64_t v563 = sub_23309AF80();
            uint64_t v564 = *(void *)(v563 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v564 + 48))(v562, 1, v563))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v676, v562, *(void *)(*(void *)(v565 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v676, v562, v563);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v564 + 56))(v676, 0, 1, v563);
            }
            uint64_t v99 = v692;
            uint64_t v566 = *(int *)(v639 + 28);
            v567 = (void *)((char *)__dstc + v566);
            v568 = (void *)((char *)v553 + v566);
            uint64_t v569 = v568[1];
            void *v567 = *v568;
            v567[1] = v569;
            v570 = *(void (**)(void *, void, uint64_t, uint64_t))(v646 + 56);
            swift_bridgeObjectRetain();
            v570(__dstc, 0, 1, v639);
            v547 = v687;
          }
          ((void (*)(void *, void, uint64_t, uint64_t))v547[7])(v544, 0, 1, v546);
        }
        uint64_t v571 = v99[21];
        v572 = (void *)(a1 + v571);
        v573 = (void *)((char *)v3 + v571);
        if (v548((char *)v3 + v571, 1, v546))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v572, v573, *(void *)(*(void *)(v574 - 8) + 64));
        }
        else
        {
          v677 = v572;
          v688 = (void (**)(void *, void, uint64_t, uint64_t))v547;
          uint64_t v575 = v573[1];
          void *v572 = *v573;
          v572[1] = v575;
          uint64_t v576 = v573[3];
          v572[2] = v573[2];
          v572[3] = v576;
          uint64_t v577 = *(int *)(v546 + 24);
          v666 = (void *)((char *)v572 + v577);
          v578 = (void *)((char *)v573 + v577);
          uint64_t v579 = type metadata accessor for Identifier();
          uint64_t v580 = *(void *)(v579 - 8);
          v581 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v580 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v581(v578, 1, v579))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v666, v578, *(void *)(*(void *)(v582 - 8) + 64));
            v583 = v688;
            uint64_t v99 = v692;
          }
          else
          {
            uint64_t v584 = v578[1];
            void *v666 = *v578;
            v666[1] = v584;
            uint64_t v585 = v578[3];
            swift_bridgeObjectRetain();
            if (v585 == 1)
            {
              *((_OWORD *)v666 + 1) = *((_OWORD *)v578 + 1);
              v666[4] = v578[4];
            }
            else
            {
              v666[2] = v578[2];
              v666[3] = v585;
              v666[4] = v578[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v586 = *(int *)(v579 + 24);
            __dstd = (char *)v666 + v586;
            __srcg = (int *)v579;
            v587 = (char *)v578 + v586;
            uint64_t v588 = sub_23309AF80();
            uint64_t v589 = *(void *)(v588 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v589 + 48))(v587, 1, v588))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dstd, v587, *(void *)(*(void *)(v590 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v589 + 16))(__dstd, v587, v588);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v589 + 56))(__dstd, 0, 1, v588);
            }
            v583 = v688;
            uint64_t v99 = v692;
            uint64_t v591 = __srcg[7];
            v592 = (void *)((char *)v666 + v591);
            v593 = (void *)((char *)v578 + v591);
            uint64_t v594 = v593[1];
            void *v592 = *v593;
            v592[1] = v594;
            v595 = *(void (**)(void *, void, uint64_t, int *))(v580 + 56);
            swift_bridgeObjectRetain();
            v595(v666, 0, 1, __srcg);
          }
          v583[7](v677, 0, 1, v546);
        }
        *(void *)(a1 + v99[22]) = *(void *)((char *)v3 + v99[22]);
        uint64_t v596 = v99[23];
        v597 = (void *)(a1 + v596);
        v598 = (void *)((char *)v3 + v596);
        uint64_t v599 = v598[1];
        void *v597 = *v598;
        v597[1] = v599;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v18 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v18;
        uint64_t v19 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v19;
        uint64_t v20 = v3[5];
        uint64_t v21 = v3[6];
        *(void *)(a1 + 32) = v3[4];
        *(void *)(a1 + 40) = v20;
        uint64_t v23 = v3[7];
        uint64_t v22 = v3[8];
        *(void *)(a1 + 48) = v21;
        *(void *)(a1 + 56) = v23;
        uint64_t v25 = v3[9];
        uint64_t v24 = v3[10];
        *(void *)(a1 + 64) = v22;
        *(void *)(a1 + 72) = v25;
        uint64_t v26 = v3[11];
        uint64_t v27 = v3[12];
        *(void *)(a1 + 80) = v24;
        *(void *)(a1 + 88) = v26;
        *(void *)(a1 + 96) = v27;
        uint64_t v28 = type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v29 = *(int *)(v28 + 44);
        v694 = v3;
        __dst = (unsigned char *)(a1 + v29);
        v667 = (int *)v28;
        v678 = (char *)v3 + v29;
        uint64_t v30 = type metadata accessor for FHIRDateTime();
        v660 = *(void **)(v30 - 8);
        uint64_t v31 = (unsigned int (*)(void, void, void))v660[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31(v678, 1, v30))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v678, *(void *)(*(void *)(v32 - 8) + 64));
          uint64_t v33 = v667;
        }
        else
        {
          unsigned char *__dst = *v678;
          *((void *)__dst + 1) = *((void *)v678 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v678 + 4);
          uint64_t v106 = *((void *)v678 + 7);
          if (v106 == 1)
          {
            long long v107 = *(_OWORD *)(v678 + 40);
            *(_OWORD *)(__dst + 24) = *(_OWORD *)(v678 + 24);
            *(_OWORD *)(__dst + 40) = v107;
            *((void *)__dst + 7) = *((void *)v678 + 7);
          }
          else
          {
            __dst[24] = v678[24];
            *(_WORD *)(__dst + 25) = *(_WORD *)(v678 + 25);
            *(_OWORD *)(__dst + 28) = *(_OWORD *)(v678 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v678 + 11);
            *((void *)__dst + 6) = *((void *)v678 + 6);
            *((void *)__dst + 7) = v106;
            swift_bridgeObjectRetain();
          }
          uint64_t v33 = v667;
          uint64_t v116 = v30;
          uint64_t v117 = *(int *)(v30 + 28);
          uint64_t v118 = &__dst[v117];
          uint64_t v119 = &v678[v117];
          uint64_t v120 = sub_23309B300();
          uint64_t v121 = *(void *)(v120 - 8);
          uint64_t v122 = v31;
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v118, v119, *(void *)(*(void *)(v123 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v121 + 16))(v118, v119, v120);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
          }
          uint64_t v30 = v116;
          unint64_t v3 = v694;
          uint64_t v147 = *(int *)(v30 + 32);
          uint64_t v148 = &__dst[v147];
          uint64_t v149 = &v678[v147];
          uint64_t v150 = v149[1];
          *uint64_t v148 = *v149;
          v148[1] = v150;
          uint64_t v151 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v660[7];
          swift_bridgeObjectRetain();
          v151(__dst, 0, 1, v30);
          uint64_t v31 = v122;
        }
        uint64_t v152 = v33[12];
        uint64_t v153 = (unsigned char *)(a1 + v152);
        char v154 = (char *)v3 + v152;
        uint64_t v155 = type metadata accessor for Period();
        uint64_t v156 = *(void *)(v155 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
        }
        else
        {
          if (v31(v154, 1, v30))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v153, v154, *(void *)(*(void *)(v158 - 8) + 64));
          }
          else
          {
            *uint64_t v153 = *v154;
            *((void *)v153 + 1) = *((void *)v154 + 1);
            *((_DWORD *)v153 + 4) = *((_DWORD *)v154 + 4);
            uint64_t v233 = *((void *)v154 + 7);
            v642 = v31;
            if (v233 == 1)
            {
              long long v234 = *(_OWORD *)(v154 + 40);
              *(_OWORD *)(v153 + 24) = *(_OWORD *)(v154 + 24);
              *(_OWORD *)(v153 + 40) = v234;
              *((void *)v153 + 7) = *((void *)v154 + 7);
            }
            else
            {
              v153[24] = v154[24];
              *(_WORD *)(v153 + 25) = *(_WORD *)(v154 + 25);
              *(_OWORD *)(v153 + 28) = *(_OWORD *)(v154 + 28);
              *((_DWORD *)v153 + 11) = *((_DWORD *)v154 + 11);
              *((void *)v153 + 6) = *((void *)v154 + 6);
              *((void *)v153 + 7) = v233;
              swift_bridgeObjectRetain();
            }
            uint64_t v286 = v30;
            uint64_t v287 = *(int *)(v30 + 28);
            v288 = &v153[v287];
            v289 = &v154[v287];
            uint64_t v290 = sub_23309B300();
            uint64_t v291 = *(void *)(v290 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v291 + 48))(v289, 1, v290))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v288, v289, *(void *)(*(void *)(v292 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v291 + 16))(v288, v289, v290);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v291 + 56))(v288, 0, 1, v290);
            }
            uint64_t v30 = v286;
            uint64_t v315 = *(int *)(v286 + 32);
            v316 = &v153[v315];
            v317 = &v154[v315];
            uint64_t v318 = v317[1];
            void *v316 = *v317;
            v316[1] = v318;
            v319 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v660[7];
            swift_bridgeObjectRetain();
            v319(v153, 0, 1, v286);
            uint64_t v33 = v667;
            unint64_t v3 = v694;
            uint64_t v31 = v642;
          }
          uint64_t v320 = *(int *)(v155 + 20);
          v321 = &v153[v320];
          v322 = &v154[v320];
          if (v31(v322, 1, v30))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v321, v322, *(void *)(*(void *)(v323 - 8) + 64));
          }
          else
          {
            unsigned char *v321 = *v322;
            *((void *)v321 + 1) = *((void *)v322 + 1);
            *((_DWORD *)v321 + 4) = *((_DWORD *)v322 + 4);
            uint64_t v324 = *((void *)v322 + 7);
            v643 = v31;
            if (v324 == 1)
            {
              long long v325 = *(_OWORD *)(v322 + 40);
              *(_OWORD *)(v321 + 24) = *(_OWORD *)(v322 + 24);
              *(_OWORD *)(v321 + 40) = v325;
              *((void *)v321 + 7) = *((void *)v322 + 7);
            }
            else
            {
              v321[24] = v322[24];
              *(_WORD *)(v321 + 25) = *(_WORD *)(v322 + 25);
              *(_OWORD *)(v321 + 28) = *(_OWORD *)(v322 + 28);
              *((_DWORD *)v321 + 11) = *((_DWORD *)v322 + 11);
              *((void *)v321 + 6) = *((void *)v322 + 6);
              *((void *)v321 + 7) = v324;
              swift_bridgeObjectRetain();
            }
            v686 = (int *)v30;
            uint64_t v326 = *(int *)(v30 + 28);
            v327 = &v321[v326];
            v328 = &v322[v326];
            uint64_t v329 = sub_23309B300();
            uint64_t v330 = *(void *)(v329 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v330 + 48))(v328, 1, v329))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v327, v328, *(void *)(*(void *)(v331 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v330 + 16))(v327, v328, v329);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v330 + 56))(v327, 0, 1, v329);
            }
            uint64_t v30 = (uint64_t)v686;
            uint64_t v384 = v686[8];
            v385 = &v321[v384];
            v386 = &v322[v384];
            uint64_t v387 = v386[1];
            void *v385 = *v386;
            v385[1] = v387;
            v388 = (void (*)(unsigned char *, void, uint64_t, int *))v660[7];
            swift_bridgeObjectRetain();
            v388(v321, 0, 1, v686);
            uint64_t v33 = v667;
            unint64_t v3 = v694;
            uint64_t v31 = v643;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
        }
        uint64_t v389 = v33[13];
        v390 = (unsigned char *)(a1 + v389);
        v391 = (char *)v3 + v389;
        if (v31((char *)v3 + v389, 1, v30))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v390, v391, *(void *)(*(void *)(v392 - 8) + 64));
        }
        else
        {
          unsigned char *v390 = *v391;
          *((void *)v390 + 1) = *((void *)v391 + 1);
          *((_DWORD *)v390 + 4) = *((_DWORD *)v391 + 4);
          uint64_t v393 = *((void *)v391 + 7);
          if (v393 == 1)
          {
            long long v394 = *(_OWORD *)(v391 + 40);
            *(_OWORD *)(v390 + 24) = *(_OWORD *)(v391 + 24);
            *(_OWORD *)(v390 + 40) = v394;
            *((void *)v390 + 7) = *((void *)v391 + 7);
          }
          else
          {
            v390[24] = v391[24];
            *(_WORD *)(v390 + 25) = *(_WORD *)(v391 + 25);
            *(_OWORD *)(v390 + 28) = *(_OWORD *)(v391 + 28);
            *((_DWORD *)v390 + 11) = *((_DWORD *)v391 + 11);
            *((void *)v390 + 6) = *((void *)v391 + 6);
            *((void *)v390 + 7) = v393;
            swift_bridgeObjectRetain();
          }
          uint64_t v395 = v30;
          uint64_t v396 = *(int *)(v30 + 28);
          v397 = &v390[v396];
          v398 = &v391[v396];
          uint64_t v399 = sub_23309B300();
          uint64_t v400 = *(void *)(v399 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v400 + 48))(v398, 1, v399))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v397, v398, *(void *)(*(void *)(v401 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v400 + 16))(v397, v398, v399);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v400 + 56))(v397, 0, 1, v399);
          }
          uint64_t v402 = *(int *)(v395 + 32);
          v403 = &v390[v402];
          v404 = &v391[v402];
          uint64_t v405 = v404[1];
          void *v403 = *v404;
          v403[1] = v405;
          v406 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v660[7];
          swift_bridgeObjectRetain();
          v406(v390, 0, 1, v395);
        }
        *(void *)(a1 + v33[14]) = *(void *)((char *)v3 + v33[14]);
        *(void *)(a1 + v33[15]) = *(void *)((char *)v3 + v33[15]);
        uint64_t v407 = v33[16];
        v408 = (void *)(a1 + v407);
        v409 = (void *)((char *)v3 + v407);
        uint64_t v410 = v409[1];
        void *v408 = *v409;
        v408[1] = v410;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 4u:
        uint64_t v34 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v34;
        uint64_t v35 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v35;
        uint64_t v36 = v3[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v37 = v3[5];
        uint64_t v38 = v3[6];
        *(void *)(a1 + 32) = v36;
        *(void *)(a1 + 40) = v37;
        uint64_t v39 = v3[7];
        uint64_t v40 = v3[8];
        *(void *)(a1 + 48) = v38;
        *(void *)(a1 + 56) = v39;
        uint64_t v41 = v3[9];
        uint64_t v42 = v3[10];
        *(void *)(a1 + 64) = v40;
        *(void *)(a1 + 72) = v41;
        uint64_t v44 = v3[11];
        uint64_t v43 = v3[12];
        *(void *)(a1 + 80) = v42;
        *(void *)(a1 + 88) = v44;
        *(void *)(a1 + 96) = v43;
        uint64_t v45 = type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v46 = *(int *)(v45 + 44);
        v679 = (unsigned char *)(a1 + v46);
        v689 = (int *)v45;
        v695 = v3;
        uint64_t v47 = (char *)v3 + v46;
        uint64_t v48 = type metadata accessor for FHIRDateTime();
        v668 = *(void **)(v48 - 8);
        uint64_t v49 = (unsigned int (*)(unsigned char *, uint64_t, int *))v668[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = v49;
        v661 = (int *)v48;
        if (v49(v47, 1, (int *)v48))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v679, v47, *(void *)(*(void *)(v50 - 8) + 64));
          uint64_t v51 = v689;
          uint64_t v52 = v695;
        }
        else
        {
          unsigned char *v679 = *v47;
          *((void *)v679 + 1) = *((void *)v47 + 1);
          *((_DWORD *)v679 + 4) = *((_DWORD *)v47 + 4);
          uint64_t v108 = *((void *)v47 + 7);
          if (v108 == 1)
          {
            long long v109 = *(_OWORD *)(v47 + 40);
            *(_OWORD *)(v679 + 24) = *(_OWORD *)(v47 + 24);
            *(_OWORD *)(v679 + 40) = v109;
            *((void *)v679 + 7) = *((void *)v47 + 7);
          }
          else
          {
            v679[24] = v47[24];
            *(_WORD *)(v679 + 25) = *(_WORD *)(v47 + 25);
            *(_OWORD *)(v679 + 28) = *(_OWORD *)(v47 + 28);
            *((_DWORD *)v679 + 11) = *((_DWORD *)v47 + 11);
            *((void *)v679 + 6) = *((void *)v47 + 6);
            *((void *)v679 + 7) = v108;
            swift_bridgeObjectRetain();
          }
          uint64_t v52 = v695;
          uint64_t v124 = *(int *)(v48 + 28);
          long long v125 = &v679[v124];
          long long v126 = &v47[v124];
          uint64_t v127 = sub_23309B300();
          uint64_t v128 = *(void *)(v127 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v128 + 16))(v125, v126, v127);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
          }
          uint64_t v159 = *(int *)(v48 + 32);
          v160 = &v679[v159];
          v161 = &v47[v159];
          uint64_t v162 = v161[1];
          void *v160 = *v161;
          v160[1] = v162;
          uint64_t v163 = v48;
          uint64_t v164 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v668[7];
          swift_bridgeObjectRetain();
          v164(v679, 0, 1, v163);
          uint64_t v51 = v689;
        }
        uint64_t v165 = v51[12];
        uint64_t v166 = (void *)(a1 + v165);
        uint64_t v167 = (void *)((char *)v52 + v165);
        uint64_t v168 = v167[1];
        void *v166 = *v167;
        v166[1] = v168;
        *(void *)(a1 + v51[13]) = *(void *)((char *)v52 + v51[13]);
        *(void *)(a1 + v51[14]) = *(void *)((char *)v52 + v51[14]);
        uint64_t v169 = v51[15];
        uint64_t v170 = (void *)(a1 + v169);
        char v171 = (void *)((char *)v52 + v169);
        uint64_t v172 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v173 = *(void *)(v172 - 8);
        uint64_t v174 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v173 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v174(v171, 1, v172))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v170, v171, *(void *)(*(void *)(v175 - 8) + 64));
          uint64_t v176 = v689;
        }
        else
        {
          uint64_t v640 = v173;
          *uint64_t v170 = *v171;
          v683 = (void *)v172;
          uint64_t v177 = *(int *)(v172 + 20);
          uint64_t v178 = (char *)v170 + v177;
          uint64_t v179 = (char *)v171 + v177;
          uint64_t v180 = type metadata accessor for Period();
          uint64_t v181 = *(void *)(v180 - 8);
          uint64_t v182 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v181 + 48);
          swift_bridgeObjectRetain();
          uint64_t v183 = v170;
          if (v182(v179, 1, v180))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v178, v179, *(void *)(*(void *)(v184 - 8) + 64));
            uint64_t v185 = v683;
            uint64_t v176 = v689;
            uint64_t v186 = v640;
          }
          else
          {
            uint64_t v636 = v181;
            v638 = v170;
            if (__dsta(v179, 1, v661))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v178, v179, *(void *)(*(void *)(v235 - 8) + 64));
              uint64_t v236 = v661;
            }
            else
            {
              *uint64_t v178 = *v179;
              *((void *)v178 + 1) = *((void *)v179 + 1);
              *((_DWORD *)v178 + 4) = *((_DWORD *)v179 + 4);
              uint64_t v313 = *((void *)v179 + 7);
              if (v313 == 1)
              {
                long long v314 = *(_OWORD *)(v179 + 40);
                *(_OWORD *)(v178 + 24) = *(_OWORD *)(v179 + 24);
                *(_OWORD *)(v178 + 40) = v314;
                *((void *)v178 + 7) = *((void *)v179 + 7);
              }
              else
              {
                v178[24] = v179[24];
                *(_WORD *)(v178 + 25) = *(_WORD *)(v179 + 25);
                *(_OWORD *)(v178 + 28) = *(_OWORD *)(v179 + 28);
                *((_DWORD *)v178 + 11) = *((_DWORD *)v179 + 11);
                *((void *)v178 + 6) = *((void *)v179 + 6);
                *((void *)v178 + 7) = v313;
                swift_bridgeObjectRetain();
              }
              uint64_t v600 = v661[7];
              v601 = &v178[v600];
              v602 = &v179[v600];
              uint64_t v603 = sub_23309B300();
              uint64_t v604 = *(void *)(v603 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v604 + 48))(v602, 1, v603))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v601, v602, *(void *)(*(void *)(v605 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v604 + 16))(v601, v602, v603);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v604 + 56))(v601, 0, 1, v603);
              }
              uint64_t v236 = v661;
              uint64_t v606 = v661[8];
              v607 = &v178[v606];
              v608 = &v179[v606];
              uint64_t v609 = v608[1];
              void *v607 = *v608;
              v607[1] = v609;
              v610 = (void (*)(unsigned char *, void, uint64_t, int *))v668[7];
              swift_bridgeObjectRetain();
              v610(v178, 0, 1, v661);
            }
            uint64_t v611 = *(int *)(v180 + 20);
            v612 = &v178[v611];
            v613 = &v179[v611];
            if (__dsta(v613, 1, v236))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v612, v613, *(void *)(*(void *)(v614 - 8) + 64));
              uint64_t v176 = v689;
            }
            else
            {
              unsigned char *v612 = *v613;
              *((void *)v612 + 1) = *((void *)v613 + 1);
              *((_DWORD *)v612 + 4) = *((_DWORD *)v613 + 4);
              uint64_t v615 = *((void *)v613 + 7);
              if (v615 == 1)
              {
                long long v616 = *(_OWORD *)(v613 + 40);
                *(_OWORD *)(v612 + 24) = *(_OWORD *)(v613 + 24);
                *(_OWORD *)(v612 + 40) = v616;
                *((void *)v612 + 7) = *((void *)v613 + 7);
              }
              else
              {
                v612[24] = v613[24];
                *(_WORD *)(v612 + 25) = *(_WORD *)(v613 + 25);
                *(_OWORD *)(v612 + 28) = *(_OWORD *)(v613 + 28);
                *((_DWORD *)v612 + 11) = *((_DWORD *)v613 + 11);
                *((void *)v612 + 6) = *((void *)v613 + 6);
                *((void *)v612 + 7) = v615;
                swift_bridgeObjectRetain();
              }
              uint64_t v617 = v661[7];
              v618 = &v612[v617];
              v619 = &v613[v617];
              uint64_t v620 = sub_23309B300();
              uint64_t v621 = *(void *)(v620 - 8);
              v622 = v619;
              v623 = v619;
              uint64_t v624 = v620;
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v621 + 48))(v623, 1, v620))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v618, v622, *(void *)(*(void *)(v625 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, const void *, uint64_t))(v621 + 16))(v618, v622, v624);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v621 + 56))(v618, 0, 1, v624);
              }
              uint64_t v626 = v661[8];
              v627 = &v612[v626];
              v628 = &v613[v626];
              uint64_t v629 = v628[1];
              void *v627 = *v628;
              v627[1] = v629;
              v630 = (void (*)(unsigned char *, void, uint64_t, int *))v668[7];
              swift_bridgeObjectRetain();
              v630(v612, 0, 1, v661);
              uint64_t v176 = v689;
            }
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v636 + 56))(v178, 0, 1, v180);
            uint64_t v183 = v638;
            uint64_t v186 = v640;
            uint64_t v185 = v683;
          }
          (*(void (**)(void *, void, uint64_t, void *))(v186 + 56))(v183, 0, 1, v185);
        }
        uint64_t v631 = v176[16];
        v632 = (void *)(a1 + v631);
        v633 = (void *)((char *)v695 + v631);
        uint64_t v634 = v633[1];
        void *v632 = *v633;
        v632[1] = v634;
        swift_bridgeObjectRetain();
        break;
      case 5u:
        uint64_t v53 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v53;
        uint64_t v54 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v54;
        uint64_t v55 = v3[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v55 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v56 = v3[5];
        uint64_t v57 = v3[6];
        *(void *)(a1 + 32) = v55;
        *(void *)(a1 + 40) = v56;
        uint64_t v58 = v3[7];
        *(void *)(a1 + 48) = v57;
        *(void *)(a1 + 56) = v58;
        *(void *)(a1 + 61) = *(void *)((char *)v3 + 61);
        *(void *)(a1 + 72) = v3[9];
        uint64_t v690 = type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v59 = *(int *)(v690 + 40);
        uint64_t v60 = (unsigned char *)(a1 + v59);
        uint64_t v61 = (char *)v3 + v59;
        uint64_t v62 = type metadata accessor for FHIRDateTime();
        uint64_t v63 = *(void **)(v62 - 8);
        uint64_t v64 = (unsigned int (*)(void, void, void))v63[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v64(v61, 1, v62))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v60, v61, *(void *)(*(void *)(v65 - 8) + 64));
          uint64_t v66 = (int *)v690;
        }
        else
        {
          unsigned char *v60 = *v61;
          *((void *)v60 + 1) = *((void *)v61 + 1);
          *((_DWORD *)v60 + 4) = *((_DWORD *)v61 + 4);
          uint64_t v110 = *((void *)v61 + 7);
          v682 = v63;
          v662 = v64;
          if (v110 == 1)
          {
            long long v111 = *(_OWORD *)(v61 + 40);
            *(_OWORD *)(v60 + 24) = *(_OWORD *)(v61 + 24);
            *(_OWORD *)(v60 + 40) = v111;
            *((void *)v60 + 7) = *((void *)v61 + 7);
          }
          else
          {
            v60[24] = v61[24];
            *(_WORD *)(v60 + 25) = *(_WORD *)(v61 + 25);
            *(_OWORD *)(v60 + 28) = *(_OWORD *)(v61 + 28);
            *((_DWORD *)v60 + 11) = *((_DWORD *)v61 + 11);
            *((void *)v60 + 6) = *((void *)v61 + 6);
            *((void *)v60 + 7) = v110;
            swift_bridgeObjectRetain();
          }
          uint64_t v66 = (int *)v690;
          uint64_t v130 = *(int *)(v62 + 28);
          v671 = &v60[v130];
          long long v131 = &v61[v130];
          uint64_t v132 = sub_23309B300();
          uint64_t v133 = *(void *)(v132 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v671, v131, *(void *)(*(void *)(v134 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v133 + 16))(v671, v131, v132);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v671, 0, 1, v132);
          }
          uint64_t v63 = v682;
          uint64_t v64 = (unsigned int (*)(void, void, void))v662;
          uint64_t v187 = *(int *)(v62 + 32);
          v188 = &v60[v187];
          v189 = &v61[v187];
          uint64_t v190 = v189[1];
          void *v188 = *v189;
          v188[1] = v190;
          uint64_t v191 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v682[7];
          swift_bridgeObjectRetain();
          v191(v60, 0, 1, v62);
        }
        *(void *)(a1 + v66[11]) = *(void *)((char *)v3 + v66[11]);
        uint64_t v192 = v66[12];
        uint64_t v193 = (unsigned char *)(a1 + v192);
        char v194 = (char *)v3 + v192;
        swift_bridgeObjectRetain();
        if (v64(v194, 1, v62))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v193, v194, *(void *)(*(void *)(v195 - 8) + 64));
        }
        else
        {
          *uint64_t v193 = *v194;
          *((void *)v193 + 1) = *((void *)v194 + 1);
          *((_DWORD *)v193 + 4) = *((_DWORD *)v194 + 4);
          uint64_t v196 = *((void *)v194 + 7);
          v684 = v63;
          if (v196 == 1)
          {
            long long v197 = *(_OWORD *)(v194 + 40);
            *(_OWORD *)(v193 + 24) = *(_OWORD *)(v194 + 24);
            *(_OWORD *)(v193 + 40) = v197;
            *((void *)v193 + 7) = *((void *)v194 + 7);
          }
          else
          {
            v193[24] = v194[24];
            *(_WORD *)(v193 + 25) = *(_WORD *)(v194 + 25);
            *(_OWORD *)(v193 + 28) = *(_OWORD *)(v194 + 28);
            *((_DWORD *)v193 + 11) = *((_DWORD *)v194 + 11);
            *((void *)v193 + 6) = *((void *)v194 + 6);
            *((void *)v193 + 7) = v196;
            swift_bridgeObjectRetain();
          }
          uint64_t v198 = *(int *)(v62 + 28);
          uint64_t v199 = &v193[v198];
          v200 = &v194[v198];
          uint64_t v201 = sub_23309B300();
          uint64_t v202 = *(void *)(v201 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v199, v200, *(void *)(*(void *)(v203 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v202 + 16))(v199, v200, v201);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
          }
          uint64_t v237 = *(int *)(v62 + 32);
          uint64_t v238 = &v193[v237];
          uint64_t v239 = &v194[v237];
          uint64_t v240 = v239[1];
          *uint64_t v238 = *v239;
          v238[1] = v240;
          uint64_t v241 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v684[7];
          swift_bridgeObjectRetain();
          v241(v193, 0, 1, v62);
        }
        uint64_t v242 = v66[13];
        uint64_t v243 = (void *)(a1 + v242);
        uint64_t v244 = (void *)((char *)v3 + v242);
        uint64_t v245 = v244[1];
        *uint64_t v243 = *v244;
        v243[1] = v245;
        v243[2] = v244[2];
        uint64_t v246 = v66[14];
        uint64_t v247 = (void *)(a1 + v246);
        v248 = (void *)((char *)v3 + v246);
        uint64_t v249 = type metadata accessor for Reference();
        v250 = *(void **)(v249 - 8);
        v251 = (unsigned int (*)(void *, uint64_t, uint64_t))v250[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v251(v248, 1, v249))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v247, v248, *(void *)(*(void *)(v252 - 8) + 64));
          v253 = (int *)v690;
        }
        else
        {
          v663 = (void (**)(void *, void, uint64_t, void *))v250;
          v672 = (void *)v249;
          uint64_t v254 = v248[1];
          *uint64_t v247 = *v248;
          v247[1] = v254;
          uint64_t v255 = v248[3];
          v247[2] = v248[2];
          v247[3] = v255;
          uint64_t v256 = *(int *)(v249 + 24);
          v685 = v247;
          v257 = (void *)((char *)v247 + v256);
          v258 = (void *)((char *)v248 + v256);
          uint64_t v259 = type metadata accessor for Identifier();
          v260 = *(void **)(v259 - 8);
          v261 = (unsigned int (*)(void *, uint64_t, uint64_t))v260[6];
          v262 = v258;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v261(v258, 1, v259))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v257, v258, *(void *)(*(void *)(v263 - 8) + 64));
            v264 = v663;
            v265 = v672;
            v266 = v685;
            v253 = (int *)v690;
          }
          else
          {
            __srcb = v260;
            uint64_t v281 = v258[1];
            void *v257 = *v258;
            v257[1] = v281;
            uint64_t v282 = v258[3];
            swift_bridgeObjectRetain();
            v283 = v258;
            if (v282 == 1)
            {
              *((_OWORD *)v257 + 1) = *((_OWORD *)v258 + 1);
              v257[4] = v258[4];
            }
            else
            {
              v257[2] = v258[2];
              v257[3] = v282;
              v257[4] = v258[4];
              swift_bridgeObjectRetain();
              v262 = v258;
              swift_bridgeObjectRetain();
            }
            v265 = v672;
            uint64_t v299 = v259;
            uint64_t v300 = *(int *)(v259 + 24);
            v673 = (char *)v257;
            v301 = (char *)v257 + v300;
            v302 = (char *)v262 + v300;
            uint64_t v303 = sub_23309AF80();
            uint64_t v304 = *(void *)(v303 - 8);
            v305 = v302;
            int v306 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v304 + 48))(v302, 1, v303);
            v253 = (int *)v690;
            if (v306)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v301, v305, *(void *)(*(void *)(v307 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v304 + 16))(v301, v305, v303);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v301, 0, 1, v303);
            }
            v264 = v663;
            uint64_t v348 = *(int *)(v299 + 28);
            v349 = &v673[v348];
            v350 = (void *)((char *)v283 + v348);
            uint64_t v351 = v350[1];
            *(void *)v349 = *v350;
            *((void *)v349 + 1) = v351;
            v352 = (void (*)(char *, void, uint64_t, uint64_t))__srcb[7];
            swift_bridgeObjectRetain();
            v352(v673, 0, 1, v299);
            v266 = v685;
          }
          v264[7](v266, 0, 1, v265);
        }
        *(unsigned char *)(a1 + v253[15]) = *((unsigned char *)v3 + v253[15]);
        uint64_t v353 = v253[16];
        v354 = (void *)(a1 + v353);
        v355 = (void *)((char *)v3 + v353);
        uint64_t v356 = v355[1];
        void *v354 = *v355;
        v354[1] = v356;
        *(void *)(a1 + v253[17]) = *(void *)((char *)v3 + v253[17]);
        *(unsigned char *)(a1 + v253[18]) = *((unsigned char *)v3 + v253[18]);
        uint64_t v357 = v253[19];
        uint64_t v358 = a1 + v357;
        v359 = (char *)v3 + v357;
        uint64_t v360 = *(void *)((char *)v3 + v357);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v360 == 1)
        {
          long long v361 = *((_OWORD *)v359 + 1);
          *(_OWORD *)uint64_t v358 = *(_OWORD *)v359;
          *(_OWORD *)(v358 + 16) = v361;
          *(_OWORD *)(v358 + 32) = *((_OWORD *)v359 + 2);
          *(void *)(v358 + 48) = *((void *)v359 + 6);
        }
        else
        {
          *(void *)uint64_t v358 = v360;
          uint64_t v362 = *((void *)v359 + 2);
          swift_bridgeObjectRetain();
          if (v362 == 1)
          {
            *(_OWORD *)(v358 + 8) = *(_OWORD *)(v359 + 8);
            *(void *)(v358 + 24) = *((void *)v359 + 3);
          }
          else
          {
            *(void *)(v358 + 8) = *((void *)v359 + 1);
            *(void *)(v358 + 16) = v362;
            *(void *)(v358 + 24) = *((void *)v359 + 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v363 = *((void *)v359 + 5);
          *(void *)(v358 + 32) = *((void *)v359 + 4);
          *(void *)(v358 + 40) = v363;
          *(void *)(v358 + 48) = *((void *)v359 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v364 = v253[20];
        v365 = (void *)(a1 + v364);
        v366 = (void *)((char *)v3 + v364);
        uint64_t v367 = v366[1];
        void *v365 = *v366;
        v365[1] = v367;
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v67 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v67;
        uint64_t v68 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v68;
        uint64_t v69 = v3[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v69 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v70 = v3[5];
        uint64_t v71 = v3[6];
        *(void *)(a1 + 32) = v69;
        *(void *)(a1 + 40) = v70;
        uint64_t v73 = v3[7];
        uint64_t v72 = v3[8];
        *(void *)(a1 + 48) = v71;
        *(void *)(a1 + 56) = v73;
        uint64_t v74 = v3[9];
        uint64_t v75 = v3[10];
        *(void *)(a1 + 64) = v72;
        *(void *)(a1 + 72) = v74;
        *(void *)(a1 + 80) = v75;
        v680 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v76 = v680[10];
        __src = (unsigned char *)(a1 + v76);
        long long v77 = (char *)v3 + v76;
        uint64_t v78 = type metadata accessor for FHIRDateTime();
        v669 = *(void **)(v78 - 8);
        long long v79 = (unsigned int (*)(char *, uint64_t, uint64_t))v669[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v691 = v79;
        if (v79(v77, 1, v78))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__src, v77, *(void *)(*(void *)(v80 - 8) + 64));
          long long v81 = v680;
          uint64_t v82 = v78;
        }
        else
        {
          unsigned char *__src = *v77;
          *((void *)__src + 1) = *((void *)v77 + 1);
          *((_DWORD *)__src + 4) = *((_DWORD *)v77 + 4);
          uint64_t v112 = *((void *)v77 + 7);
          if (v112 == 1)
          {
            long long v113 = *(_OWORD *)(v77 + 40);
            *(_OWORD *)(__src + 24) = *(_OWORD *)(v77 + 24);
            *(_OWORD *)(__src + 40) = v113;
            *((void *)__src + 7) = *((void *)v77 + 7);
          }
          else
          {
            __src[24] = v77[24];
            *(_WORD *)(__src + 25) = *(_WORD *)(v77 + 25);
            *(_OWORD *)(__src + 28) = *(_OWORD *)(v77 + 28);
            *((_DWORD *)__src + 11) = *((_DWORD *)v77 + 11);
            *((void *)__src + 6) = *((void *)v77 + 6);
            *((void *)__src + 7) = v112;
            swift_bridgeObjectRetain();
          }
          uint64_t v82 = v78;
          uint64_t v135 = *(int *)(v78 + 28);
          long long v136 = &__src[v135];
          long long v137 = &v77[v135];
          uint64_t v138 = sub_23309B300();
          uint64_t v139 = *(void *)(v138 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v139 + 16))(v136, v137, v138);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
          }
          long long v81 = v680;
          uint64_t v204 = *(int *)(v78 + 32);
          v205 = &__src[v204];
          v206 = &v77[v204];
          uint64_t v207 = v206[1];
          void *v205 = *v206;
          v205[1] = v207;
          uint64_t v208 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v669[7];
          swift_bridgeObjectRetain();
          v208(__src, 0, 1, v82);
        }
        uint64_t v209 = v81[11];
        v210 = (unsigned char *)(a1 + v209);
        uint64_t v211 = (char *)v3 + v209;
        if (v691((char *)v3 + v209, 1, v82))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v210, v211, *(void *)(*(void *)(v212 - 8) + 64));
        }
        else
        {
          unsigned char *v210 = *v211;
          *((void *)v210 + 1) = *((void *)v211 + 1);
          *((_DWORD *)v210 + 4) = *((_DWORD *)v211 + 4);
          uint64_t v213 = *((void *)v211 + 7);
          if (v213 == 1)
          {
            long long v214 = *(_OWORD *)(v211 + 40);
            *(_OWORD *)(v210 + 24) = *(_OWORD *)(v211 + 24);
            *(_OWORD *)(v210 + 40) = v214;
            *((void *)v210 + 7) = *((void *)v211 + 7);
          }
          else
          {
            v210[24] = v211[24];
            *(_WORD *)(v210 + 25) = *(_WORD *)(v211 + 25);
            *(_OWORD *)(v210 + 28) = *(_OWORD *)(v211 + 28);
            *((_DWORD *)v210 + 11) = *((_DWORD *)v211 + 11);
            *((void *)v210 + 6) = *((void *)v211 + 6);
            *((void *)v210 + 7) = v213;
            swift_bridgeObjectRetain();
          }
          uint64_t v215 = *(int *)(v82 + 28);
          uint64_t v216 = &v210[v215];
          uint64_t v217 = &v211[v215];
          uint64_t v218 = sub_23309B300();
          uint64_t v219 = *(void *)(v218 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v216, v217, *(void *)(*(void *)(v220 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v219 + 16))(v216, v217, v218);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
          }
          long long v81 = v680;
          uint64_t v267 = *(int *)(v82 + 32);
          v268 = &v210[v267];
          v269 = &v211[v267];
          uint64_t v270 = v269[1];
          void *v268 = *v269;
          v268[1] = v270;
          v271 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v669[7];
          swift_bridgeObjectRetain();
          v271(v210, 0, 1, v82);
        }
        uint64_t v272 = v81[12];
        v273 = (unsigned char *)(a1 + v272);
        v274 = (char *)v3 + v272;
        uint64_t v275 = type metadata accessor for Period();
        uint64_t v276 = *(void *)(v275 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v273, v274, *(void *)(*(void *)(v277 - 8) + 64));
        }
        else
        {
          if (v691(v274, 1, v82))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v273, v274, *(void *)(*(void *)(v278 - 8) + 64));
          }
          else
          {
            unsigned char *v273 = *v274;
            *((void *)v273 + 1) = *((void *)v274 + 1);
            *((_DWORD *)v273 + 4) = *((_DWORD *)v274 + 4);
            uint64_t v284 = *((void *)v274 + 7);
            if (v284 == 1)
            {
              long long v285 = *(_OWORD *)(v274 + 40);
              *(_OWORD *)(v273 + 24) = *(_OWORD *)(v274 + 24);
              *(_OWORD *)(v273 + 40) = v285;
              *((void *)v273 + 7) = *((void *)v274 + 7);
            }
            else
            {
              v273[24] = v274[24];
              *(_WORD *)(v273 + 25) = *(_WORD *)(v274 + 25);
              *(_OWORD *)(v273 + 28) = *(_OWORD *)(v274 + 28);
              *((_DWORD *)v273 + 11) = *((_DWORD *)v274 + 11);
              *((void *)v273 + 6) = *((void *)v274 + 6);
              *((void *)v273 + 7) = v284;
              swift_bridgeObjectRetain();
            }
            uint64_t v308 = *(int *)(v82 + 28);
            __srcc = &v273[v308];
            v309 = &v274[v308];
            uint64_t v310 = sub_23309B300();
            uint64_t v311 = *(void *)(v310 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v311 + 48))(v309, 1, v310))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__srcc, v309, *(void *)(*(void *)(v312 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v311 + 16))(__srcc, v309, v310);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v311 + 56))(__srcc, 0, 1, v310);
            }
            uint64_t v368 = *(int *)(v82 + 32);
            v369 = &v273[v368];
            v370 = &v274[v368];
            uint64_t v371 = v370[1];
            void *v369 = *v370;
            v369[1] = v371;
            v372 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v669[7];
            swift_bridgeObjectRetain();
            v372(v273, 0, 1, v82);
            long long v81 = v680;
          }
          uint64_t v373 = *(int *)(v275 + 20);
          v374 = &v273[v373];
          v375 = &v274[v373];
          if (v691(v375, 1, v82))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v374, v375, *(void *)(*(void *)(v376 - 8) + 64));
          }
          else
          {
            unsigned char *v374 = *v375;
            *((void *)v374 + 1) = *((void *)v375 + 1);
            *((_DWORD *)v374 + 4) = *((_DWORD *)v375 + 4);
            uint64_t v377 = *((void *)v375 + 7);
            uint64_t v644 = v276;
            if (v377 == 1)
            {
              long long v378 = *(_OWORD *)(v375 + 40);
              *(_OWORD *)(v374 + 24) = *(_OWORD *)(v375 + 24);
              *(_OWORD *)(v374 + 40) = v378;
              *((void *)v374 + 7) = *((void *)v375 + 7);
            }
            else
            {
              v374[24] = v375[24];
              *(_WORD *)(v374 + 25) = *(_WORD *)(v375 + 25);
              *(_OWORD *)(v374 + 28) = *(_OWORD *)(v375 + 28);
              *((_DWORD *)v374 + 11) = *((_DWORD *)v375 + 11);
              *((void *)v374 + 6) = *((void *)v375 + 6);
              *((void *)v374 + 7) = v377;
              swift_bridgeObjectRetain();
            }
            uint64_t v379 = *(int *)(v82 + 28);
            __srcd = &v374[v379];
            v380 = &v375[v379];
            uint64_t v381 = sub_23309B300();
            uint64_t v382 = *(void *)(v381 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v382 + 48))(v380, 1, v381))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__srcd, v380, *(void *)(*(void *)(v383 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v382 + 16))(__srcd, v380, v381);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v382 + 56))(__srcd, 0, 1, v381);
            }
            long long v81 = v680;
            uint64_t v276 = v644;
            uint64_t v450 = *(int *)(v82 + 32);
            v451 = &v374[v450];
            v452 = &v375[v450];
            uint64_t v453 = v452[1];
            void *v451 = *v452;
            v451[1] = v453;
            v454 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v669[7];
            swift_bridgeObjectRetain();
            v454(v374, 0, 1, v82);
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v276 + 56))(v273, 0, 1, v275);
        }
        uint64_t v455 = v81[13];
        v456 = (unsigned char *)(a1 + v455);
        v457 = (char *)v3 + v455;
        if (v691((char *)v3 + v455, 1, v82))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v456, v457, *(void *)(*(void *)(v458 - 8) + 64));
        }
        else
        {
          unsigned char *v456 = *v457;
          *((void *)v456 + 1) = *((void *)v457 + 1);
          *((_DWORD *)v456 + 4) = *((_DWORD *)v457 + 4);
          uint64_t v459 = *((void *)v457 + 7);
          if (v459 == 1)
          {
            long long v460 = *(_OWORD *)(v457 + 40);
            *(_OWORD *)(v456 + 24) = *(_OWORD *)(v457 + 24);
            *(_OWORD *)(v456 + 40) = v460;
            *((void *)v456 + 7) = *((void *)v457 + 7);
          }
          else
          {
            v456[24] = v457[24];
            *(_WORD *)(v456 + 25) = *(_WORD *)(v457 + 25);
            *(_OWORD *)(v456 + 28) = *(_OWORD *)(v457 + 28);
            *((_DWORD *)v456 + 11) = *((_DWORD *)v457 + 11);
            *((void *)v456 + 6) = *((void *)v457 + 6);
            *((void *)v456 + 7) = v459;
            swift_bridgeObjectRetain();
          }
          uint64_t v461 = *(int *)(v82 + 28);
          v462 = &v456[v461];
          v463 = &v457[v461];
          uint64_t v464 = sub_23309B300();
          uint64_t v465 = *(void *)(v464 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v465 + 48))(v463, 1, v464))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v462, v463, *(void *)(*(void *)(v466 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v465 + 16))(v462, v463, v464);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v465 + 56))(v462, 0, 1, v464);
          }
          long long v81 = v680;
          uint64_t v467 = *(int *)(v82 + 32);
          v468 = &v456[v467];
          v469 = &v457[v467];
          uint64_t v470 = v469[1];
          void *v468 = *v469;
          v468[1] = v470;
          v471 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v669[7];
          swift_bridgeObjectRetain();
          v471(v456, 0, 1, v82);
        }
        *(void *)(a1 + v81[14]) = *(void *)((char *)v3 + v81[14]);
        *(void *)(a1 + v81[15]) = *(void *)((char *)v3 + v81[15]);
        uint64_t v472 = v81[16];
        v473 = (void *)(a1 + v472);
        v474 = (void *)((char *)v3 + v472);
        uint64_t v475 = v474[1];
        void *v473 = *v474;
        v473[1] = v475;
        uint64_t v476 = v81[17];
        uint64_t v477 = a1 + v476;
        v478 = (char *)v3 + v476;
        uint64_t v479 = *(void *)((char *)v3 + v476 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v479 == 1)
        {
          *(_OWORD *)uint64_t v477 = *(_OWORD *)v478;
          *(void *)(v477 + 16) = *((void *)v478 + 2);
        }
        else
        {
          *(void *)uint64_t v477 = *(void *)v478;
          *(void *)(v477 + 8) = v479;
          *(void *)(v477 + 16) = *((void *)v478 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v480 = v81[18];
        v481 = (void *)(a1 + v480);
        v482 = (void *)((char *)v3 + v480);
        uint64_t v483 = type metadata accessor for Quantity();
        v484 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v483 - 8);
        if (v484[6](v482, 1, v483))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v481, v482, *(void *)(*(void *)(v485 - 8) + 64));
        }
        else
        {
          v664 = v484;
          *(_OWORD *)v481 = *(_OWORD *)v482;
          *(void *)((char *)v481 + 13) = *(void *)((char *)v482 + 13);
          uint64_t v486 = v482[4];
          v481[3] = v482[3];
          v481[4] = v486;
          uint64_t v487 = v482[6];
          v481[5] = v482[5];
          v481[6] = v487;
          uint64_t v488 = *(int *)(v483 + 28);
          __srce = (char *)v481 + v488;
          v693 = (char *)v482 + v488;
          uint64_t v489 = sub_23309AF80();
          uint64_t v490 = *(void *)(v489 - 8);
          v674 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v490 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v674(v693, 1, v489))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(__srce, v693, *(void *)(*(void *)(v491 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v490 + 16))(__srce, v693, v489);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v490 + 56))(__srce, 0, 1, v489);
          }
          long long v81 = v680;
          uint64_t v492 = *(int *)(v483 + 32);
          v493 = (void *)((char *)v481 + v492);
          v494 = (void *)((char *)v482 + v492);
          uint64_t v495 = v494[1];
          void *v493 = *v494;
          v493[1] = v495;
          v496 = (void (*)(void *, void, uint64_t, uint64_t))v664[7];
          swift_bridgeObjectRetain();
          v496(v481, 0, 1, v483);
        }
        *(void *)(a1 + v81[19]) = *(void *)((char *)v3 + v81[19]);
        uint64_t v497 = v81[20];
        v498 = (void *)(a1 + v497);
        v499 = (void *)((char *)v3 + v497);
        uint64_t v500 = v499[1];
        void *v498 = *v499;
        v498[1] = v500;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 7u:
        uint64_t v83 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v83;
        uint64_t v84 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v84;
        *(void *)(a1 + 32) = v3[4];
        *(void *)(a1 + 37) = *(void *)((char *)v3 + 37);
        uint64_t v85 = v3[7];
        *(void *)(a1 + 48) = v3[6];
        *(void *)(a1 + 56) = v85;
        uint64_t v86 = v3[9];
        *(void *)(a1 + 64) = v3[8];
        *(void *)(a1 + 72) = v86;
        uint64_t v87 = v3[11];
        *(void *)(a1 + 80) = v3[10];
        *(void *)(a1 + 88) = v87;
        uint64_t v88 = v3[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v88 == 1)
        {
          *(_OWORD *)(a1 + 96) = *((_OWORD *)v3 + 6);
          *(void *)(a1 + 112) = v3[14];
        }
        else
        {
          *(void *)(a1 + 96) = v3[12];
          *(void *)(a1 + 104) = v88;
          *(void *)(a1 + 112) = v3[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v94 = v3[16];
        *(void *)(a1 + 120) = v3[15];
        *(void *)(a1 + 128) = v94;
        uint64_t v95 = v3[17];
        uint64_t v96 = v3[18];
        *(void *)(a1 + 136) = v95;
        *(void *)(a1 + 144) = v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 8u:
        uint64_t v89 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v89;
        uint64_t v90 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v90;
        uint64_t v91 = v3[4];
        uint64_t v92 = v3[5];
        *(void *)(a1 + 32) = v91;
        *(void *)(a1 + 40) = v92;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = v3[1];
        *(void *)a1 = *v3;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = v3[3];
        *(void *)(a1 + 16) = v3[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = v3[5];
        *(void *)(a1 + 32) = v3[4];
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = v3[6];
        uint64_t v10 = v3[7];
        *(void *)(a1 + 48) = v9;
        *(void *)(a1 + 56) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ModelsR4.ResourceProxy(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_181;
    case 1:
    case 8:
      goto LABEL_186;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      if (a1[6] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (a1[9] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (a1[16] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v3 = (int *)type metadata accessor for ModelsR4.Condition(0);
      uint64_t v4 = (char *)a1 + v3[13];
      uint64_t v5 = type metadata accessor for FHIRDateTime();
      uint64_t v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
      if (!v6(v4, 1, v5))
      {
        if (*((void *)v4 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v7 = &v4[*(int *)(v5 + 28)];
        uint64_t v8 = sub_23309B300();
        uint64_t v9 = *(void *)(v8 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = (char *)a1 + v3[14];
      uint64_t v11 = type metadata accessor for Period();
      uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
      if (!v12(v10, 1, v11))
      {
        if (!v6(v10, 1, v5))
        {
          if (*((void *)v10 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v13 = &v10[*(int *)(v5 + 28)];
          uint64_t v14 = sub_23309B300();
          uint64_t v134 = *(void *)(v14 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v13, 1, v14)) {
            (*(void (**)(char *, uint64_t))(v134 + 8))(v13, v14);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v15 = &v10[*(int *)(v11 + 20)];
        if (!v6(v15, 1, v5))
        {
          if (*((void *)v15 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v16 = &v15[*(int *)(v5 + 28)];
          uint64_t v17 = sub_23309B300();
          uint64_t v135 = *(void *)(v17 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v16, 1, v17)) {
            (*(void (**)(char *, uint64_t))(v135 + 8))(v16, v17);
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v18 = (char *)a1 + v3[16];
      if (!v6(v18, 1, v5))
      {
        long long v136 = v6;
        if (*((void *)v18 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v19 = &v18[*(int *)(v5 + 28)];
        uint64_t v20 = sub_23309B300();
        uint64_t v21 = *(void *)(v20 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
          (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = v136;
      }
      uint64_t v22 = (char *)a1 + v3[17];
      if (!v12(v22, 1, v11))
      {
        if (!v6(v22, 1, v5))
        {
          if (*((void *)v22 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v23 = &v22[*(int *)(v5 + 28)];
          uint64_t v24 = sub_23309B300();
          uint64_t v25 = *(void *)(v24 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
            (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v26 = &v22[*(int *)(v11 + 20)];
        if (!v6(v26, 1, v5))
        {
          if (*((void *)v26 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v27 = &v26[*(int *)(v5 + 28)];
          uint64_t v28 = sub_23309B300();
          uint64_t v29 = *(void *)(v28 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28)) {
            (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v30 = (char *)a1 + v3[19];
      if (!v6(v30, 1, v5))
      {
        if (*((void *)v30 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v31 = &v30[*(int *)(v5 + 28)];
        uint64_t v32 = sub_23309B300();
        uint64_t v33 = *(void *)(v32 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v34 = (char *)a1 + v3[20];
      uint64_t v35 = type metadata accessor for Reference();
      uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48);
      if (!v36(v34, 1, v35))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v37 = &v34[*(int *)(v35 + 24)];
        uint64_t v38 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v37 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v39 = &v37[*(int *)(v38 + 24)];
          uint64_t v40 = sub_23309AF80();
          uint64_t v41 = *(void *)(v40 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40)) {
            (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v42 = (char *)a1 + v3[21];
      if (!v36(v42, 1, v35))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = &v42[*(int *)(v35 + 24)];
        uint64_t v44 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v43 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v45 = &v43[*(int *)(v44 + 24)];
          uint64_t v46 = sub_23309AF80();
          uint64_t v47 = *(void *)(v46 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
            (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
          }
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_180;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v48 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
      uint64_t v49 = (char *)a1 + v48[11];
      uint64_t v50 = type metadata accessor for FHIRDateTime();
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48);
      if (!v51(v49, 1, v50))
      {
        if (*((void *)v49 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v52 = &v49[*(int *)(v50 + 28)];
        uint64_t v53 = sub_23309B300();
        uint64_t v54 = *(void *)(v53 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53)) {
          (*(void (**)(char *, uint64_t))(v54 + 8))(v52, v53);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v55 = (char *)a1 + v48[12];
      uint64_t v56 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v55, 1, v56))
      {
        if (!v51(v55, 1, v50))
        {
          if (*((void *)v55 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v57 = &v55[*(int *)(v50 + 28)];
          uint64_t v58 = sub_23309B300();
          uint64_t v59 = *(void *)(v58 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58)) {
            (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v58);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v60 = &v55[*(int *)(v56 + 20)];
        if (!v51(v60, 1, v50))
        {
          if (*((void *)v60 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v61 = &v60[*(int *)(v50 + 28)];
          uint64_t v62 = sub_23309B300();
          uint64_t v63 = *(void *)(v62 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62)) {
            (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v64 = (char *)a1 + v48[13];
      if (!v51(v64, 1, v50))
      {
        if (*((void *)v64 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v65 = &v64[*(int *)(v50 + 28)];
        uint64_t v66 = sub_23309B300();
        uint64_t v67 = *(void *)(v66 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66)) {
          (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_179;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v68 = type metadata accessor for ModelsR4.DocumentReference(0);
      uint64_t v69 = (char *)a1 + *(int *)(v68 + 44);
      uint64_t v70 = type metadata accessor for FHIRDateTime();
      uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48);
      if (!v71(v69, 1, v70))
      {
        if (*((void *)v69 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v72 = &v69[*(int *)(v70 + 28)];
        uint64_t v73 = sub_23309B300();
        uint64_t v74 = *(void *)(v73 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73)) {
          (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v73);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v75 = (char *)a1 + *(int *)(v68 + 60);
      uint64_t v76 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48))(v75, 1, v76)) {
        goto LABEL_181;
      }
      swift_bridgeObjectRelease();
      long long v77 = &v75[*(int *)(v76 + 20)];
      uint64_t v78 = type metadata accessor for Period();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48))(v77, 1, v78)) {
        goto LABEL_181;
      }
      if (!v71(v77, 1, v70))
      {
        if (*((void *)v77 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        long long v79 = &v77[*(int *)(v70 + 28)];
        uint64_t v80 = sub_23309B300();
        uint64_t v81 = *(void *)(v80 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80)) {
          (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v80);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v82 = &v77[*(int *)(v78 + 20)];
      if (v71(v82, 1, v70)) {
        goto LABEL_181;
      }
      if (*((void *)v82 + 7) != 1) {
        swift_bridgeObjectRelease();
      }
      long long v131 = &v82[*(int *)(v70 + 28)];
      uint64_t v132 = sub_23309B300();
      uint64_t v133 = *(void *)(v132 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132)) {
        (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v132);
      }
      goto LABEL_180;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v83 = (int *)type metadata accessor for ModelsR4.Immunization(0);
      uint64_t v84 = (char *)a1 + v83[10];
      uint64_t v85 = type metadata accessor for FHIRDateTime();
      uint64_t v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48);
      if (!v86(v84, 1, v85))
      {
        if (*((void *)v84 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v87 = &v84[*(int *)(v85 + 28)];
        uint64_t v88 = sub_23309B300();
        uint64_t v89 = *(void *)(v88 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88)) {
          (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v88);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v90 = (char *)a1 + v83[12];
      if (!v86(v90, 1, v85))
      {
        if (*((void *)v90 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v91 = &v90[*(int *)(v85 + 28)];
        uint64_t v92 = sub_23309B300();
        uint64_t v93 = *(void *)(v92 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92)) {
          (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v92);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v94 = (char *)a1 + v83[14];
      uint64_t v95 = type metadata accessor for Reference();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v95 - 8) + 48))(v94, 1, v95))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v96 = &v94[*(int *)(v95 + 24)];
        uint64_t v97 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v97 - 8) + 48))(v96, 1, v97))
        {
          swift_bridgeObjectRelease();
          if (*((void *)v96 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v98 = &v96[*(int *)(v97 + 24)];
          uint64_t v99 = sub_23309AF80();
          uint64_t v100 = *(void *)(v99 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99)) {
            (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v99);
          }
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v101 = (void *)((char *)a1 + v83[19]);
      if (*v101 == 1) {
        goto LABEL_181;
      }
      swift_bridgeObjectRelease();
      if (v101[2] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_179;
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1) {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = (int *)type metadata accessor for ModelsR4.Observation(0);
      uint64_t v103 = (char *)a1 + v102[10];
      uint64_t v104 = type metadata accessor for FHIRDateTime();
      uint64_t v105 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48);
      if (!v105(v103, 1, v104))
      {
        if (*((void *)v103 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v106 = &v103[*(int *)(v104 + 28)];
        uint64_t v107 = sub_23309B300();
        uint64_t v108 = *(void *)(v107 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107)) {
          (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v107);
        }
        swift_bridgeObjectRelease();
      }
      long long v109 = (char *)a1 + v102[11];
      if (!v105(v109, 1, v104))
      {
        if (*((void *)v109 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v110 = &v109[*(int *)(v104 + 28)];
        uint64_t v111 = sub_23309B300();
        uint64_t v112 = *(void *)(v111 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111)) {
          (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v111);
        }
        swift_bridgeObjectRelease();
      }
      long long v113 = (char *)a1 + v102[12];
      uint64_t v114 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v114 - 8) + 48))(v113, 1, v114))
      {
        if (!v105(v113, 1, v104))
        {
          if (*((void *)v113 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          long long v115 = &v113[*(int *)(v104 + 28)];
          uint64_t v116 = sub_23309B300();
          uint64_t v117 = *(void *)(v116 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116)) {
            (*(void (**)(char *, uint64_t))(v117 + 8))(v115, v116);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v118 = &v113[*(int *)(v114 + 20)];
        if (!v105(v118, 1, v104))
        {
          if (*((void *)v118 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v119 = &v118[*(int *)(v104 + 28)];
          uint64_t v120 = sub_23309B300();
          uint64_t v121 = *(void *)(v120 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120)) {
            (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v120);
          }
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v122 = (char *)a1 + v102[13];
      if (!v105(v122, 1, v104))
      {
        if (*((void *)v122 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v123 = &v122[*(int *)(v104 + 28)];
        uint64_t v124 = sub_23309B300();
        uint64_t v125 = *(void *)(v124 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124)) {
          (*(void (**)(char *, uint64_t))(v125 + 8))(v123, v124);
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)((char *)a1 + v102[17] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      long long v126 = (char *)a1 + v102[18];
      uint64_t v127 = type metadata accessor for Quantity();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v127 - 8) + 48))(v126, 1, v127)) {
        goto LABEL_180;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v128 = &v126[*(int *)(v127 + 28)];
      uint64_t v129 = sub_23309AF80();
      uint64_t v130 = *(void *)(v129 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129)) {
        (*(void (**)(char *, uint64_t))(v130 + 8))(v128, v129);
      }
LABEL_179:
      swift_bridgeObjectRelease();
LABEL_180:
      swift_bridgeObjectRelease();
      goto LABEL_181;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_186:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_181:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *initializeWithCopy for ModelsR4.ResourceProxy(void *a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v9;
      uint64_t v10 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v10;
      a1[4] = *(void *)(a2 + 32);
      goto LABEL_186;
    case 2u:
      uint64_t v11 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v11;
      uint64_t v12 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v12;
      uint64_t v13 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13 != 1) {
        swift_bridgeObjectRetain();
      }
      a1[4] = v13;
      uint64_t v14 = *(void *)(a2 + 48);
      if (v14 == 1)
      {
        *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
        a1[7] = *(void *)(a2 + 56);
      }
      else
      {
        a1[5] = *(void *)(a2 + 40);
        a1[6] = v14;
        a1[7] = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v88 = *(void *)(a2 + 72);
      if (v88 == 1)
      {
        *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
        a1[10] = *(void *)(a2 + 80);
      }
      else
      {
        a1[8] = *(void *)(a2 + 64);
        a1[9] = v88;
        a1[10] = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      a1[11] = *(void *)(a2 + 88);
      uint64_t v92 = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      if (v92 == 1)
      {
        *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
        a1[14] = *(void *)(a2 + 112);
      }
      else
      {
        a1[12] = *(void *)(a2 + 96);
        a1[13] = v92;
        a1[14] = *(void *)(a2 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v93 = *(void *)(a2 + 128);
      if (v93 == 1)
      {
        *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
        a1[17] = *(void *)(a2 + 136);
      }
      else
      {
        a1[15] = *(void *)(a2 + 120);
        a1[16] = v93;
        a1[17] = *(void *)(a2 + 136);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      a1[18] = *(void *)(a2 + 144);
      uint64_t v94 = (int *)type metadata accessor for ModelsR4.Condition(0);
      uint64_t v95 = v94[13];
      uint64_t v96 = (char *)a1 + v95;
      uint64_t v97 = (unsigned char *)(a2 + v95);
      uint64_t v98 = type metadata accessor for FHIRDateTime();
      uint64_t v664 = *(void *)(v98 - 8);
      uint64_t v99 = *(unsigned int (**)(void, void, void))(v664 + 48);
      swift_bridgeObjectRetain();
      v675 = v94;
      v654 = v99;
      if (v99(v97, 1, v98))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        *uint64_t v96 = *v97;
        *((void *)v96 + 1) = *((void *)v97 + 1);
        *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
        uint64_t v111 = *((void *)v97 + 7);
        if (v111 == 1)
        {
          long long v112 = *(_OWORD *)(v97 + 40);
          *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
          *(_OWORD *)(v96 + 40) = v112;
          *((void *)v96 + 7) = *((void *)v97 + 7);
        }
        else
        {
          v96[24] = v97[24];
          *(_WORD *)(v96 + 25) = *(_WORD *)(v97 + 25);
          *(_OWORD *)(v96 + 28) = *(_OWORD *)(v97 + 28);
          *((_DWORD *)v96 + 11) = *((_DWORD *)v97 + 11);
          *((void *)v96 + 6) = *((void *)v97 + 6);
          *((void *)v96 + 7) = v111;
          swift_bridgeObjectRetain();
        }
        uint64_t v136 = *(int *)(v98 + 28);
        long long v137 = &v96[v136];
        uint64_t v138 = &v97[v136];
        uint64_t v139 = sub_23309B300();
        uint64_t v140 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v137, v138, *(void *)(*(void *)(v141 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v140 + 16))(v137, v138, v139);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
        }
        uint64_t v94 = v675;
        uint64_t v211 = *(int *)(v98 + 32);
        uint64_t v212 = &v96[v211];
        uint64_t v213 = &v97[v211];
        uint64_t v214 = v213[1];
        *uint64_t v212 = *v213;
        v212[1] = v214;
        uint64_t v215 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
        swift_bridgeObjectRetain();
        v215(v96, 0, 1, v98);
        uint64_t v99 = (unsigned int (*)(void, void, void))v654;
      }
      uint64_t v216 = v94[14];
      uint64_t v217 = (char *)a1 + v216;
      uint64_t v218 = (unsigned char *)(a2 + v216);
      uint64_t v219 = type metadata accessor for Period();
      __dstb = *(void **)(v219 - 8);
      uint64_t v220 = (unsigned int (*)(void, void, void))__dstb[6];
      if (v220(v218, 1, v219))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v217, v218, *(void *)(*(void *)(v221 - 8) + 64));
      }
      else
      {
        if (v99(v218, 1, v98))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v217, v218, *(void *)(*(void *)(v222 - 8) + 64));
        }
        else
        {
          *uint64_t v217 = *v218;
          *((void *)v217 + 1) = *((void *)v218 + 1);
          *((_DWORD *)v217 + 4) = *((_DWORD *)v218 + 4);
          uint64_t v269 = *((void *)v218 + 7);
          v630 = v220;
          if (v269 == 1)
          {
            long long v270 = *(_OWORD *)(v218 + 40);
            *(_OWORD *)(v217 + 24) = *(_OWORD *)(v218 + 24);
            *(_OWORD *)(v217 + 40) = v270;
            *((void *)v217 + 7) = *((void *)v218 + 7);
          }
          else
          {
            v217[24] = v218[24];
            *(_WORD *)(v217 + 25) = *(_WORD *)(v218 + 25);
            *(_OWORD *)(v217 + 28) = *(_OWORD *)(v218 + 28);
            *((_DWORD *)v217 + 11) = *((_DWORD *)v218 + 11);
            *((void *)v217 + 6) = *((void *)v218 + 6);
            *((void *)v217 + 7) = v269;
            swift_bridgeObjectRetain();
          }
          uint64_t v282 = *(int *)(v98 + 28);
          uint64_t v621 = &v217[v282];
          v283 = &v218[v282];
          uint64_t v284 = sub_23309B300();
          uint64_t v285 = *(void *)(v284 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v285 + 48))(v283, 1, v284))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v621, v283, *(void *)(*(void *)(v286 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v285 + 16))(v621, v283, v284);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v285 + 56))(v621, 0, 1, v284);
          }
          uint64_t v319 = *(int *)(v98 + 32);
          uint64_t v320 = &v217[v319];
          v321 = &v218[v319];
          uint64_t v322 = v321[1];
          *uint64_t v320 = *v321;
          v320[1] = v322;
          uint64_t v323 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
          swift_bridgeObjectRetain();
          v323(v217, 0, 1, v98);
          uint64_t v99 = (unsigned int (*)(void, void, void))v654;
          uint64_t v220 = (unsigned int (*)(void, void, void))v630;
        }
        uint64_t v324 = *(int *)(v219 + 20);
        long long v325 = &v217[v324];
        uint64_t v326 = &v218[v324];
        if (v99(v326, 1, v98))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v325, v326, *(void *)(*(void *)(v327 - 8) + 64));
          uint64_t v94 = v675;
        }
        else
        {
          *long long v325 = *v326;
          *((void *)v325 + 1) = *((void *)v326 + 1);
          *((_DWORD *)v325 + 4) = *((_DWORD *)v326 + 4);
          uint64_t v328 = *((void *)v326 + 7);
          v632 = v220;
          if (v328 == 1)
          {
            long long v329 = *(_OWORD *)(v326 + 40);
            *(_OWORD *)(v325 + 24) = *(_OWORD *)(v326 + 24);
            *(_OWORD *)(v325 + 40) = v329;
            *((void *)v325 + 7) = *((void *)v326 + 7);
          }
          else
          {
            v325[24] = v326[24];
            *(_WORD *)(v325 + 25) = *(_WORD *)(v326 + 25);
            *(_OWORD *)(v325 + 28) = *(_OWORD *)(v326 + 28);
            *((_DWORD *)v325 + 11) = *((_DWORD *)v326 + 11);
            *((void *)v325 + 6) = *((void *)v326 + 6);
            *((void *)v325 + 7) = v328;
            swift_bridgeObjectRetain();
          }
          uint64_t v330 = *(int *)(v98 + 28);
          v622 = &v325[v330];
          uint64_t v331 = &v326[v330];
          uint64_t v332 = sub_23309B300();
          uint64_t v618 = *(void *)(v332 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v618 + 48))(v331, 1, v332))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v622, v331, *(void *)(*(void *)(v333 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v618 + 16))(v622, v331, v332);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v618 + 56))(v622, 0, 1, v332);
          }
          uint64_t v396 = *(int *)(v98 + 32);
          v397 = &v325[v396];
          v398 = &v326[v396];
          uint64_t v399 = v398[1];
          void *v397 = *v398;
          v397[1] = v399;
          uint64_t v400 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
          swift_bridgeObjectRetain();
          v400(v325, 0, 1, v98);
          uint64_t v94 = v675;
          uint64_t v99 = (unsigned int (*)(void, void, void))v654;
          uint64_t v220 = (unsigned int (*)(void, void, void))v632;
        }
        ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstb[7])(v217, 0, 1, v219);
      }
      uint64_t v401 = v94[15];
      uint64_t v402 = (void *)((char *)a1 + v401);
      v403 = (void *)(a2 + v401);
      uint64_t v404 = v403[1];
      *uint64_t v402 = *v403;
      v402[1] = v404;
      uint64_t v405 = v94[16];
      v406 = (char *)a1 + v405;
      uint64_t v407 = (unsigned char *)(a2 + v405);
      swift_bridgeObjectRetain();
      if (v99(v407, 1, v98))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v406, v407, *(void *)(*(void *)(v408 - 8) + 64));
      }
      else
      {
        unsigned char *v406 = *v407;
        *((void *)v406 + 1) = *((void *)v407 + 1);
        *((_DWORD *)v406 + 4) = *((_DWORD *)v407 + 4);
        uint64_t v409 = *((void *)v407 + 7);
        uint64_t v626 = v219;
        uint64_t v634 = v220;
        if (v409 == 1)
        {
          long long v410 = *(_OWORD *)(v407 + 40);
          *(_OWORD *)(v406 + 24) = *(_OWORD *)(v407 + 24);
          *(_OWORD *)(v406 + 40) = v410;
          *((void *)v406 + 7) = *((void *)v407 + 7);
        }
        else
        {
          v406[24] = v407[24];
          *(_WORD *)(v406 + 25) = *(_WORD *)(v407 + 25);
          *(_OWORD *)(v406 + 28) = *(_OWORD *)(v407 + 28);
          *((_DWORD *)v406 + 11) = *((_DWORD *)v407 + 11);
          *((void *)v406 + 6) = *((void *)v407 + 6);
          *((void *)v406 + 7) = v409;
          swift_bridgeObjectRetain();
        }
        uint64_t v411 = *(int *)(v98 + 28);
        v412 = &v406[v411];
        v413 = &v407[v411];
        uint64_t v414 = sub_23309B300();
        uint64_t v415 = *(void *)(v414 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v415 + 48))(v413, 1, v414))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v412, v413, *(void *)(*(void *)(v416 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v415 + 16))(v412, v413, v414);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v415 + 56))(v412, 0, 1, v414);
        }
        uint64_t v94 = v675;
        uint64_t v219 = v626;
        uint64_t v417 = *(int *)(v98 + 32);
        v418 = &v406[v417];
        uint64_t v419 = &v407[v417];
        uint64_t v420 = v419[1];
        void *v418 = *v419;
        v418[1] = v420;
        v421 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
        swift_bridgeObjectRetain();
        v421(v406, 0, 1, v98);
        uint64_t v99 = (unsigned int (*)(void, void, void))v654;
        uint64_t v220 = (unsigned int (*)(void, void, void))v634;
      }
      uint64_t v422 = v94[17];
      uint64_t v423 = (char *)a1 + v422;
      uint64_t v424 = (unsigned char *)(a2 + v422);
      if (v220(a2 + v422, 1, v219))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v423, v424, *(void *)(*(void *)(v425 - 8) + 64));
      }
      else
      {
        if (v99(v424, 1, v98))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v423, v424, *(void *)(*(void *)(v426 - 8) + 64));
        }
        else
        {
          *uint64_t v423 = *v424;
          *((void *)v423 + 1) = *((void *)v424 + 1);
          *((_DWORD *)v423 + 4) = *((_DWORD *)v424 + 4);
          uint64_t v427 = *((void *)v424 + 7);
          uint64_t v627 = v219;
          if (v427 == 1)
          {
            long long v428 = *(_OWORD *)(v424 + 40);
            *(_OWORD *)(v423 + 24) = *(_OWORD *)(v424 + 24);
            *(_OWORD *)(v423 + 40) = v428;
            *((void *)v423 + 7) = *((void *)v424 + 7);
          }
          else
          {
            v423[24] = v424[24];
            *(_WORD *)(v423 + 25) = *(_WORD *)(v424 + 25);
            *(_OWORD *)(v423 + 28) = *(_OWORD *)(v424 + 28);
            *((_DWORD *)v423 + 11) = *((_DWORD *)v424 + 11);
            *((void *)v423 + 6) = *((void *)v424 + 6);
            *((void *)v423 + 7) = v427;
            swift_bridgeObjectRetain();
          }
          uint64_t v429 = *(int *)(v98 + 28);
          uint64_t v430 = &v423[v429];
          uint64_t v431 = &v424[v429];
          uint64_t v432 = sub_23309B300();
          uint64_t v433 = *(void *)(v432 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v433 + 48))(v431, 1, v432))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v430, v431, *(void *)(*(void *)(v434 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v433 + 16))(v430, v431, v432);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v433 + 56))(v430, 0, 1, v432);
          }
          uint64_t v219 = v627;
          uint64_t v483 = *(int *)(v98 + 32);
          v484 = &v423[v483];
          uint64_t v485 = &v424[v483];
          uint64_t v486 = v485[1];
          void *v484 = *v485;
          v484[1] = v486;
          uint64_t v487 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
          swift_bridgeObjectRetain();
          v487(v423, 0, 1, v98);
          uint64_t v99 = (unsigned int (*)(void, void, void))v654;
        }
        uint64_t v488 = *(int *)(v219 + 20);
        uint64_t v489 = &v423[v488];
        uint64_t v490 = &v424[v488];
        if (v99(v490, 1, v98))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v489, v490, *(void *)(*(void *)(v491 - 8) + 64));
          uint64_t v94 = v675;
        }
        else
        {
          *uint64_t v489 = *v490;
          *((void *)v489 + 1) = *((void *)v490 + 1);
          *((_DWORD *)v489 + 4) = *((_DWORD *)v490 + 4);
          uint64_t v492 = *((void *)v490 + 7);
          uint64_t v628 = v219;
          if (v492 == 1)
          {
            long long v493 = *(_OWORD *)(v490 + 40);
            *(_OWORD *)(v489 + 24) = *(_OWORD *)(v490 + 24);
            *(_OWORD *)(v489 + 40) = v493;
            *((void *)v489 + 7) = *((void *)v490 + 7);
          }
          else
          {
            v489[24] = v490[24];
            *(_WORD *)(v489 + 25) = *(_WORD *)(v490 + 25);
            *(_OWORD *)(v489 + 28) = *(_OWORD *)(v490 + 28);
            *((_DWORD *)v489 + 11) = *((_DWORD *)v490 + 11);
            *((void *)v489 + 6) = *((void *)v490 + 6);
            *((void *)v489 + 7) = v492;
            swift_bridgeObjectRetain();
          }
          uint64_t v494 = *(int *)(v98 + 28);
          v649 = &v489[v494];
          uint64_t v495 = &v490[v494];
          uint64_t v496 = sub_23309B300();
          uint64_t v497 = *(void *)(v496 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v497 + 48))(v495, 1, v496))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v649, v495, *(void *)(*(void *)(v498 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v497 + 16))(v649, v495, v496);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v497 + 56))(v649, 0, 1, v496);
          }
          uint64_t v219 = v628;
          uint64_t v499 = *(int *)(v98 + 32);
          uint64_t v500 = &v489[v499];
          uint64_t v501 = &v490[v499];
          uint64_t v502 = v501[1];
          *uint64_t v500 = *v501;
          v500[1] = v502;
          v503 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
          swift_bridgeObjectRetain();
          v503(v489, 0, 1, v98);
          uint64_t v94 = v675;
          uint64_t v99 = (unsigned int (*)(void, void, void))v654;
        }
        ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstb[7])(v423, 0, 1, v219);
      }
      uint64_t v504 = v94[18];
      v505 = (void *)((char *)a1 + v504);
      uint64_t v506 = (void *)(a2 + v504);
      uint64_t v507 = v506[1];
      void *v505 = *v506;
      v505[1] = v507;
      uint64_t v508 = v94[19];
      uint64_t v509 = (char *)a1 + v508;
      uint64_t v510 = (unsigned char *)(a2 + v508);
      swift_bridgeObjectRetain();
      if (v99(v510, 1, v98))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v509, v510, *(void *)(*(void *)(v511 - 8) + 64));
      }
      else
      {
        *uint64_t v509 = *v510;
        *((void *)v509 + 1) = *((void *)v510 + 1);
        *((_DWORD *)v509 + 4) = *((_DWORD *)v510 + 4);
        uint64_t v512 = *((void *)v510 + 7);
        if (v512 == 1)
        {
          long long v513 = *(_OWORD *)(v510 + 40);
          *(_OWORD *)(v509 + 24) = *(_OWORD *)(v510 + 24);
          *(_OWORD *)(v509 + 40) = v513;
          *((void *)v509 + 7) = *((void *)v510 + 7);
        }
        else
        {
          v509[24] = v510[24];
          *(_WORD *)(v509 + 25) = *(_WORD *)(v510 + 25);
          *(_OWORD *)(v509 + 28) = *(_OWORD *)(v510 + 28);
          *((_DWORD *)v509 + 11) = *((_DWORD *)v510 + 11);
          *((void *)v509 + 6) = *((void *)v510 + 6);
          *((void *)v509 + 7) = v512;
          swift_bridgeObjectRetain();
        }
        uint64_t v514 = *(int *)(v98 + 28);
        uint64_t v515 = &v509[v514];
        uint64_t v516 = &v510[v514];
        uint64_t v517 = sub_23309B300();
        uint64_t v518 = *(void *)(v517 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v518 + 48))(v516, 1, v517))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v515, v516, *(void *)(*(void *)(v519 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v518 + 16))(v515, v516, v517);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v518 + 56))(v515, 0, 1, v517);
        }
        uint64_t v520 = *(int *)(v98 + 32);
        v521 = &v509[v520];
        uint64_t v522 = &v510[v520];
        uint64_t v523 = v522[1];
        void *v521 = *v522;
        v521[1] = v523;
        v524 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v664 + 56);
        swift_bridgeObjectRetain();
        v524(v509, 0, 1, v98);
      }
      uint64_t v525 = v94[20];
      uint64_t v526 = (void *)((char *)a1 + v525);
      v527 = (void *)(a2 + v525);
      uint64_t v528 = type metadata accessor for Reference();
      uint64_t v529 = *(void *)(v528 - 8);
      uint64_t v530 = *(unsigned int (**)(void, void, void))(v529 + 48);
      if (v530(v527, 1, v528))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v526, v527, *(void *)(*(void *)(v531 - 8) + 64));
      }
      else
      {
        v658 = v530;
        uint64_t v668 = v529;
        uint64_t v532 = v527[1];
        *uint64_t v526 = *v527;
        v526[1] = v532;
        uint64_t v533 = v527[3];
        v526[2] = v527[2];
        v526[3] = v533;
        uint64_t v534 = *(int *)(v528 + 24);
        v635 = (void *)((char *)v526 + v534);
        __dste = (void *)v528;
        uint64_t v535 = (void *)((char *)v527 + v534);
        uint64_t v536 = type metadata accessor for Identifier();
        uint64_t v537 = *(void *)(v536 - 8);
        uint64_t v538 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v537 + 48);
        swift_bridgeObjectRetain();
        v539 = v535;
        swift_bridgeObjectRetain();
        if (v538(v535, 1, v536))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v635, v535, *(void *)(*(void *)(v540 - 8) + 64));
          uint64_t v529 = v668;
          uint64_t v94 = v675;
          uint64_t v530 = (unsigned int (*)(void, void, void))v658;
        }
        else
        {
          uint64_t v619 = v537;
          v623 = (int *)v536;
          uint64_t v541 = v535[1];
          void *v635 = *v535;
          v635[1] = v541;
          uint64_t v542 = v535[3];
          swift_bridgeObjectRetain();
          if (v542 == 1)
          {
            *((_OWORD *)v635 + 1) = *((_OWORD *)v535 + 1);
            v635[4] = v535[4];
          }
          else
          {
            v635[2] = v535[2];
            v635[3] = v542;
            v635[4] = v535[4];
            swift_bridgeObjectRetain();
            v539 = v535;
            swift_bridgeObjectRetain();
          }
          uint64_t v94 = v675;
          uint64_t v530 = (unsigned int (*)(void, void, void))v658;
          uint64_t v543 = *(int *)(v536 + 24);
          v659 = (char *)v635 + v543;
          v544 = (char *)v539 + v543;
          uint64_t v545 = sub_23309AF80();
          uint64_t v546 = *(void *)(v545 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v546 + 48))(v544, 1, v545))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v659, v544, *(void *)(*(void *)(v547 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v546 + 16))(v659, v544, v545);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v546 + 56))(v659, 0, 1, v545);
          }
          uint64_t v529 = v668;
          uint64_t v548 = v623[7];
          uint64_t v549 = (void *)((char *)v635 + v548);
          uint64_t v550 = (void *)((char *)v535 + v548);
          uint64_t v551 = v550[1];
          *uint64_t v549 = *v550;
          v549[1] = v551;
          v669 = *(void (**)(void *, void, uint64_t, int *))(v619 + 56);
          swift_bridgeObjectRetain();
          v669(v635, 0, 1, v623);
        }
        uint64_t v528 = (uint64_t)__dste;
        (*(void (**)(void *, void, uint64_t, void *))(v529 + 56))(v526, 0, 1, __dste);
      }
      uint64_t v552 = v94[21];
      v553 = (void *)((char *)a1 + v552);
      uint64_t v554 = (void *)(a2 + v552);
      if (v530(a2 + v552, 1, v528))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v553, v554, *(void *)(*(void *)(v555 - 8) + 64));
      }
      else
      {
        uint64_t v670 = v529;
        uint64_t v556 = v554[1];
        void *v553 = *v554;
        v553[1] = v556;
        uint64_t v557 = v554[3];
        v553[2] = v554[2];
        v553[3] = v557;
        uint64_t v558 = *(int *)(v528 + 24);
        v660 = (void *)((char *)v553 + v558);
        uint64_t v559 = (void *)((char *)v554 + v558);
        uint64_t v560 = type metadata accessor for Identifier();
        uint64_t v561 = *(void **)(v560 - 8);
        v562 = (unsigned int (*)(void *, uint64_t, int *))v561[6];
        uint64_t v563 = (int *)v560;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v562(v559, 1, v563))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v660, v559, *(void *)(*(void *)(v564 - 8) + 64));
          uint64_t v565 = v670;
          uint64_t v94 = v675;
        }
        else
        {
          v650 = v561;
          uint64_t v566 = v559[1];
          void *v660 = *v559;
          v660[1] = v566;
          uint64_t v567 = v559[3];
          swift_bridgeObjectRetain();
          v568 = v559;
          if (v567 == 1)
          {
            *((_OWORD *)v660 + 1) = *((_OWORD *)v559 + 1);
            v660[4] = v559[4];
          }
          else
          {
            v660[2] = v559[2];
            v660[3] = v567;
            v660[4] = v559[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v636 = v563;
          __dstf = (char *)v559;
          uint64_t v569 = v563[6];
          v570 = (char *)v660 + v569;
          uint64_t v571 = (char *)v568 + v569;
          uint64_t v572 = sub_23309AF80();
          uint64_t v573 = *(void *)(v572 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v573 + 48))(v571, 1, v572))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v570, v571, *(void *)(*(void *)(v574 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v573 + 16))(v570, v571, v572);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v573 + 56))(v570, 0, 1, v572);
          }
          uint64_t v565 = v670;
          uint64_t v575 = v636[7];
          uint64_t v576 = (void *)((char *)v660 + v575);
          uint64_t v577 = &__dstf[v575];
          uint64_t v578 = *((void *)v577 + 1);
          *uint64_t v576 = *(void *)v577;
          v576[1] = v578;
          uint64_t v579 = (void (*)(void *, void, uint64_t, int *))v650[7];
          swift_bridgeObjectRetain();
          v579(v660, 0, 1, v636);
          uint64_t v94 = v675;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v565 + 56))(v553, 0, 1, v528);
      }
      *(void *)((char *)a1 + v94[22]) = *(void *)(a2 + v94[22]);
      uint64_t v482 = v94[23];
      goto LABEL_276;
    case 3u:
      uint64_t v15 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v15;
      uint64_t v16 = a1;
      uint64_t v17 = *(void *)(a2 + 24);
      v16[2] = *(void *)(a2 + 16);
      void v16[3] = v17;
      uint64_t v18 = *(void *)(a2 + 40);
      v16[4] = *(void *)(a2 + 32);
      v16[5] = v18;
      uint64_t v20 = *(void *)(a2 + 56);
      uint64_t v19 = *(void *)(a2 + 64);
      v16[6] = *(void *)(a2 + 48);
      v16[7] = v20;
      uint64_t v21 = *(void *)(a2 + 72);
      uint64_t v22 = *(void *)(a2 + 80);
      v16[8] = v19;
      v16[9] = v21;
      uint64_t v23 = *(void *)(a2 + 88);
      uint64_t v24 = *(void *)(a2 + 96);
      v16[10] = v22;
      v16[11] = v23;
      v16[12] = v24;
      uint64_t v661 = type metadata accessor for ModelsR4.DiagnosticReport(0);
      v671 = v16;
      uint64_t v25 = *(int *)(v661 + 44);
      uint64_t v681 = a2;
      __dst = (char *)v16 + v25;
      uint64_t v644 = (unsigned char *)(a2 + v25);
      uint64_t v26 = type metadata accessor for FHIRDateTime();
      v651 = *(void **)(v26 - 8);
      uint64_t v27 = (unsigned int (*)(void, void, void))v651[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27(v644, 1, v26))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(__dst, v644, *(void *)(*(void *)(v28 - 8) + 64));
        uint64_t v29 = (int *)v661;
        a1 = v671;
      }
      else
      {
        unsigned char *__dst = *v644;
        *((void *)__dst + 1) = *((void *)v644 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v644 + 4);
        uint64_t v101 = *((void *)v644 + 7);
        uint64_t v624 = v27;
        if (v101 == 1)
        {
          long long v102 = *(_OWORD *)(v644 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v644 + 24);
          *(_OWORD *)(__dst + 40) = v102;
          *((void *)__dst + 7) = *((void *)v644 + 7);
        }
        else
        {
          __dst[24] = v644[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v644 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v644 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v644 + 11);
          *((void *)__dst + 6) = *((void *)v644 + 6);
          *((void *)__dst + 7) = v101;
          swift_bridgeObjectRetain();
        }
        uint64_t v29 = (int *)v661;
        a1 = v671;
        uint64_t v113 = *(int *)(v26 + 28);
        uint64_t v114 = &__dst[v113];
        long long v115 = &v644[v113];
        uint64_t v116 = sub_23309B300();
        uint64_t v117 = *(void *)(v116 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v117 + 16))(v114, v115, v116);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
        }
        uint64_t v142 = *(int *)(v26 + 32);
        uint64_t v143 = &__dst[v142];
        uint64_t v144 = &v644[v142];
        uint64_t v145 = v144[1];
        *uint64_t v143 = *v144;
        v143[1] = v145;
        uint64_t v146 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v651[7];
        swift_bridgeObjectRetain();
        v146(__dst, 0, 1, v26);
        uint64_t v27 = v624;
      }
      uint64_t v147 = v29[12];
      uint64_t v148 = (char *)a1 + v147;
      uint64_t v149 = (unsigned char *)(a2 + v147);
      uint64_t v150 = type metadata accessor for Period();
      uint64_t v151 = *(void *)(v150 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
      }
      else
      {
        uint64_t v676 = v26;
        if (v27(v149, 1, v26))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v148, v149, *(void *)(*(void *)(v153 - 8) + 64));
        }
        else
        {
          *uint64_t v148 = *v149;
          *((void *)v148 + 1) = *((void *)v149 + 1);
          *((_DWORD *)v148 + 4) = *((_DWORD *)v149 + 4);
          uint64_t v223 = *((void *)v149 + 7);
          uint64_t v224 = v27;
          if (v223 == 1)
          {
            long long v225 = *(_OWORD *)(v149 + 40);
            *(_OWORD *)(v148 + 24) = *(_OWORD *)(v149 + 24);
            *(_OWORD *)(v148 + 40) = v225;
            *((void *)v148 + 7) = *((void *)v149 + 7);
          }
          else
          {
            v148[24] = v149[24];
            *(_WORD *)(v148 + 25) = *(_WORD *)(v149 + 25);
            *(_OWORD *)(v148 + 28) = *(_OWORD *)(v149 + 28);
            *((_DWORD *)v148 + 11) = *((_DWORD *)v149 + 11);
            *((void *)v148 + 6) = *((void *)v149 + 6);
            *((void *)v148 + 7) = v223;
            swift_bridgeObjectRetain();
          }
          uint64_t v276 = *(int *)(v26 + 28);
          uint64_t v277 = &v148[v276];
          uint64_t v278 = &v149[v276];
          uint64_t v279 = sub_23309B300();
          uint64_t v280 = *(void *)(v279 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v280 + 48))(v278, 1, v279))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v277, v278, *(void *)(*(void *)(v281 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v280 + 16))(v277, v278, v279);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v280 + 56))(v277, 0, 1, v279);
          }
          uint64_t v29 = (int *)v661;
          uint64_t v26 = v676;
          uint64_t v302 = *(int *)(v676 + 32);
          uint64_t v303 = &v148[v302];
          uint64_t v304 = &v149[v302];
          uint64_t v305 = v304[1];
          *uint64_t v303 = *v304;
          v303[1] = v305;
          int v306 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v651[7];
          swift_bridgeObjectRetain();
          v306(v148, 0, 1, v676);
          uint64_t v27 = v224;
        }
        uint64_t v307 = *(int *)(v150 + 20);
        uint64_t v308 = &v148[v307];
        v309 = &v149[v307];
        if (v27(v309, 1, v26))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v308, v309, *(void *)(*(void *)(v310 - 8) + 64));
          uint64_t v26 = v676;
        }
        else
        {
          *uint64_t v308 = *v309;
          *((void *)v308 + 1) = *((void *)v309 + 1);
          *((_DWORD *)v308 + 4) = *((_DWORD *)v309 + 4);
          uint64_t v311 = *((void *)v309 + 7);
          uint64_t v625 = v27;
          if (v311 == 1)
          {
            long long v312 = *(_OWORD *)(v309 + 40);
            *(_OWORD *)(v308 + 24) = *(_OWORD *)(v309 + 24);
            *(_OWORD *)(v308 + 40) = v312;
            *((void *)v308 + 7) = *((void *)v309 + 7);
          }
          else
          {
            v308[24] = v309[24];
            *(_WORD *)(v308 + 25) = *(_WORD *)(v309 + 25);
            *(_OWORD *)(v308 + 28) = *(_OWORD *)(v309 + 28);
            *((_DWORD *)v308 + 11) = *((_DWORD *)v309 + 11);
            *((void *)v308 + 6) = *((void *)v309 + 6);
            *((void *)v308 + 7) = v311;
            swift_bridgeObjectRetain();
          }
          uint64_t v313 = *(int *)(v676 + 28);
          long long v314 = &v308[v313];
          uint64_t v315 = &v309[v313];
          uint64_t v316 = sub_23309B300();
          uint64_t v317 = *(void *)(v316 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v314, v315, *(void *)(*(void *)(v318 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v317 + 16))(v314, v315, v316);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v317 + 56))(v314, 0, 1, v316);
          }
          uint64_t v29 = (int *)v661;
          uint64_t v26 = v676;
          uint64_t v370 = *(int *)(v676 + 32);
          uint64_t v371 = &v308[v370];
          v372 = &v309[v370];
          uint64_t v373 = v372[1];
          *uint64_t v371 = *v372;
          v371[1] = v373;
          v374 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v651[7];
          swift_bridgeObjectRetain();
          v374(v308, 0, 1, v676);
          uint64_t v27 = v625;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
      }
      uint64_t v375 = v29[13];
      uint64_t v376 = (char *)a1 + v375;
      uint64_t v377 = (unsigned char *)(v681 + v375);
      if (v27(v681 + v375, 1, v26))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v376, v377, *(void *)(*(void *)(v378 - 8) + 64));
      }
      else
      {
        *uint64_t v376 = *v377;
        *((void *)v376 + 1) = *((void *)v377 + 1);
        *((_DWORD *)v376 + 4) = *((_DWORD *)v377 + 4);
        uint64_t v379 = *((void *)v377 + 7);
        if (v379 == 1)
        {
          long long v380 = *(_OWORD *)(v377 + 40);
          *(_OWORD *)(v376 + 24) = *(_OWORD *)(v377 + 24);
          *(_OWORD *)(v376 + 40) = v380;
          *((void *)v376 + 7) = *((void *)v377 + 7);
        }
        else
        {
          v376[24] = v377[24];
          *(_WORD *)(v376 + 25) = *(_WORD *)(v377 + 25);
          *(_OWORD *)(v376 + 28) = *(_OWORD *)(v377 + 28);
          *((_DWORD *)v376 + 11) = *((_DWORD *)v377 + 11);
          *((void *)v376 + 6) = *((void *)v377 + 6);
          *((void *)v376 + 7) = v379;
          swift_bridgeObjectRetain();
        }
        uint64_t v381 = *(int *)(v26 + 28);
        uint64_t v382 = &v376[v381];
        uint64_t v383 = &v377[v381];
        uint64_t v384 = sub_23309B300();
        uint64_t v385 = *(void *)(v384 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v385 + 48))(v383, 1, v384))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v382, v383, *(void *)(*(void *)(v386 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v385 + 16))(v382, v383, v384);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v385 + 56))(v382, 0, 1, v384);
        }
        uint64_t v387 = *(int *)(v26 + 32);
        v388 = &v376[v387];
        uint64_t v389 = &v377[v387];
        uint64_t v390 = v389[1];
        void *v388 = *v389;
        v388[1] = v390;
        v391 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v651[7];
        swift_bridgeObjectRetain();
        v391(v376, 0, 1, v26);
      }
      *(void *)((char *)a1 + v29[14]) = *(void *)(v681 + v29[14]);
      *(void *)((char *)a1 + v29[15]) = *(void *)(v681 + v29[15]);
      uint64_t v392 = v29[16];
      uint64_t v393 = (void *)((char *)a1 + v392);
      long long v394 = (void *)(v681 + v392);
      uint64_t v395 = v394[1];
      *uint64_t v393 = *v394;
      v393[1] = v395;
      goto LABEL_186;
    case 4u:
      uint64_t v30 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v30;
      uint64_t v31 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v31;
      uint64_t v32 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v32 != 1) {
        swift_bridgeObjectRetain();
      }
      uint64_t v33 = *(void *)(a2 + 40);
      uint64_t v34 = *(void *)(a2 + 48);
      a1[4] = v32;
      a1[5] = v33;
      uint64_t v35 = *(void *)(a2 + 56);
      uint64_t v36 = *(void *)(a2 + 64);
      a1[6] = v34;
      a1[7] = v35;
      uint64_t v37 = *(void *)(a2 + 72);
      uint64_t v38 = *(void *)(a2 + 80);
      a1[8] = v36;
      a1[9] = v37;
      uint64_t v39 = *(void *)(a2 + 88);
      uint64_t v40 = *(void *)(a2 + 96);
      a1[10] = v38;
      a1[11] = v39;
      a1[12] = v40;
      v662 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
      v672 = a1;
      uint64_t v41 = v662[11];
      uint64_t v42 = (char *)a1 + v41;
      uint64_t v682 = a2;
      uint64_t v43 = (unsigned char *)(a2 + v41);
      uint64_t v44 = type metadata accessor for FHIRDateTime();
      v652 = *(void **)(v44 - 8);
      uint64_t v45 = (unsigned int (*)(unsigned char *, uint64_t, int *))v652[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v45;
      uint64_t v629 = (int *)v44;
      if (v45(v43, 1, (int *)v44))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
        a1 = v672;
        uint64_t v47 = v682;
      }
      else
      {
        *uint64_t v42 = *v43;
        *((void *)v42 + 1) = *((void *)v43 + 1);
        *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
        uint64_t v103 = *((void *)v43 + 7);
        uint64_t v104 = v42;
        if (v103 == 1)
        {
          long long v105 = *(_OWORD *)(v43 + 40);
          *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
          *(_OWORD *)(v42 + 40) = v105;
          *((void *)v42 + 7) = *((void *)v43 + 7);
        }
        else
        {
          v42[24] = v43[24];
          *(_WORD *)(v42 + 25) = *(_WORD *)(v43 + 25);
          *(_OWORD *)(v42 + 28) = *(_OWORD *)(v43 + 28);
          *((_DWORD *)v42 + 11) = *((_DWORD *)v43 + 11);
          *((void *)v42 + 6) = *((void *)v43 + 6);
          *((void *)v42 + 7) = v103;
          swift_bridgeObjectRetain();
        }
        a1 = v672;
        uint64_t v47 = v682;
        uint64_t v119 = *(int *)(v44 + 28);
        uint64_t v120 = &v104[v119];
        uint64_t v121 = &v43[v119];
        uint64_t v122 = sub_23309B300();
        uint64_t v123 = *(void *)(v122 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v123 + 16))(v120, v121, v122);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
        }
        uint64_t v154 = *(int *)(v44 + 32);
        uint64_t v155 = &v104[v154];
        uint64_t v156 = &v43[v154];
        uint64_t v157 = v156[1];
        *uint64_t v155 = *v156;
        v155[1] = v157;
        uint64_t v158 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v652[7];
        swift_bridgeObjectRetain();
        v158(v104, 0, 1, v44);
      }
      uint64_t v159 = v662[12];
      v160 = (void *)((char *)a1 + v159);
      v161 = (void *)(v47 + v159);
      uint64_t v162 = v161[1];
      void *v160 = *v161;
      v160[1] = v162;
      *(void *)((char *)a1 + v662[13]) = *(void *)(v47 + v662[13]);
      *(void *)((char *)a1 + v662[14]) = *(void *)(v47 + v662[14]);
      uint64_t v163 = v662[15];
      uint64_t v164 = (void *)((char *)a1 + v163);
      uint64_t v165 = (void *)(v47 + v163);
      uint64_t v166 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
      uint64_t v167 = *(void *)(v166 - 8);
      uint64_t v168 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v167 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v168(v165, 1, v166))
      {
        sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
        memcpy(v164, v165, *(void *)(*(void *)(v169 - 8) + 64));
      }
      else
      {
        uint64_t v677 = v167;
        void *v164 = *v165;
        uint64_t v170 = *(int *)(v166 + 20);
        char v171 = (char *)v164 + v170;
        uint64_t v172 = (char *)v165 + v170;
        uint64_t v173 = type metadata accessor for Period();
        uint64_t v174 = *(void **)(v173 - 8);
        uint64_t v175 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v174[6];
        swift_bridgeObjectRetain();
        if (v175(v172, 1, v173))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v171, v172, *(void *)(*(void *)(v176 - 8) + 64));
        }
        else
        {
          uint64_t v620 = v174;
          uint64_t v617 = v164;
          if (__dsta(v172, 1, v629))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v171, v172, *(void *)(*(void *)(v226 - 8) + 64));
            uint64_t v227 = v171;
          }
          else
          {
            unsigned char *v171 = *v172;
            *((void *)v171 + 1) = *((void *)v172 + 1);
            *((_DWORD *)v171 + 4) = *((_DWORD *)v172 + 4);
            uint64_t v300 = *((void *)v172 + 7);
            if (v300 == 1)
            {
              long long v301 = *(_OWORD *)(v172 + 40);
              *(_OWORD *)(v171 + 24) = *(_OWORD *)(v172 + 24);
              *(_OWORD *)(v171 + 40) = v301;
              *((void *)v171 + 7) = *((void *)v172 + 7);
            }
            else
            {
              v171[24] = v172[24];
              *(_WORD *)(v171 + 25) = *(_WORD *)(v172 + 25);
              *(_OWORD *)(v171 + 28) = *(_OWORD *)(v172 + 28);
              *((_DWORD *)v171 + 11) = *((_DWORD *)v172 + 11);
              *((void *)v171 + 6) = *((void *)v172 + 6);
              *((void *)v171 + 7) = v300;
              swift_bridgeObjectRetain();
            }
            uint64_t v584 = v629[7];
            uint64_t v585 = &v171[v584];
            uint64_t v586 = &v172[v584];
            uint64_t v587 = sub_23309B300();
            uint64_t v588 = *(void *)(v587 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v588 + 48))(v586, 1, v587))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v585, v586, *(void *)(*(void *)(v589 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v588 + 16))(v585, v586, v587);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v588 + 56))(v585, 0, 1, v587);
            }
            uint64_t v590 = v629[8];
            uint64_t v227 = v171;
            uint64_t v591 = &v171[v590];
            v592 = &v172[v590];
            uint64_t v593 = v592[1];
            *uint64_t v591 = *v592;
            v591[1] = v593;
            uint64_t v594 = (void (*)(unsigned char *, void, uint64_t, int *))v652[7];
            swift_bridgeObjectRetain();
            v594(v171, 0, 1, v629);
          }
          v595 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v174;
          uint64_t v596 = *(int *)(v173 + 20);
          v597 = &v227[v596];
          v598 = &v172[v596];
          if (__dsta(&v172[v596], 1, v629))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v597, v598, *(void *)(*(void *)(v599 - 8) + 64));
          }
          else
          {
            unsigned char *v597 = *v598;
            *((void *)v597 + 1) = *((void *)v598 + 1);
            *((_DWORD *)v597 + 4) = *((_DWORD *)v598 + 4);
            uint64_t v600 = *((void *)v598 + 7);
            if (v600 == 1)
            {
              long long v601 = *(_OWORD *)(v598 + 40);
              *(_OWORD *)(v597 + 24) = *(_OWORD *)(v598 + 24);
              *(_OWORD *)(v597 + 40) = v601;
              *((void *)v597 + 7) = *((void *)v598 + 7);
            }
            else
            {
              v597[24] = v598[24];
              *(_WORD *)(v597 + 25) = *(_WORD *)(v598 + 25);
              *(_OWORD *)(v597 + 28) = *(_OWORD *)(v598 + 28);
              *((_DWORD *)v597 + 11) = *((_DWORD *)v598 + 11);
              *((void *)v597 + 6) = *((void *)v598 + 6);
              *((void *)v597 + 7) = v600;
              swift_bridgeObjectRetain();
            }
            uint64_t v602 = v629[7];
            uint64_t v603 = &v597[v602];
            uint64_t v604 = &v598[v602];
            uint64_t v605 = sub_23309B300();
            uint64_t v606 = *(void *)(v605 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v606 + 48))(v604, 1, v605))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v603, v604, *(void *)(*(void *)(v607 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v606 + 16))(v603, v604, v605);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v606 + 56))(v603, 0, 1, v605);
            }
            uint64_t v608 = v629[8];
            uint64_t v609 = &v597[v608];
            v610 = &v598[v608];
            uint64_t v611 = v610[1];
            *uint64_t v609 = *v610;
            v609[1] = v611;
            v612 = (void (*)(unsigned char *, void, uint64_t, int *))v652[7];
            swift_bridgeObjectRetain();
            v612(v597, 0, 1, v629);
            v595 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v620;
          }
          v595[7](v171, 0, 1, v173);
          uint64_t v164 = v617;
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v677 + 56))(v164, 0, 1, v166);
      }
      uint64_t v613 = v662[16];
      uint64_t v614 = (void *)((char *)a1 + v613);
      uint64_t v615 = (void *)(v682 + v613);
      uint64_t v616 = v615[1];
      *uint64_t v614 = *v615;
      v614[1] = v616;
      goto LABEL_278;
    case 5u:
      uint64_t v48 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v48;
      uint64_t v49 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v49;
      uint64_t v50 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v50 != 1) {
        swift_bridgeObjectRetain();
      }
      uint64_t v51 = *(void *)(a2 + 40);
      uint64_t v52 = *(void *)(a2 + 48);
      a1[4] = v50;
      a1[5] = v51;
      uint64_t v53 = *(void *)(a2 + 56);
      a1[6] = v52;
      a1[7] = v53;
      *(void *)((char *)a1 + 61) = *(void *)(a2 + 61);
      a1[9] = *(void *)(a2 + 72);
      uint64_t v673 = type metadata accessor for ModelsR4.Immunization(0);
      uint64_t v54 = *(int *)(v673 + 40);
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = (unsigned char *)(a2 + v54);
      uint64_t v57 = type metadata accessor for FHIRDateTime();
      uint64_t v58 = *(void *)(v57 - 8);
      uint64_t v59 = *(unsigned int (**)(void, void, void))(v58 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59(v56, 1, v57))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
        uint64_t v61 = (int *)v673;
      }
      else
      {
        *uint64_t v55 = *v56;
        *((void *)v55 + 1) = *((void *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        uint64_t v106 = *((void *)v56 + 7);
        uint64_t v665 = v58;
        uint64_t v646 = v59;
        if (v106 == 1)
        {
          long long v107 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v107;
          *((void *)v55 + 7) = *((void *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((void *)v55 + 6) = *((void *)v56 + 6);
          *((void *)v55 + 7) = v106;
          swift_bridgeObjectRetain();
        }
        uint64_t v61 = (int *)v673;
        uint64_t v125 = *(int *)(v57 + 28);
        v655 = &v55[v125];
        long long v126 = &v56[v125];
        uint64_t v127 = sub_23309B300();
        uint64_t v128 = *(void *)(v127 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v655, v126, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v128 + 16))(v655, v126, v127);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v655, 0, 1, v127);
        }
        uint64_t v58 = v665;
        uint64_t v177 = *(int *)(v57 + 32);
        uint64_t v178 = &v55[v177];
        uint64_t v179 = &v56[v177];
        uint64_t v180 = v179[1];
        *uint64_t v178 = *v179;
        v178[1] = v180;
        uint64_t v181 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v665 + 56);
        swift_bridgeObjectRetain();
        v181(v55, 0, 1, v57);
        uint64_t v59 = (unsigned int (*)(void, void, void))v646;
      }
      *(void *)((char *)a1 + v61[11]) = *(void *)(a2 + v61[11]);
      uint64_t v182 = v61[12];
      uint64_t v183 = (char *)a1 + v182;
      uint64_t v184 = (unsigned char *)(a2 + v182);
      swift_bridgeObjectRetain();
      if (v59(v184, 1, v57))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64));
      }
      else
      {
        *uint64_t v183 = *v184;
        *((void *)v183 + 1) = *((void *)v184 + 1);
        *((_DWORD *)v183 + 4) = *((_DWORD *)v184 + 4);
        uint64_t v186 = *((void *)v184 + 7);
        uint64_t v666 = v58;
        if (v186 == 1)
        {
          long long v187 = *(_OWORD *)(v184 + 40);
          *(_OWORD *)(v183 + 24) = *(_OWORD *)(v184 + 24);
          *(_OWORD *)(v183 + 40) = v187;
          *((void *)v183 + 7) = *((void *)v184 + 7);
        }
        else
        {
          v183[24] = v184[24];
          *(_WORD *)(v183 + 25) = *(_WORD *)(v184 + 25);
          *(_OWORD *)(v183 + 28) = *(_OWORD *)(v184 + 28);
          *((_DWORD *)v183 + 11) = *((_DWORD *)v184 + 11);
          *((void *)v183 + 6) = *((void *)v184 + 6);
          *((void *)v183 + 7) = v186;
          swift_bridgeObjectRetain();
        }
        uint64_t v188 = *(int *)(v57 + 28);
        v189 = &v183[v188];
        uint64_t v190 = &v184[v188];
        uint64_t v191 = sub_23309B300();
        uint64_t v192 = *(void *)(v191 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v189, v190, *(void *)(*(void *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v192 + 16))(v189, v190, v191);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v192 + 56))(v189, 0, 1, v191);
        }
        uint64_t v228 = *(int *)(v57 + 32);
        uint64_t v229 = &v183[v228];
        uint64_t v230 = &v184[v228];
        uint64_t v231 = v230[1];
        *uint64_t v229 = *v230;
        v229[1] = v231;
        uint64_t v232 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v666 + 56);
        swift_bridgeObjectRetain();
        v232(v183, 0, 1, v57);
      }
      uint64_t v233 = v61[13];
      long long v234 = (void *)((char *)a1 + v233);
      uint64_t v235 = (void *)(a2 + v233);
      uint64_t v236 = v235[1];
      *long long v234 = *v235;
      v234[1] = v236;
      v234[2] = v235[2];
      uint64_t v237 = v61[14];
      uint64_t v238 = (void *)((char *)a1 + v237);
      uint64_t v239 = (void *)(a2 + v237);
      uint64_t v240 = type metadata accessor for Reference();
      uint64_t v241 = *(void **)(v240 - 8);
      uint64_t v242 = (unsigned int (*)(void *, uint64_t, uint64_t))v241[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v242(v239, 1, v240))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v238, v239, *(void *)(*(void *)(v243 - 8) + 64));
        uint64_t v244 = (int *)v673;
      }
      else
      {
        v647 = v241;
        v656 = (void *)v240;
        uint64_t v245 = v239[1];
        *uint64_t v238 = *v239;
        v238[1] = v245;
        uint64_t v246 = v239[3];
        v238[2] = v239[2];
        v238[3] = v246;
        uint64_t v247 = *(int *)(v240 + 24);
        v667 = v238;
        v248 = (void *)((char *)v238 + v247);
        uint64_t v249 = (void *)((char *)v239 + v247);
        uint64_t v250 = type metadata accessor for Identifier();
        uint64_t v251 = *(void *)(v250 - 8);
        uint64_t v252 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v251 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v252(v249, 1, v250))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v248, v249, *(void *)(*(void *)(v253 - 8) + 64));
          uint64_t v255 = (void (**)(void, void, uint64_t, void *))v647;
          uint64_t v254 = v656;
          uint64_t v256 = v667;
          uint64_t v244 = (int *)v673;
        }
        else
        {
          uint64_t v271 = v249[1];
          void *v248 = *v249;
          v248[1] = v271;
          uint64_t v272 = v249[3];
          swift_bridgeObjectRetain();
          v273 = v248;
          if (v272 == 1)
          {
            *((_OWORD *)v248 + 1) = *((_OWORD *)v249 + 1);
            v248[4] = v249[4];
          }
          else
          {
            v248[2] = v249[2];
            v248[3] = v272;
            v248[4] = v249[4];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v287 = *(int *)(v250 + 24);
          uint64_t v631 = (char *)v248 + v287;
          __dstc = (int *)v250;
          v288 = (char *)v249 + v287;
          uint64_t v289 = sub_23309AF80();
          uint64_t v290 = *(void *)(v289 - 8);
          uint64_t v291 = v288;
          int v292 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48))(v288, 1, v289);
          uint64_t v255 = (void (**)(void, void, uint64_t, void *))v647;
          uint64_t v244 = (int *)v673;
          if (v292)
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v631, v291, *(void *)(*(void *)(v293 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v290 + 16))(v631, v291, v289);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v290 + 56))(v631, 0, 1, v289);
          }
          uint64_t v334 = __dstc[7];
          uint64_t v335 = (void *)((char *)v273 + v334);
          v336 = (void *)((char *)v249 + v334);
          uint64_t v337 = v336[1];
          *uint64_t v335 = *v336;
          v335[1] = v337;
          v338 = *(void (**)(void *, void, uint64_t, int *))(v251 + 56);
          swift_bridgeObjectRetain();
          v338(v273, 0, 1, __dstc);
          uint64_t v254 = v656;
          uint64_t v256 = v667;
        }
        ((void (**)(void *, void, uint64_t, void *))v255)[7](v256, 0, 1, v254);
      }
      *((unsigned char *)a1 + v244[15]) = *(unsigned char *)(a2 + v244[15]);
      uint64_t v339 = v244[16];
      uint64_t v340 = (void *)((char *)a1 + v339);
      uint64_t v341 = (void *)(a2 + v339);
      uint64_t v342 = v341[1];
      *uint64_t v340 = *v341;
      v340[1] = v342;
      *(void *)((char *)a1 + v244[17]) = *(void *)(a2 + v244[17]);
      *((unsigned char *)a1 + v244[18]) = *(unsigned char *)(a2 + v244[18]);
      uint64_t v343 = v244[19];
      uint64_t v344 = (uint64_t)a1 + v343;
      uint64_t v345 = a2 + v343;
      uint64_t v346 = *(void *)(a2 + v343);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v346 == 1)
      {
        long long v347 = *(_OWORD *)(v345 + 16);
        *(_OWORD *)uint64_t v344 = *(_OWORD *)v345;
        *(_OWORD *)(v344 + 16) = v347;
        *(_OWORD *)(v344 + 32) = *(_OWORD *)(v345 + 32);
        *(void *)(v344 + 48) = *(void *)(v345 + 48);
      }
      else
      {
        *(void *)uint64_t v344 = v346;
        uint64_t v348 = *(void *)(v345 + 16);
        swift_bridgeObjectRetain();
        if (v348 == 1)
        {
          *(_OWORD *)(v344 + 8) = *(_OWORD *)(v345 + 8);
          *(void *)(v344 + 24) = *(void *)(v345 + 24);
        }
        else
        {
          *(void *)(v344 + 8) = *(void *)(v345 + 8);
          *(void *)(v344 + 16) = v348;
          *(void *)(v344 + 24) = *(void *)(v345 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v349 = *(void *)(v345 + 40);
        *(void *)(v344 + 32) = *(void *)(v345 + 32);
        *(void *)(v344 + 40) = v349;
        *(void *)(v344 + 48) = *(void *)(v345 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v350 = v244[20];
      uint64_t v351 = (void *)((char *)a1 + v350);
      v352 = (void *)(a2 + v350);
      uint64_t v353 = v352[1];
      *uint64_t v351 = *v352;
      v351[1] = v353;
      goto LABEL_278;
    case 6u:
      uint64_t v62 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v62;
      uint64_t v63 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v63;
      uint64_t v64 = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v64 != 1) {
        swift_bridgeObjectRetain();
      }
      uint64_t v65 = *(void *)(a2 + 40);
      uint64_t v66 = *(void *)(a2 + 48);
      a1[4] = v64;
      a1[5] = v65;
      uint64_t v68 = *(void *)(a2 + 56);
      uint64_t v67 = *(void *)(a2 + 64);
      a1[6] = v66;
      a1[7] = v68;
      uint64_t v69 = *(void *)(a2 + 72);
      uint64_t v70 = *(void *)(a2 + 80);
      a1[8] = v67;
      a1[9] = v69;
      a1[10] = v70;
      uint64_t v663 = type metadata accessor for ModelsR4.Observation(0);
      v674 = a1;
      uint64_t v71 = *(int *)(v663 + 40);
      uint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (unsigned char *)(a2 + v71);
      uint64_t v74 = type metadata accessor for FHIRDateTime();
      v653 = *(void **)(v74 - 8);
      uint64_t v75 = (unsigned int (*)(void, void, void))v653[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v645 = v75;
      if (v75(v73, 1, v74))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
        long long v77 = (int *)v663;
        a1 = v674;
      }
      else
      {
        *uint64_t v72 = *v73;
        *((void *)v72 + 1) = *((void *)v73 + 1);
        *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
        uint64_t v108 = *((void *)v73 + 7);
        long long v109 = v72;
        if (v108 == 1)
        {
          long long v110 = *(_OWORD *)(v73 + 40);
          *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
          *(_OWORD *)(v72 + 40) = v110;
          *((void *)v72 + 7) = *((void *)v73 + 7);
        }
        else
        {
          v72[24] = v73[24];
          *(_WORD *)(v72 + 25) = *(_WORD *)(v73 + 25);
          *(_OWORD *)(v72 + 28) = *(_OWORD *)(v73 + 28);
          *((_DWORD *)v72 + 11) = *((_DWORD *)v73 + 11);
          *((void *)v72 + 6) = *((void *)v73 + 6);
          *((void *)v72 + 7) = v108;
          swift_bridgeObjectRetain();
        }
        long long v77 = (int *)v663;
        a1 = v674;
        uint64_t v130 = *(int *)(v74 + 28);
        long long v131 = &v109[v130];
        uint64_t v132 = &v73[v130];
        uint64_t v133 = sub_23309B300();
        uint64_t v134 = *(void *)(v133 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v134 + 16))(v131, v132, v133);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
        }
        uint64_t v194 = *(int *)(v74 + 32);
        uint64_t v195 = &v109[v194];
        uint64_t v196 = &v73[v194];
        uint64_t v197 = v196[1];
        *uint64_t v195 = *v196;
        v195[1] = v197;
        uint64_t v198 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v653[7];
        swift_bridgeObjectRetain();
        v198(v109, 0, 1, v74);
        uint64_t v75 = (unsigned int (*)(void, void, void))v645;
      }
      uint64_t v199 = v77[11];
      v200 = (char *)a1 + v199;
      uint64_t v201 = (unsigned char *)(a2 + v199);
      if (v75(a2 + v199, 1, v74))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
      }
      else
      {
        unsigned char *v200 = *v201;
        *((void *)v200 + 1) = *((void *)v201 + 1);
        *((_DWORD *)v200 + 4) = *((_DWORD *)v201 + 4);
        uint64_t v203 = *((void *)v201 + 7);
        if (v203 == 1)
        {
          long long v204 = *(_OWORD *)(v201 + 40);
          *(_OWORD *)(v200 + 24) = *(_OWORD *)(v201 + 24);
          *(_OWORD *)(v200 + 40) = v204;
          *((void *)v200 + 7) = *((void *)v201 + 7);
        }
        else
        {
          v200[24] = v201[24];
          *(_WORD *)(v200 + 25) = *(_WORD *)(v201 + 25);
          *(_OWORD *)(v200 + 28) = *(_OWORD *)(v201 + 28);
          *((_DWORD *)v200 + 11) = *((_DWORD *)v201 + 11);
          *((void *)v200 + 6) = *((void *)v201 + 6);
          *((void *)v200 + 7) = v203;
          swift_bridgeObjectRetain();
        }
        uint64_t v205 = *(int *)(v74 + 28);
        v206 = &v200[v205];
        uint64_t v207 = &v201[v205];
        uint64_t v208 = sub_23309B300();
        uint64_t v209 = *(void *)(v208 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v209 + 48))(v207, 1, v208))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v206, v207, *(void *)(*(void *)(v210 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v209 + 16))(v206, v207, v208);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
        }
        uint64_t v257 = *(int *)(v74 + 32);
        v258 = &v200[v257];
        uint64_t v259 = &v201[v257];
        uint64_t v260 = v259[1];
        void *v258 = *v259;
        v258[1] = v260;
        v261 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v653[7];
        swift_bridgeObjectRetain();
        v261(v200, 0, 1, v74);
        uint64_t v75 = (unsigned int (*)(void, void, void))v645;
      }
      uint64_t v262 = v77[12];
      uint64_t v263 = (char *)a1 + v262;
      v264 = (unsigned char *)(a2 + v262);
      uint64_t v265 = type metadata accessor for Period();
      uint64_t v266 = *(void *)(v265 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v266 + 48))(v264, 1, v265))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v263, v264, *(void *)(*(void *)(v267 - 8) + 64));
      }
      else
      {
        if (v75(v264, 1, v74))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v263, v264, *(void *)(*(void *)(v268 - 8) + 64));
        }
        else
        {
          *uint64_t v263 = *v264;
          *((void *)v263 + 1) = *((void *)v264 + 1);
          *((_DWORD *)v263 + 4) = *((_DWORD *)v264 + 4);
          uint64_t v274 = *((void *)v264 + 7);
          uint64_t v678 = v266;
          if (v274 == 1)
          {
            long long v275 = *(_OWORD *)(v264 + 40);
            *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
            *(_OWORD *)(v263 + 40) = v275;
            *((void *)v263 + 7) = *((void *)v264 + 7);
          }
          else
          {
            v263[24] = v264[24];
            *(_WORD *)(v263 + 25) = *(_WORD *)(v264 + 25);
            *(_OWORD *)(v263 + 28) = *(_OWORD *)(v264 + 28);
            *((_DWORD *)v263 + 11) = *((_DWORD *)v264 + 11);
            *((void *)v263 + 6) = *((void *)v264 + 6);
            *((void *)v263 + 7) = v274;
            swift_bridgeObjectRetain();
          }
          uint64_t v294 = *(int *)(v74 + 28);
          v295 = &v263[v294];
          uint64_t v296 = &v264[v294];
          uint64_t v297 = sub_23309B300();
          uint64_t v298 = *(void *)(v297 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v298 + 48))(v296, 1, v297))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v295, v296, *(void *)(*(void *)(v299 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v298 + 16))(v295, v296, v297);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v298 + 56))(v295, 0, 1, v297);
          }
          uint64_t v354 = *(int *)(v74 + 32);
          v355 = &v263[v354];
          uint64_t v356 = &v264[v354];
          uint64_t v357 = v356[1];
          void *v355 = *v356;
          v355[1] = v357;
          uint64_t v358 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v653[7];
          swift_bridgeObjectRetain();
          v358(v263, 0, 1, v74);
          uint64_t v75 = (unsigned int (*)(void, void, void))v645;
          uint64_t v266 = v678;
        }
        uint64_t v359 = *(int *)(v265 + 20);
        uint64_t v360 = &v263[v359];
        long long v361 = &v264[v359];
        if (v75(v361, 1, v74))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v360, v361, *(void *)(*(void *)(v362 - 8) + 64));
          long long v77 = (int *)v663;
        }
        else
        {
          *uint64_t v360 = *v361;
          *((void *)v360 + 1) = *((void *)v361 + 1);
          *((_DWORD *)v360 + 4) = *((_DWORD *)v361 + 4);
          uint64_t v363 = *((void *)v361 + 7);
          uint64_t v679 = v266;
          if (v363 == 1)
          {
            long long v364 = *(_OWORD *)(v361 + 40);
            *(_OWORD *)(v360 + 24) = *(_OWORD *)(v361 + 24);
            *(_OWORD *)(v360 + 40) = v364;
            *((void *)v360 + 7) = *((void *)v361 + 7);
          }
          else
          {
            v360[24] = v361[24];
            *(_WORD *)(v360 + 25) = *(_WORD *)(v361 + 25);
            *(_OWORD *)(v360 + 28) = *(_OWORD *)(v361 + 28);
            *((_DWORD *)v360 + 11) = *((_DWORD *)v361 + 11);
            *((void *)v360 + 6) = *((void *)v361 + 6);
            *((void *)v360 + 7) = v363;
            swift_bridgeObjectRetain();
          }
          uint64_t v365 = *(int *)(v74 + 28);
          v633 = &v360[v365];
          v366 = &v361[v365];
          uint64_t v367 = sub_23309B300();
          uint64_t v368 = *(void *)(v367 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v368 + 48))(v366, 1, v367))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v633, v366, *(void *)(*(void *)(v369 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v368 + 16))(v633, v366, v367);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v368 + 56))(v633, 0, 1, v367);
          }
          uint64_t v435 = *(int *)(v74 + 32);
          v436 = &v360[v435];
          uint64_t v437 = &v361[v435];
          uint64_t v438 = v437[1];
          void *v436 = *v437;
          v436[1] = v438;
          v439 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v653[7];
          swift_bridgeObjectRetain();
          v439(v360, 0, 1, v74);
          long long v77 = (int *)v663;
          uint64_t v266 = v679;
          uint64_t v75 = (unsigned int (*)(void, void, void))v645;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v266 + 56))(v263, 0, 1, v265);
      }
      uint64_t v440 = v77[13];
      uint64_t v441 = (char *)a1 + v440;
      uint64_t v442 = (unsigned char *)(a2 + v440);
      if (v75(a2 + v440, 1, v74))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v441, v442, *(void *)(*(void *)(v443 - 8) + 64));
      }
      else
      {
        *uint64_t v441 = *v442;
        *((void *)v441 + 1) = *((void *)v442 + 1);
        *((_DWORD *)v441 + 4) = *((_DWORD *)v442 + 4);
        uint64_t v444 = *((void *)v442 + 7);
        if (v444 == 1)
        {
          long long v445 = *(_OWORD *)(v442 + 40);
          *(_OWORD *)(v441 + 24) = *(_OWORD *)(v442 + 24);
          *(_OWORD *)(v441 + 40) = v445;
          *((void *)v441 + 7) = *((void *)v442 + 7);
        }
        else
        {
          v441[24] = v442[24];
          *(_WORD *)(v441 + 25) = *(_WORD *)(v442 + 25);
          *(_OWORD *)(v441 + 28) = *(_OWORD *)(v442 + 28);
          *((_DWORD *)v441 + 11) = *((_DWORD *)v442 + 11);
          *((void *)v441 + 6) = *((void *)v442 + 6);
          *((void *)v441 + 7) = v444;
          swift_bridgeObjectRetain();
        }
        uint64_t v446 = *(int *)(v74 + 28);
        uint64_t v447 = &v441[v446];
        uint64_t v448 = &v442[v446];
        uint64_t v449 = sub_23309B300();
        uint64_t v450 = *(void *)(v449 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v450 + 48))(v448, 1, v449))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v447, v448, *(void *)(*(void *)(v451 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v450 + 16))(v447, v448, v449);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v450 + 56))(v447, 0, 1, v449);
        }
        uint64_t v452 = *(int *)(v74 + 32);
        uint64_t v453 = &v441[v452];
        v454 = &v442[v452];
        uint64_t v455 = v454[1];
        *uint64_t v453 = *v454;
        v453[1] = v455;
        v456 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v653[7];
        swift_bridgeObjectRetain();
        v456(v441, 0, 1, v74);
      }
      *(void *)((char *)a1 + v77[14]) = *(void *)(a2 + v77[14]);
      *(void *)((char *)a1 + v77[15]) = *(void *)(a2 + v77[15]);
      uint64_t v457 = v77[16];
      uint64_t v458 = (void *)((char *)a1 + v457);
      uint64_t v459 = (void *)(a2 + v457);
      uint64_t v460 = v459[1];
      *uint64_t v458 = *v459;
      v458[1] = v460;
      uint64_t v461 = v77[17];
      uint64_t v462 = (uint64_t)a1 + v461;
      uint64_t v463 = a2 + v461;
      uint64_t v464 = *(void *)(a2 + v461 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v464 == 1)
      {
        *(_OWORD *)uint64_t v462 = *(_OWORD *)v463;
        *(void *)(v462 + 16) = *(void *)(v463 + 16);
      }
      else
      {
        *(void *)uint64_t v462 = *(void *)v463;
        *(void *)(v462 + 8) = v464;
        *(void *)(v462 + 16) = *(void *)(v463 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v465 = v77[18];
      uint64_t v466 = (void *)((char *)a1 + v465);
      uint64_t v467 = (void *)(a2 + v465);
      uint64_t v468 = type metadata accessor for Quantity();
      v469 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v468 - 8);
      if (v469[6](v467, 1, v468))
      {
        sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
        memcpy(v466, v467, *(void *)(*(void *)(v470 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v466 = *(_OWORD *)v467;
        *(void *)((char *)v466 + 13) = *(void *)((char *)v467 + 13);
        uint64_t v471 = v467[4];
        v466[3] = v467[3];
        v466[4] = v471;
        uint64_t v472 = v467[6];
        v466[5] = v467[5];
        v466[6] = v472;
        uint64_t v473 = *(int *)(v468 + 28);
        __dstd = (char *)v466 + v473;
        v648 = v469;
        v680 = (char *)v467 + v473;
        uint64_t v474 = sub_23309AF80();
        uint64_t v475 = *(void *)(v474 - 8);
        v657 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v475 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v657(v680, 1, v474))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(__dstd, v680, *(void *)(*(void *)(v476 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v475 + 16))(__dstd, v680, v474);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v475 + 56))(__dstd, 0, 1, v474);
        }
        long long v77 = (int *)v663;
        uint64_t v477 = *(int *)(v468 + 32);
        v478 = (void *)((char *)v466 + v477);
        uint64_t v479 = (void *)((char *)v467 + v477);
        uint64_t v480 = v479[1];
        void *v478 = *v479;
        v478[1] = v480;
        v481 = (void (*)(void *, void, uint64_t, uint64_t))v648[7];
        swift_bridgeObjectRetain();
        v481(v466, 0, 1, v468);
      }
      *(void *)((char *)a1 + v77[19]) = *(void *)(a2 + v77[19]);
      uint64_t v482 = v77[20];
LABEL_276:
      uint64_t v580 = (void *)((char *)a1 + v482);
      v581 = (void *)(a2 + v482);
      uint64_t v582 = v581[1];
      *uint64_t v580 = *v581;
      v580[1] = v582;
      break;
    case 7u:
      uint64_t v78 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v78;
      uint64_t v79 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v79;
      a1[4] = *(void *)(a2 + 32);
      *(void *)((char *)a1 + 37) = *(void *)(a2 + 37);
      uint64_t v80 = *(void *)(a2 + 56);
      a1[6] = *(void *)(a2 + 48);
      a1[7] = v80;
      uint64_t v81 = *(void *)(a2 + 72);
      a1[8] = *(void *)(a2 + 64);
      a1[9] = v81;
      uint64_t v82 = *(void *)(a2 + 88);
      a1[10] = *(void *)(a2 + 80);
      a1[11] = v82;
      uint64_t v83 = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v83 == 1)
      {
        *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
        a1[14] = *(void *)(a2 + 112);
      }
      else
      {
        a1[12] = *(void *)(a2 + 96);
        a1[13] = v83;
        a1[14] = *(void *)(a2 + 112);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v89 = *(void *)(a2 + 128);
      a1[15] = *(void *)(a2 + 120);
      a1[16] = v89;
      uint64_t v90 = *(void *)(a2 + 136);
      uint64_t v91 = *(void *)(a2 + 144);
      a1[17] = v90;
      a1[18] = v91;
      goto LABEL_186;
    case 8u:
      uint64_t v84 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v84;
      uint64_t v85 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v85;
      uint64_t v86 = *(void *)(a2 + 32);
      uint64_t v87 = *(void *)(a2 + 40);
      a1[4] = v86;
      a1[5] = v87;
LABEL_186:
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *a1 = *(void *)a2;
      a1[1] = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      a1[2] = *(void *)(a2 + 16);
      a1[3] = v5;
      uint64_t v6 = *(void *)(a2 + 40);
      a1[4] = *(void *)(a2 + 32);
      a1[5] = v6;
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      a1[6] = v7;
      a1[7] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_bridgeObjectRetain();
LABEL_278:
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ModelsR4.ResourceProxy(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    sub_232EA3DC4(a1, type metadata accessor for ModelsR4.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        goto LABEL_187;
      case 2u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v4 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v4 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 32) = v4;
        if (a2[6] == 1)
        {
          long long v5 = *(_OWORD *)(a2 + 5);
          *(void *)(a1 + 56) = a2[7];
          *(_OWORD *)(a1 + 40) = v5;
        }
        else
        {
          *(void *)(a1 + 40) = a2[5];
          *(void *)(a1 + 48) = a2[6];
          *(void *)(a1 + 56) = a2[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (a2[9] == 1)
        {
          long long v38 = *((_OWORD *)a2 + 4);
          *(void *)(a1 + 80) = a2[10];
          *(_OWORD *)(a1 + 64) = v38;
        }
        else
        {
          *(void *)(a1 + 64) = a2[8];
          *(void *)(a1 + 72) = a2[9];
          *(void *)(a1 + 80) = a2[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 88) = a2[11];
        uint64_t v39 = a2[13];
        swift_bridgeObjectRetain();
        if (v39 == 1)
        {
          long long v40 = *((_OWORD *)a2 + 6);
          *(void *)(a1 + 112) = a2[14];
          *(_OWORD *)(a1 + 96) = v40;
        }
        else
        {
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = a2[13];
          *(void *)(a1 + 112) = a2[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (a2[16] == 1)
        {
          long long v41 = *(_OWORD *)(a2 + 15);
          *(void *)(a1 + 136) = a2[17];
          *(_OWORD *)(a1 + 120) = v41;
        }
        else
        {
          *(void *)(a1 + 120) = a2[15];
          *(void *)(a1 + 128) = a2[16];
          *(void *)(a1 + 136) = a2[17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 144) = a2[18];
        uint64_t v42 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v43 = v42[13];
        uint64_t v44 = (unsigned char *)(a1 + v43);
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = type metadata accessor for FHIRDateTime();
        uint64_t v613 = *(void **)(v46 - 8);
        uint64_t v47 = (unsigned int (*)(void, void, void))v613[6];
        swift_bridgeObjectRetain();
        uint64_t v620 = v42;
        uint64_t v603 = v47;
        if (v47(v45, 1, v46))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          unsigned char *v44 = *v45;
          uint64_t v61 = *((void *)v45 + 1);
          *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
          *((void *)v44 + 1) = v61;
          if (*((void *)v45 + 7) == 1)
          {
            long long v62 = *(_OWORD *)(v45 + 24);
            long long v63 = *(_OWORD *)(v45 + 40);
            *((void *)v44 + 7) = *((void *)v45 + 7);
            *(_OWORD *)(v44 + 24) = v62;
            *(_OWORD *)(v44 + 40) = v63;
          }
          else
          {
            v44[24] = v45[24];
            v44[25] = v45[25];
            v44[26] = v45[26];
            long long v92 = *(_OWORD *)(v45 + 28);
            *((_DWORD *)v44 + 11) = *((_DWORD *)v45 + 11);
            *(_OWORD *)(v44 + 28) = v92;
            *((void *)v44 + 6) = *((void *)v45 + 6);
            *((void *)v44 + 7) = *((void *)v45 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v93 = *(int *)(v46 + 28);
          uint64_t v94 = &v44[v93];
          uint64_t v95 = &v45[v93];
          uint64_t v96 = sub_23309B300();
          uint64_t v97 = *(void *)(v96 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v97 + 16))(v94, v95, v96);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
          }
          uint64_t v42 = v620;
          uint64_t v168 = *(int *)(v46 + 32);
          uint64_t v169 = &v44[v168];
          uint64_t v170 = &v45[v168];
          *uint64_t v169 = *v170;
          v169[1] = v170[1];
          char v171 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
          swift_bridgeObjectRetain();
          v171(v44, 0, 1, v46);
          uint64_t v47 = (unsigned int (*)(void, void, void))v603;
        }
        uint64_t v172 = v42[14];
        uint64_t v173 = (unsigned char *)(a1 + v172);
        uint64_t v174 = (char *)a2 + v172;
        uint64_t v175 = type metadata accessor for Period();
        uint64_t v586 = *(void **)(v175 - 8);
        uint64_t v176 = (unsigned int (*)(void, void, void))v586[6];
        if (v176(v174, 1, v175))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          if (v47(v174, 1, v46))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v173, v174, *(void *)(*(void *)(v178 - 8) + 64));
          }
          else
          {
            unsigned char *v173 = *v174;
            uint64_t v221 = *((void *)v174 + 1);
            *((_DWORD *)v173 + 4) = *((_DWORD *)v174 + 4);
            *((void *)v173 + 1) = v221;
            __dstb = v176;
            if (*((void *)v174 + 7) == 1)
            {
              long long v222 = *(_OWORD *)(v174 + 24);
              long long v223 = *(_OWORD *)(v174 + 40);
              *((void *)v173 + 7) = *((void *)v174 + 7);
              *(_OWORD *)(v173 + 24) = v222;
              *(_OWORD *)(v173 + 40) = v223;
            }
            else
            {
              v173[24] = v174[24];
              v173[25] = v174[25];
              v173[26] = v174[26];
              long long v237 = *(_OWORD *)(v174 + 28);
              *((_DWORD *)v173 + 11) = *((_DWORD *)v174 + 11);
              *(_OWORD *)(v173 + 28) = v237;
              *((void *)v173 + 6) = *((void *)v174 + 6);
              *((void *)v173 + 7) = *((void *)v174 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v238 = *(int *)(v46 + 28);
            uint64_t v567 = &v173[v238];
            uint64_t v239 = &v174[v238];
            uint64_t v240 = sub_23309B300();
            uint64_t v241 = *(void *)(v240 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v241 + 48))(v239, 1, v240))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v567, v239, *(void *)(*(void *)(v242 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v241 + 16))(v567, v239, v240);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v241 + 56))(v567, 0, 1, v240);
            }
            uint64_t v278 = *(int *)(v46 + 32);
            uint64_t v279 = &v173[v278];
            uint64_t v280 = &v174[v278];
            *uint64_t v279 = *v280;
            v279[1] = v280[1];
            uint64_t v281 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
            swift_bridgeObjectRetain();
            v281(v173, 0, 1, v46);
            uint64_t v47 = (unsigned int (*)(void, void, void))v603;
            uint64_t v176 = (unsigned int (*)(void, void, void))__dstb;
          }
          uint64_t v282 = *(int *)(v175 + 20);
          v283 = &v173[v282];
          uint64_t v284 = &v174[v282];
          if (v47(v284, 1, v46))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v283, v284, *(void *)(*(void *)(v285 - 8) + 64));
            uint64_t v42 = v620;
          }
          else
          {
            unsigned char *v283 = *v284;
            uint64_t v286 = *((void *)v284 + 1);
            *((_DWORD *)v283 + 4) = *((_DWORD *)v284 + 4);
            *((void *)v283 + 1) = v286;
            __dstd = v176;
            if (*((void *)v284 + 7) == 1)
            {
              long long v287 = *(_OWORD *)(v284 + 24);
              long long v288 = *(_OWORD *)(v284 + 40);
              *((void *)v283 + 7) = *((void *)v284 + 7);
              *(_OWORD *)(v283 + 24) = v287;
              *(_OWORD *)(v283 + 40) = v288;
            }
            else
            {
              v283[24] = v284[24];
              v283[25] = v284[25];
              v283[26] = v284[26];
              long long v289 = *(_OWORD *)(v284 + 28);
              *((_DWORD *)v283 + 11) = *((_DWORD *)v284 + 11);
              *(_OWORD *)(v283 + 28) = v289;
              *((void *)v283 + 6) = *((void *)v284 + 6);
              *((void *)v283 + 7) = *((void *)v284 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v290 = *(int *)(v46 + 28);
            uint64_t v569 = &v283[v290];
            uint64_t v291 = &v284[v290];
            uint64_t v292 = sub_23309B300();
            uint64_t v563 = *(void *)(v292 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v563 + 48))(v291, 1, v292))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v569, v291, *(void *)(*(void *)(v293 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v563 + 16))(v569, v291, v292);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v563 + 56))(v569, 0, 1, v292);
            }
            uint64_t v355 = *(int *)(v46 + 32);
            uint64_t v356 = &v283[v355];
            uint64_t v357 = &v284[v355];
            *uint64_t v356 = *v357;
            v356[1] = v357[1];
            uint64_t v358 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
            swift_bridgeObjectRetain();
            v358(v283, 0, 1, v46);
            uint64_t v42 = v620;
            uint64_t v47 = (unsigned int (*)(void, void, void))v603;
            uint64_t v176 = (unsigned int (*)(void, void, void))__dstd;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v586[7])(v173, 0, 1, v175);
        }
        uint64_t v359 = v42[15];
        uint64_t v360 = (void *)(a1 + v359);
        long long v361 = (void *)((char *)a2 + v359);
        *uint64_t v360 = *v361;
        v360[1] = v361[1];
        uint64_t v362 = v42[16];
        uint64_t v363 = (unsigned char *)(a1 + v362);
        long long v364 = (char *)a2 + v362;
        swift_bridgeObjectRetain();
        if (v47(v364, 1, v46))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v363, v364, *(void *)(*(void *)(v365 - 8) + 64));
        }
        else
        {
          *uint64_t v363 = *v364;
          uint64_t v366 = *((void *)v364 + 1);
          *((_DWORD *)v363 + 4) = *((_DWORD *)v364 + 4);
          *((void *)v363 + 1) = v366;
          uint64_t v572 = (void *)v175;
          __dstf = v176;
          if (*((void *)v364 + 7) == 1)
          {
            long long v367 = *(_OWORD *)(v364 + 24);
            long long v368 = *(_OWORD *)(v364 + 40);
            *((void *)v363 + 7) = *((void *)v364 + 7);
            *(_OWORD *)(v363 + 24) = v367;
            *(_OWORD *)(v363 + 40) = v368;
          }
          else
          {
            v363[24] = v364[24];
            v363[25] = v364[25];
            v363[26] = v364[26];
            long long v369 = *(_OWORD *)(v364 + 28);
            *((_DWORD *)v363 + 11) = *((_DWORD *)v364 + 11);
            *(_OWORD *)(v363 + 28) = v369;
            *((void *)v363 + 6) = *((void *)v364 + 6);
            *((void *)v363 + 7) = *((void *)v364 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v370 = *(int *)(v46 + 28);
          uint64_t v371 = &v363[v370];
          v372 = &v364[v370];
          uint64_t v373 = sub_23309B300();
          uint64_t v374 = *(void *)(v373 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v374 + 48))(v372, 1, v373))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v371, v372, *(void *)(*(void *)(v375 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v374 + 16))(v371, v372, v373);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v374 + 56))(v371, 0, 1, v373);
          }
          uint64_t v42 = v620;
          uint64_t v175 = (uint64_t)v572;
          uint64_t v376 = *(int *)(v46 + 32);
          uint64_t v377 = &v363[v376];
          uint64_t v378 = &v364[v376];
          *uint64_t v377 = *v378;
          v377[1] = v378[1];
          uint64_t v379 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
          swift_bridgeObjectRetain();
          v379(v363, 0, 1, v46);
          uint64_t v47 = (unsigned int (*)(void, void, void))v603;
          uint64_t v176 = (unsigned int (*)(void, void, void))__dstf;
        }
        uint64_t v380 = v42[17];
        uint64_t v381 = (unsigned char *)(a1 + v380);
        uint64_t v382 = (char *)a2 + v380;
        if (v176((char *)a2 + v380, 1, v175))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v381, v382, *(void *)(*(void *)(v383 - 8) + 64));
        }
        else
        {
          if (v47(v382, 1, v46))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v381, v382, *(void *)(*(void *)(v384 - 8) + 64));
          }
          else
          {
            *uint64_t v381 = *v382;
            uint64_t v385 = *((void *)v382 + 1);
            *((_DWORD *)v381 + 4) = *((_DWORD *)v382 + 4);
            *((void *)v381 + 1) = v385;
            uint64_t v573 = (void *)v175;
            if (*((void *)v382 + 7) == 1)
            {
              long long v386 = *(_OWORD *)(v382 + 24);
              long long v387 = *(_OWORD *)(v382 + 40);
              *((void *)v381 + 7) = *((void *)v382 + 7);
              *(_OWORD *)(v381 + 24) = v386;
              *(_OWORD *)(v381 + 40) = v387;
            }
            else
            {
              v381[24] = v382[24];
              v381[25] = v382[25];
              v381[26] = v382[26];
              long long v388 = *(_OWORD *)(v382 + 28);
              *((_DWORD *)v381 + 11) = *((_DWORD *)v382 + 11);
              *(_OWORD *)(v381 + 28) = v388;
              *((void *)v381 + 6) = *((void *)v382 + 6);
              *((void *)v381 + 7) = *((void *)v382 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v389 = *(int *)(v46 + 28);
            uint64_t v390 = &v381[v389];
            v391 = &v382[v389];
            uint64_t v392 = sub_23309B300();
            uint64_t v393 = *(void *)(v392 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v393 + 48))(v391, 1, v392))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v390, v391, *(void *)(*(void *)(v394 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v393 + 16))(v390, v391, v392);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v393 + 56))(v390, 0, 1, v392);
            }
            uint64_t v175 = (uint64_t)v573;
            uint64_t v441 = *(int *)(v46 + 32);
            uint64_t v442 = &v381[v441];
            uint64_t v443 = &v382[v441];
            *uint64_t v442 = *v443;
            v442[1] = v443[1];
            uint64_t v444 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
            swift_bridgeObjectRetain();
            v444(v381, 0, 1, v46);
            uint64_t v47 = (unsigned int (*)(void, void, void))v603;
          }
          uint64_t v445 = *(int *)(v175 + 20);
          uint64_t v446 = &v381[v445];
          uint64_t v447 = &v382[v445];
          if (v47(v447, 1, v46))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v446, v447, *(void *)(*(void *)(v448 - 8) + 64));
            uint64_t v42 = v620;
          }
          else
          {
            unsigned char *v446 = *v447;
            uint64_t v449 = *((void *)v447 + 1);
            *((_DWORD *)v446 + 4) = *((_DWORD *)v447 + 4);
            *((void *)v446 + 1) = v449;
            uint64_t v574 = (void *)v175;
            if (*((void *)v447 + 7) == 1)
            {
              long long v450 = *(_OWORD *)(v447 + 24);
              long long v451 = *(_OWORD *)(v447 + 40);
              *((void *)v446 + 7) = *((void *)v447 + 7);
              *(_OWORD *)(v446 + 24) = v450;
              *(_OWORD *)(v446 + 40) = v451;
            }
            else
            {
              v446[24] = v447[24];
              v446[25] = v447[25];
              v446[26] = v447[26];
              long long v452 = *(_OWORD *)(v447 + 28);
              *((_DWORD *)v446 + 11) = *((_DWORD *)v447 + 11);
              *(_OWORD *)(v446 + 28) = v452;
              *((void *)v446 + 6) = *((void *)v447 + 6);
              *((void *)v446 + 7) = *((void *)v447 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v453 = *(int *)(v46 + 28);
            v597 = &v446[v453];
            v454 = &v447[v453];
            uint64_t v455 = sub_23309B300();
            uint64_t v456 = *(void *)(v455 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v456 + 48))(v454, 1, v455))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v597, v454, *(void *)(*(void *)(v457 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v456 + 16))(v597, v454, v455);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v456 + 56))(v597, 0, 1, v455);
            }
            uint64_t v175 = (uint64_t)v574;
            uint64_t v458 = *(int *)(v46 + 32);
            uint64_t v459 = &v446[v458];
            uint64_t v460 = &v447[v458];
            *uint64_t v459 = *v460;
            v459[1] = v460[1];
            uint64_t v461 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
            swift_bridgeObjectRetain();
            v461(v446, 0, 1, v46);
            uint64_t v42 = v620;
            uint64_t v47 = (unsigned int (*)(void, void, void))v603;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v586[7])(v381, 0, 1, v175);
        }
        uint64_t v462 = v42[18];
        uint64_t v463 = (void *)(a1 + v462);
        uint64_t v464 = (void *)((char *)a2 + v462);
        void *v463 = *v464;
        v463[1] = v464[1];
        uint64_t v465 = v42[19];
        uint64_t v466 = (unsigned char *)(a1 + v465);
        uint64_t v467 = (char *)a2 + v465;
        swift_bridgeObjectRetain();
        if (v47(v467, 1, v46))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v466, v467, *(void *)(*(void *)(v468 - 8) + 64));
        }
        else
        {
          *uint64_t v466 = *v467;
          uint64_t v469 = *((void *)v467 + 1);
          *((_DWORD *)v466 + 4) = *((_DWORD *)v467 + 4);
          *((void *)v466 + 1) = v469;
          if (*((void *)v467 + 7) == 1)
          {
            long long v470 = *(_OWORD *)(v467 + 24);
            long long v471 = *(_OWORD *)(v467 + 40);
            *((void *)v466 + 7) = *((void *)v467 + 7);
            *(_OWORD *)(v466 + 24) = v470;
            *(_OWORD *)(v466 + 40) = v471;
          }
          else
          {
            v466[24] = v467[24];
            v466[25] = v467[25];
            v466[26] = v467[26];
            long long v472 = *(_OWORD *)(v467 + 28);
            *((_DWORD *)v466 + 11) = *((_DWORD *)v467 + 11);
            *(_OWORD *)(v466 + 28) = v472;
            *((void *)v466 + 6) = *((void *)v467 + 6);
            *((void *)v466 + 7) = *((void *)v467 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v473 = *(int *)(v46 + 28);
          uint64_t v474 = &v466[v473];
          uint64_t v475 = &v467[v473];
          uint64_t v476 = sub_23309B300();
          uint64_t v477 = *(void *)(v476 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v477 + 48))(v475, 1, v476))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v474, v475, *(void *)(*(void *)(v478 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v477 + 16))(v474, v475, v476);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v477 + 56))(v474, 0, 1, v476);
          }
          uint64_t v479 = *(int *)(v46 + 32);
          uint64_t v480 = &v466[v479];
          v481 = &v467[v479];
          *uint64_t v480 = *v481;
          v480[1] = v481[1];
          uint64_t v482 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v613[7];
          swift_bridgeObjectRetain();
          v482(v466, 0, 1, v46);
        }
        uint64_t v483 = v42[20];
        v484 = (void *)(a1 + v483);
        uint64_t v485 = (void *)((char *)a2 + v483);
        uint64_t v486 = type metadata accessor for Reference();
        uint64_t v487 = *(void **)(v486 - 8);
        uint64_t v488 = (unsigned int (*)(void, void, void))v487[6];
        if (v488(v485, 1, v486))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v484, v485, *(void *)(*(void *)(v489 - 8) + 64));
        }
        else
        {
          uint64_t v608 = v488;
          uint64_t v617 = v487;
          void *v484 = *v485;
          v484[1] = v485[1];
          v484[2] = v485[2];
          v484[3] = v485[3];
          uint64_t v490 = *(int *)(v486 + 24);
          __dstg = (void *)((char *)v484 + v490);
          uint64_t v591 = (void *)v486;
          uint64_t v491 = (void *)((char *)v485 + v490);
          uint64_t v492 = type metadata accessor for Identifier();
          long long v493 = *(void **)(v492 - 8);
          uint64_t v494 = (unsigned int (*)(void *, uint64_t, uint64_t))v493[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v494(v491, 1, v492))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(__dstg, v491, *(void *)(*(void *)(v495 - 8) + 64));
            uint64_t v42 = v620;
            uint64_t v488 = (unsigned int (*)(void, void, void))v608;
          }
          else
          {
            v570 = v493;
            uint64_t v575 = (int *)v492;
            void *__dstg = *v491;
            __dstg[1] = v491[1];
            uint64_t v496 = v491[3];
            swift_bridgeObjectRetain();
            if (v496 == 1)
            {
              long long v497 = *((_OWORD *)v491 + 1);
              __dstg[4] = v491[4];
              *((_OWORD *)__dstg + 1) = v497;
            }
            else
            {
              __dstg[2] = v491[2];
              __dstg[3] = v491[3];
              __dstg[4] = v491[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v42 = v620;
            uint64_t v488 = (unsigned int (*)(void, void, void))v608;
            uint64_t v498 = *(int *)(v492 + 24);
            v598 = (char *)__dstg + v498;
            uint64_t v499 = (char *)v491 + v498;
            uint64_t v500 = sub_23309AF80();
            uint64_t v501 = *(void *)(v500 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v501 + 48))(v499, 1, v500))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v598, v499, *(void *)(*(void *)(v502 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v501 + 16))(v598, v499, v500);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v501 + 56))(v598, 0, 1, v500);
            }
            uint64_t v503 = v575[7];
            uint64_t v504 = (void *)((char *)__dstg + v503);
            v505 = (void *)((char *)v491 + v503);
            *uint64_t v504 = *v505;
            v504[1] = v505[1];
            uint64_t v506 = (void (*)(void *, void, uint64_t, int *))v570[7];
            swift_bridgeObjectRetain();
            v506(__dstg, 0, 1, v575);
            uint64_t v487 = v617;
          }
          uint64_t v486 = (uint64_t)v591;
          ((void (*)(void *, void, uint64_t, void *))v487[7])(v484, 0, 1, v591);
        }
        uint64_t v507 = v42[21];
        uint64_t v508 = (void *)(a1 + v507);
        uint64_t v509 = (void *)((char *)a2 + v507);
        if (v488((char *)a2 + v507, 1, v486))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v508, v509, *(void *)(*(void *)(v510 - 8) + 64));
        }
        else
        {
          uint64_t v609 = v508;
          uint64_t v618 = (void (**)(void *, void, uint64_t, uint64_t))v487;
          void *v508 = *v509;
          v508[1] = v509[1];
          v508[2] = v509[2];
          v508[3] = v509[3];
          uint64_t v511 = *(int *)(v486 + 24);
          uint64_t v599 = (void *)((char *)v508 + v511);
          uint64_t v512 = (void *)((char *)v509 + v511);
          uint64_t v513 = type metadata accessor for Identifier();
          uint64_t v514 = *(void **)(v513 - 8);
          uint64_t v515 = (unsigned int (*)(void *, uint64_t, uint64_t))v514[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v515(v512, 1, v513))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v599, v512, *(void *)(*(void *)(v516 - 8) + 64));
          }
          else
          {
            v592 = v514;
            *uint64_t v599 = *v512;
            v599[1] = v512[1];
            uint64_t v517 = v512[3];
            swift_bridgeObjectRetain();
            if (v517 == 1)
            {
              long long v518 = *((_OWORD *)v512 + 1);
              v599[4] = v512[4];
              *((_OWORD *)v599 + 1) = v518;
            }
            else
            {
              v599[2] = v512[2];
              v599[3] = v512[3];
              v599[4] = v512[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v519 = *(int *)(v513 + 24);
            uint64_t v576 = (char *)v599 + v519;
            uint64_t v520 = (char *)v512 + v519;
            uint64_t v521 = sub_23309AF80();
            uint64_t v522 = *(void *)(v521 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v522 + 48))(v520, 1, v521))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v576, v520, *(void *)(*(void *)(v523 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v522 + 16))(v576, v520, v521);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v522 + 56))(v576, 0, 1, v521);
            }
            uint64_t v524 = *(int *)(v513 + 28);
            uint64_t v525 = (void *)((char *)v599 + v524);
            uint64_t v526 = (void *)((char *)v512 + v524);
            *uint64_t v525 = *v526;
            v525[1] = v526[1];
            v527 = (void (*)(void *, void, uint64_t, uint64_t))v592[7];
            swift_bridgeObjectRetain();
            v527(v599, 0, 1, v513);
          }
          uint64_t v42 = v620;
          v618[7](v609, 0, 1, v486);
        }
        *(void *)(a1 + v42[22]) = *(void *)((char *)a2 + v42[22]);
        uint64_t v440 = v42[23];
        goto LABEL_277;
      case 3u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = a2[12];
        uint64_t v600 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        v610 = (char *)a2;
        uint64_t v6 = v600[11];
        __dst = (unsigned char *)(a1 + v6);
        uint64_t v585 = (char *)a2 + v6;
        uint64_t v7 = type metadata accessor for FHIRDateTime();
        uint64_t v594 = *(void **)(v7 - 8);
        uint64_t v8 = (unsigned int (*)(void, void, void))v594[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v8(v585, 1, v7))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v585, *(void *)(*(void *)(v9 - 8) + 64));
          uint64_t v10 = v600;
        }
        else
        {
          unsigned char *__dst = *v585;
          uint64_t v49 = *((void *)v585 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v585 + 4);
          *((void *)__dst + 1) = v49;
          uint64_t v566 = v8;
          if (*((void *)v585 + 7) == 1)
          {
            long long v50 = *(_OWORD *)(v585 + 24);
            long long v51 = *(_OWORD *)(v585 + 40);
            *((void *)__dst + 7) = *((void *)v585 + 7);
            *(_OWORD *)(__dst + 24) = v50;
            *(_OWORD *)(__dst + 40) = v51;
          }
          else
          {
            __dst[24] = v585[24];
            __dst[25] = v585[25];
            __dst[26] = v585[26];
            long long v64 = *(_OWORD *)(v585 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v585 + 11);
            *(_OWORD *)(__dst + 28) = v64;
            *((void *)__dst + 6) = *((void *)v585 + 6);
            *((void *)__dst + 7) = *((void *)v585 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v10 = v600;
          uint64_t v65 = *(int *)(v7 + 28);
          uint64_t v66 = &__dst[v65];
          uint64_t v67 = &v585[v65];
          uint64_t v68 = sub_23309B300();
          uint64_t v69 = *(void *)(v68 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 16))(v66, v67, v68);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
          }
          uint64_t v99 = *(int *)(v7 + 32);
          uint64_t v100 = &__dst[v99];
          uint64_t v101 = &v585[v99];
          *uint64_t v100 = *v101;
          v100[1] = v101[1];
          long long v102 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v594[7];
          swift_bridgeObjectRetain();
          v102(__dst, 0, 1, v7);
          uint64_t v8 = (unsigned int (*)(void, void, void))v566;
        }
        uint64_t v103 = v10[12];
        uint64_t v104 = (unsigned char *)(a1 + v103);
        long long v105 = (char *)a2 + v103;
        uint64_t v106 = type metadata accessor for Period();
        uint64_t v107 = *(void *)(v106 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v104, v105, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          v622 = (int *)v7;
          if (v8(v105, 1, v7))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v104, v105, *(void *)(*(void *)(v109 - 8) + 64));
          }
          else
          {
            *uint64_t v104 = *v105;
            uint64_t v179 = *((void *)v105 + 1);
            *((_DWORD *)v104 + 4) = *((_DWORD *)v105 + 4);
            *((void *)v104 + 1) = v179;
            uint64_t v180 = v8;
            if (*((void *)v105 + 7) == 1)
            {
              long long v181 = *(_OWORD *)(v105 + 24);
              long long v182 = *(_OWORD *)(v105 + 40);
              *((void *)v104 + 7) = *((void *)v105 + 7);
              *(_OWORD *)(v104 + 24) = v181;
              *(_OWORD *)(v104 + 40) = v182;
            }
            else
            {
              v104[24] = v105[24];
              v104[25] = v105[25];
              v104[26] = v105[26];
              long long v230 = *(_OWORD *)(v105 + 28);
              *((_DWORD *)v104 + 11) = *((_DWORD *)v105 + 11);
              *(_OWORD *)(v104 + 28) = v230;
              *((void *)v104 + 6) = *((void *)v105 + 6);
              *((void *)v104 + 7) = *((void *)v105 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v231 = *(int *)(v7 + 28);
            uint64_t v232 = &v104[v231];
            uint64_t v233 = &v105[v231];
            uint64_t v234 = sub_23309B300();
            uint64_t v235 = *(void *)(v234 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v235 + 48))(v233, 1, v234))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v232, v233, *(void *)(*(void *)(v236 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v235 + 16))(v232, v233, v234);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v235 + 56))(v232, 0, 1, v234);
            }
            uint64_t v10 = v600;
            uint64_t v7 = (uint64_t)v622;
            uint64_t v260 = v622[8];
            v261 = &v104[v260];
            uint64_t v262 = &v105[v260];
            void *v261 = *v262;
            v261[1] = v262[1];
            uint64_t v263 = (void (*)(unsigned char *, void, uint64_t, int *))v594[7];
            swift_bridgeObjectRetain();
            v263(v104, 0, 1, v622);
            uint64_t v8 = v180;
          }
          uint64_t v264 = *(int *)(v106 + 20);
          uint64_t v265 = &v104[v264];
          uint64_t v266 = &v105[v264];
          if (v8(v266, 1, v7))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v265, v266, *(void *)(*(void *)(v267 - 8) + 64));
            uint64_t v7 = (uint64_t)v622;
          }
          else
          {
            unsigned char *v265 = *v266;
            uint64_t v268 = *((void *)v266 + 1);
            *((_DWORD *)v265 + 4) = *((_DWORD *)v266 + 4);
            *((void *)v265 + 1) = v268;
            v568 = v8;
            if (*((void *)v266 + 7) == 1)
            {
              long long v269 = *(_OWORD *)(v266 + 24);
              long long v270 = *(_OWORD *)(v266 + 40);
              *((void *)v265 + 7) = *((void *)v266 + 7);
              *(_OWORD *)(v265 + 24) = v269;
              *(_OWORD *)(v265 + 40) = v270;
            }
            else
            {
              v265[24] = v266[24];
              v265[25] = v266[25];
              v265[26] = v266[26];
              long long v271 = *(_OWORD *)(v266 + 28);
              *((_DWORD *)v265 + 11) = *((_DWORD *)v266 + 11);
              *(_OWORD *)(v265 + 28) = v271;
              *((void *)v265 + 6) = *((void *)v266 + 6);
              *((void *)v265 + 7) = *((void *)v266 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v272 = v622[7];
            v273 = &v265[v272];
            uint64_t v274 = &v266[v272];
            uint64_t v275 = sub_23309B300();
            uint64_t v276 = *(void *)(v275 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v273, v274, *(void *)(*(void *)(v277 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v276 + 16))(v273, v274, v275);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v276 + 56))(v273, 0, 1, v275);
            }
            uint64_t v10 = v600;
            uint64_t v7 = (uint64_t)v622;
            uint64_t v330 = v622[8];
            uint64_t v331 = &v265[v330];
            uint64_t v332 = &v266[v330];
            *uint64_t v331 = *v332;
            v331[1] = v332[1];
            uint64_t v333 = (void (*)(unsigned char *, void, uint64_t, int *))v594[7];
            swift_bridgeObjectRetain();
            v333(v265, 0, 1, v622);
            uint64_t v8 = (unsigned int (*)(void, void, void))v568;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
        }
        uint64_t v334 = v10[13];
        uint64_t v335 = (char *)(a1 + v334);
        v336 = &v610[v334];
        if (v8(&v610[v334], 1, v7))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v335, v336, *(void *)(*(void *)(v337 - 8) + 64));
        }
        else
        {
          *uint64_t v335 = *v336;
          uint64_t v338 = *((void *)v336 + 1);
          *((_DWORD *)v335 + 4) = *((_DWORD *)v336 + 4);
          *((void *)v335 + 1) = v338;
          if (*((void *)v336 + 7) == 1)
          {
            long long v339 = *(_OWORD *)(v336 + 24);
            long long v340 = *(_OWORD *)(v336 + 40);
            *((void *)v335 + 7) = *((void *)v336 + 7);
            *(_OWORD *)(v335 + 24) = v339;
            *(_OWORD *)(v335 + 40) = v340;
          }
          else
          {
            v335[24] = v336[24];
            v335[25] = v336[25];
            v335[26] = v336[26];
            long long v341 = *(_OWORD *)(v336 + 28);
            *((_DWORD *)v335 + 11) = *((_DWORD *)v336 + 11);
            *(_OWORD *)(v335 + 28) = v341;
            *((void *)v335 + 6) = *((void *)v336 + 6);
            *((void *)v335 + 7) = *((void *)v336 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v342 = *(int *)(v7 + 28);
          uint64_t v343 = &v335[v342];
          uint64_t v344 = &v336[v342];
          uint64_t v345 = sub_23309B300();
          uint64_t v346 = *(void *)(v345 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v346 + 48))(v344, 1, v345))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v343, v344, *(void *)(*(void *)(v347 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v346 + 16))(v343, v344, v345);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v346 + 56))(v343, 0, 1, v345);
          }
          uint64_t v348 = *(int *)(v7 + 32);
          uint64_t v349 = &v335[v348];
          uint64_t v350 = &v336[v348];
          *(void *)uint64_t v349 = *(void *)v350;
          *((void *)v349 + 1) = *((void *)v350 + 1);
          uint64_t v351 = (void (*)(char *, void, uint64_t, uint64_t))v594[7];
          swift_bridgeObjectRetain();
          v351(v335, 0, 1, v7);
        }
        *(void *)(a1 + v10[14]) = *(void *)&v610[v10[14]];
        *(void *)(a1 + v10[15]) = *(void *)&v610[v10[15]];
        uint64_t v352 = v10[16];
        uint64_t v353 = (void *)(a1 + v352);
        uint64_t v354 = &v610[v352];
        *uint64_t v353 = *(void *)v354;
        v353[1] = *((void *)v354 + 1);
        goto LABEL_187;
      case 4u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v11 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v11 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 32) = v11;
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = a2[12];
        uint64_t v611 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v12 = v611[11];
        long long v601 = (unsigned char *)(a1 + v12);
        uint64_t v13 = (char *)a2 + v12;
        uint64_t v14 = type metadata accessor for FHIRDateTime();
        v595 = *(void **)(v14 - 8);
        uint64_t v15 = (unsigned int (*)(unsigned char *, uint64_t, int *))v595[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = v15;
        uint64_t v571 = (int *)v14;
        if (v15(v13, 1, (int *)v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v601, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          unsigned char *v601 = *v13;
          uint64_t v52 = *((void *)v13 + 1);
          *((_DWORD *)v601 + 4) = *((_DWORD *)v13 + 4);
          *((void *)v601 + 1) = v52;
          if (*((void *)v13 + 7) == 1)
          {
            long long v53 = *(_OWORD *)(v13 + 24);
            long long v54 = *(_OWORD *)(v13 + 40);
            *((void *)v601 + 7) = *((void *)v13 + 7);
            *(_OWORD *)(v601 + 24) = v53;
            *(_OWORD *)(v601 + 40) = v54;
          }
          else
          {
            v601[24] = v13[24];
            v601[25] = v13[25];
            v601[26] = v13[26];
            long long v71 = *(_OWORD *)(v13 + 28);
            *((_DWORD *)v601 + 11) = *((_DWORD *)v13 + 11);
            *(_OWORD *)(v601 + 28) = v71;
            *((void *)v601 + 6) = *((void *)v13 + 6);
            *((void *)v601 + 7) = *((void *)v13 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v72 = *(int *)(v14 + 28);
          uint64_t v73 = &v601[v72];
          uint64_t v74 = v13;
          uint64_t v75 = &v13[v72];
          uint64_t v76 = sub_23309B300();
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v73, v75, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 16))(v73, v75, v76);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v77 + 56))(v73, 0, 1, v76);
          }
          uint64_t v110 = *(int *)(v14 + 32);
          uint64_t v111 = &v601[v110];
          long long v112 = &v74[v110];
          *uint64_t v111 = *v112;
          v111[1] = v112[1];
          uint64_t v113 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v595[7];
          swift_bridgeObjectRetain();
          v113(v601, 0, 1, v14);
        }
        uint64_t v114 = v611[12];
        long long v115 = (void *)(a1 + v114);
        uint64_t v116 = (void *)((char *)a2 + v114);
        *long long v115 = *v116;
        v115[1] = v116[1];
        *(void *)(a1 + v611[13]) = *(void *)((char *)a2 + v611[13]);
        *(void *)(a1 + v611[14]) = *(void *)((char *)a2 + v611[14]);
        uint64_t v117 = v611[15];
        v623 = (void *)(a1 + v117);
        uint64_t v118 = (void *)((char *)a2 + v117);
        uint64_t v119 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v120 = *(void **)(v119 - 8);
        uint64_t v121 = (unsigned int (*)(void *, uint64_t, uint64_t))v120[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v121(v118, 1, v119))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v623, v118, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          uint64_t v605 = v120;
          uint64_t v123 = v623;
          void *v623 = *v118;
          uint64_t v124 = *(int *)(v119 + 20);
          uint64_t v125 = (char *)v623 + v124;
          long long v126 = (char *)v118 + v124;
          uint64_t v127 = type metadata accessor for Period();
          uint64_t v128 = *(void *)(v127 - 8);
          uint64_t v129 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v128 + 48);
          uint64_t v130 = v127;
          swift_bridgeObjectRetain();
          if (v129(v126, 1, v130))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v125, v126, *(void *)(*(void *)(v131 - 8) + 64));
          }
          else
          {
            __src = (void *)v119;
            if (__dsta(v126, 1, v571))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              uint64_t v184 = v125;
              memcpy(v125, v126, *(void *)(*(void *)(v183 - 8) + 64));
            }
            else
            {
              uint64_t v184 = v125;
              unsigned char *v125 = *v126;
              uint64_t v257 = *((void *)v126 + 1);
              *((_DWORD *)v125 + 4) = *((_DWORD *)v126 + 4);
              *((void *)v125 + 1) = v257;
              uint64_t v562 = v130;
              if (*((void *)v126 + 7) == 1)
              {
                long long v258 = *(_OWORD *)(v126 + 24);
                long long v259 = *(_OWORD *)(v126 + 40);
                *((void *)v125 + 7) = *((void *)v126 + 7);
                *(_OWORD *)(v125 + 24) = v258;
                *(_OWORD *)(v125 + 40) = v259;
              }
              else
              {
                v125[24] = v126[24];
                v125[25] = v126[25];
                v125[26] = v126[26];
                long long v531 = *(_OWORD *)(v126 + 28);
                *((_DWORD *)v125 + 11) = *((_DWORD *)v126 + 11);
                *(_OWORD *)(v125 + 28) = v531;
                *((void *)v125 + 6) = *((void *)v126 + 6);
                *((void *)v125 + 7) = *((void *)v126 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v532 = v571[7];
              uint64_t v561 = &v125[v532];
              uint64_t v533 = &v126[v532];
              uint64_t v534 = sub_23309B300();
              uint64_t v535 = *(void *)(v534 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v535 + 48))(v533, 1, v534))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v561, v533, *(void *)(*(void *)(v536 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v535 + 16))(v561, v533, v534);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v535 + 56))(v561, 0, 1, v534);
              }
              uint64_t v537 = v571[8];
              uint64_t v538 = &v125[v537];
              v539 = &v126[v537];
              *uint64_t v538 = *v539;
              v538[1] = v539[1];
              uint64_t v540 = (void (*)(unsigned char *, void, uint64_t, int *))v595[7];
              swift_bridgeObjectRetain();
              v540(v125, 0, 1, v571);
              uint64_t v130 = v562;
            }
            uint64_t v541 = *(int *)(v130 + 20);
            uint64_t v542 = &v184[v541];
            uint64_t v543 = &v126[v541];
            if (__dsta(v543, 1, v571))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v542, v543, *(void *)(*(void *)(v544 - 8) + 64));
            }
            else
            {
              *uint64_t v542 = *v543;
              uint64_t v545 = *((void *)v543 + 1);
              *((_DWORD *)v542 + 4) = *((_DWORD *)v543 + 4);
              *((void *)v542 + 1) = v545;
              uint64_t v564 = v130;
              if (*((void *)v543 + 7) == 1)
              {
                long long v546 = *(_OWORD *)(v543 + 24);
                long long v547 = *(_OWORD *)(v543 + 40);
                *((void *)v542 + 7) = *((void *)v543 + 7);
                *(_OWORD *)(v542 + 24) = v546;
                *(_OWORD *)(v542 + 40) = v547;
              }
              else
              {
                v542[24] = v543[24];
                v542[25] = v543[25];
                v542[26] = v543[26];
                long long v548 = *(_OWORD *)(v543 + 28);
                *((_DWORD *)v542 + 11) = *((_DWORD *)v543 + 11);
                *(_OWORD *)(v542 + 28) = v548;
                *((void *)v542 + 6) = *((void *)v543 + 6);
                *((void *)v542 + 7) = *((void *)v543 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v549 = v571[7];
              uint64_t v593 = &v542[v549];
              uint64_t v550 = &v543[v549];
              uint64_t v551 = sub_23309B300();
              uint64_t v552 = *(void *)(v551 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v552 + 48))(v550, 1, v551))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v593, v550, *(void *)(*(void *)(v553 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v552 + 16))(v593, v550, v551);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v552 + 56))(v593, 0, 1, v551);
              }
              uint64_t v554 = v571[8];
              uint64_t v555 = &v542[v554];
              uint64_t v556 = &v543[v554];
              *uint64_t v555 = *v556;
              v555[1] = v556[1];
              uint64_t v557 = (void (*)(unsigned char *, void, uint64_t, int *))v595[7];
              swift_bridgeObjectRetain();
              v557(v542, 0, 1, v571);
              uint64_t v184 = v125;
              uint64_t v130 = v564;
            }
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v128 + 56))(v184, 0, 1, v130);
            uint64_t v123 = v623;
            uint64_t v119 = (uint64_t)__src;
          }
          (*((void (**)(void *, void, uint64_t, uint64_t))v605 + 7))(v123, 0, 1, v119);
        }
        uint64_t v558 = v611[16];
        uint64_t v559 = (void *)(a1 + v558);
        uint64_t v560 = (void *)((char *)a2 + v558);
        *uint64_t v559 = *v560;
        v559[1] = v560[1];
        goto LABEL_279;
      case 5u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v17 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v17 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        uint64_t v18 = a2[7];
        *(void *)(a1 + 61) = *(void *)((char *)a2 + 61);
        *(void *)(a1 + 56) = v18;
        *(void *)(a1 + 72) = a2[9];
        uint64_t v19 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v20 = v19[10];
        uint64_t v21 = (unsigned char *)(a1 + v20);
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for FHIRDateTime();
        uint64_t v24 = *(void **)(v23 - 8);
        uint64_t v25 = (unsigned int (*)(void, void, void))v24[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v25(v22, 1, v23))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          *uint64_t v21 = *v22;
          uint64_t v55 = *((void *)v22 + 1);
          *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
          *((void *)v21 + 1) = v55;
          uint64_t v621 = v24;
          uint64_t v604 = v25;
          if (*((void *)v22 + 7) == 1)
          {
            long long v56 = *(_OWORD *)(v22 + 24);
            long long v57 = *(_OWORD *)(v22 + 40);
            *((void *)v21 + 7) = *((void *)v22 + 7);
            *(_OWORD *)(v21 + 24) = v56;
            *(_OWORD *)(v21 + 40) = v57;
          }
          else
          {
            v21[24] = v22[24];
            v21[25] = v22[25];
            v21[26] = v22[26];
            long long v79 = *(_OWORD *)(v22 + 28);
            *((_DWORD *)v21 + 11) = *((_DWORD *)v22 + 11);
            *(_OWORD *)(v21 + 28) = v79;
            *((void *)v21 + 6) = *((void *)v22 + 6);
            *((void *)v21 + 7) = *((void *)v22 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v80 = *(int *)(v23 + 28);
          uint64_t v614 = &v21[v80];
          uint64_t v81 = &v22[v80];
          uint64_t v82 = sub_23309B300();
          uint64_t v83 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v614, v81, *(void *)(*(void *)(v84 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v83 + 16))(v614, v81, v82);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v83 + 56))(v614, 0, 1, v82);
          }
          uint64_t v24 = v621;
          uint64_t v132 = *(int *)(v23 + 32);
          uint64_t v133 = &v21[v132];
          uint64_t v134 = &v22[v132];
          void *v133 = *v134;
          v133[1] = v134[1];
          uint64_t v135 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v621[7];
          swift_bridgeObjectRetain();
          v135(v21, 0, 1, v23);
          uint64_t v25 = (unsigned int (*)(void, void, void))v604;
        }
        *(void *)(a1 + v19[11]) = *(void *)((char *)a2 + v19[11]);
        uint64_t v136 = v19[12];
        long long v137 = (unsigned char *)(a1 + v136);
        uint64_t v138 = (char *)a2 + v136;
        swift_bridgeObjectRetain();
        if (v25(v138, 1, v23))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v137, v138, *(void *)(*(void *)(v139 - 8) + 64));
        }
        else
        {
          *long long v137 = *v138;
          uint64_t v140 = *((void *)v138 + 1);
          *((_DWORD *)v137 + 4) = *((_DWORD *)v138 + 4);
          *((void *)v137 + 1) = v140;
          uint64_t v624 = v24;
          if (*((void *)v138 + 7) == 1)
          {
            long long v141 = *(_OWORD *)(v138 + 24);
            long long v142 = *(_OWORD *)(v138 + 40);
            *((void *)v137 + 7) = *((void *)v138 + 7);
            *(_OWORD *)(v137 + 24) = v141;
            *(_OWORD *)(v137 + 40) = v142;
          }
          else
          {
            v137[24] = v138[24];
            v137[25] = v138[25];
            v137[26] = v138[26];
            long long v143 = *(_OWORD *)(v138 + 28);
            *((_DWORD *)v137 + 11) = *((_DWORD *)v138 + 11);
            *(_OWORD *)(v137 + 28) = v143;
            *((void *)v137 + 6) = *((void *)v138 + 6);
            *((void *)v137 + 7) = *((void *)v138 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v144 = *(int *)(v23 + 28);
          uint64_t v145 = &v137[v144];
          uint64_t v146 = &v138[v144];
          uint64_t v147 = sub_23309B300();
          uint64_t v148 = *(void *)(v147 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v148 + 16))(v145, v146, v147);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
          }
          uint64_t v185 = *(int *)(v23 + 32);
          uint64_t v186 = &v137[v185];
          long long v187 = &v138[v185];
          *uint64_t v186 = *v187;
          v186[1] = v187[1];
          uint64_t v188 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v624[7];
          swift_bridgeObjectRetain();
          v188(v137, 0, 1, v23);
        }
        uint64_t v189 = v19[13];
        uint64_t v190 = (void *)(a1 + v189);
        uint64_t v191 = (void *)((char *)a2 + v189);
        *uint64_t v190 = *v191;
        v190[1] = v191[1];
        v190[2] = v191[2];
        uint64_t v625 = v19;
        uint64_t v192 = v19[14];
        uint64_t v193 = (void *)(a1 + v192);
        uint64_t v194 = (void *)((char *)a2 + v192);
        uint64_t v195 = type metadata accessor for Reference();
        uint64_t v196 = *(void **)(v195 - 8);
        uint64_t v197 = (unsigned int (*)(void *, uint64_t, uint64_t))v196[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v197(v194, 1, v195))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v193, v194, *(void *)(*(void *)(v198 - 8) + 64));
          uint64_t v199 = v625;
        }
        else
        {
          uint64_t v596 = (void (**)(void *, void, uint64_t, void *))v196;
          uint64_t v606 = (void *)v195;
          *uint64_t v193 = *v194;
          v193[1] = v194[1];
          v193[2] = v194[2];
          v193[3] = v194[3];
          uint64_t v200 = *(int *)(v195 + 24);
          uint64_t v615 = v193;
          uint64_t v201 = (void *)((char *)v193 + v200);
          uint64_t v202 = (void *)((char *)v194 + v200);
          uint64_t v203 = type metadata accessor for Identifier();
          uint64_t v204 = *(void *)(v203 - 8);
          uint64_t v205 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v204 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v205(v202, 1, v203))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v201, v202, *(void *)(*(void *)(v206 - 8) + 64));
            uint64_t v208 = v596;
            uint64_t v207 = v606;
            uint64_t v209 = v615;
            uint64_t v199 = v625;
          }
          else
          {
            void *v201 = *v202;
            v201[1] = v202[1];
            uint64_t v224 = v202[3];
            swift_bridgeObjectRetain();
            long long v225 = v201;
            if (v224 == 1)
            {
              long long v226 = *((_OWORD *)v202 + 1);
              v201[4] = v202[4];
              *((_OWORD *)v201 + 1) = v226;
            }
            else
            {
              v201[2] = v202[2];
              v201[3] = v202[3];
              v201[4] = v202[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v243 = *(int *)(v203 + 24);
            __dstc = (char *)v201 + v243;
            uint64_t v588 = (int *)v203;
            uint64_t v244 = (char *)v202 + v243;
            uint64_t v245 = sub_23309AF80();
            uint64_t v246 = *(void *)(v245 - 8);
            uint64_t v247 = v244;
            int v248 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v246 + 48))(v244, 1, v245);
            uint64_t v208 = v596;
            uint64_t v199 = v625;
            if (v248)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dstc, v247, *(void *)(*(void *)(v249 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v246 + 16))(__dstc, v247, v245);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v246 + 56))(__dstc, 0, 1, v245);
            }
            uint64_t v294 = v588[7];
            v295 = (void *)((char *)v225 + v294);
            uint64_t v296 = (void *)((char *)v202 + v294);
            void *v295 = *v296;
            v295[1] = v296[1];
            uint64_t v297 = *(void (**)(void *, void, uint64_t, int *))(v204 + 56);
            swift_bridgeObjectRetain();
            v297(v225, 0, 1, v588);
            uint64_t v207 = v606;
            uint64_t v209 = v615;
          }
          v208[7](v209, 0, 1, v207);
        }
        *(unsigned char *)(a1 + v199[15]) = *((unsigned char *)a2 + v199[15]);
        uint64_t v298 = v199[16];
        uint64_t v299 = (void *)(a1 + v298);
        uint64_t v300 = (void *)((char *)a2 + v298);
        *uint64_t v299 = *v300;
        v299[1] = v300[1];
        *(void *)(a1 + v199[17]) = *(void *)((char *)a2 + v199[17]);
        *(unsigned char *)(a1 + v199[18]) = *((unsigned char *)a2 + v199[18]);
        uint64_t v301 = v199[19];
        uint64_t v302 = a1 + v301;
        uint64_t v303 = (char *)a2 + v301;
        uint64_t v304 = *(void *)((char *)a2 + v301);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v304 == 1)
        {
          long long v305 = *(_OWORD *)v303;
          long long v306 = *((_OWORD *)v303 + 1);
          long long v307 = *((_OWORD *)v303 + 2);
          *(void *)(v302 + 48) = *((void *)v303 + 6);
          *(_OWORD *)(v302 + 16) = v306;
          *(_OWORD *)(v302 + 32) = v307;
          *(_OWORD *)uint64_t v302 = v305;
        }
        else
        {
          *(void *)uint64_t v302 = v304;
          uint64_t v308 = *((void *)v303 + 2);
          swift_bridgeObjectRetain();
          if (v308 == 1)
          {
            long long v309 = *(_OWORD *)(v303 + 8);
            *(void *)(v302 + 24) = *((void *)v303 + 3);
            *(_OWORD *)(v302 + 8) = v309;
          }
          else
          {
            *(void *)(v302 + 8) = *((void *)v303 + 1);
            *(void *)(v302 + 16) = *((void *)v303 + 2);
            *(void *)(v302 + 24) = *((void *)v303 + 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(void *)(v302 + 32) = *((void *)v303 + 4);
          *(void *)(v302 + 40) = *((void *)v303 + 5);
          *(void *)(v302 + 48) = *((void *)v303 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v310 = v199[20];
        uint64_t v311 = (void *)(a1 + v310);
        long long v312 = (void *)((char *)a2 + v310);
        *uint64_t v311 = *v312;
        v311[1] = v312[1];
        goto LABEL_279;
      case 6u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v27 = a2[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v27 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 32) = v27;
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        uint64_t v619 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v28 = v619[10];
        uint64_t v29 = (unsigned char *)(a1 + v28);
        uint64_t v30 = (char *)a2 + v28;
        uint64_t v31 = type metadata accessor for FHIRDateTime();
        v612 = *(void **)(v31 - 8);
        uint64_t v32 = (unsigned int (*)(void, void, void))v612[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v602 = v32;
        if (v32(v30, 1, v31))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
          uint64_t v34 = v619;
        }
        else
        {
          *uint64_t v29 = *v30;
          uint64_t v58 = *((void *)v30 + 1);
          *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
          *((void *)v29 + 1) = v58;
          if (*((void *)v30 + 7) == 1)
          {
            long long v59 = *(_OWORD *)(v30 + 24);
            long long v60 = *(_OWORD *)(v30 + 40);
            *((void *)v29 + 7) = *((void *)v30 + 7);
            *(_OWORD *)(v29 + 24) = v59;
            *(_OWORD *)(v29 + 40) = v60;
          }
          else
          {
            v29[24] = v30[24];
            v29[25] = v30[25];
            v29[26] = v30[26];
            long long v85 = *(_OWORD *)(v30 + 28);
            *((_DWORD *)v29 + 11) = *((_DWORD *)v30 + 11);
            *(_OWORD *)(v29 + 28) = v85;
            *((void *)v29 + 6) = *((void *)v30 + 6);
            *((void *)v29 + 7) = *((void *)v30 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v34 = v619;
          uint64_t v86 = *(int *)(v31 + 28);
          uint64_t v87 = &v29[v86];
          uint64_t v88 = &v30[v86];
          uint64_t v89 = sub_23309B300();
          uint64_t v90 = *(void *)(v89 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v90 + 16))(v87, v88, v89);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
          }
          uint64_t v150 = *(int *)(v31 + 32);
          uint64_t v151 = &v29[v150];
          uint64_t v152 = &v30[v150];
          *uint64_t v151 = *v152;
          v151[1] = v152[1];
          uint64_t v153 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v612[7];
          swift_bridgeObjectRetain();
          v153(v29, 0, 1, v31);
          uint64_t v32 = (unsigned int (*)(void, void, void))v602;
        }
        uint64_t v154 = v34[11];
        uint64_t v155 = (unsigned char *)(a1 + v154);
        uint64_t v156 = (char *)a2 + v154;
        if (v32((char *)a2 + v154, 1, v31))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v155, v156, *(void *)(*(void *)(v157 - 8) + 64));
        }
        else
        {
          *uint64_t v155 = *v156;
          uint64_t v158 = *((void *)v156 + 1);
          *((_DWORD *)v155 + 4) = *((_DWORD *)v156 + 4);
          *((void *)v155 + 1) = v158;
          if (*((void *)v156 + 7) == 1)
          {
            long long v159 = *(_OWORD *)(v156 + 24);
            long long v160 = *(_OWORD *)(v156 + 40);
            *((void *)v155 + 7) = *((void *)v156 + 7);
            *(_OWORD *)(v155 + 24) = v159;
            *(_OWORD *)(v155 + 40) = v160;
          }
          else
          {
            v155[24] = v156[24];
            v155[25] = v156[25];
            v155[26] = v156[26];
            long long v161 = *(_OWORD *)(v156 + 28);
            *((_DWORD *)v155 + 11) = *((_DWORD *)v156 + 11);
            *(_OWORD *)(v155 + 28) = v161;
            *((void *)v155 + 6) = *((void *)v156 + 6);
            *((void *)v155 + 7) = *((void *)v156 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v162 = *(int *)(v31 + 28);
          uint64_t v163 = &v155[v162];
          uint64_t v164 = &v156[v162];
          uint64_t v165 = sub_23309B300();
          uint64_t v166 = *(void *)(v165 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v166 + 16))(v163, v164, v165);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
          }
          uint64_t v210 = *(int *)(v31 + 32);
          uint64_t v211 = &v155[v210];
          uint64_t v212 = &v156[v210];
          *uint64_t v211 = *v212;
          v211[1] = v212[1];
          uint64_t v213 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v612[7];
          swift_bridgeObjectRetain();
          v213(v155, 0, 1, v31);
          uint64_t v32 = (unsigned int (*)(void, void, void))v602;
        }
        uint64_t v214 = v34[12];
        uint64_t v215 = (unsigned char *)(a1 + v214);
        uint64_t v216 = (char *)a2 + v214;
        uint64_t v217 = type metadata accessor for Period();
        uint64_t v218 = *(void **)(v217 - 8);
        if ((*((unsigned int (**)(unsigned char *, uint64_t, uint64_t))v218 + 6))(v216, 1, v217))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v215, v216, *(void *)(*(void *)(v219 - 8) + 64));
        }
        else
        {
          if (v32(v216, 1, v31))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v215, v216, *(void *)(*(void *)(v220 - 8) + 64));
          }
          else
          {
            *uint64_t v215 = *v216;
            uint64_t v227 = *((void *)v216 + 1);
            *((_DWORD *)v215 + 4) = *((_DWORD *)v216 + 4);
            *((void *)v215 + 1) = v227;
            uint64_t v587 = v218;
            if (*((void *)v216 + 7) == 1)
            {
              long long v228 = *(_OWORD *)(v216 + 24);
              long long v229 = *(_OWORD *)(v216 + 40);
              *((void *)v215 + 7) = *((void *)v216 + 7);
              *(_OWORD *)(v215 + 24) = v228;
              *(_OWORD *)(v215 + 40) = v229;
            }
            else
            {
              v215[24] = v216[24];
              v215[25] = v216[25];
              v215[26] = v216[26];
              long long v250 = *(_OWORD *)(v216 + 28);
              *((_DWORD *)v215 + 11) = *((_DWORD *)v216 + 11);
              *(_OWORD *)(v215 + 28) = v250;
              *((void *)v215 + 6) = *((void *)v216 + 6);
              *((void *)v215 + 7) = *((void *)v216 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v251 = *(int *)(v31 + 28);
            uint64_t v252 = &v215[v251];
            uint64_t v253 = &v216[v251];
            uint64_t v254 = sub_23309B300();
            uint64_t v255 = *(void *)(v254 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v255 + 48))(v253, 1, v254))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v252, v253, *(void *)(*(void *)(v256 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v255 + 16))(v252, v253, v254);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v255 + 56))(v252, 0, 1, v254);
            }
            uint64_t v313 = *(int *)(v31 + 32);
            long long v314 = &v215[v313];
            uint64_t v315 = &v216[v313];
            *long long v314 = *v315;
            v314[1] = v315[1];
            uint64_t v316 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v612[7];
            swift_bridgeObjectRetain();
            v316(v215, 0, 1, v31);
            uint64_t v32 = (unsigned int (*)(void, void, void))v602;
            uint64_t v218 = v587;
          }
          uint64_t v317 = *(int *)(v217 + 20);
          uint64_t v318 = &v215[v317];
          uint64_t v319 = &v216[v317];
          if (v32(v319, 1, v31))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v318, v319, *(void *)(*(void *)(v320 - 8) + 64));
            uint64_t v34 = v619;
          }
          else
          {
            *uint64_t v318 = *v319;
            uint64_t v321 = *((void *)v319 + 1);
            *((_DWORD *)v318 + 4) = *((_DWORD *)v319 + 4);
            *((void *)v318 + 1) = v321;
            uint64_t v589 = v218;
            if (*((void *)v319 + 7) == 1)
            {
              long long v322 = *(_OWORD *)(v319 + 24);
              long long v323 = *(_OWORD *)(v319 + 40);
              *((void *)v318 + 7) = *((void *)v319 + 7);
              *(_OWORD *)(v318 + 24) = v322;
              *(_OWORD *)(v318 + 40) = v323;
            }
            else
            {
              v318[24] = v319[24];
              v318[25] = v319[25];
              v318[26] = v319[26];
              long long v324 = *(_OWORD *)(v319 + 28);
              *((_DWORD *)v318 + 11) = *((_DWORD *)v319 + 11);
              *(_OWORD *)(v318 + 28) = v324;
              *((void *)v318 + 6) = *((void *)v319 + 6);
              *((void *)v318 + 7) = *((void *)v319 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v325 = *(int *)(v31 + 28);
            __dste = &v318[v325];
            uint64_t v326 = &v319[v325];
            uint64_t v327 = sub_23309B300();
            uint64_t v328 = *(void *)(v327 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v328 + 48))(v326, 1, v327))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dste, v326, *(void *)(*(void *)(v329 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v328 + 16))(__dste, v326, v327);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v328 + 56))(__dste, 0, 1, v327);
            }
            uint64_t v395 = *(int *)(v31 + 32);
            uint64_t v396 = &v318[v395];
            v397 = &v319[v395];
            *uint64_t v396 = *v397;
            v396[1] = v397[1];
            v398 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v612[7];
            swift_bridgeObjectRetain();
            v398(v318, 0, 1, v31);
            uint64_t v34 = v619;
            uint64_t v32 = (unsigned int (*)(void, void, void))v602;
            uint64_t v218 = v589;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v218 + 7))(v215, 0, 1, v217);
        }
        uint64_t v399 = v34[13];
        uint64_t v400 = (unsigned char *)(a1 + v399);
        uint64_t v401 = (char *)a2 + v399;
        if (v32((char *)a2 + v399, 1, v31))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v400, v401, *(void *)(*(void *)(v402 - 8) + 64));
        }
        else
        {
          *uint64_t v400 = *v401;
          uint64_t v403 = *((void *)v401 + 1);
          *((_DWORD *)v400 + 4) = *((_DWORD *)v401 + 4);
          *((void *)v400 + 1) = v403;
          if (*((void *)v401 + 7) == 1)
          {
            long long v404 = *(_OWORD *)(v401 + 24);
            long long v405 = *(_OWORD *)(v401 + 40);
            *((void *)v400 + 7) = *((void *)v401 + 7);
            *(_OWORD *)(v400 + 24) = v404;
            *(_OWORD *)(v400 + 40) = v405;
          }
          else
          {
            v400[24] = v401[24];
            v400[25] = v401[25];
            v400[26] = v401[26];
            long long v406 = *(_OWORD *)(v401 + 28);
            *((_DWORD *)v400 + 11) = *((_DWORD *)v401 + 11);
            *(_OWORD *)(v400 + 28) = v406;
            *((void *)v400 + 6) = *((void *)v401 + 6);
            *((void *)v400 + 7) = *((void *)v401 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v407 = *(int *)(v31 + 28);
          uint64_t v408 = &v400[v407];
          uint64_t v409 = &v401[v407];
          uint64_t v410 = sub_23309B300();
          uint64_t v411 = *(void *)(v410 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v411 + 48))(v409, 1, v410))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v408, v409, *(void *)(*(void *)(v412 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v411 + 16))(v408, v409, v410);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v411 + 56))(v408, 0, 1, v410);
          }
          uint64_t v413 = *(int *)(v31 + 32);
          uint64_t v414 = &v400[v413];
          uint64_t v415 = &v401[v413];
          *uint64_t v414 = *v415;
          v414[1] = v415[1];
          uint64_t v416 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v612[7];
          swift_bridgeObjectRetain();
          v416(v400, 0, 1, v31);
        }
        *(void *)(a1 + v34[14]) = *(void *)((char *)a2 + v34[14]);
        *(void *)(a1 + v34[15]) = *(void *)((char *)a2 + v34[15]);
        uint64_t v417 = v34[16];
        v418 = (void *)(a1 + v417);
        uint64_t v419 = (void *)((char *)a2 + v417);
        void *v418 = *v419;
        v418[1] = v419[1];
        uint64_t v420 = v34[17];
        uint64_t v421 = a1 + v420;
        uint64_t v422 = (char *)a2 + v420;
        uint64_t v423 = *(void *)((char *)a2 + v420 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v423 == 1)
        {
          long long v424 = *(_OWORD *)v422;
          *(void *)(v421 + 16) = *((void *)v422 + 2);
          *(_OWORD *)uint64_t v421 = v424;
        }
        else
        {
          *(void *)uint64_t v421 = *(void *)v422;
          *(void *)(v421 + 8) = *((void *)v422 + 1);
          *(void *)(v421 + 16) = *((void *)v422 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v425 = v34[18];
        uint64_t v426 = (void *)(a1 + v425);
        uint64_t v427 = (void *)((char *)a2 + v425);
        uint64_t v428 = type metadata accessor for Quantity();
        uint64_t v429 = *(void *)(v428 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v429 + 48))(v427, 1, v428))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v426, v427, *(void *)(*(void *)(v430 - 8) + 64));
        }
        else
        {
          long long v431 = *(_OWORD *)v427;
          *(void *)((char *)v426 + 13) = *(void *)((char *)v427 + 13);
          *(_OWORD *)uint64_t v426 = v431;
          v426[3] = v427[3];
          v426[4] = v427[4];
          v426[5] = v427[5];
          v426[6] = v427[6];
          uint64_t v432 = *(int *)(v428 + 28);
          uint64_t v590 = (char *)v426 + v432;
          uint64_t v616 = (char *)v427 + v432;
          uint64_t v433 = sub_23309AF80();
          uint64_t v434 = *(void *)(v433 - 8);
          uint64_t v607 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v434 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v607(v616, 1, v433))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v590, v616, *(void *)(*(void *)(v435 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v434 + 16))(v590, v616, v433);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v434 + 56))(v590, 0, 1, v433);
          }
          uint64_t v34 = v619;
          uint64_t v436 = *(int *)(v428 + 32);
          uint64_t v437 = (void *)((char *)v426 + v436);
          uint64_t v438 = (void *)((char *)v427 + v436);
          *uint64_t v437 = *v438;
          v437[1] = v438[1];
          v439 = *(void (**)(void *, void, uint64_t, uint64_t))(v429 + 56);
          swift_bridgeObjectRetain();
          v439(v426, 0, 1, v428);
        }
        *(void *)(a1 + v34[19]) = *(void *)((char *)a2 + v34[19]);
        uint64_t v440 = v34[20];
LABEL_277:
        uint64_t v528 = (void *)(a1 + v440);
        uint64_t v529 = (void *)((char *)a2 + v440);
        void *v528 = *v529;
        v528[1] = v529[1];
        break;
      case 7u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v35 = a2[4];
        *(void *)(a1 + 37) = *(void *)((char *)a2 + 37);
        *(void *)(a1 + 32) = v35;
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        uint64_t v36 = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36 == 1)
        {
          long long v37 = *((_OWORD *)a2 + 6);
          *(void *)(a1 + 112) = a2[14];
          *(_OWORD *)(a1 + 96) = v37;
        }
        else
        {
          *(void *)(a1 + 96) = a2[12];
          *(void *)(a1 + 104) = a2[13];
          *(void *)(a1 + 112) = a2[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(a1 + 120) = a2[15];
        *(void *)(a1 + 128) = a2[16];
        *(void *)(a1 + 136) = a2[17];
        *(void *)(a1 + 144) = a2[18];
        goto LABEL_187;
      case 8u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
LABEL_187:
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_bridgeObjectRetain();
LABEL_279:
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for ModelsR4.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      uint64_t v7 = *((void *)a2 + 11);
      *((void *)a1 + 10) = *((void *)a2 + 10);
      *((void *)a1 + 11) = v7;
      long long v8 = *((_OWORD *)a2 + 6);
      *((void *)a1 + 14) = *((void *)a2 + 14);
      *((_OWORD *)a1 + 6) = v8;
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      uint64_t v9 = *((void *)a2 + 18);
      *((void *)a1 + 17) = *((void *)a2 + 17);
      *((void *)a1 + 18) = v9;
      uint64_t v10 = (int *)type metadata accessor for ModelsR4.Condition(0);
      uint64_t v11 = v10[13];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = type metadata accessor for FHIRDateTime();
      uint64_t v15 = *(void *)(v14 - 8);
      long long v369 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      uint64_t v379 = v10;
      if (v369(v13, 1, v14))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        *uint64_t v12 = *v13;
        *((void *)v12 + 1) = *((void *)v13 + 1);
        *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
        *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
        *((void *)v12 + 7) = *((void *)v13 + 7);
        uint64_t v50 = *(int *)(v14 + 28);
        long long v51 = &v12[v50];
        uint64_t v52 = &v13[v50];
        uint64_t v53 = sub_23309B300();
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        uint64_t v10 = v379;
        *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v78 = v10[14];
      long long v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      uint64_t v81 = type metadata accessor for Period();
      uint64_t v342 = *(void **)(v81 - 8);
      uint64_t v82 = (unsigned int (*)(void, void, void))v342[6];
      uint64_t v355 = v15;
      if (v82(v80, 1, v81))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
        uint64_t v84 = v369;
      }
      else
      {
        uint64_t v338 = v82;
        if (v369(v80, 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v79, v80, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          *long long v79 = *v80;
          *((void *)v79 + 1) = *((void *)v80 + 1);
          *((_DWORD *)v79 + 4) = *((_DWORD *)v80 + 4);
          *(_OWORD *)(v79 + 24) = *(_OWORD *)(v80 + 24);
          *(_OWORD *)(v79 + 40) = *(_OWORD *)(v80 + 40);
          *((void *)v79 + 7) = *((void *)v80 + 7);
          uint64_t v125 = *(int *)(v14 + 28);
          uint64_t v335 = &v79[v125];
          long long v126 = &v80[v125];
          uint64_t v127 = sub_23309B300();
          uint64_t v128 = *(void *)(v127 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v335, v126, *(void *)(*(void *)(v129 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v335, v126, v127);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v335, 0, 1, v127);
          }
          *(_OWORD *)&v79[*(int *)(v14 + 32)] = *(_OWORD *)&v80[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v79, 0, 1, v14);
          uint64_t v10 = v379;
        }
        uint64_t v84 = v369;
        uint64_t v171 = *(int *)(v81 + 20);
        uint64_t v172 = &v79[v171];
        uint64_t v173 = &v80[v171];
        if (v369(v173, 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v172, v173, *(void *)(*(void *)(v174 - 8) + 64));
        }
        else
        {
          char *v172 = *v173;
          *((void *)v172 + 1) = *((void *)v173 + 1);
          *((_DWORD *)v172 + 4) = *((_DWORD *)v173 + 4);
          *(_OWORD *)(v172 + 24) = *(_OWORD *)(v173 + 24);
          *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
          *((void *)v172 + 7) = *((void *)v173 + 7);
          uint64_t v175 = *(int *)(v14 + 28);
          uint64_t v337 = &v172[v175];
          uint64_t v176 = &v173[v175];
          uint64_t v177 = sub_23309B300();
          uint64_t v178 = *(void *)(v177 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v337, v176, *(void *)(*(void *)(v179 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v337, v176, v177);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v178 + 56))(v337, 0, 1, v177);
          }
          uint64_t v10 = v379;
          *(_OWORD *)&v172[*(int *)(v14 + 32)] = *(_OWORD *)&v173[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v172, 0, 1, v14);
          uint64_t v84 = v369;
        }
        uint64_t v82 = v338;
        ((void (*)(char *, void, uint64_t, uint64_t))v342[7])(v79, 0, 1, v81);
      }
      *(_OWORD *)&a1[v10[15]] = *(_OWORD *)&a2[v10[15]];
      uint64_t v209 = v10[16];
      uint64_t v210 = &a1[v209];
      uint64_t v211 = &a2[v209];
      if (v84(&a2[v209], 1, v14))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v210, v211, *(void *)(*(void *)(v212 - 8) + 64));
      }
      else
      {
        long long v341 = v82;
        char *v210 = *v211;
        *((void *)v210 + 1) = *((void *)v211 + 1);
        *((_DWORD *)v210 + 4) = *((_DWORD *)v211 + 4);
        *(_OWORD *)(v210 + 24) = *(_OWORD *)(v211 + 24);
        *(_OWORD *)(v210 + 40) = *(_OWORD *)(v211 + 40);
        *((void *)v210 + 7) = *((void *)v211 + 7);
        uint64_t v213 = *(int *)(v14 + 28);
        uint64_t v214 = &v210[v213];
        uint64_t v215 = &v211[v213];
        uint64_t v216 = sub_23309B300();
        uint64_t v217 = *(void *)(v216 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v214, v215, v216);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
        }
        uint64_t v84 = v369;
        uint64_t v10 = v379;
        uint64_t v82 = v341;
        *(_OWORD *)&v210[*(int *)(v14 + 32)] = *(_OWORD *)&v211[*(int *)(v14 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v210, 0, 1, v14);
      }
      uint64_t v219 = v10[17];
      uint64_t v220 = &a1[v219];
      uint64_t v221 = &a2[v219];
      if (v82(&a2[v219], 1, v81))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v220, v221, *(void *)(*(void *)(v222 - 8) + 64));
      }
      else
      {
        if (v84(v221, 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v220, v221, *(void *)(*(void *)(v223 - 8) + 64));
        }
        else
        {
          *uint64_t v220 = *v221;
          *((void *)v220 + 1) = *((void *)v221 + 1);
          *((_DWORD *)v220 + 4) = *((_DWORD *)v221 + 4);
          *(_OWORD *)(v220 + 24) = *(_OWORD *)(v221 + 24);
          *(_OWORD *)(v220 + 40) = *(_OWORD *)(v221 + 40);
          *((void *)v220 + 7) = *((void *)v221 + 7);
          uint64_t v224 = *(int *)(v14 + 28);
          long long v225 = &v220[v224];
          long long v226 = &v221[v224];
          uint64_t v227 = sub_23309B300();
          uint64_t v228 = *(void *)(v227 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v225, v226, *(void *)(*(void *)(v229 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v225, v226, v227);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
          }
          *(_OWORD *)&v220[*(int *)(v14 + 32)] = *(_OWORD *)&v221[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v220, 0, 1, v14);
          uint64_t v84 = v369;
          uint64_t v10 = v379;
        }
        uint64_t v264 = *(int *)(v81 + 20);
        uint64_t v265 = &v220[v264];
        uint64_t v266 = &v221[v264];
        if (v84(v266, 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v265, v266, *(void *)(*(void *)(v267 - 8) + 64));
        }
        else
        {
          char *v265 = *v266;
          *((void *)v265 + 1) = *((void *)v266 + 1);
          *((_DWORD *)v265 + 4) = *((_DWORD *)v266 + 4);
          *(_OWORD *)(v265 + 24) = *(_OWORD *)(v266 + 24);
          *(_OWORD *)(v265 + 40) = *(_OWORD *)(v266 + 40);
          *((void *)v265 + 7) = *((void *)v266 + 7);
          uint64_t v268 = *(int *)(v14 + 28);
          uint64_t v351 = &v265[v268];
          long long v269 = &v266[v268];
          uint64_t v270 = sub_23309B300();
          uint64_t v271 = *(void *)(v270 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v351, v269, *(void *)(*(void *)(v272 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v271 + 32))(v351, v269, v270);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v271 + 56))(v351, 0, 1, v270);
          }
          uint64_t v10 = v379;
          *(_OWORD *)&v265[*(int *)(v14 + 32)] = *(_OWORD *)&v266[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v265, 0, 1, v14);
          uint64_t v84 = v369;
        }
        ((void (*)(char *, void, uint64_t, uint64_t))v342[7])(v220, 0, 1, v81);
      }
      *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
      uint64_t v273 = v10[19];
      uint64_t v274 = &a1[v273];
      uint64_t v275 = &a2[v273];
      if (v84(&a2[v273], 1, v14))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
      }
      else
      {
        char *v274 = *v275;
        *((void *)v274 + 1) = *((void *)v275 + 1);
        *((_DWORD *)v274 + 4) = *((_DWORD *)v275 + 4);
        *(_OWORD *)(v274 + 24) = *(_OWORD *)(v275 + 24);
        *(_OWORD *)(v274 + 40) = *(_OWORD *)(v275 + 40);
        *((void *)v274 + 7) = *((void *)v275 + 7);
        uint64_t v277 = *(int *)(v14 + 28);
        uint64_t v278 = &v274[v277];
        uint64_t v279 = &v275[v277];
        uint64_t v280 = sub_23309B300();
        uint64_t v281 = *(void *)(v280 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48))(v279, 1, v280))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v278, v279, *(void *)(*(void *)(v282 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v278, v279, v280);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
        }
        uint64_t v10 = v379;
        *(_OWORD *)&v274[*(int *)(v14 + 32)] = *(_OWORD *)&v275[*(int *)(v14 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v274, 0, 1, v14);
      }
      uint64_t v283 = v10[20];
      uint64_t v284 = &a1[v283];
      uint64_t v285 = &a2[v283];
      uint64_t v286 = type metadata accessor for Reference();
      uint64_t v287 = *(void *)(v286 - 8);
      long long v288 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v287 + 48);
      if (v288(v285, 1, v286))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v284, v285, *(void *)(*(void *)(v289 - 8) + 64));
      }
      else
      {
        uint64_t v377 = v287;
        long long v290 = *((_OWORD *)v285 + 1);
        *(_OWORD *)uint64_t v284 = *(_OWORD *)v285;
        *((_OWORD *)v284 + 1) = v290;
        uint64_t v291 = *(int *)(v286 + 24);
        uint64_t v292 = &v284[v291];
        uint64_t v293 = &v285[v291];
        uint64_t v294 = type metadata accessor for Identifier();
        v295 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v294 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v295)[6](v293, 1, v294))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v292, v293, *(void *)(*(void *)(v296 - 8) + 64));
        }
        else
        {
          uint64_t v352 = (void (**)(char *, void, uint64_t, uint64_t))v295;
          long long v297 = *((_OWORD *)v293 + 1);
          *(_OWORD *)uint64_t v292 = *(_OWORD *)v293;
          *((_OWORD *)v292 + 1) = v297;
          *((void *)v292 + 4) = *((void *)v293 + 4);
          uint64_t v298 = *(int *)(v294 + 24);
          __dste = &v292[v298];
          uint64_t v299 = &v293[v298];
          uint64_t v300 = sub_23309AF80();
          uint64_t v346 = *(void (***)(void *, const void *, void))(v300 - 8);
          long long v361 = v299;
          uint64_t v301 = v299;
          uint64_t v302 = v300;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v346[6])(v301, 1, v300))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(__dste, v361, *(void *)(*(void *)(v303 - 8) + 64));
          }
          else
          {
            v346[4](__dste, v361, v302);
            ((void (*)(char *, void, uint64_t, uint64_t))v346[7])(__dste, 0, 1, v302);
          }
          *(_OWORD *)&v292[*(int *)(v294 + 28)] = *(_OWORD *)&v293[*(int *)(v294 + 28)];
          v352[7](v292, 0, 1, v294);
        }
        uint64_t v287 = v377;
        uint64_t v10 = v379;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v377 + 56))(v284, 0, 1, v286);
      }
      uint64_t v304 = v10[21];
      long long v305 = &a1[v304];
      long long v306 = &a2[v304];
      if (v288(&a2[v304], 1, v286))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v305, v306, *(void *)(*(void *)(v307 - 8) + 64));
      }
      else
      {
        uint64_t v378 = v287;
        long long v308 = *((_OWORD *)v306 + 1);
        *(_OWORD *)long long v305 = *(_OWORD *)v306;
        *((_OWORD *)v305 + 1) = v308;
        uint64_t v309 = *(int *)(v286 + 24);
        uint64_t v310 = &v305[v309];
        uint64_t v311 = &v306[v309];
        uint64_t v312 = type metadata accessor for Identifier();
        uint64_t v313 = *(void *)(v312 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48))(v311, 1, v312))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v310, v311, *(void *)(*(void *)(v314 - 8) + 64));
        }
        else
        {
          long long v315 = *((_OWORD *)v311 + 1);
          *(_OWORD *)uint64_t v310 = *(_OWORD *)v311;
          *((_OWORD *)v310 + 1) = v315;
          *((void *)v310 + 4) = *((void *)v311 + 4);
          uint64_t v316 = *(int *)(v312 + 24);
          __dstf = &v310[v316];
          uint64_t v317 = &v311[v316];
          uint64_t v318 = sub_23309AF80();
          uint64_t v353 = *(void (***)(void *, const void *, uint64_t))(v318 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v353[6])(v317, 1, v318))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(__dstf, v317, *(void *)(*(void *)(v319 - 8) + 64));
          }
          else
          {
            v353[4](__dstf, v317, v318);
            ((void (*)(char *, void, uint64_t, uint64_t))v353[7])(__dstf, 0, 1, v318);
          }
          *(_OWORD *)&v310[*(int *)(v312 + 28)] = *(_OWORD *)&v311[*(int *)(v312 + 28)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v313 + 56))(v310, 0, 1, v312);
          uint64_t v10 = v379;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v378 + 56))(v305, 0, 1, v286);
      }
      *(void *)&a1[v10[22]] = *(void *)&a2[v10[22]];
      *(_OWORD *)&a1[v10[23]] = *(_OWORD *)&a2[v10[23]];
      goto LABEL_185;
    case 3u:
      long long v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v17;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((void *)a1 + 10) = *((void *)a2 + 10);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      uint64_t v18 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
      uint64_t v19 = v18[11];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for FHIRDateTime();
      uint64_t v380 = *(void **)(v22 - 8);
      uint64_t v23 = (unsigned int (*)(void, void, void))v380[6];
      if (v23(v21, 1, v22))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        *uint64_t v20 = *v21;
        *((void *)v20 + 1) = *((void *)v21 + 1);
        *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
        *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
        *((void *)v20 + 7) = *((void *)v21 + 7);
        uint64_t v56 = *(int *)(v22 + 28);
        __dstb = &v20[v56];
        uint64_t v370 = v23;
        long long v57 = &v21[v56];
        uint64_t v58 = sub_23309B300();
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstb, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 32))(__dstb, v57, v58);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(__dstb, 0, 1, v58);
        }
        *(_OWORD *)&v20[*(int *)(v22 + 32)] = *(_OWORD *)&v21[*(int *)(v22 + 32)];
        uint64_t v23 = v370;
        ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v20, 0, 1, v22);
      }
      uint64_t v86 = v18[12];
      uint64_t v87 = &a1[v86];
      uint64_t v88 = &a2[v86];
      uint64_t v89 = type metadata accessor for Period();
      uint64_t v90 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v89 - 8);
      if (v90[6](v88, 1, v89))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        __dstc = (void (**)(char *, void, uint64_t, uint64_t))v90;
        if (v23(v88, 1, v22))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
        }
        else
        {
          uint64_t v374 = v23;
          *uint64_t v87 = *v88;
          *((void *)v87 + 1) = *((void *)v88 + 1);
          *((_DWORD *)v87 + 4) = *((_DWORD *)v88 + 4);
          *(_OWORD *)(v87 + 24) = *(_OWORD *)(v88 + 24);
          *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
          *((void *)v87 + 7) = *((void *)v88 + 7);
          uint64_t v130 = *(int *)(v22 + 28);
          uint64_t v357 = &v87[v130];
          uint64_t v131 = &v88[v130];
          uint64_t v132 = sub_23309B300();
          uint64_t v343 = *(void (***)(void *, const void *, uint64_t))(v132 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v343[6])(v131, 1, v132))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v357, v131, *(void *)(*(void *)(v133 - 8) + 64));
          }
          else
          {
            v343[4](v357, v131, v132);
            ((void (*)(char *, void, uint64_t, uint64_t))v343[7])(v357, 0, 1, v132);
          }
          *(_OWORD *)&v87[*(int *)(v22 + 32)] = *(_OWORD *)&v88[*(int *)(v22 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v87, 0, 1, v22);
          uint64_t v23 = v374;
        }
        uint64_t v180 = *(int *)(v89 + 20);
        long long v181 = &v87[v180];
        long long v182 = &v88[v180];
        if (v23(v182, 1, v22))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
        }
        else
        {
          uint64_t v376 = v23;
          *long long v181 = *v182;
          *((void *)v181 + 1) = *((void *)v182 + 1);
          *((_DWORD *)v181 + 4) = *((_DWORD *)v182 + 4);
          *(_OWORD *)(v181 + 24) = *(_OWORD *)(v182 + 24);
          *(_OWORD *)(v181 + 40) = *(_OWORD *)(v182 + 40);
          *((void *)v181 + 7) = *((void *)v182 + 7);
          uint64_t v184 = *(int *)(v22 + 28);
          uint64_t v360 = &v181[v184];
          uint64_t v185 = &v182[v184];
          uint64_t v186 = sub_23309B300();
          uint64_t v345 = *(void (***)(void *, void *, void))(v186 - 8);
          uint64_t v349 = v185;
          long long v187 = v185;
          uint64_t v188 = v186;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v345[6])(v187, 1, v186))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v360, v349, *(void *)(*(void *)(v189 - 8) + 64));
          }
          else
          {
            v345[4](v360, v349, v188);
            ((void (*)(char *, void, uint64_t, uint64_t))v345[7])(v360, 0, 1, v188);
          }
          *(_OWORD *)&v181[*(int *)(v22 + 32)] = *(_OWORD *)&v182[*(int *)(v22 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v181, 0, 1, v22);
          uint64_t v23 = v376;
        }
        __dstc[7](v87, 0, 1, v89);
      }
      uint64_t v230 = v18[13];
      uint64_t v231 = &a1[v230];
      uint64_t v232 = &a2[v230];
      if (v23(&a2[v230], 1, v22))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v231, v232, *(void *)(*(void *)(v233 - 8) + 64));
      }
      else
      {
        *uint64_t v231 = *v232;
        *((void *)v231 + 1) = *((void *)v232 + 1);
        *((_DWORD *)v231 + 4) = *((_DWORD *)v232 + 4);
        *(_OWORD *)(v231 + 24) = *(_OWORD *)(v232 + 24);
        *(_OWORD *)(v231 + 40) = *(_OWORD *)(v232 + 40);
        *((void *)v231 + 7) = *((void *)v232 + 7);
        uint64_t v234 = *(int *)(v22 + 28);
        uint64_t v235 = &v231[v234];
        uint64_t v236 = &v232[v234];
        uint64_t v237 = sub_23309B300();
        uint64_t v238 = *(void *)(v237 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v236, 1, v237))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v235, v236, *(void *)(*(void *)(v239 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v235, v236, v237);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v238 + 56))(v235, 0, 1, v237);
        }
        *(_OWORD *)&v231[*(int *)(v22 + 32)] = *(_OWORD *)&v232[*(int *)(v22 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v231, 0, 1, v22);
      }
      *(void *)&a1[v18[14]] = *(void *)&a2[v18[14]];
      *(void *)&a1[v18[15]] = *(void *)&a2[v18[15]];
      *(_OWORD *)&a1[v18[16]] = *(_OWORD *)&a2[v18[16]];
      goto LABEL_185;
    case 4u:
      long long v25 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v25;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v26 = *((void *)a2 + 12);
      *((void *)a1 + 11) = *((void *)a2 + 11);
      *((void *)a1 + 12) = v26;
      uint64_t v27 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
      uint64_t v28 = v27[11];
      uint64_t v29 = &a1[v28];
      uint64_t v30 = &a2[v28];
      uint64_t v31 = type metadata accessor for FHIRDateTime();
      uint64_t v381 = *(void **)(v31 - 8);
      __dst = (unsigned int (*)(char *, uint64_t, uint64_t))v381[6];
      if (__dst(v30, 1, v31))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        *uint64_t v29 = *v30;
        *((void *)v29 + 1) = *((void *)v30 + 1);
        *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
        *((void *)v29 + 7) = *((void *)v30 + 7);
        uint64_t v371 = v31;
        uint64_t v61 = *(int *)(v31 + 28);
        long long v62 = &v29[v61];
        long long v63 = &v30[v61];
        uint64_t v64 = sub_23309B300();
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
        }
        uint64_t v31 = v371;
        *(_OWORD *)&v29[*(int *)(v371 + 32)] = *(_OWORD *)&v30[*(int *)(v371 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v381[7])(v29, 0, 1, v371);
      }
      *(_OWORD *)&a1[v27[12]] = *(_OWORD *)&a2[v27[12]];
      *(void *)&a1[v27[13]] = *(void *)&a2[v27[13]];
      *(void *)&a1[v27[14]] = *(void *)&a2[v27[14]];
      uint64_t v93 = v27[15];
      uint64_t v94 = &a1[v93];
      uint64_t v95 = &a2[v93];
      uint64_t v96 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
      uint64_t v97 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v96 - 8);
      if (((unsigned int (**)(char *, uint64_t, uint64_t))v97)[6](v95, 1, v96))
      {
        sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
        memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
      }
      else
      {
        uint64_t v347 = (void (**)(char *, void, uint64_t, uint64_t))v97;
        uint64_t v356 = v94;
        uint64_t v373 = v31;
        *(void *)uint64_t v94 = *(void *)v95;
        uint64_t v99 = *(int *)(v96 + 20);
        uint64_t v100 = &v94[v99];
        uint64_t v101 = &v95[v99];
        uint64_t v102 = type metadata accessor for Period();
        uint64_t v103 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v102 - 8);
        if (v103[6](v101, 1, v102))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
        }
        else
        {
          v336 = (void (**)(char *, void, uint64_t, uint64_t))v103;
          uint64_t v339 = v102;
          uint64_t v344 = v100;
          uint64_t v134 = v373;
          if (__dst(v101, 1, v373))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v100, v101, *(void *)(*(void *)(v135 - 8) + 64));
          }
          else
          {
            *uint64_t v100 = *v101;
            *((void *)v100 + 1) = *((void *)v101 + 1);
            *((_DWORD *)v100 + 4) = *((_DWORD *)v101 + 4);
            *(_OWORD *)(v100 + 24) = *(_OWORD *)(v101 + 24);
            *(_OWORD *)(v100 + 40) = *(_OWORD *)(v101 + 40);
            *((void *)v100 + 7) = *((void *)v101 + 7);
            uint64_t v190 = *(int *)(v373 + 28);
            uint64_t v191 = &v100[v190];
            uint64_t v192 = &v101[v190];
            uint64_t v193 = sub_23309B300();
            uint64_t v194 = *(void *)(v193 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v191, v192, *(void *)(*(void *)(v195 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v191, v192, v193);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
            }
            uint64_t v134 = v373;
            uint64_t v100 = v344;
            *(_OWORD *)&v344[*(int *)(v373 + 32)] = *(_OWORD *)&v101[*(int *)(v373 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v381[7])(v344, 0, 1, v373);
          }
          uint64_t v320 = *(int *)(v339 + 20);
          uint64_t v321 = &v100[v320];
          long long v322 = &v101[v320];
          if (__dst(v322, 1, v134))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v321, v322, *(void *)(*(void *)(v323 - 8) + 64));
            uint64_t v325 = v339;
            long long v324 = v344;
          }
          else
          {
            char *v321 = *v322;
            *((void *)v321 + 1) = *((void *)v322 + 1);
            *((_DWORD *)v321 + 4) = *((_DWORD *)v322 + 4);
            *(_OWORD *)(v321 + 24) = *(_OWORD *)(v322 + 24);
            *(_OWORD *)(v321 + 40) = *(_OWORD *)(v322 + 40);
            *((void *)v321 + 7) = *((void *)v322 + 7);
            uint64_t v326 = *(int *)(v134 + 28);
            uint64_t v327 = v321;
            uint64_t v328 = &v321[v326];
            uint64_t v329 = &v322[v326];
            uint64_t v330 = sub_23309B300();
            uint64_t v331 = *(void *)(v330 - 8);
            uint64_t v332 = v330;
            if ((*(unsigned int (**)(char *, uint64_t))(v331 + 48))(v329, 1))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v328, v329, *(void *)(*(void *)(v333 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v331 + 32))(v328, v329, v332);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v331 + 56))(v328, 0, 1, v332);
            }
            uint64_t v325 = v339;
            long long v324 = v344;
            *(_OWORD *)&v327[*(int *)(v373 + 32)] = *(_OWORD *)&v322[*(int *)(v373 + 32)];
            ((void (*)(char *, void, uint64_t))v381[7])(v327, 0, 1);
          }
          v336[7](v324, 0, 1, v325);
        }
        v347[7](v356, 0, 1, v96);
      }
      *(_OWORD *)&a1[v27[16]] = *(_OWORD *)&a2[v27[16]];
      goto LABEL_185;
    case 5u:
      long long v33 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v33;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *(void *)(a1 + 61) = *(void *)(a2 + 61);
      *((void *)a1 + 9) = *((void *)a2 + 9);
      uint64_t v34 = (int *)type metadata accessor for ModelsR4.Immunization(0);
      uint64_t v35 = v34[10];
      uint64_t v36 = &a1[v35];
      long long v37 = &a2[v35];
      uint64_t v38 = type metadata accessor for FHIRDateTime();
      uint64_t v39 = *(void **)(v38 - 8);
      long long v40 = (unsigned int (*)(void, void, void))v39[6];
      if (v40(v37, 1, v38))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v354 = v40;
        *uint64_t v36 = *v37;
        *((void *)v36 + 1) = *((void *)v37 + 1);
        *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
        *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
        *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 40);
        *((void *)v36 + 7) = *((void *)v37 + 7);
        uint64_t v67 = *(int *)(v38 + 28);
        v372 = &v36[v67];
        uint64_t v383 = v39;
        uint64_t v68 = &v37[v67];
        uint64_t v69 = sub_23309B300();
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v372, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v372, v68, v69);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v372, 0, 1, v69);
        }
        uint64_t v39 = v383;
        long long v40 = v354;
        *(_OWORD *)&v36[*(int *)(v38 + 32)] = *(_OWORD *)&v37[*(int *)(v38 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v383[7])(v36, 0, 1, v38);
      }
      *(void *)&a1[v34[11]] = *(void *)&a2[v34[11]];
      uint64_t v105 = v34[12];
      uint64_t v106 = &a1[v105];
      uint64_t v107 = &a2[v105];
      if (v40(&a2[v105], 1, v38))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
      }
      else
      {
        uint64_t v384 = (void (**)(char *, void, uint64_t, uint64_t))v39;
        *uint64_t v106 = *v107;
        *((void *)v106 + 1) = *((void *)v107 + 1);
        *((_DWORD *)v106 + 4) = *((_DWORD *)v107 + 4);
        *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
        *(_OWORD *)(v106 + 40) = *(_OWORD *)(v107 + 40);
        *((void *)v106 + 7) = *((void *)v107 + 7);
        uint64_t v109 = *(int *)(v38 + 28);
        uint64_t v110 = &v106[v109];
        uint64_t v111 = &v107[v109];
        uint64_t v112 = sub_23309B300();
        uint64_t v113 = *(void *)(v112 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v110, v111, v112);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
        }
        *(_OWORD *)&v106[*(int *)(v38 + 32)] = *(_OWORD *)&v107[*(int *)(v38 + 32)];
        v384[7](v106, 0, 1, v38);
      }
      uint64_t v136 = v34[13];
      long long v137 = &a1[v136];
      uint64_t v138 = &a2[v136];
      *(_OWORD *)long long v137 = *(_OWORD *)v138;
      *((void *)v137 + 2) = *((void *)v138 + 2);
      uint64_t v139 = v34[14];
      uint64_t v140 = &a1[v139];
      long long v141 = &a2[v139];
      uint64_t v142 = type metadata accessor for Reference();
      uint64_t v143 = *(void *)(v142 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
      {
        sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
        memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
      }
      else
      {
        long long v145 = *((_OWORD *)v141 + 1);
        *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
        *((_OWORD *)v140 + 1) = v145;
        uint64_t v146 = *(int *)(v142 + 24);
        uint64_t v147 = &v140[v146];
        uint64_t v148 = &v141[v146];
        uint64_t v149 = type metadata accessor for Identifier();
        uint64_t v150 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v149 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v150)[6](v148, 1, v149))
        {
          sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
          memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
        }
        else
        {
          __dstd = (void (**)(char *, void, uint64_t, uint64_t))v150;
          long long v159 = *((_OWORD *)v148 + 1);
          *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
          *((_OWORD *)v147 + 1) = v159;
          *((void *)v147 + 4) = *((void *)v148 + 4);
          uint64_t v160 = *(int *)(v149 + 24);
          uint64_t v385 = &v147[v160];
          long long v161 = &v148[v160];
          uint64_t v162 = sub_23309AF80();
          uint64_t v359 = *(void *)(v162 - 8);
          uint64_t v375 = v161;
          uint64_t v163 = v161;
          uint64_t v164 = v162;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v359 + 48))(v163, 1, v162))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v385, v375, *(void *)(*(void *)(v165 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, const void *, uint64_t))(v359 + 32))(v385, v375, v164);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v359 + 56))(v385, 0, 1, v164);
          }
          *(_OWORD *)&v147[*(int *)(v149 + 28)] = *(_OWORD *)&v148[*(int *)(v149 + 28)];
          __dstd[7](v147, 0, 1, v149);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
      }
      a1[v34[15]] = a2[v34[15]];
      *(_OWORD *)&a1[v34[16]] = *(_OWORD *)&a2[v34[16]];
      *(void *)&a1[v34[17]] = *(void *)&a2[v34[17]];
      a1[v34[18]] = a2[v34[18]];
      uint64_t v196 = v34[19];
      uint64_t v197 = &a1[v196];
      uint64_t v198 = &a2[v196];
      *((void *)v197 + 6) = *((void *)v198 + 6);
      long long v199 = *((_OWORD *)v198 + 2);
      long long v200 = *(_OWORD *)v198;
      *((_OWORD *)v197 + 1) = *((_OWORD *)v198 + 1);
      *((_OWORD *)v197 + 2) = v199;
      *(_OWORD *)uint64_t v197 = v200;
      *(_OWORD *)&a1[v34[20]] = *(_OWORD *)&a2[v34[20]];
      goto LABEL_185;
    case 6u:
      long long v42 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v42;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((void *)a1 + 10) = *((void *)a2 + 10);
      uint64_t v43 = (int *)type metadata accessor for ModelsR4.Observation(0);
      uint64_t v44 = v43[10];
      uint64_t v45 = &a1[v44];
      uint64_t v46 = &a2[v44];
      uint64_t v47 = type metadata accessor for FHIRDateTime();
      uint64_t v382 = *(void **)(v47 - 8);
      uint64_t v48 = (unsigned int (*)(void, void, void))v382[6];
      __dsta = v48;
      if (v48(v46, 1, v47))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        char *v45 = *v46;
        *((void *)v45 + 1) = *((void *)v46 + 1);
        *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
        *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
        *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
        *((void *)v45 + 7) = *((void *)v46 + 7);
        uint64_t v72 = *(int *)(v47 + 28);
        uint64_t v73 = &v45[v72];
        uint64_t v74 = &v46[v72];
        uint64_t v75 = sub_23309B300();
        uint64_t v76 = *(void *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v73, v74, v75);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
        }
        uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
        *(_OWORD *)&v45[*(int *)(v47 + 32)] = *(_OWORD *)&v46[*(int *)(v47 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v45, 0, 1, v47);
      }
      uint64_t v115 = v43[11];
      uint64_t v116 = &a1[v115];
      uint64_t v117 = &a2[v115];
      if (v48(&a2[v115], 1, v47))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
      }
      else
      {
        *uint64_t v116 = *v117;
        *((void *)v116 + 1) = *((void *)v117 + 1);
        *((_DWORD *)v116 + 4) = *((_DWORD *)v117 + 4);
        *(_OWORD *)(v116 + 24) = *(_OWORD *)(v117 + 24);
        *(_OWORD *)(v116 + 40) = *(_OWORD *)(v117 + 40);
        *((void *)v116 + 7) = *((void *)v117 + 7);
        uint64_t v119 = *(int *)(v47 + 28);
        uint64_t v120 = &v116[v119];
        uint64_t v121 = &v117[v119];
        uint64_t v122 = sub_23309B300();
        uint64_t v123 = *(void *)(v122 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v120, v121, v122);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
        }
        uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
        *(_OWORD *)&v116[*(int *)(v47 + 32)] = *(_OWORD *)&v117[*(int *)(v47 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v116, 0, 1, v47);
      }
      uint64_t v152 = v43[12];
      uint64_t v153 = &a1[v152];
      uint64_t v154 = &a2[v152];
      uint64_t v155 = type metadata accessor for Period();
      uint64_t v156 = *(void *)(v155 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
      }
      else
      {
        uint64_t v358 = v156;
        if (v48(v154, 1, v47))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v153, v154, *(void *)(*(void *)(v158 - 8) + 64));
        }
        else
        {
          *uint64_t v153 = *v154;
          *((void *)v153 + 1) = *((void *)v154 + 1);
          *((_DWORD *)v153 + 4) = *((_DWORD *)v154 + 4);
          *(_OWORD *)(v153 + 24) = *(_OWORD *)(v154 + 24);
          *(_OWORD *)(v153 + 40) = *(_OWORD *)(v154 + 40);
          *((void *)v153 + 7) = *((void *)v154 + 7);
          uint64_t v166 = *(int *)(v47 + 28);
          uint64_t v348 = &v153[v166];
          uint64_t v167 = &v154[v166];
          uint64_t v168 = sub_23309B300();
          uint64_t v169 = *(void *)(v168 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v348, v167, *(void *)(*(void *)(v170 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v348, v167, v168);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v348, 0, 1, v168);
          }
          *(_OWORD *)&v153[*(int *)(v47 + 32)] = *(_OWORD *)&v154[*(int *)(v47 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v153, 0, 1, v47);
          uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
        }
        uint64_t v201 = *(int *)(v155 + 20);
        uint64_t v202 = &v153[v201];
        uint64_t v203 = &v154[v201];
        if (v48(v203, 1, v47))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v202, v203, *(void *)(*(void *)(v204 - 8) + 64));
        }
        else
        {
          char *v202 = *v203;
          *((void *)v202 + 1) = *((void *)v203 + 1);
          *((_DWORD *)v202 + 4) = *((_DWORD *)v203 + 4);
          *(_OWORD *)(v202 + 24) = *(_OWORD *)(v203 + 24);
          *(_OWORD *)(v202 + 40) = *(_OWORD *)(v203 + 40);
          *((void *)v202 + 7) = *((void *)v203 + 7);
          uint64_t v205 = *(int *)(v47 + 28);
          uint64_t v350 = &v202[v205];
          uint64_t v206 = &v203[v205];
          uint64_t v207 = sub_23309B300();
          uint64_t v340 = *(void *)(v207 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v340 + 48))(v206, 1, v207))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v350, v206, *(void *)(*(void *)(v208 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v350, v206, v207);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v340 + 56))(v350, 0, 1, v207);
          }
          *(_OWORD *)&v202[*(int *)(v47 + 32)] = *(_OWORD *)&v203[*(int *)(v47 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v202, 0, 1, v47);
          uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v358 + 56))(v153, 0, 1, v155);
      }
      uint64_t v240 = v43[13];
      uint64_t v241 = &a1[v240];
      uint64_t v242 = &a2[v240];
      if (v48(&a2[v240], 1, v47))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
      }
      else
      {
        *uint64_t v241 = *v242;
        *((void *)v241 + 1) = *((void *)v242 + 1);
        *((_DWORD *)v241 + 4) = *((_DWORD *)v242 + 4);
        *(_OWORD *)(v241 + 24) = *(_OWORD *)(v242 + 24);
        *(_OWORD *)(v241 + 40) = *(_OWORD *)(v242 + 40);
        *((void *)v241 + 7) = *((void *)v242 + 7);
        uint64_t v244 = *(int *)(v47 + 28);
        uint64_t v245 = &v241[v244];
        uint64_t v246 = &v242[v244];
        uint64_t v247 = sub_23309B300();
        uint64_t v248 = *(void *)(v247 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v245, v246, v247);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v248 + 56))(v245, 0, 1, v247);
        }
        *(_OWORD *)&v241[*(int *)(v47 + 32)] = *(_OWORD *)&v242[*(int *)(v47 + 32)];
        ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v241, 0, 1, v47);
      }
      *(void *)&a1[v43[14]] = *(void *)&a2[v43[14]];
      *(void *)&a1[v43[15]] = *(void *)&a2[v43[15]];
      *(_OWORD *)&a1[v43[16]] = *(_OWORD *)&a2[v43[16]];
      uint64_t v250 = v43[17];
      uint64_t v251 = &a1[v250];
      uint64_t v252 = &a2[v250];
      *((void *)v251 + 2) = *((void *)v252 + 2);
      *(_OWORD *)uint64_t v251 = *(_OWORD *)v252;
      uint64_t v253 = v43[18];
      uint64_t v254 = &a1[v253];
      uint64_t v255 = &a2[v253];
      uint64_t v256 = type metadata accessor for Quantity();
      uint64_t v257 = *(void *)(v256 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v255, 1, v256))
      {
        sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
        memcpy(v254, v255, *(void *)(*(void *)(v258 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v254 = *(_OWORD *)v255;
        *(void *)(v254 + 13) = *(void *)(v255 + 13);
        *(_OWORD *)(v254 + 24) = *(_OWORD *)(v255 + 24);
        *(_OWORD *)(v254 + 40) = *(_OWORD *)(v255 + 40);
        uint64_t v259 = *(int *)(v256 + 28);
        long long v386 = &v254[v259];
        uint64_t v260 = &v255[v259];
        uint64_t v261 = sub_23309AF80();
        uint64_t v262 = *(void *)(v261 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v260, 1, v261))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v386, v260, *(void *)(*(void *)(v263 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v386, v260, v261);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v386, 0, 1, v261);
        }
        *(_OWORD *)&v254[*(int *)(v256 + 32)] = *(_OWORD *)&v255[*(int *)(v256 + 32)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v257 + 56))(v254, 0, 1, v256);
      }
      *(void *)&a1[v43[19]] = *(void *)&a2[v43[19]];
      *(_OWORD *)&a1[v43[20]] = *(_OWORD *)&a2[v43[20]];
LABEL_185:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for ModelsR4.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_232EA3DC4((uint64_t)a1, type metadata accessor for ModelsR4.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        long long v6 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v6;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        uint64_t v7 = *((void *)a2 + 11);
        *((void *)a1 + 10) = *((void *)a2 + 10);
        *((void *)a1 + 11) = v7;
        long long v8 = *((_OWORD *)a2 + 6);
        *((void *)a1 + 14) = *((void *)a2 + 14);
        *((_OWORD *)a1 + 6) = v8;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        uint64_t v9 = *((void *)a2 + 18);
        *((void *)a1 + 17) = *((void *)a2 + 17);
        *((void *)a1 + 18) = v9;
        uint64_t v10 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v11 = v10[13];
        uint64_t v12 = &a1[v11];
        uint64_t v13 = &a2[v11];
        uint64_t v14 = type metadata accessor for FHIRDateTime();
        uint64_t v15 = *(void *)(v14 - 8);
        long long v369 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
        uint64_t v379 = v10;
        if (v369(v13, 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          *uint64_t v12 = *v13;
          *((void *)v12 + 1) = *((void *)v13 + 1);
          *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
          *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
          *((void *)v12 + 7) = *((void *)v13 + 7);
          uint64_t v50 = *(int *)(v14 + 28);
          long long v51 = &v12[v50];
          uint64_t v52 = &v13[v50];
          uint64_t v53 = sub_23309B300();
          uint64_t v54 = *(void *)(v53 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
          }
          uint64_t v10 = v379;
          *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        uint64_t v78 = v10[14];
        long long v79 = &a1[v78];
        uint64_t v80 = &a2[v78];
        uint64_t v81 = type metadata accessor for Period();
        uint64_t v342 = *(void **)(v81 - 8);
        uint64_t v82 = (unsigned int (*)(void, void, void))v342[6];
        uint64_t v355 = v15;
        if (v82(v80, 1, v81))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
          uint64_t v84 = v369;
        }
        else
        {
          uint64_t v338 = v82;
          if (v369(v80, 1, v14))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v79, v80, *(void *)(*(void *)(v85 - 8) + 64));
          }
          else
          {
            *long long v79 = *v80;
            *((void *)v79 + 1) = *((void *)v80 + 1);
            *((_DWORD *)v79 + 4) = *((_DWORD *)v80 + 4);
            *(_OWORD *)(v79 + 24) = *(_OWORD *)(v80 + 24);
            *(_OWORD *)(v79 + 40) = *(_OWORD *)(v80 + 40);
            *((void *)v79 + 7) = *((void *)v80 + 7);
            uint64_t v125 = *(int *)(v14 + 28);
            uint64_t v335 = &v79[v125];
            long long v126 = &v80[v125];
            uint64_t v127 = sub_23309B300();
            uint64_t v128 = *(void *)(v127 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v335, v126, *(void *)(*(void *)(v129 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v335, v126, v127);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v335, 0, 1, v127);
            }
            *(_OWORD *)&v79[*(int *)(v14 + 32)] = *(_OWORD *)&v80[*(int *)(v14 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v79, 0, 1, v14);
            uint64_t v10 = v379;
          }
          uint64_t v84 = v369;
          uint64_t v171 = *(int *)(v81 + 20);
          uint64_t v172 = &v79[v171];
          uint64_t v173 = &v80[v171];
          if (v369(v173, 1, v14))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v172, v173, *(void *)(*(void *)(v174 - 8) + 64));
          }
          else
          {
            char *v172 = *v173;
            *((void *)v172 + 1) = *((void *)v173 + 1);
            *((_DWORD *)v172 + 4) = *((_DWORD *)v173 + 4);
            *(_OWORD *)(v172 + 24) = *(_OWORD *)(v173 + 24);
            *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
            *((void *)v172 + 7) = *((void *)v173 + 7);
            uint64_t v175 = *(int *)(v14 + 28);
            uint64_t v337 = &v172[v175];
            uint64_t v176 = &v173[v175];
            uint64_t v177 = sub_23309B300();
            uint64_t v178 = *(void *)(v177 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v337, v176, *(void *)(*(void *)(v179 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v337, v176, v177);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v178 + 56))(v337, 0, 1, v177);
            }
            uint64_t v10 = v379;
            *(_OWORD *)&v172[*(int *)(v14 + 32)] = *(_OWORD *)&v173[*(int *)(v14 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v172, 0, 1, v14);
            uint64_t v84 = v369;
          }
          uint64_t v82 = v338;
          ((void (*)(char *, void, uint64_t, uint64_t))v342[7])(v79, 0, 1, v81);
        }
        *(_OWORD *)&a1[v10[15]] = *(_OWORD *)&a2[v10[15]];
        uint64_t v209 = v10[16];
        uint64_t v210 = &a1[v209];
        uint64_t v211 = &a2[v209];
        if (v84(&a2[v209], 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v210, v211, *(void *)(*(void *)(v212 - 8) + 64));
        }
        else
        {
          long long v341 = v82;
          char *v210 = *v211;
          *((void *)v210 + 1) = *((void *)v211 + 1);
          *((_DWORD *)v210 + 4) = *((_DWORD *)v211 + 4);
          *(_OWORD *)(v210 + 24) = *(_OWORD *)(v211 + 24);
          *(_OWORD *)(v210 + 40) = *(_OWORD *)(v211 + 40);
          *((void *)v210 + 7) = *((void *)v211 + 7);
          uint64_t v213 = *(int *)(v14 + 28);
          uint64_t v214 = &v210[v213];
          uint64_t v215 = &v211[v213];
          uint64_t v216 = sub_23309B300();
          uint64_t v217 = *(void *)(v216 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v214, v215, *(void *)(*(void *)(v218 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v214, v215, v216);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
          }
          uint64_t v84 = v369;
          uint64_t v10 = v379;
          uint64_t v82 = v341;
          *(_OWORD *)&v210[*(int *)(v14 + 32)] = *(_OWORD *)&v211[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v210, 0, 1, v14);
        }
        uint64_t v219 = v10[17];
        uint64_t v220 = &a1[v219];
        uint64_t v221 = &a2[v219];
        if (v82(&a2[v219], 1, v81))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v220, v221, *(void *)(*(void *)(v222 - 8) + 64));
        }
        else
        {
          if (v84(v221, 1, v14))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v220, v221, *(void *)(*(void *)(v223 - 8) + 64));
          }
          else
          {
            *uint64_t v220 = *v221;
            *((void *)v220 + 1) = *((void *)v221 + 1);
            *((_DWORD *)v220 + 4) = *((_DWORD *)v221 + 4);
            *(_OWORD *)(v220 + 24) = *(_OWORD *)(v221 + 24);
            *(_OWORD *)(v220 + 40) = *(_OWORD *)(v221 + 40);
            *((void *)v220 + 7) = *((void *)v221 + 7);
            uint64_t v224 = *(int *)(v14 + 28);
            long long v225 = &v220[v224];
            long long v226 = &v221[v224];
            uint64_t v227 = sub_23309B300();
            uint64_t v228 = *(void *)(v227 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v225, v226, *(void *)(*(void *)(v229 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v225, v226, v227);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
            }
            *(_OWORD *)&v220[*(int *)(v14 + 32)] = *(_OWORD *)&v221[*(int *)(v14 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v220, 0, 1, v14);
            uint64_t v84 = v369;
            uint64_t v10 = v379;
          }
          uint64_t v264 = *(int *)(v81 + 20);
          uint64_t v265 = &v220[v264];
          uint64_t v266 = &v221[v264];
          if (v84(v266, 1, v14))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v265, v266, *(void *)(*(void *)(v267 - 8) + 64));
          }
          else
          {
            char *v265 = *v266;
            *((void *)v265 + 1) = *((void *)v266 + 1);
            *((_DWORD *)v265 + 4) = *((_DWORD *)v266 + 4);
            *(_OWORD *)(v265 + 24) = *(_OWORD *)(v266 + 24);
            *(_OWORD *)(v265 + 40) = *(_OWORD *)(v266 + 40);
            *((void *)v265 + 7) = *((void *)v266 + 7);
            uint64_t v268 = *(int *)(v14 + 28);
            uint64_t v351 = &v265[v268];
            long long v269 = &v266[v268];
            uint64_t v270 = sub_23309B300();
            uint64_t v271 = *(void *)(v270 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v351, v269, *(void *)(*(void *)(v272 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v271 + 32))(v351, v269, v270);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v271 + 56))(v351, 0, 1, v270);
            }
            uint64_t v10 = v379;
            *(_OWORD *)&v265[*(int *)(v14 + 32)] = *(_OWORD *)&v266[*(int *)(v14 + 32)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v265, 0, 1, v14);
            uint64_t v84 = v369;
          }
          ((void (*)(char *, void, uint64_t, uint64_t))v342[7])(v220, 0, 1, v81);
        }
        *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
        uint64_t v273 = v10[19];
        uint64_t v274 = &a1[v273];
        uint64_t v275 = &a2[v273];
        if (v84(&a2[v273], 1, v14))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v274, v275, *(void *)(*(void *)(v276 - 8) + 64));
        }
        else
        {
          char *v274 = *v275;
          *((void *)v274 + 1) = *((void *)v275 + 1);
          *((_DWORD *)v274 + 4) = *((_DWORD *)v275 + 4);
          *(_OWORD *)(v274 + 24) = *(_OWORD *)(v275 + 24);
          *(_OWORD *)(v274 + 40) = *(_OWORD *)(v275 + 40);
          *((void *)v274 + 7) = *((void *)v275 + 7);
          uint64_t v277 = *(int *)(v14 + 28);
          uint64_t v278 = &v274[v277];
          uint64_t v279 = &v275[v277];
          uint64_t v280 = sub_23309B300();
          uint64_t v281 = *(void *)(v280 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v281 + 48))(v279, 1, v280))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v278, v279, *(void *)(*(void *)(v282 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v278, v279, v280);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
          }
          uint64_t v10 = v379;
          *(_OWORD *)&v274[*(int *)(v14 + 32)] = *(_OWORD *)&v275[*(int *)(v14 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v355 + 56))(v274, 0, 1, v14);
        }
        uint64_t v283 = v10[20];
        uint64_t v284 = &a1[v283];
        uint64_t v285 = &a2[v283];
        uint64_t v286 = type metadata accessor for Reference();
        uint64_t v287 = *(void *)(v286 - 8);
        long long v288 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v287 + 48);
        if (v288(v285, 1, v286))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v284, v285, *(void *)(*(void *)(v289 - 8) + 64));
        }
        else
        {
          uint64_t v377 = v287;
          long long v290 = *((_OWORD *)v285 + 1);
          *(_OWORD *)uint64_t v284 = *(_OWORD *)v285;
          *((_OWORD *)v284 + 1) = v290;
          uint64_t v291 = *(int *)(v286 + 24);
          uint64_t v292 = &v284[v291];
          uint64_t v293 = &v285[v291];
          uint64_t v294 = type metadata accessor for Identifier();
          v295 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v294 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v295)[6](v293, 1, v294))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v292, v293, *(void *)(*(void *)(v296 - 8) + 64));
          }
          else
          {
            uint64_t v352 = (void (**)(char *, void, uint64_t, uint64_t))v295;
            long long v297 = *((_OWORD *)v293 + 1);
            *(_OWORD *)uint64_t v292 = *(_OWORD *)v293;
            *((_OWORD *)v292 + 1) = v297;
            *((void *)v292 + 4) = *((void *)v293 + 4);
            uint64_t v298 = *(int *)(v294 + 24);
            __dste = &v292[v298];
            uint64_t v299 = &v293[v298];
            uint64_t v300 = sub_23309AF80();
            uint64_t v346 = *(void (***)(void *, const void *, void))(v300 - 8);
            long long v361 = v299;
            uint64_t v301 = v299;
            uint64_t v302 = v300;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v346[6])(v301, 1, v300))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dste, v361, *(void *)(*(void *)(v303 - 8) + 64));
            }
            else
            {
              v346[4](__dste, v361, v302);
              ((void (*)(char *, void, uint64_t, uint64_t))v346[7])(__dste, 0, 1, v302);
            }
            *(_OWORD *)&v292[*(int *)(v294 + 28)] = *(_OWORD *)&v293[*(int *)(v294 + 28)];
            v352[7](v292, 0, 1, v294);
          }
          uint64_t v287 = v377;
          uint64_t v10 = v379;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v377 + 56))(v284, 0, 1, v286);
        }
        uint64_t v304 = v10[21];
        long long v305 = &a1[v304];
        long long v306 = &a2[v304];
        if (v288(&a2[v304], 1, v286))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v305, v306, *(void *)(*(void *)(v307 - 8) + 64));
        }
        else
        {
          uint64_t v378 = v287;
          long long v308 = *((_OWORD *)v306 + 1);
          *(_OWORD *)long long v305 = *(_OWORD *)v306;
          *((_OWORD *)v305 + 1) = v308;
          uint64_t v309 = *(int *)(v286 + 24);
          uint64_t v310 = &v305[v309];
          uint64_t v311 = &v306[v309];
          uint64_t v312 = type metadata accessor for Identifier();
          uint64_t v313 = *(void *)(v312 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48))(v311, 1, v312))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v310, v311, *(void *)(*(void *)(v314 - 8) + 64));
          }
          else
          {
            long long v315 = *((_OWORD *)v311 + 1);
            *(_OWORD *)uint64_t v310 = *(_OWORD *)v311;
            *((_OWORD *)v310 + 1) = v315;
            *((void *)v310 + 4) = *((void *)v311 + 4);
            uint64_t v316 = *(int *)(v312 + 24);
            __dstf = &v310[v316];
            uint64_t v317 = &v311[v316];
            uint64_t v318 = sub_23309AF80();
            uint64_t v353 = *(void (***)(void *, const void *, uint64_t))(v318 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v353[6])(v317, 1, v318))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(__dstf, v317, *(void *)(*(void *)(v319 - 8) + 64));
            }
            else
            {
              v353[4](__dstf, v317, v318);
              ((void (*)(char *, void, uint64_t, uint64_t))v353[7])(__dstf, 0, 1, v318);
            }
            *(_OWORD *)&v310[*(int *)(v312 + 28)] = *(_OWORD *)&v311[*(int *)(v312 + 28)];
            (*(void (**)(char *, void, uint64_t, uint64_t))(v313 + 56))(v310, 0, 1, v312);
            uint64_t v10 = v379;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v378 + 56))(v305, 0, 1, v286);
        }
        *(void *)&a1[v10[22]] = *(void *)&a2[v10[22]];
        *(_OWORD *)&a1[v10[23]] = *(_OWORD *)&a2[v10[23]];
        goto LABEL_186;
      case 3u:
        long long v17 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v17;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((void *)a1 + 10) = *((void *)a2 + 10);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        uint64_t v18 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v19 = v18[11];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        uint64_t v22 = type metadata accessor for FHIRDateTime();
        uint64_t v380 = *(void **)(v22 - 8);
        uint64_t v23 = (unsigned int (*)(void, void, void))v380[6];
        if (v23(v21, 1, v22))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          *uint64_t v20 = *v21;
          *((void *)v20 + 1) = *((void *)v21 + 1);
          *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
          *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
          *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
          *((void *)v20 + 7) = *((void *)v21 + 7);
          uint64_t v56 = *(int *)(v22 + 28);
          __dstb = &v20[v56];
          uint64_t v370 = v23;
          long long v57 = &v21[v56];
          uint64_t v58 = sub_23309B300();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstb, v57, *(void *)(*(void *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v59 + 32))(__dstb, v57, v58);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(__dstb, 0, 1, v58);
          }
          *(_OWORD *)&v20[*(int *)(v22 + 32)] = *(_OWORD *)&v21[*(int *)(v22 + 32)];
          uint64_t v23 = v370;
          ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v20, 0, 1, v22);
        }
        uint64_t v86 = v18[12];
        uint64_t v87 = &a1[v86];
        uint64_t v88 = &a2[v86];
        uint64_t v89 = type metadata accessor for Period();
        uint64_t v90 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v89 - 8);
        if (v90[6](v88, 1, v89))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          __dstc = (void (**)(char *, void, uint64_t, uint64_t))v90;
          if (v23(v88, 1, v22))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
          }
          else
          {
            uint64_t v374 = v23;
            *uint64_t v87 = *v88;
            *((void *)v87 + 1) = *((void *)v88 + 1);
            *((_DWORD *)v87 + 4) = *((_DWORD *)v88 + 4);
            *(_OWORD *)(v87 + 24) = *(_OWORD *)(v88 + 24);
            *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
            *((void *)v87 + 7) = *((void *)v88 + 7);
            uint64_t v130 = *(int *)(v22 + 28);
            uint64_t v357 = &v87[v130];
            uint64_t v131 = &v88[v130];
            uint64_t v132 = sub_23309B300();
            uint64_t v343 = *(void (***)(void *, const void *, uint64_t))(v132 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v343[6])(v131, 1, v132))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v357, v131, *(void *)(*(void *)(v133 - 8) + 64));
            }
            else
            {
              v343[4](v357, v131, v132);
              ((void (*)(char *, void, uint64_t, uint64_t))v343[7])(v357, 0, 1, v132);
            }
            *(_OWORD *)&v87[*(int *)(v22 + 32)] = *(_OWORD *)&v88[*(int *)(v22 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v87, 0, 1, v22);
            uint64_t v23 = v374;
          }
          uint64_t v180 = *(int *)(v89 + 20);
          long long v181 = &v87[v180];
          long long v182 = &v88[v180];
          if (v23(v182, 1, v22))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
          }
          else
          {
            uint64_t v376 = v23;
            *long long v181 = *v182;
            *((void *)v181 + 1) = *((void *)v182 + 1);
            *((_DWORD *)v181 + 4) = *((_DWORD *)v182 + 4);
            *(_OWORD *)(v181 + 24) = *(_OWORD *)(v182 + 24);
            *(_OWORD *)(v181 + 40) = *(_OWORD *)(v182 + 40);
            *((void *)v181 + 7) = *((void *)v182 + 7);
            uint64_t v184 = *(int *)(v22 + 28);
            uint64_t v360 = &v181[v184];
            uint64_t v185 = &v182[v184];
            uint64_t v186 = sub_23309B300();
            uint64_t v345 = *(void (***)(void *, void *, void))(v186 - 8);
            uint64_t v349 = v185;
            long long v187 = v185;
            uint64_t v188 = v186;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v345[6])(v187, 1, v186))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v360, v349, *(void *)(*(void *)(v189 - 8) + 64));
            }
            else
            {
              v345[4](v360, v349, v188);
              ((void (*)(char *, void, uint64_t, uint64_t))v345[7])(v360, 0, 1, v188);
            }
            *(_OWORD *)&v181[*(int *)(v22 + 32)] = *(_OWORD *)&v182[*(int *)(v22 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v181, 0, 1, v22);
            uint64_t v23 = v376;
          }
          __dstc[7](v87, 0, 1, v89);
        }
        uint64_t v230 = v18[13];
        uint64_t v231 = &a1[v230];
        uint64_t v232 = &a2[v230];
        if (v23(&a2[v230], 1, v22))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v231, v232, *(void *)(*(void *)(v233 - 8) + 64));
        }
        else
        {
          *uint64_t v231 = *v232;
          *((void *)v231 + 1) = *((void *)v232 + 1);
          *((_DWORD *)v231 + 4) = *((_DWORD *)v232 + 4);
          *(_OWORD *)(v231 + 24) = *(_OWORD *)(v232 + 24);
          *(_OWORD *)(v231 + 40) = *(_OWORD *)(v232 + 40);
          *((void *)v231 + 7) = *((void *)v232 + 7);
          uint64_t v234 = *(int *)(v22 + 28);
          uint64_t v235 = &v231[v234];
          uint64_t v236 = &v232[v234];
          uint64_t v237 = sub_23309B300();
          uint64_t v238 = *(void *)(v237 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48))(v236, 1, v237))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v235, v236, *(void *)(*(void *)(v239 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v238 + 32))(v235, v236, v237);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v238 + 56))(v235, 0, 1, v237);
          }
          *(_OWORD *)&v231[*(int *)(v22 + 32)] = *(_OWORD *)&v232[*(int *)(v22 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v380[7])(v231, 0, 1, v22);
        }
        *(void *)&a1[v18[14]] = *(void *)&a2[v18[14]];
        *(void *)&a1[v18[15]] = *(void *)&a2[v18[15]];
        *(_OWORD *)&a1[v18[16]] = *(_OWORD *)&a2[v18[16]];
        goto LABEL_186;
      case 4u:
        long long v25 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v25;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        uint64_t v26 = *((void *)a2 + 12);
        *((void *)a1 + 11) = *((void *)a2 + 11);
        *((void *)a1 + 12) = v26;
        uint64_t v27 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v28 = v27[11];
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        uint64_t v31 = type metadata accessor for FHIRDateTime();
        uint64_t v381 = *(void **)(v31 - 8);
        __dst = (unsigned int (*)(char *, uint64_t, uint64_t))v381[6];
        if (__dst(v30, 1, v31))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          *uint64_t v29 = *v30;
          *((void *)v29 + 1) = *((void *)v30 + 1);
          *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
          *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
          *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
          *((void *)v29 + 7) = *((void *)v30 + 7);
          uint64_t v371 = v31;
          uint64_t v61 = *(int *)(v31 + 28);
          long long v62 = &v29[v61];
          long long v63 = &v30[v61];
          uint64_t v64 = sub_23309B300();
          uint64_t v65 = *(void *)(v64 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          uint64_t v31 = v371;
          *(_OWORD *)&v29[*(int *)(v371 + 32)] = *(_OWORD *)&v30[*(int *)(v371 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v381[7])(v29, 0, 1, v371);
        }
        *(_OWORD *)&a1[v27[12]] = *(_OWORD *)&a2[v27[12]];
        *(void *)&a1[v27[13]] = *(void *)&a2[v27[13]];
        *(void *)&a1[v27[14]] = *(void *)&a2[v27[14]];
        uint64_t v93 = v27[15];
        uint64_t v94 = &a1[v93];
        uint64_t v95 = &a2[v93];
        uint64_t v96 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v97 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v96 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v97)[6](v95, 1, v96))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
          uint64_t v347 = (void (**)(char *, void, uint64_t, uint64_t))v97;
          uint64_t v356 = v94;
          uint64_t v373 = v31;
          *(void *)uint64_t v94 = *(void *)v95;
          uint64_t v99 = *(int *)(v96 + 20);
          uint64_t v100 = &v94[v99];
          uint64_t v101 = &v95[v99];
          uint64_t v102 = type metadata accessor for Period();
          uint64_t v103 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v102 - 8);
          if (v103[6](v101, 1, v102))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
          }
          else
          {
            v336 = (void (**)(char *, void, uint64_t, uint64_t))v103;
            uint64_t v339 = v102;
            uint64_t v344 = v100;
            uint64_t v134 = v373;
            if (__dst(v101, 1, v373))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v100, v101, *(void *)(*(void *)(v135 - 8) + 64));
            }
            else
            {
              *uint64_t v100 = *v101;
              *((void *)v100 + 1) = *((void *)v101 + 1);
              *((_DWORD *)v100 + 4) = *((_DWORD *)v101 + 4);
              *(_OWORD *)(v100 + 24) = *(_OWORD *)(v101 + 24);
              *(_OWORD *)(v100 + 40) = *(_OWORD *)(v101 + 40);
              *((void *)v100 + 7) = *((void *)v101 + 7);
              uint64_t v190 = *(int *)(v373 + 28);
              uint64_t v191 = &v100[v190];
              uint64_t v192 = &v101[v190];
              uint64_t v193 = sub_23309B300();
              uint64_t v194 = *(void *)(v193 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v191, v192, *(void *)(*(void *)(v195 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v194 + 32))(v191, v192, v193);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
              }
              uint64_t v134 = v373;
              uint64_t v100 = v344;
              *(_OWORD *)&v344[*(int *)(v373 + 32)] = *(_OWORD *)&v101[*(int *)(v373 + 32)];
              ((void (*)(char *, void, uint64_t, uint64_t))v381[7])(v344, 0, 1, v373);
            }
            uint64_t v320 = *(int *)(v339 + 20);
            uint64_t v321 = &v100[v320];
            long long v322 = &v101[v320];
            if (__dst(v322, 1, v134))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v321, v322, *(void *)(*(void *)(v323 - 8) + 64));
              uint64_t v325 = v339;
              long long v324 = v344;
            }
            else
            {
              char *v321 = *v322;
              *((void *)v321 + 1) = *((void *)v322 + 1);
              *((_DWORD *)v321 + 4) = *((_DWORD *)v322 + 4);
              *(_OWORD *)(v321 + 24) = *(_OWORD *)(v322 + 24);
              *(_OWORD *)(v321 + 40) = *(_OWORD *)(v322 + 40);
              *((void *)v321 + 7) = *((void *)v322 + 7);
              uint64_t v326 = *(int *)(v134 + 28);
              uint64_t v327 = v321;
              uint64_t v328 = &v321[v326];
              uint64_t v329 = &v322[v326];
              uint64_t v330 = sub_23309B300();
              uint64_t v331 = *(void *)(v330 - 8);
              uint64_t v332 = v330;
              if ((*(unsigned int (**)(char *, uint64_t))(v331 + 48))(v329, 1))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v328, v329, *(void *)(*(void *)(v333 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v331 + 32))(v328, v329, v332);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v331 + 56))(v328, 0, 1, v332);
              }
              uint64_t v325 = v339;
              long long v324 = v344;
              *(_OWORD *)&v327[*(int *)(v373 + 32)] = *(_OWORD *)&v322[*(int *)(v373 + 32)];
              ((void (*)(char *, void, uint64_t))v381[7])(v327, 0, 1);
            }
            v336[7](v324, 0, 1, v325);
          }
          v347[7](v356, 0, 1, v96);
        }
        *(_OWORD *)&a1[v27[16]] = *(_OWORD *)&a2[v27[16]];
        goto LABEL_186;
      case 5u:
        long long v33 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v33;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *(void *)(a1 + 61) = *(void *)(a2 + 61);
        *((void *)a1 + 9) = *((void *)a2 + 9);
        uint64_t v34 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v35 = v34[10];
        uint64_t v36 = &a1[v35];
        long long v37 = &a2[v35];
        uint64_t v38 = type metadata accessor for FHIRDateTime();
        uint64_t v39 = *(void **)(v38 - 8);
        long long v40 = (unsigned int (*)(void, void, void))v39[6];
        if (v40(v37, 1, v38))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          uint64_t v354 = v40;
          *uint64_t v36 = *v37;
          *((void *)v36 + 1) = *((void *)v37 + 1);
          *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
          *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 40);
          *((void *)v36 + 7) = *((void *)v37 + 7);
          uint64_t v67 = *(int *)(v38 + 28);
          v372 = &v36[v67];
          uint64_t v383 = v39;
          uint64_t v68 = &v37[v67];
          uint64_t v69 = sub_23309B300();
          uint64_t v70 = *(void *)(v69 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v372, v68, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v372, v68, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v372, 0, 1, v69);
          }
          uint64_t v39 = v383;
          long long v40 = v354;
          *(_OWORD *)&v36[*(int *)(v38 + 32)] = *(_OWORD *)&v37[*(int *)(v38 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v383[7])(v36, 0, 1, v38);
        }
        *(void *)&a1[v34[11]] = *(void *)&a2[v34[11]];
        uint64_t v105 = v34[12];
        uint64_t v106 = &a1[v105];
        uint64_t v107 = &a2[v105];
        if (v40(&a2[v105], 1, v38))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
        }
        else
        {
          uint64_t v384 = (void (**)(char *, void, uint64_t, uint64_t))v39;
          *uint64_t v106 = *v107;
          *((void *)v106 + 1) = *((void *)v107 + 1);
          *((_DWORD *)v106 + 4) = *((_DWORD *)v107 + 4);
          *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
          *(_OWORD *)(v106 + 40) = *(_OWORD *)(v107 + 40);
          *((void *)v106 + 7) = *((void *)v107 + 7);
          uint64_t v109 = *(int *)(v38 + 28);
          uint64_t v110 = &v106[v109];
          uint64_t v111 = &v107[v109];
          uint64_t v112 = sub_23309B300();
          uint64_t v113 = *(void *)(v112 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v110, v111, v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
          }
          *(_OWORD *)&v106[*(int *)(v38 + 32)] = *(_OWORD *)&v107[*(int *)(v38 + 32)];
          v384[7](v106, 0, 1, v38);
        }
        uint64_t v136 = v34[13];
        long long v137 = &a1[v136];
        uint64_t v138 = &a2[v136];
        *(_OWORD *)long long v137 = *(_OWORD *)v138;
        *((void *)v137 + 2) = *((void *)v138 + 2);
        uint64_t v139 = v34[14];
        uint64_t v140 = &a1[v139];
        long long v141 = &a2[v139];
        uint64_t v142 = type metadata accessor for Reference();
        uint64_t v143 = *(void *)(v142 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
        }
        else
        {
          long long v145 = *((_OWORD *)v141 + 1);
          *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
          *((_OWORD *)v140 + 1) = v145;
          uint64_t v146 = *(int *)(v142 + 24);
          uint64_t v147 = &v140[v146];
          uint64_t v148 = &v141[v146];
          uint64_t v149 = type metadata accessor for Identifier();
          uint64_t v150 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v149 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v150)[6](v148, 1, v149))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
          }
          else
          {
            __dstd = (void (**)(char *, void, uint64_t, uint64_t))v150;
            long long v159 = *((_OWORD *)v148 + 1);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
            *((_OWORD *)v147 + 1) = v159;
            *((void *)v147 + 4) = *((void *)v148 + 4);
            uint64_t v160 = *(int *)(v149 + 24);
            uint64_t v385 = &v147[v160];
            long long v161 = &v148[v160];
            uint64_t v162 = sub_23309AF80();
            uint64_t v359 = *(void *)(v162 - 8);
            uint64_t v375 = v161;
            uint64_t v163 = v161;
            uint64_t v164 = v162;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v359 + 48))(v163, 1, v162))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v385, v375, *(void *)(*(void *)(v165 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, const void *, uint64_t))(v359 + 32))(v385, v375, v164);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v359 + 56))(v385, 0, 1, v164);
            }
            *(_OWORD *)&v147[*(int *)(v149 + 28)] = *(_OWORD *)&v148[*(int *)(v149 + 28)];
            __dstd[7](v147, 0, 1, v149);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
        }
        a1[v34[15]] = a2[v34[15]];
        *(_OWORD *)&a1[v34[16]] = *(_OWORD *)&a2[v34[16]];
        *(void *)&a1[v34[17]] = *(void *)&a2[v34[17]];
        a1[v34[18]] = a2[v34[18]];
        uint64_t v196 = v34[19];
        uint64_t v197 = &a1[v196];
        uint64_t v198 = &a2[v196];
        *((void *)v197 + 6) = *((void *)v198 + 6);
        long long v199 = *((_OWORD *)v198 + 2);
        long long v200 = *(_OWORD *)v198;
        *((_OWORD *)v197 + 1) = *((_OWORD *)v198 + 1);
        *((_OWORD *)v197 + 2) = v199;
        *(_OWORD *)uint64_t v197 = v200;
        *(_OWORD *)&a1[v34[20]] = *(_OWORD *)&a2[v34[20]];
        goto LABEL_186;
      case 6u:
        long long v42 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v42;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((void *)a1 + 10) = *((void *)a2 + 10);
        uint64_t v43 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v44 = v43[10];
        uint64_t v45 = &a1[v44];
        uint64_t v46 = &a2[v44];
        uint64_t v47 = type metadata accessor for FHIRDateTime();
        uint64_t v382 = *(void **)(v47 - 8);
        uint64_t v48 = (unsigned int (*)(void, void, void))v382[6];
        __dsta = v48;
        if (v48(v46, 1, v47))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          char *v45 = *v46;
          *((void *)v45 + 1) = *((void *)v46 + 1);
          *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
          *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
          *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
          *((void *)v45 + 7) = *((void *)v46 + 7);
          uint64_t v72 = *(int *)(v47 + 28);
          uint64_t v73 = &v45[v72];
          uint64_t v74 = &v46[v72];
          uint64_t v75 = sub_23309B300();
          uint64_t v76 = *(void *)(v75 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v73, v74, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          }
          uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
          *(_OWORD *)&v45[*(int *)(v47 + 32)] = *(_OWORD *)&v46[*(int *)(v47 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v45, 0, 1, v47);
        }
        uint64_t v115 = v43[11];
        uint64_t v116 = &a1[v115];
        uint64_t v117 = &a2[v115];
        if (v48(&a2[v115], 1, v47))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          *uint64_t v116 = *v117;
          *((void *)v116 + 1) = *((void *)v117 + 1);
          *((_DWORD *)v116 + 4) = *((_DWORD *)v117 + 4);
          *(_OWORD *)(v116 + 24) = *(_OWORD *)(v117 + 24);
          *(_OWORD *)(v116 + 40) = *(_OWORD *)(v117 + 40);
          *((void *)v116 + 7) = *((void *)v117 + 7);
          uint64_t v119 = *(int *)(v47 + 28);
          uint64_t v120 = &v116[v119];
          uint64_t v121 = &v117[v119];
          uint64_t v122 = sub_23309B300();
          uint64_t v123 = *(void *)(v122 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v120, v121, v122);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
          }
          uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
          *(_OWORD *)&v116[*(int *)(v47 + 32)] = *(_OWORD *)&v117[*(int *)(v47 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v116, 0, 1, v47);
        }
        uint64_t v152 = v43[12];
        uint64_t v153 = &a1[v152];
        uint64_t v154 = &a2[v152];
        uint64_t v155 = type metadata accessor for Period();
        uint64_t v156 = *(void *)(v155 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v153, v154, *(void *)(*(void *)(v157 - 8) + 64));
        }
        else
        {
          uint64_t v358 = v156;
          if (v48(v154, 1, v47))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v153, v154, *(void *)(*(void *)(v158 - 8) + 64));
          }
          else
          {
            *uint64_t v153 = *v154;
            *((void *)v153 + 1) = *((void *)v154 + 1);
            *((_DWORD *)v153 + 4) = *((_DWORD *)v154 + 4);
            *(_OWORD *)(v153 + 24) = *(_OWORD *)(v154 + 24);
            *(_OWORD *)(v153 + 40) = *(_OWORD *)(v154 + 40);
            *((void *)v153 + 7) = *((void *)v154 + 7);
            uint64_t v166 = *(int *)(v47 + 28);
            uint64_t v348 = &v153[v166];
            uint64_t v167 = &v154[v166];
            uint64_t v168 = sub_23309B300();
            uint64_t v169 = *(void *)(v168 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v348, v167, *(void *)(*(void *)(v170 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v169 + 32))(v348, v167, v168);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v348, 0, 1, v168);
            }
            *(_OWORD *)&v153[*(int *)(v47 + 32)] = *(_OWORD *)&v154[*(int *)(v47 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v153, 0, 1, v47);
            uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
          }
          uint64_t v201 = *(int *)(v155 + 20);
          uint64_t v202 = &v153[v201];
          uint64_t v203 = &v154[v201];
          if (v48(v203, 1, v47))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v202, v203, *(void *)(*(void *)(v204 - 8) + 64));
          }
          else
          {
            char *v202 = *v203;
            *((void *)v202 + 1) = *((void *)v203 + 1);
            *((_DWORD *)v202 + 4) = *((_DWORD *)v203 + 4);
            *(_OWORD *)(v202 + 24) = *(_OWORD *)(v203 + 24);
            *(_OWORD *)(v202 + 40) = *(_OWORD *)(v203 + 40);
            *((void *)v202 + 7) = *((void *)v203 + 7);
            uint64_t v205 = *(int *)(v47 + 28);
            uint64_t v350 = &v202[v205];
            uint64_t v206 = &v203[v205];
            uint64_t v207 = sub_23309B300();
            uint64_t v340 = *(void *)(v207 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v340 + 48))(v206, 1, v207))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v350, v206, *(void *)(*(void *)(v208 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v340 + 32))(v350, v206, v207);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v340 + 56))(v350, 0, 1, v207);
            }
            *(_OWORD *)&v202[*(int *)(v47 + 32)] = *(_OWORD *)&v203[*(int *)(v47 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v202, 0, 1, v47);
            uint64_t v48 = (unsigned int (*)(void, void, void))__dsta;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v358 + 56))(v153, 0, 1, v155);
        }
        uint64_t v240 = v43[13];
        uint64_t v241 = &a1[v240];
        uint64_t v242 = &a2[v240];
        if (v48(&a2[v240], 1, v47))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
        }
        else
        {
          *uint64_t v241 = *v242;
          *((void *)v241 + 1) = *((void *)v242 + 1);
          *((_DWORD *)v241 + 4) = *((_DWORD *)v242 + 4);
          *(_OWORD *)(v241 + 24) = *(_OWORD *)(v242 + 24);
          *(_OWORD *)(v241 + 40) = *(_OWORD *)(v242 + 40);
          *((void *)v241 + 7) = *((void *)v242 + 7);
          uint64_t v244 = *(int *)(v47 + 28);
          uint64_t v245 = &v241[v244];
          uint64_t v246 = &v242[v244];
          uint64_t v247 = sub_23309B300();
          uint64_t v248 = *(void *)(v247 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v245, v246, v247);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v248 + 56))(v245, 0, 1, v247);
          }
          *(_OWORD *)&v241[*(int *)(v47 + 32)] = *(_OWORD *)&v242[*(int *)(v47 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v382[7])(v241, 0, 1, v47);
        }
        *(void *)&a1[v43[14]] = *(void *)&a2[v43[14]];
        *(void *)&a1[v43[15]] = *(void *)&a2[v43[15]];
        *(_OWORD *)&a1[v43[16]] = *(_OWORD *)&a2[v43[16]];
        uint64_t v250 = v43[17];
        uint64_t v251 = &a1[v250];
        uint64_t v252 = &a2[v250];
        *((void *)v251 + 2) = *((void *)v252 + 2);
        *(_OWORD *)uint64_t v251 = *(_OWORD *)v252;
        uint64_t v253 = v43[18];
        uint64_t v254 = &a1[v253];
        uint64_t v255 = &a2[v253];
        uint64_t v256 = type metadata accessor for Quantity();
        uint64_t v257 = *(void *)(v256 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v255, 1, v256))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v254, v255, *(void *)(*(void *)(v258 - 8) + 64));
        }
        else
        {
          *(_OWORD *)uint64_t v254 = *(_OWORD *)v255;
          *(void *)(v254 + 13) = *(void *)(v255 + 13);
          *(_OWORD *)(v254 + 24) = *(_OWORD *)(v255 + 24);
          *(_OWORD *)(v254 + 40) = *(_OWORD *)(v255 + 40);
          uint64_t v259 = *(int *)(v256 + 28);
          long long v386 = &v254[v259];
          uint64_t v260 = &v255[v259];
          uint64_t v261 = sub_23309AF80();
          uint64_t v262 = *(void *)(v261 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v260, 1, v261))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v386, v260, *(void *)(*(void *)(v263 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v386, v260, v261);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v386, 0, 1, v261);
          }
          *(_OWORD *)&v254[*(int *)(v256 + 32)] = *(_OWORD *)&v255[*(int *)(v256 + 32)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v257 + 56))(v254, 0, 1, v256);
        }
        *(void *)&a1[v43[19]] = *(void *)&a2[v43[19]];
        *(_OWORD *)&a1[v43[20]] = *(_OWORD *)&a2[v43[20]];
LABEL_186:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ResourceProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ResourceProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_232ED8074()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_232ED8084()
{
  uint64_t result = type metadata accessor for ModelsR4.Condition(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ModelsR4.DiagnosticReport(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ModelsR4.DocumentReference(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for ModelsR4.Immunization(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for ModelsR4.Observation(319);
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t destroy for ModelsR4.Binary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.Binary(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.Binary(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for ModelsR4.Binary(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Binary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Binary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Binary()
{
  return &type metadata for ModelsR4.Binary;
}

uint64_t destroy for ModelsR4.Bundle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.Bundle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.Bundle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ModelsR4.Bundle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Bundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle()
{
  return &type metadata for ModelsR4.Bundle;
}

void *initializeBufferWithCopyOfBuffer for ModelsR4.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  long long v3 = a2;
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for ModelsR4.ResourceProxy(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v722 = v9;
      v724 = v10;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v22 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v22;
          uint64_t v23 = v10[3];
          uint64_t v24 = v10[4];
          v9[2] = v10[2];
          v9[3] = v23;
          v9[4] = v24;
          swift_bridgeObjectRetain();
          break;
        case 2u:
          uint64_t v25 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v25;
          uint64_t v26 = v10;
          uint64_t v27 = v10[2];
          uint64_t v28 = v10[3];
          v9[2] = v27;
          v9[3] = v28;
          uint64_t v29 = v26[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v29 != 1) {
            swift_bridgeObjectRetain();
          }
          v9[4] = v29;
          uint64_t v30 = v724;
          uint64_t v31 = v724[6];
          if (v31 == 1)
          {
            *(_OWORD *)(v9 + 5) = *(_OWORD *)(v724 + 5);
            v9[7] = v724[7];
          }
          else
          {
            v9[5] = v724[5];
            v9[6] = v31;
            v9[7] = v724[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v101 = v724[9];
          if (v101 == 1)
          {
            *((_OWORD *)v9 + 4) = *((_OWORD *)v724 + 4);
            v9[10] = v724[10];
          }
          else
          {
            v9[8] = v724[8];
            v9[9] = v101;
            v9[10] = v724[10];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          v9[11] = v724[11];
          uint64_t v104 = v724[13];
          swift_bridgeObjectRetain();
          if (v104 == 1)
          {
            *((_OWORD *)v9 + 6) = *((_OWORD *)v724 + 6);
            v9[14] = v724[14];
          }
          else
          {
            v9[12] = v724[12];
            v9[13] = v104;
            v9[14] = v724[14];
            swift_bridgeObjectRetain();
            uint64_t v30 = v724;
            swift_bridgeObjectRetain();
          }
          uint64_t v105 = v30[16];
          if (v105 == 1)
          {
            *(_OWORD *)(v9 + 15) = *(_OWORD *)(v30 + 15);
            v9[17] = v30[17];
          }
          else
          {
            v9[15] = v30[15];
            v9[16] = v105;
            v9[17] = v30[17];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          v9[18] = v30[18];
          v701 = (int *)type metadata accessor for ModelsR4.Condition(0);
          uint64_t v106 = v701[13];
          uint64_t v107 = (char *)v9 + v106;
          uint64_t v108 = (char *)v30 + v106;
          uint64_t v109 = type metadata accessor for FHIRDateTime();
          v656 = *(void **)(v109 - 8);
          uint64_t v110 = (unsigned int (*)(unsigned char *, uint64_t, int *))v656[6];
          swift_bridgeObjectRetain();
          v671 = v110;
          uint64_t v690 = (int *)v109;
          v711 = v3;
          uint64_t v721 = v6;
          uint64_t v716 = v12;
          if (v110(v108, 1, (int *)v109))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v107, v108, *(void *)(*(void *)(v111 - 8) + 64));
          }
          else
          {
            *uint64_t v107 = *v108;
            *((void *)v107 + 1) = *((void *)v108 + 1);
            *((_DWORD *)v107 + 4) = *((_DWORD *)v108 + 4);
            uint64_t v120 = *((void *)v108 + 7);
            if (v120 == 1)
            {
              long long v121 = *(_OWORD *)(v108 + 40);
              *(_OWORD *)(v107 + 24) = *(_OWORD *)(v108 + 24);
              *(_OWORD *)(v107 + 40) = v121;
              *((void *)v107 + 7) = *((void *)v108 + 7);
            }
            else
            {
              v107[24] = v108[24];
              *(_WORD *)(v107 + 25) = *(_WORD *)(v108 + 25);
              *(_OWORD *)(v107 + 28) = *(_OWORD *)(v108 + 28);
              *((_DWORD *)v107 + 11) = *((_DWORD *)v108 + 11);
              *((void *)v107 + 6) = *((void *)v108 + 6);
              *((void *)v107 + 7) = v120;
              swift_bridgeObjectRetain();
            }
            uint64_t v145 = *(int *)(v109 + 28);
            uint64_t v146 = &v107[v145];
            uint64_t v147 = &v108[v145];
            uint64_t v148 = sub_23309B300();
            uint64_t v149 = *(void *)(v148 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v146, v147, *(void *)(*(void *)(v150 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v149 + 16))(v146, v147, v148);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
            }
            uint64_t v225 = v690[8];
            long long v226 = &v107[v225];
            uint64_t v227 = &v108[v225];
            uint64_t v228 = v227[1];
            *long long v226 = *v227;
            v226[1] = v228;
            uint64_t v229 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
            swift_bridgeObjectRetain();
            v229(v107, 0, 1, v690);
            uint64_t v9 = v722;
          }
          uint64_t v230 = v701[14];
          uint64_t v231 = (char *)v9 + v230;
          uint64_t v232 = v724;
          uint64_t v233 = (char *)v724 + v230;
          uint64_t v234 = type metadata accessor for Period();
          v645 = *(void **)(v234 - 8);
          __dstd = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v645[6];
          uint64_t v661 = (int *)v234;
          if (__dstd(v233, 1, v234))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v231, v233, *(void *)(*(void *)(v235 - 8) + 64));
          }
          else
          {
            if (v671(v233, 1, v690))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v231, v233, *(void *)(*(void *)(v236 - 8) + 64));
              uint64_t v237 = v690;
            }
            else
            {
              *uint64_t v231 = *v233;
              *((void *)v231 + 1) = *((void *)v233 + 1);
              *((_DWORD *)v231 + 4) = *((_DWORD *)v233 + 4);
              uint64_t v284 = *((void *)v233 + 7);
              if (v284 == 1)
              {
                long long v285 = *(_OWORD *)(v233 + 40);
                *(_OWORD *)(v231 + 24) = *(_OWORD *)(v233 + 24);
                *(_OWORD *)(v231 + 40) = v285;
                *((void *)v231 + 7) = *((void *)v233 + 7);
              }
              else
              {
                v231[24] = v233[24];
                *(_WORD *)(v231 + 25) = *(_WORD *)(v233 + 25);
                *(_OWORD *)(v231 + 28) = *(_OWORD *)(v233 + 28);
                *((_DWORD *)v231 + 11) = *((_DWORD *)v233 + 11);
                *((void *)v231 + 6) = *((void *)v233 + 6);
                *((void *)v231 + 7) = v284;
                swift_bridgeObjectRetain();
              }
              uint64_t v296 = v690[7];
              long long v297 = &v231[v296];
              uint64_t v298 = &v233[v296];
              uint64_t v299 = sub_23309B300();
              uint64_t v300 = *(void *)(v299 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v300 + 48))(v298, 1, v299))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v297, v298, *(void *)(*(void *)(v301 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v300 + 16))(v297, v298, v299);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
              }
              uint64_t v237 = v690;
              uint64_t v332 = v690[8];
              uint64_t v333 = &v231[v332];
              uint64_t v334 = &v233[v332];
              uint64_t v335 = v334[1];
              void *v333 = *v334;
              v333[1] = v335;
              v336 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
              swift_bridgeObjectRetain();
              v336(v231, 0, 1, v690);
              uint64_t v9 = v722;
              uint64_t v234 = (uint64_t)v661;
            }
            uint64_t v337 = *(int *)(v234 + 20);
            uint64_t v338 = &v231[v337];
            uint64_t v339 = &v233[v337];
            if (v671(v339, 1, v237))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v338, v339, *(void *)(*(void *)(v340 - 8) + 64));
            }
            else
            {
              unsigned char *v338 = *v339;
              *((void *)v338 + 1) = *((void *)v339 + 1);
              *((_DWORD *)v338 + 4) = *((_DWORD *)v339 + 4);
              uint64_t v341 = *((void *)v339 + 7);
              if (v341 == 1)
              {
                long long v342 = *(_OWORD *)(v339 + 40);
                *(_OWORD *)(v338 + 24) = *(_OWORD *)(v339 + 24);
                *(_OWORD *)(v338 + 40) = v342;
                *((void *)v338 + 7) = *((void *)v339 + 7);
              }
              else
              {
                v338[24] = v339[24];
                *(_WORD *)(v338 + 25) = *(_WORD *)(v339 + 25);
                *(_OWORD *)(v338 + 28) = *(_OWORD *)(v339 + 28);
                *((_DWORD *)v338 + 11) = *((_DWORD *)v339 + 11);
                *((void *)v338 + 6) = *((void *)v339 + 6);
                *((void *)v338 + 7) = v341;
                swift_bridgeObjectRetain();
              }
              uint64_t v343 = v690[7];
              uint64_t v344 = &v338[v343];
              uint64_t v345 = &v339[v343];
              uint64_t v346 = sub_23309B300();
              uint64_t v347 = *(void *)(v346 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v347 + 48))(v345, 1, v346))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v344, v345, *(void *)(*(void *)(v348 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v347 + 16))(v344, v345, v346);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v347 + 56))(v344, 0, 1, v346);
              }
              uint64_t v411 = v690[8];
              uint64_t v412 = &v338[v411];
              uint64_t v413 = &v339[v411];
              uint64_t v414 = v413[1];
              void *v412 = *v413;
              v412[1] = v414;
              uint64_t v415 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
              swift_bridgeObjectRetain();
              v415(v338, 0, 1, v690);
              uint64_t v9 = v722;
            }
            ((void (*)(unsigned char *, void, uint64_t, int *))v645[7])(v231, 0, 1, v661);
            uint64_t v232 = v724;
          }
          uint64_t v416 = v701[15];
          uint64_t v417 = (void *)((char *)v9 + v416);
          v418 = (void *)((char *)v232 + v416);
          uint64_t v419 = v418[1];
          void *v417 = *v418;
          v417[1] = v419;
          uint64_t v420 = v701[16];
          uint64_t v421 = (char *)v9 + v420;
          uint64_t v422 = (char *)v232 + v420;
          swift_bridgeObjectRetain();
          v696 = v4;
          if (v671(v422, 1, v690))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v421, v422, *(void *)(*(void *)(v423 - 8) + 64));
          }
          else
          {
            unsigned char *v421 = *v422;
            *((void *)v421 + 1) = *((void *)v422 + 1);
            *((_DWORD *)v421 + 4) = *((_DWORD *)v422 + 4);
            uint64_t v424 = *((void *)v422 + 7);
            if (v424 == 1)
            {
              long long v425 = *(_OWORD *)(v422 + 40);
              *(_OWORD *)(v421 + 24) = *(_OWORD *)(v422 + 24);
              *(_OWORD *)(v421 + 40) = v425;
              *((void *)v421 + 7) = *((void *)v422 + 7);
            }
            else
            {
              v421[24] = v422[24];
              *(_WORD *)(v421 + 25) = *(_WORD *)(v422 + 25);
              *(_OWORD *)(v421 + 28) = *(_OWORD *)(v422 + 28);
              *((_DWORD *)v421 + 11) = *((_DWORD *)v422 + 11);
              *((void *)v421 + 6) = *((void *)v422 + 6);
              *((void *)v421 + 7) = v424;
              swift_bridgeObjectRetain();
            }
            uint64_t v426 = v690[7];
            uint64_t v427 = &v421[v426];
            uint64_t v428 = &v422[v426];
            uint64_t v429 = sub_23309B300();
            uint64_t v430 = *(void *)(v429 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v430 + 48))(v428, 1, v429))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v427, v428, *(void *)(*(void *)(v431 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v430 + 16))(v427, v428, v429);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v430 + 56))(v427, 0, 1, v429);
            }
            uint64_t v432 = v690[8];
            uint64_t v433 = &v421[v432];
            uint64_t v434 = &v422[v432];
            uint64_t v435 = v434[1];
            void *v433 = *v434;
            v433[1] = v435;
            uint64_t v436 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
            swift_bridgeObjectRetain();
            v436(v421, 0, 1, v690);
            uint64_t v9 = v722;
          }
          uint64_t v437 = v701[17];
          uint64_t v438 = (char *)v9 + v437;
          v439 = v724;
          uint64_t v440 = (char *)v724 + v437;
          uint64_t v441 = v661;
          if (__dstd((unsigned char *)v724 + v437, 1, (uint64_t)v661))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v438, v440, *(void *)(*(void *)(v442 - 8) + 64));
            long long v3 = v711;
            uint64_t v6 = v721;
            uint64_t v443 = v690;
          }
          else
          {
            uint64_t v443 = v690;
            uint64_t v6 = v721;
            if (v671(v440, 1, v690))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v438, v440, *(void *)(*(void *)(v444 - 8) + 64));
            }
            else
            {
              unsigned char *v438 = *v440;
              *((void *)v438 + 1) = *((void *)v440 + 1);
              *((_DWORD *)v438 + 4) = *((_DWORD *)v440 + 4);
              uint64_t v445 = *((void *)v440 + 7);
              if (v445 == 1)
              {
                long long v446 = *(_OWORD *)(v440 + 40);
                *(_OWORD *)(v438 + 24) = *(_OWORD *)(v440 + 24);
                *(_OWORD *)(v438 + 40) = v446;
                *((void *)v438 + 7) = *((void *)v440 + 7);
              }
              else
              {
                v438[24] = v440[24];
                *(_WORD *)(v438 + 25) = *(_WORD *)(v440 + 25);
                *(_OWORD *)(v438 + 28) = *(_OWORD *)(v440 + 28);
                *((_DWORD *)v438 + 11) = *((_DWORD *)v440 + 11);
                *((void *)v438 + 6) = *((void *)v440 + 6);
                *((void *)v438 + 7) = v445;
                swift_bridgeObjectRetain();
              }
              uint64_t v447 = v690[7];
              uint64_t v448 = &v438[v447];
              uint64_t v449 = &v440[v447];
              uint64_t v450 = sub_23309B300();
              uint64_t v451 = *(void *)(v450 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v451 + 48))(v449, 1, v450))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v448, v449, *(void *)(*(void *)(v452 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v451 + 16))(v448, v449, v450);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v451 + 56))(v448, 0, 1, v450);
              }
              uint64_t v441 = v661;
              uint64_t v504 = v690[8];
              v505 = &v438[v504];
              uint64_t v506 = &v440[v504];
              uint64_t v507 = v506[1];
              void *v505 = *v506;
              v505[1] = v507;
              uint64_t v508 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
              swift_bridgeObjectRetain();
              v508(v438, 0, 1, v690);
              uint64_t v443 = v690;
              uint64_t v9 = v722;
            }
            uint64_t v509 = v441[5];
            uint64_t v510 = &v438[v509];
            uint64_t v511 = &v440[v509];
            if (v671(v511, 1, v443))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v510, v511, *(void *)(*(void *)(v512 - 8) + 64));
            }
            else
            {
              *uint64_t v510 = *v511;
              *((void *)v510 + 1) = *((void *)v511 + 1);
              *((_DWORD *)v510 + 4) = *((_DWORD *)v511 + 4);
              uint64_t v513 = *((void *)v511 + 7);
              if (v513 == 1)
              {
                long long v514 = *(_OWORD *)(v511 + 40);
                *(_OWORD *)(v510 + 24) = *(_OWORD *)(v511 + 24);
                *(_OWORD *)(v510 + 40) = v514;
                *((void *)v510 + 7) = *((void *)v511 + 7);
              }
              else
              {
                v510[24] = v511[24];
                *(_WORD *)(v510 + 25) = *(_WORD *)(v511 + 25);
                *(_OWORD *)(v510 + 28) = *(_OWORD *)(v511 + 28);
                *((_DWORD *)v510 + 11) = *((_DWORD *)v511 + 11);
                *((void *)v510 + 6) = *((void *)v511 + 6);
                *((void *)v510 + 7) = v513;
                swift_bridgeObjectRetain();
              }
              uint64_t v515 = v443[7];
              uint64_t v516 = &v510[v515];
              uint64_t v517 = &v511[v515];
              uint64_t v518 = sub_23309B300();
              uint64_t v519 = *(void *)(v518 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v519 + 48))(v517, 1, v518))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v516, v517, *(void *)(*(void *)(v520 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v519 + 16))(v516, v517, v518);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v519 + 56))(v516, 0, 1, v518);
              }
              uint64_t v9 = v722;
              uint64_t v521 = v690[8];
              uint64_t v522 = &v510[v521];
              uint64_t v523 = &v511[v521];
              uint64_t v524 = v523[1];
              *uint64_t v522 = *v523;
              v522[1] = v524;
              uint64_t v525 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
              swift_bridgeObjectRetain();
              v525(v510, 0, 1, v690);
              uint64_t v443 = v690;
            }
            ((void (*)(unsigned char *, void, uint64_t, int *))v645[7])(v438, 0, 1, v661);
            long long v3 = v711;
            v439 = v724;
          }
          uint64_t v526 = v701[18];
          v527 = (void *)((char *)v9 + v526);
          uint64_t v528 = (void *)((char *)v439 + v526);
          uint64_t v529 = v528[1];
          void *v527 = *v528;
          v527[1] = v529;
          uint64_t v530 = v701[19];
          long long v531 = (char *)v9 + v530;
          uint64_t v532 = (char *)v439 + v530;
          swift_bridgeObjectRetain();
          if (v671(v532, 1, v443))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v531, v532, *(void *)(*(void *)(v533 - 8) + 64));
            uint64_t v4 = v696;
          }
          else
          {
            *long long v531 = *v532;
            *((void *)v531 + 1) = *((void *)v532 + 1);
            *((_DWORD *)v531 + 4) = *((_DWORD *)v532 + 4);
            uint64_t v534 = *((void *)v532 + 7);
            uint64_t v4 = v696;
            if (v534 == 1)
            {
              long long v535 = *(_OWORD *)(v532 + 40);
              *(_OWORD *)(v531 + 24) = *(_OWORD *)(v532 + 24);
              *(_OWORD *)(v531 + 40) = v535;
              *((void *)v531 + 7) = *((void *)v532 + 7);
            }
            else
            {
              v531[24] = v532[24];
              *(_WORD *)(v531 + 25) = *(_WORD *)(v532 + 25);
              *(_OWORD *)(v531 + 28) = *(_OWORD *)(v532 + 28);
              *((_DWORD *)v531 + 11) = *((_DWORD *)v532 + 11);
              *((void *)v531 + 6) = *((void *)v532 + 6);
              *((void *)v531 + 7) = v534;
              swift_bridgeObjectRetain();
            }
            uint64_t v536 = v443[7];
            uint64_t v537 = &v531[v536];
            uint64_t v538 = &v532[v536];
            uint64_t v539 = sub_23309B300();
            uint64_t v540 = *(void *)(v539 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v540 + 48))(v538, 1, v539))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v537, v538, *(void *)(*(void *)(v541 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v540 + 16))(v537, v538, v539);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v540 + 56))(v537, 0, 1, v539);
            }
            long long v3 = v711;
            uint64_t v542 = v690[8];
            uint64_t v543 = &v531[v542];
            uint64_t v544 = &v532[v542];
            uint64_t v545 = v544[1];
            *uint64_t v543 = *v544;
            v543[1] = v545;
            long long v546 = (void (*)(unsigned char *, void, uint64_t, int *))v656[7];
            swift_bridgeObjectRetain();
            v546(v531, 0, 1, v690);
            uint64_t v9 = v722;
          }
          uint64_t v547 = v701[20];
          long long v548 = (void *)((char *)v9 + v547);
          uint64_t v549 = (void *)((char *)v724 + v547);
          uint64_t v550 = type metadata accessor for Reference();
          v693 = *(void **)(v550 - 8);
          uint64_t v551 = (unsigned int (*)(void, void, void))v693[6];
          if (v551(v549, 1, v550))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v548, v549, *(void *)(*(void *)(v552 - 8) + 64));
            uint64_t v553 = v724;
          }
          else
          {
            v675 = v551;
            uint64_t v554 = v549[1];
            *long long v548 = *v549;
            v548[1] = v554;
            uint64_t v555 = v549[3];
            v548[2] = v549[2];
            v548[3] = v555;
            v684 = (void *)v550;
            uint64_t v556 = *(int *)(v550 + 24);
            v657 = (void *)((char *)v548 + v556);
            uint64_t v557 = (void *)((char *)v549 + v556);
            uint64_t v558 = type metadata accessor for Identifier();
            uint64_t v559 = *(void *)(v558 - 8);
            uint64_t v560 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v559 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v560(v557, 1, v558))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v657, v557, *(void *)(*(void *)(v561 - 8) + 64));
              long long v3 = v711;
              uint64_t v6 = v721;
              uint64_t v9 = v722;
            }
            else
            {
              uint64_t v562 = v557[1];
              void *v657 = *v557;
              v657[1] = v562;
              uint64_t v563 = v557[3];
              swift_bridgeObjectRetain();
              if (v563 == 1)
              {
                *((_OWORD *)v657 + 1) = *((_OWORD *)v557 + 1);
                v657[4] = v557[4];
              }
              else
              {
                v657[2] = v557[2];
                v657[3] = v563;
                v657[4] = v557[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v6 = v721;
              uint64_t v564 = *(int *)(v558 + 24);
              uint64_t v646 = (char *)v657 + v564;
              uint64_t v565 = (char *)v557 + v564;
              uint64_t v566 = sub_23309AF80();
              uint64_t v567 = *(void *)(v566 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v567 + 48))(v565, 1, v566))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v646, v565, *(void *)(*(void *)(v568 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v567 + 16))(v646, v565, v566);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v567 + 56))(v646, 0, 1, v566);
              }
              long long v3 = v711;
              uint64_t v9 = v722;
              uint64_t v569 = *(int *)(v558 + 28);
              v570 = (void *)((char *)v657 + v569);
              uint64_t v571 = (void *)((char *)v557 + v569);
              uint64_t v572 = v571[1];
              void *v570 = *v571;
              v570[1] = v572;
              uint64_t v573 = *(void (**)(void *, void, uint64_t, uint64_t))(v559 + 56);
              swift_bridgeObjectRetain();
              v573(v657, 0, 1, v558);
            }
            uint64_t v550 = (uint64_t)v684;
            ((void (*)(void *, void, uint64_t, void *))v693[7])(v548, 0, 1, v684);
            uint64_t v553 = v724;
            uint64_t v551 = (unsigned int (*)(void, void, void))v675;
          }
          uint64_t v574 = v701[21];
          uint64_t v575 = (void *)((char *)v9 + v574);
          uint64_t v576 = (void *)((char *)v553 + v574);
          if (v551((char *)v553 + v574, 1, v550))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v575, v576, *(void *)(*(void *)(v577 - 8) + 64));
            uint64_t v12 = v716;
          }
          else
          {
            uint64_t v578 = v576[1];
            *uint64_t v575 = *v576;
            v575[1] = v578;
            uint64_t v579 = v576[3];
            v575[2] = v576[2];
            v575[3] = v579;
            uint64_t v676 = v575;
            v685 = (void *)v550;
            uint64_t v580 = *(int *)(v550 + 24);
            v581 = (void *)((char *)v575 + v580);
            uint64_t v582 = (void *)((char *)v576 + v580);
            uint64_t v583 = type metadata accessor for Identifier();
            uint64_t v584 = *(void **)(v583 - 8);
            uint64_t v585 = (unsigned int (*)(void *, uint64_t, uint64_t))v584[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v585(v582, 1, v583))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v581, v582, *(void *)(*(void *)(v586 - 8) + 64));
              long long v3 = v711;
              uint64_t v12 = v716;
              uint64_t v6 = v721;
              uint64_t v9 = v722;
            }
            else
            {
              uint64_t v587 = v582[1];
              void *v581 = *v582;
              v581[1] = v587;
              uint64_t v588 = v582[3];
              swift_bridgeObjectRetain();
              v667 = v584;
              if (v588 == 1)
              {
                *((_OWORD *)v581 + 1) = *((_OWORD *)v582 + 1);
                v581[4] = v582[4];
              }
              else
              {
                v581[2] = v582[2];
                v581[3] = v588;
                v581[4] = v582[4];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v9 = v722;
              uint64_t v589 = *(int *)(v583 + 24);
              v723 = (char *)v581 + v589;
              uint64_t v590 = (char *)v582 + v589;
              uint64_t v591 = sub_23309AF80();
              uint64_t v592 = *(void *)(v591 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v592 + 48))(v590, 1, v591))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v723, v590, *(void *)(*(void *)(v593 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v592 + 16))(v723, v590, v591);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v592 + 56))(v723, 0, 1, v591);
              }
              long long v3 = v711;
              uint64_t v12 = v716;
              uint64_t v594 = *(int *)(v583 + 28);
              v595 = (void *)((char *)v581 + v594);
              uint64_t v596 = (void *)((char *)v582 + v594);
              uint64_t v597 = v596[1];
              void *v595 = *v596;
              v595[1] = v597;
              v598 = (void (*)(void *, void, uint64_t, uint64_t))v667[7];
              swift_bridgeObjectRetain();
              v598(v581, 0, 1, v583);
              uint64_t v6 = v721;
            }
            ((void (*)(void *, void, uint64_t, void *))v693[7])(v676, 0, 1, v685);
          }
          *(void *)((char *)v9 + v701[22]) = *(void *)((char *)v724 + v701[22]);
          uint64_t v599 = v701[23];
          uint64_t v600 = (void *)((char *)v9 + v599);
          long long v601 = (void *)((char *)v724 + v599);
          uint64_t v602 = v601[1];
          *uint64_t v600 = *v601;
          v600[1] = v602;
          break;
        case 3u:
          v694 = v4;
          uint64_t v712 = v12;
          uint64_t v703 = v11;
          v707 = v3;
          uint64_t v32 = v9;
          uint64_t v33 = v10[1];
          *uint64_t v32 = *v10;
          v32[1] = v33;
          uint64_t v34 = v10[3];
          v32[2] = v10[2];
          v32[3] = v34;
          uint64_t v35 = v10[5];
          v32[4] = v10[4];
          v32[5] = v35;
          uint64_t v36 = v10[7];
          v32[6] = v10[6];
          v32[7] = v36;
          uint64_t v37 = v10[9];
          v32[8] = v10[8];
          v32[9] = v37;
          uint64_t v38 = v10[11];
          v32[10] = v10[10];
          v32[11] = v38;
          v32[12] = v10[12];
          v697 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
          uint64_t v39 = v697[11];
          __dst = (char *)v32 + v39;
          v658 = (char *)v10 + v39;
          uint64_t v40 = type metadata accessor for FHIRDateTime();
          v654 = *(void **)(v40 - 8);
          uint64_t v41 = (unsigned int (*)(unsigned char *, uint64_t, int *))v654[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v42 = v40;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v669 = v41;
          v686 = (int *)v40;
          if (v41(v658, 1, (int *)v40))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(__dst, v658, *(void *)(*(void *)(v43 - 8) + 64));
            uint64_t v9 = v722;
            uint64_t v11 = v703;
            uint64_t v12 = v712;
            uint64_t v44 = v10;
            uint64_t v4 = v694;
          }
          else
          {
            unsigned char *__dst = *v658;
            *((void *)__dst + 1) = *((void *)v658 + 1);
            *((_DWORD *)__dst + 4) = *((_DWORD *)v658 + 4);
            uint64_t v112 = *((void *)v658 + 7);
            if (v112 == 1)
            {
              long long v113 = *(_OWORD *)(v658 + 40);
              *(_OWORD *)(__dst + 24) = *(_OWORD *)(v658 + 24);
              *(_OWORD *)(__dst + 40) = v113;
              *((void *)__dst + 7) = *((void *)v658 + 7);
            }
            else
            {
              __dst[24] = v658[24];
              *(_WORD *)(__dst + 25) = *(_WORD *)(v658 + 25);
              *(_OWORD *)(__dst + 28) = *(_OWORD *)(v658 + 28);
              *((_DWORD *)__dst + 11) = *((_DWORD *)v658 + 11);
              *((void *)__dst + 6) = *((void *)v658 + 6);
              *((void *)__dst + 7) = v112;
              swift_bridgeObjectRetain();
            }
            uint64_t v11 = v703;
            uint64_t v12 = v712;
            uint64_t v44 = v10;
            uint64_t v4 = v694;
            uint64_t v122 = *(int *)(v42 + 28);
            v643 = &__dst[v122];
            uint64_t v123 = &v658[v122];
            uint64_t v124 = sub_23309B300();
            uint64_t v125 = *(void *)(v124 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v643, v123, *(void *)(*(void *)(v126 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v125 + 16))(v643, v123, v124);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v125 + 56))(v643, 0, 1, v124);
            }
            uint64_t v151 = v686[8];
            uint64_t v152 = &__dst[v151];
            uint64_t v153 = &v658[v151];
            uint64_t v154 = v153[1];
            *uint64_t v152 = *v153;
            v152[1] = v154;
            uint64_t v155 = (void (*)(unsigned char *, void, uint64_t, int *))v654[7];
            swift_bridgeObjectRetain();
            v155(__dst, 0, 1, v686);
            uint64_t v9 = v722;
          }
          uint64_t v156 = v697[12];
          uint64_t v157 = (char *)v9 + v156;
          uint64_t v158 = (char *)v44 + v156;
          uint64_t v159 = type metadata accessor for Period();
          uint64_t v160 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v159 - 8);
          if (v160[6](v158, 1, v159))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
          }
          else
          {
            __dstb = (void (**)(void *, void, uint64_t, uint64_t))v160;
            if (v669(v158, 1, v686))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v157, v158, *(void *)(*(void *)(v162 - 8) + 64));
              uint64_t v163 = v157;
              uint64_t v164 = v686;
            }
            else
            {
              unsigned char *v157 = *v158;
              *((void *)v157 + 1) = *((void *)v158 + 1);
              *((_DWORD *)v157 + 4) = *((_DWORD *)v158 + 4);
              uint64_t v238 = *((void *)v158 + 7);
              if (v238 == 1)
              {
                long long v239 = *(_OWORD *)(v158 + 40);
                *(_OWORD *)(v157 + 24) = *(_OWORD *)(v158 + 24);
                *(_OWORD *)(v157 + 40) = v239;
                *((void *)v157 + 7) = *((void *)v158 + 7);
              }
              else
              {
                v157[24] = v158[24];
                *(_WORD *)(v157 + 25) = *(_WORD *)(v158 + 25);
                *(_OWORD *)(v157 + 28) = *(_OWORD *)(v158 + 28);
                *((_DWORD *)v157 + 11) = *((_DWORD *)v158 + 11);
                *((void *)v157 + 6) = *((void *)v158 + 6);
                *((void *)v157 + 7) = v238;
                swift_bridgeObjectRetain();
              }
              uint64_t v290 = v686[7];
              uint64_t v664 = &v157[v290];
              uint64_t v291 = &v158[v290];
              uint64_t v292 = sub_23309B300();
              uint64_t v293 = *(void *)(v292 - 8);
              uint64_t v294 = v157;
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v293 + 48))(v291, 1, v292))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v664, v291, *(void *)(*(void *)(v295 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v293 + 16))(v664, v291, v292);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v293 + 56))(v664, 0, 1, v292);
              }
              uint64_t v164 = v686;
              uint64_t v315 = v686[8];
              uint64_t v163 = v294;
              uint64_t v316 = &v294[v315];
              uint64_t v317 = &v158[v315];
              uint64_t v318 = v317[1];
              void *v316 = *v317;
              v316[1] = v318;
              uint64_t v319 = (void (*)(unsigned char *, void, uint64_t, int *))v654[7];
              swift_bridgeObjectRetain();
              v319(v163, 0, 1, v686);
              uint64_t v9 = v722;
              uint64_t v12 = v712;
            }
            uint64_t v320 = *(int *)(v159 + 20);
            uint64_t v665 = v163;
            uint64_t v321 = &v163[v320];
            long long v322 = &v158[v320];
            if (v669(v322, 1, v164))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v321, v322, *(void *)(*(void *)(v323 - 8) + 64));
            }
            else
            {
              unsigned char *v321 = *v322;
              *((void *)v321 + 1) = *((void *)v322 + 1);
              *((_DWORD *)v321 + 4) = *((_DWORD *)v322 + 4);
              uint64_t v324 = *((void *)v322 + 7);
              if (v324 == 1)
              {
                long long v325 = *(_OWORD *)(v322 + 40);
                *(_OWORD *)(v321 + 24) = *(_OWORD *)(v322 + 24);
                *(_OWORD *)(v321 + 40) = v325;
                *((void *)v321 + 7) = *((void *)v322 + 7);
              }
              else
              {
                v321[24] = v322[24];
                *(_WORD *)(v321 + 25) = *(_WORD *)(v322 + 25);
                *(_OWORD *)(v321 + 28) = *(_OWORD *)(v322 + 28);
                *((_DWORD *)v321 + 11) = *((_DWORD *)v322 + 11);
                *((void *)v321 + 6) = *((void *)v322 + 6);
                *((void *)v321 + 7) = v324;
                swift_bridgeObjectRetain();
              }
              uint64_t v326 = v686[7];
              uint64_t v327 = &v321[v326];
              uint64_t v328 = &v322[v326];
              uint64_t v329 = sub_23309B300();
              uint64_t v330 = *(void *)(v329 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v330 + 48))(v328, 1, v329))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v327, v328, *(void *)(*(void *)(v331 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v330 + 16))(v327, v328, v329);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v330 + 56))(v327, 0, 1, v329);
              }
              uint64_t v9 = v722;
              uint64_t v386 = v686[8];
              long long v387 = &v321[v386];
              long long v388 = &v322[v386];
              uint64_t v389 = v388[1];
              *long long v387 = *v388;
              v387[1] = v389;
              uint64_t v390 = (void (*)(unsigned char *, void, uint64_t, int *))v654[7];
              swift_bridgeObjectRetain();
              v390(v321, 0, 1, v686);
              uint64_t v12 = v712;
            }
            __dstb[7](v665, 0, 1, v159);
          }
          uint64_t v391 = v697[13];
          uint64_t v392 = (char *)v9 + v391;
          uint64_t v393 = (char *)v724 + v391;
          long long v3 = v707;
          if (v669((unsigned char *)v724 + v391, 1, v686))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v392, v393, *(void *)(*(void *)(v394 - 8) + 64));
          }
          else
          {
            *uint64_t v392 = *v393;
            *((void *)v392 + 1) = *((void *)v393 + 1);
            *((_DWORD *)v392 + 4) = *((_DWORD *)v393 + 4);
            uint64_t v395 = *((void *)v393 + 7);
            if (v395 == 1)
            {
              long long v396 = *(_OWORD *)(v393 + 40);
              *(_OWORD *)(v392 + 24) = *(_OWORD *)(v393 + 24);
              *(_OWORD *)(v392 + 40) = v396;
              *((void *)v392 + 7) = *((void *)v393 + 7);
            }
            else
            {
              v392[24] = v393[24];
              *(_WORD *)(v392 + 25) = *(_WORD *)(v393 + 25);
              *(_OWORD *)(v392 + 28) = *(_OWORD *)(v393 + 28);
              *((_DWORD *)v392 + 11) = *((_DWORD *)v393 + 11);
              *((void *)v392 + 6) = *((void *)v393 + 6);
              *((void *)v392 + 7) = v395;
              swift_bridgeObjectRetain();
            }
            uint64_t v397 = v686[7];
            uint64_t v682 = &v392[v397];
            v398 = &v393[v397];
            uint64_t v399 = sub_23309B300();
            uint64_t v400 = *(void *)(v399 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v400 + 48))(v398, 1, v399))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v682, v398, *(void *)(*(void *)(v401 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v400 + 16))(v682, v398, v399);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v400 + 56))(v682, 0, 1, v399);
            }
            long long v3 = v707;
            uint64_t v402 = v686[8];
            uint64_t v403 = &v392[v402];
            long long v404 = &v393[v402];
            uint64_t v405 = v404[1];
            void *v403 = *v404;
            v403[1] = v405;
            long long v406 = (void (*)(unsigned char *, void, uint64_t, int *))v654[7];
            swift_bridgeObjectRetain();
            v406(v392, 0, 1, v686);
            uint64_t v9 = v722;
          }
          *(void *)((char *)v9 + v697[14]) = *(void *)((char *)v724 + v697[14]);
          *(void *)((char *)v9 + v697[15]) = *(void *)((char *)v724 + v697[15]);
          uint64_t v407 = v697[16];
          uint64_t v408 = (void *)((char *)v9 + v407);
          uint64_t v409 = (void *)((char *)v724 + v407);
          uint64_t v410 = v409[1];
          void *v408 = *v409;
          v408[1] = v410;
          goto LABEL_190;
        case 4u:
          uint64_t v704 = v11;
          v695 = v4;
          uint64_t v713 = v12;
          uint64_t v717 = v6;
          v708 = v3;
          uint64_t v45 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v45;
          uint64_t v46 = v10[3];
          v9[2] = v10[2];
          v9[3] = v46;
          uint64_t v47 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v47 != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v48 = v10[5];
          uint64_t v49 = v10[6];
          v9[4] = v47;
          v9[5] = v48;
          uint64_t v50 = v10[7];
          uint64_t v51 = v10[8];
          v9[6] = v49;
          v9[7] = v50;
          uint64_t v52 = v10[9];
          uint64_t v53 = v10[10];
          v9[8] = v51;
          v9[9] = v52;
          uint64_t v54 = v10;
          uint64_t v55 = v10[11];
          uint64_t v56 = v10[12];
          v9[10] = v53;
          v9[11] = v55;
          v9[12] = v56;
          v698 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
          uint64_t v57 = v698[11];
          v687 = (char *)v9 + v57;
          uint64_t v58 = (char *)v54 + v57;
          uint64_t v59 = type metadata accessor for FHIRDateTime();
          uint64_t v678 = *(void **)(v59 - 8);
          uint64_t v60 = (unsigned int (*)(unsigned char *, uint64_t, int *))v678[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v61 = v59;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v659 = v60;
          v655 = (int *)v59;
          if (v60(v58, 1, (int *)v59))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v687, v58, *(void *)(*(void *)(v62 - 8) + 64));
            long long v63 = v724;
            uint64_t v4 = v695;
          }
          else
          {
            unsigned char *v687 = *v58;
            *((void *)v687 + 1) = *((void *)v58 + 1);
            *((_DWORD *)v687 + 4) = *((_DWORD *)v58 + 4);
            uint64_t v114 = *((void *)v58 + 7);
            if (v114 == 1)
            {
              long long v115 = *(_OWORD *)(v58 + 40);
              *(_OWORD *)(v687 + 24) = *(_OWORD *)(v58 + 24);
              *(_OWORD *)(v687 + 40) = v115;
              *((void *)v687 + 7) = *((void *)v58 + 7);
            }
            else
            {
              v687[24] = v58[24];
              *(_WORD *)(v687 + 25) = *(_WORD *)(v58 + 25);
              *(_OWORD *)(v687 + 28) = *(_OWORD *)(v58 + 28);
              *((_DWORD *)v687 + 11) = *((_DWORD *)v58 + 11);
              *((void *)v687 + 6) = *((void *)v58 + 6);
              *((void *)v687 + 7) = v114;
              swift_bridgeObjectRetain();
            }
            uint64_t v4 = v695;
            uint64_t v127 = *(int *)(v61 + 28);
            uint64_t v128 = &v687[v127];
            uint64_t v129 = v58;
            uint64_t v130 = &v58[v127];
            uint64_t v131 = sub_23309B300();
            uint64_t v132 = *(void *)(v131 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v128, v130, *(void *)(*(void *)(v133 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v132 + 16))(v128, v130, v131);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v132 + 56))(v128, 0, 1, v131);
            }
            uint64_t v9 = v722;
            uint64_t v165 = *(int *)(v61 + 32);
            uint64_t v166 = &v687[v165];
            uint64_t v167 = &v129[v165];
            uint64_t v168 = v167[1];
            void *v166 = *v167;
            v166[1] = v168;
            uint64_t v169 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v678[7];
            swift_bridgeObjectRetain();
            v169(v687, 0, 1, v61);
            long long v63 = v724;
          }
          uint64_t v170 = v698[12];
          uint64_t v171 = (void *)((char *)v9 + v170);
          uint64_t v172 = (void *)((char *)v63 + v170);
          uint64_t v173 = v172[1];
          void *v171 = *v172;
          v171[1] = v173;
          *(void *)((char *)v9 + v698[13]) = *(void *)((char *)v63 + v698[13]);
          *(void *)((char *)v9 + v698[14]) = *(void *)((char *)v63 + v698[14]);
          uint64_t v174 = v698[15];
          uint64_t v175 = (void *)((char *)v9 + v174);
          uint64_t v176 = (void *)((char *)v63 + v174);
          uint64_t v177 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
          uint64_t v178 = *(void **)(v177 - 8);
          uint64_t v179 = (unsigned int (*)(void *, uint64_t, uint64_t))v178[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v179(v176, 1, v177))
          {
            sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
            memcpy(v175, v176, *(void *)(*(void *)(v180 - 8) + 64));
            long long v3 = v708;
            uint64_t v12 = v713;
            uint64_t v9 = v722;
            long long v181 = v724;
            uint64_t v11 = v704;
          }
          else
          {
            uint64_t v644 = (void (**)(void *, void, uint64_t, void *))v178;
            __dstc = v175;
            void *v175 = *v176;
            v691 = (void *)v177;
            uint64_t v182 = *(int *)(v177 + 20);
            uint64_t v183 = (char *)v175 + v182;
            uint64_t v184 = (char *)v176 + v182;
            uint64_t v185 = type metadata accessor for Period();
            uint64_t v186 = *(void *)(v185 - 8);
            long long v187 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v186 + 48);
            swift_bridgeObjectRetain();
            if (v187(v184, 1, v185))
            {
              sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
              memcpy(v183, v184, *(void *)(*(void *)(v188 - 8) + 64));
              long long v3 = v708;
              uint64_t v12 = v713;
              uint64_t v9 = v722;
              long long v181 = v724;
              uint64_t v190 = v644;
              uint64_t v189 = __dstc;
              uint64_t v11 = v704;
            }
            else
            {
              uint64_t v642 = v185;
              uint64_t v9 = v722;
              long long v181 = v724;
              uint64_t v11 = v704;
              if (v659(v184, 1, v655))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v183, v184, *(void *)(*(void *)(v240 - 8) + 64));
                uint64_t v241 = v655;
                uint64_t v12 = v713;
              }
              else
              {
                *uint64_t v183 = *v184;
                *((void *)v183 + 1) = *((void *)v184 + 1);
                *((_DWORD *)v183 + 4) = *((_DWORD *)v184 + 4);
                uint64_t v313 = *((void *)v184 + 7);
                if (v313 == 1)
                {
                  long long v314 = *(_OWORD *)(v184 + 40);
                  *(_OWORD *)(v183 + 24) = *(_OWORD *)(v184 + 24);
                  *(_OWORD *)(v183 + 40) = v314;
                  *((void *)v183 + 7) = *((void *)v184 + 7);
                }
                else
                {
                  v183[24] = v184[24];
                  *(_WORD *)(v183 + 25) = *(_WORD *)(v184 + 25);
                  *(_OWORD *)(v183 + 28) = *(_OWORD *)(v184 + 28);
                  *((_DWORD *)v183 + 11) = *((_DWORD *)v184 + 11);
                  *((void *)v183 + 6) = *((void *)v184 + 6);
                  *((void *)v183 + 7) = v313;
                  swift_bridgeObjectRetain();
                }
                uint64_t v609 = v655[7];
                v610 = &v183[v609];
                uint64_t v611 = &v184[v609];
                uint64_t v612 = sub_23309B300();
                uint64_t v613 = *(void *)(v612 - 8);
                if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v613 + 48))(v611, 1, v612))
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v610, v611, *(void *)(*(void *)(v614 - 8) + 64));
                }
                else
                {
                  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v613 + 16))(v610, v611, v612);
                  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v613 + 56))(v610, 0, 1, v612);
                }
                uint64_t v9 = v722;
                uint64_t v615 = v655[8];
                uint64_t v616 = &v183[v615];
                uint64_t v617 = &v184[v615];
                uint64_t v618 = v617[1];
                *uint64_t v616 = *v617;
                v616[1] = v618;
                uint64_t v241 = v655;
                uint64_t v619 = (void (*)(unsigned char *, void, uint64_t, int *))v678[7];
                swift_bridgeObjectRetain();
                v619(v183, 0, 1, v655);
                uint64_t v12 = v713;
                long long v181 = v724;
              }
              uint64_t v620 = *(int *)(v642 + 20);
              uint64_t v621 = &v183[v620];
              v622 = &v184[v620];
              if (v659(v622, 1, v241))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v621, v622, *(void *)(*(void *)(v623 - 8) + 64));
              }
              else
              {
                uint64_t v677 = v183;
                uint64_t v624 = v241;
                *uint64_t v621 = *v622;
                *((void *)v621 + 1) = *((void *)v622 + 1);
                *((_DWORD *)v621 + 4) = *((_DWORD *)v622 + 4);
                uint64_t v625 = *((void *)v622 + 7);
                if (v625 == 1)
                {
                  long long v626 = *(_OWORD *)(v622 + 40);
                  *(_OWORD *)(v621 + 24) = *(_OWORD *)(v622 + 24);
                  *(_OWORD *)(v621 + 40) = v626;
                  *((void *)v621 + 7) = *((void *)v622 + 7);
                }
                else
                {
                  v621[24] = v622[24];
                  *(_WORD *)(v621 + 25) = *(_WORD *)(v622 + 25);
                  *(_OWORD *)(v621 + 28) = *(_OWORD *)(v622 + 28);
                  *((_DWORD *)v621 + 11) = *((_DWORD *)v622 + 11);
                  *((void *)v621 + 6) = *((void *)v622 + 6);
                  *((void *)v621 + 7) = v625;
                  swift_bridgeObjectRetain();
                }
                uint64_t v627 = v241[7];
                uint64_t v668 = v621;
                uint64_t v628 = &v621[v627];
                uint64_t v629 = &v622[v627];
                uint64_t v630 = sub_23309B300();
                uint64_t v631 = *(void *)(v630 - 8);
                if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v631 + 48))(v629, 1, v630))
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v628, v629, *(void *)(*(void *)(v632 - 8) + 64));
                }
                else
                {
                  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v631 + 16))(v628, v629, v630);
                  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v631 + 56))(v628, 0, 1, v630);
                }
                uint64_t v9 = v722;
                uint64_t v633 = v624[8];
                uint64_t v634 = &v668[v633];
                v635 = &v622[v633];
                uint64_t v636 = v635[1];
                *(void *)uint64_t v634 = *v635;
                *((void *)v634 + 1) = v636;
                v637 = (void (*)(char *, void, uint64_t, int *))v678[7];
                swift_bridgeObjectRetain();
                v637(v668, 0, 1, v624);
                long long v181 = v724;
                uint64_t v183 = v677;
              }
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v642);
              long long v3 = v708;
              uint64_t v190 = v644;
              uint64_t v189 = __dstc;
            }
            v190[7](v189, 0, 1, v691);
          }
          uint64_t v638 = v698[16];
          uint64_t v639 = (void *)((char *)v9 + v638);
          uint64_t v640 = (void *)((char *)v181 + v638);
          uint64_t v641 = v640[1];
          *uint64_t v639 = *v640;
          v639[1] = v641;
          uint64_t v6 = v717;
          goto LABEL_281;
        case 5u:
          uint64_t v714 = v12;
          uint64_t v718 = v6;
          v709 = v3;
          uint64_t v64 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v64;
          uint64_t v65 = v10[3];
          v9[2] = v10[2];
          v9[3] = v65;
          uint64_t v66 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v66 != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v67 = v10[5];
          uint64_t v68 = v10[6];
          v9[4] = v66;
          v9[5] = v67;
          uint64_t v69 = v10[7];
          v9[6] = v68;
          v9[7] = v69;
          *(void *)((char *)v9 + 61) = *(void *)((char *)v10 + 61);
          v9[9] = v10[9];
          v699 = (int *)type metadata accessor for ModelsR4.Immunization(0);
          uint64_t v70 = v699[10];
          uint64_t v71 = (char *)v9 + v70;
          uint64_t v72 = (char *)v10 + v70;
          uint64_t v73 = type metadata accessor for FHIRDateTime();
          v688 = *(void **)(v73 - 8);
          uint64_t v74 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v688[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v74(v72, 1, v73))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            *uint64_t v71 = *v72;
            *((void *)v71 + 1) = *((void *)v72 + 1);
            *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
            uint64_t v116 = *((void *)v72 + 7);
            if (v116 == 1)
            {
              long long v117 = *(_OWORD *)(v72 + 40);
              *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
              *(_OWORD *)(v71 + 40) = v117;
              *((void *)v71 + 7) = *((void *)v72 + 7);
            }
            else
            {
              v71[24] = v72[24];
              *(_WORD *)(v71 + 25) = *(_WORD *)(v72 + 25);
              *(_OWORD *)(v71 + 28) = *(_OWORD *)(v72 + 28);
              *((_DWORD *)v71 + 11) = *((_DWORD *)v72 + 11);
              *((void *)v71 + 6) = *((void *)v72 + 6);
              *((void *)v71 + 7) = v116;
              swift_bridgeObjectRetain();
            }
            uint64_t v134 = *(int *)(v73 + 28);
            v672 = &v71[v134];
            uint64_t v135 = &v72[v134];
            uint64_t v136 = sub_23309B300();
            uint64_t v137 = *(void *)(v136 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v672, v135, *(void *)(*(void *)(v138 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v137 + 16))(v672, v135, v136);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v137 + 56))(v672, 0, 1, v136);
            }
            uint64_t v10 = v724;
            uint64_t v191 = *(int *)(v73 + 32);
            uint64_t v192 = &v71[v191];
            uint64_t v193 = &v72[v191];
            uint64_t v194 = v193[1];
            *uint64_t v192 = *v193;
            v192[1] = v194;
            uint64_t v195 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v688[7];
            swift_bridgeObjectRetain();
            v195(v71, 0, 1, v73);
          }
          *(void *)((char *)v722 + v699[11]) = *(void *)((char *)v10 + v699[11]);
          uint64_t v196 = v699[12];
          uint64_t v197 = (char *)v722 + v196;
          uint64_t v198 = (char *)v10 + v196;
          swift_bridgeObjectRetain();
          if (v74(v198, 1, v73))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v197, v198, *(void *)(*(void *)(v199 - 8) + 64));
          }
          else
          {
            *uint64_t v197 = *v198;
            *((void *)v197 + 1) = *((void *)v198 + 1);
            *((_DWORD *)v197 + 4) = *((_DWORD *)v198 + 4);
            uint64_t v200 = *((void *)v198 + 7);
            if (v200 == 1)
            {
              long long v201 = *(_OWORD *)(v198 + 40);
              *(_OWORD *)(v197 + 24) = *(_OWORD *)(v198 + 24);
              *(_OWORD *)(v197 + 40) = v201;
              *((void *)v197 + 7) = *((void *)v198 + 7);
            }
            else
            {
              v197[24] = v198[24];
              *(_WORD *)(v197 + 25) = *(_WORD *)(v198 + 25);
              *(_OWORD *)(v197 + 28) = *(_OWORD *)(v198 + 28);
              *((_DWORD *)v197 + 11) = *((_DWORD *)v198 + 11);
              *((void *)v197 + 6) = *((void *)v198 + 6);
              *((void *)v197 + 7) = v200;
              swift_bridgeObjectRetain();
            }
            uint64_t v202 = *(int *)(v73 + 28);
            uint64_t v203 = &v197[v202];
            uint64_t v204 = &v198[v202];
            uint64_t v205 = sub_23309B300();
            uint64_t v206 = *(void *)(v205 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v206 + 48))(v204, 1, v205))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v203, v204, *(void *)(*(void *)(v207 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v206 + 16))(v203, v204, v205);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v206 + 56))(v203, 0, 1, v205);
            }
            uint64_t v10 = v724;
            uint64_t v242 = *(int *)(v73 + 32);
            uint64_t v243 = &v197[v242];
            uint64_t v244 = &v198[v242];
            uint64_t v245 = v244[1];
            *uint64_t v243 = *v244;
            v243[1] = v245;
            uint64_t v246 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v688[7];
            swift_bridgeObjectRetain();
            v246(v197, 0, 1, v73);
          }
          uint64_t v247 = v699[13];
          uint64_t v248 = (void *)((char *)v722 + v247);
          uint64_t v249 = (void *)((char *)v10 + v247);
          uint64_t v250 = v249[1];
          void *v248 = *v249;
          v248[1] = v250;
          v248[2] = v249[2];
          uint64_t v251 = v699[14];
          uint64_t v252 = (void *)((char *)v722 + v251);
          uint64_t v253 = (void *)((char *)v10 + v251);
          uint64_t v254 = type metadata accessor for Reference();
          uint64_t v255 = *(void **)(v254 - 8);
          uint64_t v256 = (unsigned int (*)(void *, uint64_t, uint64_t))v255[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v256(v253, 1, v254))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v252, v253, *(void *)(*(void *)(v257 - 8) + 64));
            long long v3 = v709;
            uint64_t v258 = v724;
          }
          else
          {
            v680 = (void (**)(void *, void, uint64_t, uint64_t))v255;
            v692 = v252;
            uint64_t v259 = v253[1];
            *uint64_t v252 = *v253;
            v252[1] = v259;
            uint64_t v260 = v253[3];
            v252[2] = v253[2];
            v252[3] = v260;
            uint64_t v261 = *(int *)(v254 + 24);
            uint64_t v673 = (void *)((char *)v252 + v261);
            uint64_t v262 = (void *)((char *)v253 + v261);
            uint64_t v263 = type metadata accessor for Identifier();
            uint64_t v264 = *(void **)(v263 - 8);
            uint64_t v265 = (unsigned int (*)(void *, uint64_t, uint64_t))v264[6];
            uint64_t v266 = v262;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v265(v262, 1, v263))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v673, v262, *(void *)(*(void *)(v267 - 8) + 64));
              uint64_t v6 = v718;
              uint64_t v258 = v724;
              uint64_t v268 = v680;
            }
            else
            {
              __dstf = v264;
              uint64_t v286 = v262[1];
              void *v673 = *v262;
              v673[1] = v286;
              uint64_t v287 = v262[3];
              swift_bridgeObjectRetain();
              uint64_t v663 = (char *)v262;
              if (v287 == 1)
              {
                *((_OWORD *)v673 + 1) = *((_OWORD *)v262 + 1);
                v673[4] = v262[4];
              }
              else
              {
                v673[2] = v262[2];
                v673[3] = v287;
                v673[4] = v262[4];
                swift_bridgeObjectRetain();
                uint64_t v266 = v262;
                swift_bridgeObjectRetain();
              }
              uint64_t v6 = v718;
              uint64_t v268 = v680;
              uint64_t v302 = *(int *)(v263 + 24);
              uint64_t v681 = (char *)v673 + v302;
              uint64_t v303 = (char *)v266 + v302;
              uint64_t v304 = sub_23309AF80();
              uint64_t v305 = *(void *)(v304 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v305 + 48))(v303, 1, v304))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v681, v303, *(void *)(*(void *)(v306 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v305 + 16))(v681, v303, v304);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v305 + 56))(v681, 0, 1, v304);
              }
              uint64_t v258 = v724;
              uint64_t v349 = *(int *)(v263 + 28);
              uint64_t v350 = (void *)((char *)v673 + v349);
              uint64_t v351 = &v663[v349];
              uint64_t v352 = *((void *)v351 + 1);
              void *v350 = *(void *)v351;
              v350[1] = v352;
              uint64_t v353 = (void (*)(void *, void, uint64_t, uint64_t))__dstf[7];
              swift_bridgeObjectRetain();
              v353(v673, 0, 1, v263);
            }
            v268[7](v692, 0, 1, v254);
            long long v3 = v709;
          }
          uint64_t v9 = v722;
          *((unsigned char *)v722 + v699[15]) = *((unsigned char *)v258 + v699[15]);
          uint64_t v354 = v699[16];
          uint64_t v355 = (void *)((char *)v722 + v354);
          uint64_t v356 = (void *)((char *)v258 + v354);
          uint64_t v357 = v356[1];
          void *v355 = *v356;
          v355[1] = v357;
          *(void *)((char *)v722 + v699[17]) = *(void *)((char *)v258 + v699[17]);
          *((unsigned char *)v722 + v699[18]) = *((unsigned char *)v258 + v699[18]);
          uint64_t v358 = v699[19];
          uint64_t v359 = (char *)v722 + v358;
          uint64_t v360 = (uint64_t)v258 + v358;
          uint64_t v361 = *(void *)((char *)v258 + v358);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v361 == 1)
          {
            long long v362 = *(_OWORD *)(v360 + 16);
            *(_OWORD *)uint64_t v359 = *(_OWORD *)v360;
            *((_OWORD *)v359 + 1) = v362;
            *((_OWORD *)v359 + 2) = *(_OWORD *)(v360 + 32);
            *((void *)v359 + 6) = *(void *)(v360 + 48);
          }
          else
          {
            *(void *)uint64_t v359 = v361;
            uint64_t v363 = *(void *)(v360 + 16);
            swift_bridgeObjectRetain();
            if (v363 == 1)
            {
              *(_OWORD *)(v359 + 8) = *(_OWORD *)(v360 + 8);
              *((void *)v359 + 3) = *(void *)(v360 + 24);
            }
            else
            {
              *((void *)v359 + 1) = *(void *)(v360 + 8);
              *((void *)v359 + 2) = v363;
              *((void *)v359 + 3) = *(void *)(v360 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v364 = *(void *)(v360 + 40);
            *((void *)v359 + 4) = *(void *)(v360 + 32);
            *((void *)v359 + 5) = v364;
            *((void *)v359 + 6) = *(void *)(v360 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v258 = v724;
          }
          uint64_t v365 = v699[20];
          uint64_t v366 = (void *)((char *)v722 + v365);
          long long v367 = (void *)((char *)v258 + v365);
          uint64_t v368 = v367[1];
          void *v366 = *v367;
          v366[1] = v368;
          uint64_t v12 = v714;
          goto LABEL_281;
        case 6u:
          uint64_t v705 = v11;
          uint64_t v715 = v12;
          uint64_t v719 = v6;
          v710 = v3;
          uint64_t v76 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v76;
          uint64_t v77 = v10[3];
          v9[2] = v10[2];
          v9[3] = v77;
          uint64_t v78 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v78 != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v79 = v10[5];
          uint64_t v80 = v10[6];
          v9[4] = v78;
          v9[5] = v79;
          uint64_t v82 = v10[7];
          uint64_t v81 = v10[8];
          v9[6] = v80;
          v9[7] = v82;
          uint64_t v84 = v10[9];
          uint64_t v83 = v10[10];
          v9[8] = v81;
          v9[9] = v84;
          v9[10] = v83;
          v689 = (int *)type metadata accessor for ModelsR4.Observation(0);
          uint64_t v85 = v689[10];
          v660 = (char *)v9 + v85;
          uint64_t v86 = (char *)v10 + v85;
          uint64_t v87 = type metadata accessor for FHIRDateTime();
          uint64_t v670 = *(void **)(v87 - 8);
          uint64_t v88 = (unsigned int (*)(char *, uint64_t, uint64_t))v670[6];
          uint64_t v89 = v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v700 = v87;
          uint64_t v679 = v88;
          if (v88(v86, 1, v87))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v660, v86, *(void *)(*(void *)(v90 - 8) + 64));
            uint64_t v91 = v689;
            uint64_t v11 = v705;
          }
          else
          {
            unsigned char *v660 = *v86;
            *((void *)v660 + 1) = *((void *)v86 + 1);
            *((_DWORD *)v660 + 4) = *((_DWORD *)v86 + 4);
            uint64_t v118 = *((void *)v86 + 7);
            if (v118 == 1)
            {
              long long v119 = *(_OWORD *)(v86 + 40);
              *(_OWORD *)(v660 + 24) = *(_OWORD *)(v86 + 24);
              *(_OWORD *)(v660 + 40) = v119;
              *((void *)v660 + 7) = *((void *)v86 + 7);
            }
            else
            {
              v660[24] = v86[24];
              *(_WORD *)(v660 + 25) = *(_WORD *)(v86 + 25);
              *(_OWORD *)(v660 + 28) = *(_OWORD *)(v86 + 28);
              *((_DWORD *)v660 + 11) = *((_DWORD *)v86 + 11);
              *((void *)v660 + 6) = *((void *)v86 + 6);
              *((void *)v660 + 7) = v118;
              swift_bridgeObjectRetain();
            }
            uint64_t v91 = v689;
            uint64_t v11 = v705;
            uint64_t v139 = *(int *)(v87 + 28);
            uint64_t v140 = &v660[v139];
            __dsta = v89;
            long long v141 = &v89[v139];
            uint64_t v142 = sub_23309B300();
            uint64_t v143 = *(void *)(v142 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, char *, uint64_t))(v143 + 16))(v140, v141, v142);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
            }
            uint64_t v9 = v722;
            uint64_t v208 = *(int *)(v700 + 32);
            uint64_t v209 = &v660[v208];
            uint64_t v210 = &__dsta[v208];
            uint64_t v211 = *((void *)v210 + 1);
            *uint64_t v209 = *(void *)v210;
            v209[1] = v211;
            uint64_t v212 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v670[7];
            swift_bridgeObjectRetain();
            v212(v660, 0, 1, v700);
            uint64_t v10 = v724;
          }
          uint64_t v213 = v91[11];
          uint64_t v214 = (char *)v9 + v213;
          uint64_t v215 = (char *)v10 + v213;
          if (v679((char *)v10 + v213, 1, v700))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v214, v215, *(void *)(*(void *)(v216 - 8) + 64));
          }
          else
          {
            *uint64_t v214 = *v215;
            *((void *)v214 + 1) = *((void *)v215 + 1);
            *((_DWORD *)v214 + 4) = *((_DWORD *)v215 + 4);
            uint64_t v217 = *((void *)v215 + 7);
            if (v217 == 1)
            {
              long long v218 = *(_OWORD *)(v215 + 40);
              *(_OWORD *)(v214 + 24) = *(_OWORD *)(v215 + 24);
              *(_OWORD *)(v214 + 40) = v218;
              *((void *)v214 + 7) = *((void *)v215 + 7);
            }
            else
            {
              v214[24] = v215[24];
              *(_WORD *)(v214 + 25) = *(_WORD *)(v215 + 25);
              *(_OWORD *)(v214 + 28) = *(_OWORD *)(v215 + 28);
              *((_DWORD *)v214 + 11) = *((_DWORD *)v215 + 11);
              *((void *)v214 + 6) = *((void *)v215 + 6);
              *((void *)v214 + 7) = v217;
              swift_bridgeObjectRetain();
            }
            uint64_t v219 = *(int *)(v700 + 28);
            uint64_t v220 = &v214[v219];
            uint64_t v221 = &v215[v219];
            uint64_t v222 = sub_23309B300();
            uint64_t v223 = *(void *)(v222 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v223 + 48))(v221, 1, v222))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v220, v221, *(void *)(*(void *)(v224 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v223 + 16))(v220, v221, v222);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v223 + 56))(v220, 0, 1, v222);
            }
            uint64_t v9 = v722;
            uint64_t v269 = *(int *)(v700 + 32);
            uint64_t v270 = &v214[v269];
            uint64_t v271 = &v215[v269];
            uint64_t v272 = v271[1];
            *uint64_t v270 = *v271;
            v270[1] = v272;
            uint64_t v273 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v670[7];
            swift_bridgeObjectRetain();
            v273(v214, 0, 1, v700);
            uint64_t v10 = v724;
          }
          uint64_t v274 = v91;
          uint64_t v275 = v91[12];
          uint64_t v276 = (char *)v9 + v275;
          uint64_t v277 = (char *)v10 + v275;
          uint64_t v278 = type metadata accessor for Period();
          uint64_t v279 = *(void *)(v278 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v279 + 48))(v277, 1, v278))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v276, v277, *(void *)(*(void *)(v280 - 8) + 64));
            uint64_t v281 = v274;
          }
          else
          {
            v662 = (int *)v278;
            __dste = v276;
            if (v679(v277, 1, v700))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v276, v277, *(void *)(*(void *)(v282 - 8) + 64));
              uint64_t v283 = v279;
              uint64_t v281 = v274;
            }
            else
            {
              *uint64_t v276 = *v277;
              *((void *)v276 + 1) = *((void *)v277 + 1);
              *((_DWORD *)v276 + 4) = *((_DWORD *)v277 + 4);
              uint64_t v288 = *((void *)v277 + 7);
              uint64_t v283 = v279;
              if (v288 == 1)
              {
                long long v289 = *(_OWORD *)(v277 + 40);
                *(_OWORD *)(v276 + 24) = *(_OWORD *)(v277 + 24);
                *(_OWORD *)(v276 + 40) = v289;
                *((void *)v276 + 7) = *((void *)v277 + 7);
              }
              else
              {
                v276[24] = v277[24];
                *(_WORD *)(v276 + 25) = *(_WORD *)(v277 + 25);
                *(_OWORD *)(v276 + 28) = *(_OWORD *)(v277 + 28);
                *((_DWORD *)v276 + 11) = *((_DWORD *)v277 + 11);
                *((void *)v276 + 6) = *((void *)v277 + 6);
                *((void *)v276 + 7) = v288;
                swift_bridgeObjectRetain();
              }
              uint64_t v281 = v274;
              uint64_t v307 = *(int *)(v700 + 28);
              long long v308 = &v276[v307];
              uint64_t v309 = &v277[v307];
              uint64_t v310 = sub_23309B300();
              uint64_t v311 = *(void *)(v310 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v311 + 48))(v309, 1, v310))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v308, v309, *(void *)(*(void *)(v312 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v311 + 16))(v308, v309, v310);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v311 + 56))(v308, 0, 1, v310);
              }
              uint64_t v9 = v722;
              uint64_t v369 = *(int *)(v700 + 32);
              uint64_t v276 = __dste;
              uint64_t v370 = &__dste[v369];
              uint64_t v371 = &v277[v369];
              uint64_t v372 = v371[1];
              void *v370 = *v371;
              v370[1] = v372;
              uint64_t v373 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v670[7];
              swift_bridgeObjectRetain();
              v373(__dste, 0, 1, v700);
              uint64_t v10 = v724;
            }
            uint64_t v374 = v662[5];
            uint64_t v375 = &v276[v374];
            uint64_t v376 = &v277[v374];
            if (v679(v376, 1, v700))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v375, v376, *(void *)(*(void *)(v377 - 8) + 64));
            }
            else
            {
              unsigned char *v375 = *v376;
              *((void *)v375 + 1) = *((void *)v376 + 1);
              *((_DWORD *)v375 + 4) = *((_DWORD *)v376 + 4);
              uint64_t v378 = *((void *)v376 + 7);
              if (v378 == 1)
              {
                long long v379 = *(_OWORD *)(v376 + 40);
                *(_OWORD *)(v375 + 24) = *(_OWORD *)(v376 + 24);
                *(_OWORD *)(v375 + 40) = v379;
                *((void *)v375 + 7) = *((void *)v376 + 7);
              }
              else
              {
                v375[24] = v376[24];
                *(_WORD *)(v375 + 25) = *(_WORD *)(v376 + 25);
                *(_OWORD *)(v375 + 28) = *(_OWORD *)(v376 + 28);
                *((_DWORD *)v375 + 11) = *((_DWORD *)v376 + 11);
                *((void *)v375 + 6) = *((void *)v376 + 6);
                *((void *)v375 + 7) = v378;
                swift_bridgeObjectRetain();
              }
              uint64_t v380 = *(int *)(v700 + 28);
              uint64_t v381 = &v375[v380];
              uint64_t v382 = &v376[v380];
              uint64_t v383 = sub_23309B300();
              uint64_t v384 = *(void *)(v383 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v384 + 48))(v382, 1, v383))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v381, v382, *(void *)(*(void *)(v385 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v384 + 16))(v381, v382, v383);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v384 + 56))(v381, 0, 1, v383);
              }
              uint64_t v9 = v722;
              uint64_t v453 = *(int *)(v700 + 32);
              v454 = &v375[v453];
              uint64_t v455 = &v376[v453];
              uint64_t v456 = v455[1];
              void *v454 = *v455;
              v454[1] = v456;
              uint64_t v457 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v670[7];
              swift_bridgeObjectRetain();
              v457(v375, 0, 1, v700);
              uint64_t v10 = v724;
            }
            (*(void (**)(unsigned char *, void, uint64_t, int *))(v283 + 56))(__dste, 0, 1, v662);
          }
          uint64_t v458 = v281[13];
          uint64_t v459 = (char *)v9 + v458;
          uint64_t v460 = (char *)v10 + v458;
          if (v679((char *)v10 + v458, 1, v700))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v459, v460, *(void *)(*(void *)(v461 - 8) + 64));
          }
          else
          {
            *uint64_t v459 = *v460;
            *((void *)v459 + 1) = *((void *)v460 + 1);
            *((_DWORD *)v459 + 4) = *((_DWORD *)v460 + 4);
            uint64_t v462 = *((void *)v460 + 7);
            if (v462 == 1)
            {
              long long v463 = *(_OWORD *)(v460 + 40);
              *(_OWORD *)(v459 + 24) = *(_OWORD *)(v460 + 24);
              *(_OWORD *)(v459 + 40) = v463;
              *((void *)v459 + 7) = *((void *)v460 + 7);
            }
            else
            {
              v459[24] = v460[24];
              *(_WORD *)(v459 + 25) = *(_WORD *)(v460 + 25);
              *(_OWORD *)(v459 + 28) = *(_OWORD *)(v460 + 28);
              *((_DWORD *)v459 + 11) = *((_DWORD *)v460 + 11);
              *((void *)v459 + 6) = *((void *)v460 + 6);
              *((void *)v459 + 7) = v462;
              swift_bridgeObjectRetain();
            }
            uint64_t v464 = *(int *)(v700 + 28);
            uint64_t v465 = &v459[v464];
            uint64_t v466 = &v460[v464];
            uint64_t v467 = sub_23309B300();
            uint64_t v468 = *(void *)(v467 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v468 + 48))(v466, 1, v467))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v465, v466, *(void *)(*(void *)(v469 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v468 + 16))(v465, v466, v467);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v468 + 56))(v465, 0, 1, v467);
            }
            uint64_t v9 = v722;
            uint64_t v470 = *(int *)(v700 + 32);
            long long v471 = &v459[v470];
            long long v472 = &v460[v470];
            uint64_t v473 = v472[1];
            *long long v471 = *v472;
            v471[1] = v473;
            uint64_t v474 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v670[7];
            swift_bridgeObjectRetain();
            v474(v459, 0, 1, v700);
            uint64_t v10 = v724;
          }
          *(void *)((char *)v9 + v281[14]) = *(void *)((char *)v10 + v281[14]);
          *(void *)((char *)v9 + v281[15]) = *(void *)((char *)v10 + v281[15]);
          uint64_t v475 = v281[16];
          uint64_t v476 = (void *)((char *)v9 + v475);
          uint64_t v477 = (void *)((char *)v10 + v475);
          uint64_t v478 = v477[1];
          *uint64_t v476 = *v477;
          v476[1] = v478;
          uint64_t v479 = v281[17];
          uint64_t v480 = (char *)v9 + v479;
          v481 = (char *)v10 + v479;
          uint64_t v482 = *(void *)((char *)v10 + v479 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v482 == 1)
          {
            *(_OWORD *)uint64_t v480 = *(_OWORD *)v481;
            *((void *)v480 + 2) = *((void *)v481 + 2);
          }
          else
          {
            *(void *)uint64_t v480 = *(void *)v481;
            *((void *)v480 + 1) = v482;
            *((void *)v480 + 2) = *((void *)v481 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v483 = v689[18];
          v484 = (void *)((char *)v9 + v483);
          uint64_t v485 = (void *)((char *)v10 + v483);
          uint64_t v486 = type metadata accessor for Quantity();
          uint64_t v487 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v486 - 8);
          uint64_t v6 = v719;
          uint64_t v12 = v715;
          if (v487[6](v485, 1, v486))
          {
            sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v484, v485, *(void *)(*(void *)(v488 - 8) + 64));
          }
          else
          {
            v674 = v487;
            *(_OWORD *)v484 = *(_OWORD *)v485;
            *(void *)((char *)v484 + 13) = *(void *)((char *)v485 + 13);
            uint64_t v489 = v485[4];
            v484[3] = v485[3];
            v484[4] = v489;
            uint64_t v490 = v485[6];
            v484[5] = v485[5];
            v484[6] = v490;
            uint64_t v491 = *(int *)(v486 + 28);
            uint64_t v666 = (char *)v484 + v491;
            v702 = (char *)v485 + v491;
            uint64_t v492 = sub_23309AF80();
            uint64_t v493 = *(void *)(v492 - 8);
            v683 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v493 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v683(v702, 1, v492))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v666, v702, *(void *)(*(void *)(v494 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v493 + 16))(v666, v702, v492);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v493 + 56))(v666, 0, 1, v492);
            }
            uint64_t v6 = v719;
            uint64_t v12 = v715;
            uint64_t v495 = *(int *)(v486 + 32);
            uint64_t v496 = (void *)((char *)v484 + v495);
            long long v497 = (void *)((char *)v485 + v495);
            uint64_t v498 = v497[1];
            *uint64_t v496 = *v497;
            v496[1] = v498;
            uint64_t v499 = (void (*)(void *, void, uint64_t, uint64_t))v674[7];
            swift_bridgeObjectRetain();
            v499(v484, 0, 1, v486);
            uint64_t v10 = v724;
          }
          uint64_t v9 = v722;
          *(void *)((char *)v722 + v689[19]) = *(void *)((char *)v10 + v689[19]);
          uint64_t v500 = v689[20];
          uint64_t v501 = (void *)((char *)v722 + v500);
          uint64_t v502 = (void *)((char *)v10 + v500);
          uint64_t v503 = v502[1];
          *uint64_t v501 = *v502;
          v501[1] = v503;
          swift_bridgeObjectRetain();
          long long v3 = v710;
          goto LABEL_281;
        case 7u:
          uint64_t v706 = v11;
          uint64_t v720 = v6;
          uint64_t v92 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v92;
          uint64_t v93 = v10[3];
          v9[2] = v10[2];
          v9[3] = v93;
          v9[4] = v10[4];
          *(void *)((char *)v9 + 37) = *(void *)((char *)v10 + 37);
          uint64_t v94 = v10[7];
          v9[6] = v10[6];
          v9[7] = v94;
          uint64_t v95 = v10[9];
          v9[8] = v10[8];
          v9[9] = v95;
          uint64_t v96 = v10[11];
          v9[10] = v10[10];
          v9[11] = v96;
          uint64_t v97 = v10[13];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v97 == 1)
          {
            *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
            v9[14] = v10[14];
          }
          else
          {
            v9[12] = v10[12];
            v9[13] = v97;
            v9[14] = v10[14];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v6 = v720;
          uint64_t v11 = v706;
          uint64_t v102 = v10[16];
          v9[15] = v10[15];
          v9[16] = v102;
          uint64_t v103 = v10[18];
          v9[17] = v10[17];
          v9[18] = v103;
          goto LABEL_190;
        case 8u:
          uint64_t v98 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v98;
          uint64_t v99 = v10[3];
          v9[2] = v10[2];
          v9[3] = v99;
          uint64_t v100 = v10[5];
          v9[4] = v10[4];
          v9[5] = v100;
LABEL_190:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v16 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v16;
          long long v17 = v10;
          uint64_t v18 = v10[2];
          uint64_t v19 = v10[3];
          v9[2] = v18;
          v9[3] = v19;
          uint64_t v20 = v17[5];
          v722[4] = v17[4];
          v722[5] = v20;
          uint64_t v21 = v17[7];
          v722[6] = v17[6];
          v722[7] = v21;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v9 = v722;
          break;
      }
      swift_bridgeObjectRetain();
LABEL_281:
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v603 = *(int *)(v6 + 24);
    uint64_t v604 = (void *)((char *)v4 + v603);
    uint64_t v605 = (void *)((char *)v3 + v603);
    uint64_t v606 = *v605;
    unint64_t v607 = v605[1];
    sub_232E9A9F4(*v605, v607);
    *uint64_t v604 = v606;
    v604[1] = v607;
  }
  return v4;
}

uint64_t destroy for ModelsR4.Bundle.BundleEntry(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for ModelsR4.ResourceProxy(0);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_182;
      case 1u:
      case 8u:
        goto LABEL_188;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        if (v4[6] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (v4[9] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (v4[16] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v7 = (char *)v4 + v6[13];
        uint64_t v8 = type metadata accessor for FHIRDateTime();
        uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
        if (!v9(v7, 1, v8))
        {
          if (*((void *)v7 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v10 = &v7[*(int *)(v8 + 28)];
          uint64_t v11 = sub_23309B300();
          uint64_t v12 = *(void *)(v11 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
            (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v13 = (char *)v4 + v6[14];
        uint64_t v14 = type metadata accessor for Period();
        uint64_t v15 = *(unsigned int (**)(void, void, void))(*(void *)(v14 - 8) + 48);
        if (!v15(v13, 1, v14))
        {
          if (!v9(v13, 1, v8))
          {
            uint64_t v144 = v15;
            if (*((void *)v13 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v16 = &v13[*(int *)(v8 + 28)];
            uint64_t v17 = sub_23309B300();
            uint64_t v140 = *(void *)(v17 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v16, 1, v17)) {
              (*(void (**)(char *, uint64_t))(v140 + 8))(v16, v17);
            }
            swift_bridgeObjectRelease();
            uint64_t v15 = v144;
          }
          uint64_t v18 = &v13[*(int *)(v14 + 20)];
          if (!v9(v18, 1, v8))
          {
            uint64_t v145 = v15;
            if (*((void *)v18 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v19 = &v18[*(int *)(v8 + 28)];
            uint64_t v20 = sub_23309B300();
            uint64_t v141 = *(void *)(v20 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v19, 1, v20)) {
              (*(void (**)(char *, uint64_t))(v141 + 8))(v19, v20);
            }
            swift_bridgeObjectRelease();
            uint64_t v15 = v145;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v21 = (char *)v4 + v6[16];
        if (!v9(v21, 1, v8))
        {
          uint64_t v142 = v9;
          uint64_t v146 = v15;
          if (*((void *)v21 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v22 = &v21[*(int *)(v8 + 28)];
          uint64_t v23 = sub_23309B300();
          uint64_t v24 = *(void *)(v23 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23)) {
            (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
          }
          swift_bridgeObjectRelease();
          uint64_t v9 = v142;
          uint64_t v15 = v146;
        }
        uint64_t v25 = (char *)v4 + v6[17];
        if (!v15(v25, 1, v14))
        {
          if (!v9(v25, 1, v8))
          {
            uint64_t v143 = v9;
            if (*((void *)v25 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v26 = &v25[*(int *)(v8 + 28)];
            uint64_t v27 = sub_23309B300();
            uint64_t v28 = *(void *)(v27 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
              (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
            }
            swift_bridgeObjectRelease();
            uint64_t v9 = v143;
          }
          uint64_t v29 = &v25[*(int *)(v14 + 20)];
          if (!v9(v29, 1, v8))
          {
            if (*((void *)v29 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v30 = &v29[*(int *)(v8 + 28)];
            uint64_t v31 = sub_23309B300();
            uint64_t v32 = *(void *)(v31 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31)) {
              (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
            }
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v33 = (char *)v4 + v6[19];
        if (!v9(v33, 1, v8))
        {
          if (*((void *)v33 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v34 = &v33[*(int *)(v8 + 28)];
          uint64_t v35 = sub_23309B300();
          uint64_t v36 = *(void *)(v35 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
            (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v37 = (char *)v4 + v6[20];
        uint64_t v38 = type metadata accessor for Reference();
        uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48);
        if (!v39(v37, 1, v38))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v40 = &v37[*(int *)(v38 + 24)];
          uint64_t v41 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v40 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v42 = &v40[*(int *)(v41 + 24)];
            uint64_t v43 = sub_23309AF80();
            uint64_t v149 = *(void *)(v43 - 8);
            uint64_t v152 = v42;
            uint64_t v44 = v42;
            uint64_t v45 = v43;
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v44, 1, v43)) {
              (*(void (**)(char *, uint64_t))(v149 + 8))(v152, v45);
            }
            swift_bridgeObjectRelease();
          }
        }
        uint64_t v46 = (char *)v4 + v6[21];
        if (!v39(v46, 1, v38))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v47 = &v46[*(int *)(v38 + 24)];
          uint64_t v48 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v47, 1, v48))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v47 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v49 = &v47[*(int *)(v48 + 24)];
            uint64_t v50 = sub_23309AF80();
            uint64_t v51 = *(void *)(v50 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50)) {
              (*(void (**)(char *, uint64_t))(v51 + 8))(v49, v50);
            }
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_181;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v52 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v53 = (char *)v4 + v52[11];
        uint64_t v54 = type metadata accessor for FHIRDateTime();
        uint64_t v55 = *(unsigned int (**)(void, void, void))(*(void *)(v54 - 8) + 48);
        if (!v55(v53, 1, v54))
        {
          uint64_t v153 = v55;
          if (*((void *)v53 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v56 = &v53[*(int *)(v54 + 28)];
          uint64_t v57 = sub_23309B300();
          uint64_t v58 = *(void *)(v57 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57)) {
            (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v57);
          }
          swift_bridgeObjectRelease();
          uint64_t v55 = v153;
        }
        uint64_t v59 = (char *)v4 + v52[12];
        uint64_t v60 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v59, 1, v60))
        {
          if (!v55(v59, 1, v54))
          {
            uint64_t v154 = v55;
            if (*((void *)v59 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v61 = &v59[*(int *)(v54 + 28)];
            uint64_t v62 = sub_23309B300();
            uint64_t v147 = *(void *)(v62 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v61, 1, v62)) {
              (*(void (**)(char *, uint64_t))(v147 + 8))(v61, v62);
            }
            swift_bridgeObjectRelease();
            uint64_t v55 = v154;
          }
          long long v63 = &v59[*(int *)(v60 + 20)];
          if (!v55(v63, 1, v54))
          {
            uint64_t v155 = v55;
            if (*((void *)v63 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v64 = &v63[*(int *)(v54 + 28)];
            uint64_t v65 = sub_23309B300();
            uint64_t v66 = *(void *)(v65 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65)) {
              (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
            }
            swift_bridgeObjectRelease();
            uint64_t v55 = v155;
          }
        }
        uint64_t v67 = (char *)v4 + v52[13];
        if (!v55(v67, 1, v54))
        {
          if (*((void *)v67 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v68 = &v67[*(int *)(v54 + 28)];
          uint64_t v69 = sub_23309B300();
          uint64_t v70 = *(void *)(v69 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69)) {
            (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v69);
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_180;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v71 = type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v72 = (char *)v4 + *(int *)(v71 + 44);
        uint64_t v73 = type metadata accessor for FHIRDateTime();
        uint64_t v74 = *(unsigned int (**)(void, void, void))(*(void *)(v73 - 8) + 48);
        if (!v74(v72, 1, v73))
        {
          uint64_t v75 = v74;
          if (*((void *)v72 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v76 = &v72[*(int *)(v73 + 28)];
          uint64_t v77 = sub_23309B300();
          uint64_t v78 = *(void *)(v77 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77)) {
            (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v77);
          }
          swift_bridgeObjectRelease();
          uint64_t v74 = v75;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v79 = (char *)v4 + *(int *)(v71 + 60);
        uint64_t v80 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48))(v79, 1, v80)) {
          goto LABEL_182;
        }
        swift_bridgeObjectRelease();
        uint64_t v81 = &v79[*(int *)(v80 + 20)];
        uint64_t v82 = type metadata accessor for Period();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48))(v81, 1, v82)) {
          goto LABEL_182;
        }
        if (!v74(v81, 1, v73))
        {
          uint64_t v150 = v74;
          if (*((void *)v81 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v83 = &v81[*(int *)(v73 + 28)];
          uint64_t v84 = sub_23309B300();
          uint64_t v85 = *(void *)(v84 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84)) {
            (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
          }
          swift_bridgeObjectRelease();
          uint64_t v74 = v150;
        }
        uint64_t v86 = &v81[*(int *)(v82 + 20)];
        if (v74(v86, 1, v73)) {
          goto LABEL_182;
        }
        if (*((void *)v86 + 7) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v137 = &v86[*(int *)(v73 + 28)];
        uint64_t v138 = sub_23309B300();
        uint64_t v139 = *(void *)(v138 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138)) {
          (*(void (**)(char *, uint64_t))(v139 + 8))(v137, v138);
        }
        goto LABEL_181;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v87 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v88 = (char *)v4 + v87[10];
        uint64_t v89 = type metadata accessor for FHIRDateTime();
        uint64_t v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v89 - 8) + 48);
        if (!v90(v88, 1, v89))
        {
          if (*((void *)v88 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v91 = &v88[*(int *)(v89 + 28)];
          uint64_t v92 = sub_23309B300();
          uint64_t v151 = *(void *)(v92 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v91, 1, v92)) {
            (*(void (**)(char *, uint64_t))(v151 + 8))(v91, v92);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v93 = (char *)v4 + v87[12];
        if (!v90(v93, 1, v89))
        {
          if (*((void *)v93 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v94 = &v93[*(int *)(v89 + 28)];
          uint64_t v95 = sub_23309B300();
          uint64_t v96 = *(void *)(v95 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95)) {
            (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v95);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v97 = (char *)v4 + v87[14];
        uint64_t v98 = type metadata accessor for Reference();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v98 - 8) + 48))(v97, 1, v98))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v99 = &v97[*(int *)(v98 + 24)];
          uint64_t v100 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100))
          {
            swift_bridgeObjectRelease();
            if (*((void *)v99 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            uint64_t v101 = &v99[*(int *)(v100 + 24)];
            uint64_t v102 = sub_23309AF80();
            uint64_t v103 = *(void *)(v102 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102)) {
              (*(void (**)(char *, uint64_t))(v103 + 8))(v101, v102);
            }
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v104 = (void *)((char *)v4 + v87[19]);
        if (*v104 == 1) {
          goto LABEL_182;
        }
        swift_bridgeObjectRelease();
        if (v104[2] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        goto LABEL_180;
      case 6u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1) {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v105 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v106 = (char *)v4 + v105[10];
        uint64_t v107 = type metadata accessor for FHIRDateTime();
        uint64_t v108 = *(unsigned int (**)(void, void, void))(*(void *)(v107 - 8) + 48);
        uint64_t v156 = v108;
        if (!v108(v106, 1, v107))
        {
          if (*((void *)v106 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v109 = &v106[*(int *)(v107 + 28)];
          uint64_t v110 = sub_23309B300();
          uint64_t v111 = *(void *)(v110 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110)) {
            (*(void (**)(char *, uint64_t))(v111 + 8))(v109, v110);
          }
          swift_bridgeObjectRelease();
          uint64_t v108 = v156;
        }
        uint64_t v112 = (char *)v4 + v105[11];
        if (!v108(v112, 1, v107))
        {
          if (*((void *)v112 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          long long v113 = &v112[*(int *)(v107 + 28)];
          uint64_t v114 = sub_23309B300();
          uint64_t v115 = *(void *)(v114 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114)) {
            (*(void (**)(char *, uint64_t))(v115 + 8))(v113, v114);
          }
          swift_bridgeObjectRelease();
          uint64_t v108 = v156;
        }
        uint64_t v116 = (char *)v4 + v105[12];
        uint64_t v117 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v117 - 8) + 48))(v116, 1, v117))
        {
          if (!v108(v116, 1, v107))
          {
            if (*((void *)v116 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            uint64_t v118 = &v116[*(int *)(v107 + 28)];
            uint64_t v119 = sub_23309B300();
            uint64_t v148 = *(void *)(v119 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v118, 1, v119)) {
              (*(void (**)(char *, uint64_t))(v148 + 8))(v118, v119);
            }
            swift_bridgeObjectRelease();
            uint64_t v108 = v156;
          }
          uint64_t v120 = &v116[*(int *)(v117 + 20)];
          if (!v108(v120, 1, v107))
          {
            if (*((void *)v120 + 7) != 1) {
              swift_bridgeObjectRelease();
            }
            long long v121 = &v120[*(int *)(v107 + 28)];
            uint64_t v122 = sub_23309B300();
            uint64_t v123 = *(void *)(v122 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122)) {
              (*(void (**)(char *, uint64_t))(v123 + 8))(v121, v122);
            }
            swift_bridgeObjectRelease();
            uint64_t v108 = v156;
          }
        }
        uint64_t v124 = (char *)v4 + v105[13];
        if (!v108(v124, 1, v107))
        {
          if (*((void *)v124 + 7) != 1) {
            swift_bridgeObjectRelease();
          }
          uint64_t v125 = &v124[*(int *)(v107 + 28)];
          uint64_t v126 = sub_23309B300();
          uint64_t v127 = *(void *)(v126 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126)) {
            (*(void (**)(char *, uint64_t))(v127 + 8))(v125, v126);
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)((char *)v4 + v105[17] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v128 = (char *)v4 + v105[18];
        uint64_t v129 = type metadata accessor for Quantity();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v129 - 8) + 48))(v128, 1, v129)) {
          goto LABEL_181;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v130 = &v128[*(int *)(v129 + 28)];
        uint64_t v131 = sub_23309AF80();
        uint64_t v132 = *(void *)(v131 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131)) {
          (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v131);
        }
LABEL_180:
        swift_bridgeObjectRelease();
LABEL_181:
        swift_bridgeObjectRelease();
        goto LABEL_182;
      case 7u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_188:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_182:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  uint64_t v133 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v134 = *v133;
  unint64_t v135 = v133[1];
  return sub_232E9AA4C(v134, v135);
}

void *initializeWithCopy for ModelsR4.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v732 = v11;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v19 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v19;
        uint64_t v20 = v9[3];
        v8[2] = v9[2];
        v8[3] = v20;
        v8[4] = v9[4];
        swift_bridgeObjectRetain();
        goto LABEL_279;
      case 2u:
        uint64_t v21 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v21;
        uint64_t v22 = v9[3];
        v8[2] = v9[2];
        v8[3] = v22;
        uint64_t v23 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v23 != 1) {
          swift_bridgeObjectRetain();
        }
        v8[4] = v23;
        uint64_t v24 = v9[6];
        if (v24 == 1)
        {
          *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
          v8[7] = v9[7];
        }
        else
        {
          v8[5] = v9[5];
          v8[6] = v24;
          v8[7] = v9[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v94 = v9[9];
        if (v94 == 1)
        {
          *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
          v8[10] = v9[10];
        }
        else
        {
          v8[8] = v9[8];
          v8[9] = v94;
          v8[10] = v9[10];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v8[11] = v9[11];
        uint64_t v97 = v9[13];
        swift_bridgeObjectRetain();
        if (v97 == 1)
        {
          *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
          v8[14] = v9[14];
        }
        else
        {
          v8[12] = v9[12];
          v8[13] = v97;
          v8[14] = v9[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v98 = v9[16];
        uint64_t v720 = v10;
        if (v98 == 1)
        {
          *(_OWORD *)(v8 + 15) = *(_OWORD *)(v9 + 15);
          v8[17] = v9[17];
        }
        else
        {
          v8[15] = v9[15];
          v8[16] = v98;
          v8[17] = v9[17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v8[18] = v9[18];
        uint64_t v99 = type metadata accessor for ModelsR4.Condition(0);
        uint64_t v100 = *(int *)(v99 + 52);
        uint64_t v704 = v8;
        uint64_t v101 = (char *)v8 + v100;
        uint64_t v102 = (char *)v9 + v100;
        uint64_t v103 = type metadata accessor for FHIRDateTime();
        uint64_t v680 = *(void *)(v103 - 8);
        uint64_t v104 = *(unsigned int (**)(void, void, void))(v680 + 48);
        swift_bridgeObjectRetain();
        v686 = (int *)v99;
        v671 = v104;
        uint64_t v716 = v5;
        uint64_t v726 = v3;
        v731 = v4;
        if (v104(v102, 1, v103))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
          uint64_t v106 = v103;
          uint64_t v107 = (int *)v99;
        }
        else
        {
          unsigned char *v101 = *v102;
          *((void *)v101 + 1) = *((void *)v102 + 1);
          *((_DWORD *)v101 + 4) = *((_DWORD *)v102 + 4);
          uint64_t v117 = *((void *)v102 + 7);
          uint64_t v118 = v101;
          if (v117 == 1)
          {
            long long v119 = *(_OWORD *)(v102 + 40);
            *(_OWORD *)(v101 + 24) = *(_OWORD *)(v102 + 24);
            *(_OWORD *)(v101 + 40) = v119;
            *((void *)v101 + 7) = *((void *)v102 + 7);
          }
          else
          {
            v101[24] = v102[24];
            *(_WORD *)(v101 + 25) = *(_WORD *)(v102 + 25);
            *(_OWORD *)(v101 + 28) = *(_OWORD *)(v102 + 28);
            *((_DWORD *)v101 + 11) = *((_DWORD *)v102 + 11);
            *((void *)v101 + 6) = *((void *)v102 + 6);
            *((void *)v101 + 7) = v117;
            swift_bridgeObjectRetain();
          }
          uint64_t v144 = *(int *)(v103 + 28);
          uint64_t v145 = &v101[v144];
          uint64_t v146 = &v102[v144];
          uint64_t v147 = sub_23309B300();
          uint64_t v148 = *(void *)(v147 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v148 + 16))(v145, v146, v147);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
          }
          uint64_t v106 = v103;
          uint64_t v221 = *(int *)(v103 + 32);
          uint64_t v222 = &v118[v221];
          uint64_t v223 = &v102[v221];
          uint64_t v224 = v223[1];
          *uint64_t v222 = *v223;
          v222[1] = v224;
          uint64_t v225 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
          swift_bridgeObjectRetain();
          v225(v118, 0, 1, v103);
          uint64_t v107 = (int *)v99;
          uint64_t v104 = (unsigned int (*)(void, void, void))v671;
        }
        uint64_t v8 = v704;
        uint64_t v226 = v107[14];
        uint64_t v227 = (char *)v704 + v226;
        uint64_t v228 = (char *)v9 + v226;
        uint64_t v229 = type metadata accessor for Period();
        __dstc = *(void **)(v229 - 8);
        uint64_t v664 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dstc[6];
        uint64_t v708 = v229;
        if (v664(v228, 1, v229))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v227, v228, *(void *)(*(void *)(v230 - 8) + 64));
        }
        else
        {
          if (v104(v228, 1, v106))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v227, v228, *(void *)(*(void *)(v231 - 8) + 64));
          }
          else
          {
            *uint64_t v227 = *v228;
            *((void *)v227 + 1) = *((void *)v228 + 1);
            *((_DWORD *)v227 + 4) = *((_DWORD *)v228 + 4);
            uint64_t v281 = *((void *)v228 + 7);
            if (v281 == 1)
            {
              long long v282 = *(_OWORD *)(v228 + 40);
              *(_OWORD *)(v227 + 24) = *(_OWORD *)(v228 + 24);
              *(_OWORD *)(v227 + 40) = v282;
              *((void *)v227 + 7) = *((void *)v228 + 7);
            }
            else
            {
              v227[24] = v228[24];
              *(_WORD *)(v227 + 25) = *(_WORD *)(v228 + 25);
              *(_OWORD *)(v227 + 28) = *(_OWORD *)(v228 + 28);
              *((_DWORD *)v227 + 11) = *((_DWORD *)v228 + 11);
              *((void *)v227 + 6) = *((void *)v228 + 6);
              *((void *)v227 + 7) = v281;
              swift_bridgeObjectRetain();
            }
            uint64_t v296 = *(int *)(v106 + 28);
            long long v297 = &v227[v296];
            uint64_t v298 = &v228[v296];
            uint64_t v299 = sub_23309B300();
            uint64_t v300 = *(void *)(v299 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v300 + 48))(v298, 1, v299))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v297, v298, *(void *)(*(void *)(v301 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v300 + 16))(v297, v298, v299);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
            }
            uint64_t v229 = v708;
            uint64_t v335 = *(int *)(v106 + 32);
            v336 = &v227[v335];
            uint64_t v337 = &v228[v335];
            uint64_t v338 = v337[1];
            void *v336 = *v337;
            v336[1] = v338;
            uint64_t v339 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
            swift_bridgeObjectRetain();
            v339(v227, 0, 1, v106);
            uint64_t v107 = v686;
            uint64_t v104 = (unsigned int (*)(void, void, void))v671;
          }
          uint64_t v340 = *(int *)(v229 + 20);
          uint64_t v341 = &v227[v340];
          long long v342 = &v228[v340];
          if (v104(v342, 1, v106))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v341, v342, *(void *)(*(void *)(v343 - 8) + 64));
          }
          else
          {
            *uint64_t v341 = *v342;
            *((void *)v341 + 1) = *((void *)v342 + 1);
            *((_DWORD *)v341 + 4) = *((_DWORD *)v342 + 4);
            uint64_t v344 = *((void *)v342 + 7);
            if (v344 == 1)
            {
              long long v345 = *(_OWORD *)(v342 + 40);
              *(_OWORD *)(v341 + 24) = *(_OWORD *)(v342 + 24);
              *(_OWORD *)(v341 + 40) = v345;
              *((void *)v341 + 7) = *((void *)v342 + 7);
            }
            else
            {
              v341[24] = v342[24];
              *(_WORD *)(v341 + 25) = *(_WORD *)(v342 + 25);
              *(_OWORD *)(v341 + 28) = *(_OWORD *)(v342 + 28);
              *((_DWORD *)v341 + 11) = *((_DWORD *)v342 + 11);
              *((void *)v341 + 6) = *((void *)v342 + 6);
              *((void *)v341 + 7) = v344;
              swift_bridgeObjectRetain();
            }
            uint64_t v346 = *(int *)(v106 + 28);
            v651 = &v341[v346];
            uint64_t v347 = &v342[v346];
            uint64_t v348 = sub_23309B300();
            uint64_t v349 = *(void *)(v348 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v349 + 48))(v347, 1, v348))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v651, v347, *(void *)(*(void *)(v350 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v349 + 16))(v651, v347, v348);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v349 + 56))(v651, 0, 1, v348);
            }
            uint64_t v415 = *(int *)(v106 + 32);
            uint64_t v416 = &v341[v415];
            uint64_t v417 = &v342[v415];
            uint64_t v418 = v417[1];
            *uint64_t v416 = *v417;
            v416[1] = v418;
            uint64_t v419 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
            swift_bridgeObjectRetain();
            v419(v341, 0, 1, v106);
            uint64_t v107 = v686;
            uint64_t v104 = (unsigned int (*)(void, void, void))v671;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstc[7])(v227, 0, 1, v708);
        }
        uint64_t v420 = v107[15];
        uint64_t v421 = (void *)((char *)v8 + v420);
        uint64_t v422 = (void *)((char *)v9 + v420);
        uint64_t v423 = v422[1];
        void *v421 = *v422;
        v421[1] = v423;
        uint64_t v424 = v107[16];
        long long v425 = (char *)v8 + v424;
        uint64_t v426 = (char *)v9 + v424;
        swift_bridgeObjectRetain();
        if (v104(v426, 1, v106))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v425, v426, *(void *)(*(void *)(v427 - 8) + 64));
        }
        else
        {
          *long long v425 = *v426;
          *((void *)v425 + 1) = *((void *)v426 + 1);
          *((_DWORD *)v425 + 4) = *((_DWORD *)v426 + 4);
          uint64_t v428 = *((void *)v426 + 7);
          if (v428 == 1)
          {
            long long v429 = *(_OWORD *)(v426 + 40);
            *(_OWORD *)(v425 + 24) = *(_OWORD *)(v426 + 24);
            *(_OWORD *)(v425 + 40) = v429;
            *((void *)v425 + 7) = *((void *)v426 + 7);
          }
          else
          {
            v425[24] = v426[24];
            *(_WORD *)(v425 + 25) = *(_WORD *)(v426 + 25);
            *(_OWORD *)(v425 + 28) = *(_OWORD *)(v426 + 28);
            *((_DWORD *)v425 + 11) = *((_DWORD *)v426 + 11);
            *((void *)v425 + 6) = *((void *)v426 + 6);
            *((void *)v425 + 7) = v428;
            swift_bridgeObjectRetain();
          }
          uint64_t v430 = *(int *)(v103 + 28);
          uint64_t v431 = &v425[v430];
          uint64_t v432 = &v426[v430];
          uint64_t v433 = sub_23309B300();
          uint64_t v434 = *(void *)(v433 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v431, v432, *(void *)(*(void *)(v435 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v434 + 16))(v431, v432, v433);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v434 + 56))(v431, 0, 1, v433);
          }
          uint64_t v106 = v103;
          uint64_t v436 = *(int *)(v103 + 32);
          uint64_t v437 = &v425[v436];
          uint64_t v438 = &v426[v436];
          uint64_t v439 = v438[1];
          *uint64_t v437 = *v438;
          v437[1] = v439;
          uint64_t v440 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
          swift_bridgeObjectRetain();
          v440(v425, 0, 1, v103);
          uint64_t v107 = v686;
          uint64_t v104 = (unsigned int (*)(void, void, void))v671;
        }
        uint64_t v441 = v708;
        uint64_t v442 = v107[17];
        uint64_t v443 = (char *)v8 + v442;
        uint64_t v444 = (char *)v9 + v442;
        if (v664((unsigned char *)v9 + v442, 1, v708))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v443, v444, *(void *)(*(void *)(v445 - 8) + 64));
          uint64_t v4 = v731;
        }
        else
        {
          if (v104(v444, 1, v106))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v443, v444, *(void *)(*(void *)(v446 - 8) + 64));
          }
          else
          {
            *uint64_t v443 = *v444;
            *((void *)v443 + 1) = *((void *)v444 + 1);
            *((_DWORD *)v443 + 4) = *((_DWORD *)v444 + 4);
            uint64_t v447 = *((void *)v444 + 7);
            if (v447 == 1)
            {
              long long v448 = *(_OWORD *)(v444 + 40);
              *(_OWORD *)(v443 + 24) = *(_OWORD *)(v444 + 24);
              *(_OWORD *)(v443 + 40) = v448;
              *((void *)v443 + 7) = *((void *)v444 + 7);
            }
            else
            {
              v443[24] = v444[24];
              *(_WORD *)(v443 + 25) = *(_WORD *)(v444 + 25);
              *(_OWORD *)(v443 + 28) = *(_OWORD *)(v444 + 28);
              *((_DWORD *)v443 + 11) = *((_DWORD *)v444 + 11);
              *((void *)v443 + 6) = *((void *)v444 + 6);
              *((void *)v443 + 7) = v447;
              swift_bridgeObjectRetain();
            }
            uint64_t v449 = *(int *)(v103 + 28);
            uint64_t v450 = &v443[v449];
            uint64_t v451 = &v444[v449];
            uint64_t v452 = sub_23309B300();
            uint64_t v453 = *(void *)(v452 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v453 + 48))(v451, 1, v452))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v450, v451, *(void *)(*(void *)(v454 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v453 + 16))(v450, v451, v452);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v453 + 56))(v450, 0, 1, v452);
            }
            uint64_t v504 = *(int *)(v103 + 32);
            v505 = &v443[v504];
            uint64_t v506 = &v444[v504];
            uint64_t v507 = v506[1];
            void *v505 = *v506;
            v505[1] = v507;
            uint64_t v508 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
            swift_bridgeObjectRetain();
            v508(v443, 0, 1, v103);
            uint64_t v106 = v103;
            uint64_t v107 = v686;
            uint64_t v104 = (unsigned int (*)(void, void, void))v671;
            uint64_t v441 = v708;
          }
          uint64_t v509 = *(int *)(v441 + 20);
          uint64_t v510 = &v443[v509];
          uint64_t v511 = &v444[v509];
          if (v104(v511, 1, v106))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v510, v511, *(void *)(*(void *)(v512 - 8) + 64));
            uint64_t v4 = v731;
          }
          else
          {
            *uint64_t v510 = *v511;
            *((void *)v510 + 1) = *((void *)v511 + 1);
            *((_DWORD *)v510 + 4) = *((_DWORD *)v511 + 4);
            uint64_t v513 = *((void *)v511 + 7);
            if (v513 == 1)
            {
              long long v514 = *(_OWORD *)(v511 + 40);
              *(_OWORD *)(v510 + 24) = *(_OWORD *)(v511 + 24);
              *(_OWORD *)(v510 + 40) = v514;
              *((void *)v510 + 7) = *((void *)v511 + 7);
            }
            else
            {
              v510[24] = v511[24];
              *(_WORD *)(v510 + 25) = *(_WORD *)(v511 + 25);
              *(_OWORD *)(v510 + 28) = *(_OWORD *)(v511 + 28);
              *((_DWORD *)v510 + 11) = *((_DWORD *)v511 + 11);
              *((void *)v510 + 6) = *((void *)v511 + 6);
              *((void *)v510 + 7) = v513;
              swift_bridgeObjectRetain();
            }
            uint64_t v515 = *(int *)(v103 + 28);
            uint64_t v516 = &v510[v515];
            uint64_t v517 = &v511[v515];
            uint64_t v518 = sub_23309B300();
            uint64_t v519 = *(void *)(v518 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v519 + 48))(v517, 1, v518))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v516, v517, *(void *)(*(void *)(v520 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v519 + 16))(v516, v517, v518);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v519 + 56))(v516, 0, 1, v518);
            }
            uint64_t v106 = v103;
            uint64_t v521 = *(int *)(v103 + 32);
            uint64_t v522 = &v510[v521];
            uint64_t v523 = &v511[v521];
            uint64_t v524 = v523[1];
            *uint64_t v522 = *v523;
            v522[1] = v524;
            uint64_t v525 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
            swift_bridgeObjectRetain();
            v525(v510, 0, 1, v103);
            uint64_t v4 = v731;
            uint64_t v107 = v686;
            uint64_t v104 = (unsigned int (*)(void, void, void))v671;
          }
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dstc[7])(v443, 0, 1, v708);
        }
        uint64_t v526 = v107[18];
        v527 = (void *)((char *)v8 + v526);
        uint64_t v528 = (void *)((char *)v9 + v526);
        uint64_t v529 = v528[1];
        void *v527 = *v528;
        v527[1] = v529;
        uint64_t v530 = v107[19];
        long long v531 = (char *)v8 + v530;
        uint64_t v532 = (char *)v9 + v530;
        swift_bridgeObjectRetain();
        if (v104(v532, 1, v106))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v531, v532, *(void *)(*(void *)(v533 - 8) + 64));
        }
        else
        {
          *long long v531 = *v532;
          *((void *)v531 + 1) = *((void *)v532 + 1);
          *((_DWORD *)v531 + 4) = *((_DWORD *)v532 + 4);
          uint64_t v534 = *((void *)v532 + 7);
          long long v535 = v4;
          if (v534 == 1)
          {
            long long v536 = *(_OWORD *)(v532 + 40);
            *(_OWORD *)(v531 + 24) = *(_OWORD *)(v532 + 24);
            *(_OWORD *)(v531 + 40) = v536;
            *((void *)v531 + 7) = *((void *)v532 + 7);
          }
          else
          {
            v531[24] = v532[24];
            *(_WORD *)(v531 + 25) = *(_WORD *)(v532 + 25);
            *(_OWORD *)(v531 + 28) = *(_OWORD *)(v532 + 28);
            *((_DWORD *)v531 + 11) = *((_DWORD *)v532 + 11);
            *((void *)v531 + 6) = *((void *)v532 + 6);
            *((void *)v531 + 7) = v534;
            swift_bridgeObjectRetain();
          }
          uint64_t v537 = *(int *)(v106 + 28);
          uint64_t v538 = &v531[v537];
          uint64_t v539 = &v532[v537];
          uint64_t v540 = sub_23309B300();
          uint64_t v541 = *(void *)(v540 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v541 + 48))(v539, 1, v540))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v538, v539, *(void *)(*(void *)(v542 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v541 + 16))(v538, v539, v540);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v541 + 56))(v538, 0, 1, v540);
          }
          uint64_t v4 = v535;
          uint64_t v543 = *(int *)(v106 + 32);
          uint64_t v544 = &v531[v543];
          uint64_t v545 = &v532[v543];
          uint64_t v546 = v545[1];
          void *v544 = *v545;
          v544[1] = v546;
          uint64_t v547 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v680 + 56);
          swift_bridgeObjectRetain();
          v547(v531, 0, 1, v106);
          uint64_t v107 = v686;
        }
        uint64_t v548 = v107[20];
        uint64_t v549 = (void *)((char *)v8 + v548);
        uint64_t v550 = (void *)((char *)v9 + v548);
        uint64_t v551 = type metadata accessor for Reference();
        uint64_t v712 = *(void *)(v551 - 8);
        uint64_t v552 = *(unsigned int (**)(void, void, void))(v712 + 48);
        if (v552(v550, 1, v551))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v549, v550, *(void *)(*(void *)(v553 - 8) + 64));
          uint64_t v10 = v720;
        }
        else
        {
          v674 = (void *)v551;
          v697 = v552;
          uint64_t v554 = v550[1];
          *uint64_t v549 = *v550;
          v549[1] = v554;
          uint64_t v555 = v550[3];
          v549[2] = v550[2];
          v549[3] = v555;
          uint64_t v556 = *(int *)(v551 + 24);
          uint64_t v666 = (void *)((char *)v549 + v556);
          uint64_t v557 = (void *)((char *)v550 + v556);
          uint64_t v558 = type metadata accessor for Identifier();
          uint64_t v559 = *(void *)(v558 - 8);
          uint64_t v560 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v559 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v560(v557, 1, v558))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v666, v557, *(void *)(*(void *)(v561 - 8) + 64));
            uint64_t v4 = v731;
            uint64_t v10 = v720;
            uint64_t v107 = v686;
            uint64_t v552 = (unsigned int (*)(void, void, void))v697;
            uint64_t v551 = (uint64_t)v674;
          }
          else
          {
            uint64_t v562 = v557[1];
            void *v666 = *v557;
            v666[1] = v562;
            uint64_t v563 = v557[3];
            swift_bridgeObjectRetain();
            if (v563 == 1)
            {
              *((_OWORD *)v666 + 1) = *((_OWORD *)v557 + 1);
              v666[4] = v557[4];
            }
            else
            {
              v666[2] = v557[2];
              v666[3] = v563;
              v666[4] = v557[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            uint64_t v564 = v558;
            uint64_t v551 = (uint64_t)v674;
            uint64_t v565 = *(int *)(v564 + 24);
            v675 = (char *)v666 + v565;
            uint64_t v566 = (char *)v557 + v565;
            uint64_t v567 = sub_23309AF80();
            uint64_t v568 = *(void *)(v567 - 8);
            __dstd = v566;
            int v569 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v568 + 48))(v566, 1, v567);
            uint64_t v10 = v720;
            if (v569)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v675, __dstd, *(void *)(*(void *)(v570 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v568 + 16))(v675, __dstd, v567);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v568 + 56))(v675, 0, 1, v567);
            }
            uint64_t v4 = v731;
            uint64_t v571 = *(int *)(v564 + 28);
            uint64_t v572 = (void *)((char *)v666 + v571);
            uint64_t v573 = (void *)((char *)v557 + v571);
            uint64_t v574 = v573[1];
            void *v572 = *v573;
            v572[1] = v574;
            uint64_t v575 = v564;
            uint64_t v576 = *(void (**)(void *, void, uint64_t, uint64_t))(v559 + 56);
            swift_bridgeObjectRetain();
            v576(v666, 0, 1, v575);
            uint64_t v107 = v686;
            uint64_t v552 = (unsigned int (*)(void, void, void))v697;
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v712 + 56))(v549, 0, 1, v551);
        }
        uint64_t v577 = v107[21];
        uint64_t v578 = (void *)((char *)v8 + v577);
        uint64_t v579 = (void *)((char *)v9 + v577);
        if (v552((char *)v9 + v577, 1, v551))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v578, v579, *(void *)(*(void *)(v580 - 8) + 64));
          uint64_t v5 = v716;
          uint64_t v3 = v726;
        }
        else
        {
          uint64_t v581 = v579[1];
          void *v578 = *v579;
          v578[1] = v581;
          uint64_t v582 = v579[3];
          v578[2] = v579[2];
          v578[3] = v582;
          uint64_t v583 = *(int *)(v551 + 24);
          v683 = v578;
          v698 = (void *)((char *)v578 + v583);
          uint64_t v584 = (void *)((char *)v579 + v583);
          uint64_t v585 = type metadata accessor for Identifier();
          uint64_t v586 = *(void *)(v585 - 8);
          uint64_t v587 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v586 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v587(v584, 1, v585))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v698, v584, *(void *)(*(void *)(v588 - 8) + 64));
            uint64_t v5 = v716;
            uint64_t v10 = v720;
            uint64_t v4 = v731;
          }
          else
          {
            uint64_t v661 = v586;
            uint64_t v589 = v584[1];
            void *v698 = *v584;
            v698[1] = v589;
            uint64_t v590 = v584[3];
            swift_bridgeObjectRetain();
            if (v590 == 1)
            {
              *((_OWORD *)v698 + 1) = *((_OWORD *)v584 + 1);
              v698[4] = v584[4];
              uint64_t v4 = v731;
              uint64_t v591 = (char *)v584;
            }
            else
            {
              v698[2] = v584[2];
              v698[3] = v590;
              uint64_t v591 = (char *)v584;
              v698[4] = v584[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v4 = v731;
            }
            uint64_t v10 = v720;
            uint64_t v592 = *(int *)(v585 + 24);
            v667 = v591;
            uint64_t v676 = (char *)v698 + v592;
            uint64_t v593 = &v591[v592];
            uint64_t v594 = sub_23309AF80();
            uint64_t v595 = *(void *)(v594 - 8);
            uint64_t v596 = v593;
            int v597 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v595 + 48))(v593, 1, v594);
            uint64_t v5 = v716;
            if (v597)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v676, v596, *(void *)(*(void *)(v598 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v595 + 16))(v676, v596, v594);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v595 + 56))(v676, 0, 1, v594);
            }
            uint64_t v599 = *(int *)(v585 + 28);
            uint64_t v600 = (void *)((char *)v698 + v599);
            long long v601 = &v667[v599];
            uint64_t v602 = *((void *)v601 + 1);
            *uint64_t v600 = *(void *)v601;
            v600[1] = v602;
            uint64_t v603 = *(void (**)(void *, void, uint64_t, uint64_t))(v661 + 56);
            swift_bridgeObjectRetain();
            v603(v698, 0, 1, v585);
          }
          uint64_t v107 = v686;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v712 + 56))(v683, 0, 1, v551);
          uint64_t v3 = v726;
        }
        *(void *)((char *)v8 + v107[22]) = *(void *)((char *)v9 + v107[22]);
        uint64_t v503 = v107[23];
        goto LABEL_278;
      case 3u:
        uint64_t v717 = v10;
        uint64_t v721 = v3;
        v727 = v4;
        uint64_t v25 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v25;
        uint64_t v26 = v9[3];
        v8[2] = v9[2];
        v8[3] = v26;
        uint64_t v27 = v9[5];
        v8[4] = v9[4];
        v8[5] = v27;
        uint64_t v28 = v9[7];
        v8[6] = v9[6];
        v8[7] = v28;
        uint64_t v29 = v8;
        uint64_t v30 = v9[9];
        v29[8] = v9[8];
        v29[9] = v30;
        uint64_t v31 = v9[11];
        v29[10] = v9[10];
        v29[11] = v31;
        v29[12] = v9[12];
        uint64_t v668 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v32 = v668[11];
        v699 = v9;
        v701 = v29;
        __dst = (char *)v29 + v32;
        v658 = (char *)v9 + v32;
        uint64_t v33 = type metadata accessor for FHIRDateTime();
        v662 = *(void **)(v33 - 8);
        uint64_t v34 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v662[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v677 = v34;
        if (v34(v658, 1, v33))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(__dst, v658, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v8 = v701;
          uint64_t v3 = v721;
          uint64_t v36 = v668;
        }
        else
        {
          unsigned char *__dst = *v658;
          *((void *)__dst + 1) = *((void *)v658 + 1);
          *((_DWORD *)__dst + 4) = *((_DWORD *)v658 + 4);
          uint64_t v108 = *((void *)v658 + 7);
          if (v108 == 1)
          {
            long long v109 = *(_OWORD *)(v658 + 40);
            *(_OWORD *)(__dst + 24) = *(_OWORD *)(v658 + 24);
            *(_OWORD *)(__dst + 40) = v109;
            *((void *)__dst + 7) = *((void *)v658 + 7);
          }
          else
          {
            __dst[24] = v658[24];
            *(_WORD *)(__dst + 25) = *(_WORD *)(v658 + 25);
            *(_OWORD *)(__dst + 28) = *(_OWORD *)(v658 + 28);
            *((_DWORD *)__dst + 11) = *((_DWORD *)v658 + 11);
            *((void *)__dst + 6) = *((void *)v658 + 6);
            *((void *)__dst + 7) = v108;
            swift_bridgeObjectRetain();
          }
          uint64_t v8 = v701;
          uint64_t v120 = *(int *)(v33 + 28);
          long long v121 = &__dst[v120];
          uint64_t v122 = &v658[v120];
          uint64_t v123 = sub_23309B300();
          uint64_t v124 = *(void *)(v123 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v124 + 16))(v121, v122, v123);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
          }
          uint64_t v3 = v721;
          uint64_t v36 = v668;
          uint64_t v150 = *(int *)(v33 + 32);
          uint64_t v151 = &__dst[v150];
          uint64_t v152 = &v658[v150];
          uint64_t v153 = v152[1];
          *uint64_t v151 = *v152;
          v151[1] = v153;
          uint64_t v154 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v662[7];
          swift_bridgeObjectRetain();
          v154(__dst, 0, 1, v33);
        }
        uint64_t v155 = v36[12];
        uint64_t v156 = (char *)v8 + v155;
        uint64_t v157 = (char *)v9 + v155;
        uint64_t v158 = type metadata accessor for Period();
        uint64_t v159 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v158 - 8);
        v694 = (int *)v33;
        if (v159[6](v157, 1, v158))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
          uint64_t v4 = v727;
          uint64_t v161 = v699;
        }
        else
        {
          __dsta = v159;
          if (v677(v157, 1, v33))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v156, v157, *(void *)(*(void *)(v162 - 8) + 64));
            uint64_t v161 = v699;
          }
          else
          {
            *uint64_t v156 = *v157;
            *((void *)v156 + 1) = *((void *)v157 + 1);
            *((_DWORD *)v156 + 4) = *((_DWORD *)v157 + 4);
            uint64_t v232 = *((void *)v157 + 7);
            if (v232 == 1)
            {
              long long v233 = *(_OWORD *)(v157 + 40);
              *(_OWORD *)(v156 + 24) = *(_OWORD *)(v157 + 24);
              *(_OWORD *)(v156 + 40) = v233;
              *((void *)v156 + 7) = *((void *)v157 + 7);
            }
            else
            {
              v156[24] = v157[24];
              *(_WORD *)(v156 + 25) = *(_WORD *)(v157 + 25);
              *(_OWORD *)(v156 + 28) = *(_OWORD *)(v157 + 28);
              *((_DWORD *)v156 + 11) = *((_DWORD *)v157 + 11);
              *((void *)v156 + 6) = *((void *)v157 + 6);
              *((void *)v156 + 7) = v232;
              swift_bridgeObjectRetain();
            }
            uint64_t v290 = *(int *)(v33 + 28);
            uint64_t v291 = &v156[v290];
            uint64_t v292 = &v157[v290];
            uint64_t v293 = sub_23309B300();
            uint64_t v294 = *(void *)(v293 - 8);
            uint64_t v161 = v699;
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v294 + 48))(v292, 1, v293))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v291, v292, *(void *)(*(void *)(v295 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v294 + 16))(v291, v292, v293);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v294 + 56))(v291, 0, 1, v293);
            }
            uint64_t v33 = (uint64_t)v694;
            uint64_t v318 = v694[8];
            uint64_t v319 = &v156[v318];
            uint64_t v320 = &v157[v318];
            uint64_t v321 = v320[1];
            *uint64_t v319 = *v320;
            v319[1] = v321;
            long long v322 = (void (*)(unsigned char *, void, uint64_t, int *))v662[7];
            swift_bridgeObjectRetain();
            v322(v156, 0, 1, v694);
            uint64_t v3 = v721;
            uint64_t v36 = v668;
          }
          uint64_t v323 = *(int *)(v158 + 20);
          v660 = v156;
          uint64_t v324 = &v156[v323];
          long long v325 = &v157[v323];
          if (v677(v325, 1, v33))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v324, v325, *(void *)(*(void *)(v326 - 8) + 64));
          }
          else
          {
            *uint64_t v324 = *v325;
            *((void *)v324 + 1) = *((void *)v325 + 1);
            *((_DWORD *)v324 + 4) = *((_DWORD *)v325 + 4);
            uint64_t v327 = *((void *)v325 + 7);
            if (v327 == 1)
            {
              long long v328 = *(_OWORD *)(v325 + 40);
              *(_OWORD *)(v324 + 24) = *(_OWORD *)(v325 + 24);
              *(_OWORD *)(v324 + 40) = v328;
              *((void *)v324 + 7) = *((void *)v325 + 7);
            }
            else
            {
              v324[24] = v325[24];
              *(_WORD *)(v324 + 25) = *(_WORD *)(v325 + 25);
              *(_OWORD *)(v324 + 28) = *(_OWORD *)(v325 + 28);
              *((_DWORD *)v324 + 11) = *((_DWORD *)v325 + 11);
              *((void *)v324 + 6) = *((void *)v325 + 6);
              *((void *)v324 + 7) = v327;
              swift_bridgeObjectRetain();
            }
            uint64_t v329 = v694[7];
            uint64_t v330 = &v324[v329];
            uint64_t v331 = &v325[v329];
            uint64_t v332 = sub_23309B300();
            uint64_t v333 = *(void *)(v332 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v333 + 48))(v331, 1, v332))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v330, v331, *(void *)(*(void *)(v334 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v333 + 16))(v330, v331, v332);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v333 + 56))(v330, 0, 1, v332);
            }
            uint64_t v389 = v694[8];
            uint64_t v390 = &v324[v389];
            uint64_t v391 = &v325[v389];
            uint64_t v392 = v391[1];
            void *v390 = *v391;
            v390[1] = v392;
            uint64_t v393 = (void (*)(unsigned char *, void, uint64_t, int *))v662[7];
            swift_bridgeObjectRetain();
            v393(v324, 0, 1, v694);
            uint64_t v3 = v721;
            uint64_t v36 = v668;
            uint64_t v8 = v701;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))__dsta + 7))(v660, 0, 1, v158);
          uint64_t v4 = v727;
        }
        uint64_t v394 = v36[13];
        uint64_t v395 = (char *)v8 + v394;
        long long v396 = (char *)v161 + v394;
        if (v677((unsigned char *)v161 + v394, 1, (uint64_t)v694))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v395, v396, *(void *)(*(void *)(v397 - 8) + 64));
          uint64_t v10 = v717;
        }
        else
        {
          *uint64_t v395 = *v396;
          *((void *)v395 + 1) = *((void *)v396 + 1);
          *((_DWORD *)v395 + 4) = *((_DWORD *)v396 + 4);
          uint64_t v398 = *((void *)v396 + 7);
          if (v398 == 1)
          {
            long long v399 = *(_OWORD *)(v396 + 40);
            *(_OWORD *)(v395 + 24) = *(_OWORD *)(v396 + 24);
            *(_OWORD *)(v395 + 40) = v399;
            *((void *)v395 + 7) = *((void *)v396 + 7);
          }
          else
          {
            v395[24] = v396[24];
            *(_WORD *)(v395 + 25) = *(_WORD *)(v396 + 25);
            *(_OWORD *)(v395 + 28) = *(_OWORD *)(v396 + 28);
            *((_DWORD *)v395 + 11) = *((_DWORD *)v396 + 11);
            *((void *)v395 + 6) = *((void *)v396 + 6);
            *((void *)v395 + 7) = v398;
            swift_bridgeObjectRetain();
          }
          uint64_t v400 = v694[7];
          uint64_t v401 = &v395[v400];
          uint64_t v402 = &v396[v400];
          uint64_t v403 = sub_23309B300();
          uint64_t v404 = *(void *)(v403 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v404 + 48))(v402, 1, v403))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v401, v402, *(void *)(*(void *)(v405 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v404 + 16))(v401, v402, v403);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v404 + 56))(v401, 0, 1, v403);
          }
          uint64_t v3 = v721;
          uint64_t v4 = v727;
          uint64_t v406 = v694[8];
          uint64_t v407 = &v395[v406];
          uint64_t v408 = &v396[v406];
          uint64_t v409 = v408[1];
          *uint64_t v407 = *v408;
          v407[1] = v409;
          uint64_t v36 = v668;
          uint64_t v410 = (void (*)(unsigned char *, void, uint64_t, int *))v662[7];
          swift_bridgeObjectRetain();
          v410(v395, 0, 1, v694);
          uint64_t v10 = v717;
          uint64_t v8 = v701;
        }
        *(void *)((char *)v8 + v36[14]) = *(void *)((char *)v161 + v36[14]);
        *(void *)((char *)v8 + v36[15]) = *(void *)((char *)v161 + v36[15]);
        uint64_t v411 = v36[16];
        uint64_t v412 = (void *)((char *)v8 + v411);
        uint64_t v413 = (void *)((char *)v161 + v411);
        uint64_t v414 = v413[1];
        void *v412 = *v413;
        v412[1] = v414;
        goto LABEL_188;
      case 4u:
        uint64_t v718 = v10;
        v728 = v4;
        uint64_t v713 = v5;
        uint64_t v37 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v37;
        uint64_t v38 = v9[3];
        v8[2] = v9[2];
        v8[3] = v38;
        uint64_t v39 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v39 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v40 = v9[5];
        uint64_t v41 = v9[6];
        v8[4] = v39;
        v8[5] = v40;
        uint64_t v42 = v9[7];
        uint64_t v43 = v9[8];
        v8[6] = v41;
        v8[7] = v42;
        uint64_t v44 = v9[9];
        uint64_t v45 = v9[10];
        v8[8] = v43;
        v8[9] = v44;
        uint64_t v46 = v9[11];
        uint64_t v47 = v9[12];
        v8[10] = v45;
        v8[11] = v46;
        v8[12] = v47;
        uint64_t v48 = type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v49 = *(int *)(v48 + 44);
        uint64_t v700 = v9;
        v702 = v8;
        v684 = (char *)v8 + v49;
        v691 = (int *)v48;
        uint64_t v50 = (char *)v9 + v49;
        uint64_t v51 = type metadata accessor for FHIRDateTime();
        uint64_t v678 = *(void *)(v51 - 8);
        uint64_t v52 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v678 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v659 = v52;
        uint64_t v722 = v3;
        v669 = (int *)v51;
        if (v52(v50, 1, v51))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v684, v50, *(void *)(*(void *)(v53 - 8) + 64));
          uint64_t v54 = v700;
          uint64_t v8 = v702;
        }
        else
        {
          unsigned char *v684 = *v50;
          *((void *)v684 + 1) = *((void *)v50 + 1);
          *((_DWORD *)v684 + 4) = *((_DWORD *)v50 + 4);
          uint64_t v110 = *((void *)v50 + 7);
          if (v110 == 1)
          {
            long long v111 = *(_OWORD *)(v50 + 40);
            *(_OWORD *)(v684 + 24) = *(_OWORD *)(v50 + 24);
            *(_OWORD *)(v684 + 40) = v111;
            *((void *)v684 + 7) = *((void *)v50 + 7);
          }
          else
          {
            v684[24] = v50[24];
            *(_WORD *)(v684 + 25) = *(_WORD *)(v50 + 25);
            *(_OWORD *)(v684 + 28) = *(_OWORD *)(v50 + 28);
            *((_DWORD *)v684 + 11) = *((_DWORD *)v50 + 11);
            *((void *)v684 + 6) = *((void *)v50 + 6);
            *((void *)v684 + 7) = v110;
            swift_bridgeObjectRetain();
          }
          uint64_t v54 = v700;
          uint64_t v8 = v702;
          uint64_t v126 = *(int *)(v51 + 28);
          uint64_t v127 = &v684[v126];
          uint64_t v128 = &v50[v126];
          uint64_t v129 = sub_23309B300();
          uint64_t v130 = *(void *)(v129 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v130 + 16))(v127, v128, v129);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
          }
          uint64_t v163 = *(int *)(v51 + 32);
          uint64_t v164 = &v684[v163];
          uint64_t v165 = &v50[v163];
          uint64_t v166 = v165[1];
          void *v164 = *v165;
          v164[1] = v166;
          uint64_t v167 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v678 + 56);
          swift_bridgeObjectRetain();
          v167(v684, 0, 1, v51);
        }
        uint64_t v168 = v691[12];
        uint64_t v169 = (void *)((char *)v8 + v168);
        uint64_t v170 = (void *)((char *)v54 + v168);
        uint64_t v171 = v170[1];
        *uint64_t v169 = *v170;
        v169[1] = v171;
        *(void *)((char *)v8 + v691[13]) = *(void *)((char *)v54 + v691[13]);
        *(void *)((char *)v8 + v691[14]) = *(void *)((char *)v54 + v691[14]);
        uint64_t v172 = v691[15];
        uint64_t v173 = (void *)((char *)v8 + v172);
        uint64_t v174 = (void *)((char *)v54 + v172);
        uint64_t v175 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v176 = *(void **)(v175 - 8);
        uint64_t v177 = (unsigned int (*)(void *, uint64_t, uint64_t))v176[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v177(v174, 1, v175))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v173, v174, *(void *)(*(void *)(v178 - 8) + 64));
          uint64_t v5 = v713;
          uint64_t v10 = v718;
          uint64_t v3 = v722;
          uint64_t v4 = v728;
        }
        else
        {
          __dstb = v176;
          void *v173 = *v174;
          v688 = (void *)v175;
          uint64_t v179 = *(int *)(v175 + 20);
          uint64_t v180 = (char *)v173 + v179;
          long long v181 = (char *)v174 + v179;
          uint64_t v182 = type metadata accessor for Period();
          uint64_t v183 = *(void **)(v182 - 8);
          uint64_t v184 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v183[6];
          swift_bridgeObjectRetain();
          uint64_t v706 = v173;
          if (v184(v181, 1, v182))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v180, v181, *(void *)(*(void *)(v185 - 8) + 64));
            uint64_t v3 = v722;
            uint64_t v4 = v728;
            uint64_t v10 = v718;
            uint64_t v186 = (void (**)(void *, void, uint64_t, void *))__dstb;
          }
          else
          {
            v650 = v183;
            uint64_t v234 = v182;
            v652 = v180;
            if (v659(v181, 1, v51))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v180, v181, *(void *)(*(void *)(v235 - 8) + 64));
              uint64_t v236 = v180;
              uint64_t v3 = v722;
              uint64_t v10 = v718;
              uint64_t v237 = (int *)v51;
              uint64_t v186 = (void (**)(void *, void, uint64_t, void *))__dstb;
            }
            else
            {
              *uint64_t v180 = *v181;
              *((void *)v180 + 1) = *((void *)v181 + 1);
              *((_DWORD *)v180 + 4) = *((_DWORD *)v181 + 4);
              uint64_t v316 = *((void *)v181 + 7);
              if (v316 == 1)
              {
                long long v317 = *(_OWORD *)(v181 + 40);
                *(_OWORD *)(v180 + 24) = *(_OWORD *)(v181 + 24);
                *(_OWORD *)(v180 + 40) = v317;
                *((void *)v180 + 7) = *((void *)v181 + 7);
              }
              else
              {
                v180[24] = v181[24];
                *(_WORD *)(v180 + 25) = *(_WORD *)(v181 + 25);
                *(_OWORD *)(v180 + 28) = *(_OWORD *)(v181 + 28);
                *((_DWORD *)v180 + 11) = *((_DWORD *)v181 + 11);
                *((void *)v180 + 6) = *((void *)v181 + 6);
                *((void *)v180 + 7) = v316;
                swift_bridgeObjectRetain();
              }
              uint64_t v186 = (void (**)(void *, void, uint64_t, void *))__dstb;
              uint64_t v613 = v182;
              uint64_t v614 = v669[7];
              uint64_t v615 = &v180[v614];
              uint64_t v616 = &v181[v614];
              uint64_t v617 = sub_23309B300();
              uint64_t v618 = *(void *)(v617 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v618 + 48))(v616, 1, v617))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v615, v616, *(void *)(*(void *)(v619 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v618 + 16))(v615, v616, v617);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v618 + 56))(v615, 0, 1, v617);
              }
              uint64_t v3 = v722;
              uint64_t v10 = v718;
              uint64_t v237 = v669;
              uint64_t v620 = v669[8];
              uint64_t v236 = v652;
              uint64_t v621 = &v652[v620];
              v622 = &v181[v620];
              uint64_t v623 = v622[1];
              *uint64_t v621 = *v622;
              v621[1] = v623;
              uint64_t v624 = *(void (**)(unsigned char *, void, uint64_t, int *))(v678 + 56);
              swift_bridgeObjectRetain();
              v624(v652, 0, 1, v669);
              uint64_t v234 = v613;
            }
            uint64_t v625 = *(int *)(v234 + 20);
            long long v626 = &v236[v625];
            uint64_t v627 = &v181[v625];
            if (v659(&v181[v625], 1, (uint64_t)v237))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v626, v627, *(void *)(*(void *)(v628 - 8) + 64));
              uint64_t v629 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v650;
            }
            else
            {
              *long long v626 = *v627;
              *((void *)v626 + 1) = *((void *)v627 + 1);
              *((_DWORD *)v626 + 4) = *((_DWORD *)v627 + 4);
              uint64_t v630 = *((void *)v627 + 7);
              uint64_t v631 = v626;
              uint64_t v629 = (void (**)(unsigned char *, void, uint64_t, uint64_t))v650;
              uint64_t v649 = v234;
              if (v630 == 1)
              {
                long long v632 = *(_OWORD *)(v627 + 40);
                *(_OWORD *)(v631 + 24) = *(_OWORD *)(v627 + 24);
                *(_OWORD *)(v631 + 40) = v632;
                *((void *)v631 + 7) = *((void *)v627 + 7);
              }
              else
              {
                v631[24] = v627[24];
                *(_WORD *)(v631 + 25) = *(_WORD *)(v627 + 25);
                *(_OWORD *)(v631 + 28) = *(_OWORD *)(v627 + 28);
                *((_DWORD *)v631 + 11) = *((_DWORD *)v627 + 11);
                *((void *)v631 + 6) = *((void *)v627 + 6);
                *((void *)v631 + 7) = v630;
                swift_bridgeObjectRetain();
              }
              uint64_t v633 = v669[7];
              uint64_t v634 = v631;
              v635 = &v631[v633];
              uint64_t v636 = &v627[v633];
              uint64_t v637 = sub_23309B300();
              uint64_t v638 = *(void *)(v637 - 8);
              if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v638 + 48))(v636, 1, v637))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v635, v636, *(void *)(*(void *)(v639 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v638 + 16))(v635, v636, v637);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v638 + 56))(v635, 0, 1, v637);
              }
              uint64_t v3 = v722;
              uint64_t v10 = v718;
              uint64_t v640 = v669[8];
              uint64_t v641 = &v634[v640];
              uint64_t v642 = &v627[v640];
              uint64_t v643 = v642[1];
              *uint64_t v641 = *v642;
              v641[1] = v643;
              uint64_t v644 = *(void (**)(unsigned char *, void, uint64_t, int *))(v678 + 56);
              swift_bridgeObjectRetain();
              v644(v634, 0, 1, v669);
              uint64_t v234 = v649;
            }
            v629[7](v652, 0, 1, v234);
            uint64_t v4 = v728;
          }
          v186[7](v706, 0, 1, v688);
          uint64_t v5 = v713;
        }
        uint64_t v645 = v691[16];
        uint64_t v646 = (void *)((char *)v8 + v645);
        v647 = (void *)((char *)v700 + v645);
        uint64_t v648 = v647[1];
        *uint64_t v646 = *v647;
        v646[1] = v648;
        goto LABEL_280;
      case 5u:
        uint64_t v719 = v10;
        uint64_t v723 = v3;
        v729 = v4;
        uint64_t v714 = v5;
        uint64_t v55 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v55;
        uint64_t v56 = v9[3];
        v8[2] = v9[2];
        v8[3] = v56;
        uint64_t v57 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v57 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v58 = v9[5];
        uint64_t v59 = v9[6];
        v8[4] = v57;
        v8[5] = v58;
        uint64_t v60 = v9[7];
        v8[6] = v59;
        v8[7] = v60;
        *(void *)((char *)v8 + 61) = *(void *)((char *)v9 + 61);
        v8[9] = v9[9];
        uint64_t v61 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v62 = v61[10];
        long long v63 = (char *)v8 + v62;
        uint64_t v64 = (char *)v9 + v62;
        uint64_t v65 = type metadata accessor for FHIRDateTime();
        uint64_t v66 = *(void *)(v65 - 8);
        uint64_t v67 = *(unsigned int (**)(void, void, void))(v66 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v67(v64, 1, v65))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v63, v64, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          *long long v63 = *v64;
          *((void *)v63 + 1) = *((void *)v64 + 1);
          *((_DWORD *)v63 + 4) = *((_DWORD *)v64 + 4);
          uint64_t v112 = *((void *)v64 + 7);
          v693 = v67;
          uint64_t v705 = v66;
          if (v112 == 1)
          {
            long long v113 = *(_OWORD *)(v64 + 40);
            *(_OWORD *)(v63 + 24) = *(_OWORD *)(v64 + 24);
            *(_OWORD *)(v63 + 40) = v113;
            *((void *)v63 + 7) = *((void *)v64 + 7);
          }
          else
          {
            v63[24] = v64[24];
            *(_WORD *)(v63 + 25) = *(_WORD *)(v64 + 25);
            *(_OWORD *)(v63 + 28) = *(_OWORD *)(v64 + 28);
            *((_DWORD *)v63 + 11) = *((_DWORD *)v64 + 11);
            *((void *)v63 + 6) = *((void *)v64 + 6);
            *((void *)v63 + 7) = v112;
            swift_bridgeObjectRetain();
          }
          uint64_t v132 = *(int *)(v65 + 28);
          v687 = &v63[v132];
          uint64_t v133 = &v64[v132];
          uint64_t v134 = sub_23309B300();
          uint64_t v135 = *(void *)(v134 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v687, v133, *(void *)(*(void *)(v136 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v135 + 16))(v687, v133, v134);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v135 + 56))(v687, 0, 1, v134);
          }
          uint64_t v66 = v705;
          uint64_t v187 = *(int *)(v65 + 32);
          uint64_t v188 = &v63[v187];
          uint64_t v189 = &v64[v187];
          uint64_t v190 = v189[1];
          void *v188 = *v189;
          v188[1] = v190;
          uint64_t v191 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v705 + 56);
          swift_bridgeObjectRetain();
          v191(v63, 0, 1, v65);
          uint64_t v67 = (unsigned int (*)(void, void, void))v693;
        }
        *(void *)((char *)v8 + v61[11]) = *(void *)((char *)v9 + v61[11]);
        uint64_t v192 = v61[12];
        uint64_t v193 = (char *)v8 + v192;
        uint64_t v194 = (char *)v9 + v192;
        swift_bridgeObjectRetain();
        if (v67(v194, 1, v65))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v193, v194, *(void *)(*(void *)(v195 - 8) + 64));
        }
        else
        {
          *uint64_t v193 = *v194;
          *((void *)v193 + 1) = *((void *)v194 + 1);
          *((_DWORD *)v193 + 4) = *((_DWORD *)v194 + 4);
          uint64_t v196 = *((void *)v194 + 7);
          uint64_t v707 = v66;
          if (v196 == 1)
          {
            long long v197 = *(_OWORD *)(v194 + 40);
            *(_OWORD *)(v193 + 24) = *(_OWORD *)(v194 + 24);
            *(_OWORD *)(v193 + 40) = v197;
            *((void *)v193 + 7) = *((void *)v194 + 7);
          }
          else
          {
            v193[24] = v194[24];
            *(_WORD *)(v193 + 25) = *(_WORD *)(v194 + 25);
            *(_OWORD *)(v193 + 28) = *(_OWORD *)(v194 + 28);
            *((_DWORD *)v193 + 11) = *((_DWORD *)v194 + 11);
            *((void *)v193 + 6) = *((void *)v194 + 6);
            *((void *)v193 + 7) = v196;
            swift_bridgeObjectRetain();
          }
          uint64_t v198 = *(int *)(v65 + 28);
          v695 = &v193[v198];
          uint64_t v199 = &v194[v198];
          uint64_t v200 = sub_23309B300();
          uint64_t v201 = *(void *)(v200 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v201 + 48))(v199, 1, v200))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v695, v199, *(void *)(*(void *)(v202 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v201 + 16))(v695, v199, v200);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v201 + 56))(v695, 0, 1, v200);
          }
          uint64_t v238 = *(int *)(v65 + 32);
          long long v239 = &v193[v238];
          uint64_t v240 = &v194[v238];
          uint64_t v241 = v240[1];
          *long long v239 = *v240;
          v239[1] = v241;
          uint64_t v242 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v707 + 56);
          swift_bridgeObjectRetain();
          v242(v193, 0, 1, v65);
        }
        uint64_t v243 = v61[13];
        uint64_t v244 = (void *)((char *)v8 + v243);
        uint64_t v245 = (void *)((char *)v9 + v243);
        uint64_t v246 = v245[1];
        *uint64_t v244 = *v245;
        v244[1] = v246;
        v244[2] = v245[2];
        v709 = v61;
        uint64_t v247 = v61[14];
        uint64_t v248 = (void *)((char *)v8 + v247);
        uint64_t v249 = (void *)((char *)v9 + v247);
        uint64_t v250 = type metadata accessor for Reference();
        uint64_t v251 = *(void *)(v250 - 8);
        uint64_t v252 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v251 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v252(v249, 1, v250))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v248, v249, *(void *)(*(void *)(v253 - 8) + 64));
          uint64_t v3 = v723;
          uint64_t v4 = v729;
          uint64_t v254 = v709;
        }
        else
        {
          uint64_t v681 = v251;
          v689 = (void *)v250;
          uint64_t v255 = v249[1];
          void *v248 = *v249;
          v248[1] = v255;
          uint64_t v256 = v249[3];
          v248[2] = v249[2];
          v248[3] = v256;
          uint64_t v257 = *(int *)(v250 + 24);
          v696 = v248;
          uint64_t v258 = (void *)((char *)v248 + v257);
          uint64_t v259 = (void *)((char *)v249 + v257);
          uint64_t v260 = type metadata accessor for Identifier();
          uint64_t v261 = *(void *)(v260 - 8);
          uint64_t v262 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v261 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v262(v259, 1, v260))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v258, v259, *(void *)(*(void *)(v263 - 8) + 64));
            uint64_t v4 = v729;
            uint64_t v265 = v681;
            uint64_t v264 = v689;
            uint64_t v266 = v696;
            uint64_t v254 = v709;
          }
          else
          {
            uint64_t v283 = v261;
            uint64_t v284 = v259[1];
            void *v258 = *v259;
            v258[1] = v284;
            uint64_t v285 = v259[3];
            swift_bridgeObjectRetain();
            uint64_t v286 = v258;
            if (v285 == 1)
            {
              *((_OWORD *)v258 + 1) = *((_OWORD *)v259 + 1);
              v258[4] = v259[4];
            }
            else
            {
              v258[2] = v259[2];
              v258[3] = v285;
              v258[4] = v259[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            v672 = (int *)v260;
            uint64_t v302 = *(int *)(v260 + 24);
            uint64_t v303 = (char *)v258 + v302;
            uint64_t v304 = (char *)v259 + v302;
            uint64_t v305 = sub_23309AF80();
            uint64_t v306 = *(void *)(v305 - 8);
            uint64_t v307 = v304;
            int v308 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v306 + 48))(v304, 1, v305);
            uint64_t v254 = v709;
            if (v308)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v303, v307, *(void *)(*(void *)(v309 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v306 + 16))(v303, v307, v305);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v306 + 56))(v303, 0, 1, v305);
            }
            uint64_t v265 = v681;
            uint64_t v351 = v672[7];
            uint64_t v352 = (void *)((char *)v286 + v351);
            uint64_t v353 = (void *)((char *)v259 + v351);
            uint64_t v354 = v353[1];
            void *v352 = *v353;
            v352[1] = v354;
            uint64_t v355 = *(void (**)(void *, void, uint64_t, int *))(v283 + 56);
            swift_bridgeObjectRetain();
            v355(v286, 0, 1, v672);
            uint64_t v4 = v729;
            uint64_t v264 = v689;
            uint64_t v266 = v696;
          }
          (*(void (**)(void *, void, uint64_t, void *))(v265 + 56))(v266, 0, 1, v264);
          uint64_t v3 = v723;
        }
        *((unsigned char *)v8 + v254[15]) = *((unsigned char *)v9 + v254[15]);
        uint64_t v356 = v254[16];
        uint64_t v357 = (void *)((char *)v8 + v356);
        uint64_t v358 = (void *)((char *)v9 + v356);
        uint64_t v359 = v358[1];
        *uint64_t v357 = *v358;
        v357[1] = v359;
        *(void *)((char *)v8 + v254[17]) = *(void *)((char *)v9 + v254[17]);
        *((unsigned char *)v8 + v254[18]) = *((unsigned char *)v9 + v254[18]);
        uint64_t v360 = v254[19];
        uint64_t v361 = (char *)v8 + v360;
        long long v362 = (char *)v9 + v360;
        uint64_t v363 = *(void *)((char *)v9 + v360);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v363 == 1)
        {
          long long v364 = *((_OWORD *)v362 + 1);
          *(_OWORD *)uint64_t v361 = *(_OWORD *)v362;
          *((_OWORD *)v361 + 1) = v364;
          *((_OWORD *)v361 + 2) = *((_OWORD *)v362 + 2);
          *((void *)v361 + 6) = *((void *)v362 + 6);
        }
        else
        {
          *(void *)uint64_t v361 = v363;
          uint64_t v365 = *((void *)v362 + 2);
          swift_bridgeObjectRetain();
          if (v365 == 1)
          {
            *(_OWORD *)(v361 + 8) = *(_OWORD *)(v362 + 8);
            *((void *)v361 + 3) = *((void *)v362 + 3);
          }
          else
          {
            *((void *)v361 + 1) = *((void *)v362 + 1);
            *((void *)v361 + 2) = v365;
            *((void *)v361 + 3) = *((void *)v362 + 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v366 = *((void *)v362 + 5);
          *((void *)v361 + 4) = *((void *)v362 + 4);
          *((void *)v361 + 5) = v366;
          *((void *)v361 + 6) = *((void *)v362 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v367 = v254[20];
        uint64_t v368 = (void *)((char *)v8 + v367);
        uint64_t v369 = (void *)((char *)v9 + v367);
        uint64_t v370 = v369[1];
        *uint64_t v368 = *v369;
        v368[1] = v370;
        uint64_t v5 = v714;
        uint64_t v10 = v719;
        goto LABEL_280;
      case 6u:
        uint64_t v724 = v3;
        v730 = v4;
        uint64_t v715 = v5;
        uint64_t v69 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v69;
        uint64_t v70 = v9[3];
        v8[2] = v9[2];
        v8[3] = v70;
        uint64_t v71 = v9[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v71 != 1) {
          swift_bridgeObjectRetain();
        }
        uint64_t v72 = v9[5];
        uint64_t v73 = v9[6];
        v8[4] = v71;
        v8[5] = v72;
        uint64_t v75 = v9[7];
        uint64_t v74 = v9[8];
        v8[6] = v73;
        v8[7] = v75;
        uint64_t v77 = v9[9];
        uint64_t v76 = v9[10];
        v8[8] = v74;
        v8[9] = v77;
        v8[10] = v76;
        v692 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v78 = v692[10];
        uint64_t v703 = v8;
        uint64_t v663 = (char *)v8 + v78;
        uint64_t v79 = (char *)v9 + v78;
        uint64_t v80 = type metadata accessor for FHIRDateTime();
        v685 = *(void **)(v80 - 8);
        uint64_t v81 = (unsigned int (*)(void, void, void))v685[6];
        uint64_t v82 = v79;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v670 = v81;
        uint64_t v679 = v80;
        if (v81(v79, 1, v80))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v663, v79, *(void *)(*(void *)(v83 - 8) + 64));
          uint64_t v84 = v692;
          uint64_t v8 = v703;
        }
        else
        {
          *uint64_t v663 = *v79;
          *((void *)v663 + 1) = *((void *)v79 + 1);
          *((_DWORD *)v663 + 4) = *((_DWORD *)v79 + 4);
          uint64_t v114 = *((void *)v79 + 7);
          uint64_t v115 = v10;
          if (v114 == 1)
          {
            long long v116 = *(_OWORD *)(v79 + 40);
            *(_OWORD *)(v663 + 24) = *(_OWORD *)(v79 + 24);
            *(_OWORD *)(v663 + 40) = v116;
            *((void *)v663 + 7) = *((void *)v79 + 7);
          }
          else
          {
            v663[24] = v79[24];
            *(_WORD *)(v663 + 25) = *(_WORD *)(v79 + 25);
            *(_OWORD *)(v663 + 28) = *(_OWORD *)(v79 + 28);
            *((_DWORD *)v663 + 11) = *((_DWORD *)v79 + 11);
            *((void *)v663 + 6) = *((void *)v79 + 6);
            *((void *)v663 + 7) = v114;
            swift_bridgeObjectRetain();
          }
          uint64_t v84 = v692;
          uint64_t v8 = v703;
          uint64_t v137 = *(int *)(v80 + 28);
          uint64_t v138 = &v663[v137];
          uint64_t v139 = v82;
          uint64_t v140 = &v82[v137];
          uint64_t v141 = sub_23309B300();
          uint64_t v142 = *(void *)(v141 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v138, v140, *(void *)(*(void *)(v143 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v142 + 16))(v138, v140, v141);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v142 + 56))(v138, 0, 1, v141);
          }
          uint64_t v10 = v115;
          uint64_t v80 = v679;
          uint64_t v203 = *(int *)(v679 + 32);
          uint64_t v204 = &v663[v203];
          uint64_t v205 = &v139[v203];
          uint64_t v206 = v205[1];
          void *v204 = *v205;
          v204[1] = v206;
          uint64_t v207 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v685[7];
          swift_bridgeObjectRetain();
          v207(v663, 0, 1, v679);
          uint64_t v81 = (unsigned int (*)(void, void, void))v670;
        }
        uint64_t v208 = v84[11];
        uint64_t v209 = (char *)v8 + v208;
        uint64_t v210 = (char *)v9 + v208;
        if (v81((char *)v9 + v208, 1, v80))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v209, v210, *(void *)(*(void *)(v211 - 8) + 64));
        }
        else
        {
          *uint64_t v209 = *v210;
          *((void *)v209 + 1) = *((void *)v210 + 1);
          *((_DWORD *)v209 + 4) = *((_DWORD *)v210 + 4);
          uint64_t v212 = *((void *)v210 + 7);
          uint64_t v213 = v10;
          if (v212 == 1)
          {
            long long v214 = *(_OWORD *)(v210 + 40);
            *(_OWORD *)(v209 + 24) = *(_OWORD *)(v210 + 24);
            *(_OWORD *)(v209 + 40) = v214;
            *((void *)v209 + 7) = *((void *)v210 + 7);
          }
          else
          {
            v209[24] = v210[24];
            *(_WORD *)(v209 + 25) = *(_WORD *)(v210 + 25);
            *(_OWORD *)(v209 + 28) = *(_OWORD *)(v210 + 28);
            *((_DWORD *)v209 + 11) = *((_DWORD *)v210 + 11);
            *((void *)v209 + 6) = *((void *)v210 + 6);
            *((void *)v209 + 7) = v212;
            swift_bridgeObjectRetain();
          }
          uint64_t v215 = *(int *)(v80 + 28);
          uint64_t v216 = &v209[v215];
          uint64_t v217 = &v210[v215];
          uint64_t v218 = sub_23309B300();
          uint64_t v219 = *(void *)(v218 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v216, v217, *(void *)(*(void *)(v220 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v219 + 16))(v216, v217, v218);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
          }
          uint64_t v10 = v213;
          uint64_t v80 = v679;
          uint64_t v267 = *(int *)(v679 + 32);
          uint64_t v268 = &v209[v267];
          uint64_t v269 = &v210[v267];
          uint64_t v270 = v269[1];
          void *v268 = *v269;
          v268[1] = v270;
          uint64_t v271 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v685[7];
          swift_bridgeObjectRetain();
          v271(v209, 0, 1, v679);
          uint64_t v81 = (unsigned int (*)(void, void, void))v670;
        }
        uint64_t v272 = v84[12];
        uint64_t v273 = (char *)v8 + v272;
        uint64_t v274 = (char *)v9 + v272;
        uint64_t v275 = type metadata accessor for Period();
        uint64_t v276 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v275 - 8);
        if (v276[6](v274, 1, v275))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v273, v274, *(void *)(*(void *)(v277 - 8) + 64));
          uint64_t v278 = v692;
        }
        else
        {
          uint64_t v665 = v276;
          v710 = v273;
          if (v81(v274, 1, v80))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v273, v274, *(void *)(*(void *)(v279 - 8) + 64));
            uint64_t v280 = v275;
            uint64_t v278 = v692;
          }
          else
          {
            unsigned char *v273 = *v274;
            *((void *)v273 + 1) = *((void *)v274 + 1);
            *((_DWORD *)v273 + 4) = *((_DWORD *)v274 + 4);
            uint64_t v287 = *((void *)v274 + 7);
            uint64_t v288 = v10;
            if (v287 == 1)
            {
              long long v289 = *(_OWORD *)(v274 + 40);
              *(_OWORD *)(v273 + 24) = *(_OWORD *)(v274 + 24);
              *(_OWORD *)(v273 + 40) = v289;
              *((void *)v273 + 7) = *((void *)v274 + 7);
            }
            else
            {
              v273[24] = v274[24];
              *(_WORD *)(v273 + 25) = *(_WORD *)(v274 + 25);
              *(_OWORD *)(v273 + 28) = *(_OWORD *)(v274 + 28);
              *((_DWORD *)v273 + 11) = *((_DWORD *)v274 + 11);
              *((void *)v273 + 6) = *((void *)v274 + 6);
              *((void *)v273 + 7) = v287;
              swift_bridgeObjectRetain();
            }
            uint64_t v310 = *(int *)(v80 + 28);
            uint64_t v311 = &v273[v310];
            uint64_t v312 = &v274[v310];
            uint64_t v313 = sub_23309B300();
            uint64_t v314 = *(void *)(v313 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v314 + 48))(v312, 1, v313))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v311, v312, *(void *)(*(void *)(v315 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v314 + 16))(v311, v312, v313);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v314 + 56))(v311, 0, 1, v313);
            }
            uint64_t v371 = *(int *)(v679 + 32);
            uint64_t v273 = v710;
            uint64_t v372 = &v710[v371];
            uint64_t v373 = &v274[v371];
            uint64_t v374 = v373[1];
            void *v372 = *v373;
            v372[1] = v374;
            uint64_t v375 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v685[7];
            swift_bridgeObjectRetain();
            v375(v710, 0, 1, v679);
            uint64_t v80 = v679;
            uint64_t v10 = v288;
            uint64_t v278 = v692;
            uint64_t v81 = (unsigned int (*)(void, void, void))v670;
            uint64_t v280 = v275;
          }
          uint64_t v376 = *(int *)(v280 + 20);
          uint64_t v377 = &v273[v376];
          uint64_t v378 = &v274[v376];
          if (v81(v378, 1, v80))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v377, v378, *(void *)(*(void *)(v379 - 8) + 64));
          }
          else
          {
            *uint64_t v377 = *v378;
            *((void *)v377 + 1) = *((void *)v378 + 1);
            *((_DWORD *)v377 + 4) = *((_DWORD *)v378 + 4);
            uint64_t v380 = *((void *)v378 + 7);
            uint64_t v381 = v10;
            if (v380 == 1)
            {
              long long v382 = *(_OWORD *)(v378 + 40);
              *(_OWORD *)(v377 + 24) = *(_OWORD *)(v378 + 24);
              *(_OWORD *)(v377 + 40) = v382;
              *((void *)v377 + 7) = *((void *)v378 + 7);
            }
            else
            {
              v377[24] = v378[24];
              *(_WORD *)(v377 + 25) = *(_WORD *)(v378 + 25);
              *(_OWORD *)(v377 + 28) = *(_OWORD *)(v378 + 28);
              *((_DWORD *)v377 + 11) = *((_DWORD *)v378 + 11);
              *((void *)v377 + 6) = *((void *)v378 + 6);
              *((void *)v377 + 7) = v380;
              swift_bridgeObjectRetain();
            }
            uint64_t v383 = *(int *)(v80 + 28);
            uint64_t v384 = &v377[v383];
            uint64_t v385 = &v378[v383];
            uint64_t v386 = sub_23309B300();
            uint64_t v387 = *(void *)(v386 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v387 + 48))(v385, 1, v386))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v384, v385, *(void *)(*(void *)(v388 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v387 + 16))(v384, v385, v386);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v387 + 56))(v384, 0, 1, v386);
            }
            uint64_t v10 = v381;
            uint64_t v455 = *(int *)(v679 + 32);
            uint64_t v456 = &v377[v455];
            uint64_t v457 = &v378[v455];
            uint64_t v458 = v457[1];
            void *v456 = *v457;
            v456[1] = v458;
            uint64_t v459 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v685[7];
            swift_bridgeObjectRetain();
            v459(v377, 0, 1, v679);
            uint64_t v80 = v679;
            uint64_t v278 = v692;
            uint64_t v81 = (unsigned int (*)(void, void, void))v670;
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v665 + 7))(v710, 0, 1, v275);
        }
        uint64_t v460 = v278[13];
        uint64_t v461 = (char *)v8 + v460;
        uint64_t v462 = (char *)v9 + v460;
        if (v81((char *)v9 + v460, 1, v80))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v461, v462, *(void *)(*(void *)(v463 - 8) + 64));
        }
        else
        {
          *uint64_t v461 = *v462;
          *((void *)v461 + 1) = *((void *)v462 + 1);
          *((_DWORD *)v461 + 4) = *((_DWORD *)v462 + 4);
          uint64_t v464 = *((void *)v462 + 7);
          uint64_t v465 = v10;
          if (v464 == 1)
          {
            long long v466 = *(_OWORD *)(v462 + 40);
            *(_OWORD *)(v461 + 24) = *(_OWORD *)(v462 + 24);
            *(_OWORD *)(v461 + 40) = v466;
            *((void *)v461 + 7) = *((void *)v462 + 7);
          }
          else
          {
            v461[24] = v462[24];
            *(_WORD *)(v461 + 25) = *(_WORD *)(v462 + 25);
            *(_OWORD *)(v461 + 28) = *(_OWORD *)(v462 + 28);
            *((_DWORD *)v461 + 11) = *((_DWORD *)v462 + 11);
            *((void *)v461 + 6) = *((void *)v462 + 6);
            *((void *)v461 + 7) = v464;
            swift_bridgeObjectRetain();
          }
          uint64_t v467 = *(int *)(v80 + 28);
          uint64_t v468 = &v461[v467];
          uint64_t v469 = &v462[v467];
          uint64_t v470 = sub_23309B300();
          uint64_t v471 = *(void *)(v470 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v471 + 48))(v469, 1, v470))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v468, v469, *(void *)(*(void *)(v472 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v471 + 16))(v468, v469, v470);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v471 + 56))(v468, 0, 1, v470);
          }
          uint64_t v10 = v465;
          uint64_t v473 = *(int *)(v679 + 32);
          uint64_t v474 = &v461[v473];
          uint64_t v475 = &v462[v473];
          uint64_t v476 = v475[1];
          void *v474 = *v475;
          v474[1] = v476;
          uint64_t v477 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v685[7];
          swift_bridgeObjectRetain();
          v477(v461, 0, 1, v679);
        }
        *(void *)((char *)v8 + v278[14]) = *(void *)((char *)v9 + v278[14]);
        *(void *)((char *)v8 + v278[15]) = *(void *)((char *)v9 + v278[15]);
        uint64_t v478 = v278[16];
        uint64_t v479 = (void *)((char *)v8 + v478);
        uint64_t v480 = (void *)((char *)v9 + v478);
        uint64_t v481 = v480[1];
        *uint64_t v479 = *v480;
        v479[1] = v481;
        uint64_t v482 = v278[17];
        uint64_t v483 = (char *)v8 + v482;
        v484 = (char *)v9 + v482;
        uint64_t v485 = *(void *)((char *)v9 + v482 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v485 == 1)
        {
          *(_OWORD *)uint64_t v483 = *(_OWORD *)v484;
          *((void *)v483 + 2) = *((void *)v484 + 2);
        }
        else
        {
          *(void *)uint64_t v483 = *(void *)v484;
          *((void *)v483 + 1) = v485;
          *((void *)v483 + 2) = *((void *)v484 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v486 = v692[18];
        uint64_t v487 = (void *)((char *)v8 + v486);
        uint64_t v488 = (void *)((char *)v9 + v486);
        uint64_t v489 = type metadata accessor for Quantity();
        uint64_t v490 = *(void *)(v489 - 8);
        uint64_t v5 = v715;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v490 + 48))(v488, 1, v489))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v487, v488, *(void *)(*(void *)(v491 - 8) + 64));
        }
        else
        {
          uint64_t v682 = v490;
          *(_OWORD *)uint64_t v487 = *(_OWORD *)v488;
          *(void *)((char *)v487 + 13) = *(void *)((char *)v488 + 13);
          uint64_t v492 = v488[4];
          v487[3] = v488[3];
          v487[4] = v492;
          uint64_t v493 = v488[6];
          v487[5] = v488[5];
          v487[6] = v493;
          uint64_t v494 = *(int *)(v489 + 28);
          uint64_t v673 = (char *)v487 + v494;
          v711 = (char *)v488 + v494;
          uint64_t v495 = sub_23309AF80();
          uint64_t v496 = *(void *)(v495 - 8);
          uint64_t v690 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v496 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v690(v711, 1, v495))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v673, v711, *(void *)(*(void *)(v497 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v496 + 16))(v673, v711, v495);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v496 + 56))(v673, 0, 1, v495);
          }
          uint64_t v5 = v715;
          uint64_t v498 = *(int *)(v489 + 32);
          uint64_t v499 = (void *)((char *)v487 + v498);
          uint64_t v500 = (void *)((char *)v488 + v498);
          uint64_t v501 = v500[1];
          void *v499 = *v500;
          v499[1] = v501;
          uint64_t v502 = *(void (**)(void *, void, uint64_t, uint64_t))(v682 + 56);
          swift_bridgeObjectRetain();
          v502(v487, 0, 1, v489);
        }
        uint64_t v3 = v724;
        uint64_t v4 = v730;
        *(void *)((char *)v8 + v692[19]) = *(void *)((char *)v9 + v692[19]);
        uint64_t v503 = v692[20];
LABEL_278:
        uint64_t v604 = (void *)((char *)v8 + v503);
        uint64_t v605 = (void *)((char *)v9 + v503);
        uint64_t v606 = v605[1];
        *uint64_t v604 = *v605;
        v604[1] = v606;
        goto LABEL_279;
      case 7u:
        uint64_t v725 = v3;
        uint64_t v85 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v85;
        uint64_t v86 = v9[3];
        v8[2] = v9[2];
        v8[3] = v86;
        v8[4] = v9[4];
        *(void *)((char *)v8 + 37) = *(void *)((char *)v9 + 37);
        uint64_t v87 = v9[7];
        v8[6] = v9[6];
        v8[7] = v87;
        uint64_t v88 = v9[9];
        v8[8] = v9[8];
        v8[9] = v88;
        uint64_t v89 = v9[11];
        v8[10] = v9[10];
        v8[11] = v89;
        uint64_t v90 = v9[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v90 == 1)
        {
          *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
          v8[14] = v9[14];
        }
        else
        {
          v8[12] = v9[12];
          v8[13] = v90;
          v8[14] = v9[14];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v3 = v725;
        uint64_t v95 = v9[16];
        v8[15] = v9[15];
        v8[16] = v95;
        uint64_t v96 = v9[18];
        v8[17] = v9[17];
        v8[18] = v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_280;
      case 8u:
        uint64_t v91 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v91;
        uint64_t v92 = v9[3];
        v8[2] = v9[2];
        v8[3] = v92;
        uint64_t v93 = v9[5];
        v8[4] = v9[4];
        v8[5] = v93;
LABEL_188:
        swift_bridgeObjectRetain();
        goto LABEL_279;
      default:
        uint64_t v14 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v14;
        uint64_t v15 = v9[3];
        v8[2] = v9[2];
        v8[3] = v15;
        uint64_t v16 = v10;
        uint64_t v17 = v9[5];
        v8[4] = v9[4];
        v8[5] = v17;
        uint64_t v18 = v9[7];
        v8[6] = v9[6];
        v8[7] = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v10 = v16;
LABEL_279:
        swift_bridgeObjectRetain();
LABEL_280:
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v732 + 56))(v8, 0, 1, v10);
        break;
    }
  }
  uint64_t v607 = *(int *)(v3 + 24);
  uint64_t v608 = (void *)((char *)v5 + v607);
  uint64_t v609 = (void *)((char *)v4 + v607);
  uint64_t v610 = *v609;
  unint64_t v611 = v609[1];
  sub_232E9A9F4(*v609, v611);
  uint64_t *v608 = v610;
  v608[1] = v611;
  return v5;
}

void *assignWithCopy for ModelsR4.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)v5 + v6;
  uint64_t v8 = (char *)v4 + v6;
  uint64_t v9 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = (uint64_t (*)(void, void, void))v10[6];
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          *(void *)(v7 + 32) = *((void *)v8 + 4);
          swift_bridgeObjectRetain();
          goto LABEL_33;
        case 2u:
          v1281 = v10;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v15 = *((void *)v8 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v15 != 1) {
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 32) = v15;
          if (*((void *)v8 + 6) == 1)
          {
            long long v16 = *(_OWORD *)(v8 + 40);
            *(void *)(v7 + 56) = *((void *)v8 + 7);
            *(_OWORD *)(v7 + 40) = v16;
          }
          else
          {
            *(void *)(v7 + 40) = *((void *)v8 + 5);
            *(void *)(v7 + 48) = *((void *)v8 + 6);
            *(void *)(v7 + 56) = *((void *)v8 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          if (*((void *)v8 + 9) == 1)
          {
            long long v51 = *((_OWORD *)v8 + 4);
            *(void *)(v7 + 80) = *((void *)v8 + 10);
            *(_OWORD *)(v7 + 64) = v51;
          }
          else
          {
            *(void *)(v7 + 64) = *((void *)v8 + 8);
            *(void *)(v7 + 72) = *((void *)v8 + 9);
            *(void *)(v7 + 80) = *((void *)v8 + 10);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 88) = *((void *)v8 + 11);
          uint64_t v52 = *((void *)v8 + 13);
          swift_bridgeObjectRetain();
          if (v52 == 1)
          {
            long long v53 = *((_OWORD *)v8 + 6);
            *(void *)(v7 + 112) = *((void *)v8 + 14);
            *(_OWORD *)(v7 + 96) = v53;
          }
          else
          {
            *(void *)(v7 + 96) = *((void *)v8 + 12);
            *(void *)(v7 + 104) = *((void *)v8 + 13);
            *(void *)(v7 + 112) = *((void *)v8 + 14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          v1306 = v5;
          uint64_t v1337 = v9;
          if (*((void *)v8 + 16) == 1)
          {
            long long v54 = *(_OWORD *)(v8 + 120);
            *(void *)(v7 + 136) = *((void *)v8 + 17);
            *(_OWORD *)(v7 + 120) = v54;
          }
          else
          {
            *(void *)(v7 + 120) = *((void *)v8 + 15);
            *(void *)(v7 + 128) = *((void *)v8 + 16);
            *(void *)(v7 + 136) = *((void *)v8 + 17);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 144) = *((void *)v8 + 18);
          uint64_t v55 = (int *)type metadata accessor for ModelsR4.Condition(0);
          uint64_t v56 = v55[13];
          uint64_t v57 = (char *)(v7 + v56);
          uint64_t v58 = &v8[v56];
          uint64_t v59 = type metadata accessor for FHIRDateTime();
          v1218 = *(void **)(v59 - 8);
          uint64_t v60 = (unsigned int (*)(void, void, void))v1218[6];
          uint64_t v61 = (int *)v59;
          swift_bridgeObjectRetain();
          v1261 = v55;
          v1232 = v61;
          v1209 = v60;
          v1316 = v4;
          if (v60(v58, 1, v61))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v57, v58, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            *uint64_t v57 = *v58;
            uint64_t v112 = *((void *)v58 + 1);
            *((_DWORD *)v57 + 4) = *((_DWORD *)v58 + 4);
            *((void *)v57 + 1) = v112;
            uint64_t v113 = a3;
            if (*((void *)v58 + 7) == 1)
            {
              long long v114 = *(_OWORD *)(v58 + 24);
              long long v115 = *(_OWORD *)(v58 + 40);
              *((void *)v57 + 7) = *((void *)v58 + 7);
              *(_OWORD *)(v57 + 24) = v114;
              *(_OWORD *)(v57 + 40) = v115;
            }
            else
            {
              v57[24] = v58[24];
              v57[25] = v58[25];
              v57[26] = v58[26];
              long long v145 = *(_OWORD *)(v58 + 28);
              *((_DWORD *)v57 + 11) = *((_DWORD *)v58 + 11);
              *(_OWORD *)(v57 + 28) = v145;
              *((void *)v57 + 6) = *((void *)v58 + 6);
              *((void *)v57 + 7) = *((void *)v58 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v146 = v61[7];
            uint64_t v147 = &v57[v146];
            uint64_t v148 = &v58[v146];
            uint64_t v149 = sub_23309B300();
            uint64_t v150 = *(void *)(v149 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v147, v148, v149);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
            }
            a3 = v113;
            uint64_t v254 = v1232[8];
            uint64_t v255 = &v57[v254];
            uint64_t v256 = &v58[v254];
            *(void *)uint64_t v255 = *(void *)v256;
            *((void *)v255 + 1) = *((void *)v256 + 1);
            uint64_t v257 = (void (*)(void, void, void, void))v1218[7];
            swift_bridgeObjectRetain();
            v257(v57, 0, 1, v1232);
            uint64_t v61 = v1232;
            uint64_t v55 = v1261;
            uint64_t v60 = v1209;
          }
          uint64_t v258 = v55[14];
          uint64_t v259 = (char *)(v7 + v258);
          uint64_t v260 = &v8[v258];
          uint64_t v261 = type metadata accessor for Period();
          uint64_t v1192 = *(void *)(v261 - 8);
          __dstc = *(void **)(v1192 + 48);
          v1251 = (int *)v261;
          uint64_t v1331 = a3;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstc)(v260, 1, v261))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v259, v260, *(void *)(*(void *)(v262 - 8) + 64));
          }
          else
          {
            if (v60(v260, 1, v61))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v259, v260, *(void *)(*(void *)(v263 - 8) + 64));
            }
            else
            {
              *uint64_t v259 = *v260;
              uint64_t v302 = *((void *)v260 + 1);
              *((_DWORD *)v259 + 4) = *((_DWORD *)v260 + 4);
              *((void *)v259 + 1) = v302;
              if (*((void *)v260 + 7) == 1)
              {
                long long v303 = *(_OWORD *)(v260 + 24);
                long long v304 = *(_OWORD *)(v260 + 40);
                *((void *)v259 + 7) = *((void *)v260 + 7);
                *(_OWORD *)(v259 + 24) = v303;
                *(_OWORD *)(v259 + 40) = v304;
              }
              else
              {
                v259[24] = v260[24];
                v259[25] = v260[25];
                v259[26] = v260[26];
                long long v353 = *(_OWORD *)(v260 + 28);
                *((_DWORD *)v259 + 11) = *((_DWORD *)v260 + 11);
                *(_OWORD *)(v259 + 28) = v353;
                *((void *)v259 + 6) = *((void *)v260 + 6);
                *((void *)v259 + 7) = *((void *)v260 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v354 = v61[7];
              uint64_t v355 = &v259[v354];
              uint64_t v356 = &v260[v354];
              uint64_t v357 = sub_23309B300();
              uint64_t v358 = *(void *)(v357 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v358 + 48))(v356, 1, v357))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v355, v356, *(void *)(*(void *)(v359 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v358 + 16))(v355, v356, v357);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v358 + 56))(v355, 0, 1, v357);
              }
              uint64_t v480 = v1232[8];
              uint64_t v481 = &v259[v480];
              uint64_t v482 = &v260[v480];
              *(void *)uint64_t v481 = *(void *)v482;
              *((void *)v481 + 1) = *((void *)v482 + 1);
              uint64_t v483 = (void (*)(void, void, void, void))v1218[7];
              swift_bridgeObjectRetain();
              v483(v259, 0, 1, v1232);
              uint64_t v61 = v1232;
              uint64_t v261 = (uint64_t)v1251;
              uint64_t v55 = v1261;
            }
            uint64_t v484 = *(int *)(v261 + 20);
            uint64_t v485 = &v259[v484];
            uint64_t v486 = &v260[v484];
            if (v60(v486, 1, v61))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v485, v486, *(void *)(*(void *)(v487 - 8) + 64));
            }
            else
            {
              *uint64_t v485 = *v486;
              uint64_t v488 = *((void *)v486 + 1);
              *((_DWORD *)v485 + 4) = *((_DWORD *)v486 + 4);
              *((void *)v485 + 1) = v488;
              if (*((void *)v486 + 7) == 1)
              {
                long long v489 = *(_OWORD *)(v486 + 24);
                long long v490 = *(_OWORD *)(v486 + 40);
                *((void *)v485 + 7) = *((void *)v486 + 7);
                *(_OWORD *)(v485 + 24) = v489;
                *(_OWORD *)(v485 + 40) = v490;
              }
              else
              {
                v485[24] = v486[24];
                v485[25] = v486[25];
                v485[26] = v486[26];
                long long v491 = *(_OWORD *)(v486 + 28);
                *((_DWORD *)v485 + 11) = *((_DWORD *)v486 + 11);
                *(_OWORD *)(v485 + 28) = v491;
                *((void *)v485 + 6) = *((void *)v486 + 6);
                *((void *)v485 + 7) = *((void *)v486 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v492 = v61[7];
              uint64_t v493 = &v485[v492];
              uint64_t v494 = &v486[v492];
              uint64_t v495 = sub_23309B300();
              uint64_t v496 = *(void *)(v495 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v496 + 48))(v494, 1, v495))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v493, v494, *(void *)(*(void *)(v497 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v496 + 16))(v493, v494, v495);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v496 + 56))(v493, 0, 1, v495);
              }
              uint64_t v600 = v1232[8];
              long long v601 = &v485[v600];
              uint64_t v602 = &v486[v600];
              *(void *)long long v601 = *(void *)v602;
              *((void *)v601 + 1) = *((void *)v602 + 1);
              uint64_t v603 = (void (*)(void, void, void, void))v1218[7];
              swift_bridgeObjectRetain();
              v603(v485, 0, 1, v1232);
              uint64_t v61 = v1232;
              uint64_t v55 = v1261;
              uint64_t v60 = v1209;
            }
            (*(void (**)(char *, void, uint64_t, int *))(v1192 + 56))(v259, 0, 1, v1251);
          }
          uint64_t v604 = v55[15];
          uint64_t v605 = (void *)(v7 + v604);
          uint64_t v606 = &v8[v604];
          *uint64_t v605 = *(void *)v606;
          v605[1] = *((void *)v606 + 1);
          uint64_t v607 = v55[16];
          uint64_t v608 = (char *)(v7 + v607);
          uint64_t v609 = &v8[v607];
          swift_bridgeObjectRetain();
          v1345 = v8;
          if (v60(v609, 1, v61))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v608, v609, *(void *)(*(void *)(v610 - 8) + 64));
          }
          else
          {
            char *v608 = *v609;
            uint64_t v611 = *((void *)v609 + 1);
            *((_DWORD *)v608 + 4) = *((_DWORD *)v609 + 4);
            *((void *)v608 + 1) = v611;
            if (*((void *)v609 + 7) == 1)
            {
              long long v612 = *(_OWORD *)(v609 + 24);
              long long v613 = *(_OWORD *)(v609 + 40);
              *((void *)v608 + 7) = *((void *)v609 + 7);
              *(_OWORD *)(v608 + 24) = v612;
              *(_OWORD *)(v608 + 40) = v613;
            }
            else
            {
              v608[24] = v609[24];
              v608[25] = v609[25];
              v608[26] = v609[26];
              long long v614 = *(_OWORD *)(v609 + 28);
              *((_DWORD *)v608 + 11) = *((_DWORD *)v609 + 11);
              *(_OWORD *)(v608 + 28) = v614;
              *((void *)v608 + 6) = *((void *)v609 + 6);
              *((void *)v608 + 7) = *((void *)v609 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v615 = v61[7];
            uint64_t v616 = &v608[v615];
            uint64_t v617 = &v609[v615];
            uint64_t v618 = sub_23309B300();
            uint64_t v619 = *(void *)(v618 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v619 + 48))(v617, 1, v618))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v616, v617, *(void *)(*(void *)(v620 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v619 + 16))(v616, v617, v618);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v619 + 56))(v616, 0, 1, v618);
            }
            uint64_t v621 = v1232[8];
            v622 = &v608[v621];
            uint64_t v623 = &v609[v621];
            *(void *)v622 = *(void *)v623;
            *((void *)v622 + 1) = *((void *)v623 + 1);
            uint64_t v624 = (void (*)(void, void, void, void))v1218[7];
            swift_bridgeObjectRetain();
            v624(v608, 0, 1, v1232);
            uint64_t v61 = v1232;
            uint64_t v55 = v1261;
            uint64_t v60 = v1209;
          }
          uint64_t v625 = v55[17];
          long long v626 = (char *)(v7 + v625);
          uint64_t v627 = &v8[v625];
          uint64_t v628 = v1251;
          if (((unsigned int (*)(char *, uint64_t, int *))__dstc)(&v8[v625], 1, v1251))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v626, v627, *(void *)(*(void *)(v629 - 8) + 64));
          }
          else
          {
            if (v60(v627, 1, v61))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v626, v627, *(void *)(*(void *)(v630 - 8) + 64));
            }
            else
            {
              *long long v626 = *v627;
              uint64_t v631 = *((void *)v627 + 1);
              *((_DWORD *)v626 + 4) = *((_DWORD *)v627 + 4);
              *((void *)v626 + 1) = v631;
              if (*((void *)v627 + 7) == 1)
              {
                long long v632 = *(_OWORD *)(v627 + 24);
                long long v633 = *(_OWORD *)(v627 + 40);
                *((void *)v626 + 7) = *((void *)v627 + 7);
                *(_OWORD *)(v626 + 24) = v632;
                *(_OWORD *)(v626 + 40) = v633;
              }
              else
              {
                v626[24] = v627[24];
                v626[25] = v627[25];
                v626[26] = v627[26];
                long long v634 = *(_OWORD *)(v627 + 28);
                *((_DWORD *)v626 + 11) = *((_DWORD *)v627 + 11);
                *(_OWORD *)(v626 + 28) = v634;
                *((void *)v626 + 6) = *((void *)v627 + 6);
                *((void *)v626 + 7) = *((void *)v627 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v635 = v61[7];
              uint64_t v636 = &v626[v635];
              uint64_t v637 = &v627[v635];
              uint64_t v638 = sub_23309B300();
              uint64_t v639 = *(void *)(v638 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v639 + 48))(v637, 1, v638))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v636, v637, *(void *)(*(void *)(v640 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v639 + 16))(v636, v637, v638);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v639 + 56))(v636, 0, 1, v638);
              }
              uint64_t v701 = v1232[8];
              v702 = &v626[v701];
              uint64_t v703 = &v627[v701];
              *(void *)v702 = *(void *)v703;
              *((void *)v702 + 1) = *((void *)v703 + 1);
              uint64_t v704 = (void (*)(void, void, void, void))v1218[7];
              swift_bridgeObjectRetain();
              v704(v626, 0, 1, v1232);
              uint64_t v61 = v1232;
              uint64_t v628 = v1251;
              uint64_t v55 = v1261;
              uint64_t v60 = v1209;
            }
            uint64_t v705 = v628[5];
            uint64_t v706 = &v626[v705];
            uint64_t v707 = &v627[v705];
            if (v60(v707, 1, v61))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v706, v707, *(void *)(*(void *)(v708 - 8) + 64));
            }
            else
            {
              *uint64_t v706 = *v707;
              uint64_t v709 = *((void *)v707 + 1);
              *((_DWORD *)v706 + 4) = *((_DWORD *)v707 + 4);
              *((void *)v706 + 1) = v709;
              if (*((void *)v707 + 7) == 1)
              {
                long long v710 = *(_OWORD *)(v707 + 24);
                long long v711 = *(_OWORD *)(v707 + 40);
                *((void *)v706 + 7) = *((void *)v707 + 7);
                *(_OWORD *)(v706 + 24) = v710;
                *(_OWORD *)(v706 + 40) = v711;
              }
              else
              {
                v706[24] = v707[24];
                v706[25] = v707[25];
                v706[26] = v707[26];
                long long v712 = *(_OWORD *)(v707 + 28);
                *((_DWORD *)v706 + 11) = *((_DWORD *)v707 + 11);
                *(_OWORD *)(v706 + 28) = v712;
                *((void *)v706 + 6) = *((void *)v707 + 6);
                *((void *)v706 + 7) = *((void *)v707 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v713 = v61[7];
              uint64_t v714 = &v706[v713];
              uint64_t v715 = &v707[v713];
              uint64_t v716 = sub_23309B300();
              uint64_t v717 = *(void *)(v716 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v717 + 48))(v715, 1, v716))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v714, v715, *(void *)(*(void *)(v718 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v717 + 16))(v714, v715, v716);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v717 + 56))(v714, 0, 1, v716);
              }
              uint64_t v719 = v1232[8];
              uint64_t v720 = &v706[v719];
              uint64_t v721 = &v707[v719];
              *(void *)uint64_t v720 = *(void *)v721;
              *((void *)v720 + 1) = *((void *)v721 + 1);
              uint64_t v722 = (void (*)(void, void, void, void))v1218[7];
              swift_bridgeObjectRetain();
              v722(v706, 0, 1, v1232);
              uint64_t v61 = v1232;
              uint64_t v55 = v1261;
              uint64_t v60 = v1209;
            }
            (*(void (**)(char *, void, uint64_t, int *))(v1192 + 56))(v626, 0, 1, v1251);
          }
          uint64_t v4 = v1316;
          uint64_t v723 = v55[18];
          uint64_t v724 = (void *)(v7 + v723);
          uint64_t v725 = &v8[v723];
          void *v724 = *(void *)v725;
          v724[1] = *((void *)v725 + 1);
          uint64_t v726 = v55[19];
          v727 = (char *)(v7 + v726);
          v728 = &v8[v726];
          swift_bridgeObjectRetain();
          if (v60(v728, 1, v61))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v727, v728, *(void *)(*(void *)(v729 - 8) + 64));
          }
          else
          {
            char *v727 = *v728;
            uint64_t v730 = *((void *)v728 + 1);
            *((_DWORD *)v727 + 4) = *((_DWORD *)v728 + 4);
            *((void *)v727 + 1) = v730;
            if (*((void *)v728 + 7) == 1)
            {
              long long v731 = *(_OWORD *)(v728 + 24);
              long long v732 = *(_OWORD *)(v728 + 40);
              *((void *)v727 + 7) = *((void *)v728 + 7);
              *(_OWORD *)(v727 + 24) = v731;
              *(_OWORD *)(v727 + 40) = v732;
            }
            else
            {
              v727[24] = v728[24];
              v727[25] = v728[25];
              v727[26] = v728[26];
              long long v733 = *(_OWORD *)(v728 + 28);
              *((_DWORD *)v727 + 11) = *((_DWORD *)v728 + 11);
              *(_OWORD *)(v727 + 28) = v733;
              *((void *)v727 + 6) = *((void *)v728 + 6);
              *((void *)v727 + 7) = *((void *)v728 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v734 = v61[7];
            v735 = &v727[v734];
            v736 = &v728[v734];
            uint64_t v737 = sub_23309B300();
            uint64_t v738 = *(void *)(v737 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v738 + 48))(v736, 1, v737))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v735, v736, *(void *)(*(void *)(v739 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v738 + 16))(v735, v736, v737);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v738 + 56))(v735, 0, 1, v737);
            }
            uint64_t v740 = v1232[8];
            v741 = &v727[v740];
            v742 = &v728[v740];
            *(void *)v741 = *(void *)v742;
            *((void *)v741 + 1) = *((void *)v742 + 1);
            v743 = (void (*)(void, void, void, void))v1218[7];
            swift_bridgeObjectRetain();
            v743(v727, 0, 1, v1232);
            uint64_t v4 = v1316;
          }
          uint64_t v744 = v55[20];
          v745 = (void *)(v7 + v744);
          v746 = &v8[v744];
          uint64_t v747 = type metadata accessor for Reference();
          v748 = *(void **)(v747 - 8);
          v749 = (unsigned int (*)(void, void, void))v748[6];
          uint64_t v9 = v1337;
          if (v749(v746, 1, v747))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v745, v746, *(void *)(*(void *)(v750 - 8) + 64));
          }
          else
          {
            v1254 = v748;
            v1212 = v749;
            v1223 = (void *)v747;
            void *v745 = *(void *)v746;
            v745[1] = *((void *)v746 + 1);
            v745[2] = *((void *)v746 + 2);
            v745[3] = *((void *)v746 + 3);
            uint64_t v751 = *(int *)(v747 + 24);
            v752 = (void *)((char *)v745 + v751);
            v753 = &v746[v751];
            uint64_t v754 = type metadata accessor for Identifier();
            v755 = *(void **)(v754 - 8);
            v756 = (unsigned int (*)(void, void, void))v755[6];
            v757 = v753;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v756(v753, 1, v754))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v752, v753, *(void *)(*(void *)(v758 - 8) + 64));
              uint64_t v4 = v1316;
              uint64_t v55 = v1261;
              v749 = v1212;
            }
            else
            {
              __dstg = v755;
              void *v752 = *(void *)v753;
              v752[1] = *((void *)v753 + 1);
              uint64_t v759 = *((void *)v753 + 3);
              swift_bridgeObjectRetain();
              if (v759 == 1)
              {
                long long v760 = *((_OWORD *)v753 + 1);
                v752[4] = *((void *)v753 + 4);
                *((_OWORD *)v752 + 1) = v760;
              }
              else
              {
                v752[2] = *((void *)v753 + 2);
                v752[3] = *((void *)v753 + 3);
                v752[4] = *((void *)v753 + 4);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v4 = v1316;
              v749 = v1212;
              uint64_t v761 = *(int *)(v754 + 24);
              v1197 = (char *)v752;
              v762 = (char *)v752 + v761;
              v1213 = v757;
              v763 = (char *)v757 + v761;
              uint64_t v764 = sub_23309AF80();
              uint64_t v765 = *(void *)(v764 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v765 + 48))(v763, 1, v764))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v762, v763, *(void *)(*(void *)(v766 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v765 + 16))(v762, v763, v764);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v765 + 56))(v762, 0, 1, v764);
              }
              uint64_t v55 = v1261;
              uint64_t v767 = *(int *)(v754 + 28);
              v768 = &v1197[v767];
              v769 = (void *)((char *)v1213 + v767);
              *(void *)v768 = *v769;
              *((void *)v768 + 1) = v769[1];
              v770 = (void (*)(void, void, void, void))__dstg[7];
              swift_bridgeObjectRetain();
              v770(v1197, 0, 1, v754);
            }
            v748 = v1254;
            uint64_t v747 = (uint64_t)v1223;
            ((void (*)(void *, void, uint64_t, void *))v1254[7])(v745, 0, 1, v1223);
            uint64_t v9 = v1337;
          }
          uint64_t v771 = v55[21];
          v772 = (void *)(v7 + v771);
          v773 = &v1345[v771];
          if (v749(&v1345[v771], 1, v747))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v772, v773, *(void *)(*(void *)(v774 - 8) + 64));
            v775 = v1345;
          }
          else
          {
            v1255 = v748;
            void *v772 = *(void *)v773;
            v772[1] = *((void *)v773 + 1);
            v772[2] = *((void *)v773 + 2);
            v772[3] = *((void *)v773 + 3);
            uint64_t v776 = *(int *)(v747 + 24);
            v777 = (void *)((char *)v772 + v776);
            v778 = &v773[v776];
            uint64_t v779 = type metadata accessor for Identifier();
            uint64_t v780 = *(void *)(v779 - 8);
            v781 = *(unsigned int (**)(void, void, void))(v780 + 48);
            uint64_t v782 = v779;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v781(v778, 1, v782))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v777, v778, *(void *)(*(void *)(v783 - 8) + 64));
              uint64_t v4 = v1316;
              v775 = v1345;
            }
            else
            {
              void *v777 = *(void *)v778;
              v777[1] = *((void *)v778 + 1);
              uint64_t v784 = *((void *)v778 + 3);
              swift_bridgeObjectRetain();
              if (v784 == 1)
              {
                long long v785 = *((_OWORD *)v778 + 1);
                v777[4] = *((void *)v778 + 4);
                *((_OWORD *)v777 + 1) = v785;
              }
              else
              {
                v777[2] = *((void *)v778 + 2);
                v777[3] = *((void *)v778 + 3);
                v777[4] = *((void *)v778 + 4);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v4 = v1316;
              uint64_t v1214 = v782;
              v1224 = (char *)v777;
              uint64_t v786 = *(int *)(v782 + 24);
              v1237 = (char *)v777 + v786;
              v787 = &v778[v786];
              uint64_t v788 = sub_23309AF80();
              uint64_t v789 = *(void *)(v788 - 8);
              v790 = v787;
              int v791 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v789 + 48))(v787, 1, v788);
              v775 = v1345;
              if (v791)
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v1237, v790, *(void *)(*(void *)(v792 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v789 + 16))(v1237, v790, v788);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v789 + 56))(v1237, 0, 1, v788);
              }
              uint64_t v793 = *(int *)(v1214 + 28);
              v794 = &v1224[v793];
              v795 = &v778[v793];
              *(void *)v794 = *(void *)v795;
              *((void *)v794 + 1) = *((void *)v795 + 1);
              v796 = *(void (**)(void, void, void, void))(v780 + 56);
              swift_bridgeObjectRetain();
              v796(v1224, 0, 1, v1214);
            }
            (*((void (**)(void *, void, uint64_t, uint64_t))v1255 + 7))(v772, 0, 1, v747);
            uint64_t v9 = v1337;
          }
          *(void *)(v7 + v1261[22]) = *(void *)&v775[v1261[22]];
          uint64_t v797 = v1261[23];
          v798 = (void *)(v7 + v797);
          v799 = &v775[v797];
          void *v798 = *(void *)v799;
          v798[1] = *((void *)v799 + 1);
          swift_bridgeObjectRetain();
          uint64_t v5 = v1306;
          a3 = v1331;
          uint64_t v10 = v1281;
          goto LABEL_471;
        case 3u:
          v1282 = v10;
          uint64_t v1332 = v9;
          v1312 = v4;
          uint64_t v1322 = a3;
          v1302 = v5;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          *(void *)(v7 + 32) = *((void *)v8 + 4);
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(void *)(v7 + 64) = *((void *)v8 + 8);
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          *(void *)(v7 + 88) = *((void *)v8 + 11);
          *(void *)(v7 + 96) = *((void *)v8 + 12);
          v1243 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
          uint64_t v17 = v1243[11];
          __dst = (char *)(v7 + v17);
          v1194 = &v8[v17];
          uint64_t v18 = type metadata accessor for FHIRDateTime();
          uint64_t v1207 = *(void *)(v18 - 8);
          uint64_t v19 = *(unsigned int (**)(void, void, void))(v1207 + 48);
          uint64_t v20 = (int *)v18;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1216 = v19;
          if (v19(v1194, 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(__dst, v1194, *(void *)(*(void *)(v21 - 8) + 64));
            uint64_t v22 = v8;
            uint64_t v23 = v1243;
          }
          else
          {
            char *__dst = *v1194;
            uint64_t v99 = *((void *)v1194 + 1);
            *((_DWORD *)__dst + 4) = *((_DWORD *)v1194 + 4);
            *((void *)__dst + 1) = v99;
            if (*((void *)v1194 + 7) == 1)
            {
              long long v100 = *(_OWORD *)(v1194 + 24);
              long long v101 = *(_OWORD *)(v1194 + 40);
              *((void *)__dst + 7) = *((void *)v1194 + 7);
              *(_OWORD *)(__dst + 24) = v100;
              *(_OWORD *)(__dst + 40) = v101;
            }
            else
            {
              __dst[24] = v1194[24];
              __dst[25] = v1194[25];
              __dst[26] = v1194[26];
              long long v117 = *(_OWORD *)(v1194 + 28);
              *((_DWORD *)__dst + 11) = *((_DWORD *)v1194 + 11);
              *(_OWORD *)(__dst + 28) = v117;
              *((void *)__dst + 6) = *((void *)v1194 + 6);
              *((void *)__dst + 7) = *((void *)v1194 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v22 = v8;
            uint64_t v23 = v1243;
            uint64_t v118 = v20;
            uint64_t v119 = v20[7];
            uint64_t v120 = &__dst[v119];
            long long v121 = &v1194[v119];
            uint64_t v122 = sub_23309B300();
            uint64_t v123 = *(void *)(v122 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v120, v121, *(void *)(*(void *)(v124 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v120, v121, v122);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v120, 0, 1, v122);
            }
            a3 = v1322;
            uint64_t v20 = v118;
            uint64_t v178 = v118[8];
            uint64_t v179 = &__dst[v178];
            uint64_t v180 = &v1194[v178];
            *(void *)uint64_t v179 = *(void *)v180;
            *((void *)v179 + 1) = *((void *)v180 + 1);
            long long v181 = *(void (**)(void, void, void, void))(v1207 + 56);
            swift_bridgeObjectRetain();
            v181(__dst, 0, 1, v20);
            uint64_t v4 = v1312;
          }
          uint64_t v182 = v23[12];
          uint64_t v183 = (char *)(v7 + v182);
          uint64_t v184 = v22;
          uint64_t v185 = &v22[v182];
          uint64_t v186 = type metadata accessor for Period();
          uint64_t v187 = *(void *)(v186 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v183, v185, *(void *)(*(void *)(v188 - 8) + 64));
            uint64_t v189 = v184;
            uint64_t v190 = v1243;
          }
          else
          {
            __dstb = (int *)v186;
            if (((unsigned int (*)(char *, uint64_t, int *))v1216)(v185, 1, v20))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v183, v185, *(void *)(*(void *)(v191 - 8) + 64));
              uint64_t v192 = (int *)v186;
              uint64_t v193 = v187;
              uint64_t v189 = v184;
              uint64_t v190 = v1243;
            }
            else
            {
              *uint64_t v183 = *v185;
              uint64_t v267 = *((void *)v185 + 1);
              *((_DWORD *)v183 + 4) = *((_DWORD *)v185 + 4);
              *((void *)v183 + 1) = v267;
              uint64_t v193 = v187;
              uint64_t v189 = v184;
              if (*((void *)v185 + 7) == 1)
              {
                long long v268 = *(_OWORD *)(v185 + 24);
                long long v269 = *(_OWORD *)(v185 + 40);
                *((void *)v183 + 7) = *((void *)v185 + 7);
                *(_OWORD *)(v183 + 24) = v268;
                *(_OWORD *)(v183 + 40) = v269;
              }
              else
              {
                v183[24] = v185[24];
                v183[25] = v185[25];
                v183[26] = v185[26];
                long long v346 = *(_OWORD *)(v185 + 28);
                *((_DWORD *)v183 + 11) = *((_DWORD *)v185 + 11);
                *(_OWORD *)(v183 + 28) = v346;
                *((void *)v183 + 6) = *((void *)v185 + 6);
                *((void *)v183 + 7) = *((void *)v185 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v190 = v1243;
              v1271 = v20;
              uint64_t v347 = v20[7];
              uint64_t v348 = &v183[v347];
              uint64_t v349 = &v185[v347];
              uint64_t v350 = sub_23309B300();
              uint64_t v351 = *(void *)(v350 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v351 + 48))(v349, 1, v350))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v348, v349, *(void *)(*(void *)(v352 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v351 + 16))(v348, v349, v350);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v351 + 56))(v348, 0, 1, v350);
              }
              a3 = v1322;
              uint64_t v463 = v1271[8];
              uint64_t v464 = &v183[v463];
              uint64_t v465 = &v185[v463];
              *(void *)uint64_t v464 = *(void *)v465;
              *((void *)v464 + 1) = *((void *)v465 + 1);
              long long v466 = *(void (**)(void, void, void, void))(v1207 + 56);
              swift_bridgeObjectRetain();
              v466(v183, 0, 1, v1271);
              uint64_t v20 = v1271;
              uint64_t v192 = __dstb;
            }
            uint64_t v467 = v192[5];
            uint64_t v468 = &v183[v467];
            uint64_t v469 = &v185[v467];
            if (((unsigned int (*)(char *, uint64_t, int *))v1216)(v469, 1, v20))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v468, v469, *(void *)(*(void *)(v470 - 8) + 64));
            }
            else
            {
              char *v468 = *v469;
              uint64_t v471 = *((void *)v469 + 1);
              *((_DWORD *)v468 + 4) = *((_DWORD *)v469 + 4);
              *((void *)v468 + 1) = v471;
              if (*((void *)v469 + 7) == 1)
              {
                long long v472 = *(_OWORD *)(v469 + 24);
                long long v473 = *(_OWORD *)(v469 + 40);
                *((void *)v468 + 7) = *((void *)v469 + 7);
                *(_OWORD *)(v468 + 24) = v472;
                *(_OWORD *)(v468 + 40) = v473;
              }
              else
              {
                v468[24] = v469[24];
                v468[25] = v469[25];
                v468[26] = v469[26];
                long long v474 = *(_OWORD *)(v469 + 28);
                *((_DWORD *)v468 + 11) = *((_DWORD *)v469 + 11);
                *(_OWORD *)(v468 + 28) = v474;
                *((void *)v468 + 6) = *((void *)v469 + 6);
                *((void *)v468 + 7) = *((void *)v469 + 7);
                swift_bridgeObjectRetain();
              }
              v1273 = v20;
              uint64_t v475 = v20[7];
              v1196 = &v468[v475];
              uint64_t v476 = &v469[v475];
              uint64_t v477 = sub_23309B300();
              uint64_t v478 = *(void *)(v477 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v478 + 48))(v476, 1, v477))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v1196, v476, *(void *)(*(void *)(v479 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v478 + 16))(v1196, v476, v477);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v478 + 56))(v1196, 0, 1, v477);
              }
              a3 = v1322;
              uint64_t v20 = v1273;
              uint64_t v575 = v1273[8];
              uint64_t v576 = &v468[v575];
              uint64_t v577 = &v469[v575];
              *(void *)uint64_t v576 = *(void *)v577;
              *((void *)v576 + 1) = *((void *)v577 + 1);
              uint64_t v578 = *(void (**)(void, void, void, void))(v1207 + 56);
              swift_bridgeObjectRetain();
              v578(v468, 0, 1, v1273);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v193 + 56))(v183, 0, 1, __dstb);
            uint64_t v4 = v1312;
          }
          uint64_t v579 = v190[13];
          uint64_t v580 = (char *)(v7 + v579);
          uint64_t v581 = &v189[v579];
          if (((unsigned int (*)(char *, uint64_t, int *))v1216)(&v189[v579], 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v580, v581, *(void *)(*(void *)(v582 - 8) + 64));
          }
          else
          {
            *uint64_t v580 = *v581;
            uint64_t v583 = *((void *)v581 + 1);
            *((_DWORD *)v580 + 4) = *((_DWORD *)v581 + 4);
            *((void *)v580 + 1) = v583;
            if (*((void *)v581 + 7) == 1)
            {
              long long v584 = *(_OWORD *)(v581 + 24);
              long long v585 = *(_OWORD *)(v581 + 40);
              *((void *)v580 + 7) = *((void *)v581 + 7);
              *(_OWORD *)(v580 + 24) = v584;
              *(_OWORD *)(v580 + 40) = v585;
            }
            else
            {
              v580[24] = v581[24];
              v580[25] = v581[25];
              v580[26] = v581[26];
              long long v586 = *(_OWORD *)(v581 + 28);
              *((_DWORD *)v580 + 11) = *((_DWORD *)v581 + 11);
              *(_OWORD *)(v580 + 28) = v586;
              *((void *)v580 + 6) = *((void *)v581 + 6);
              *((void *)v580 + 7) = *((void *)v581 + 7);
              swift_bridgeObjectRetain();
            }
            v1274 = v20;
            uint64_t v587 = v20[7];
            uint64_t v588 = &v580[v587];
            uint64_t v589 = &v581[v587];
            uint64_t v590 = sub_23309B300();
            uint64_t v591 = *(void *)(v590 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v591 + 48))(v589, 1, v590))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v588, v589, *(void *)(*(void *)(v592 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v591 + 16))(v588, v589, v590);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v591 + 56))(v588, 0, 1, v590);
            }
            a3 = v1322;
            uint64_t v593 = v1274[8];
            uint64_t v594 = &v580[v593];
            uint64_t v595 = &v581[v593];
            *(void *)uint64_t v594 = *(void *)v595;
            *((void *)v594 + 1) = *((void *)v595 + 1);
            uint64_t v596 = *(void (**)(void, void, void, void))(v1207 + 56);
            swift_bridgeObjectRetain();
            v596(v580, 0, 1, v1274);
            uint64_t v4 = v1312;
          }
          *(void *)(v7 + v190[14]) = *(void *)&v189[v190[14]];
          *(void *)(v7 + v190[15]) = *(void *)&v189[v190[15]];
          uint64_t v597 = v190[16];
          uint64_t v598 = (void *)(v7 + v597);
          uint64_t v599 = &v189[v597];
          void *v598 = *(void *)v599;
          v598[1] = *((void *)v599 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v5 = v1302;
          uint64_t v9 = v1332;
          uint64_t v10 = v1282;
          goto LABEL_471;
        case 4u:
          v1283 = v10;
          v1303 = v5;
          v1313 = v4;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v24 = *((void *)v8 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v24 != 1) {
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 32) = v24;
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(void *)(v7 + 64) = *((void *)v8 + 8);
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          *(void *)(v7 + 88) = *((void *)v8 + 11);
          *(void *)(v7 + 96) = *((void *)v8 + 12);
          v1244 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
          uint64_t v25 = v1244[11];
          v1230 = (char *)(v7 + v25);
          v1338 = v8;
          uint64_t v26 = &v8[v25];
          uint64_t v27 = type metadata accessor for FHIRDateTime();
          uint64_t v1208 = *(void *)(v27 - 8);
          uint64_t v28 = *(unsigned int (**)(void, void, void))(v1208 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          __dsta = v28;
          uint64_t v1323 = a3;
          uint64_t v1333 = v9;
          v1195 = (int *)v27;
          if (v28(v26, 1, v27))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v1230, v26, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            char *v1230 = *v26;
            uint64_t v102 = *((void *)v26 + 1);
            *((_DWORD *)v1230 + 4) = *((_DWORD *)v26 + 4);
            *((void *)v1230 + 1) = v102;
            if (*((void *)v26 + 7) == 1)
            {
              long long v103 = *(_OWORD *)(v26 + 24);
              long long v104 = *(_OWORD *)(v26 + 40);
              *((void *)v1230 + 7) = *((void *)v26 + 7);
              *(_OWORD *)(v1230 + 24) = v103;
              *(_OWORD *)(v1230 + 40) = v104;
            }
            else
            {
              v1230[24] = v26[24];
              v1230[25] = v26[25];
              v1230[26] = v26[26];
              long long v125 = *(_OWORD *)(v26 + 28);
              *((_DWORD *)v1230 + 11) = *((_DWORD *)v26 + 11);
              *(_OWORD *)(v1230 + 28) = v125;
              *((void *)v1230 + 6) = *((void *)v26 + 6);
              *((void *)v1230 + 7) = *((void *)v26 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v126 = *(int *)(v27 + 28);
            uint64_t v127 = &v1230[v126];
            uint64_t v128 = &v26[v126];
            uint64_t v129 = sub_23309B300();
            uint64_t v130 = *(void *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v127, v128, v129);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
            }
            uint64_t v194 = *(int *)(v27 + 32);
            uint64_t v195 = &v1230[v194];
            uint64_t v196 = &v26[v194];
            *(void *)uint64_t v195 = *(void *)v196;
            *((void *)v195 + 1) = *((void *)v196 + 1);
            long long v197 = *(void (**)(void, void, void, void))(v1208 + 56);
            swift_bridgeObjectRetain();
            v197(v1230, 0, 1, v27);
          }
          uint64_t v198 = v1244[12];
          uint64_t v199 = (void *)(v7 + v198);
          uint64_t v200 = &v1338[v198];
          *uint64_t v199 = *(void *)v200;
          v199[1] = *((void *)v200 + 1);
          *(void *)(v7 + v1244[13]) = *(void *)&v1338[v1244[13]];
          *(void *)(v7 + v1244[14]) = *(void *)&v1338[v1244[14]];
          uint64_t v201 = v1244[15];
          uint64_t v202 = (void *)(v7 + v201);
          uint64_t v203 = &v1338[v201];
          uint64_t v204 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
          uint64_t v205 = *(void *)(v204 - 8);
          uint64_t v206 = *(uint64_t (**)(void, void, void))(v205 + 48);
          swift_bridgeObjectRetain();
          uint64_t v207 = (int *)v204;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          int v208 = v206(v203, 1, v204);
          uint64_t v4 = v1313;
          if (v208)
          {
            sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
            memcpy(v202, v203, *(void *)(*(void *)(v209 - 8) + 64));
            a3 = v1323;
            uint64_t v9 = v1333;
            uint64_t v210 = v1338;
            uint64_t v10 = v1283;
          }
          else
          {
            uint64_t v1191 = v205;
            void *v202 = *(void *)v203;
            v1266 = v207;
            uint64_t v211 = v207[5];
            v1235 = v202;
            uint64_t v212 = (char *)v202 + v211;
            uint64_t v213 = &v203[v211];
            uint64_t v214 = type metadata accessor for Period();
            uint64_t v215 = *(void *)(v214 - 8);
            uint64_t v216 = *(unsigned int (**)(void, void, void))(v215 + 48);
            swift_bridgeObjectRetain();
            a3 = v1323;
            uint64_t v9 = v1333;
            if (v216(v213, 1, v214))
            {
              sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
              memcpy(v212, v213, *(void *)(*(void *)(v217 - 8) + 64));
              uint64_t v4 = v1313;
              uint64_t v210 = v1338;
              uint64_t v10 = v1283;
            }
            else
            {
              uint64_t v210 = v1338;
              if (((unsigned int (*)(char *, uint64_t, int *))__dsta)(v213, 1, v1195))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v212, v213, *(void *)(*(void *)(v270 - 8) + 64));
              }
              else
              {
                *uint64_t v212 = *v213;
                uint64_t v372 = *((void *)v213 + 1);
                *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
                *((void *)v212 + 1) = v372;
                if (*((void *)v213 + 7) == 1)
                {
                  long long v373 = *(_OWORD *)(v213 + 24);
                  long long v374 = *(_OWORD *)(v213 + 40);
                  *((void *)v212 + 7) = *((void *)v213 + 7);
                  *(_OWORD *)(v212 + 24) = v373;
                  *(_OWORD *)(v212 + 40) = v374;
                }
                else
                {
                  v212[24] = v213[24];
                  v212[25] = v213[25];
                  v212[26] = v213[26];
                  long long v800 = *(_OWORD *)(v213 + 28);
                  *((_DWORD *)v212 + 11) = *((_DWORD *)v213 + 11);
                  *(_OWORD *)(v212 + 28) = v800;
                  *((void *)v212 + 6) = *((void *)v213 + 6);
                  *((void *)v212 + 7) = *((void *)v213 + 7);
                  swift_bridgeObjectRetain();
                }
                uint64_t v801 = v1195[7];
                v802 = &v212[v801];
                v803 = &v213[v801];
                uint64_t v804 = sub_23309B300();
                uint64_t v805 = *(void *)(v804 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v805 + 48))(v803, 1, v804))
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v802, v803, *(void *)(*(void *)(v806 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v805 + 16))(v802, v803, v804);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v805 + 56))(v802, 0, 1, v804);
                }
                uint64_t v9 = v1333;
                uint64_t v834 = v1195[8];
                v835 = &v212[v834];
                v836 = &v213[v834];
                *(void *)v835 = *(void *)v836;
                *((void *)v835 + 1) = *((void *)v836 + 1);
                v837 = *(void (**)(void, void, void, void))(v1208 + 56);
                swift_bridgeObjectRetain();
                v837(v212, 0, 1, v1195);
                a3 = v1323;
                uint64_t v210 = v1338;
              }
              uint64_t v10 = v1283;
              uint64_t v838 = *(int *)(v214 + 20);
              v839 = &v212[v838];
              v840 = &v213[v838];
              if (((unsigned int (*)(char *, uint64_t, int *))__dsta)(v840, 1, v1195))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v839, v840, *(void *)(*(void *)(v841 - 8) + 64));
              }
              else
              {
                char *v839 = *v840;
                uint64_t v842 = *((void *)v840 + 1);
                *((_DWORD *)v839 + 4) = *((_DWORD *)v840 + 4);
                *((void *)v839 + 1) = v842;
                if (*((void *)v840 + 7) == 1)
                {
                  long long v843 = *(_OWORD *)(v840 + 24);
                  long long v844 = *(_OWORD *)(v840 + 40);
                  *((void *)v839 + 7) = *((void *)v840 + 7);
                  *(_OWORD *)(v839 + 24) = v843;
                  *(_OWORD *)(v839 + 40) = v844;
                }
                else
                {
                  v839[24] = v840[24];
                  v839[25] = v840[25];
                  v839[26] = v840[26];
                  long long v845 = *(_OWORD *)(v840 + 28);
                  *((_DWORD *)v839 + 11) = *((_DWORD *)v840 + 11);
                  *(_OWORD *)(v839 + 28) = v845;
                  *((void *)v839 + 6) = *((void *)v840 + 6);
                  *((void *)v839 + 7) = *((void *)v840 + 7);
                  swift_bridgeObjectRetain();
                }
                uint64_t v846 = v1195[7];
                v847 = v839;
                v848 = &v839[v846];
                v849 = &v840[v846];
                uint64_t v850 = sub_23309B300();
                uint64_t v851 = *(void *)(v850 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v851 + 48))(v849, 1, v850))
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v848, v849, *(void *)(*(void *)(v852 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v851 + 16))(v848, v849, v850);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v851 + 56))(v848, 0, 1, v850);
                }
                uint64_t v9 = v1333;
                uint64_t v924 = v1195[8];
                v925 = &v847[v924];
                v926 = &v840[v924];
                char *v925 = *(void *)v926;
                v925[1] = *((void *)v926 + 1);
                v927 = *(void (**)(void, void, void, void))(v1208 + 56);
                swift_bridgeObjectRetain();
                v927(v847, 0, 1, v1195);
                a3 = v1323;
                uint64_t v210 = v1338;
                uint64_t v10 = v1283;
              }
              (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
              uint64_t v4 = v1313;
            }
            (*(void (**)(void *, void, uint64_t, int *))(v1191 + 56))(v1235, 0, 1, v1266);
          }
          uint64_t v928 = v1244[16];
          v929 = (void *)(v7 + v928);
          v930 = &v210[v928];
          void *v929 = *(void *)v930;
          v929[1] = *((void *)v930 + 1);
          uint64_t v5 = v1303;
          goto LABEL_471;
        case 5u:
          v1284 = v10;
          uint64_t v1334 = v9;
          v1314 = v4;
          uint64_t v1324 = a3;
          v1304 = v5;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v30 = *((void *)v8 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v30 != 1) {
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 32) = v30;
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          uint64_t v31 = *((void *)v8 + 7);
          *(void *)(v7 + 61) = *(void *)(v8 + 61);
          *(void *)(v7 + 56) = v31;
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          uint64_t v32 = (int *)type metadata accessor for ModelsR4.Immunization(0);
          uint64_t v33 = v32[10];
          uint64_t v34 = (char *)(v7 + v33);
          v1339 = v8;
          uint64_t v35 = &v8[v33];
          uint64_t v36 = type metadata accessor for FHIRDateTime();
          uint64_t v37 = *(void **)(v36 - 8);
          uint64_t v38 = (unsigned int (*)(void, void, void))v37[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v38(v35, 1, v36))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            *uint64_t v34 = *v35;
            uint64_t v105 = *((void *)v35 + 1);
            *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
            *((void *)v34 + 1) = v105;
            v1264 = v37;
            if (*((void *)v35 + 7) == 1)
            {
              long long v106 = *(_OWORD *)(v35 + 24);
              long long v107 = *(_OWORD *)(v35 + 40);
              *((void *)v34 + 7) = *((void *)v35 + 7);
              *(_OWORD *)(v34 + 24) = v106;
              *(_OWORD *)(v34 + 40) = v107;
            }
            else
            {
              v34[24] = v35[24];
              v34[25] = v35[25];
              v34[26] = v35[26];
              long long v132 = *(_OWORD *)(v35 + 28);
              *((_DWORD *)v34 + 11) = *((_DWORD *)v35 + 11);
              *(_OWORD *)(v34 + 28) = v132;
              *((void *)v34 + 6) = *((void *)v35 + 6);
              *((void *)v34 + 7) = *((void *)v35 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v133 = *(int *)(v36 + 28);
            v1248 = &v34[v133];
            uint64_t v134 = &v35[v133];
            uint64_t v135 = sub_23309B300();
            uint64_t v136 = *(void *)(v135 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1248, v134, *(void *)(*(void *)(v137 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v1248, v134, v135);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v136 + 56))(v1248, 0, 1, v135);
            }
            uint64_t v218 = *(int *)(v36 + 32);
            uint64_t v219 = &v34[v218];
            uint64_t v220 = &v35[v218];
            *(void *)uint64_t v219 = *(void *)v220;
            *((void *)v219 + 1) = *((void *)v220 + 1);
            uint64_t v37 = v1264;
            uint64_t v221 = (void (*)(void, void, void, void))v1264[7];
            swift_bridgeObjectRetain();
            v221(v34, 0, 1, v36);
          }
          *(void *)(v7 + v32[11]) = *(void *)&v8[v32[11]];
          uint64_t v222 = v32[12];
          uint64_t v223 = (char *)(v7 + v222);
          uint64_t v224 = &v8[v222];
          swift_bridgeObjectRetain();
          if (v38(v224, 1, v36))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v223, v224, *(void *)(*(void *)(v225 - 8) + 64));
            uint64_t v226 = v8;
          }
          else
          {
            *uint64_t v223 = *v224;
            uint64_t v227 = *((void *)v224 + 1);
            *((_DWORD *)v223 + 4) = *((_DWORD *)v224 + 4);
            *((void *)v223 + 1) = v227;
            v1267 = v37;
            if (*((void *)v224 + 7) == 1)
            {
              long long v228 = *(_OWORD *)(v224 + 24);
              long long v229 = *(_OWORD *)(v224 + 40);
              *((void *)v223 + 7) = *((void *)v224 + 7);
              *(_OWORD *)(v223 + 24) = v228;
              *(_OWORD *)(v223 + 40) = v229;
            }
            else
            {
              v223[24] = v224[24];
              v223[25] = v224[25];
              v223[26] = v224[26];
              long long v230 = *(_OWORD *)(v224 + 28);
              *((_DWORD *)v223 + 11) = *((_DWORD *)v224 + 11);
              *(_OWORD *)(v223 + 28) = v230;
              *((void *)v223 + 6) = *((void *)v224 + 6);
              *((void *)v223 + 7) = *((void *)v224 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v226 = v8;
            uint64_t v231 = *(int *)(v36 + 28);
            v1250 = &v223[v231];
            uint64_t v232 = &v224[v231];
            uint64_t v233 = sub_23309B300();
            uint64_t v234 = *(void *)(v233 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v234 + 48))(v232, 1, v233))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1250, v232, *(void *)(*(void *)(v235 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v234 + 16))(v1250, v232, v233);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56))(v1250, 0, 1, v233);
            }
            uint64_t v271 = *(int *)(v36 + 32);
            uint64_t v272 = &v223[v271];
            uint64_t v273 = &v224[v271];
            *(void *)uint64_t v272 = *(void *)v273;
            *((void *)v272 + 1) = *((void *)v273 + 1);
            uint64_t v274 = (void (*)(void, void, void, void))v1267[7];
            swift_bridgeObjectRetain();
            v274(v223, 0, 1, v36);
          }
          uint64_t v275 = v32[13];
          uint64_t v276 = (void *)(v7 + v275);
          uint64_t v277 = &v226[v275];
          *uint64_t v276 = *(void *)v277;
          v276[1] = *((void *)v277 + 1);
          v276[2] = *((void *)v277 + 2);
          uint64_t v278 = v32[14];
          uint64_t v279 = (void *)(v7 + v278);
          uint64_t v280 = &v226[v278];
          uint64_t v281 = type metadata accessor for Reference();
          long long v282 = *(void **)(v281 - 8);
          uint64_t v283 = (unsigned int (*)(void, void, void))v282[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v283(v280, 1, v281))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v279, v280, *(void *)(*(void *)(v284 - 8) + 64));
            uint64_t v4 = v1314;
          }
          else
          {
            v1252 = v279;
            v1268 = (void (**)(void *, void, uint64_t, uint64_t))v282;
            *uint64_t v279 = *(void *)v280;
            v279[1] = *((void *)v280 + 1);
            v279[2] = *((void *)v280 + 2);
            v279[3] = *((void *)v280 + 3);
            uint64_t v285 = *(int *)(v281 + 24);
            v1236 = (void *)((char *)v279 + v285);
            uint64_t v286 = &v280[v285];
            uint64_t v287 = type metadata accessor for Identifier();
            uint64_t v288 = *(void *)(v287 - 8);
            long long v289 = *(unsigned int (**)(void, void, void))(v288 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v289(v286, 1, v287))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v1236, v286, *(void *)(*(void *)(v290 - 8) + 64));
              uint64_t v8 = v1339;
            }
            else
            {
              uint64_t v1211 = v288;
              void *v1236 = *(void *)v286;
              v1236[1] = *((void *)v286 + 1);
              uint64_t v305 = *((void *)v286 + 3);
              swift_bridgeObjectRetain();
              uint64_t v8 = v1339;
              if (v305 == 1)
              {
                long long v306 = *((_OWORD *)v286 + 1);
                v1236[4] = *((void *)v286 + 4);
                *((_OWORD *)v1236 + 1) = v306;
              }
              else
              {
                v1236[2] = *((void *)v286 + 2);
                v1236[3] = *((void *)v286 + 3);
                v1236[4] = *((void *)v286 + 4);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              uint64_t v360 = *(int *)(v287 + 24);
              __dstd = (char *)v1236 + v360;
              uint64_t v361 = &v286[v360];
              uint64_t v362 = sub_23309AF80();
              uint64_t v363 = *(void *)(v362 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v363 + 48))(v361, 1, v362))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(__dstd, v361, *(void *)(*(void *)(v364 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v363 + 16))(__dstd, v361, v362);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v363 + 56))(__dstd, 0, 1, v362);
              }
              uint64_t v498 = *(int *)(v287 + 28);
              uint64_t v499 = (void *)((char *)v1236 + v498);
              uint64_t v500 = &v286[v498];
              void *v499 = *(void *)v500;
              v499[1] = *((void *)v500 + 1);
              uint64_t v501 = *(void (**)(void, void, void, void))(v1211 + 56);
              swift_bridgeObjectRetain();
              v501(v1236, 0, 1, v287);
            }
            v1268[7](v1252, 0, 1, v281);
            uint64_t v4 = v1314;
          }
          *(unsigned char *)(v7 + v32[15]) = v8[v32[15]];
          uint64_t v502 = v32[16];
          uint64_t v503 = (void *)(v7 + v502);
          uint64_t v504 = &v8[v502];
          void *v503 = *(void *)v504;
          v503[1] = *((void *)v504 + 1);
          *(void *)(v7 + v32[17]) = *(void *)&v8[v32[17]];
          *(unsigned char *)(v7 + v32[18]) = v8[v32[18]];
          uint64_t v505 = v32[19];
          uint64_t v506 = v7 + v505;
          uint64_t v507 = &v8[v505];
          uint64_t v508 = *(void *)&v8[v505];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v5 = v1304;
          a3 = v1324;
          if (v508 == 1)
          {
            long long v509 = *(_OWORD *)v507;
            long long v510 = *((_OWORD *)v507 + 1);
            long long v511 = *((_OWORD *)v507 + 2);
            *(void *)(v506 + 48) = *((void *)v507 + 6);
            *(_OWORD *)(v506 + 16) = v510;
            *(_OWORD *)(v506 + 32) = v511;
            *(_OWORD *)uint64_t v506 = v509;
          }
          else
          {
            *(void *)uint64_t v506 = v508;
            uint64_t v512 = *((void *)v507 + 2);
            swift_bridgeObjectRetain();
            if (v512 == 1)
            {
              long long v513 = *(_OWORD *)(v507 + 8);
              *(void *)(v506 + 24) = *((void *)v507 + 3);
              *(_OWORD *)(v506 + 8) = v513;
            }
            else
            {
              *(void *)(v506 + 8) = *((void *)v507 + 1);
              *(void *)(v506 + 16) = *((void *)v507 + 2);
              *(void *)(v506 + 24) = *((void *)v507 + 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            *(void *)(v506 + 32) = *((void *)v507 + 4);
            *(void *)(v506 + 40) = *((void *)v507 + 5);
            *(void *)(v506 + 48) = *((void *)v507 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v8 = v1339;
          }
          uint64_t v514 = v32[20];
          uint64_t v515 = (void *)(v7 + v514);
          uint64_t v516 = &v8[v514];
          *uint64_t v515 = *(void *)v516;
          v515[1] = *((void *)v516 + 1);
          uint64_t v9 = v1334;
          uint64_t v10 = v1284;
          goto LABEL_471;
        case 6u:
          v1285 = v10;
          v1315 = v4;
          uint64_t v1325 = a3;
          v1305 = v5;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v40 = *((void *)v8 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v40 != 1) {
            swift_bridgeObjectRetain();
          }
          *(void *)(v7 + 32) = v40;
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(void *)(v7 + 64) = *((void *)v8 + 8);
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          v1245 = (int *)type metadata accessor for ModelsR4.Observation(0);
          v1260 = (void *)v7;
          uint64_t v41 = v1245[10];
          uint64_t v42 = (char *)(v7 + v41);
          v1340 = v8;
          uint64_t v43 = &v8[v41];
          uint64_t v44 = type metadata accessor for FHIRDateTime();
          v1231 = *(void **)(v44 - 8);
          uint64_t v45 = (unsigned int (*)(void, void, void))v1231[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1335 = v9;
          v1217 = v45;
          if (v45(v43, 1, v44))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
            uint64_t v47 = v1245;
            uint64_t v7 = (uint64_t)v1260;
          }
          else
          {
            *uint64_t v42 = *v43;
            uint64_t v108 = *((void *)v43 + 1);
            *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
            *((void *)v42 + 1) = v108;
            long long v109 = v42;
            if (*((void *)v43 + 7) == 1)
            {
              long long v110 = *(_OWORD *)(v43 + 24);
              long long v111 = *(_OWORD *)(v43 + 40);
              *((void *)v42 + 7) = *((void *)v43 + 7);
              *(_OWORD *)(v42 + 24) = v110;
              *(_OWORD *)(v42 + 40) = v111;
            }
            else
            {
              v42[24] = v43[24];
              v42[25] = v43[25];
              v42[26] = v43[26];
              long long v138 = *(_OWORD *)(v43 + 28);
              *((_DWORD *)v42 + 11) = *((_DWORD *)v43 + 11);
              *(_OWORD *)(v42 + 28) = v138;
              *((void *)v42 + 6) = *((void *)v43 + 6);
              *((void *)v42 + 7) = *((void *)v43 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v7 = (uint64_t)v1260;
            uint64_t v139 = *(int *)(v44 + 28);
            uint64_t v140 = &v109[v139];
            uint64_t v141 = &v43[v139];
            uint64_t v142 = sub_23309B300();
            uint64_t v143 = *(void *)(v142 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v141, 1, v142))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v140, v141, *(void *)(*(void *)(v144 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v140, v141, v142);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v140, 0, 1, v142);
            }
            uint64_t v47 = v1245;
            uint64_t v236 = *(int *)(v44 + 32);
            uint64_t v237 = &v109[v236];
            uint64_t v238 = &v43[v236];
            *(void *)uint64_t v237 = *(void *)v238;
            *((void *)v237 + 1) = *((void *)v238 + 1);
            long long v239 = (void (*)(void, void, void, void))v1231[7];
            swift_bridgeObjectRetain();
            v239(v109, 0, 1, v44);
            uint64_t v9 = v1335;
            uint64_t v45 = (unsigned int (*)(void, void, void))v1217;
          }
          uint64_t v240 = v47[11];
          uint64_t v241 = (char *)(v7 + v240);
          uint64_t v242 = &v8[v240];
          if (v45(&v8[v240], 1, v44))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v241, v242, *(void *)(*(void *)(v243 - 8) + 64));
          }
          else
          {
            *uint64_t v241 = *v242;
            uint64_t v244 = *((void *)v242 + 1);
            *((_DWORD *)v241 + 4) = *((_DWORD *)v242 + 4);
            *((void *)v241 + 1) = v244;
            if (*((void *)v242 + 7) == 1)
            {
              long long v245 = *(_OWORD *)(v242 + 24);
              long long v246 = *(_OWORD *)(v242 + 40);
              *((void *)v241 + 7) = *((void *)v242 + 7);
              *(_OWORD *)(v241 + 24) = v245;
              *(_OWORD *)(v241 + 40) = v246;
            }
            else
            {
              v241[24] = v242[24];
              v241[25] = v242[25];
              v241[26] = v242[26];
              long long v247 = *(_OWORD *)(v242 + 28);
              *((_DWORD *)v241 + 11) = *((_DWORD *)v242 + 11);
              *(_OWORD *)(v241 + 28) = v247;
              *((void *)v241 + 6) = *((void *)v242 + 6);
              *((void *)v241 + 7) = *((void *)v242 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v248 = *(int *)(v44 + 28);
            uint64_t v249 = &v241[v248];
            uint64_t v250 = &v242[v248];
            uint64_t v251 = sub_23309B300();
            uint64_t v252 = *(void *)(v251 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48))(v250, 1, v251))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v249, v250, *(void *)(*(void *)(v253 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v252 + 16))(v249, v250, v251);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(v249, 0, 1, v251);
            }
            uint64_t v47 = v1245;
            uint64_t v291 = *(int *)(v44 + 32);
            uint64_t v292 = &v241[v291];
            uint64_t v293 = &v242[v291];
            *(void *)uint64_t v292 = *(void *)v293;
            *((void *)v292 + 1) = *((void *)v293 + 1);
            uint64_t v294 = (void (*)(void, void, void, void))v1231[7];
            swift_bridgeObjectRetain();
            v294(v241, 0, 1, v44);
            uint64_t v9 = v1335;
            uint64_t v45 = (unsigned int (*)(void, void, void))v1217;
          }
          uint64_t v295 = v47[12];
          uint64_t v296 = (char *)(v7 + v295);
          long long v297 = &v8[v295];
          uint64_t v298 = type metadata accessor for Period();
          uint64_t v299 = *(void *)(v298 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v299 + 48))(v297, 1, v298))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v296, v297, *(void *)(*(void *)(v300 - 8) + 64));
          }
          else
          {
            v1269 = (void *)v298;
            v1210 = v296;
            if (v45(v297, 1, v44))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v296, v297, *(void *)(*(void *)(v301 - 8) + 64));
            }
            else
            {
              *uint64_t v296 = *v297;
              uint64_t v307 = *((void *)v297 + 1);
              *((_DWORD *)v296 + 4) = *((_DWORD *)v297 + 4);
              *((void *)v296 + 1) = v307;
              if (*((void *)v297 + 7) == 1)
              {
                long long v308 = *(_OWORD *)(v297 + 24);
                long long v309 = *(_OWORD *)(v297 + 40);
                *((void *)v296 + 7) = *((void *)v297 + 7);
                *(_OWORD *)(v296 + 24) = v308;
                *(_OWORD *)(v296 + 40) = v309;
              }
              else
              {
                v296[24] = v297[24];
                v296[25] = v297[25];
                v296[26] = v297[26];
                long long v365 = *(_OWORD *)(v297 + 28);
                *((_DWORD *)v296 + 11) = *((_DWORD *)v297 + 11);
                *(_OWORD *)(v296 + 28) = v365;
                *((void *)v296 + 6) = *((void *)v297 + 6);
                *((void *)v296 + 7) = *((void *)v297 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v366 = *(int *)(v44 + 28);
              uint64_t v367 = &v296[v366];
              uint64_t v368 = &v297[v366];
              uint64_t v369 = sub_23309B300();
              uint64_t v370 = *(void *)(v369 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v370 + 48))(v368, 1, v369))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v367, v368, *(void *)(*(void *)(v371 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v370 + 16))(v367, v368, v369);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v370 + 56))(v367, 0, 1, v369);
              }
              uint64_t v9 = v1335;
              uint64_t v517 = *(int *)(v44 + 32);
              uint64_t v296 = v1210;
              uint64_t v518 = &v1210[v517];
              uint64_t v519 = &v297[v517];
              *(void *)uint64_t v518 = *(void *)v519;
              *((void *)v518 + 1) = *((void *)v519 + 1);
              uint64_t v520 = (void (*)(void, void, void, void))v1231[7];
              swift_bridgeObjectRetain();
              v520(v1210, 0, 1, v44);
              uint64_t v47 = v1245;
              uint64_t v45 = (unsigned int (*)(void, void, void))v1217;
            }
            uint64_t v521 = *(int *)(v298 + 20);
            uint64_t v522 = &v296[v521];
            uint64_t v523 = &v297[v521];
            if (v45(v523, 1, v44))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v522, v523, *(void *)(*(void *)(v524 - 8) + 64));
            }
            else
            {
              *uint64_t v522 = *v523;
              uint64_t v525 = *((void *)v523 + 1);
              *((_DWORD *)v522 + 4) = *((_DWORD *)v523 + 4);
              *((void *)v522 + 1) = v525;
              if (*((void *)v523 + 7) == 1)
              {
                long long v526 = *(_OWORD *)(v523 + 24);
                long long v527 = *(_OWORD *)(v523 + 40);
                *((void *)v522 + 7) = *((void *)v523 + 7);
                *(_OWORD *)(v522 + 24) = v526;
                *(_OWORD *)(v522 + 40) = v527;
              }
              else
              {
                v522[24] = v523[24];
                v522[25] = v523[25];
                v522[26] = v523[26];
                long long v528 = *(_OWORD *)(v523 + 28);
                *((_DWORD *)v522 + 11) = *((_DWORD *)v523 + 11);
                *(_OWORD *)(v522 + 28) = v528;
                *((void *)v522 + 6) = *((void *)v523 + 6);
                *((void *)v522 + 7) = *((void *)v523 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v529 = *(int *)(v44 + 28);
              uint64_t v530 = &v522[v529];
              long long v531 = &v523[v529];
              uint64_t v532 = sub_23309B300();
              uint64_t v533 = *(void *)(v532 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v533 + 48))(v531, 1, v532))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v530, v531, *(void *)(*(void *)(v534 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v533 + 16))(v530, v531, v532);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v533 + 56))(v530, 0, 1, v532);
              }
              uint64_t v641 = *(int *)(v44 + 32);
              uint64_t v642 = &v522[v641];
              uint64_t v643 = &v523[v641];
              *(void *)uint64_t v642 = *(void *)v643;
              *((void *)v642 + 1) = *((void *)v643 + 1);
              uint64_t v644 = (void (*)(void, void, void, void))v1231[7];
              swift_bridgeObjectRetain();
              v644(v522, 0, 1, v44);
              uint64_t v9 = v1335;
              uint64_t v47 = v1245;
              uint64_t v45 = (unsigned int (*)(void, void, void))v1217;
            }
            (*(void (**)(char *, void, uint64_t, void *))(v299 + 56))(v1210, 0, 1, v1269);
          }
          uint64_t v645 = v47[13];
          uint64_t v646 = (char *)(v7 + v645);
          v647 = &v8[v645];
          if (v45(&v8[v645], 1, v44))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v646, v647, *(void *)(*(void *)(v648 - 8) + 64));
            uint64_t v649 = v8;
          }
          else
          {
            *uint64_t v646 = *v647;
            uint64_t v650 = *((void *)v647 + 1);
            *((_DWORD *)v646 + 4) = *((_DWORD *)v647 + 4);
            *((void *)v646 + 1) = v650;
            uint64_t v651 = v9;
            if (*((void *)v647 + 7) == 1)
            {
              long long v652 = *(_OWORD *)(v647 + 24);
              long long v653 = *(_OWORD *)(v647 + 40);
              *((void *)v646 + 7) = *((void *)v647 + 7);
              *(_OWORD *)(v646 + 24) = v652;
              *(_OWORD *)(v646 + 40) = v653;
            }
            else
            {
              v646[24] = v647[24];
              v646[25] = v647[25];
              v646[26] = v647[26];
              long long v654 = *(_OWORD *)(v647 + 28);
              *((_DWORD *)v646 + 11) = *((_DWORD *)v647 + 11);
              *(_OWORD *)(v646 + 28) = v654;
              *((void *)v646 + 6) = *((void *)v647 + 6);
              *((void *)v646 + 7) = *((void *)v647 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v649 = v8;
            uint64_t v655 = *(int *)(v44 + 28);
            v656 = &v646[v655];
            v657 = &v647[v655];
            uint64_t v658 = sub_23309B300();
            uint64_t v659 = *(void *)(v658 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v659 + 48))(v657, 1, v658))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v656, v657, *(void *)(*(void *)(v660 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v659 + 16))(v656, v657, v658);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v659 + 56))(v656, 0, 1, v658);
            }
            uint64_t v47 = v1245;
            uint64_t v661 = *(int *)(v44 + 32);
            v662 = &v646[v661];
            uint64_t v663 = &v647[v661];
            *(void *)v662 = *(void *)v663;
            *((void *)v662 + 1) = *((void *)v663 + 1);
            uint64_t v664 = (void (*)(void, void, void, void))v1231[7];
            swift_bridgeObjectRetain();
            v664(v646, 0, 1, v44);
            uint64_t v9 = v651;
          }
          *(void *)(v7 + v47[14]) = *(void *)&v649[v47[14]];
          *(void *)(v7 + v47[15]) = *(void *)&v649[v47[15]];
          uint64_t v665 = v47[16];
          uint64_t v666 = (void *)(v7 + v665);
          v667 = &v649[v665];
          void *v666 = *(void *)v667;
          v666[1] = *((void *)v667 + 1);
          uint64_t v668 = v47[17];
          uint64_t v669 = v7 + v668;
          uint64_t v670 = &v649[v668];
          uint64_t v671 = *((void *)v670 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v671 == 1)
          {
            long long v672 = *(_OWORD *)v670;
            *(void *)(v669 + 16) = *((void *)v670 + 2);
            *(_OWORD *)uint64_t v669 = v672;
          }
          else
          {
            *(void *)uint64_t v669 = *(void *)v670;
            *(void *)(v669 + 8) = *((void *)v670 + 1);
            *(void *)(v669 + 16) = *((void *)v670 + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v673 = v1245;
          uint64_t v674 = v1245[18];
          v675 = (void *)(v7 + v674);
          uint64_t v676 = v1340;
          uint64_t v677 = &v1340[v674];
          uint64_t v678 = type metadata accessor for Quantity();
          uint64_t v679 = *(void *)(v678 - 8);
          uint64_t v10 = v1285;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v679 + 48))(v677, 1, v678))
          {
            sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v675, v677, *(void *)(*(void *)(v680 - 8) + 64));
          }
          else
          {
            long long v681 = *(_OWORD *)v677;
            *(void *)((char *)v675 + 13) = *(void *)(v677 + 13);
            *(_OWORD *)v675 = v681;
            v675[3] = *((void *)v677 + 3);
            v675[4] = *((void *)v677 + 4);
            v675[5] = *((void *)v677 + 5);
            v675[6] = *((void *)v677 + 6);
            uint64_t v682 = *(int *)(v678 + 28);
            v1222 = (char *)v675 + v682;
            v1275 = &v677[v682];
            uint64_t v683 = sub_23309AF80();
            uint64_t v684 = *(void *)(v683 - 8);
            v685 = *(unsigned int (**)(void, void, void))(v684 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v685(v1275, 1, v683))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v1222, v1275, *(void *)(*(void *)(v686 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v684 + 16))(v1222, v1275, v683);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v684 + 56))(v1222, 0, 1, v683);
            }
            uint64_t v9 = v1335;
            uint64_t v10 = v1285;
            uint64_t v687 = *(int *)(v678 + 32);
            v688 = (void *)((char *)v675 + v687);
            v689 = &v677[v687];
            void *v688 = *(void *)v689;
            v688[1] = *((void *)v689 + 1);
            uint64_t v690 = *(void (**)(void, void, void, void))(v679 + 56);
            swift_bridgeObjectRetain();
            v690(v675, 0, 1, v678);
            uint64_t v676 = v1340;
            uint64_t v673 = v1245;
          }
          *(void *)(v7 + v673[19]) = *(void *)&v676[v673[19]];
          uint64_t v691 = v673[20];
          v692 = (void *)(v7 + v691);
          v693 = &v676[v691];
          void *v692 = *(void *)v693;
          v692[1] = *((void *)v693 + 1);
          swift_bridgeObjectRetain();
          uint64_t v5 = v1305;
          uint64_t v4 = v1315;
          a3 = v1325;
          goto LABEL_471;
        case 7u:
          uint64_t v1336 = v9;
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v48 = *((void *)v8 + 4);
          *(void *)(v7 + 37) = *(void *)(v8 + 37);
          *(void *)(v7 + 32) = v48;
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(void *)(v7 + 64) = *((void *)v8 + 8);
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          *(void *)(v7 + 88) = *((void *)v8 + 11);
          uint64_t v49 = *((void *)v8 + 13);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v49 == 1)
          {
            long long v50 = *((_OWORD *)v8 + 6);
            *(void *)(v7 + 112) = *((void *)v8 + 14);
            *(_OWORD *)(v7 + 96) = v50;
          }
          else
          {
            *(void *)(v7 + 96) = *((void *)v8 + 12);
            *(void *)(v7 + 104) = *((void *)v8 + 13);
            *(void *)(v7 + 112) = *((void *)v8 + 14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          uint64_t v9 = v1336;
          *(void *)(v7 + 120) = *((void *)v8 + 15);
          *(void *)(v7 + 128) = *((void *)v8 + 16);
          *(void *)(v7 + 136) = *((void *)v8 + 17);
          *(void *)(v7 + 144) = *((void *)v8 + 18);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_471;
        case 8u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          *(void *)(v7 + 32) = *((void *)v8 + 4);
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          swift_bridgeObjectRetain();
          goto LABEL_33;
        default:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          *(void *)(v7 + 32) = *((void *)v8 + 4);
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_33:
          swift_bridgeObjectRetain();
LABEL_471:
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v10[7])(v7, 0, 1, v9);
          break;
      }
      goto LABEL_472;
    }
LABEL_7:
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_472;
  }
  if (v13)
  {
    sub_232EA3DC4(v7, type metadata accessor for ModelsR4.ResourceProxy);
    goto LABEL_7;
  }
  if (v5 != v4)
  {
    sub_232EA3DC4(v7, type metadata accessor for ModelsR4.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        *(void *)(v7 + 32) = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v1307 = v5;
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v63 = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v63 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 32) = v63;
        if (*((void *)v8 + 6) == 1)
        {
          long long v64 = *(_OWORD *)(v8 + 40);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(_OWORD *)(v7 + 40) = v64;
        }
        else
        {
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (*((void *)v8 + 9) == 1)
        {
          long long v116 = *((_OWORD *)v8 + 4);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          *(_OWORD *)(v7 + 64) = v116;
        }
        else
        {
          *(void *)(v7 + 64) = *((void *)v8 + 8);
          *(void *)(v7 + 72) = *((void *)v8 + 9);
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 88) = *((void *)v8 + 11);
        uint64_t v152 = *((void *)v8 + 13);
        swift_bridgeObjectRetain();
        if (v152 == 1)
        {
          long long v153 = *((_OWORD *)v8 + 6);
          *(void *)(v7 + 112) = *((void *)v8 + 14);
          *(_OWORD *)(v7 + 96) = v153;
        }
        else
        {
          *(void *)(v7 + 96) = *((void *)v8 + 12);
          *(void *)(v7 + 104) = *((void *)v8 + 13);
          *(void *)(v7 + 112) = *((void *)v8 + 14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v1330 = a3;
        if (*((void *)v8 + 16) == 1)
        {
          long long v154 = *(_OWORD *)(v8 + 120);
          *(void *)(v7 + 136) = *((void *)v8 + 17);
          *(_OWORD *)(v7 + 120) = v154;
        }
        else
        {
          *(void *)(v7 + 120) = *((void *)v8 + 15);
          *(void *)(v7 + 128) = *((void *)v8 + 16);
          *(void *)(v7 + 136) = *((void *)v8 + 17);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 144) = *((void *)v8 + 18);
        uint64_t v155 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v156 = v155[13];
        uint64_t v157 = (char *)(v7 + v156);
        uint64_t v158 = &v8[v156];
        uint64_t v159 = type metadata accessor for FHIRDateTime();
        v1249 = *(void **)(v159 - 8);
        uint64_t v160 = (unsigned int (*)(void, void, void))v1249[6];
        uint64_t v161 = (int *)v159;
        swift_bridgeObjectRetain();
        v1300 = v155;
        v1265 = v161;
        v1234 = v160;
        v1321 = v4;
        if (v160(v158, 1, v161))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v157, v158, *(void *)(*(void *)(v162 - 8) + 64));
        }
        else
        {
          char *v157 = *v158;
          uint64_t v264 = *((void *)v158 + 1);
          *((_DWORD *)v157 + 4) = *((_DWORD *)v158 + 4);
          *((void *)v157 + 1) = v264;
          if (*((void *)v158 + 7) == 1)
          {
            long long v265 = *(_OWORD *)(v158 + 24);
            long long v266 = *(_OWORD *)(v158 + 40);
            *((void *)v157 + 7) = *((void *)v158 + 7);
            *(_OWORD *)(v157 + 24) = v265;
            *(_OWORD *)(v157 + 40) = v266;
          }
          else
          {
            v157[24] = v158[24];
            v157[25] = v158[25];
            v157[26] = v158[26];
            long long v339 = *(_OWORD *)(v158 + 28);
            *((_DWORD *)v157 + 11) = *((_DWORD *)v158 + 11);
            *(_OWORD *)(v157 + 28) = v339;
            *((void *)v157 + 6) = *((void *)v158 + 6);
            *((void *)v157 + 7) = *((void *)v158 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v340 = v161[7];
          uint64_t v341 = &v157[v340];
          long long v342 = &v158[v340];
          uint64_t v343 = sub_23309B300();
          uint64_t v344 = *(void *)(v343 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v344 + 48))(v342, 1, v343))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v341, v342, *(void *)(*(void *)(v345 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v344 + 16))(v341, v342, v343);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v344 + 56))(v341, 0, 1, v343);
          }
          uint64_t v453 = v1265[8];
          uint64_t v454 = &v157[v453];
          uint64_t v455 = &v158[v453];
          *(void *)uint64_t v454 = *(void *)v455;
          *((void *)v454 + 1) = *((void *)v455 + 1);
          uint64_t v456 = (void (*)(void, void, void, void))v1249[7];
          swift_bridgeObjectRetain();
          v456(v157, 0, 1, v1265);
          uint64_t v161 = v1265;
          uint64_t v160 = (unsigned int (*)(void, void, void))v1234;
        }
        uint64_t v457 = v155[14];
        uint64_t v458 = (char *)(v7 + v457);
        uint64_t v459 = &v8[v457];
        uint64_t v460 = type metadata accessor for Period();
        __dste = *(void **)(v460 - 8);
        v1221 = (void *)__dste[6];
        v1291 = (int *)v460;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v1221)(v459, 1, v460))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v458, v459, *(void *)(*(void *)(v461 - 8) + 64));
        }
        else
        {
          if (v160(v459, 1, v161))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v458, v459, *(void *)(*(void *)(v462 - 8) + 64));
          }
          else
          {
            *uint64_t v458 = *v459;
            uint64_t v572 = *((void *)v459 + 1);
            *((_DWORD *)v458 + 4) = *((_DWORD *)v459 + 4);
            *((void *)v458 + 1) = v572;
            if (*((void *)v459 + 7) == 1)
            {
              long long v573 = *(_OWORD *)(v459 + 24);
              long long v574 = *(_OWORD *)(v459 + 40);
              *((void *)v458 + 7) = *((void *)v459 + 7);
              *(_OWORD *)(v458 + 24) = v573;
              *(_OWORD *)(v458 + 40) = v574;
            }
            else
            {
              v458[24] = v459[24];
              v458[25] = v459[25];
              v458[26] = v459[26];
              long long v813 = *(_OWORD *)(v459 + 28);
              *((_DWORD *)v458 + 11) = *((_DWORD *)v459 + 11);
              *(_OWORD *)(v458 + 28) = v813;
              *((void *)v458 + 6) = *((void *)v459 + 6);
              *((void *)v458 + 7) = *((void *)v459 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v814 = v161[7];
            v815 = &v458[v814];
            v816 = &v459[v814];
            uint64_t v817 = sub_23309B300();
            uint64_t v818 = *(void *)(v817 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v818 + 48))(v816, 1, v817))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v815, v816, *(void *)(*(void *)(v819 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v818 + 16))(v815, v816, v817);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v818 + 56))(v815, 0, 1, v817);
            }
            uint64_t v870 = v1265[8];
            v871 = &v458[v870];
            v872 = &v459[v870];
            *(void *)v871 = *(void *)v872;
            *((void *)v871 + 1) = *((void *)v872 + 1);
            v873 = (void (*)(void, void, void, void))v1249[7];
            swift_bridgeObjectRetain();
            v873(v458, 0, 1, v1265);
            uint64_t v161 = v1265;
            uint64_t v460 = (uint64_t)v1291;
            uint64_t v155 = v1300;
          }
          uint64_t v874 = *(int *)(v460 + 20);
          v875 = &v458[v874];
          v876 = &v459[v874];
          if (v160(v876, 1, v161))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v875, v876, *(void *)(*(void *)(v877 - 8) + 64));
          }
          else
          {
            char *v875 = *v876;
            uint64_t v878 = *((void *)v876 + 1);
            *((_DWORD *)v875 + 4) = *((_DWORD *)v876 + 4);
            *((void *)v875 + 1) = v878;
            if (*((void *)v876 + 7) == 1)
            {
              long long v879 = *(_OWORD *)(v876 + 24);
              long long v880 = *(_OWORD *)(v876 + 40);
              *((void *)v875 + 7) = *((void *)v876 + 7);
              *(_OWORD *)(v875 + 24) = v879;
              *(_OWORD *)(v875 + 40) = v880;
            }
            else
            {
              v875[24] = v876[24];
              v875[25] = v876[25];
              v875[26] = v876[26];
              long long v881 = *(_OWORD *)(v876 + 28);
              *((_DWORD *)v875 + 11) = *((_DWORD *)v876 + 11);
              *(_OWORD *)(v875 + 28) = v881;
              *((void *)v875 + 6) = *((void *)v876 + 6);
              *((void *)v875 + 7) = *((void *)v876 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v882 = v161[7];
            v883 = &v875[v882];
            v884 = &v876[v882];
            uint64_t v885 = sub_23309B300();
            uint64_t v886 = *(void *)(v885 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v886 + 48))(v884, 1, v885))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v883, v884, *(void *)(*(void *)(v887 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v886 + 16))(v883, v884, v885);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v886 + 56))(v883, 0, 1, v885);
            }
            uint64_t v966 = v1265[8];
            v967 = &v875[v966];
            v968 = &v876[v966];
            *(void *)v967 = *(void *)v968;
            *((void *)v967 + 1) = *((void *)v968 + 1);
            v969 = (void (*)(void, void, void, void))v1249[7];
            swift_bridgeObjectRetain();
            v969(v875, 0, 1, v1265);
            uint64_t v161 = v1265;
            uint64_t v155 = v1300;
            uint64_t v160 = (unsigned int (*)(void, void, void))v1234;
          }
          ((void (*)(char *, void, uint64_t, int *))__dste[7])(v458, 0, 1, v1291);
        }
        uint64_t v970 = v155[15];
        v971 = (void *)(v7 + v970);
        v972 = &v8[v970];
        void *v971 = *(void *)v972;
        v971[1] = *((void *)v972 + 1);
        uint64_t v973 = v155[16];
        v974 = (char *)(v7 + v973);
        v975 = &v8[v973];
        swift_bridgeObjectRetain();
        v1346 = v8;
        if (v160(v975, 1, v161))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v974, v975, *(void *)(*(void *)(v976 - 8) + 64));
        }
        else
        {
          char *v974 = *v975;
          uint64_t v977 = *((void *)v975 + 1);
          *((_DWORD *)v974 + 4) = *((_DWORD *)v975 + 4);
          *((void *)v974 + 1) = v977;
          if (*((void *)v975 + 7) == 1)
          {
            long long v978 = *(_OWORD *)(v975 + 24);
            long long v979 = *(_OWORD *)(v975 + 40);
            *((void *)v974 + 7) = *((void *)v975 + 7);
            *(_OWORD *)(v974 + 24) = v978;
            *(_OWORD *)(v974 + 40) = v979;
          }
          else
          {
            v974[24] = v975[24];
            v974[25] = v975[25];
            v974[26] = v975[26];
            long long v980 = *(_OWORD *)(v975 + 28);
            *((_DWORD *)v974 + 11) = *((_DWORD *)v975 + 11);
            *(_OWORD *)(v974 + 28) = v980;
            *((void *)v974 + 6) = *((void *)v975 + 6);
            *((void *)v974 + 7) = *((void *)v975 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v981 = v161[7];
          v982 = &v974[v981];
          v983 = &v975[v981];
          uint64_t v984 = sub_23309B300();
          uint64_t v985 = *(void *)(v984 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v985 + 48))(v983, 1, v984))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v982, v983, *(void *)(*(void *)(v986 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v985 + 16))(v982, v983, v984);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v985 + 56))(v982, 0, 1, v984);
          }
          uint64_t v987 = v1265[8];
          v988 = &v974[v987];
          v989 = &v975[v987];
          *(void *)v988 = *(void *)v989;
          *((void *)v988 + 1) = *((void *)v989 + 1);
          v990 = (void (*)(void, void, void, void))v1249[7];
          swift_bridgeObjectRetain();
          v990(v974, 0, 1, v1265);
          uint64_t v161 = v1265;
          uint64_t v155 = v1300;
          uint64_t v160 = (unsigned int (*)(void, void, void))v1234;
        }
        uint64_t v991 = v155[17];
        v992 = (char *)(v7 + v991);
        v993 = &v8[v991];
        v994 = v1291;
        if (((unsigned int (*)(char *, uint64_t, int *))v1221)(&v8[v991], 1, v1291))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v992, v993, *(void *)(*(void *)(v995 - 8) + 64));
        }
        else
        {
          if (v160(v993, 1, v161))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v992, v993, *(void *)(*(void *)(v996 - 8) + 64));
          }
          else
          {
            char *v992 = *v993;
            uint64_t v997 = *((void *)v993 + 1);
            *((_DWORD *)v992 + 4) = *((_DWORD *)v993 + 4);
            *((void *)v992 + 1) = v997;
            if (*((void *)v993 + 7) == 1)
            {
              long long v998 = *(_OWORD *)(v993 + 24);
              long long v999 = *(_OWORD *)(v993 + 40);
              *((void *)v992 + 7) = *((void *)v993 + 7);
              *(_OWORD *)(v992 + 24) = v998;
              *(_OWORD *)(v992 + 40) = v999;
            }
            else
            {
              v992[24] = v993[24];
              v992[25] = v993[25];
              v992[26] = v993[26];
              long long v1000 = *(_OWORD *)(v993 + 28);
              *((_DWORD *)v992 + 11) = *((_DWORD *)v993 + 11);
              *(_OWORD *)(v992 + 28) = v1000;
              *((void *)v992 + 6) = *((void *)v993 + 6);
              *((void *)v992 + 7) = *((void *)v993 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v1001 = v161[7];
            v1002 = &v992[v1001];
            v1003 = &v993[v1001];
            uint64_t v1004 = sub_23309B300();
            uint64_t v1005 = *(void *)(v1004 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1005 + 48))(v1003, 1, v1004))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1002, v1003, *(void *)(*(void *)(v1006 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v1005 + 16))(v1002, v1003, v1004);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v1005 + 56))(v1002, 0, 1, v1004);
            }
            uint64_t v1057 = v1265[8];
            v1058 = &v992[v1057];
            v1059 = &v993[v1057];
            *(void *)v1058 = *(void *)v1059;
            *((void *)v1058 + 1) = *((void *)v1059 + 1);
            v1060 = (void (*)(void, void, void, void))v1249[7];
            swift_bridgeObjectRetain();
            v1060(v992, 0, 1, v1265);
            uint64_t v161 = v1265;
            v994 = v1291;
            uint64_t v155 = v1300;
            uint64_t v160 = (unsigned int (*)(void, void, void))v1234;
          }
          uint64_t v1061 = v994[5];
          v1062 = &v992[v1061];
          v1063 = &v993[v1061];
          if (v160(v1063, 1, v161))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v1062, v1063, *(void *)(*(void *)(v1064 - 8) + 64));
          }
          else
          {
            char *v1062 = *v1063;
            uint64_t v1065 = *((void *)v1063 + 1);
            *((_DWORD *)v1062 + 4) = *((_DWORD *)v1063 + 4);
            *((void *)v1062 + 1) = v1065;
            if (*((void *)v1063 + 7) == 1)
            {
              long long v1066 = *(_OWORD *)(v1063 + 24);
              long long v1067 = *(_OWORD *)(v1063 + 40);
              *((void *)v1062 + 7) = *((void *)v1063 + 7);
              *(_OWORD *)(v1062 + 24) = v1066;
              *(_OWORD *)(v1062 + 40) = v1067;
            }
            else
            {
              v1062[24] = v1063[24];
              v1062[25] = v1063[25];
              v1062[26] = v1063[26];
              long long v1068 = *(_OWORD *)(v1063 + 28);
              *((_DWORD *)v1062 + 11) = *((_DWORD *)v1063 + 11);
              *(_OWORD *)(v1062 + 28) = v1068;
              *((void *)v1062 + 6) = *((void *)v1063 + 6);
              *((void *)v1062 + 7) = *((void *)v1063 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v1069 = v161[7];
            v1070 = &v1062[v1069];
            v1071 = &v1063[v1069];
            uint64_t v1072 = sub_23309B300();
            uint64_t v1073 = *(void *)(v1072 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1073 + 48))(v1071, 1, v1072))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1070, v1071, *(void *)(*(void *)(v1074 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v1073 + 16))(v1070, v1071, v1072);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v1073 + 56))(v1070, 0, 1, v1072);
            }
            uint64_t v1075 = v1265[8];
            v1076 = &v1062[v1075];
            v1077 = &v1063[v1075];
            *(void *)v1076 = *(void *)v1077;
            *((void *)v1076 + 1) = *((void *)v1077 + 1);
            v1078 = (void (*)(void, void, void, void))v1249[7];
            swift_bridgeObjectRetain();
            v1078(v1062, 0, 1, v1265);
            uint64_t v161 = v1265;
            uint64_t v155 = v1300;
            uint64_t v160 = (unsigned int (*)(void, void, void))v1234;
          }
          ((void (*)(char *, void, uint64_t, int *))__dste[7])(v992, 0, 1, v1291);
        }
        uint64_t v1079 = v155[18];
        v1080 = (void *)(v7 + v1079);
        v1081 = &v8[v1079];
        void *v1080 = *(void *)v1081;
        v1080[1] = *((void *)v1081 + 1);
        uint64_t v1082 = v155[19];
        v1083 = (char *)(v7 + v1082);
        v1084 = &v8[v1082];
        swift_bridgeObjectRetain();
        uint64_t v4 = v1321;
        if (v160(v1084, 1, v161))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v1083, v1084, *(void *)(*(void *)(v1085 - 8) + 64));
        }
        else
        {
          char *v1083 = *v1084;
          uint64_t v1086 = *((void *)v1084 + 1);
          *((_DWORD *)v1083 + 4) = *((_DWORD *)v1084 + 4);
          *((void *)v1083 + 1) = v1086;
          if (*((void *)v1084 + 7) == 1)
          {
            long long v1087 = *(_OWORD *)(v1084 + 24);
            long long v1088 = *(_OWORD *)(v1084 + 40);
            *((void *)v1083 + 7) = *((void *)v1084 + 7);
            *(_OWORD *)(v1083 + 24) = v1087;
            *(_OWORD *)(v1083 + 40) = v1088;
          }
          else
          {
            v1083[24] = v1084[24];
            v1083[25] = v1084[25];
            v1083[26] = v1084[26];
            long long v1089 = *(_OWORD *)(v1084 + 28);
            *((_DWORD *)v1083 + 11) = *((_DWORD *)v1084 + 11);
            *(_OWORD *)(v1083 + 28) = v1089;
            *((void *)v1083 + 6) = *((void *)v1084 + 6);
            *((void *)v1083 + 7) = *((void *)v1084 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v1090 = v161[7];
          v1091 = &v1083[v1090];
          v1092 = &v1084[v1090];
          uint64_t v1093 = sub_23309B300();
          uint64_t v1094 = *(void *)(v1093 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1094 + 48))(v1092, 1, v1093))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v1091, v1092, *(void *)(*(void *)(v1095 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v1094 + 16))(v1091, v1092, v1093);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v1094 + 56))(v1091, 0, 1, v1093);
          }
          uint64_t v1096 = v1265[8];
          v1097 = &v1083[v1096];
          v1098 = &v1084[v1096];
          *(void *)v1097 = *(void *)v1098;
          *((void *)v1097 + 1) = *((void *)v1098 + 1);
          v1099 = (void (*)(void, void, void, void))v1249[7];
          swift_bridgeObjectRetain();
          v1099(v1083, 0, 1, v1265);
          uint64_t v4 = v1321;
        }
        uint64_t v1100 = v155[20];
        v1101 = (void *)(v7 + v1100);
        v1102 = &v8[v1100];
        uint64_t v1103 = type metadata accessor for Reference();
        v1104 = *(void **)(v1103 - 8);
        v1105 = (unsigned int (*)(void, void, void))v1104[6];
        uint64_t v5 = v1307;
        if (v1105(v1102, 1, v1103))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v1101, v1102, *(void *)(*(void *)(v1106 - 8) + 64));
        }
        else
        {
          v1278 = v1105;
          v1294 = v1104;
          void *v1101 = *(void *)v1102;
          v1101[1] = *((void *)v1102 + 1);
          v1101[2] = *((void *)v1102 + 2);
          v1101[3] = *((void *)v1102 + 3);
          uint64_t v1107 = *(int *)(v1103 + 24);
          v1108 = (void *)((char *)v1101 + v1107);
          v1109 = &v1102[v1107];
          uint64_t v1110 = type metadata accessor for Identifier();
          uint64_t v1111 = *(void *)(v1110 - 8);
          v1112 = *(unsigned int (**)(void, void, void))(v1111 + 48);
          v1113 = (int *)v1110;
          swift_bridgeObjectRetain();
          v1114 = v1109;
          swift_bridgeObjectRetain();
          if (v1112(v1109, 1, v1113))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v1108, v1109, *(void *)(*(void *)(v1115 - 8) + 64));
            uint64_t v5 = v1307;
            uint64_t v4 = v1321;
          }
          else
          {
            void *v1108 = *(void *)v1109;
            v1108[1] = *((void *)v1109 + 1);
            uint64_t v1116 = *((void *)v1109 + 3);
            swift_bridgeObjectRetain();
            if (v1116 == 1)
            {
              long long v1117 = *((_OWORD *)v1109 + 1);
              v1108[4] = *((void *)v1109 + 4);
              *((_OWORD *)v1108 + 1) = v1117;
            }
            else
            {
              v1108[2] = *((void *)v1109 + 2);
              v1108[3] = *((void *)v1109 + 3);
              v1108[4] = *((void *)v1109 + 4);
              swift_bridgeObjectRetain();
              v1114 = v1109;
              swift_bridgeObjectRetain();
            }
            v1258 = v1113;
            uint64_t v1118 = v1113[6];
            v1215 = v1108;
            v1119 = (char *)v1108 + v1118;
            v1120 = (char *)v1114 + v1118;
            uint64_t v1121 = sub_23309AF80();
            uint64_t v1122 = *(void *)(v1121 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1122 + 48))(v1120, 1, v1121))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v1119, v1120, *(void *)(*(void *)(v1123 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v1122 + 16))(v1119, v1120, v1121);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v1122 + 56))(v1119, 0, 1, v1121);
            }
            uint64_t v5 = v1307;
            uint64_t v4 = v1321;
            uint64_t v1124 = v1258[7];
            v1125 = (void *)((char *)v1215 + v1124);
            v1126 = &v1109[v1124];
            void *v1125 = *(void *)v1126;
            v1125[1] = *((void *)v1126 + 1);
            v1241 = *(void **)(v1111 + 56);
            swift_bridgeObjectRetain();
            ((void (*)(void *, void, uint64_t, int *))v1241)(v1215, 0, 1, v1258);
          }
          v1104 = v1294;
          ((void (*)(void *, void, uint64_t, uint64_t))v1294[7])(v1101, 0, 1, v1103);
          v1105 = (unsigned int (*)(void, void, void))v1278;
        }
        uint64_t v1127 = v1300[21];
        v1128 = (void *)(v7 + v1127);
        v1129 = &v8[v1127];
        if (v1105(&v8[v1127], 1, v1103))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v1128, v1129, *(void *)(*(void *)(v1130 - 8) + 64));
          v1131 = v1300;
        }
        else
        {
          v1279 = (void *)v1103;
          v1295 = v1104;
          void *v1128 = *(void *)v1129;
          v1128[1] = *((void *)v1129 + 1);
          v1128[2] = *((void *)v1129 + 2);
          v1128[3] = *((void *)v1129 + 3);
          uint64_t v1132 = *(int *)(v1103 + 24);
          v1133 = (void *)((char *)v1128 + v1132);
          v1134 = &v1129[v1132];
          uint64_t v1135 = type metadata accessor for Identifier();
          v1136 = *(void **)(v1135 - 8);
          v1137 = (unsigned int (*)(void, void, void))v1136[6];
          swift_bridgeObjectRetain();
          v1138 = v1134;
          swift_bridgeObjectRetain();
          if (v1137(v1134, 1, v1135))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v1133, v1134, *(void *)(*(void *)(v1139 - 8) + 64));
            uint64_t v5 = v1307;
            uint64_t v4 = v1321;
            uint64_t v8 = v1346;
            v1131 = v1300;
            v1140 = v1279;
          }
          else
          {
            v1259 = v1136;
            void *v1133 = *(void *)v1134;
            v1133[1] = *((void *)v1134 + 1);
            uint64_t v1141 = *((void *)v1134 + 3);
            swift_bridgeObjectRetain();
            v1142 = v1134;
            if (v1141 == 1)
            {
              long long v1143 = *((_OWORD *)v1134 + 1);
              v1133[4] = *((void *)v1134 + 4);
              *((_OWORD *)v1133 + 1) = v1143;
            }
            else
            {
              v1133[2] = *((void *)v1134 + 2);
              v1133[3] = *((void *)v1134 + 3);
              v1133[4] = *((void *)v1134 + 4);
              swift_bridgeObjectRetain();
              v1138 = v1134;
              swift_bridgeObjectRetain();
            }
            uint64_t v4 = v1321;
            v1140 = v1279;
            v1280 = (int *)v1135;
            uint64_t v1144 = *(int *)(v1135 + 24);
            v1242 = (char *)v1133;
            v1145 = (char *)v1133 + v1144;
            v1146 = (char *)v1138 + v1144;
            uint64_t v1147 = sub_23309AF80();
            uint64_t v1148 = *(void *)(v1147 - 8);
            v1149 = v1146;
            int v1150 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1148 + 48))(v1146, 1, v1147);
            uint64_t v8 = v1346;
            if (v1150)
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v1145, v1149, *(void *)(*(void *)(v1151 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v1148 + 16))(v1145, v1149, v1147);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v1148 + 56))(v1145, 0, 1, v1147);
            }
            v1131 = v1300;
            uint64_t v5 = v1307;
            uint64_t v1152 = v1280[7];
            v1153 = &v1242[v1152];
            v1154 = (void *)((char *)v1142 + v1152);
            *(void *)v1153 = *v1154;
            *((void *)v1153 + 1) = v1154[1];
            v1301 = (void (*)(void, void, void, void))v1259[7];
            swift_bridgeObjectRetain();
            v1301(v1242, 0, 1, v1280);
          }
          (*((void (**)(void *, void, uint64_t, void *))v1295 + 7))(v1128, 0, 1, v1140);
        }
        *(void *)(v7 + v1131[22]) = *(void *)&v8[v1131[22]];
        uint64_t v1155 = v1131[23];
        v1156 = (void *)(v7 + v1155);
        v1157 = &v8[v1155];
        void *v1156 = *(void *)v1157;
        v1156[1] = *((void *)v1157 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        a3 = v1330;
        break;
      case 3u:
        v1317 = v4;
        uint64_t v1326 = a3;
        v1308 = v5;
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        *(void *)(v7 + 32) = *((void *)v8 + 4);
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *(void *)(v7 + 64) = *((void *)v8 + 8);
        *(void *)(v7 + 72) = *((void *)v8 + 9);
        *(void *)(v7 + 80) = *((void *)v8 + 10);
        *(void *)(v7 + 88) = *((void *)v8 + 11);
        *(void *)(v7 + 96) = *((void *)v8 + 12);
        uint64_t v1296 = type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v65 = *(int *)(v1296 + 44);
        v1219 = (char *)(v7 + v65);
        uint64_t v66 = &v8[v65];
        uint64_t v67 = type metadata accessor for FHIRDateTime();
        v1286 = *(void **)(v67 - 8);
        uint64_t v68 = (unsigned int (*)(void, void, void))v1286[6];
        uint64_t v69 = (int *)v67;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v68(v66, 1, v69))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v1219, v66, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          char *v1219 = *v66;
          uint64_t v163 = *((void *)v66 + 1);
          *((_DWORD *)v1219 + 4) = *((_DWORD *)v66 + 4);
          *((void *)v1219 + 1) = v163;
          uint64_t v164 = v8;
          if (*((void *)v66 + 7) == 1)
          {
            long long v165 = *(_OWORD *)(v66 + 24);
            long long v166 = *(_OWORD *)(v66 + 40);
            *((void *)v1219 + 7) = *((void *)v66 + 7);
            *(_OWORD *)(v1219 + 24) = v165;
            *(_OWORD *)(v1219 + 40) = v166;
          }
          else
          {
            v1219[24] = v66[24];
            v1219[25] = v66[25];
            v1219[26] = v66[26];
            long long v310 = *(_OWORD *)(v66 + 28);
            *((_DWORD *)v1219 + 11) = *((_DWORD *)v66 + 11);
            *(_OWORD *)(v1219 + 28) = v310;
            *((void *)v1219 + 6) = *((void *)v66 + 6);
            *((void *)v1219 + 7) = *((void *)v66 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v311 = v69;
          uint64_t v312 = v69[7];
          uint64_t v313 = &v1219[v312];
          uint64_t v314 = v66;
          uint64_t v315 = &v66[v312];
          uint64_t v316 = sub_23309B300();
          uint64_t v317 = *(void *)(v316 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v313, v315, *(void *)(*(void *)(v318 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v317 + 16))(v313, v315, v316);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v317 + 56))(v313, 0, 1, v316);
          }
          uint64_t v8 = v164;
          uint64_t v375 = v311[8];
          uint64_t v376 = &v1219[v375];
          uint64_t v377 = &v314[v375];
          *(void *)uint64_t v376 = *(void *)v377;
          *((void *)v376 + 1) = *((void *)v377 + 1);
          uint64_t v378 = (void (*)(void, void, void, void))v1286[7];
          swift_bridgeObjectRetain();
          v378(v1219, 0, 1, v311);
          uint64_t v69 = v311;
          uint64_t v4 = v1317;
        }
        uint64_t v379 = (int *)v1296;
        uint64_t v380 = *(int *)(v1296 + 48);
        uint64_t v381 = (char *)(v7 + v380);
        v1342 = v8;
        long long v382 = &v8[v380];
        uint64_t v383 = type metadata accessor for Period();
        uint64_t v384 = *(void *)(v383 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v384 + 48))(v382, 1, v383))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v381, v382, *(void *)(*(void *)(v385 - 8) + 64));
          uint64_t v386 = v68;
        }
        else
        {
          uint64_t v387 = v384;
          v1253 = (int *)v383;
          uint64_t v386 = v68;
          if (v68(v382, 1, v69))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v381, v382, *(void *)(*(void *)(v388 - 8) + 64));
            uint64_t v389 = (int *)v383;
            uint64_t v390 = v387;
          }
          else
          {
            *uint64_t v381 = *v382;
            uint64_t v535 = *((void *)v382 + 1);
            *((_DWORD *)v381 + 4) = *((_DWORD *)v382 + 4);
            *((void *)v381 + 1) = v535;
            uint64_t v390 = v387;
            if (*((void *)v382 + 7) == 1)
            {
              long long v536 = *(_OWORD *)(v382 + 24);
              long long v537 = *(_OWORD *)(v382 + 40);
              *((void *)v381 + 7) = *((void *)v382 + 7);
              *(_OWORD *)(v381 + 24) = v536;
              *(_OWORD *)(v381 + 40) = v537;
            }
            else
            {
              v381[24] = v382[24];
              v381[25] = v382[25];
              v381[26] = v382[26];
              long long v807 = *(_OWORD *)(v382 + 28);
              *((_DWORD *)v381 + 11) = *((_DWORD *)v382 + 11);
              *(_OWORD *)(v381 + 28) = v807;
              *((void *)v381 + 6) = *((void *)v382 + 6);
              *((void *)v381 + 7) = *((void *)v382 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v808 = v69[7];
            v1225 = &v381[v808];
            v1238 = v69;
            v809 = &v382[v808];
            uint64_t v810 = sub_23309B300();
            uint64_t v811 = *(void *)(v810 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v811 + 48))(v809, 1, v810))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1225, v809, *(void *)(*(void *)(v812 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v811 + 16))(v1225, v809, v810);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v811 + 56))(v1225, 0, 1, v810);
            }
            uint64_t v853 = v1238[8];
            v854 = &v381[v853];
            v855 = &v382[v853];
            *(void *)v854 = *(void *)v855;
            *((void *)v854 + 1) = *((void *)v855 + 1);
            v856 = (void (*)(void, void, void, void))v1286[7];
            swift_bridgeObjectRetain();
            v856(v381, 0, 1, v1238);
            uint64_t v69 = v1238;
            uint64_t v379 = (int *)v1296;
            uint64_t v389 = v1253;
          }
          uint64_t v857 = v389[5];
          v858 = &v381[v857];
          v859 = &v382[v857];
          if (v68(v859, 1, v69))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v858, v859, *(void *)(*(void *)(v860 - 8) + 64));
          }
          else
          {
            char *v858 = *v859;
            uint64_t v861 = *((void *)v859 + 1);
            *((_DWORD *)v858 + 4) = *((_DWORD *)v859 + 4);
            *((void *)v858 + 1) = v861;
            if (*((void *)v859 + 7) == 1)
            {
              long long v862 = *(_OWORD *)(v859 + 24);
              long long v863 = *(_OWORD *)(v859 + 40);
              *((void *)v858 + 7) = *((void *)v859 + 7);
              *(_OWORD *)(v858 + 24) = v862;
              *(_OWORD *)(v858 + 40) = v863;
            }
            else
            {
              v858[24] = v859[24];
              v858[25] = v859[25];
              v858[26] = v859[26];
              long long v864 = *(_OWORD *)(v859 + 28);
              *((_DWORD *)v858 + 11) = *((_DWORD *)v859 + 11);
              *(_OWORD *)(v858 + 28) = v864;
              *((void *)v858 + 6) = *((void *)v859 + 6);
              *((void *)v858 + 7) = *((void *)v859 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v865 = v69[7];
            v1228 = &v858[v865];
            v1240 = v69;
            v866 = &v859[v865];
            uint64_t v867 = sub_23309B300();
            uint64_t v868 = *(void *)(v867 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v868 + 48))(v866, 1, v867))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1228, v866, *(void *)(*(void *)(v869 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v868 + 16))(v1228, v866, v867);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v868 + 56))(v1228, 0, 1, v867);
            }
            uint64_t v69 = v1240;
            uint64_t v939 = v1240[8];
            v940 = &v858[v939];
            v941 = &v859[v939];
            *(void *)v940 = *(void *)v941;
            *((void *)v940 + 1) = *((void *)v941 + 1);
            v942 = (void (*)(void, void, void, void))v1286[7];
            swift_bridgeObjectRetain();
            v942(v858, 0, 1, v1240);
            uint64_t v379 = (int *)v1296;
          }
          (*(void (**)(char *, void, uint64_t, int *))(v390 + 56))(v381, 0, 1, v1253);
          uint64_t v4 = v1317;
        }
        uint64_t v943 = v379[13];
        v944 = (char *)(v7 + v943);
        v945 = &v1342[v943];
        if (v386(&v1342[v943], 1, v69))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v944, v945, *(void *)(*(void *)(v946 - 8) + 64));
        }
        else
        {
          char *v944 = *v945;
          uint64_t v947 = *((void *)v945 + 1);
          *((_DWORD *)v944 + 4) = *((_DWORD *)v945 + 4);
          *((void *)v944 + 1) = v947;
          v948 = v379;
          if (*((void *)v945 + 7) == 1)
          {
            long long v949 = *(_OWORD *)(v945 + 24);
            long long v950 = *(_OWORD *)(v945 + 40);
            *((void *)v944 + 7) = *((void *)v945 + 7);
            *(_OWORD *)(v944 + 24) = v949;
            *(_OWORD *)(v944 + 40) = v950;
          }
          else
          {
            v944[24] = v945[24];
            v944[25] = v945[25];
            v944[26] = v945[26];
            long long v951 = *(_OWORD *)(v945 + 28);
            *((_DWORD *)v944 + 11) = *((_DWORD *)v945 + 11);
            *(_OWORD *)(v944 + 28) = v951;
            *((void *)v944 + 6) = *((void *)v945 + 6);
            *((void *)v944 + 7) = *((void *)v945 + 7);
            swift_bridgeObjectRetain();
          }
          v952 = v69;
          uint64_t v953 = v69[7];
          v954 = &v944[v953];
          v955 = &v945[v953];
          uint64_t v956 = sub_23309B300();
          uint64_t v957 = *(void *)(v956 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v957 + 48))(v955, 1, v956))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v954, v955, *(void *)(*(void *)(v958 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v957 + 16))(v954, v955, v956);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v957 + 56))(v954, 0, 1, v956);
          }
          uint64_t v959 = v952[8];
          v960 = &v944[v959];
          v961 = &v945[v959];
          *(void *)v960 = *(void *)v961;
          *((void *)v960 + 1) = *((void *)v961 + 1);
          v962 = (void (*)(void, void, void, void))v1286[7];
          swift_bridgeObjectRetain();
          v962(v944, 0, 1, v952);
          uint64_t v4 = v1317;
          uint64_t v379 = v948;
        }
        *(void *)(v7 + v379[14]) = *(void *)&v1342[v379[14]];
        *(void *)(v7 + v379[15]) = *(void *)&v1342[v379[15]];
        uint64_t v963 = v379[16];
        v964 = (void *)(v7 + v963);
        v965 = &v1342[v963];
        void *v964 = *(void *)v965;
        v964[1] = *((void *)v965 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        uint64_t v5 = v1308;
        a3 = v1326;
        break;
      case 4u:
        v1318 = v4;
        uint64_t v1327 = a3;
        v1309 = v5;
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v71 = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v71 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 32) = v71;
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *(void *)(v7 + 64) = *((void *)v8 + 8);
        *(void *)(v7 + 72) = *((void *)v8 + 9);
        *(void *)(v7 + 80) = *((void *)v8 + 10);
        *(void *)(v7 + 88) = *((void *)v8 + 11);
        *(void *)(v7 + 96) = *((void *)v8 + 12);
        uint64_t v72 = type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v73 = *(int *)(v72 + 44);
        v1262 = (char *)(v7 + v73);
        v1287 = &v8[v73];
        v1297 = (int *)v72;
        uint64_t v74 = type metadata accessor for FHIRDateTime();
        v1246 = *(void **)(v74 - 8);
        uint64_t v75 = (unsigned int (*)(void, void, void))v1246[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v76 = v74;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1220 = v75;
        v1233 = (int *)v74;
        if (v75(v1287, 1, v74))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v1262, v1287, *(void *)(*(void *)(v77 - 8) + 64));
          uint64_t v78 = v1297;
        }
        else
        {
          char *v1262 = *v1287;
          uint64_t v167 = *((void *)v1287 + 1);
          *((_DWORD *)v1262 + 4) = *((_DWORD *)v1287 + 4);
          *((void *)v1262 + 1) = v167;
          uint64_t v168 = v8;
          if (*((void *)v1287 + 7) == 1)
          {
            long long v169 = *(_OWORD *)(v1287 + 24);
            long long v170 = *(_OWORD *)(v1287 + 40);
            *((void *)v1262 + 7) = *((void *)v1287 + 7);
            *(_OWORD *)(v1262 + 24) = v169;
            *(_OWORD *)(v1262 + 40) = v170;
          }
          else
          {
            v1262[24] = v1287[24];
            v1262[25] = v1287[25];
            v1262[26] = v1287[26];
            long long v319 = *(_OWORD *)(v1287 + 28);
            *((_DWORD *)v1262 + 11) = *((_DWORD *)v1287 + 11);
            *(_OWORD *)(v1262 + 28) = v319;
            *((void *)v1262 + 6) = *((void *)v1287 + 6);
            *((void *)v1262 + 7) = *((void *)v1287 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v78 = v1297;
          uint64_t v320 = *(int *)(v76 + 28);
          uint64_t v321 = &v1262[v320];
          long long v322 = &v1287[v320];
          uint64_t v323 = sub_23309B300();
          uint64_t v324 = *(void *)(v323 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v324 + 48))(v322, 1, v323))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v321, v322, *(void *)(*(void *)(v325 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v324 + 16))(v321, v322, v323);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v324 + 56))(v321, 0, 1, v323);
          }
          uint64_t v391 = *(int *)(v76 + 32);
          uint64_t v392 = &v1262[v391];
          uint64_t v393 = &v1287[v391];
          *(void *)uint64_t v392 = *(void *)v393;
          *((void *)v392 + 1) = *((void *)v393 + 1);
          uint64_t v394 = (void (*)(void, void, void, void))v1246[7];
          swift_bridgeObjectRetain();
          v394(v1262, 0, 1, v76);
          uint64_t v8 = v168;
        }
        uint64_t v395 = v78[12];
        long long v396 = (void *)(v7 + v395);
        uint64_t v397 = &v8[v395];
        *long long v396 = *(void *)v397;
        v396[1] = *((void *)v397 + 1);
        *(void *)(v7 + v78[13]) = *(void *)&v8[v78[13]];
        *(void *)(v7 + v78[14]) = *(void *)&v8[v78[14]];
        uint64_t v398 = v78[15];
        long long v399 = (void *)(v7 + v398);
        v1343 = v8;
        uint64_t v400 = &v8[v398];
        uint64_t v401 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v402 = *(void **)(v401 - 8);
        uint64_t v403 = (unsigned int (*)(void, void, void))v402[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v403(v400, 1, v401))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v399, v400, *(void *)(*(void *)(v404 - 8) + 64));
          uint64_t v405 = v1297;
          uint64_t v5 = v1309;
          a3 = v1327;
        }
        else
        {
          v1272 = (void (**)(void *, void, uint64_t, uint64_t))v402;
          v1290 = v399;
          *long long v399 = *(void *)v400;
          uint64_t v406 = *(int *)(v401 + 20);
          uint64_t v407 = (char *)v399 + v406;
          uint64_t v408 = &v400[v406];
          uint64_t v409 = type metadata accessor for Period();
          uint64_t v410 = *(void *)(v409 - 8);
          uint64_t v411 = *(unsigned int (**)(void, void, void))(v410 + 48);
          swift_bridgeObjectRetain();
          if (v411(v408, 1, v409))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v407, v408, *(void *)(*(void *)(v412 - 8) + 64));
            uint64_t v405 = v1297;
            uint64_t v5 = v1309;
            a3 = v1327;
            uint64_t v8 = v1343;
            uint64_t v414 = v1272;
            uint64_t v413 = v1290;
          }
          else
          {
            uint64_t v1193 = v410;
            uint64_t v8 = v1343;
            uint64_t v405 = v1297;
            __dstf = (int *)v409;
            if (((unsigned int (*)(char *, uint64_t, int *))v1220)(v408, 1, v1233))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v407, v408, *(void *)(*(void *)(v538 - 8) + 64));
              uint64_t v5 = v1309;
              uint64_t v539 = v1233;
            }
            else
            {
              *uint64_t v407 = *v408;
              uint64_t v831 = *((void *)v408 + 1);
              *((_DWORD *)v407 + 4) = *((_DWORD *)v408 + 4);
              *((void *)v407 + 1) = v831;
              if (*((void *)v408 + 7) == 1)
              {
                long long v832 = *(_OWORD *)(v408 + 24);
                long long v833 = *(_OWORD *)(v408 + 40);
                *((void *)v407 + 7) = *((void *)v408 + 7);
                *(_OWORD *)(v407 + 24) = v832;
                *(_OWORD *)(v407 + 40) = v833;
              }
              else
              {
                v407[24] = v408[24];
                v407[25] = v408[25];
                v407[26] = v408[26];
                long long v1158 = *(_OWORD *)(v408 + 28);
                *((_DWORD *)v407 + 11) = *((_DWORD *)v408 + 11);
                *(_OWORD *)(v407 + 28) = v1158;
                *((void *)v407 + 6) = *((void *)v408 + 6);
                *((void *)v407 + 7) = *((void *)v408 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v1159 = v1233[7];
              v1160 = &v407[v1159];
              v1161 = &v408[v1159];
              uint64_t v1162 = sub_23309B300();
              uint64_t v1163 = *(void *)(v1162 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1163 + 48))(v1161, 1, v1162))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v1160, v1161, *(void *)(*(void *)(v1164 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v1163 + 16))(v1160, v1161, v1162);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v1163 + 56))(v1160, 0, 1, v1162);
              }
              uint64_t v5 = v1309;
              uint64_t v539 = v1233;
              uint64_t v1165 = v1233[8];
              v1166 = &v407[v1165];
              v1167 = &v408[v1165];
              *(void *)v1166 = *(void *)v1167;
              *((void *)v1166 + 1) = *((void *)v1167 + 1);
              v1168 = (void (*)(void, void, void, void))v1246[7];
              swift_bridgeObjectRetain();
              v1168(v407, 0, 1, v1233);
              uint64_t v8 = v1343;
              uint64_t v405 = v1297;
            }
            uint64_t v1169 = __dstf[5];
            v1170 = &v407[v1169];
            v1171 = &v408[v1169];
            v1198 = v407;
            if (((unsigned int (*)(char *, uint64_t, int *))v1220)(v1171, 1, v539))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v1170, v1171, *(void *)(*(void *)(v1172 - 8) + 64));
            }
            else
            {
              char *v1170 = *v1171;
              uint64_t v1173 = *((void *)v1171 + 1);
              *((_DWORD *)v1170 + 4) = *((_DWORD *)v1171 + 4);
              *((void *)v1170 + 1) = v1173;
              if (*((void *)v1171 + 7) == 1)
              {
                long long v1174 = *(_OWORD *)(v1171 + 24);
                long long v1175 = *(_OWORD *)(v1171 + 40);
                *((void *)v1170 + 7) = *((void *)v1171 + 7);
                *(_OWORD *)(v1170 + 24) = v1174;
                *(_OWORD *)(v1170 + 40) = v1175;
              }
              else
              {
                v1170[24] = v1171[24];
                v1170[25] = v1171[25];
                v1170[26] = v1171[26];
                long long v1176 = *(_OWORD *)(v1171 + 28);
                *((_DWORD *)v1170 + 11) = *((_DWORD *)v1171 + 11);
                *(_OWORD *)(v1170 + 28) = v1176;
                *((void *)v1170 + 6) = *((void *)v1171 + 6);
                *((void *)v1170 + 7) = *((void *)v1171 + 7);
                swift_bridgeObjectRetain();
              }
              uint64_t v1177 = v539[7];
              v1178 = v1170;
              v1179 = &v1170[v1177];
              v1180 = &v1171[v1177];
              uint64_t v1181 = sub_23309B300();
              uint64_t v1182 = *(void *)(v1181 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1182 + 48))(v1180, 1, v1181))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v1179, v1180, *(void *)(*(void *)(v1183 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v1182 + 16))(v1179, v1180, v1181);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v1182 + 56))(v1179, 0, 1, v1181);
              }
              uint64_t v405 = v1297;
              uint64_t v5 = v1309;
              uint64_t v1184 = v539[8];
              v1185 = &v1178[v1184];
              v1186 = &v1171[v1184];
              *(void *)v1185 = *(void *)v1186;
              *((void *)v1185 + 1) = *((void *)v1186 + 1);
              v1187 = (void (*)(void, void, void, void))v1246[7];
              swift_bridgeObjectRetain();
              v1187(v1178, 0, 1, v539);
            }
            uint64_t v414 = v1272;
            uint64_t v413 = v1290;
            (*(void (**)(char *, void, uint64_t, int *))(v1193 + 56))(v1198, 0, 1, __dstf);
            a3 = v1327;
          }
          v414[7](v413, 0, 1, v401);
        }
        uint64_t v1188 = v405[16];
        v1189 = (void *)(v7 + v1188);
        v1190 = &v8[v1188];
        void *v1189 = *(void *)v1190;
        v1189[1] = *((void *)v1190 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        uint64_t v4 = v1318;
        break;
      case 5u:
        v1319 = v4;
        uint64_t v1328 = a3;
        v1310 = v5;
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v79 = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v79 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 32) = v79;
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        uint64_t v80 = *((void *)v8 + 7);
        *(void *)(v7 + 61) = *(void *)(v8 + 61);
        *(void *)(v7 + 56) = v80;
        *(void *)(v7 + 72) = *((void *)v8 + 9);
        v1298 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v81 = v1298[10];
        uint64_t v82 = (char *)(v7 + v81);
        uint64_t v83 = &v8[v81];
        uint64_t v84 = type metadata accessor for FHIRDateTime();
        uint64_t v85 = *(void **)(v84 - 8);
        uint64_t v86 = (unsigned int (*)(void, void, void))v85[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1341 = v8;
        if (v86(v83, 1, v84))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v82, v83, *(void *)(*(void *)(v87 - 8) + 64));
        }
        else
        {
          *uint64_t v82 = *v83;
          uint64_t v171 = *((void *)v83 + 1);
          *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
          *((void *)v82 + 1) = v171;
          v1289 = v85;
          if (*((void *)v83 + 7) == 1)
          {
            long long v172 = *(_OWORD *)(v83 + 24);
            long long v173 = *(_OWORD *)(v83 + 40);
            *((void *)v82 + 7) = *((void *)v83 + 7);
            *(_OWORD *)(v82 + 24) = v172;
            *(_OWORD *)(v82 + 40) = v173;
          }
          else
          {
            v82[24] = v83[24];
            v82[25] = v83[25];
            v82[26] = v83[26];
            long long v326 = *(_OWORD *)(v83 + 28);
            *((_DWORD *)v82 + 11) = *((_DWORD *)v83 + 11);
            *(_OWORD *)(v82 + 28) = v326;
            *((void *)v82 + 6) = *((void *)v83 + 6);
            *((void *)v82 + 7) = *((void *)v83 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v327 = *(int *)(v84 + 28);
          v1270 = &v82[v327];
          long long v328 = &v83[v327];
          uint64_t v329 = sub_23309B300();
          uint64_t v330 = *(void *)(v329 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v330 + 48))(v328, 1, v329))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v1270, v328, *(void *)(*(void *)(v331 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v330 + 16))(v1270, v328, v329);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v330 + 56))(v1270, 0, 1, v329);
          }
          uint64_t v415 = *(int *)(v84 + 32);
          uint64_t v416 = &v82[v415];
          uint64_t v417 = &v83[v415];
          *(void *)uint64_t v416 = *(void *)v417;
          *((void *)v416 + 1) = *((void *)v417 + 1);
          uint64_t v85 = v1289;
          uint64_t v418 = (void (*)(void, void, void, void))v1289[7];
          swift_bridgeObjectRetain();
          v418(v82, 0, 1, v84);
          uint64_t v8 = v1341;
        }
        *(void *)(v7 + v1298[11]) = *(void *)&v8[v1298[11]];
        uint64_t v419 = v1298[12];
        uint64_t v420 = (char *)(v7 + v419);
        uint64_t v421 = &v8[v419];
        swift_bridgeObjectRetain();
        if (v86(v421, 1, v84))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v420, v421, *(void *)(*(void *)(v422 - 8) + 64));
        }
        else
        {
          *uint64_t v420 = *v421;
          uint64_t v423 = *((void *)v421 + 1);
          *((_DWORD *)v420 + 4) = *((_DWORD *)v421 + 4);
          *((void *)v420 + 1) = v423;
          if (*((void *)v421 + 7) == 1)
          {
            long long v424 = *(_OWORD *)(v421 + 24);
            long long v425 = *(_OWORD *)(v421 + 40);
            *((void *)v420 + 7) = *((void *)v421 + 7);
            *(_OWORD *)(v420 + 24) = v424;
            *(_OWORD *)(v420 + 40) = v425;
          }
          else
          {
            v420[24] = v421[24];
            v420[25] = v421[25];
            v420[26] = v421[26];
            long long v426 = *(_OWORD *)(v421 + 28);
            *((_DWORD *)v420 + 11) = *((_DWORD *)v421 + 11);
            *(_OWORD *)(v420 + 28) = v426;
            *((void *)v420 + 6) = *((void *)v421 + 6);
            *((void *)v420 + 7) = *((void *)v421 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v427 = *(int *)(v84 + 28);
          uint64_t v428 = &v420[v427];
          long long v429 = &v421[v427];
          uint64_t v430 = sub_23309B300();
          uint64_t v431 = *(void *)(v430 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v431 + 48))(v429, 1, v430))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v428, v429, *(void *)(*(void *)(v432 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v431 + 16))(v428, v429, v430);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v431 + 56))(v428, 0, 1, v430);
          }
          uint64_t v540 = *(int *)(v84 + 32);
          uint64_t v541 = &v420[v540];
          uint64_t v542 = &v421[v540];
          *(void *)uint64_t v541 = *(void *)v542;
          *((void *)v541 + 1) = *((void *)v542 + 1);
          uint64_t v543 = (void (*)(void, void, void, void))v85[7];
          swift_bridgeObjectRetain();
          v543(v420, 0, 1, v84);
        }
        uint64_t v544 = v1298[13];
        uint64_t v545 = (void *)(v7 + v544);
        uint64_t v546 = &v8[v544];
        void *v545 = *(void *)v546;
        v545[1] = *((void *)v546 + 1);
        v545[2] = *((void *)v546 + 2);
        uint64_t v547 = v1298[14];
        uint64_t v548 = (void *)(v7 + v547);
        uint64_t v549 = &v8[v547];
        uint64_t v550 = type metadata accessor for Reference();
        uint64_t v551 = *(void *)(v550 - 8);
        uint64_t v552 = *(unsigned int (**)(void, void, void))(v551 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v552(v549, 1, v550))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v548, v549, *(void *)(*(void *)(v553 - 8) + 64));
          uint64_t v4 = v1319;
        }
        else
        {
          *uint64_t v548 = *(void *)v549;
          v548[1] = *((void *)v549 + 1);
          v548[2] = *((void *)v549 + 2);
          v548[3] = *((void *)v549 + 3);
          uint64_t v554 = *(int *)(v550 + 24);
          v1292 = (void *)((char *)v548 + v554);
          uint64_t v555 = &v549[v554];
          uint64_t v556 = type metadata accessor for Identifier();
          uint64_t v557 = *(void *)(v556 - 8);
          uint64_t v558 = *(unsigned int (**)(void, void, void))(v557 + 48);
          uint64_t v559 = (int *)v556;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v558(v555, 1, v559))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v1292, v555, *(void *)(*(void *)(v560 - 8) + 64));
            uint64_t v4 = v1319;
            uint64_t v8 = v1341;
          }
          else
          {
            void *v1292 = *(void *)v555;
            v1292[1] = *((void *)v555 + 1);
            uint64_t v694 = *((void *)v555 + 3);
            swift_bridgeObjectRetain();
            BOOL v695 = v694 == 1;
            v696 = v1292;
            if (v695)
            {
              long long v697 = *((_OWORD *)v555 + 1);
              v1292[4] = *((void *)v555 + 4);
              *((_OWORD *)v1292 + 1) = v697;
            }
            else
            {
              v1292[2] = *((void *)v555 + 2);
              v1292[3] = *((void *)v555 + 3);
              v1292[4] = *((void *)v555 + 4);
              swift_bridgeObjectRetain();
              v696 = v1292;
              swift_bridgeObjectRetain();
            }
            uint64_t v4 = v1319;
            uint64_t v8 = v1341;
            v1276 = v559;
            uint64_t v820 = v559[6];
            v1226 = (char *)v696 + v820;
            v1239 = v555;
            v821 = &v555[v820];
            uint64_t v822 = sub_23309AF80();
            uint64_t v823 = *(void *)(v822 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v823 + 48))(v821, 1, v822))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v1226, v821, *(void *)(*(void *)(v824 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v823 + 16))(v1226, v821, v822);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v823 + 56))(v1226, 0, 1, v822);
            }
            uint64_t v888 = v1276[7];
            v889 = (void *)((char *)v1292 + v888);
            v890 = &v1239[v888];
            void *v889 = *(void *)v890;
            v889[1] = *((void *)v890 + 1);
            v891 = *(void (**)(void, void, void, void))(v557 + 56);
            swift_bridgeObjectRetain();
            v891(v1292, 0, 1, v1276);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v551 + 56))(v548, 0, 1, v550);
        }
        *(unsigned char *)(v7 + v1298[15]) = v8[v1298[15]];
        uint64_t v892 = v1298[16];
        v893 = (void *)(v7 + v892);
        v894 = &v8[v892];
        void *v893 = *(void *)v894;
        v893[1] = *((void *)v894 + 1);
        *(void *)(v7 + v1298[17]) = *(void *)&v8[v1298[17]];
        *(unsigned char *)(v7 + v1298[18]) = v8[v1298[18]];
        uint64_t v895 = v1298[19];
        uint64_t v896 = v7 + v895;
        v897 = &v8[v895];
        uint64_t v898 = *(void *)&v8[v895];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a3 = v1328;
        if (v898 == 1)
        {
          long long v899 = *(_OWORD *)v897;
          long long v900 = *((_OWORD *)v897 + 1);
          long long v901 = *((_OWORD *)v897 + 2);
          *(void *)(v896 + 48) = *((void *)v897 + 6);
          *(_OWORD *)(v896 + 16) = v900;
          *(_OWORD *)(v896 + 32) = v901;
          *(_OWORD *)uint64_t v896 = v899;
          uint64_t v5 = v1310;
        }
        else
        {
          *(void *)uint64_t v896 = v898;
          uint64_t v902 = *((void *)v897 + 2);
          swift_bridgeObjectRetain();
          uint64_t v5 = v1310;
          if (v902 == 1)
          {
            long long v903 = *(_OWORD *)(v897 + 8);
            *(void *)(v896 + 24) = *((void *)v897 + 3);
            *(_OWORD *)(v896 + 8) = v903;
          }
          else
          {
            *(void *)(v896 + 8) = *((void *)v897 + 1);
            *(void *)(v896 + 16) = *((void *)v897 + 2);
            *(void *)(v896 + 24) = *((void *)v897 + 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          *(void *)(v896 + 32) = *((void *)v897 + 4);
          *(void *)(v896 + 40) = *((void *)v897 + 5);
          *(void *)(v896 + 48) = *((void *)v897 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v8 = v1341;
        }
        uint64_t v904 = v1298[20];
        v905 = (void *)(v7 + v904);
        v906 = &v8[v904];
        void *v905 = *(void *)v906;
        v905[1] = *((void *)v906 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v1320 = v4;
        uint64_t v1329 = a3;
        v1311 = v5;
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v88 = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v88 != 1) {
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 32) = v88;
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *(void *)(v7 + 64) = *((void *)v8 + 8);
        *(void *)(v7 + 72) = *((void *)v8 + 9);
        *(void *)(v7 + 80) = *((void *)v8 + 10);
        v1299 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v89 = v1299[10];
        v1247 = (char *)(v7 + v89);
        uint64_t v90 = &v8[v89];
        uint64_t v91 = type metadata accessor for FHIRDateTime();
        v1263 = *(void **)(v91 - 8);
        uint64_t v92 = (unsigned int (*)(void, void, void))v1263[6];
        uint64_t v93 = v90;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1288 = (int *)v91;
        if (v92(v90, 1, v91))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v1247, v90, *(void *)(*(void *)(v94 - 8) + 64));
          uint64_t v95 = v92;
        }
        else
        {
          char *v1247 = *v90;
          uint64_t v174 = *((void *)v90 + 1);
          *((_DWORD *)v1247 + 4) = *((_DWORD *)v90 + 4);
          *((void *)v1247 + 1) = v174;
          uint64_t v175 = v8;
          if (*((void *)v90 + 7) == 1)
          {
            long long v176 = *(_OWORD *)(v90 + 24);
            long long v177 = *(_OWORD *)(v90 + 40);
            *((void *)v1247 + 7) = *((void *)v90 + 7);
            *(_OWORD *)(v1247 + 24) = v176;
            *(_OWORD *)(v1247 + 40) = v177;
          }
          else
          {
            v1247[24] = v90[24];
            v1247[25] = v90[25];
            v1247[26] = v90[26];
            long long v332 = *(_OWORD *)(v90 + 28);
            *((_DWORD *)v1247 + 11) = *((_DWORD *)v90 + 11);
            *(_OWORD *)(v1247 + 28) = v332;
            *((void *)v1247 + 6) = *((void *)v90 + 6);
            *((void *)v1247 + 7) = *((void *)v90 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v95 = v92;
          uint64_t v333 = *(int *)(v91 + 28);
          uint64_t v334 = &v1247[v333];
          uint64_t v335 = &v93[v333];
          uint64_t v336 = sub_23309B300();
          uint64_t v337 = *(void *)(v336 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v335, 1, v336))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v334, v335, *(void *)(*(void *)(v338 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v337 + 16))(v334, v335, v336);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v334, 0, 1, v336);
          }
          uint64_t v91 = (uint64_t)v1288;
          uint64_t v433 = v1288[8];
          uint64_t v434 = &v1247[v433];
          uint64_t v435 = &v93[v433];
          *(void *)uint64_t v434 = *(void *)v435;
          *((void *)v434 + 1) = *((void *)v435 + 1);
          uint64_t v436 = (void (*)(void, void, void, void))v1263[7];
          swift_bridgeObjectRetain();
          v436(v1247, 0, 1, v1288);
          uint64_t v8 = v175;
        }
        uint64_t v437 = v1299;
        uint64_t v438 = v1299[11];
        uint64_t v439 = (char *)(v7 + v438);
        uint64_t v440 = &v8[v438];
        if (v95(&v8[v438], 1, v91))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v439, v440, *(void *)(*(void *)(v441 - 8) + 64));
        }
        else
        {
          char *v439 = *v440;
          uint64_t v442 = *((void *)v440 + 1);
          *((_DWORD *)v439 + 4) = *((_DWORD *)v440 + 4);
          *((void *)v439 + 1) = v442;
          uint64_t v443 = v8;
          if (*((void *)v440 + 7) == 1)
          {
            long long v444 = *(_OWORD *)(v440 + 24);
            long long v445 = *(_OWORD *)(v440 + 40);
            *((void *)v439 + 7) = *((void *)v440 + 7);
            *(_OWORD *)(v439 + 24) = v444;
            *(_OWORD *)(v439 + 40) = v445;
          }
          else
          {
            v439[24] = v440[24];
            v439[25] = v440[25];
            v439[26] = v440[26];
            long long v446 = *(_OWORD *)(v440 + 28);
            *((_DWORD *)v439 + 11) = *((_DWORD *)v440 + 11);
            *(_OWORD *)(v439 + 28) = v446;
            *((void *)v439 + 6) = *((void *)v440 + 6);
            *((void *)v439 + 7) = *((void *)v440 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v447 = *(int *)(v91 + 28);
          long long v448 = &v439[v447];
          uint64_t v449 = &v440[v447];
          uint64_t v450 = sub_23309B300();
          uint64_t v451 = *(void *)(v450 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v451 + 48))(v449, 1, v450))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v448, v449, *(void *)(*(void *)(v452 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v451 + 16))(v448, v449, v450);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v451 + 56))(v448, 0, 1, v450);
          }
          uint64_t v91 = (uint64_t)v1288;
          uint64_t v561 = v1288[8];
          uint64_t v562 = &v439[v561];
          uint64_t v563 = &v440[v561];
          *(void *)uint64_t v562 = *(void *)v563;
          *((void *)v562 + 1) = *((void *)v563 + 1);
          uint64_t v564 = (void (*)(void, void, void, void))v1263[7];
          swift_bridgeObjectRetain();
          v564(v439, 0, 1, v1288);
          uint64_t v8 = v443;
          uint64_t v437 = v1299;
        }
        uint64_t v565 = v437[12];
        uint64_t v566 = (char *)(v7 + v565);
        v1344 = v8;
        uint64_t v567 = &v8[v565];
        uint64_t v568 = type metadata accessor for Period();
        uint64_t v569 = *(void *)(v568 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v569 + 48))(v567, 1, v568))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v566, v567, *(void *)(*(void *)(v570 - 8) + 64));
        }
        else
        {
          if (v95(v567, 1, v91))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v566, v567, *(void *)(*(void *)(v571 - 8) + 64));
          }
          else
          {
            *uint64_t v566 = *v567;
            uint64_t v698 = *((void *)v567 + 1);
            *((_DWORD *)v566 + 4) = *((_DWORD *)v567 + 4);
            *((void *)v566 + 1) = v698;
            if (*((void *)v567 + 7) == 1)
            {
              long long v699 = *(_OWORD *)(v567 + 24);
              long long v700 = *(_OWORD *)(v567 + 40);
              *((void *)v566 + 7) = *((void *)v567 + 7);
              *(_OWORD *)(v566 + 24) = v699;
              *(_OWORD *)(v566 + 40) = v700;
            }
            else
            {
              v566[24] = v567[24];
              v566[25] = v567[25];
              v566[26] = v567[26];
              long long v825 = *(_OWORD *)(v567 + 28);
              *((_DWORD *)v566 + 11) = *((_DWORD *)v567 + 11);
              *(_OWORD *)(v566 + 28) = v825;
              *((void *)v566 + 6) = *((void *)v567 + 6);
              *((void *)v566 + 7) = *((void *)v567 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v826 = *(int *)(v91 + 28);
            v1227 = &v566[v826];
            v827 = &v567[v826];
            uint64_t v828 = sub_23309B300();
            uint64_t v829 = *(void *)(v828 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v829 + 48))(v827, 1, v828))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1227, v827, *(void *)(*(void *)(v830 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v829 + 16))(v1227, v827, v828);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v829 + 56))(v1227, 0, 1, v828);
            }
            uint64_t v437 = v1299;
            uint64_t v907 = v1288[8];
            v908 = &v566[v907];
            v909 = &v567[v907];
            *(void *)v908 = *(void *)v909;
            *((void *)v908 + 1) = *((void *)v909 + 1);
            v910 = (void (*)(void, void, void, void))v1263[7];
            swift_bridgeObjectRetain();
            v910(v566, 0, 1, v1288);
            uint64_t v91 = (uint64_t)v1288;
          }
          uint64_t v911 = *(int *)(v568 + 20);
          v912 = &v566[v911];
          v913 = &v567[v911];
          if (v95(v913, 1, v91))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v912, v913, *(void *)(*(void *)(v914 - 8) + 64));
          }
          else
          {
            char *v912 = *v913;
            uint64_t v915 = *((void *)v913 + 1);
            *((_DWORD *)v912 + 4) = *((_DWORD *)v913 + 4);
            *((void *)v912 + 1) = v915;
            v1256 = (void *)v568;
            if (*((void *)v913 + 7) == 1)
            {
              long long v916 = *(_OWORD *)(v913 + 24);
              long long v917 = *(_OWORD *)(v913 + 40);
              *((void *)v912 + 7) = *((void *)v913 + 7);
              *(_OWORD *)(v912 + 24) = v916;
              *(_OWORD *)(v912 + 40) = v917;
            }
            else
            {
              v912[24] = v913[24];
              v912[25] = v913[25];
              v912[26] = v913[26];
              long long v918 = *(_OWORD *)(v913 + 28);
              *((_DWORD *)v912 + 11) = *((_DWORD *)v913 + 11);
              *(_OWORD *)(v912 + 28) = v918;
              *((void *)v912 + 6) = *((void *)v913 + 6);
              *((void *)v912 + 7) = *((void *)v913 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v919 = *(int *)(v91 + 28);
            v1229 = &v912[v919];
            v920 = &v913[v919];
            uint64_t v921 = sub_23309B300();
            uint64_t v922 = *(void *)(v921 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v922 + 48))(v920, 1, v921))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v1229, v920, *(void *)(*(void *)(v923 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v922 + 16))(v1229, v920, v921);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v922 + 56))(v1229, 0, 1, v921);
            }
            uint64_t v437 = v1299;
            uint64_t v1007 = v1288[8];
            v1008 = &v912[v1007];
            v1009 = &v913[v1007];
            *(void *)v1008 = *(void *)v1009;
            *((void *)v1008 + 1) = *((void *)v1009 + 1);
            v1010 = (void (*)(void, void, void, void))v1263[7];
            swift_bridgeObjectRetain();
            v1010(v912, 0, 1, v1288);
            uint64_t v91 = (uint64_t)v1288;
            uint64_t v568 = (uint64_t)v1256;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v569 + 56))(v566, 0, 1, v568);
        }
        uint64_t v1011 = v437[13];
        v1012 = (char *)(v7 + v1011);
        v1013 = v1344;
        v1014 = &v1344[v1011];
        if (v95(&v1344[v1011], 1, v91))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v1012, v1014, *(void *)(*(void *)(v1015 - 8) + 64));
        }
        else
        {
          char *v1012 = *v1014;
          uint64_t v1016 = *((void *)v1014 + 1);
          *((_DWORD *)v1012 + 4) = *((_DWORD *)v1014 + 4);
          *((void *)v1012 + 1) = v1016;
          if (*((void *)v1014 + 7) == 1)
          {
            long long v1017 = *(_OWORD *)(v1014 + 24);
            long long v1018 = *(_OWORD *)(v1014 + 40);
            *((void *)v1012 + 7) = *((void *)v1014 + 7);
            *(_OWORD *)(v1012 + 24) = v1017;
            *(_OWORD *)(v1012 + 40) = v1018;
          }
          else
          {
            v1012[24] = v1014[24];
            v1012[25] = v1014[25];
            v1012[26] = v1014[26];
            long long v1019 = *(_OWORD *)(v1014 + 28);
            *((_DWORD *)v1012 + 11) = *((_DWORD *)v1014 + 11);
            *(_OWORD *)(v1012 + 28) = v1019;
            *((void *)v1012 + 6) = *((void *)v1014 + 6);
            *((void *)v1012 + 7) = *((void *)v1014 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v1020 = *(int *)(v91 + 28);
          v1021 = &v1012[v1020];
          v1022 = &v1014[v1020];
          uint64_t v1023 = sub_23309B300();
          uint64_t v1024 = *(void *)(v1023 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1024 + 48))(v1022, 1, v1023))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v1021, v1022, *(void *)(*(void *)(v1025 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v1024 + 16))(v1021, v1022, v1023);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v1024 + 56))(v1021, 0, 1, v1023);
          }
          uint64_t v1026 = v1288[8];
          v1027 = &v1012[v1026];
          v1028 = &v1014[v1026];
          *(void *)v1027 = *(void *)v1028;
          *((void *)v1027 + 1) = *((void *)v1028 + 1);
          v1029 = (void (*)(void, void, void, void))v1263[7];
          swift_bridgeObjectRetain();
          v1029(v1012, 0, 1, v1288);
        }
        *(void *)(v7 + v437[14]) = *(void *)&v1344[v437[14]];
        *(void *)(v7 + v437[15]) = *(void *)&v1344[v437[15]];
        uint64_t v1030 = v437[16];
        v1031 = (void *)(v7 + v1030);
        v1032 = &v1344[v1030];
        void *v1031 = *(void *)v1032;
        v1031[1] = *((void *)v1032 + 1);
        uint64_t v1033 = v437[17];
        uint64_t v1034 = v7 + v1033;
        v1035 = &v1344[v1033];
        uint64_t v1036 = *(void *)&v1344[v1033 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v1036 == 1)
        {
          long long v1037 = *(_OWORD *)v1035;
          *(void *)(v1034 + 16) = *((void *)v1035 + 2);
          *(_OWORD *)uint64_t v1034 = v1037;
        }
        else
        {
          *(void *)uint64_t v1034 = *(void *)v1035;
          *(void *)(v1034 + 8) = *((void *)v1035 + 1);
          *(void *)(v1034 + 16) = *((void *)v1035 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v5 = v1311;
        uint64_t v1038 = v437[18];
        v1039 = (void *)(v7 + v1038);
        v1040 = &v1344[v1038];
        uint64_t v1041 = type metadata accessor for Quantity();
        v1042 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v1041 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v1042)[6](v1040, 1, v1041))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v1039, v1040, *(void *)(*(void *)(v1043 - 8) + 64));
        }
        else
        {
          long long v1044 = *(_OWORD *)v1040;
          *(void *)((char *)v1039 + 13) = *(void *)(v1040 + 13);
          *(_OWORD *)v1039 = v1044;
          v1039[3] = *((void *)v1040 + 3);
          v1039[4] = *((void *)v1040 + 4);
          v1039[5] = *((void *)v1040 + 5);
          v1039[6] = *((void *)v1040 + 6);
          uint64_t v1045 = *(int *)(v1041 + 28);
          v1257 = v1042;
          v1277 = (char *)v1039 + v1045;
          v1293 = &v1040[v1045];
          uint64_t v1046 = sub_23309AF80();
          uint64_t v1047 = *(void *)(v1046 - 8);
          v1048 = *(unsigned int (**)(void, void, void))(v1047 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v1048(v1293, 1, v1046))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v1277, v1293, *(void *)(*(void *)(v1049 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v1047 + 16))(v1277, v1293, v1046);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v1047 + 56))(v1277, 0, 1, v1046);
          }
          uint64_t v5 = v1311;
          uint64_t v1050 = *(int *)(v1041 + 32);
          v1051 = (void *)((char *)v1039 + v1050);
          v1052 = &v1040[v1050];
          void *v1051 = *(void *)v1052;
          v1051[1] = *((void *)v1052 + 1);
          v1053 = (void (*)(void, void, void, void))v1257[7];
          swift_bridgeObjectRetain();
          v1053(v1039, 0, 1, v1041);
          v1013 = v1344;
        }
        *(void *)(v7 + v1299[19]) = *(void *)&v1013[v1299[19]];
        uint64_t v1054 = v1299[20];
        v1055 = (void *)(v7 + v1054);
        v1056 = &v1013[v1054];
        void *v1055 = *(void *)v1056;
        v1055[1] = *((void *)v1056 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        uint64_t v4 = v1320;
        a3 = v1329;
        break;
      case 7u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v96 = *((void *)v8 + 4);
        *(void *)(v7 + 37) = *(void *)(v8 + 37);
        *(void *)(v7 + 32) = v96;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *(void *)(v7 + 64) = *((void *)v8 + 8);
        *(void *)(v7 + 72) = *((void *)v8 + 9);
        *(void *)(v7 + 80) = *((void *)v8 + 10);
        *(void *)(v7 + 88) = *((void *)v8 + 11);
        uint64_t v97 = *((void *)v8 + 13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v97 == 1)
        {
          long long v98 = *((_OWORD *)v8 + 6);
          *(void *)(v7 + 112) = *((void *)v8 + 14);
          *(_OWORD *)(v7 + 96) = v98;
        }
        else
        {
          *(void *)(v7 + 96) = *((void *)v8 + 12);
          *(void *)(v7 + 104) = *((void *)v8 + 13);
          *(void *)(v7 + 112) = *((void *)v8 + 14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        *(void *)(v7 + 120) = *((void *)v8 + 15);
        *(void *)(v7 + 128) = *((void *)v8 + 16);
        *(void *)(v7 + 136) = *((void *)v8 + 17);
        *(void *)(v7 + 144) = *((void *)v8 + 18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        *(void *)(v7 + 32) = *((void *)v8 + 4);
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        *(void *)(v7 + 32) = *((void *)v8 + 4);
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_472:
  uint64_t v931 = *(int *)(a3 + 24);
  v932 = (void *)((char *)v5 + v931);
  v933 = (void *)((char *)v4 + v931);
  uint64_t v934 = *v933;
  unint64_t v935 = v933[1];
  sub_232E9A9F4(*v933, v935);
  uint64_t v936 = *v932;
  unint64_t v937 = v932[1];
  uint64_t *v932 = v934;
  v932[1] = v935;
  sub_232E9AA4C(v936, v937);
  return v5;
}

_OWORD *initializeWithTake for ModelsR4.Bundle.BundleEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v406 = v3;
    uint64_t v407 = v4;
    uint64_t v409 = v9;
    uint64_t v408 = v10;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        long long v12 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v12;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((void *)v7 + 7) = *((void *)v8 + 7);
        v7[4] = v8[4];
        uint64_t v13 = *((void *)v8 + 11);
        *((void *)v7 + 10) = *((void *)v8 + 10);
        *((void *)v7 + 11) = v13;
        long long v14 = v8[6];
        *((void *)v7 + 14) = *((void *)v8 + 14);
        v7[6] = v14;
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        uint64_t v15 = *((void *)v8 + 18);
        *((void *)v7 + 17) = *((void *)v8 + 17);
        *((void *)v7 + 18) = v15;
        long long v16 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v17 = v16[13];
        uint64_t v18 = (char *)v7 + v17;
        uint64_t v19 = (char *)v8 + v17;
        uint64_t v20 = type metadata accessor for FHIRDateTime();
        __dst = *(void **)(v20 - 8);
        uint64_t v21 = (unsigned int (*)(void, void, void))__dst[6];
        uint64_t v389 = v16;
        uint64_t v363 = v21;
        if (v21(v19, 1, v20))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          *uint64_t v18 = *v19;
          *((void *)v18 + 1) = *((void *)v19 + 1);
          *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
          *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
          *((void *)v18 + 7) = *((void *)v19 + 7);
          uint64_t v55 = *(int *)(v20 + 28);
          uint64_t v56 = &v18[v55];
          uint64_t v57 = &v19[v55];
          uint64_t v58 = sub_23309B300();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 32))(v56, v57, v58);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
          }
          long long v16 = v389;
          *(_OWORD *)&v18[*(int *)(v20 + 32)] = *(_OWORD *)&v19[*(int *)(v20 + 32)];
          uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v18, 0, 1, v20);
        }
        uint64_t v82 = v16[14];
        uint64_t v83 = (char *)v7 + v82;
        uint64_t v84 = (char *)v8 + v82;
        uint64_t v85 = type metadata accessor for Period();
        uint64_t v349 = *(void *)(v85 - 8);
        uint64_t v384 = (int *)v85;
        uint64_t v358 = *(unsigned int (**)(char *, uint64_t, int *))(v349 + 48);
        if (((unsigned int (*)(unsigned char *, uint64_t))v358)(v84, 1))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v83, v84, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          if (v21(v84, 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
          }
          else
          {
            *uint64_t v83 = *v84;
            *((void *)v83 + 1) = *((void *)v84 + 1);
            *((_DWORD *)v83 + 4) = *((_DWORD *)v84 + 4);
            *(_OWORD *)(v83 + 24) = *(_OWORD *)(v84 + 24);
            *(_OWORD *)(v83 + 40) = *(_OWORD *)(v84 + 40);
            *((void *)v83 + 7) = *((void *)v84 + 7);
            uint64_t v128 = *(int *)(v20 + 28);
            long long v346 = &v83[v128];
            uint64_t v129 = &v84[v128];
            uint64_t v130 = sub_23309B300();
            uint64_t v131 = *(void *)(v130 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v346, v129, *(void *)(*(void *)(v132 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v131 + 32))(v346, v129, v130);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v131 + 56))(v346, 0, 1, v130);
            }
            *(_OWORD *)&v83[*(int *)(v20 + 32)] = *(_OWORD *)&v84[*(int *)(v20 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v83, 0, 1, v20);
            long long v16 = v389;
            uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          }
          uint64_t v180 = v384[5];
          long long v181 = &v83[v180];
          uint64_t v182 = &v84[v180];
          if (v21(v182, 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
          }
          else
          {
            *long long v181 = *v182;
            *((void *)v181 + 1) = *((void *)v182 + 1);
            *((_DWORD *)v181 + 4) = *((_DWORD *)v182 + 4);
            *(_OWORD *)(v181 + 24) = *(_OWORD *)(v182 + 24);
            *(_OWORD *)(v181 + 40) = *(_OWORD *)(v182 + 40);
            *((void *)v181 + 7) = *((void *)v182 + 7);
            uint64_t v184 = *(int *)(v20 + 28);
            uint64_t v348 = &v181[v184];
            uint64_t v185 = &v182[v184];
            uint64_t v186 = sub_23309B300();
            uint64_t v187 = *(void *)(v186 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v348, v185, *(void *)(*(void *)(v188 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v187 + 32))(v348, v185, v186);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v187 + 56))(v348, 0, 1, v186);
            }
            long long v16 = v389;
            *(_OWORD *)&v181[*(int *)(v20 + 32)] = *(_OWORD *)&v182[*(int *)(v20 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v181, 0, 1, v20);
            uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v349 + 56))(v83, 0, 1, v384);
        }
        *(_OWORD *)((char *)v7 + v16[15]) = *(_OWORD *)((char *)v8 + v16[15]);
        uint64_t v220 = v16[16];
        uint64_t v221 = (char *)v7 + v220;
        uint64_t v222 = (char *)v8 + v220;
        if (v21((char *)v8 + v220, 1, v20))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v221, v222, *(void *)(*(void *)(v223 - 8) + 64));
        }
        else
        {
          *uint64_t v221 = *v222;
          *((void *)v221 + 1) = *((void *)v222 + 1);
          *((_DWORD *)v221 + 4) = *((_DWORD *)v222 + 4);
          *(_OWORD *)(v221 + 24) = *(_OWORD *)(v222 + 24);
          *(_OWORD *)(v221 + 40) = *(_OWORD *)(v222 + 40);
          *((void *)v221 + 7) = *((void *)v222 + 7);
          uint64_t v224 = *(int *)(v20 + 28);
          uint64_t v225 = &v221[v224];
          uint64_t v226 = &v222[v224];
          uint64_t v227 = sub_23309B300();
          uint64_t v228 = *(void *)(v227 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v228 + 48))(v226, 1, v227))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v225, v226, *(void *)(*(void *)(v229 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v228 + 32))(v225, v226, v227);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v228 + 56))(v225, 0, 1, v227);
          }
          long long v16 = v389;
          *(_OWORD *)&v221[*(int *)(v20 + 32)] = *(_OWORD *)&v222[*(int *)(v20 + 32)];
          uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v221, 0, 1, v20);
        }
        long long v230 = v384;
        uint64_t v231 = v16[17];
        uint64_t v232 = (char *)v7 + v231;
        uint64_t v233 = (char *)v8 + v231;
        if (v358((char *)v8 + v231, 1, v384))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v232, v233, *(void *)(*(void *)(v234 - 8) + 64));
        }
        else
        {
          if (v21(v233, 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v232, v233, *(void *)(*(void *)(v235 - 8) + 64));
          }
          else
          {
            *uint64_t v232 = *v233;
            *((void *)v232 + 1) = *((void *)v233 + 1);
            *((_DWORD *)v232 + 4) = *((_DWORD *)v233 + 4);
            *(_OWORD *)(v232 + 24) = *(_OWORD *)(v233 + 24);
            *(_OWORD *)(v232 + 40) = *(_OWORD *)(v233 + 40);
            *((void *)v232 + 7) = *((void *)v233 + 7);
            uint64_t v236 = *(int *)(v20 + 28);
            uint64_t v237 = &v232[v236];
            uint64_t v238 = &v233[v236];
            uint64_t v239 = sub_23309B300();
            uint64_t v240 = *(void *)(v239 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v237, v238, *(void *)(*(void *)(v241 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v240 + 32))(v237, v238, v239);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v240 + 56))(v237, 0, 1, v239);
            }
            *(_OWORD *)&v232[*(int *)(v20 + 32)] = *(_OWORD *)&v233[*(int *)(v20 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v232, 0, 1, v20);
            long long v230 = v384;
            long long v16 = v389;
            uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          }
          uint64_t v276 = v230[5];
          uint64_t v277 = &v232[v276];
          uint64_t v278 = &v233[v276];
          if (v21(v278, 1, v20))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
          }
          else
          {
            *uint64_t v277 = *v278;
            *((void *)v277 + 1) = *((void *)v278 + 1);
            *((_DWORD *)v277 + 4) = *((_DWORD *)v278 + 4);
            *(_OWORD *)(v277 + 24) = *(_OWORD *)(v278 + 24);
            *(_OWORD *)(v277 + 40) = *(_OWORD *)(v278 + 40);
            *((void *)v277 + 7) = *((void *)v278 + 7);
            uint64_t v280 = *(int *)(v20 + 28);
            uint64_t v356 = &v277[v280];
            uint64_t v281 = &v278[v280];
            uint64_t v282 = sub_23309B300();
            uint64_t v283 = *(void *)(v282 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v283 + 48))(v281, 1, v282))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v356, v281, *(void *)(*(void *)(v284 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v283 + 32))(v356, v281, v282);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v283 + 56))(v356, 0, 1, v282);
            }
            long long v16 = v389;
            *(_OWORD *)&v277[*(int *)(v20 + 32)] = *(_OWORD *)&v278[*(int *)(v20 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v277, 0, 1, v20);
            uint64_t v21 = (unsigned int (*)(void, void, void))v363;
          }
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v349 + 56))(v232, 0, 1, v384);
        }
        *(_OWORD *)((char *)v7 + v16[18]) = *(_OWORD *)((char *)v8 + v16[18]);
        uint64_t v285 = v16[19];
        uint64_t v286 = (char *)v7 + v285;
        uint64_t v287 = (char *)v8 + v285;
        if (v21((char *)v8 + v285, 1, v20))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v286, v287, *(void *)(*(void *)(v288 - 8) + 64));
        }
        else
        {
          *uint64_t v286 = *v287;
          *((void *)v286 + 1) = *((void *)v287 + 1);
          *((_DWORD *)v286 + 4) = *((_DWORD *)v287 + 4);
          *(_OWORD *)(v286 + 24) = *(_OWORD *)(v287 + 24);
          *(_OWORD *)(v286 + 40) = *(_OWORD *)(v287 + 40);
          *((void *)v286 + 7) = *((void *)v287 + 7);
          uint64_t v289 = *(int *)(v20 + 28);
          uint64_t v403 = &v286[v289];
          uint64_t v290 = &v287[v289];
          uint64_t v291 = sub_23309B300();
          uint64_t v292 = *(void *)(v291 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v292 + 48))(v290, 1, v291))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v403, v290, *(void *)(*(void *)(v293 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v292 + 32))(v403, v290, v291);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v292 + 56))(v403, 0, 1, v291);
          }
          *(_OWORD *)&v286[*(int *)(v20 + 32)] = *(_OWORD *)&v287[*(int *)(v20 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dst[7])(v286, 0, 1, v20);
        }
        uint64_t v294 = v16[20];
        uint64_t v295 = (_OWORD *)((char *)v7 + v294);
        uint64_t v296 = (_OWORD *)((char *)v8 + v294);
        uint64_t v297 = type metadata accessor for Reference();
        uint64_t v298 = *(void **)(v297 - 8);
        uint64_t v299 = (unsigned int (*)(void, void, void))v298[6];
        if (v299(v296, 1, v297))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v295, v296, *(void *)(*(void *)(v300 - 8) + 64));
        }
        else
        {
          uint64_t v386 = v299;
          uint64_t v404 = v298;
          long long v301 = v296[1];
          _OWORD *v295 = *v296;
          v295[1] = v301;
          uint64_t v302 = *(int *)(v297 + 24);
          long long v303 = (_OWORD *)((char *)v295 + v302);
          long long v304 = (_OWORD *)((char *)v296 + v302);
          uint64_t v305 = type metadata accessor for Identifier();
          long long v306 = *(void (***)(void))(v305 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v306[6])(v304, 1, v305))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v303, v304, *(void *)(*(void *)(v307 - 8) + 64));
            long long v16 = v389;
            uint64_t v298 = v404;
            uint64_t v299 = (unsigned int (*)(void, void, void))v386;
          }
          else
          {
            uint64_t v362 = v306;
            uint64_t v370 = (int *)v305;
            long long v308 = v304[1];
            *long long v303 = *v304;
            v303[1] = v308;
            *((void *)v303 + 4) = *((void *)v304 + 4);
            uint64_t v309 = *(int *)(v305 + 24);
            __dstg = (char *)v303;
            uint64_t v357 = (char *)v303 + v309;
            long long v310 = (char *)v304 + v309;
            uint64_t v311 = sub_23309AF80();
            uint64_t v312 = *(void *)(v311 - 8);
            uint64_t v313 = v311;
            if ((*(unsigned int (**)(char *, uint64_t))(v312 + 48))(v310, 1))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v357, v310, *(void *)(*(void *)(v314 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v312 + 32))(v357, v310, v313);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v312 + 56))(v357, 0, 1, v313);
            }
            uint64_t v299 = (unsigned int (*)(void, void, void))v386;
            *(_OWORD *)&__dstg[v370[7]] = *(_OWORD *)((char *)v304 + v370[7]);
            v362[7]();
            long long v16 = v389;
            uint64_t v298 = v404;
          }
          ((void (*)(_OWORD *, void, uint64_t, uint64_t))v298[7])(v295, 0, 1, v297);
        }
        uint64_t v315 = v16[21];
        uint64_t v316 = (_OWORD *)((char *)v7 + v315);
        uint64_t v317 = (_OWORD *)((char *)v8 + v315);
        if (v299((char *)v8 + v315, 1, v297))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v316, v317, *(void *)(*(void *)(v318 - 8) + 64));
          uint64_t v3 = v406;
          uint64_t v4 = v407;
        }
        else
        {
          uint64_t v405 = v298;
          long long v319 = v317[1];
          _OWORD *v316 = *v317;
          v316[1] = v319;
          uint64_t v320 = *(int *)(v297 + 24);
          uint64_t v321 = (_OWORD *)((char *)v316 + v320);
          long long v322 = (_OWORD *)((char *)v317 + v320);
          uint64_t v323 = type metadata accessor for Identifier();
          uint64_t v324 = *(void *)(v323 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v324 + 48))(v322, 1, v323))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v321, v322, *(void *)(*(void *)(v325 - 8) + 64));
          }
          else
          {
            long long v326 = v322[1];
            _OWORD *v321 = *v322;
            v321[1] = v326;
            *((void *)v321 + 4) = *((void *)v322 + 4);
            uint64_t v327 = *(int *)(v323 + 24);
            uint64_t v387 = (char *)v321 + v327;
            long long v328 = (char *)v322 + v327;
            uint64_t v329 = sub_23309AF80();
            uint64_t v371 = *(void (***)(void *, void *, void))(v329 - 8);
            __dsth = v328;
            uint64_t v330 = v328;
            uint64_t v331 = v329;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v371[6])(v330, 1, v329))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v387, __dsth, *(void *)(*(void *)(v332 - 8) + 64));
            }
            else
            {
              v371[4](v387, __dsth, v331);
              ((void (*)(char *, void, uint64_t, uint64_t))v371[7])(v387, 0, 1, v331);
            }
            *(_OWORD *)((char *)v321 + *(int *)(v323 + 28)) = *(_OWORD *)((char *)v322 + *(int *)(v323 + 28));
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v324 + 56))(v321, 0, 1, v323);
          }
          uint64_t v3 = v406;
          uint64_t v4 = v407;
          (*((void (**)(_OWORD *, void, uint64_t, uint64_t))v405 + 7))(v316, 0, 1, v297);
        }
        uint64_t v9 = v409;
        uint64_t v10 = v408;
        *(void *)((char *)v7 + v389[22]) = *(void *)((char *)v8 + v389[22]);
        *(_OWORD *)((char *)v7 + v389[23]) = *(_OWORD *)((char *)v8 + v389[23]);
        goto LABEL_187;
      case 3u:
        long long v23 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v23;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((void *)v7 + 7) = *((void *)v8 + 7);
        v7[4] = v8[4];
        *((void *)v7 + 10) = *((void *)v8 + 10);
        *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
        uint64_t v24 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v25 = v24[11];
        uint64_t v26 = (char *)v7 + v25;
        uint64_t v27 = (char *)v8 + v25;
        uint64_t v28 = type metadata accessor for FHIRDateTime();
        uint64_t v381 = *(void **)(v28 - 8);
        uint64_t v397 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v381[6];
        uint64_t v390 = v24;
        if (v397(v27, 1, v28))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          *uint64_t v26 = *v27;
          *((void *)v26 + 1) = *((void *)v27 + 1);
          *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
          *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
          *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
          *((void *)v26 + 7) = *((void *)v27 + 7);
          uint64_t v61 = *(int *)(v28 + 28);
          __dstb = &v26[v61];
          uint64_t v62 = &v27[v61];
          uint64_t v63 = sub_23309B300();
          uint64_t v64 = *(void *)(v63 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstb, v62, *(void *)(*(void *)(v65 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 + 32))(__dstb, v62, v63);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56))(__dstb, 0, 1, v63);
          }
          *(_OWORD *)&v26[*(int *)(v28 + 32)] = *(_OWORD *)&v27[*(int *)(v28 + 32)];
          uint64_t v24 = v390;
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v381[7])(v26, 0, 1, v28);
        }
        uint64_t v88 = v24[12];
        uint64_t v89 = (char *)v7 + v88;
        uint64_t v90 = (char *)v8 + v88;
        uint64_t v91 = type metadata accessor for Period();
        uint64_t v92 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v91 - 8);
        if (v92[6](v90, 1, v91))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
        }
        else
        {
          __dstd = v92;
          if (v397(v90, 1, v28))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
          }
          else
          {
            *uint64_t v89 = *v90;
            *((void *)v89 + 1) = *((void *)v90 + 1);
            *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
            *(_OWORD *)(v89 + 24) = *(_OWORD *)(v90 + 24);
            *(_OWORD *)(v89 + 40) = *(_OWORD *)(v90 + 40);
            *((void *)v89 + 7) = *((void *)v90 + 7);
            uint64_t v133 = *(int *)(v28 + 28);
            uint64_t v366 = &v89[v133];
            uint64_t v134 = &v90[v133];
            uint64_t v135 = sub_23309B300();
            uint64_t v352 = *(void (***)(void *, const void *, uint64_t))(v135 - 8);
            if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v352[6])(v134, 1, v135))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v366, v134, *(void *)(*(void *)(v136 - 8) + 64));
            }
            else
            {
              v352[4](v366, v134, v135);
              ((void (*)(unsigned char *, void, uint64_t, uint64_t))v352[7])(v366, 0, 1, v135);
            }
            *(_OWORD *)&v89[*(int *)(v28 + 32)] = *(_OWORD *)&v90[*(int *)(v28 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))v381[7])(v89, 0, 1, v28);
            uint64_t v24 = v390;
          }
          uint64_t v189 = *(int *)(v91 + 20);
          uint64_t v190 = &v89[v189];
          uint64_t v191 = &v90[v189];
          if (v397(v191, 1, v28))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v190, v191, *(void *)(*(void *)(v192 - 8) + 64));
          }
          else
          {
            *uint64_t v190 = *v191;
            *((void *)v190 + 1) = *((void *)v191 + 1);
            *((_DWORD *)v190 + 4) = *((_DWORD *)v191 + 4);
            *(_OWORD *)(v190 + 24) = *(_OWORD *)(v191 + 24);
            *(_OWORD *)(v190 + 40) = *(_OWORD *)(v191 + 40);
            *((void *)v190 + 7) = *((void *)v191 + 7);
            uint64_t v193 = *(int *)(v28 + 28);
            uint64_t v369 = &v190[v193];
            uint64_t v194 = &v191[v193];
            uint64_t v195 = sub_23309B300();
            uint64_t v355 = *(void (***)(void *, void *, void))(v195 - 8);
            uint64_t v361 = v194;
            uint64_t v196 = v194;
            uint64_t v197 = v195;
            if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v355[6])(v196, 1, v195))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v369, v361, *(void *)(*(void *)(v198 - 8) + 64));
            }
            else
            {
              v355[4](v369, v361, v197);
              ((void (*)(unsigned char *, void, uint64_t, uint64_t))v355[7])(v369, 0, 1, v197);
            }
            *(_OWORD *)&v190[*(int *)(v28 + 32)] = *(_OWORD *)&v191[*(int *)(v28 + 32)];
            uint64_t v24 = v390;
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))v381[7])(v190, 0, 1, v28);
          }
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))__dstd + 7))(v89, 0, 1, v91);
        }
        uint64_t v242 = v24[13];
        uint64_t v243 = (char *)v7 + v242;
        uint64_t v244 = (char *)v8 + v242;
        if (v397((unsigned char *)v8 + v242, 1, v28))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v243, v244, *(void *)(*(void *)(v245 - 8) + 64));
        }
        else
        {
          *uint64_t v243 = *v244;
          *((void *)v243 + 1) = *((void *)v244 + 1);
          *((_DWORD *)v243 + 4) = *((_DWORD *)v244 + 4);
          *(_OWORD *)(v243 + 24) = *(_OWORD *)(v244 + 24);
          *(_OWORD *)(v243 + 40) = *(_OWORD *)(v244 + 40);
          *((void *)v243 + 7) = *((void *)v244 + 7);
          uint64_t v246 = *(int *)(v28 + 28);
          long long v247 = &v243[v246];
          uint64_t v248 = &v244[v246];
          uint64_t v249 = sub_23309B300();
          uint64_t v250 = *(void *)(v249 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v247, v248, *(void *)(*(void *)(v251 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v250 + 32))(v247, v248, v249);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
          }
          *(_OWORD *)&v243[*(int *)(v28 + 32)] = *(_OWORD *)&v244[*(int *)(v28 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v381[7])(v243, 0, 1, v28);
        }
        uint64_t v3 = v406;
        uint64_t v4 = v407;
        uint64_t v9 = v409;
        uint64_t v10 = v408;
        *(void *)((char *)v7 + v390[14]) = *(void *)((char *)v8 + v390[14]);
        *(void *)((char *)v7 + v390[15]) = *(void *)((char *)v8 + v390[15]);
        *(_OWORD *)((char *)v7 + v390[16]) = *(_OWORD *)((char *)v8 + v390[16]);
        goto LABEL_187;
      case 4u:
        long long v30 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v30;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        uint64_t v31 = *((void *)v8 + 12);
        *((void *)v7 + 11) = *((void *)v8 + 11);
        *((void *)v7 + 12) = v31;
        uint64_t v32 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v33 = v32[11];
        uint64_t v34 = (char *)v7 + v33;
        uint64_t v35 = (char *)v8 + v33;
        uint64_t v36 = type metadata accessor for FHIRDateTime();
        uint64_t v37 = (void **)(*(void *)(v36 - 8) + 48);
        long long v382 = (unsigned int (*)(unsigned char *, uint64_t, int *))*v37;
        uint64_t v391 = *(void **)(v36 - 8);
        uint64_t v398 = (int *)v36;
        if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))*v37)(v35, 1, v36))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          *uint64_t v34 = *v35;
          *((void *)v34 + 1) = *((void *)v35 + 1);
          *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
          *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
          *((void *)v34 + 7) = *((void *)v35 + 7);
          uint64_t v66 = *(int *)(v36 + 28);
          __dstc = &v34[v66];
          uint64_t v67 = &v35[v66];
          uint64_t v68 = sub_23309B300();
          uint64_t v69 = *(void *)(v68 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dstc, v67, *(void *)(*(void *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v69 + 32))(__dstc, v67, v68);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v69 + 56))(__dstc, 0, 1, v68);
          }
          *(_OWORD *)&v34[v398[8]] = *(_OWORD *)&v35[v398[8]];
          (*((void (**)(unsigned char *, void, uint64_t))v391 + 7))(v34, 0, 1);
        }
        *(_OWORD *)((char *)v7 + v32[12]) = *(_OWORD *)((char *)v8 + v32[12]);
        *(void *)((char *)v7 + v32[13]) = *(void *)((char *)v8 + v32[13]);
        *(void *)((char *)v7 + v32[14]) = *(void *)((char *)v8 + v32[14]);
        uint64_t v95 = v32[15];
        uint64_t v96 = (void *)((char *)v7 + v95);
        uint64_t v97 = (void *)((char *)v8 + v95);
        uint64_t v98 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v99 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v98 - 8);
        if (v99[6](v97, 1, v98))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
          uint64_t v3 = v406;
          uint64_t v4 = v407;
        }
        else
        {
          long long v365 = (void *)v98;
          __dste = v99;
          *uint64_t v96 = *v97;
          uint64_t v101 = *(int *)(v98 + 20);
          uint64_t v102 = (char *)v96 + v101;
          long long v103 = (char *)v97 + v101;
          uint64_t v104 = type metadata accessor for Period();
          uint64_t v105 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v104 - 8);
          if (v105[6](v103, 1, v104))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
            uint64_t v3 = v406;
            uint64_t v4 = v407;
            long long v107 = (void (**)(void *, void, uint64_t, void *))__dste;
          }
          else
          {
            uint64_t v347 = (void (**)(char *, void, uint64_t, int *))v105;
            uint64_t v350 = v96;
            long long v353 = (int *)v104;
            uint64_t v359 = v102;
            uint64_t v137 = v398;
            long long v138 = v103;
            if (v382(v103, 1, v398))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              uint64_t v140 = v102;
              memcpy(v102, v103, *(void *)(*(void *)(v139 - 8) + 64));
              long long v107 = (void (**)(void *, void, uint64_t, void *))__dste;
            }
            else
            {
              *uint64_t v102 = *v103;
              *((void *)v102 + 1) = *((void *)v103 + 1);
              *((_DWORD *)v102 + 4) = *((_DWORD *)v103 + 4);
              *(_OWORD *)(v102 + 24) = *(_OWORD *)(v103 + 24);
              *(_OWORD *)(v102 + 40) = *(_OWORD *)(v103 + 40);
              *((void *)v102 + 7) = *((void *)v103 + 7);
              uint64_t v199 = v398[7];
              uint64_t v345 = &v102[v199];
              uint64_t v200 = &v103[v199];
              uint64_t v201 = sub_23309B300();
              uint64_t v202 = *(void *)(v201 - 8);
              uint64_t v203 = v200;
              int v204 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201);
              long long v107 = (void (**)(void *, void, uint64_t, void *))__dste;
              if (v204)
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v345, v203, *(void *)(*(void *)(v205 - 8) + 64));
              }
              else
              {
                (*(void (**)(unsigned char *, const void *, uint64_t))(v202 + 32))(v345, v203, v201);
                (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v202 + 56))(v345, 0, 1, v201);
              }
              uint64_t v140 = v359;
              uint64_t v137 = v398;
              *(_OWORD *)&v359[v398[8]] = *(_OWORD *)&v138[v398[8]];
              (*((void (**)(char *, void, uint64_t, int *))v391 + 7))(v359, 0, 1, v398);
            }
            uint64_t v333 = v353[5];
            uint64_t v334 = &v140[v333];
            uint64_t v335 = &v138[v333];
            if (v382(v335, 1, v137))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v334, v335, *(void *)(*(void *)(v336 - 8) + 64));
              uint64_t v337 = v347;
              uint64_t v96 = v350;
            }
            else
            {
              char *v334 = *v335;
              *((void *)v334 + 1) = *((void *)v335 + 1);
              *((_DWORD *)v334 + 4) = *((_DWORD *)v335 + 4);
              *(_OWORD *)(v334 + 24) = *(_OWORD *)(v335 + 24);
              *(_OWORD *)(v334 + 40) = *(_OWORD *)(v335 + 40);
              *((void *)v334 + 7) = *((void *)v335 + 7);
              uint64_t v338 = v137[7];
              uint64_t v388 = &v334[v338];
              long long v339 = &v335[v338];
              uint64_t v340 = sub_23309B300();
              uint64_t v341 = *(void *)(v340 - 8);
              uint64_t v342 = v340;
              if ((*(unsigned int (**)(unsigned char *, uint64_t))(v341 + 48))(v339, 1))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v388, v339, *(void *)(*(void *)(v343 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, unsigned char *, uint64_t))(v341 + 32))(v388, v339, v342);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v341 + 56))(v388, 0, 1, v342);
              }
              uint64_t v337 = v347;
              uint64_t v96 = v350;
              *(_OWORD *)&v334[v398[8]] = *(_OWORD *)&v335[v398[8]];
              (*((void (**)(char *, void, uint64_t))v391 + 7))(v334, 0, 1);
            }
            v337[7](v359, 0, 1, v353);
            uint64_t v3 = v406;
            uint64_t v4 = v407;
          }
          v107[7](v96, 0, 1, v365);
        }
        uint64_t v9 = v409;
        uint64_t v10 = v408;
        *(_OWORD *)((char *)v7 + v32[16]) = *(_OWORD *)((char *)v8 + v32[16]);
        goto LABEL_187;
      case 5u:
        long long v39 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v39;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((void *)v7 + 7) = *((void *)v8 + 7);
        *(void *)((char *)v7 + 61) = *(void *)((char *)v8 + 61);
        *((void *)v7 + 9) = *((void *)v8 + 9);
        uint64_t v40 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v41 = v40[10];
        uint64_t v42 = (char *)v7 + v41;
        uint64_t v43 = (char *)v8 + v41;
        uint64_t v44 = type metadata accessor for FHIRDateTime();
        uint64_t v45 = *(void **)(v44 - 8);
        uint64_t v46 = (unsigned int (*)(void, void, void))v45[6];
        if (v46(v43, 1, v44))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          uint64_t v364 = v5;
          uint64_t v393 = v46;
          uint64_t v400 = v45;
          *uint64_t v42 = *v43;
          *((void *)v42 + 1) = *((void *)v43 + 1);
          *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
          *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
          *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
          *((void *)v42 + 7) = *((void *)v43 + 7);
          uint64_t v71 = *(int *)(v44 + 28);
          uint64_t v383 = &v42[v71];
          uint64_t v72 = &v43[v71];
          uint64_t v73 = sub_23309B300();
          uint64_t v74 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v383, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v74 + 32))(v383, v72, v73);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v74 + 56))(v383, 0, 1, v73);
          }
          uint64_t v46 = (unsigned int (*)(void, void, void))v393;
          uint64_t v45 = v400;
          uint64_t v5 = v364;
          *(_OWORD *)&v42[*(int *)(v44 + 32)] = *(_OWORD *)&v43[*(int *)(v44 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v400[7])(v42, 0, 1, v44);
        }
        *(void *)((char *)v7 + v40[11]) = *(void *)((char *)v8 + v40[11]);
        uint64_t v108 = v40[12];
        long long v109 = (char *)v7 + v108;
        long long v110 = (char *)v8 + v108;
        if (v46((char *)v8 + v108, 1, v44))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v109, v110, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          *long long v109 = *v110;
          *((void *)v109 + 1) = *((void *)v110 + 1);
          *((_DWORD *)v109 + 4) = *((_DWORD *)v110 + 4);
          *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
          *(_OWORD *)(v109 + 40) = *(_OWORD *)(v110 + 40);
          *((void *)v109 + 7) = *((void *)v110 + 7);
          uint64_t v112 = *(int *)(v44 + 28);
          uint64_t v394 = &v109[v112];
          uint64_t v401 = v45;
          uint64_t v113 = &v110[v112];
          uint64_t v114 = sub_23309B300();
          uint64_t v115 = *(void *)(v114 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v394, v113, *(void *)(*(void *)(v116 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v115 + 32))(v394, v113, v114);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v115 + 56))(v394, 0, 1, v114);
          }
          *(_OWORD *)&v109[*(int *)(v44 + 32)] = *(_OWORD *)&v110[*(int *)(v44 + 32)];
          (*((void (**)(unsigned char *, void, uint64_t, uint64_t))v401 + 7))(v109, 0, 1, v44);
        }
        uint64_t v141 = v40[13];
        uint64_t v142 = (char *)v7 + v141;
        uint64_t v143 = (char *)v8 + v141;
        *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
        *((void *)v142 + 2) = *((void *)v143 + 2);
        uint64_t v144 = v40[14];
        long long v145 = (_OWORD *)((char *)v7 + v144);
        uint64_t v146 = (_OWORD *)((char *)v8 + v144);
        uint64_t v147 = type metadata accessor for Reference();
        uint64_t v148 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
        }
        else
        {
          long long v150 = v146[1];
          *long long v145 = *v146;
          v145[1] = v150;
          uint64_t v151 = *(int *)(v147 + 24);
          uint64_t v402 = v145;
          uint64_t v152 = (_OWORD *)((char *)v145 + v151);
          long long v153 = (_OWORD *)((char *)v146 + v151);
          uint64_t v154 = type metadata accessor for Identifier();
          uint64_t v155 = *(void (***)(void))(v154 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v155[6])(v153, 1, v154))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            uint64_t v157 = v402;
          }
          else
          {
            __dstf = v155;
            uint64_t v385 = (int *)v154;
            long long v167 = v153[1];
            *uint64_t v152 = *v153;
            v152[1] = v167;
            *((void *)v152 + 4) = *((void *)v153 + 4);
            uint64_t v168 = *(int *)(v154 + 24);
            uint64_t v395 = (char *)v152;
            uint64_t v368 = (char *)v152 + v168;
            long long v169 = (char *)v153 + v168;
            uint64_t v170 = sub_23309AF80();
            uint64_t v171 = *(void *)(v170 - 8);
            uint64_t v172 = v170;
            if ((*(unsigned int (**)(char *, uint64_t))(v171 + 48))(v169, 1))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v368, v169, *(void *)(*(void *)(v173 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v368, v169, v172);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v171 + 56))(v368, 0, 1, v172);
            }
            uint64_t v157 = v402;
            *(_OWORD *)&v395[v385[7]] = *(_OWORD *)((char *)v153 + v385[7]);
            __dstf[7]();
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v148 + 56))(v157, 0, 1, v147);
        }
        uint64_t v3 = v406;
        uint64_t v4 = v407;
        uint64_t v9 = v409;
        uint64_t v10 = v408;
        *((unsigned char *)v7 + v40[15]) = *((unsigned char *)v8 + v40[15]);
        *(_OWORD *)((char *)v7 + v40[16]) = *(_OWORD *)((char *)v8 + v40[16]);
        *(void *)((char *)v7 + v40[17]) = *(void *)((char *)v8 + v40[17]);
        *((unsigned char *)v7 + v40[18]) = *((unsigned char *)v8 + v40[18]);
        uint64_t v206 = v40[19];
        uint64_t v207 = (char *)v7 + v206;
        int v208 = (char *)v8 + v206;
        *((void *)v207 + 6) = *((void *)v208 + 6);
        long long v209 = *((_OWORD *)v208 + 2);
        long long v210 = *(_OWORD *)v208;
        *((_OWORD *)v207 + 1) = *((_OWORD *)v208 + 1);
        *((_OWORD *)v207 + 2) = v209;
        *(_OWORD *)uint64_t v207 = v210;
        *(_OWORD *)((char *)v7 + v40[20]) = *(_OWORD *)((char *)v8 + v40[20]);
        goto LABEL_187;
      case 6u:
        long long v48 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v48;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((void *)v7 + 7) = *((void *)v8 + 7);
        v7[4] = v8[4];
        *((void *)v7 + 10) = *((void *)v8 + 10);
        long long v399 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v49 = v399[10];
        long long v50 = (char *)v7 + v49;
        long long v51 = (char *)v8 + v49;
        uint64_t v52 = type metadata accessor for FHIRDateTime();
        uint64_t v392 = *(void **)(v52 - 8);
        long long v53 = (unsigned int (*)(void, void, void))v392[6];
        __dsta = v53;
        if (v53(v51, 1, v52))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          *long long v50 = *v51;
          *((void *)v50 + 1) = *((void *)v51 + 1);
          *((_DWORD *)v50 + 4) = *((_DWORD *)v51 + 4);
          *(_OWORD *)(v50 + 24) = *(_OWORD *)(v51 + 24);
          *(_OWORD *)(v50 + 40) = *(_OWORD *)(v51 + 40);
          *((void *)v50 + 7) = *((void *)v51 + 7);
          uint64_t v76 = *(int *)(v52 + 28);
          uint64_t v77 = &v50[v76];
          uint64_t v78 = &v51[v76];
          uint64_t v79 = sub_23309B300();
          uint64_t v80 = *(void *)(v79 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 32))(v77, v78, v79);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
          }
          long long v53 = (unsigned int (*)(void, void, void))__dsta;
          *(_OWORD *)&v50[*(int *)(v52 + 32)] = *(_OWORD *)&v51[*(int *)(v52 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v392[7])(v50, 0, 1, v52);
        }
        uint64_t v117 = v399[11];
        uint64_t v118 = (char *)v7 + v117;
        uint64_t v119 = (char *)v8 + v117;
        if (v53((char *)v8 + v117, 1, v52))
        {
          uint64_t v120 = v52;
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v118, v119, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          *uint64_t v118 = *v119;
          *((void *)v118 + 1) = *((void *)v119 + 1);
          *((_DWORD *)v118 + 4) = *((_DWORD *)v119 + 4);
          *(_OWORD *)(v118 + 24) = *(_OWORD *)(v119 + 24);
          *(_OWORD *)(v118 + 40) = *(_OWORD *)(v119 + 40);
          *((void *)v118 + 7) = *((void *)v119 + 7);
          uint64_t v122 = *(int *)(v52 + 28);
          uint64_t v123 = &v118[v122];
          uint64_t v124 = &v119[v122];
          uint64_t v125 = sub_23309B300();
          uint64_t v126 = *(void *)(v125 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v123, v124, *(void *)(*(void *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v126 + 32))(v123, v124, v125);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
          }
          long long v53 = (unsigned int (*)(void, void, void))__dsta;
          *(_OWORD *)&v118[*(int *)(v52 + 32)] = *(_OWORD *)&v119[*(int *)(v52 + 32)];
          uint64_t v120 = v52;
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v392[7])(v118, 0, 1, v52);
        }
        uint64_t v158 = v399[12];
        uint64_t v159 = (char *)v7 + v158;
        uint64_t v160 = (char *)v8 + v158;
        uint64_t v161 = type metadata accessor for Period();
        uint64_t v162 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v161 - 8);
        if (v162[6](v160, 1, v161))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
          uint64_t v164 = v120;
        }
        else
        {
          uint64_t v354 = (int *)v161;
          uint64_t v360 = v162;
          uint64_t v164 = v120;
          uint64_t v367 = v159;
          if (v53(v160, 1, v120))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v159, v160, *(void *)(*(void *)(v165 - 8) + 64));
            long long v166 = v354;
          }
          else
          {
            *uint64_t v159 = *v160;
            *((void *)v159 + 1) = *((void *)v160 + 1);
            *((_DWORD *)v159 + 4) = *((_DWORD *)v160 + 4);
            *(_OWORD *)(v159 + 24) = *(_OWORD *)(v160 + 24);
            *(_OWORD *)(v159 + 40) = *(_OWORD *)(v160 + 40);
            *((void *)v159 + 7) = *((void *)v160 + 7);
            uint64_t v174 = *(int *)(v120 + 28);
            uint64_t v175 = &v159[v174];
            long long v176 = &v160[v174];
            uint64_t v177 = sub_23309B300();
            uint64_t v178 = *(void *)(v177 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v175, v176, *(void *)(*(void *)(v179 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v178 + 32))(v175, v176, v177);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
            }
            long long v166 = v354;
            uint64_t v164 = v120;
            uint64_t v159 = v367;
            *(_OWORD *)&v367[*(int *)(v120 + 32)] = *(_OWORD *)&v160[*(int *)(v120 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))v392[7])(v367, 0, 1, v120);
            long long v53 = (unsigned int (*)(void, void, void))__dsta;
          }
          uint64_t v211 = v166[5];
          uint64_t v212 = &v159[v211];
          uint64_t v213 = &v160[v211];
          if (v53(v213, 1, v164))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v212, v213, *(void *)(*(void *)(v214 - 8) + 64));
          }
          else
          {
            *uint64_t v212 = *v213;
            *((void *)v212 + 1) = *((void *)v213 + 1);
            *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
            *(_OWORD *)(v212 + 24) = *(_OWORD *)(v213 + 24);
            *(_OWORD *)(v212 + 40) = *(_OWORD *)(v213 + 40);
            *((void *)v212 + 7) = *((void *)v213 + 7);
            uint64_t v215 = *(int *)(v164 + 28);
            uint64_t v351 = &v212[v215];
            uint64_t v216 = &v213[v215];
            uint64_t v217 = sub_23309B300();
            uint64_t v218 = *(void *)(v217 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v351, v216, *(void *)(*(void *)(v219 - 8) + 64));
            }
            else
            {
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v218 + 32))(v351, v216, v217);
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56))(v351, 0, 1, v217);
            }
            *(_OWORD *)&v212[*(int *)(v164 + 32)] = *(_OWORD *)&v213[*(int *)(v164 + 32)];
            ((void (*)(unsigned char *, void, uint64_t, uint64_t))v392[7])(v212, 0, 1, v164);
            long long v53 = (unsigned int (*)(void, void, void))__dsta;
          }
          (*((void (**)(unsigned char *, void, uint64_t, int *))v360 + 7))(v367, 0, 1, v166);
        }
        uint64_t v252 = v399[13];
        uint64_t v253 = (char *)v7 + v252;
        uint64_t v254 = (char *)v8 + v252;
        if (v53((char *)v8 + v252, 1, v164))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v253, v254, *(void *)(*(void *)(v255 - 8) + 64));
        }
        else
        {
          unsigned char *v253 = *v254;
          *((void *)v253 + 1) = *((void *)v254 + 1);
          *((_DWORD *)v253 + 4) = *((_DWORD *)v254 + 4);
          *(_OWORD *)(v253 + 24) = *(_OWORD *)(v254 + 24);
          *(_OWORD *)(v253 + 40) = *(_OWORD *)(v254 + 40);
          *((void *)v253 + 7) = *((void *)v254 + 7);
          uint64_t v256 = *(int *)(v164 + 28);
          uint64_t v257 = &v253[v256];
          uint64_t v258 = &v254[v256];
          uint64_t v259 = sub_23309B300();
          uint64_t v260 = *(void *)(v259 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v260 + 48))(v258, 1, v259))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v257, v258, *(void *)(*(void *)(v261 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v260 + 32))(v257, v258, v259);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v260 + 56))(v257, 0, 1, v259);
          }
          *(_OWORD *)&v253[*(int *)(v164 + 32)] = *(_OWORD *)&v254[*(int *)(v164 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v392[7])(v253, 0, 1, v164);
        }
        *(void *)((char *)v7 + v399[14]) = *(void *)((char *)v8 + v399[14]);
        *(void *)((char *)v7 + v399[15]) = *(void *)((char *)v8 + v399[15]);
        *(_OWORD *)((char *)v7 + v399[16]) = *(_OWORD *)((char *)v8 + v399[16]);
        uint64_t v262 = v399[17];
        uint64_t v263 = (char *)v7 + v262;
        uint64_t v264 = (char *)v8 + v262;
        *((void *)v263 + 2) = *((void *)v264 + 2);
        *(_OWORD *)uint64_t v263 = *(_OWORD *)v264;
        uint64_t v265 = v399[18];
        long long v266 = (_OWORD *)((char *)v7 + v265);
        uint64_t v267 = (_OWORD *)((char *)v8 + v265);
        uint64_t v268 = type metadata accessor for Quantity();
        uint64_t v269 = *(void *)(v268 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v266, v267, *(void *)(*(void *)(v270 - 8) + 64));
        }
        else
        {
          _OWORD *v266 = *v267;
          *(void *)((char *)v266 + 13) = *(void *)((char *)v267 + 13);
          *(_OWORD *)((char *)v266 + 24) = *(_OWORD *)((char *)v267 + 24);
          *(_OWORD *)((char *)v266 + 40) = *(_OWORD *)((char *)v267 + 40);
          uint64_t v271 = *(int *)(v268 + 28);
          long long v396 = (char *)v266 + v271;
          uint64_t v272 = (char *)v267 + v271;
          uint64_t v273 = sub_23309AF80();
          uint64_t v274 = *(void *)(v273 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v274 + 48))(v272, 1, v273))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v396, v272, *(void *)(*(void *)(v275 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v274 + 32))(v396, v272, v273);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v274 + 56))(v396, 0, 1, v273);
          }
          *(_OWORD *)((char *)v266 + *(int *)(v268 + 32)) = *(_OWORD *)((char *)v267 + *(int *)(v268 + 32));
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v269 + 56))(v266, 0, 1, v268);
        }
        uint64_t v3 = v406;
        uint64_t v4 = v407;
        uint64_t v9 = v409;
        uint64_t v10 = v408;
        *(void *)((char *)v7 + v399[19]) = *(void *)((char *)v8 + v399[19]);
        *(_OWORD *)((char *)v7 + v399[20]) = *(_OWORD *)((char *)v8 + v399[20]);
LABEL_187:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(void *)(v10 + 64));
        break;
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)v5 + *(int *)(v3 + 24)) = *(_OWORD *)((char *)v4 + *(int *)(v3 + 24));
  return v5;
}

void *assignWithTake for ModelsR4.Bundle.BundleEntry(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t)v5 + v7;
  uint64_t v9 = (char *)v4 + v7;
  uint64_t v10 = type metadata accessor for ModelsR4.ResourceProxy(0);
  uint64_t v11 = *(void **)(v10 - 8);
  long long v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[6];
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v792 = v11;
      uint64_t v806 = a3;
      uint64_t v808 = v4;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          long long v15 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v15;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(void *)(v8 + 56) = *((void *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          uint64_t v16 = *((void *)v9 + 11);
          *(void *)(v8 + 80) = *((void *)v9 + 10);
          *(void *)(v8 + 88) = v16;
          long long v17 = *((_OWORD *)v9 + 6);
          *(void *)(v8 + 112) = *((void *)v9 + 14);
          *(_OWORD *)(v8 + 96) = v17;
          *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
          uint64_t v18 = *((void *)v9 + 18);
          *(void *)(v8 + 136) = *((void *)v9 + 17);
          *(void *)(v8 + 144) = v18;
          uint64_t v19 = (int *)type metadata accessor for ModelsR4.Condition(0);
          uint64_t v20 = v19[13];
          uint64_t v21 = (char *)(v8 + v20);
          uint64_t v22 = &v9[v20];
          uint64_t v23 = type metadata accessor for FHIRDateTime();
          v693 = *(void **)(v23 - 8);
          uint64_t v740 = (unsigned int (*)(char *, uint64_t, uint64_t))v693[6];
          uint64_t v719 = v19;
          v773 = (int *)v23;
          uint64_t v801 = v10;
          if (v740(v22, 1, v23))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
          }
          else
          {
            *uint64_t v21 = *v22;
            *((void *)v21 + 1) = *((void *)v22 + 1);
            *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
            *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
            *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
            *((void *)v21 + 7) = *((void *)v22 + 7);
            uint64_t v69 = *(int *)(v23 + 28);
            uint64_t v70 = &v21[v69];
            uint64_t v71 = &v22[v69];
            uint64_t v72 = sub_23309B300();
            uint64_t v73 = *(void *)(v72 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
            }
            *(_OWORD *)&v21[*(int *)(v23 + 32)] = *(_OWORD *)&v22[*(int *)(v23 + 32)];
            ((void (*)(char *, void, uint64_t))v693[7])(v21, 0, 1);
            uint64_t v19 = v719;
          }
          uint64_t v132 = v19[14];
          uint64_t v133 = (char *)(v8 + v132);
          uint64_t v134 = &v9[v132];
          uint64_t v135 = type metadata accessor for Period();
          uint64_t v674 = *(void *)(v135 - 8);
          __dstb = (int *)v135;
          uint64_t v683 = *(unsigned int (**)(char *, uint64_t))(v674 + 48);
          if (v683(v134, 1))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v133, v134, *(void *)(*(void *)(v136 - 8) + 64));
          }
          else
          {
            if (v740(v134, 1, v23))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
            }
            else
            {
              char *v133 = *v134;
              *((void *)v133 + 1) = *((void *)v134 + 1);
              *((_DWORD *)v133 + 4) = *((_DWORD *)v134 + 4);
              *(_OWORD *)(v133 + 24) = *(_OWORD *)(v134 + 24);
              *(_OWORD *)(v133 + 40) = *(_OWORD *)(v134 + 40);
              *((void *)v133 + 7) = *((void *)v134 + 7);
              uint64_t v198 = *(int *)(v23 + 28);
              uint64_t v199 = &v133[v198];
              uint64_t v200 = &v134[v198];
              uint64_t v201 = sub_23309B300();
              uint64_t v202 = *(void *)(v201 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v199, v200, *(void *)(*(void *)(v203 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v199, v200, v201);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
              }
              *(_OWORD *)&v133[*(int *)(v23 + 32)] = *(_OWORD *)&v134[*(int *)(v23 + 32)];
              ((void (*)(char *, void, uint64_t, uint64_t))v693[7])(v133, 0, 1, v23);
              uint64_t v19 = v719;
            }
            uint64_t v294 = __dstb[5];
            uint64_t v295 = &v133[v294];
            uint64_t v296 = &v134[v294];
            if (v740(v296, 1, v23))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v295, v296, *(void *)(*(void *)(v297 - 8) + 64));
            }
            else
            {
              char *v295 = *v296;
              *((void *)v295 + 1) = *((void *)v296 + 1);
              *((_DWORD *)v295 + 4) = *((_DWORD *)v296 + 4);
              *(_OWORD *)(v295 + 24) = *(_OWORD *)(v296 + 24);
              *(_OWORD *)(v295 + 40) = *(_OWORD *)(v296 + 40);
              *((void *)v295 + 7) = *((void *)v296 + 7);
              uint64_t v298 = *(int *)(v23 + 28);
              uint64_t v299 = &v295[v298];
              uint64_t v300 = &v296[v298];
              uint64_t v301 = sub_23309B300();
              uint64_t v302 = *(void *)(v301 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v302 + 48))(v300, 1, v301))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v299, v300, *(void *)(*(void *)(v303 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v299, v300, v301);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v302 + 56))(v299, 0, 1, v301);
              }
              uint64_t v19 = v719;
              *(_OWORD *)&v295[v773[8]] = *(_OWORD *)&v296[v773[8]];
              ((void (*)(char *, void, uint64_t))v693[7])(v295, 0, 1);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v674 + 56))(v133, 0, 1, __dstb);
          }
          *(_OWORD *)(v8 + v19[15]) = *(_OWORD *)&v9[v19[15]];
          uint64_t v370 = v19[16];
          uint64_t v371 = (char *)(v8 + v370);
          uint64_t v372 = &v9[v370];
          if (v740(&v9[v370], 1, (uint64_t)v773))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v371, v372, *(void *)(*(void *)(v373 - 8) + 64));
          }
          else
          {
            *uint64_t v371 = *v372;
            *((void *)v371 + 1) = *((void *)v372 + 1);
            *((_DWORD *)v371 + 4) = *((_DWORD *)v372 + 4);
            *(_OWORD *)(v371 + 24) = *(_OWORD *)(v372 + 24);
            *(_OWORD *)(v371 + 40) = *(_OWORD *)(v372 + 40);
            *((void *)v371 + 7) = *((void *)v372 + 7);
            uint64_t v374 = v773[7];
            uint64_t v375 = &v371[v374];
            uint64_t v376 = &v372[v374];
            uint64_t v377 = sub_23309B300();
            uint64_t v378 = *(void *)(v377 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v378 + 48))(v376, 1, v377))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v375, v376, *(void *)(*(void *)(v379 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v378 + 32))(v375, v376, v377);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v378 + 56))(v375, 0, 1, v377);
            }
            *(_OWORD *)&v371[v773[8]] = *(_OWORD *)&v372[v773[8]];
            ((void (*)(char *, void, uint64_t))v693[7])(v371, 0, 1);
            uint64_t v19 = v719;
          }
          uint64_t v380 = v19[17];
          uint64_t v381 = (char *)(v8 + v380);
          long long v382 = &v9[v380];
          uint64_t v383 = __dstb;
          if (((unsigned int (*)(char *, uint64_t, int *))v683)(&v9[v380], 1, __dstb))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v381, v382, *(void *)(*(void *)(v384 - 8) + 64));
          }
          else
          {
            uint64_t v385 = v773;
            if (v740(v382, 1, (uint64_t)v773))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v381, v382, *(void *)(*(void *)(v386 - 8) + 64));
            }
            else
            {
              *uint64_t v381 = *v382;
              *((void *)v381 + 1) = *((void *)v382 + 1);
              *((_DWORD *)v381 + 4) = *((_DWORD *)v382 + 4);
              *(_OWORD *)(v381 + 24) = *(_OWORD *)(v382 + 24);
              *(_OWORD *)(v381 + 40) = *(_OWORD *)(v382 + 40);
              *((void *)v381 + 7) = *((void *)v382 + 7);
              uint64_t v387 = v773[7];
              uint64_t v388 = &v381[v387];
              uint64_t v389 = &v382[v387];
              uint64_t v390 = sub_23309B300();
              uint64_t v391 = *(void *)(v390 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v391 + 48))(v389, 1, v390))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v388, v389, *(void *)(*(void *)(v392 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v391 + 32))(v388, v389, v390);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v391 + 56))(v388, 0, 1, v390);
              }
              uint64_t v385 = v773;
              *(_OWORD *)&v381[v773[8]] = *(_OWORD *)&v382[v773[8]];
              ((void (*)(char *, void, uint64_t, int *))v693[7])(v381, 0, 1, v773);
              uint64_t v383 = __dstb;
              uint64_t v19 = v719;
            }
            uint64_t v438 = v383[5];
            uint64_t v439 = &v381[v438];
            uint64_t v440 = &v382[v438];
            if (v740(v440, 1, (uint64_t)v385))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v439, v440, *(void *)(*(void *)(v441 - 8) + 64));
            }
            else
            {
              char *v439 = *v440;
              *((void *)v439 + 1) = *((void *)v440 + 1);
              *((_DWORD *)v439 + 4) = *((_DWORD *)v440 + 4);
              *(_OWORD *)(v439 + 24) = *(_OWORD *)(v440 + 24);
              *(_OWORD *)(v439 + 40) = *(_OWORD *)(v440 + 40);
              *((void *)v439 + 7) = *((void *)v440 + 7);
              uint64_t v442 = v385[7];
              uint64_t v443 = &v439[v442];
              long long v444 = &v440[v442];
              uint64_t v445 = sub_23309B300();
              uint64_t v446 = *(void *)(v445 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v446 + 48))(v444, 1, v445))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v443, v444, *(void *)(*(void *)(v447 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v446 + 32))(v443, v444, v445);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v446 + 56))(v443, 0, 1, v445);
              }
              uint64_t v19 = v719;
              *(_OWORD *)&v439[v773[8]] = *(_OWORD *)&v440[v773[8]];
              ((void (*)(char *, void, uint64_t))v693[7])(v439, 0, 1);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v674 + 56))(v381, 0, 1, __dstb);
          }
          *(_OWORD *)(v8 + v19[18]) = *(_OWORD *)&v9[v19[18]];
          uint64_t v448 = v19[19];
          uint64_t v449 = (char *)(v8 + v448);
          uint64_t v450 = &v9[v448];
          uint64_t v11 = v792;
          if (v740(&v9[v448], 1, (uint64_t)v773))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v449, v450, *(void *)(*(void *)(v451 - 8) + 64));
          }
          else
          {
            *uint64_t v449 = *v450;
            *((void *)v449 + 1) = *((void *)v450 + 1);
            *((_DWORD *)v449 + 4) = *((_DWORD *)v450 + 4);
            *(_OWORD *)(v449 + 24) = *(_OWORD *)(v450 + 24);
            *(_OWORD *)(v449 + 40) = *(_OWORD *)(v450 + 40);
            *((void *)v449 + 7) = *((void *)v450 + 7);
            uint64_t v452 = v773[7];
            uint64_t v453 = &v449[v452];
            uint64_t v454 = &v450[v452];
            uint64_t v455 = sub_23309B300();
            uint64_t v456 = *(void *)(v455 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v456 + 48))(v454, 1, v455))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v453, v454, *(void *)(*(void *)(v457 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v456 + 32))(v453, v454, v455);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v456 + 56))(v453, 0, 1, v455);
            }
            *(_OWORD *)&v449[v773[8]] = *(_OWORD *)&v450[v773[8]];
            ((void (*)(char *, void, uint64_t))v693[7])(v449, 0, 1);
            uint64_t v11 = v792;
            uint64_t v19 = v719;
          }
          uint64_t v458 = v19[20];
          uint64_t v459 = (_OWORD *)(v8 + v458);
          uint64_t v460 = &v9[v458];
          uint64_t v461 = type metadata accessor for Reference();
          uint64_t v789 = *(void **)(v461 - 8);
          uint64_t v462 = (unsigned int (*)(void, void, void))v789[6];
          if (v462(v460, 1, v461))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v459, v460, *(void *)(*(void *)(v463 - 8) + 64));
          }
          else
          {
            uint64_t v767 = v462;
            long long v464 = *((_OWORD *)v460 + 1);
            *uint64_t v459 = *(_OWORD *)v460;
            v459[1] = v464;
            uint64_t v465 = *(int *)(v461 + 24);
            long long v466 = (_OWORD *)((char *)v459 + v465);
            uint64_t v467 = &v460[v465];
            uint64_t v468 = type metadata accessor for Identifier();
            uint64_t v469 = *(void (***)(void))(v468 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v469[6])(v467, 1, v468))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v466, v467, *(void *)(*(void *)(v470 - 8) + 64));
              uint64_t v462 = (unsigned int (*)(void, void, void))v767;
            }
            else
            {
              uint64_t v703 = v469;
              __dsth = (int *)v468;
              long long v471 = *((_OWORD *)v467 + 1);
              *long long v466 = *(_OWORD *)v467;
              v466[1] = v471;
              *((void *)v466 + 4) = *((void *)v467 + 4);
              uint64_t v472 = *(int *)(v468 + 24);
              uint64_t v751 = (char *)v466;
              uint64_t v690 = (char *)v466 + v472;
              long long v473 = &v467[v472];
              uint64_t v474 = sub_23309AF80();
              uint64_t v475 = *(void *)(v474 - 8);
              uint64_t v476 = v474;
              if ((*(unsigned int (**)(char *, uint64_t))(v475 + 48))(v473, 1))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v690, v473, *(void *)(*(void *)(v477 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v475 + 32))(v690, v473, v476);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v475 + 56))(v690, 0, 1, v476);
              }
              uint64_t v462 = (unsigned int (*)(void, void, void))v767;
              *(_OWORD *)&v751[__dsth[7]] = *(_OWORD *)&v467[__dsth[7]];
              v703[7]();
            }
            ((void (*)(_OWORD *, void, uint64_t, uint64_t))v789[7])(v459, 0, 1, v461);
            uint64_t v11 = v792;
            uint64_t v19 = v719;
          }
          uint64_t v478 = v19[21];
          uint64_t v479 = (_OWORD *)(v8 + v478);
          uint64_t v480 = &v9[v478];
          if (v462(&v9[v478], 1, v461))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v479, v480, *(void *)(*(void *)(v481 - 8) + 64));
            uint64_t v10 = v801;
          }
          else
          {
            long long v482 = *((_OWORD *)v480 + 1);
            *uint64_t v479 = *(_OWORD *)v480;
            v479[1] = v482;
            uint64_t v483 = *(int *)(v461 + 24);
            uint64_t v484 = (_OWORD *)((char *)v479 + v483);
            uint64_t v485 = &v480[v483];
            uint64_t v486 = type metadata accessor for Identifier();
            uint64_t v487 = *(void *)(v486 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v487 + 48))(v485, 1, v486))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v484, v485, *(void *)(*(void *)(v488 - 8) + 64));
            }
            else
            {
              long long v489 = *((_OWORD *)v485 + 1);
              _OWORD *v484 = *(_OWORD *)v485;
              v484[1] = v489;
              *((void *)v484 + 4) = *((void *)v485 + 4);
              uint64_t v490 = *(int *)(v486 + 24);
              v768 = (char *)v484 + v490;
              long long v491 = &v485[v490];
              uint64_t v492 = sub_23309AF80();
              __dsti = *(void (***)(void *, void *, void))(v492 - 8);
              v752 = v491;
              uint64_t v493 = v491;
              uint64_t v494 = v492;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))__dsti[6])(v493, 1, v492))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(v768, v752, *(void *)(*(void *)(v495 - 8) + 64));
              }
              else
              {
                __dsti[4](v768, v752, v494);
                ((void (*)(char *, void, uint64_t, uint64_t))__dsti[7])(v768, 0, 1, v494);
              }
              *(_OWORD *)((char *)v484 + *(int *)(v486 + 28)) = *(_OWORD *)&v485[*(int *)(v486 + 28)];
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v487 + 56))(v484, 0, 1, v486);
            }
            ((void (*)(_OWORD *, void, uint64_t, uint64_t))v789[7])(v479, 0, 1, v461);
            uint64_t v11 = v792;
            uint64_t v10 = v801;
            uint64_t v19 = v719;
          }
          *(void *)(v8 + v19[22]) = *(void *)&v9[v19[22]];
          *(_OWORD *)(v8 + v19[23]) = *(_OWORD *)&v9[v19[23]];
          goto LABEL_256;
        case 3u:
          long long v37 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v37;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(void *)(v8 + 56) = *((void *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          *(void *)(v8 + 80) = *((void *)v9 + 10);
          *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
          uint64_t v38 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
          uint64_t v39 = v38[11];
          uint64_t v40 = (char *)(v8 + v39);
          uint64_t v41 = &v9[v39];
          uint64_t v42 = type metadata accessor for FHIRDateTime();
          v742 = *(void **)(v42 - 8);
          v775 = (unsigned int (*)(char *, uint64_t, uint64_t))v742[6];
          uint64_t v802 = v10;
          uint64_t v720 = v38;
          if (v775(v41, 1, v42))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v40, v41, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            *uint64_t v40 = *v41;
            *((void *)v40 + 1) = *((void *)v41 + 1);
            *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
            *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
            *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
            *((void *)v40 + 7) = *((void *)v41 + 7);
            uint64_t v106 = *(int *)(v42 + 28);
            __dst = &v40[v106];
            long long v107 = &v41[v106];
            uint64_t v108 = sub_23309B300();
            uint64_t v109 = *(void *)(v108 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dst, v107, *(void *)(*(void *)(v110 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v109 + 32))(__dst, v107, v108);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(__dst, 0, 1, v108);
            }
            *(_OWORD *)&v40[*(int *)(v42 + 32)] = *(_OWORD *)&v41[*(int *)(v42 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v742[7])(v40, 0, 1, v42);
            uint64_t v38 = v720;
          }
          uint64_t v158 = v38[12];
          uint64_t v159 = (char *)(v8 + v158);
          uint64_t v160 = &v9[v158];
          uint64_t v161 = type metadata accessor for Period();
          uint64_t v162 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v161 - 8);
          if (v162[6](v160, 1, v161))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
            uint64_t v11 = v792;
          }
          else
          {
            __dstc = (void (**)(char *, void, uint64_t, uint64_t))v162;
            if (v775(v160, 1, v42))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              uint64_t v165 = v159;
              memcpy(v159, v160, *(void *)(*(void *)(v164 - 8) + 64));
            }
            else
            {
              uint64_t v165 = v159;
              *uint64_t v159 = *v160;
              *((void *)v159 + 1) = *((void *)v160 + 1);
              *((_DWORD *)v159 + 4) = *((_DWORD *)v160 + 4);
              *(_OWORD *)(v159 + 24) = *(_OWORD *)(v160 + 24);
              *(_OWORD *)(v159 + 40) = *(_OWORD *)(v160 + 40);
              *((void *)v159 + 7) = *((void *)v160 + 7);
              uint64_t v204 = *(int *)(v42 + 28);
              uint64_t v684 = &v159[v204];
              uint64_t v205 = &v160[v204];
              uint64_t v206 = sub_23309B300();
              uint64_t v207 = *(void *)(v206 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v684, v205, *(void *)(*(void *)(v208 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v684, v205, v206);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v684, 0, 1, v206);
              }
              *(_OWORD *)&v165[*(int *)(v42 + 32)] = *(_OWORD *)&v160[*(int *)(v42 + 32)];
              ((void (*)(char *, void, uint64_t, uint64_t))v742[7])(v165, 0, 1, v42);
              uint64_t v38 = v720;
            }
            uint64_t v304 = *(int *)(v161 + 20);
            uint64_t v305 = &v165[v304];
            long long v306 = &v160[v304];
            if (v775(v306, 1, v42))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v305, v306, *(void *)(*(void *)(v307 - 8) + 64));
            }
            else
            {
              char *v305 = *v306;
              *((void *)v305 + 1) = *((void *)v306 + 1);
              *((_DWORD *)v305 + 4) = *((_DWORD *)v306 + 4);
              *(_OWORD *)(v305 + 24) = *(_OWORD *)(v306 + 24);
              *(_OWORD *)(v305 + 40) = *(_OWORD *)(v306 + 40);
              *((void *)v305 + 7) = *((void *)v306 + 7);
              uint64_t v308 = *(int *)(v42 + 28);
              long long v699 = &v305[v308];
              uint64_t v309 = &v306[v308];
              uint64_t v310 = sub_23309B300();
              uint64_t v681 = *(void *)(v310 - 8);
              uint64_t v687 = v309;
              uint64_t v311 = v309;
              uint64_t v312 = v310;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v681 + 48))(v311, 1, v310))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v699, v687, *(void *)(*(void *)(v313 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v681 + 32))(v699, v687, v312);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v681 + 56))(v699, 0, 1, v312);
              }
              *(_OWORD *)&v305[*(int *)(v42 + 32)] = *(_OWORD *)&v306[*(int *)(v42 + 32)];
              uint64_t v38 = v720;
              ((void (*)(char *, void, uint64_t, uint64_t))v742[7])(v305, 0, 1, v42);
            }
            __dstc[7](v165, 0, 1, v161);
            uint64_t v11 = v792;
          }
          uint64_t v393 = v38[13];
          uint64_t v394 = (char *)(v8 + v393);
          uint64_t v395 = &v9[v393];
          uint64_t v4 = v808;
          if (v775(&v9[v393], 1, v42))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v394, v395, *(void *)(*(void *)(v396 - 8) + 64));
          }
          else
          {
            *uint64_t v394 = *v395;
            *((void *)v394 + 1) = *((void *)v395 + 1);
            *((_DWORD *)v394 + 4) = *((_DWORD *)v395 + 4);
            *(_OWORD *)(v394 + 24) = *(_OWORD *)(v395 + 24);
            *(_OWORD *)(v394 + 40) = *(_OWORD *)(v395 + 40);
            *((void *)v394 + 7) = *((void *)v395 + 7);
            uint64_t v397 = *(int *)(v42 + 28);
            uint64_t v398 = &v394[v397];
            long long v399 = &v395[v397];
            uint64_t v400 = sub_23309B300();
            uint64_t v401 = *(void *)(v400 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v401 + 48))(v399, 1, v400))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v398, v399, *(void *)(*(void *)(v402 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v401 + 32))(v398, v399, v400);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v401 + 56))(v398, 0, 1, v400);
            }
            uint64_t v4 = v808;
            *(_OWORD *)&v394[*(int *)(v42 + 32)] = *(_OWORD *)&v395[*(int *)(v42 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v742[7])(v394, 0, 1, v42);
            uint64_t v11 = v792;
            uint64_t v38 = v720;
          }
          *(void *)(v8 + v38[14]) = *(void *)&v9[v38[14]];
          *(void *)(v8 + v38[15]) = *(void *)&v9[v38[15]];
          *(_OWORD *)(v8 + v38[16]) = *(_OWORD *)&v9[v38[16]];
          uint64_t v10 = v802;
          goto LABEL_201;
        case 4u:
          uint64_t v803 = v10;
          long long v44 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v44;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
          uint64_t v45 = *((void *)v9 + 12);
          *(void *)(v8 + 88) = *((void *)v9 + 11);
          *(void *)(v8 + 96) = v45;
          uint64_t v46 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
          uint64_t v47 = v46[11];
          long long v48 = (char *)(v8 + v47);
          uint64_t v49 = &v9[v47];
          uint64_t v50 = type metadata accessor for FHIRDateTime();
          long long v51 = (void **)(*(void *)(v50 - 8) + 48);
          v757 = (unsigned int (*)(char *, uint64_t, uint64_t))*v51;
          uint64_t v776 = *(void (***)(char *, void, uint64_t, int *))(v50 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))*v51)(v49, 1, v50))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
          }
          else
          {
            char *v48 = *v49;
            *((void *)v48 + 1) = *((void *)v49 + 1);
            *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
            *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
            *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
            *((void *)v48 + 7) = *((void *)v49 + 7);
            uint64_t v111 = *(int *)(v50 + 28);
            __dsta = &v48[v111];
            uint64_t v721 = (int *)v50;
            uint64_t v112 = &v49[v111];
            uint64_t v113 = sub_23309B300();
            uint64_t v114 = *(void *)(v113 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(__dsta, v112, *(void *)(*(void *)(v115 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v114 + 32))(__dsta, v112, v113);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56))(__dsta, 0, 1, v113);
            }
            uint64_t v50 = (uint64_t)v721;
            *(_OWORD *)&v48[v721[8]] = *(_OWORD *)&v49[v721[8]];
            v776[7](v48, 0, 1, v721);
          }
          *(_OWORD *)(v8 + v46[12]) = *(_OWORD *)&v9[v46[12]];
          *(void *)(v8 + v46[13]) = *(void *)&v9[v46[13]];
          *(void *)(v8 + v46[14]) = *(void *)&v9[v46[14]];
          uint64_t v166 = v46[15];
          long long v167 = (void *)(v8 + v166);
          uint64_t v168 = &v9[v166];
          uint64_t v169 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
          uint64_t v170 = *(void *)(v169 - 8);
          uint64_t v4 = v808;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
          {
            sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
            memcpy(v167, v168, *(void *)(*(void *)(v171 - 8) + 64));
          }
          else
          {
            void *v167 = *(void *)v168;
            BOOL v695 = (void *)v169;
            __dstd = v167;
            uint64_t v172 = *(int *)(v169 + 20);
            uint64_t v173 = (char *)v167 + v172;
            uint64_t v174 = &v168[v172];
            uint64_t v175 = type metadata accessor for Period();
            uint64_t v176 = *(void *)(v175 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
            {
              sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
              memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
              uint64_t v4 = v808;
              uint64_t v179 = v695;
              uint64_t v178 = __dstd;
            }
            else
            {
              uint64_t v675 = v176;
              v685 = (int *)v175;
              uint64_t v679 = v173;
              if (v757(v174, 1, v50))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v173, v174, *(void *)(*(void *)(v209 - 8) + 64));
                long long v210 = v173;
                uint64_t v179 = v695;
              }
              else
              {
                char *v173 = *v174;
                *((void *)v173 + 1) = *((void *)v174 + 1);
                *((_DWORD *)v173 + 4) = *((_DWORD *)v174 + 4);
                *(_OWORD *)(v173 + 24) = *(_OWORD *)(v174 + 24);
                *(_OWORD *)(v173 + 40) = *(_OWORD *)(v174 + 40);
                *((void *)v173 + 7) = *((void *)v174 + 7);
                uint64_t v730 = (int *)v50;
                uint64_t v314 = *(int *)(v50 + 28);
                uint64_t v673 = &v173[v314];
                uint64_t v315 = &v174[v314];
                uint64_t v316 = sub_23309B300();
                uint64_t v317 = *(void *)(v316 - 8);
                uint64_t v671 = v315;
                int v318 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316);
                uint64_t v179 = v695;
                if (v318)
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v673, v671, *(void *)(*(void *)(v319 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v317 + 32))(v673, v671, v316);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v317 + 56))(v673, 0, 1, v316);
                }
                uint64_t v50 = (uint64_t)v730;
                long long v210 = v679;
                *(_OWORD *)&v679[v730[8]] = *(_OWORD *)&v174[v730[8]];
                v776[7](v679, 0, 1, v730);
              }
              uint64_t v496 = v685[5];
              uint64_t v497 = &v210[v496];
              uint64_t v498 = &v174[v496];
              if (v757(v498, 1, v50))
              {
                sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
                memcpy(v497, v498, *(void *)(*(void *)(v499 - 8) + 64));
                uint64_t v178 = __dstd;
              }
              else
              {
                *uint64_t v497 = *v498;
                *((void *)v497 + 1) = *((void *)v498 + 1);
                *((_DWORD *)v497 + 4) = *((_DWORD *)v498 + 4);
                *(_OWORD *)(v497 + 24) = *(_OWORD *)(v498 + 24);
                *(_OWORD *)(v497 + 40) = *(_OWORD *)(v498 + 40);
                *((void *)v497 + 7) = *((void *)v498 + 7);
                uint64_t v734 = (int *)v50;
                uint64_t v500 = *(int *)(v50 + 28);
                v769 = &v497[v500];
                uint64_t v501 = &v498[v500];
                uint64_t v502 = sub_23309B300();
                uint64_t v503 = *(void *)(v502 - 8);
                v753 = v501;
                uint64_t v504 = v501;
                uint64_t v505 = v502;
                if ((*(unsigned int (**)(char *, uint64_t))(v503 + 48))(v504, 1))
                {
                  sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                  memcpy(v769, v753, *(void *)(*(void *)(v506 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v503 + 32))(v769, v753, v505);
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v503 + 56))(v769, 0, 1, v505);
                }
                uint64_t v178 = __dstd;
                *(_OWORD *)&v497[v734[8]] = *(_OWORD *)&v498[v734[8]];
                ((void (*)(char *, void, uint64_t))v776[7])(v497, 0, 1);
              }
              (*(void (**)(char *, void, uint64_t, int *))(v675 + 56))(v679, 0, 1, v685);
              uint64_t v4 = v808;
            }
            (*(void (**)(void *, void, uint64_t, void *))(v170 + 56))(v178, 0, 1, v179);
          }
          *(_OWORD *)(v8 + v46[16]) = *(_OWORD *)&v9[v46[16]];
          uint64_t v10 = v803;
          swift_storeEnumTagMultiPayload();
          a3 = v806;
          uint64_t v11 = v792;
          break;
        case 5u:
          uint64_t v804 = v10;
          long long v53 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v53;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(void *)(v8 + 56) = *((void *)v9 + 7);
          *(void *)(v8 + 61) = *(void *)(v9 + 61);
          *(void *)(v8 + 72) = *((void *)v9 + 9);
          uint64_t v54 = (int *)type metadata accessor for ModelsR4.Immunization(0);
          uint64_t v55 = v54[10];
          uint64_t v56 = (char *)(v8 + v55);
          uint64_t v57 = &v9[v55];
          uint64_t v58 = type metadata accessor for FHIRDateTime();
          uint64_t v59 = *(void **)(v58 - 8);
          uint64_t v60 = (unsigned int (*)(void, void, void))v59[6];
          if (v60(v57, 1, v58))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
          }
          else
          {
            v745 = v5;
            uint64_t v761 = v60;
            v781 = v59;
            char *v56 = *v57;
            *((void *)v56 + 1) = *((void *)v57 + 1);
            *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
            *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
            *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
            *((void *)v56 + 7) = *((void *)v57 + 7);
            uint64_t v116 = *(int *)(v58 + 28);
            uint64_t v722 = &v56[v116];
            uint64_t v117 = &v57[v116];
            uint64_t v118 = sub_23309B300();
            uint64_t v119 = *(void *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v722, v117, *(void *)(*(void *)(v120 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v722, v117, v118);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v722, 0, 1, v118);
            }
            *(_OWORD *)&v56[*(int *)(v58 + 32)] = *(_OWORD *)&v57[*(int *)(v58 + 32)];
            uint64_t v59 = v781;
            ((void (*)(char *, void, uint64_t, uint64_t))v781[7])(v56, 0, 1, v58);
            uint64_t v5 = v745;
            uint64_t v60 = (unsigned int (*)(void, void, void))v761;
          }
          *(void *)(v8 + v54[11]) = *(void *)&v9[v54[11]];
          uint64_t v180 = v54[12];
          long long v181 = (char *)(v8 + v180);
          uint64_t v182 = &v9[v180];
          if (v60(&v9[v180], 1, v58))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
          }
          else
          {
            *long long v181 = *v182;
            *((void *)v181 + 1) = *((void *)v182 + 1);
            *((_DWORD *)v181 + 4) = *((_DWORD *)v182 + 4);
            *(_OWORD *)(v181 + 24) = *(_OWORD *)(v182 + 24);
            *(_OWORD *)(v181 + 40) = *(_OWORD *)(v182 + 40);
            *((void *)v181 + 7) = *((void *)v182 + 7);
            uint64_t v184 = *(int *)(v58 + 28);
            v763 = &v181[v184];
            uint64_t v783 = (void (**)(char *, void, uint64_t, uint64_t))v59;
            uint64_t v185 = &v182[v184];
            uint64_t v186 = sub_23309B300();
            uint64_t v187 = *(void *)(v186 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v185, 1, v186))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v763, v185, *(void *)(*(void *)(v188 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v763, v185, v186);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v763, 0, 1, v186);
            }
            *(_OWORD *)&v181[*(int *)(v58 + 32)] = *(_OWORD *)&v182[*(int *)(v58 + 32)];
            v783[7](v181, 0, 1, v58);
          }
          uint64_t v11 = v792;
          uint64_t v211 = v54[13];
          uint64_t v212 = v8 + v211;
          uint64_t v213 = &v9[v211];
          *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
          *(void *)(v212 + 16) = *((void *)v213 + 2);
          uint64_t v214 = v54[14];
          uint64_t v215 = (_OWORD *)(v8 + v214);
          uint64_t v216 = &v9[v214];
          uint64_t v217 = type metadata accessor for Reference();
          uint64_t v218 = *(void *)(v217 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
          {
            sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
            memcpy(v215, v216, *(void *)(*(void *)(v219 - 8) + 64));
            uint64_t v4 = v808;
          }
          else
          {
            long long v220 = *((_OWORD *)v216 + 1);
            *uint64_t v215 = *(_OWORD *)v216;
            v215[1] = v220;
            uint64_t v221 = *(int *)(v217 + 24);
            uint64_t v784 = v215;
            uint64_t v222 = (_OWORD *)((char *)v215 + v221);
            uint64_t v223 = &v216[v221];
            uint64_t v224 = type metadata accessor for Identifier();
            uint64_t v225 = *(void (***)(void))(v224 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v225[6])(v223, 1, v224))
            {
              sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
              memcpy(v222, v223, *(void *)(*(void *)(v226 - 8) + 64));
              uint64_t v227 = v784;
            }
            else
            {
              uint64_t v726 = v225;
              v748 = (int *)v224;
              long long v237 = *((_OWORD *)v223 + 1);
              *uint64_t v222 = *(_OWORD *)v223;
              v222[1] = v237;
              *((void *)v222 + 4) = *((void *)v223 + 4);
              uint64_t v238 = *(int *)(v224 + 24);
              uint64_t v764 = (char *)v222;
              __dste = (char *)v222 + v238;
              uint64_t v239 = &v223[v238];
              uint64_t v240 = sub_23309AF80();
              uint64_t v241 = *(void *)(v240 - 8);
              uint64_t v242 = v240;
              if ((*(unsigned int (**)(char *, uint64_t))(v241 + 48))(v239, 1))
              {
                sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
                memcpy(__dste, v239, *(void *)(*(void *)(v243 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v241 + 32))(__dste, v239, v242);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v241 + 56))(__dste, 0, 1, v242);
              }
              uint64_t v227 = v784;
              *(_OWORD *)&v764[v748[7]] = *(_OWORD *)&v223[v748[7]];
              v726[7]();
            }
            (*(void (**)(void *, void, uint64_t, uint64_t))(v218 + 56))(v227, 0, 1, v217);
            uint64_t v4 = v808;
            uint64_t v11 = v792;
          }
          *(unsigned char *)(v8 + v54[15]) = v9[v54[15]];
          *(_OWORD *)(v8 + v54[16]) = *(_OWORD *)&v9[v54[16]];
          *(void *)(v8 + v54[17]) = *(void *)&v9[v54[17]];
          *(unsigned char *)(v8 + v54[18]) = v9[v54[18]];
          uint64_t v320 = v54[19];
          uint64_t v321 = v8 + v320;
          long long v322 = &v9[v320];
          *(void *)(v321 + 48) = *((void *)v322 + 6);
          long long v323 = *((_OWORD *)v322 + 2);
          long long v324 = *(_OWORD *)v322;
          *(_OWORD *)(v321 + 16) = *((_OWORD *)v322 + 1);
          *(_OWORD *)(v321 + 32) = v323;
          *(_OWORD *)uint64_t v321 = v324;
          *(_OWORD *)(v8 + v54[20]) = *(_OWORD *)&v9[v54[20]];
          uint64_t v10 = v804;
LABEL_201:
          swift_storeEnumTagMultiPayload();
          a3 = v806;
          break;
        case 6u:
          long long v62 = *((_OWORD *)v9 + 1);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v62;
          *(void *)(v8 + 32) = *((void *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(void *)(v8 + 56) = *((void *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          *(void *)(v8 + 80) = *((void *)v9 + 10);
          uint64_t v63 = (int *)type metadata accessor for ModelsR4.Observation(0);
          uint64_t v64 = v63[10];
          uint64_t v65 = (char *)(v8 + v64);
          uint64_t v66 = &v9[v64];
          uint64_t v67 = type metadata accessor for FHIRDateTime();
          v743 = *(void **)(v67 - 8);
          v777 = (unsigned int (*)(char *, uint64_t, uint64_t))v743[6];
          uint64_t v758 = v63;
          if (v777(v66, 1, v67))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v65, v66, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            *uint64_t v65 = *v66;
            *((void *)v65 + 1) = *((void *)v66 + 1);
            *((_DWORD *)v65 + 4) = *((_DWORD *)v66 + 4);
            *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
            *(_OWORD *)(v65 + 40) = *(_OWORD *)(v66 + 40);
            *((void *)v65 + 7) = *((void *)v66 + 7);
            uint64_t v121 = *(int *)(v67 + 28);
            uint64_t v694 = &v65[v121];
            uint64_t v122 = &v66[v121];
            uint64_t v123 = sub_23309B300();
            uint64_t v124 = *(void *)(v123 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v694, v122, *(void *)(*(void *)(v125 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v694, v122, v123);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v694, 0, 1, v123);
            }
            *(_OWORD *)&v65[*(int *)(v67 + 32)] = *(_OWORD *)&v66[*(int *)(v67 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v743[7])(v65, 0, 1, v67);
            uint64_t v63 = v758;
          }
          uint64_t v189 = v63[11];
          uint64_t v190 = (char *)(v8 + v189);
          uint64_t v191 = &v9[v189];
          uint64_t v725 = (int *)v67;
          if (v777(&v9[v189], 1, v67))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v190, v191, *(void *)(*(void *)(v192 - 8) + 64));
          }
          else
          {
            *uint64_t v190 = *v191;
            *((void *)v190 + 1) = *((void *)v191 + 1);
            *((_DWORD *)v190 + 4) = *((_DWORD *)v191 + 4);
            *(_OWORD *)(v190 + 24) = *(_OWORD *)(v191 + 24);
            *(_OWORD *)(v190 + 40) = *(_OWORD *)(v191 + 40);
            *((void *)v190 + 7) = *((void *)v191 + 7);
            uint64_t v193 = *(int *)(v67 + 28);
            v696 = &v190[v193];
            uint64_t v194 = &v191[v193];
            uint64_t v195 = sub_23309B300();
            uint64_t v196 = *(void *)(v195 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v696, v194, *(void *)(*(void *)(v197 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v196 + 32))(v696, v194, v195);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v196 + 56))(v696, 0, 1, v195);
            }
            *(_OWORD *)&v190[*(int *)(v67 + 32)] = *(_OWORD *)&v191[*(int *)(v67 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v743[7])(v190, 0, 1, v67);
            uint64_t v63 = v758;
          }
          uint64_t v228 = v63[12];
          uint64_t v229 = (char *)(v8 + v228);
          long long v230 = &v9[v228];
          uint64_t v231 = type metadata accessor for Period();
          uint64_t v232 = *(void *)(v231 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v230, 1, v231))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v229, v230, *(void *)(*(void *)(v233 - 8) + 64));
            uint64_t v234 = v725;
          }
          else
          {
            uint64_t v680 = v232;
            uint64_t v686 = (int *)v231;
            uint64_t v234 = v725;
            long long v697 = v229;
            if (v777(v230, 1, (uint64_t)v725))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v229, v230, *(void *)(*(void *)(v235 - 8) + 64));
              uint64_t v236 = v686;
            }
            else
            {
              *uint64_t v229 = *v230;
              *((void *)v229 + 1) = *((void *)v230 + 1);
              *((_DWORD *)v229 + 4) = *((_DWORD *)v230 + 4);
              *(_OWORD *)(v229 + 24) = *(_OWORD *)(v230 + 24);
              *(_OWORD *)(v229 + 40) = *(_OWORD *)(v230 + 40);
              *((void *)v229 + 7) = *((void *)v230 + 7);
              uint64_t v244 = v725[7];
              uint64_t v245 = &v229[v244];
              uint64_t v246 = &v230[v244];
              uint64_t v247 = sub_23309B300();
              uint64_t v248 = *(void *)(v247 - 8);
              uint64_t v236 = v686;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v246, 1, v247))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v245, v246, *(void *)(*(void *)(v249 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v248 + 32))(v245, v246, v247);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v248 + 56))(v245, 0, 1, v247);
              }
              uint64_t v234 = v725;
              uint64_t v229 = v697;
              *(_OWORD *)&v697[v725[8]] = *(_OWORD *)&v230[v725[8]];
              ((void (*)(char *, void, uint64_t, int *))v743[7])(v697, 0, 1, v725);
              uint64_t v63 = v758;
            }
            uint64_t v325 = v236[5];
            long long v326 = &v229[v325];
            uint64_t v327 = &v230[v325];
            if (v777(v327, 1, (uint64_t)v234))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v326, v327, *(void *)(*(void *)(v328 - 8) + 64));
            }
            else
            {
              *long long v326 = *v327;
              *((void *)v326 + 1) = *((void *)v327 + 1);
              *((_DWORD *)v326 + 4) = *((_DWORD *)v327 + 4);
              *(_OWORD *)(v326 + 24) = *(_OWORD *)(v327 + 24);
              *(_OWORD *)(v326 + 40) = *(_OWORD *)(v327 + 40);
              *((void *)v326 + 7) = *((void *)v327 + 7);
              uint64_t v329 = v234[7];
              uint64_t v676 = &v326[v329];
              uint64_t v330 = &v327[v329];
              uint64_t v331 = sub_23309B300();
              uint64_t v332 = *(void *)(v331 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v332 + 48))(v330, 1, v331))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v676, v330, *(void *)(*(void *)(v333 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v332 + 32))(v676, v330, v331);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v332 + 56))(v676, 0, 1, v331);
              }
              *(_OWORD *)&v326[v234[8]] = *(_OWORD *)&v327[v234[8]];
              uint64_t v63 = v758;
              ((void (*)(char *, void, uint64_t, int *))v743[7])(v326, 0, 1, v234);
              uint64_t v236 = v686;
            }
            (*(void (**)(char *, void, uint64_t, int *))(v680 + 56))(v697, 0, 1, v236);
          }
          uint64_t v403 = v63[13];
          uint64_t v404 = (char *)(v8 + v403);
          uint64_t v405 = &v9[v403];
          uint64_t v11 = v792;
          if (v777(&v9[v403], 1, (uint64_t)v234))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v404, v405, *(void *)(*(void *)(v406 - 8) + 64));
          }
          else
          {
            char *v404 = *v405;
            *((void *)v404 + 1) = *((void *)v405 + 1);
            *((_DWORD *)v404 + 4) = *((_DWORD *)v405 + 4);
            *(_OWORD *)(v404 + 24) = *(_OWORD *)(v405 + 24);
            *(_OWORD *)(v404 + 40) = *(_OWORD *)(v405 + 40);
            *((void *)v404 + 7) = *((void *)v405 + 7);
            uint64_t v407 = v234[7];
            uint64_t v786 = &v404[v407];
            uint64_t v408 = &v405[v407];
            uint64_t v409 = sub_23309B300();
            uint64_t v410 = *(void *)(v409 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v410 + 48))(v408, 1, v409))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v786, v408, *(void *)(*(void *)(v411 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v410 + 32))(v786, v408, v409);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v410 + 56))(v786, 0, 1, v409);
            }
            *(_OWORD *)&v404[v234[8]] = *(_OWORD *)&v405[v234[8]];
            ((void (*)(char *, void, uint64_t, int *))v743[7])(v404, 0, 1, v234);
            uint64_t v11 = v792;
            uint64_t v63 = v758;
          }
          *(void *)(v8 + v63[14]) = *(void *)&v9[v63[14]];
          *(void *)(v8 + v63[15]) = *(void *)&v9[v63[15]];
          *(_OWORD *)(v8 + v63[16]) = *(_OWORD *)&v9[v63[16]];
          uint64_t v412 = v63[17];
          uint64_t v413 = v8 + v412;
          uint64_t v414 = &v9[v412];
          *(void *)(v413 + 16) = *((void *)v414 + 2);
          *(_OWORD *)uint64_t v413 = *(_OWORD *)v414;
          uint64_t v415 = v63[18];
          uint64_t v416 = (_OWORD *)(v8 + v415);
          uint64_t v417 = &v9[v415];
          uint64_t v418 = type metadata accessor for Quantity();
          uint64_t v419 = *(void *)(v418 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v419 + 48))(v417, 1, v418))
          {
            sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
            memcpy(v416, v417, *(void *)(*(void *)(v420 - 8) + 64));
          }
          else
          {
            uint64_t v805 = v10;
            *uint64_t v416 = *(_OWORD *)v417;
            *(void *)((char *)v416 + 13) = *(void *)(v417 + 13);
            *(_OWORD *)((char *)v416 + 24) = *(_OWORD *)(v417 + 24);
            *(_OWORD *)((char *)v416 + 40) = *(_OWORD *)(v417 + 40);
            uint64_t v421 = *(int *)(v418 + 28);
            v787 = (char *)v416 + v421;
            uint64_t v422 = &v417[v421];
            uint64_t v423 = sub_23309AF80();
            uint64_t v424 = *(void *)(v423 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v424 + 48))(v422, 1, v423))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v787, v422, *(void *)(*(void *)(v425 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v424 + 32))(v787, v422, v423);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v424 + 56))(v787, 0, 1, v423);
            }
            uint64_t v10 = v805;
            *(_OWORD *)((char *)v416 + *(int *)(v418 + 32)) = *(_OWORD *)&v417[*(int *)(v418 + 32)];
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v419 + 56))(v416, 0, 1, v418);
            uint64_t v11 = v792;
            uint64_t v63 = v758;
          }
          *(void *)(v8 + v63[19]) = *(void *)&v9[v63[19]];
          *(_OWORD *)(v8 + v63[20]) = *(_OWORD *)&v9[v63[20]];
LABEL_256:
          swift_storeEnumTagMultiPayload();
          a3 = v806;
          uint64_t v4 = v808;
          break;
        default:
          memcpy((void *)v8, v9, v11[8]);
          break;
      }
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v11[7])(v8, 0, 1, v10);
      goto LABEL_293;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    sub_232EA3DC4(v8, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_8:
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    size_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
LABEL_9:
    memcpy((void *)v8, v9, v26);
    goto LABEL_293;
  }
  if (v5 != v4)
  {
    sub_232EA3DC4(v8, type metadata accessor for ModelsR4.ResourceProxy);
    uint64_t v807 = a3;
    v809 = v4;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        long long v27 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v27;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(void *)(v8 + 56) = *((void *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        uint64_t v28 = *((void *)v9 + 11);
        *(void *)(v8 + 80) = *((void *)v9 + 10);
        *(void *)(v8 + 88) = v28;
        long long v29 = *((_OWORD *)v9 + 6);
        *(void *)(v8 + 112) = *((void *)v9 + 14);
        *(_OWORD *)(v8 + 96) = v29;
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
        uint64_t v30 = *((void *)v9 + 18);
        *(void *)(v8 + 136) = *((void *)v9 + 17);
        *(void *)(v8 + 144) = v30;
        uint64_t v31 = (int *)type metadata accessor for ModelsR4.Condition(0);
        uint64_t v32 = v31[13];
        uint64_t v33 = (char *)(v8 + v32);
        uint64_t v34 = &v9[v32];
        uint64_t v35 = type metadata accessor for FHIRDateTime();
        v741 = *(void **)(v35 - 8);
        uint64_t v774 = (unsigned int (*)(char *, uint64_t, uint64_t))v741[6];
        uint64_t v793 = v31;
        if (v774(v34, 1, v35))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          *uint64_t v33 = *v34;
          *((void *)v33 + 1) = *((void *)v34 + 1);
          *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
          *(_OWORD *)(v33 + 40) = *(_OWORD *)(v34 + 40);
          *((void *)v33 + 7) = *((void *)v34 + 7);
          uint64_t v126 = *(int *)(v35 + 28);
          uint64_t v127 = &v33[v126];
          uint64_t v128 = &v34[v126];
          uint64_t v129 = sub_23309B300();
          uint64_t v130 = *(void *)(v129 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v127, v128, v129);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
          }
          *(_OWORD *)&v33[*(int *)(v35 + 32)] = *(_OWORD *)&v34[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v33, 0, 1, v35);
          uint64_t v31 = v793;
        }
        uint64_t v250 = v31[14];
        uint64_t v251 = (char *)(v8 + v250);
        uint64_t v252 = &v9[v250];
        uint64_t v253 = type metadata accessor for Period();
        uint64_t v698 = *(void **)(v253 - 8);
        uint64_t v765 = (int *)v253;
        v727 = (unsigned int (*)(char *, uint64_t))v698[6];
        if (v727(v252, 1))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v251, v252, *(void *)(*(void *)(v254 - 8) + 64));
        }
        else
        {
          if (v774(v252, 1, v35))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v251, v252, *(void *)(*(void *)(v255 - 8) + 64));
          }
          else
          {
            *uint64_t v251 = *v252;
            *((void *)v251 + 1) = *((void *)v252 + 1);
            *((_DWORD *)v251 + 4) = *((_DWORD *)v252 + 4);
            *(_OWORD *)(v251 + 24) = *(_OWORD *)(v252 + 24);
            *(_OWORD *)(v251 + 40) = *(_OWORD *)(v252 + 40);
            *((void *)v251 + 7) = *((void *)v252 + 7);
            uint64_t v334 = *(int *)(v35 + 28);
            v688 = &v251[v334];
            uint64_t v335 = &v252[v334];
            uint64_t v336 = sub_23309B300();
            uint64_t v337 = *(void *)(v336 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v335, 1, v336))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v688, v335, *(void *)(*(void *)(v338 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v337 + 32))(v688, v335, v336);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v688, 0, 1, v336);
            }
            *(_OWORD *)&v251[*(int *)(v35 + 32)] = *(_OWORD *)&v252[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v251, 0, 1, v35);
            uint64_t v31 = v793;
          }
          uint64_t v507 = v765[5];
          uint64_t v508 = &v251[v507];
          long long v509 = &v252[v507];
          if (v774(v509, 1, v35))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v508, v509, *(void *)(*(void *)(v510 - 8) + 64));
          }
          else
          {
            char *v508 = *v509;
            *((void *)v508 + 1) = *((void *)v509 + 1);
            *((_DWORD *)v508 + 4) = *((_DWORD *)v509 + 4);
            *(_OWORD *)(v508 + 24) = *(_OWORD *)(v509 + 24);
            *(_OWORD *)(v508 + 40) = *(_OWORD *)(v509 + 40);
            *((void *)v508 + 7) = *((void *)v509 + 7);
            uint64_t v511 = *(int *)(v35 + 28);
            uint64_t v691 = &v508[v511];
            uint64_t v512 = &v509[v511];
            uint64_t v513 = sub_23309B300();
            uint64_t v677 = *(void *)(v513 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v677 + 48))(v512, 1, v513))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v691, v512, *(void *)(*(void *)(v514 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v677 + 32))(v691, v512, v513);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v677 + 56))(v691, 0, 1, v513);
            }
            uint64_t v31 = v793;
            *(_OWORD *)&v508[*(int *)(v35 + 32)] = *(_OWORD *)&v509[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v508, 0, 1, v35);
          }
          ((void (*)(char *, void, uint64_t, int *))v698[7])(v251, 0, 1, v765);
        }
        *(_OWORD *)(v8 + v31[15]) = *(_OWORD *)&v9[v31[15]];
        uint64_t v547 = v31[16];
        uint64_t v548 = (char *)(v8 + v547);
        uint64_t v549 = &v9[v547];
        if (v774(&v9[v547], 1, v35))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v548, v549, *(void *)(*(void *)(v550 - 8) + 64));
        }
        else
        {
          *uint64_t v548 = *v549;
          *((void *)v548 + 1) = *((void *)v549 + 1);
          *((_DWORD *)v548 + 4) = *((_DWORD *)v549 + 4);
          *(_OWORD *)(v548 + 24) = *(_OWORD *)(v549 + 24);
          *(_OWORD *)(v548 + 40) = *(_OWORD *)(v549 + 40);
          *((void *)v548 + 7) = *((void *)v549 + 7);
          uint64_t v551 = *(int *)(v35 + 28);
          uint64_t v552 = &v548[v551];
          uint64_t v553 = &v549[v551];
          uint64_t v554 = sub_23309B300();
          uint64_t v555 = *(void *)(v554 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v555 + 48))(v553, 1, v554))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v552, v553, *(void *)(*(void *)(v556 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v555 + 32))(v552, v553, v554);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v555 + 56))(v552, 0, 1, v554);
          }
          *(_OWORD *)&v548[*(int *)(v35 + 32)] = *(_OWORD *)&v549[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v548, 0, 1, v35);
          uint64_t v31 = v793;
        }
        uint64_t v557 = v31[17];
        uint64_t v558 = (char *)(v8 + v557);
        uint64_t v559 = &v9[v557];
        uint64_t v560 = v765;
        if (((unsigned int (*)(char *, uint64_t, int *))v727)(&v9[v557], 1, v765))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v558, v559, *(void *)(*(void *)(v561 - 8) + 64));
        }
        else
        {
          if (v774(v559, 1, v35))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v558, v559, *(void *)(*(void *)(v562 - 8) + 64));
          }
          else
          {
            *uint64_t v558 = *v559;
            *((void *)v558 + 1) = *((void *)v559 + 1);
            *((_DWORD *)v558 + 4) = *((_DWORD *)v559 + 4);
            *(_OWORD *)(v558 + 24) = *(_OWORD *)(v559 + 24);
            *(_OWORD *)(v558 + 40) = *(_OWORD *)(v559 + 40);
            *((void *)v558 + 7) = *((void *)v559 + 7);
            uint64_t v563 = *(int *)(v35 + 28);
            v736 = &v558[v563];
            uint64_t v564 = &v559[v563];
            uint64_t v565 = sub_23309B300();
            uint64_t v566 = *(void *)(v565 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v566 + 48))(v564, 1, v565))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v736, v564, *(void *)(*(void *)(v567 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v566 + 32))(v736, v564, v565);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v566 + 56))(v736, 0, 1, v565);
            }
            *(_OWORD *)&v558[*(int *)(v35 + 32)] = *(_OWORD *)&v559[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v558, 0, 1, v35);
            uint64_t v31 = v793;
            uint64_t v560 = v765;
          }
          uint64_t v602 = v560[5];
          uint64_t v603 = &v558[v602];
          uint64_t v604 = &v559[v602];
          if (v774(v604, 1, v35))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v603, v604, *(void *)(*(void *)(v605 - 8) + 64));
          }
          else
          {
            *uint64_t v603 = *v604;
            *((void *)v603 + 1) = *((void *)v604 + 1);
            *((_DWORD *)v603 + 4) = *((_DWORD *)v604 + 4);
            *(_OWORD *)(v603 + 24) = *(_OWORD *)(v604 + 24);
            *(_OWORD *)(v603 + 40) = *(_OWORD *)(v604 + 40);
            *((void *)v603 + 7) = *((void *)v604 + 7);
            uint64_t v606 = *(int *)(v35 + 28);
            uint64_t v737 = &v603[v606];
            uint64_t v607 = &v604[v606];
            uint64_t v608 = sub_23309B300();
            v692 = *(void (***)(void *, const void *, uint64_t))(v608 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v692[6])(v607, 1, v608))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v737, v607, *(void *)(*(void *)(v609 - 8) + 64));
            }
            else
            {
              v692[4](v737, v607, v608);
              ((void (*)(char *, void, uint64_t, uint64_t))v692[7])(v737, 0, 1, v608);
            }
            uint64_t v31 = v793;
            *(_OWORD *)&v603[*(int *)(v35 + 32)] = *(_OWORD *)&v604[*(int *)(v35 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v603, 0, 1, v35);
          }
          ((void (*)(char *, void, uint64_t, int *))v698[7])(v558, 0, 1, v765);
        }
        *(_OWORD *)(v8 + v31[18]) = *(_OWORD *)&v9[v31[18]];
        uint64_t v610 = v31[19];
        uint64_t v611 = (char *)(v8 + v610);
        long long v612 = &v9[v610];
        if (v774(&v9[v610], 1, v35))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v611, v612, *(void *)(*(void *)(v613 - 8) + 64));
        }
        else
        {
          *uint64_t v611 = *v612;
          *((void *)v611 + 1) = *((void *)v612 + 1);
          *((_DWORD *)v611 + 4) = *((_DWORD *)v612 + 4);
          *(_OWORD *)(v611 + 24) = *(_OWORD *)(v612 + 24);
          *(_OWORD *)(v611 + 40) = *(_OWORD *)(v612 + 40);
          *((void *)v611 + 7) = *((void *)v612 + 7);
          uint64_t v614 = *(int *)(v35 + 28);
          uint64_t v615 = &v611[v614];
          uint64_t v616 = &v612[v614];
          uint64_t v617 = sub_23309B300();
          uint64_t v618 = *(void *)(v617 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v618 + 48))(v616, 1, v617))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v615, v616, *(void *)(*(void *)(v619 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v618 + 32))(v615, v616, v617);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v618 + 56))(v615, 0, 1, v617);
          }
          *(_OWORD *)&v611[*(int *)(v35 + 32)] = *(_OWORD *)&v612[*(int *)(v35 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v741[7])(v611, 0, 1, v35);
          uint64_t v31 = v793;
        }
        uint64_t v620 = v31[20];
        uint64_t v621 = (_OWORD *)(v8 + v620);
        v622 = &v9[v620];
        uint64_t v623 = type metadata accessor for Reference();
        uint64_t v624 = *(void **)(v623 - 8);
        uint64_t v625 = (unsigned int (*)(void, void, void))v624[6];
        if (v625(v622, 1, v623))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v621, v622, *(void *)(*(void *)(v626 - 8) + 64));
        }
        else
        {
          v770 = v625;
          v790 = v624;
          long long v627 = *((_OWORD *)v622 + 1);
          *uint64_t v621 = *(_OWORD *)v622;
          v621[1] = v627;
          uint64_t v628 = *(int *)(v623 + 24);
          uint64_t v629 = (_OWORD *)((char *)v621 + v628);
          uint64_t v630 = &v622[v628];
          uint64_t v631 = type metadata accessor for Identifier();
          long long v632 = *(void (***)(void))(v631 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v632[6])(v630, 1, v631))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v629, v630, *(void *)(*(void *)(v633 - 8) + 64));
            uint64_t v625 = (unsigned int (*)(void, void, void))v770;
          }
          else
          {
            __dstk = (char *)v629;
            uint64_t v738 = v632;
            long long v634 = *((_OWORD *)v630 + 1);
            *uint64_t v629 = *(_OWORD *)v630;
            v629[1] = v634;
            *((void *)v629 + 4) = *((void *)v630 + 4);
            uint64_t v706 = (int *)v631;
            uint64_t v635 = *(int *)(v631 + 24);
            uint64_t v754 = (char *)v629 + v635;
            uint64_t v636 = &v630[v635];
            uint64_t v637 = sub_23309AF80();
            uint64_t v638 = *(void *)(v637 - 8);
            uint64_t v639 = v636;
            uint64_t v640 = v636;
            uint64_t v641 = v637;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v638 + 48))(v640, 1, v637))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v754, v639, *(void *)(*(void *)(v642 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, const void *, uint64_t))(v638 + 32))(v754, v639, v641);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v638 + 56))(v754, 0, 1, v641);
            }
            uint64_t v625 = (unsigned int (*)(void, void, void))v770;
            *(_OWORD *)&__dstk[v706[7]] = *(_OWORD *)&v630[v706[7]];
            v738[7]();
          }
          uint64_t v624 = v790;
          ((void (*)(_OWORD *, void, uint64_t, uint64_t))v790[7])(v621, 0, 1, v623);
        }
        uint64_t v643 = v793[21];
        uint64_t v644 = (_OWORD *)(v8 + v643);
        uint64_t v645 = &v9[v643];
        if (v625(&v9[v643], 1, v623))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v644, v645, *(void *)(*(void *)(v646 - 8) + 64));
        }
        else
        {
          int v791 = v624;
          long long v647 = *((_OWORD *)v645 + 1);
          *uint64_t v644 = *(_OWORD *)v645;
          v644[1] = v647;
          uint64_t v648 = *(int *)(v623 + 24);
          uint64_t v649 = (_OWORD *)((char *)v644 + v648);
          uint64_t v650 = &v645[v648];
          uint64_t v651 = type metadata accessor for Identifier();
          uint64_t v652 = *(void *)(v651 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v652 + 48))(v650, 1, v651))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v649, v650, *(void *)(*(void *)(v653 - 8) + 64));
          }
          else
          {
            long long v654 = *((_OWORD *)v650 + 1);
            _OWORD *v649 = *(_OWORD *)v650;
            v649[1] = v654;
            *((void *)v649 + 4) = *((void *)v650 + 4);
            uint64_t v655 = *(int *)(v651 + 24);
            uint64_t v771 = (char *)v649 + v655;
            v656 = &v650[v655];
            uint64_t v657 = sub_23309AF80();
            uint64_t v739 = *(void (***)(void *, void *, void))(v657 - 8);
            v755 = v656;
            uint64_t v658 = v656;
            uint64_t v659 = v657;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v739[6])(v658, 1, v657))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v771, v755, *(void *)(*(void *)(v660 - 8) + 64));
            }
            else
            {
              v739[4](v771, v755, v659);
              ((void (*)(char *, void, uint64_t, uint64_t))v739[7])(v771, 0, 1, v659);
            }
            *(_OWORD *)((char *)v649 + *(int *)(v651 + 28)) = *(_OWORD *)&v650[*(int *)(v651 + 28)];
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v652 + 56))(v649, 0, 1, v651);
          }
          (*((void (**)(_OWORD *, void, uint64_t, uint64_t))v791 + 7))(v644, 0, 1, v623);
        }
        *(void *)(v8 + v793[22]) = *(void *)&v9[v793[22]];
        *(_OWORD *)(v8 + v793[23]) = *(_OWORD *)&v9[v793[23]];
        goto LABEL_370;
      case 3u:
        long long v75 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v75;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(void *)(v8 + 56) = *((void *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        *(void *)(v8 + 80) = *((void *)v9 + 10);
        *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
        uint64_t v76 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        uint64_t v77 = v76[11];
        uint64_t v78 = (char *)(v8 + v77);
        uint64_t v79 = &v9[v77];
        uint64_t v80 = type metadata accessor for FHIRDateTime();
        uint64_t v759 = *(void **)(v80 - 8);
        v794 = (unsigned int (*)(char *, uint64_t, uint64_t))v759[6];
        v778 = v76;
        if (v794(v79, 1, v80))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v78, v79, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          *uint64_t v78 = *v79;
          *((void *)v78 + 1) = *((void *)v79 + 1);
          *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
          *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
          *(_OWORD *)(v78 + 40) = *(_OWORD *)(v79 + 40);
          *((void *)v78 + 7) = *((void *)v79 + 7);
          uint64_t v138 = *(int *)(v80 + 28);
          v746 = &v78[v138];
          uint64_t v139 = &v79[v138];
          uint64_t v140 = sub_23309B300();
          uint64_t v141 = *(void *)(v140 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v746, v139, *(void *)(*(void *)(v142 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v746, v139, v140);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(v746, 0, 1, v140);
          }
          *(_OWORD *)&v78[*(int *)(v80 + 32)] = *(_OWORD *)&v79[*(int *)(v80 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v759[7])(v78, 0, 1, v80);
          uint64_t v76 = v778;
        }
        uint64_t v256 = v76[12];
        uint64_t v257 = (char *)(v8 + v256);
        uint64_t v258 = &v9[v256];
        uint64_t v259 = type metadata accessor for Period();
        uint64_t v260 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v259 - 8);
        if (v260[6](v258, 1, v259))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v257, v258, *(void *)(*(void *)(v261 - 8) + 64));
        }
        else
        {
          v749 = (void (**)(char *, void, uint64_t, uint64_t))v260;
          if (v794(v258, 1, v80))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v257, v258, *(void *)(*(void *)(v262 - 8) + 64));
          }
          else
          {
            char *v257 = *v258;
            *((void *)v257 + 1) = *((void *)v258 + 1);
            *((_DWORD *)v257 + 4) = *((_DWORD *)v258 + 4);
            *(_OWORD *)(v257 + 24) = *(_OWORD *)(v258 + 24);
            *(_OWORD *)(v257 + 40) = *(_OWORD *)(v258 + 40);
            *((void *)v257 + 7) = *((void *)v258 + 7);
            uint64_t v339 = *(int *)(v80 + 28);
            long long v731 = &v257[v339];
            uint64_t v340 = &v258[v339];
            uint64_t v341 = sub_23309B300();
            long long v700 = *(void (***)(void *, const void *, uint64_t))(v341 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v700[6])(v340, 1, v341))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v731, v340, *(void *)(*(void *)(v342 - 8) + 64));
            }
            else
            {
              v700[4](v731, v340, v341);
              ((void (*)(char *, void, uint64_t, uint64_t))v700[7])(v731, 0, 1, v341);
            }
            *(_OWORD *)&v257[*(int *)(v80 + 32)] = *(_OWORD *)&v258[*(int *)(v80 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v759[7])(v257, 0, 1, v80);
            uint64_t v76 = v778;
          }
          uint64_t v515 = *(int *)(v259 + 20);
          uint64_t v516 = &v257[v515];
          uint64_t v517 = &v258[v515];
          if (v794(v517, 1, v80))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v516, v517, *(void *)(*(void *)(v518 - 8) + 64));
          }
          else
          {
            *uint64_t v516 = *v517;
            *((void *)v516 + 1) = *((void *)v517 + 1);
            *((_DWORD *)v516 + 4) = *((_DWORD *)v517 + 4);
            *(_OWORD *)(v516 + 24) = *(_OWORD *)(v517 + 24);
            *(_OWORD *)(v516 + 40) = *(_OWORD *)(v517 + 40);
            *((void *)v516 + 7) = *((void *)v517 + 7);
            uint64_t v519 = *(int *)(v80 + 28);
            v735 = &v516[v519];
            uint64_t v520 = &v517[v519];
            uint64_t v521 = sub_23309B300();
            uint64_t v704 = *(void (***)(void *, void *, void))(v521 - 8);
            __dstj = v520;
            uint64_t v522 = v520;
            uint64_t v523 = v521;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v704[6])(v522, 1, v521))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v735, __dstj, *(void *)(*(void *)(v524 - 8) + 64));
            }
            else
            {
              v704[4](v735, __dstj, v523);
              ((void (*)(char *, void, uint64_t, uint64_t))v704[7])(v735, 0, 1, v523);
            }
            *(_OWORD *)&v516[*(int *)(v80 + 32)] = *(_OWORD *)&v517[*(int *)(v80 + 32)];
            uint64_t v76 = v778;
            ((void (*)(char *, void, uint64_t, uint64_t))v759[7])(v516, 0, 1, v80);
          }
          v749[7](v257, 0, 1, v259);
        }
        uint64_t v568 = v76[13];
        uint64_t v569 = (char *)(v8 + v568);
        uint64_t v570 = &v9[v568];
        uint64_t v4 = v809;
        if (v794(&v9[v568], 1, v80))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v569, v570, *(void *)(*(void *)(v571 - 8) + 64));
        }
        else
        {
          *uint64_t v569 = *v570;
          *((void *)v569 + 1) = *((void *)v570 + 1);
          *((_DWORD *)v569 + 4) = *((_DWORD *)v570 + 4);
          *(_OWORD *)(v569 + 24) = *(_OWORD *)(v570 + 24);
          *(_OWORD *)(v569 + 40) = *(_OWORD *)(v570 + 40);
          *((void *)v569 + 7) = *((void *)v570 + 7);
          uint64_t v572 = *(int *)(v80 + 28);
          long long v573 = &v569[v572];
          long long v574 = &v570[v572];
          uint64_t v575 = sub_23309B300();
          uint64_t v576 = *(void *)(v575 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48))(v574, 1, v575))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v573, v574, *(void *)(*(void *)(v577 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v576 + 32))(v573, v574, v575);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v576 + 56))(v573, 0, 1, v575);
          }
          uint64_t v4 = v809;
          *(_OWORD *)&v569[*(int *)(v80 + 32)] = *(_OWORD *)&v570[*(int *)(v80 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v759[7])(v569, 0, 1, v80);
          uint64_t v76 = v778;
        }
        *(void *)(v8 + v76[14]) = *(void *)&v9[v76[14]];
        *(void *)(v8 + v76[15]) = *(void *)&v9[v76[15]];
        *(_OWORD *)(v8 + v76[16]) = *(_OWORD *)&v9[v76[16]];
        goto LABEL_319;
      case 4u:
        long long v82 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v82;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
        uint64_t v83 = *((void *)v9 + 12);
        *(void *)(v8 + 88) = *((void *)v9 + 11);
        *(void *)(v8 + 96) = v83;
        uint64_t v84 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        uint64_t v85 = v84[11];
        uint64_t v86 = (char *)(v8 + v85);
        uint64_t v87 = &v9[v85];
        uint64_t v88 = type metadata accessor for FHIRDateTime();
        uint64_t v779 = *(void **)(v88 - 8);
        uint64_t v744 = (unsigned int (*)(char *, uint64_t, uint64_t))v779[6];
        v795 = (int *)v88;
        if (v744(v87, 1, v88))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v86, v87, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          *uint64_t v86 = *v87;
          *((void *)v86 + 1) = *((void *)v87 + 1);
          *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
          *(_OWORD *)(v86 + 24) = *(_OWORD *)(v87 + 24);
          *(_OWORD *)(v86 + 40) = *(_OWORD *)(v87 + 40);
          *((void *)v86 + 7) = *((void *)v87 + 7);
          uint64_t v143 = *(int *)(v88 + 28);
          uint64_t v723 = &v86[v143];
          uint64_t v144 = &v87[v143];
          uint64_t v145 = sub_23309B300();
          uint64_t v146 = *(void *)(v145 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v723, v144, *(void *)(*(void *)(v147 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v723, v144, v145);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v723, 0, 1, v145);
          }
          *(_OWORD *)&v86[v795[8]] = *(_OWORD *)&v87[v795[8]];
          ((void (*)(char *, void, uint64_t))v779[7])(v86, 0, 1);
          a3 = v807;
        }
        *(_OWORD *)(v8 + v84[12]) = *(_OWORD *)&v9[v84[12]];
        *(void *)(v8 + v84[13]) = *(void *)&v9[v84[13]];
        *(void *)(v8 + v84[14]) = *(void *)&v9[v84[14]];
        uint64_t v263 = v84[15];
        uint64_t v264 = (void *)(v8 + v263);
        uint64_t v265 = &v9[v263];
        uint64_t v266 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        uint64_t v267 = *(void *)(v266 - 8);
        uint64_t v4 = v809;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v267 + 48))(v265, 1, v266))
        {
          sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
          memcpy(v264, v265, *(void *)(*(void *)(v268 - 8) + 64));
        }
        else
        {
          void *v264 = *(void *)v265;
          __dstf = (void *)v266;
          v728 = v264;
          uint64_t v269 = *(int *)(v266 + 20);
          uint64_t v270 = (char *)v264 + v269;
          uint64_t v271 = &v265[v269];
          uint64_t v272 = type metadata accessor for Period();
          uint64_t v273 = *(void *)(v272 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v273 + 48))(v271, 1, v272))
          {
            sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
            memcpy(v270, v271, *(void *)(*(void *)(v274 - 8) + 64));
            a3 = v807;
            uint64_t v4 = v809;
            uint64_t v275 = v728;
          }
          else
          {
            uint64_t v682 = v273;
            v689 = (int *)v272;
            uint64_t v701 = v270;
            uint64_t v343 = v795;
            if (v744(v271, 1, (uint64_t)v795))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              uint64_t v345 = v270;
              memcpy(v270, v271, *(void *)(*(void *)(v344 - 8) + 64));
            }
            else
            {
              *uint64_t v270 = *v271;
              *((void *)v270 + 1) = *((void *)v271 + 1);
              *((_DWORD *)v270 + 4) = *((_DWORD *)v271 + 4);
              *(_OWORD *)(v270 + 24) = *(_OWORD *)(v271 + 24);
              *(_OWORD *)(v270 + 40) = *(_OWORD *)(v271 + 40);
              *((void *)v270 + 7) = *((void *)v271 + 7);
              uint64_t v525 = v795[7];
              uint64_t v678 = &v270[v525];
              long long v526 = &v271[v525];
              uint64_t v527 = sub_23309B300();
              uint64_t v672 = *(void *)(v527 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v672 + 48))(v526, 1, v527))
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v678, v526, *(void *)(*(void *)(v528 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v672 + 32))(v678, v526, v527);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v672 + 56))(v678, 0, 1, v527);
              }
              uint64_t v343 = v795;
              uint64_t v345 = v270;
              *(_OWORD *)&v270[v795[8]] = *(_OWORD *)&v271[v795[8]];
              ((void (*)(char *, void, uint64_t, int *))v779[7])(v270, 0, 1, v795);
            }
            uint64_t v661 = v689[5];
            v662 = &v345[v661];
            uint64_t v663 = &v271[v661];
            if (v744(v663, 1, (uint64_t)v343))
            {
              sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
              memcpy(v662, v663, *(void *)(*(void *)(v664 - 8) + 64));
              uint64_t v275 = v728;
            }
            else
            {
              char *v662 = *v663;
              *((void *)v662 + 1) = *((void *)v663 + 1);
              *((_DWORD *)v662 + 4) = *((_DWORD *)v663 + 4);
              *(_OWORD *)(v662 + 24) = *(_OWORD *)(v663 + 24);
              *(_OWORD *)(v662 + 40) = *(_OWORD *)(v663 + 40);
              *((void *)v662 + 7) = *((void *)v663 + 7);
              uint64_t v665 = v343[7];
              v772 = &v662[v665];
              uint64_t v666 = &v663[v665];
              uint64_t v667 = sub_23309B300();
              uint64_t v668 = *(void *)(v667 - 8);
              v756 = v666;
              int v669 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v668 + 48))(v666, 1, v667);
              uint64_t v273 = v682;
              if (v669)
              {
                sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
                memcpy(v772, v756, *(void *)(*(void *)(v670 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v668 + 32))(v772, v756, v667);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v668 + 56))(v772, 0, 1, v667);
              }
              uint64_t v275 = v728;
              *(_OWORD *)&v662[v795[8]] = *(_OWORD *)&v663[v795[8]];
              ((void (*)(char *, void, uint64_t))v779[7])(v662, 0, 1);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v273 + 56))(v701, 0, 1, v689);
            a3 = v807;
            uint64_t v4 = v809;
          }
          (*(void (**)(void *, void, uint64_t, void *))(v267 + 56))(v275, 0, 1, __dstf);
        }
        *(_OWORD *)(v8 + v84[16]) = *(_OWORD *)&v9[v84[16]];
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        long long v90 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v90;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(void *)(v8 + 56) = *((void *)v9 + 7);
        *(void *)(v8 + 61) = *(void *)(v9 + 61);
        *(void *)(v8 + 72) = *((void *)v9 + 9);
        uint64_t v91 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        uint64_t v92 = v91[10];
        uint64_t v93 = (char *)(v8 + v92);
        uint64_t v94 = &v9[v92];
        uint64_t v95 = type metadata accessor for FHIRDateTime();
        uint64_t v96 = *(void **)(v95 - 8);
        uint64_t v97 = (unsigned int (*)(void, void, void))v96[6];
        if (v97(v94, 1, v95))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v93, v94, *(void *)(*(void *)(v98 - 8) + 64));
        }
        else
        {
          v762 = v91;
          uint64_t v782 = v97;
          uint64_t v797 = v96;
          *uint64_t v93 = *v94;
          *((void *)v93 + 1) = *((void *)v94 + 1);
          *((_DWORD *)v93 + 4) = *((_DWORD *)v94 + 4);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)(v94 + 24);
          *(_OWORD *)(v93 + 40) = *(_OWORD *)(v94 + 40);
          *((void *)v93 + 7) = *((void *)v94 + 7);
          uint64_t v148 = *(int *)(v95 + 28);
          uint64_t v747 = &v93[v148];
          uint64_t v149 = &v94[v148];
          uint64_t v150 = sub_23309B300();
          uint64_t v151 = *(void *)(v150 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v747, v149, *(void *)(*(void *)(v152 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v747, v149, v150);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v747, 0, 1, v150);
          }
          *(_OWORD *)&v93[*(int *)(v95 + 32)] = *(_OWORD *)&v94[*(int *)(v95 + 32)];
          uint64_t v96 = v797;
          ((void (*)(char *, void, uint64_t, uint64_t))v797[7])(v93, 0, 1, v95);
          uint64_t v91 = v762;
          uint64_t v97 = (unsigned int (*)(void, void, void))v782;
        }
        *(void *)(v8 + v91[11]) = *(void *)&v9[v91[11]];
        uint64_t v276 = v91[12];
        uint64_t v277 = (char *)(v8 + v276);
        uint64_t v278 = &v9[v276];
        if (v97(&v9[v276], 1, v95))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v277, v278, *(void *)(*(void *)(v279 - 8) + 64));
        }
        else
        {
          *uint64_t v277 = *v278;
          *((void *)v277 + 1) = *((void *)v278 + 1);
          *((_DWORD *)v277 + 4) = *((_DWORD *)v278 + 4);
          *(_OWORD *)(v277 + 24) = *(_OWORD *)(v278 + 24);
          *(_OWORD *)(v277 + 40) = *(_OWORD *)(v278 + 40);
          *((void *)v277 + 7) = *((void *)v278 + 7);
          uint64_t v280 = *(int *)(v95 + 28);
          long long v785 = &v277[v280];
          v798 = (void (**)(char *, void, uint64_t, uint64_t))v96;
          uint64_t v281 = &v278[v280];
          uint64_t v282 = sub_23309B300();
          uint64_t v283 = *(void *)(v282 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v281, 1, v282))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v785, v281, *(void *)(*(void *)(v284 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v785, v281, v282);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v283 + 56))(v785, 0, 1, v282);
          }
          *(_OWORD *)&v277[*(int *)(v95 + 32)] = *(_OWORD *)&v278[*(int *)(v95 + 32)];
          v798[7](v277, 0, 1, v95);
        }
        uint64_t v346 = v91[13];
        uint64_t v347 = v8 + v346;
        uint64_t v348 = &v9[v346];
        *(_OWORD *)uint64_t v347 = *(_OWORD *)v348;
        *(void *)(v347 + 16) = *((void *)v348 + 2);
        uint64_t v349 = v91[14];
        uint64_t v350 = (_OWORD *)(v8 + v349);
        uint64_t v351 = &v9[v349];
        uint64_t v352 = type metadata accessor for Reference();
        uint64_t v353 = *(void *)(v352 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v353 + 48))(v351, 1, v352))
        {
          sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
          memcpy(v350, v351, *(void *)(*(void *)(v354 - 8) + 64));
        }
        else
        {
          long long v355 = *((_OWORD *)v351 + 1);
          _OWORD *v350 = *(_OWORD *)v351;
          v350[1] = v355;
          uint64_t v356 = *(int *)(v352 + 24);
          v799 = v350;
          uint64_t v357 = (_OWORD *)((char *)v350 + v356);
          uint64_t v358 = &v351[v356];
          uint64_t v359 = type metadata accessor for Identifier();
          uint64_t v360 = *(void (***)(void))(v359 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v360[6])(v358, 1, v359))
          {
            sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
            memcpy(v357, v358, *(void *)(*(void *)(v361 - 8) + 64));
            uint64_t v362 = v799;
          }
          else
          {
            long long v426 = *((_OWORD *)v358 + 1);
            *uint64_t v357 = *(_OWORD *)v358;
            v357[1] = v426;
            *((void *)v357 + 4) = *((void *)v358 + 4);
            long long v733 = (int *)v359;
            uint64_t v750 = (char *)v357;
            uint64_t v427 = *(int *)(v359 + 24);
            uint64_t v766 = (char *)v357 + v427;
            uint64_t v788 = v360;
            uint64_t v428 = &v358[v427];
            uint64_t v429 = sub_23309AF80();
            uint64_t v430 = *(void *)(v429 - 8);
            uint64_t v431 = v429;
            if ((*(unsigned int (**)(char *, uint64_t))(v430 + 48))(v428, 1))
            {
              sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
              memcpy(v766, v428, *(void *)(*(void *)(v432 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v430 + 32))(v766, v428, v431);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v430 + 56))(v766, 0, 1, v431);
            }
            uint64_t v362 = v799;
            *(_OWORD *)&v750[v733[7]] = *(_OWORD *)&v358[v733[7]];
            v788[7]();
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v353 + 56))(v362, 0, 1, v352);
        }
        uint64_t v4 = v809;
        *(unsigned char *)(v8 + v91[15]) = v9[v91[15]];
        *(_OWORD *)(v8 + v91[16]) = *(_OWORD *)&v9[v91[16]];
        *(void *)(v8 + v91[17]) = *(void *)&v9[v91[17]];
        *(unsigned char *)(v8 + v91[18]) = v9[v91[18]];
        uint64_t v529 = v91[19];
        uint64_t v530 = v8 + v529;
        long long v531 = &v9[v529];
        *(void *)(v530 + 48) = *((void *)v531 + 6);
        long long v532 = *((_OWORD *)v531 + 2);
        long long v533 = *(_OWORD *)v531;
        *(_OWORD *)(v530 + 16) = *((_OWORD *)v531 + 1);
        *(_OWORD *)(v530 + 32) = v532;
        *(_OWORD *)uint64_t v530 = v533;
        *(_OWORD *)(v8 + v91[20]) = *(_OWORD *)&v9[v91[20]];
LABEL_319:
        swift_storeEnumTagMultiPayload();
        a3 = v807;
        break;
      case 6u:
        long long v99 = *((_OWORD *)v9 + 1);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v99;
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(void *)(v8 + 56) = *((void *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        *(void *)(v8 + 80) = *((void *)v9 + 10);
        uint64_t v100 = (int *)type metadata accessor for ModelsR4.Observation(0);
        uint64_t v101 = v100[10];
        uint64_t v102 = (char *)(v8 + v101);
        long long v103 = &v9[v101];
        uint64_t v104 = type metadata accessor for FHIRDateTime();
        long long v760 = *(void **)(v104 - 8);
        v796 = (unsigned int (*)(char *, uint64_t, uint64_t))v760[6];
        uint64_t v780 = v100;
        if (v796(v103, 1, v104))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v102, v103, *(void *)(*(void *)(v105 - 8) + 64));
        }
        else
        {
          *uint64_t v102 = *v103;
          *((void *)v102 + 1) = *((void *)v103 + 1);
          *((_DWORD *)v102 + 4) = *((_DWORD *)v103 + 4);
          *(_OWORD *)(v102 + 24) = *(_OWORD *)(v103 + 24);
          *(_OWORD *)(v102 + 40) = *(_OWORD *)(v103 + 40);
          *((void *)v102 + 7) = *((void *)v103 + 7);
          uint64_t v153 = *(int *)(v104 + 28);
          uint64_t v724 = &v102[v153];
          uint64_t v154 = &v103[v153];
          uint64_t v155 = sub_23309B300();
          uint64_t v156 = *(void *)(v155 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v724, v154, *(void *)(*(void *)(v157 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v724, v154, v155);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v724, 0, 1, v155);
          }
          *(_OWORD *)&v102[*(int *)(v104 + 32)] = *(_OWORD *)&v103[*(int *)(v104 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v760[7])(v102, 0, 1, v104);
          uint64_t v100 = v780;
        }
        uint64_t v285 = v100[11];
        uint64_t v286 = (char *)(v8 + v285);
        uint64_t v287 = &v9[v285];
        if (v796(&v9[v285], 1, v104))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v286, v287, *(void *)(*(void *)(v288 - 8) + 64));
        }
        else
        {
          *uint64_t v286 = *v287;
          *((void *)v286 + 1) = *((void *)v287 + 1);
          *((_DWORD *)v286 + 4) = *((_DWORD *)v287 + 4);
          *(_OWORD *)(v286 + 24) = *(_OWORD *)(v287 + 24);
          *(_OWORD *)(v286 + 40) = *(_OWORD *)(v287 + 40);
          *((void *)v286 + 7) = *((void *)v287 + 7);
          uint64_t v289 = *(int *)(v104 + 28);
          uint64_t v729 = &v286[v289];
          uint64_t v290 = &v287[v289];
          uint64_t v291 = sub_23309B300();
          uint64_t v292 = *(void *)(v291 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v292 + 48))(v290, 1, v291))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v729, v290, *(void *)(*(void *)(v293 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v292 + 32))(v729, v290, v291);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v292 + 56))(v729, 0, 1, v291);
          }
          *(_OWORD *)&v286[*(int *)(v104 + 32)] = *(_OWORD *)&v287[*(int *)(v104 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v760[7])(v286, 0, 1, v104);
          uint64_t v100 = v780;
        }
        uint64_t v363 = v100[12];
        uint64_t v364 = (char *)(v8 + v363);
        long long v365 = &v9[v363];
        uint64_t v366 = type metadata accessor for Period();
        uint64_t v367 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v366 - 8);
        if (v367[6](v365, 1, v366))
        {
          sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
          memcpy(v364, v365, *(void *)(*(void *)(v368 - 8) + 64));
        }
        else
        {
          __dstg = (void (**)(void *, void, uint64_t, uint64_t))v367;
          long long v732 = v364;
          if (v796(v365, 1, v104))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v364, v365, *(void *)(*(void *)(v369 - 8) + 64));
          }
          else
          {
            *uint64_t v364 = *v365;
            *((void *)v364 + 1) = *((void *)v365 + 1);
            *((_DWORD *)v364 + 4) = *((_DWORD *)v365 + 4);
            *(_OWORD *)(v364 + 24) = *(_OWORD *)(v365 + 24);
            *(_OWORD *)(v364 + 40) = *(_OWORD *)(v365 + 40);
            *((void *)v364 + 7) = *((void *)v365 + 7);
            uint64_t v433 = *(int *)(v104 + 28);
            v702 = &v364[v433];
            uint64_t v434 = &v365[v433];
            uint64_t v435 = sub_23309B300();
            uint64_t v436 = *(void *)(v435 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v436 + 48))(v434, 1, v435))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v702, v434, *(void *)(*(void *)(v437 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v436 + 32))(v702, v434, v435);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v436 + 56))(v702, 0, 1, v435);
            }
            uint64_t v364 = v732;
            *(_OWORD *)&v732[*(int *)(v104 + 32)] = *(_OWORD *)&v365[*(int *)(v104 + 32)];
            ((void (*)(char *, void, uint64_t, uint64_t))v760[7])(v732, 0, 1, v104);
            uint64_t v100 = v780;
          }
          uint64_t v534 = *(int *)(v366 + 20);
          uint64_t v535 = &v364[v534];
          long long v536 = &v365[v534];
          if (v796(v536, 1, v104))
          {
            sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
            memcpy(v535, v536, *(void *)(*(void *)(v537 - 8) + 64));
          }
          else
          {
            *uint64_t v535 = *v536;
            *((void *)v535 + 1) = *((void *)v536 + 1);
            *((_DWORD *)v535 + 4) = *((_DWORD *)v536 + 4);
            *(_OWORD *)(v535 + 24) = *(_OWORD *)(v536 + 24);
            *(_OWORD *)(v535 + 40) = *(_OWORD *)(v536 + 40);
            *((void *)v535 + 7) = *((void *)v536 + 7);
            uint64_t v538 = *(int *)(v104 + 28);
            uint64_t v705 = &v535[v538];
            uint64_t v539 = &v536[v538];
            uint64_t v540 = sub_23309B300();
            uint64_t v541 = *(void *)(v540 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v541 + 48))(v539, 1, v540))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v705, v539, *(void *)(*(void *)(v542 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v541 + 32))(v705, v539, v540);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v541 + 56))(v705, 0, 1, v540);
            }
            *(_OWORD *)&v535[*(int *)(v104 + 32)] = *(_OWORD *)&v536[*(int *)(v104 + 32)];
            uint64_t v100 = v780;
            ((void (*)(char *, void, uint64_t, uint64_t))v760[7])(v535, 0, 1, v104);
          }
          __dstg[7](v732, 0, 1, v366);
        }
        uint64_t v578 = v100[13];
        uint64_t v579 = (char *)(v8 + v578);
        uint64_t v580 = &v9[v578];
        if (v796(&v9[v578], 1, v104))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v579, v580, *(void *)(*(void *)(v581 - 8) + 64));
        }
        else
        {
          *uint64_t v579 = *v580;
          *((void *)v579 + 1) = *((void *)v580 + 1);
          *((_DWORD *)v579 + 4) = *((_DWORD *)v580 + 4);
          *(_OWORD *)(v579 + 24) = *(_OWORD *)(v580 + 24);
          *(_OWORD *)(v579 + 40) = *(_OWORD *)(v580 + 40);
          *((void *)v579 + 7) = *((void *)v580 + 7);
          uint64_t v582 = *(int *)(v104 + 28);
          uint64_t v583 = &v579[v582];
          long long v584 = &v580[v582];
          uint64_t v585 = sub_23309B300();
          uint64_t v586 = *(void *)(v585 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v586 + 48))(v584, 1, v585))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v583, v584, *(void *)(*(void *)(v587 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v586 + 32))(v583, v584, v585);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v586 + 56))(v583, 0, 1, v585);
          }
          *(_OWORD *)&v579[*(int *)(v104 + 32)] = *(_OWORD *)&v580[*(int *)(v104 + 32)];
          ((void (*)(char *, void, uint64_t, uint64_t))v760[7])(v579, 0, 1, v104);
          uint64_t v100 = v780;
        }
        *(void *)(v8 + v100[14]) = *(void *)&v9[v100[14]];
        *(void *)(v8 + v100[15]) = *(void *)&v9[v100[15]];
        *(_OWORD *)(v8 + v100[16]) = *(_OWORD *)&v9[v100[16]];
        uint64_t v588 = v100[17];
        uint64_t v589 = v8 + v588;
        uint64_t v590 = &v9[v588];
        *(void *)(v589 + 16) = *((void *)v590 + 2);
        *(_OWORD *)uint64_t v589 = *(_OWORD *)v590;
        uint64_t v591 = v100[18];
        uint64_t v592 = (_OWORD *)(v8 + v591);
        uint64_t v593 = &v9[v591];
        uint64_t v594 = type metadata accessor for Quantity();
        uint64_t v595 = *(void *)(v594 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v595 + 48))(v593, 1, v594))
        {
          sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
          memcpy(v592, v593, *(void *)(*(void *)(v596 - 8) + 64));
        }
        else
        {
          _OWORD *v592 = *(_OWORD *)v593;
          *(void *)((char *)v592 + 13) = *(void *)(v593 + 13);
          *(_OWORD *)((char *)v592 + 24) = *(_OWORD *)(v593 + 24);
          *(_OWORD *)((char *)v592 + 40) = *(_OWORD *)(v593 + 40);
          uint64_t v597 = *(int *)(v594 + 28);
          long long v800 = (char *)v592 + v597;
          uint64_t v598 = &v593[v597];
          uint64_t v599 = sub_23309AF80();
          uint64_t v600 = *(void *)(v599 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v600 + 48))(v598, 1, v599))
          {
            sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
            memcpy(v800, v598, *(void *)(*(void *)(v601 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v600 + 32))(v800, v598, v599);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v600 + 56))(v800, 0, 1, v599);
          }
          *(_OWORD *)((char *)v592 + *(int *)(v594 + 32)) = *(_OWORD *)&v593[*(int *)(v594 + 32)];
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v595 + 56))(v592, 0, 1, v594);
        }
        *(void *)(v8 + v780[19]) = *(void *)&v9[v780[19]];
        *(_OWORD *)(v8 + v780[20]) = *(_OWORD *)&v9[v780[20]];
LABEL_370:
        swift_storeEnumTagMultiPayload();
        a3 = v807;
        uint64_t v4 = v809;
        break;
      default:
        size_t v26 = v11[8];
        goto LABEL_9;
    }
  }
LABEL_293:
  uint64_t v543 = *(int *)(a3 + 24);
  uint64_t v544 = *(void *)((char *)v5 + v543);
  unint64_t v545 = *(void *)((char *)v5 + v543 + 8);
  *(_OWORD *)((char *)v5 + v543) = *(_OWORD *)((char *)v4 + v543);
  sub_232E9AA4C(v544, v545);
  return v5;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle.BundleEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232EFAFA0);
}

uint64_t sub_232EFAFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Bundle.BundleEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232EFB0A0);
}

uint64_t sub_232EFB0A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_232EA3854(0, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_232EFB178()
{
  sub_232EA3854(319, &qword_2687565A8, type metadata accessor for ModelsR4.ResourceProxy, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsR4.Condition(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1) {
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(void *)(a1 + 56) = a2[7];
    }
    else
    {
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v12 = a2[9];
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(void *)(a1 + 80) = a2[10];
    }
    else
    {
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v12;
      *(void *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + 88) = a2[11];
    uint64_t v13 = a2[13];
    swift_bridgeObjectRetain();
    if (v13 == 1)
    {
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(void *)(a1 + 112) = a2[14];
    }
    else
    {
      *(void *)(a1 + 96) = a2[12];
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 112) = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = a2[16];
    if (v14 == 1)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      *(void *)(a1 + 136) = a2[17];
    }
    else
    {
      *(void *)(a1 + 120) = a2[15];
      *(void *)(a1 + 128) = v14;
      *(void *)(a1 + 136) = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + 144) = a2[18];
    uint64_t v15 = v6[13];
    uint64_t v16 = (unsigned char *)(a1 + v15);
    long long v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for FHIRDateTime();
    uint64_t v218 = *(void *)(v18 - 8);
    uint64_t v19 = *(unsigned int (**)(void, void, void))(v218 + 48);
    swift_bridgeObjectRetain();
    uint64_t v215 = v19;
    if (v19(v17, 1, v18))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      *((void *)v16 + 1) = *((void *)v17 + 1);
      *((_DWORD *)v16 + 4) = *((_DWORD *)v17 + 4);
      uint64_t v21 = *((void *)v17 + 7);
      if (v21 == 1)
      {
        long long v22 = *(_OWORD *)(v17 + 40);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
        *(_OWORD *)(v16 + 40) = v22;
        *((void *)v16 + 7) = *((void *)v17 + 7);
      }
      else
      {
        v16[24] = v17[24];
        *(_WORD *)(v16 + 25) = *(_WORD *)(v17 + 25);
        *(_OWORD *)(v16 + 28) = *(_OWORD *)(v17 + 28);
        *((_DWORD *)v16 + 11) = *((_DWORD *)v17 + 11);
        *((void *)v16 + 6) = *((void *)v17 + 6);
        *((void *)v16 + 7) = v21;
        swift_bridgeObjectRetain();
      }
      uint64_t v23 = *(int *)(v18 + 28);
      uint64_t v24 = &v16[v23];
      uint64_t v25 = &v17[v23];
      uint64_t v26 = sub_23309B300();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      uint64_t v29 = *(int *)(v18 + 32);
      uint64_t v30 = &v16[v29];
      uint64_t v31 = &v17[v29];
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
      swift_bridgeObjectRetain();
      v33(v16, 0, 1, v18);
      uint64_t v19 = v215;
    }
    uint64_t v34 = v6[14];
    uint64_t v35 = (unsigned char *)(a1 + v34);
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = type metadata accessor for Period();
    uint64_t v209 = *(void *)(v37 - 8);
    uint64_t v38 = *(unsigned int (**)(void, void, void))(v209 + 48);
    uint64_t v217 = v6;
    if (v38(v36, 1, v37))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v207 = v38;
      if (v19(v36, 1, v18))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        *uint64_t v35 = *v36;
        *((void *)v35 + 1) = *((void *)v36 + 1);
        *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
        uint64_t v41 = *((void *)v36 + 7);
        if (v41 == 1)
        {
          long long v42 = *(_OWORD *)(v36 + 40);
          *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
          *(_OWORD *)(v35 + 40) = v42;
          *((void *)v35 + 7) = *((void *)v36 + 7);
        }
        else
        {
          v35[24] = v36[24];
          *(_WORD *)(v35 + 25) = *(_WORD *)(v36 + 25);
          *(_OWORD *)(v35 + 28) = *(_OWORD *)(v36 + 28);
          *((_DWORD *)v35 + 11) = *((_DWORD *)v36 + 11);
          *((void *)v35 + 6) = *((void *)v36 + 6);
          *((void *)v35 + 7) = v41;
          swift_bridgeObjectRetain();
        }
        uint64_t v43 = *(int *)(v18 + 28);
        long long v44 = &v35[v43];
        uint64_t v45 = &v36[v43];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        uint64_t v6 = v217;
        uint64_t v49 = *(int *)(v18 + 32);
        uint64_t v50 = &v35[v49];
        long long v51 = &v36[v49];
        uint64_t v52 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v52;
        long long v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
        swift_bridgeObjectRetain();
        v53(v35, 0, 1, v18);
        uint64_t v19 = v215;
      }
      uint64_t v54 = *(int *)(v37 + 20);
      uint64_t v55 = &v35[v54];
      uint64_t v56 = &v36[v54];
      if (v19(v56, 1, v18))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        *uint64_t v55 = *v56;
        *((void *)v55 + 1) = *((void *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        uint64_t v58 = *((void *)v56 + 7);
        if (v58 == 1)
        {
          long long v59 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v59;
          *((void *)v55 + 7) = *((void *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((void *)v55 + 6) = *((void *)v56 + 6);
          *((void *)v55 + 7) = v58;
          swift_bridgeObjectRetain();
        }
        uint64_t v60 = *(int *)(v18 + 28);
        __dst = &v55[v60];
        uint64_t v61 = &v56[v60];
        uint64_t v62 = sub_23309B300();
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v61, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(__dst, v61, v62);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
        }
        uint64_t v6 = v217;
        uint64_t v65 = *(int *)(v18 + 32);
        uint64_t v66 = &v55[v65];
        uint64_t v67 = &v56[v65];
        uint64_t v68 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v68;
        uint64_t v69 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
        swift_bridgeObjectRetain();
        v69(v55, 0, 1, v18);
        uint64_t v19 = v215;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v209 + 56))(v35, 0, 1, v37);
      uint64_t v38 = v207;
    }
    uint64_t v70 = v6[15];
    uint64_t v71 = v6[16];
    uint64_t v72 = (void *)(a1 + v70);
    uint64_t v73 = (uint64_t *)((char *)a2 + v70);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    long long v75 = (unsigned char *)(a1 + v71);
    uint64_t v76 = (char *)a2 + v71;
    swift_bridgeObjectRetain();
    if (v19(v76, 1, v18))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      *long long v75 = *v76;
      *((void *)v75 + 1) = *((void *)v76 + 1);
      *((_DWORD *)v75 + 4) = *((_DWORD *)v76 + 4);
      uint64_t v78 = *((void *)v76 + 7);
      uint64_t v208 = v38;
      if (v78 == 1)
      {
        long long v79 = *(_OWORD *)(v76 + 40);
        *(_OWORD *)(v75 + 24) = *(_OWORD *)(v76 + 24);
        *(_OWORD *)(v75 + 40) = v79;
        *((void *)v75 + 7) = *((void *)v76 + 7);
      }
      else
      {
        v75[24] = v76[24];
        *(_WORD *)(v75 + 25) = *(_WORD *)(v76 + 25);
        *(_OWORD *)(v75 + 28) = *(_OWORD *)(v76 + 28);
        *((_DWORD *)v75 + 11) = *((_DWORD *)v76 + 11);
        *((void *)v75 + 6) = *((void *)v76 + 6);
        *((void *)v75 + 7) = v78;
        swift_bridgeObjectRetain();
      }
      uint64_t v80 = *(int *)(v18 + 28);
      uint64_t v81 = &v75[v80];
      long long v82 = &v76[v80];
      uint64_t v83 = sub_23309B300();
      uint64_t v84 = *(void *)(v83 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v84 + 16))(v81, v82, v83);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      uint64_t v6 = v217;
      uint64_t v86 = *(int *)(v18 + 32);
      uint64_t v87 = &v75[v86];
      uint64_t v88 = &v76[v86];
      uint64_t v89 = v88[1];
      *uint64_t v87 = *v88;
      v87[1] = v89;
      long long v90 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
      swift_bridgeObjectRetain();
      v90(v75, 0, 1, v18);
      uint64_t v19 = v215;
      uint64_t v38 = v208;
    }
    uint64_t v91 = v6[17];
    uint64_t v92 = (unsigned char *)(a1 + v91);
    uint64_t v93 = (char *)a2 + v91;
    if (v38((char *)a2 + v91, 1, v37))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      if (v19(v93, 1, v18))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v92, v93, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        *uint64_t v92 = *v93;
        *((void *)v92 + 1) = *((void *)v93 + 1);
        *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
        uint64_t v96 = *((void *)v93 + 7);
        if (v96 == 1)
        {
          long long v97 = *(_OWORD *)(v93 + 40);
          *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
          *(_OWORD *)(v92 + 40) = v97;
          *((void *)v92 + 7) = *((void *)v93 + 7);
        }
        else
        {
          v92[24] = v93[24];
          *(_WORD *)(v92 + 25) = *(_WORD *)(v93 + 25);
          *(_OWORD *)(v92 + 28) = *(_OWORD *)(v93 + 28);
          *((_DWORD *)v92 + 11) = *((_DWORD *)v93 + 11);
          *((void *)v92 + 6) = *((void *)v93 + 6);
          *((void *)v92 + 7) = v96;
          swift_bridgeObjectRetain();
        }
        uint64_t v98 = *(int *)(v18 + 28);
        long long v99 = &v92[v98];
        uint64_t v100 = &v93[v98];
        uint64_t v101 = sub_23309B300();
        uint64_t v102 = *(void *)(v101 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v99, v100, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v102 + 16))(v99, v100, v101);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
        }
        uint64_t v6 = v217;
        uint64_t v104 = *(int *)(v18 + 32);
        uint64_t v105 = &v92[v104];
        uint64_t v106 = &v93[v104];
        uint64_t v107 = v106[1];
        void *v105 = *v106;
        v105[1] = v107;
        uint64_t v108 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
        swift_bridgeObjectRetain();
        v108(v92, 0, 1, v18);
        uint64_t v19 = v215;
      }
      uint64_t v109 = *(int *)(v37 + 20);
      uint64_t v110 = &v92[v109];
      uint64_t v111 = &v93[v109];
      if (v19(v111, 1, v18))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
      }
      else
      {
        *uint64_t v110 = *v111;
        *((void *)v110 + 1) = *((void *)v111 + 1);
        *((_DWORD *)v110 + 4) = *((_DWORD *)v111 + 4);
        uint64_t v113 = *((void *)v111 + 7);
        if (v113 == 1)
        {
          long long v114 = *(_OWORD *)(v111 + 40);
          *(_OWORD *)(v110 + 24) = *(_OWORD *)(v111 + 24);
          *(_OWORD *)(v110 + 40) = v114;
          *((void *)v110 + 7) = *((void *)v111 + 7);
        }
        else
        {
          v110[24] = v111[24];
          *(_WORD *)(v110 + 25) = *(_WORD *)(v111 + 25);
          *(_OWORD *)(v110 + 28) = *(_OWORD *)(v111 + 28);
          *((_DWORD *)v110 + 11) = *((_DWORD *)v111 + 11);
          *((void *)v110 + 6) = *((void *)v111 + 6);
          *((void *)v110 + 7) = v113;
          swift_bridgeObjectRetain();
        }
        uint64_t v115 = *(int *)(v18 + 28);
        uint64_t v211 = &v110[v115];
        uint64_t v116 = &v111[v115];
        uint64_t v117 = sub_23309B300();
        uint64_t v118 = *(void *)(v117 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v211, v116, *(void *)(*(void *)(v119 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v118 + 16))(v211, v116, v117);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v118 + 56))(v211, 0, 1, v117);
        }
        uint64_t v6 = v217;
        uint64_t v120 = *(int *)(v18 + 32);
        uint64_t v121 = &v110[v120];
        uint64_t v122 = &v111[v120];
        uint64_t v123 = v122[1];
        *uint64_t v121 = *v122;
        v121[1] = v123;
        uint64_t v124 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
        swift_bridgeObjectRetain();
        v124(v110, 0, 1, v18);
        uint64_t v19 = v215;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v209 + 56))(v92, 0, 1, v37);
    }
    uint64_t v125 = v6[18];
    uint64_t v126 = v6[19];
    uint64_t v127 = (void *)(a1 + v125);
    uint64_t v128 = (uint64_t *)((char *)a2 + v125);
    uint64_t v129 = v128[1];
    *uint64_t v127 = *v128;
    v127[1] = v129;
    uint64_t v130 = (unsigned char *)(a1 + v126);
    uint64_t v131 = (char *)a2 + v126;
    swift_bridgeObjectRetain();
    if (v19(v131, 1, v18))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v130, v131, *(void *)(*(void *)(v132 - 8) + 64));
    }
    else
    {
      *uint64_t v130 = *v131;
      *((void *)v130 + 1) = *((void *)v131 + 1);
      *((_DWORD *)v130 + 4) = *((_DWORD *)v131 + 4);
      uint64_t v133 = *((void *)v131 + 7);
      if (v133 == 1)
      {
        long long v134 = *(_OWORD *)(v131 + 40);
        *(_OWORD *)(v130 + 24) = *(_OWORD *)(v131 + 24);
        *(_OWORD *)(v130 + 40) = v134;
        *((void *)v130 + 7) = *((void *)v131 + 7);
      }
      else
      {
        v130[24] = v131[24];
        *(_WORD *)(v130 + 25) = *(_WORD *)(v131 + 25);
        *(_OWORD *)(v130 + 28) = *(_OWORD *)(v131 + 28);
        *((_DWORD *)v130 + 11) = *((_DWORD *)v131 + 11);
        *((void *)v130 + 6) = *((void *)v131 + 6);
        *((void *)v130 + 7) = v133;
        swift_bridgeObjectRetain();
      }
      uint64_t v135 = *(int *)(v18 + 28);
      uint64_t v136 = &v130[v135];
      uint64_t v137 = &v131[v135];
      uint64_t v138 = sub_23309B300();
      uint64_t v139 = *(void *)(v138 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v136, v137, *(void *)(*(void *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v139 + 16))(v136, v137, v138);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
      }
      uint64_t v141 = *(int *)(v18 + 32);
      uint64_t v142 = &v130[v141];
      uint64_t v143 = &v131[v141];
      uint64_t v144 = v143[1];
      *uint64_t v142 = *v143;
      v142[1] = v144;
      uint64_t v145 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v218 + 56);
      swift_bridgeObjectRetain();
      v145(v130, 0, 1, v18);
    }
    uint64_t v146 = v6[20];
    uint64_t v147 = (void *)(a1 + v146);
    uint64_t v148 = (uint64_t *)((char *)a2 + v146);
    uint64_t v149 = type metadata accessor for Reference();
    uint64_t v150 = *(void *)(v149 - 8);
    uint64_t v151 = *(unsigned int (**)(void, void, void))(v150 + 48);
    if (v151(v148, 1, v149))
    {
      sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v147, v148, *(void *)(*(void *)(v152 - 8) + 64));
    }
    else
    {
      uint64_t v213 = (void *)v149;
      long long v210 = v151;
      uint64_t v153 = v148[1];
      *uint64_t v147 = *v148;
      v147[1] = v153;
      uint64_t v154 = v148[3];
      v147[2] = v148[2];
      v147[3] = v154;
      uint64_t v155 = *(int *)(v149 + 24);
      uint64_t v212 = (void *)((char *)v147 + v155);
      uint64_t v156 = (void *)((char *)v148 + v155);
      uint64_t v157 = type metadata accessor for Identifier();
      uint64_t v158 = *(void *)(v157 - 8);
      uint64_t v159 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v158 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v159(v156, 1, v157))
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v212, v156, *(void *)(*(void *)(v160 - 8) + 64));
        uint64_t v6 = v217;
        uint64_t v151 = v210;
      }
      else
      {
        uint64_t v161 = v156[1];
        *uint64_t v212 = *v156;
        v212[1] = v161;
        uint64_t v162 = v156[3];
        swift_bridgeObjectRetain();
        if (v162 == 1)
        {
          *((_OWORD *)v212 + 1) = *((_OWORD *)v156 + 1);
          v212[4] = v156[4];
        }
        else
        {
          v212[2] = v156[2];
          v212[3] = v162;
          v212[4] = v156[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v163 = *(int *)(v157 + 24);
        __dsta = (char *)v212 + v163;
        uint64_t v164 = (char *)v156 + v163;
        uint64_t v165 = sub_23309AF80();
        uint64_t v166 = *(void *)(v165 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(__dsta, v164, *(void *)(*(void *)(v167 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v166 + 16))(__dsta, v164, v165);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(__dsta, 0, 1, v165);
        }
        uint64_t v6 = v217;
        uint64_t v151 = v210;
        uint64_t v168 = *(int *)(v157 + 28);
        uint64_t v169 = (void *)((char *)v212 + v168);
        uint64_t v170 = (void *)((char *)v156 + v168);
        uint64_t v171 = v170[1];
        *uint64_t v169 = *v170;
        v169[1] = v171;
        uint64_t v172 = *(void (**)(void *, void, uint64_t, uint64_t))(v158 + 56);
        swift_bridgeObjectRetain();
        v172(v212, 0, 1, v157);
      }
      uint64_t v149 = (uint64_t)v213;
      (*(void (**)(void *, void, uint64_t, void *))(v150 + 56))(v147, 0, 1, v213);
    }
    uint64_t v173 = v6[21];
    uint64_t v174 = (void *)(a1 + v173);
    uint64_t v175 = (uint64_t *)((char *)a2 + v173);
    if (v151((char *)a2 + v173, 1, v149))
    {
      sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v174, v175, *(void *)(*(void *)(v176 - 8) + 64));
    }
    else
    {
      uint64_t v219 = v150;
      uint64_t v177 = v175[1];
      void *v174 = *v175;
      v174[1] = v177;
      uint64_t v178 = v175[3];
      v174[2] = v175[2];
      v174[3] = v178;
      uint64_t v179 = *(int *)(v149 + 24);
      uint64_t v214 = (void *)((char *)v174 + v179);
      uint64_t v216 = v174;
      uint64_t v180 = (void *)((char *)v175 + v179);
      uint64_t v181 = type metadata accessor for Identifier();
      uint64_t v182 = *(void *)(v181 - 8);
      uint64_t v183 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v182 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v183(v180, 1, v181))
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v214, v180, *(void *)(*(void *)(v184 - 8) + 64));
        uint64_t v6 = v217;
        uint64_t v185 = v219;
      }
      else
      {
        uint64_t v186 = v180[1];
        *uint64_t v214 = *v180;
        v214[1] = v186;
        uint64_t v187 = v180[3];
        swift_bridgeObjectRetain();
        if (v187 == 1)
        {
          *((_OWORD *)v214 + 1) = *((_OWORD *)v180 + 1);
          v214[4] = v180[4];
        }
        else
        {
          v214[2] = v180[2];
          v214[3] = v187;
          v214[4] = v180[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v188 = v181;
        uint64_t v189 = *(int *)(v181 + 24);
        uint64_t v190 = (char *)v214 + v189;
        uint64_t v191 = (char *)v180 + v189;
        uint64_t v192 = sub_23309AF80();
        uint64_t v193 = *(void *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v190, v191, v192);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
        }
        uint64_t v6 = v217;
        uint64_t v185 = v219;
        uint64_t v195 = *(int *)(v188 + 28);
        uint64_t v196 = (void *)((char *)v214 + v195);
        uint64_t v197 = (void *)((char *)v180 + v195);
        uint64_t v198 = v197[1];
        void *v196 = *v197;
        v196[1] = v198;
        uint64_t v199 = *(void (**)(void *, void, uint64_t, uint64_t))(v182 + 56);
        swift_bridgeObjectRetain();
        v199(v214, 0, 1, v188);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v185 + 56))(v216, 0, 1, v149);
    }
    uint64_t v200 = v6[23];
    *(void *)(a1 + v6[22]) = *(uint64_t *)((char *)a2 + v6[22]);
    uint64_t v201 = (void *)(a1 + v200);
    uint64_t v202 = (uint64_t *)((char *)a2 + v200);
    uint64_t v203 = v202[1];
    void *v201 = *v202;
    v201[1] = v203;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Condition(void *a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[4] != 1) {
    swift_bridgeObjectRelease();
  }
  if (a1[6] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v4 = (char *)a1 + a2[13];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*((void *)v4 + 7) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = &v4[*(int *)(v5 + 28)];
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (char *)a1 + a2[14];
  uint64_t v11 = type metadata accessor for Period();
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
  if (!v12(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*((void *)v10 + 7) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = &v10[*(int *)(v5 + 28)];
      uint64_t v14 = sub_23309B300();
      uint64_t v49 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v13, 1, v14)) {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v14);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = &v10[*(int *)(v11 + 20)];
    if (!v6(v15, 1, v5))
    {
      if (*((void *)v15 + 7) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = &v15[*(int *)(v5 + 28)];
      uint64_t v17 = sub_23309B300();
      uint64_t v50 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v16, 1, v17)) {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)a1 + a2[16];
  if (!v6(v18, 1, v5))
  {
    long long v51 = v6;
    if (*((void *)v18 + 7) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = &v18[*(int *)(v5 + 28)];
    uint64_t v20 = sub_23309B300();
    uint64_t v21 = *(void *)(v20 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = v51;
  }
  long long v22 = (char *)a1 + a2[17];
  if (!v12(v22, 1, v11))
  {
    if (!v6(v22, 1, v5))
    {
      if (*((void *)v22 + 7) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v23 = &v22[*(int *)(v5 + 28)];
      uint64_t v24 = sub_23309B300();
      uint64_t v25 = *(void *)(v24 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = &v22[*(int *)(v11 + 20)];
    if (!v6(v26, 1, v5))
    {
      if (*((void *)v26 + 7) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = &v26[*(int *)(v5 + 28)];
      uint64_t v28 = sub_23309B300();
      uint64_t v29 = *(void *)(v28 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28)) {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = (char *)a1 + a2[19];
  if (!v6(v30, 1, v5))
  {
    if (*((void *)v30 + 7) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = &v30[*(int *)(v5 + 28)];
    uint64_t v32 = sub_23309B300();
    uint64_t v33 = *(void *)(v32 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = (char *)a1 + a2[20];
  uint64_t v35 = type metadata accessor for Reference();
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48);
  if (!v36(v34, 1, v35))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = &v34[*(int *)(v35 + 24)];
    uint64_t v38 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38))
    {
      swift_bridgeObjectRelease();
      if (*((void *)v37 + 3) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v39 = &v37[*(int *)(v38 + 24)];
      uint64_t v40 = sub_23309AF80();
      uint64_t v41 = *(void *)(v40 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40)) {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
      }
      swift_bridgeObjectRelease();
    }
  }
  long long v42 = (char *)a1 + a2[21];
  if (!v36(v42, 1, v35))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = &v42[*(int *)(v35 + 24)];
    uint64_t v44 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44))
    {
      swift_bridgeObjectRelease();
      if (*((void *)v43 + 3) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v45 = &v43[*(int *)(v44 + 24)];
      uint64_t v46 = sub_23309AF80();
      uint64_t v47 = *(void *)(v46 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46)) {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsR4.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 72);
  if (v10 == 1)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  else
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  else
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v11;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(void *)(a2 + 128);
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
  }
  else
  {
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v13 = a3[13];
  uint64_t v14 = (unsigned char *)(a1 + v13);
  uint64_t v15 = (unsigned char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for FHIRDateTime();
  __src = *(void **)(v16 - 8);
  uint64_t v17 = (unsigned int (*)(void, void, void))__src[6];
  swift_bridgeObjectRetain();
  uint64_t v217 = a3;
  uint64_t v212 = v17;
  if (v17(v15, 1, v16))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
    uint64_t v19 = *((void *)v15 + 7);
    if (v19 == 1)
    {
      long long v20 = *(_OWORD *)(v15 + 40);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(_OWORD *)(v14 + 40) = v20;
      *((void *)v14 + 7) = *((void *)v15 + 7);
    }
    else
    {
      v14[24] = v15[24];
      *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
      *(_OWORD *)(v14 + 28) = *(_OWORD *)(v15 + 28);
      *((_DWORD *)v14 + 11) = *((_DWORD *)v15 + 11);
      *((void *)v14 + 6) = *((void *)v15 + 6);
      *((void *)v14 + 7) = v19;
      swift_bridgeObjectRetain();
    }
    uint64_t v21 = *(int *)(v16 + 28);
    long long v22 = &v14[v21];
    uint64_t v23 = &v15[v21];
    uint64_t v24 = sub_23309B300();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v17 = v212;
    uint64_t v27 = *(int *)(v16 + 32);
    uint64_t v28 = &v14[v27];
    uint64_t v29 = &v15[v27];
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    a3 = v217;
    uint64_t v31 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v31(v14, 0, 1, v16);
  }
  uint64_t v32 = a3[14];
  uint64_t v33 = (unsigned char *)(a1 + v32);
  uint64_t v34 = (unsigned char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for Period();
  uint64_t v204 = *(void **)(v35 - 8);
  uint64_t v36 = (unsigned int (*)(void, void, void))v204[6];
  uint64_t v207 = v35;
  if (v36(v34, 1, v35))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v202 = v36;
    if (v17(v34, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      *uint64_t v33 = *v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      uint64_t v39 = *((void *)v34 + 7);
      if (v39 == 1)
      {
        long long v40 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v40;
        *((void *)v33 + 7) = *((void *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((void *)v33 + 6) = *((void *)v34 + 6);
        *((void *)v33 + 7) = v39;
        swift_bridgeObjectRetain();
      }
      uint64_t v41 = *(int *)(v16 + 28);
      __dst = &v33[v41];
      long long v42 = &v34[v41];
      uint64_t v43 = sub_23309B300();
      uint64_t v44 = *(void *)(v43 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v42, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16))(__dst, v42, v43);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v43);
      }
      a3 = v217;
      uint64_t v46 = *(int *)(v16 + 32);
      uint64_t v47 = &v33[v46];
      uint64_t v48 = &v34[v46];
      uint64_t v49 = v48[1];
      void *v47 = *v48;
      v47[1] = v49;
      uint64_t v50 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v50(v33, 0, 1, v16);
      uint64_t v17 = v212;
    }
    uint64_t v51 = *(int *)(v35 + 20);
    uint64_t v52 = &v33[v51];
    long long v53 = &v34[v51];
    if (v17(v53, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      unsigned char *v52 = *v53;
      *((void *)v52 + 1) = *((void *)v53 + 1);
      *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
      uint64_t v55 = *((void *)v53 + 7);
      if (v55 == 1)
      {
        long long v56 = *(_OWORD *)(v53 + 40);
        *(_OWORD *)(v52 + 24) = *(_OWORD *)(v53 + 24);
        *(_OWORD *)(v52 + 40) = v56;
        *((void *)v52 + 7) = *((void *)v53 + 7);
      }
      else
      {
        v52[24] = v53[24];
        *(_WORD *)(v52 + 25) = *(_WORD *)(v53 + 25);
        *(_OWORD *)(v52 + 28) = *(_OWORD *)(v53 + 28);
        *((_DWORD *)v52 + 11) = *((_DWORD *)v53 + 11);
        *((void *)v52 + 6) = *((void *)v53 + 6);
        *((void *)v52 + 7) = v55;
        swift_bridgeObjectRetain();
      }
      uint64_t v57 = *(int *)(v16 + 28);
      __dsta = &v52[v57];
      uint64_t v58 = &v53[v57];
      uint64_t v59 = sub_23309B300();
      uint64_t v198 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v198 + 48))(v58, 1, v59))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v58, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v198 + 16))(__dsta, v58, v59);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v198 + 56))(__dsta, 0, 1, v59);
      }
      a3 = v217;
      uint64_t v17 = v212;
      uint64_t v61 = *(int *)(v16 + 32);
      uint64_t v62 = &v52[v61];
      uint64_t v63 = &v53[v61];
      uint64_t v64 = v63[1];
      void *v62 = *v63;
      v62[1] = v64;
      uint64_t v65 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v65(v52, 0, 1, v16);
    }
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v204[7])(v33, 0, 1, v35);
    uint64_t v36 = v202;
  }
  uint64_t v66 = a3[15];
  uint64_t v67 = a3[16];
  uint64_t v68 = (void *)(a1 + v66);
  uint64_t v69 = (void *)(a2 + v66);
  uint64_t v70 = v69[1];
  *uint64_t v68 = *v69;
  v68[1] = v70;
  uint64_t v71 = (unsigned char *)(a1 + v67);
  uint64_t v72 = (unsigned char *)(a2 + v67);
  swift_bridgeObjectRetain();
  if (v17(v72, 1, v16))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    *uint64_t v71 = *v72;
    *((void *)v71 + 1) = *((void *)v72 + 1);
    *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
    uint64_t v74 = *((void *)v72 + 7);
    uint64_t v203 = v36;
    if (v74 == 1)
    {
      long long v75 = *(_OWORD *)(v72 + 40);
      *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
      *(_OWORD *)(v71 + 40) = v75;
      *((void *)v71 + 7) = *((void *)v72 + 7);
    }
    else
    {
      v71[24] = v72[24];
      *(_WORD *)(v71 + 25) = *(_WORD *)(v72 + 25);
      *(_OWORD *)(v71 + 28) = *(_OWORD *)(v72 + 28);
      *((_DWORD *)v71 + 11) = *((_DWORD *)v72 + 11);
      *((void *)v71 + 6) = *((void *)v72 + 6);
      *((void *)v71 + 7) = v74;
      swift_bridgeObjectRetain();
    }
    uint64_t v76 = *(int *)(v16 + 28);
    uint64_t v77 = &v71[v76];
    uint64_t v78 = &v72[v76];
    uint64_t v79 = sub_23309B300();
    uint64_t v80 = *(void *)(v79 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 16))(v77, v78, v79);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    a3 = v217;
    uint64_t v82 = *(int *)(v16 + 32);
    uint64_t v83 = &v71[v82];
    uint64_t v84 = &v72[v82];
    uint64_t v85 = v84[1];
    *uint64_t v83 = *v84;
    v83[1] = v85;
    uint64_t v86 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v86(v71, 0, 1, v16);
    uint64_t v17 = v212;
    uint64_t v35 = v207;
    uint64_t v36 = v203;
  }
  uint64_t v87 = a3[17];
  uint64_t v88 = (unsigned char *)(a1 + v87);
  uint64_t v89 = (unsigned char *)(a2 + v87);
  if (v36(a2 + v87, 1, v35))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v88, v89, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    if (v17(v89, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v88, v89, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      *uint64_t v88 = *v89;
      *((void *)v88 + 1) = *((void *)v89 + 1);
      *((_DWORD *)v88 + 4) = *((_DWORD *)v89 + 4);
      uint64_t v92 = *((void *)v89 + 7);
      if (v92 == 1)
      {
        long long v93 = *(_OWORD *)(v89 + 40);
        *(_OWORD *)(v88 + 24) = *(_OWORD *)(v89 + 24);
        *(_OWORD *)(v88 + 40) = v93;
        *((void *)v88 + 7) = *((void *)v89 + 7);
      }
      else
      {
        v88[24] = v89[24];
        *(_WORD *)(v88 + 25) = *(_WORD *)(v89 + 25);
        *(_OWORD *)(v88 + 28) = *(_OWORD *)(v89 + 28);
        *((_DWORD *)v88 + 11) = *((_DWORD *)v89 + 11);
        *((void *)v88 + 6) = *((void *)v89 + 6);
        *((void *)v88 + 7) = v92;
        swift_bridgeObjectRetain();
      }
      uint64_t v94 = *(int *)(v16 + 28);
      uint64_t v95 = &v88[v94];
      uint64_t v96 = &v89[v94];
      uint64_t v97 = sub_23309B300();
      uint64_t v98 = *(void *)(v97 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v98 + 16))(v95, v96, v97);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      a3 = v217;
      uint64_t v100 = *(int *)(v16 + 32);
      uint64_t v101 = &v88[v100];
      uint64_t v102 = &v89[v100];
      uint64_t v103 = v102[1];
      void *v101 = *v102;
      v101[1] = v103;
      uint64_t v104 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v104(v88, 0, 1, v16);
      uint64_t v17 = v212;
      uint64_t v35 = v207;
    }
    uint64_t v105 = *(int *)(v35 + 20);
    uint64_t v106 = &v88[v105];
    uint64_t v107 = &v89[v105];
    if (v17(v107, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64));
    }
    else
    {
      *uint64_t v106 = *v107;
      *((void *)v106 + 1) = *((void *)v107 + 1);
      *((_DWORD *)v106 + 4) = *((_DWORD *)v107 + 4);
      uint64_t v109 = *((void *)v107 + 7);
      if (v109 == 1)
      {
        long long v110 = *(_OWORD *)(v107 + 40);
        *(_OWORD *)(v106 + 24) = *(_OWORD *)(v107 + 24);
        *(_OWORD *)(v106 + 40) = v110;
        *((void *)v106 + 7) = *((void *)v107 + 7);
      }
      else
      {
        v106[24] = v107[24];
        *(_WORD *)(v106 + 25) = *(_WORD *)(v107 + 25);
        *(_OWORD *)(v106 + 28) = *(_OWORD *)(v107 + 28);
        *((_DWORD *)v106 + 11) = *((_DWORD *)v107 + 11);
        *((void *)v106 + 6) = *((void *)v107 + 6);
        *((void *)v106 + 7) = v109;
        swift_bridgeObjectRetain();
      }
      uint64_t v111 = *(int *)(v16 + 28);
      long long v210 = &v106[v111];
      uint64_t v112 = &v107[v111];
      uint64_t v113 = sub_23309B300();
      uint64_t v114 = *(void *)(v113 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v210, v112, *(void *)(*(void *)(v115 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v114 + 16))(v210, v112, v113);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v114 + 56))(v210, 0, 1, v113);
      }
      uint64_t v17 = v212;
      uint64_t v116 = *(int *)(v16 + 32);
      uint64_t v117 = &v106[v116];
      uint64_t v118 = &v107[v116];
      uint64_t v119 = v118[1];
      *uint64_t v117 = *v118;
      v117[1] = v119;
      uint64_t v120 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
      swift_bridgeObjectRetain();
      v120(v106, 0, 1, v16);
      a3 = v217;
      uint64_t v35 = v207;
    }
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v204[7])(v88, 0, 1, v35);
  }
  uint64_t v121 = a3[18];
  uint64_t v122 = a3[19];
  uint64_t v123 = (void *)(a1 + v121);
  uint64_t v124 = (void *)(a2 + v121);
  uint64_t v125 = v124[1];
  void *v123 = *v124;
  v123[1] = v125;
  uint64_t v126 = (unsigned char *)(a1 + v122);
  uint64_t v127 = (unsigned char *)(a2 + v122);
  swift_bridgeObjectRetain();
  if (v17(v127, 1, v16))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v126, v127, *(void *)(*(void *)(v128 - 8) + 64));
  }
  else
  {
    *uint64_t v126 = *v127;
    *((void *)v126 + 1) = *((void *)v127 + 1);
    *((_DWORD *)v126 + 4) = *((_DWORD *)v127 + 4);
    uint64_t v129 = *((void *)v127 + 7);
    if (v129 == 1)
    {
      long long v130 = *(_OWORD *)(v127 + 40);
      *(_OWORD *)(v126 + 24) = *(_OWORD *)(v127 + 24);
      *(_OWORD *)(v126 + 40) = v130;
      *((void *)v126 + 7) = *((void *)v127 + 7);
    }
    else
    {
      v126[24] = v127[24];
      *(_WORD *)(v126 + 25) = *(_WORD *)(v127 + 25);
      *(_OWORD *)(v126 + 28) = *(_OWORD *)(v127 + 28);
      *((_DWORD *)v126 + 11) = *((_DWORD *)v127 + 11);
      *((void *)v126 + 6) = *((void *)v127 + 6);
      *((void *)v126 + 7) = v129;
      swift_bridgeObjectRetain();
    }
    uint64_t v131 = *(int *)(v16 + 28);
    uint64_t v132 = &v126[v131];
    uint64_t v133 = &v127[v131];
    uint64_t v134 = sub_23309B300();
    uint64_t v135 = *(void *)(v134 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v132, v133, *(void *)(*(void *)(v136 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v135 + 16))(v132, v133, v134);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
    }
    uint64_t v137 = *(int *)(v16 + 32);
    uint64_t v138 = &v126[v137];
    uint64_t v139 = &v127[v137];
    uint64_t v140 = v139[1];
    *uint64_t v138 = *v139;
    v138[1] = v140;
    uint64_t v141 = (void (*)(unsigned char *, void, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v141(v126, 0, 1, v16);
  }
  uint64_t v142 = a3[20];
  uint64_t v143 = (void *)(a1 + v142);
  uint64_t v144 = (void *)(a2 + v142);
  uint64_t v145 = type metadata accessor for Reference();
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v147 = *(unsigned int (**)(void, void, void))(v146 + 48);
  if (v147(v144, 1, v145))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v143, v144, *(void *)(*(void *)(v148 - 8) + 64));
  }
  else
  {
    uint64_t v213 = v147;
    uint64_t v149 = v144[1];
    *uint64_t v143 = *v144;
    v143[1] = v149;
    uint64_t v150 = v144[3];
    v143[2] = v144[2];
    v143[3] = v150;
    uint64_t v151 = *(int *)(v145 + 24);
    uint64_t v205 = (void *)((char *)v143 + v151);
    uint64_t v208 = v145;
    uint64_t v152 = (void *)((char *)v144 + v151);
    uint64_t v153 = type metadata accessor for Identifier();
    uint64_t v154 = *(void *)(v153 - 8);
    uint64_t v155 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v154 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v155(v152, 1, v153))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v205, v152, *(void *)(*(void *)(v156 - 8) + 64));
      a3 = v217;
    }
    else
    {
      uint64_t v157 = v152[1];
      void *v205 = *v152;
      v205[1] = v157;
      uint64_t v158 = v152[3];
      swift_bridgeObjectRetain();
      if (v158 == 1)
      {
        *((_OWORD *)v205 + 1) = *((_OWORD *)v152 + 1);
        v205[4] = v152[4];
      }
      else
      {
        v205[2] = v152[2];
        v205[3] = v158;
        v205[4] = v152[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v159 = *(int *)(v153 + 24);
      __dstb = (char *)v205 + v159;
      uint64_t v160 = (char *)v152 + v159;
      uint64_t v161 = sub_23309AF80();
      uint64_t v162 = *(void *)(v161 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(__dstb, v160, *(void *)(*(void *)(v163 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v162 + 16))(__dstb, v160, v161);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v162 + 56))(__dstb, 0, 1, v161);
      }
      a3 = v217;
      uint64_t v164 = *(int *)(v153 + 28);
      uint64_t v165 = (void *)((char *)v205 + v164);
      uint64_t v166 = (void *)((char *)v152 + v164);
      uint64_t v167 = v166[1];
      void *v165 = *v166;
      v165[1] = v167;
      uint64_t v168 = *(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56);
      swift_bridgeObjectRetain();
      v168(v205, 0, 1, v153);
    }
    uint64_t v145 = v208;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v208);
    uint64_t v147 = v213;
  }
  uint64_t v169 = a3[21];
  uint64_t v170 = (void *)(a1 + v169);
  uint64_t v171 = (void *)(a2 + v169);
  if (v147(a2 + v169, 1, v145))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v170, v171, *(void *)(*(void *)(v172 - 8) + 64));
  }
  else
  {
    uint64_t v214 = a1;
    __srca = (void *)v146;
    uint64_t v173 = v171[1];
    *uint64_t v170 = *v171;
    v170[1] = v173;
    uint64_t v174 = v171[3];
    v170[2] = v171[2];
    v170[3] = v174;
    uint64_t v175 = *(int *)(v145 + 24);
    uint64_t v211 = (void *)((char *)v170 + v175);
    uint64_t v176 = (void *)((char *)v171 + v175);
    uint64_t v177 = type metadata accessor for Identifier();
    uint64_t v178 = *(void *)(v177 - 8);
    uint64_t v179 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v178 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v179(v176, 1, v177))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v211, v176, *(void *)(*(void *)(v180 - 8) + 64));
      a3 = v217;
    }
    else
    {
      uint64_t v181 = v176[1];
      *uint64_t v211 = *v176;
      v211[1] = v181;
      uint64_t v182 = v176[3];
      swift_bridgeObjectRetain();
      if (v182 == 1)
      {
        *((_OWORD *)v211 + 1) = *((_OWORD *)v176 + 1);
        v211[4] = v176[4];
      }
      else
      {
        v211[2] = v176[2];
        v211[3] = v182;
        v211[4] = v176[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v183 = *(int *)(v177 + 24);
      uint64_t v206 = (char *)v211 + v183;
      uint64_t v209 = v177;
      uint64_t v184 = (char *)v176 + v183;
      uint64_t v185 = sub_23309AF80();
      uint64_t v186 = *(void *)(v185 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v185))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v206, v184, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v206, v184, v185);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v206, 0, 1, v185);
      }
      a3 = v217;
      uint64_t v188 = *(int *)(v209 + 28);
      uint64_t v189 = (void *)((char *)v211 + v188);
      uint64_t v190 = (void *)((char *)v176 + v188);
      uint64_t v191 = v190[1];
      void *v189 = *v190;
      v189[1] = v191;
      uint64_t v192 = *(void (**)(void *, void, uint64_t, uint64_t))(v178 + 56);
      swift_bridgeObjectRetain();
      v192(v211, 0, 1, v209);
    }
    (*((void (**)(void *, void, uint64_t, uint64_t))__srca + 7))(v170, 0, 1, v145);
    a1 = v214;
  }
  uint64_t v193 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  uint64_t v194 = (void *)(a1 + v193);
  uint64_t v195 = (void *)(a2 + v193);
  uint64_t v196 = v195[1];
  *uint64_t v194 = *v195;
  v194[1] = v196;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.Condition(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = a2[2];
  v5[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + 4;
  uint64_t v7 = a2[4];
  if (v5[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(v5 + 4));
      uint64_t v8 = a2[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t v9 = (long long *)(v5 + 5);
  uint64_t v10 = (long long *)(a2 + 5);
  uint64_t v11 = a2[6];
  if (v5[6] == 1)
  {
    if (v11 == 1)
    {
      long long v12 = *v10;
      v5[7] = a2[7];
      *uint64_t v9 = v12;
    }
    else
    {
      v5[5] = a2[5];
      v5[6] = a2[6];
      v5[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_232F042F8((uint64_t)(v5 + 5));
    uint64_t v13 = a2[7];
    *uint64_t v9 = *v10;
    v5[7] = v13;
  }
  else
  {
    v5[5] = a2[5];
    v5[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (long long *)(v5 + 8);
  uint64_t v15 = (long long *)(a2 + 8);
  uint64_t v16 = a2[9];
  if (v5[9] == 1)
  {
    if (v16 == 1)
    {
      long long v17 = *v15;
      v5[10] = a2[10];
      *uint64_t v14 = v17;
    }
    else
    {
      v5[8] = a2[8];
      v5[9] = a2[9];
      v5[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v16 == 1)
  {
    sub_232F042F8((uint64_t)(v5 + 8));
    uint64_t v18 = a2[10];
    *uint64_t v14 = *v15;
    v5[10] = v18;
  }
  else
  {
    v5[8] = a2[8];
    v5[9] = a2[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v5[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = (long long *)(v5 + 12);
  long long v20 = (long long *)(a2 + 12);
  uint64_t v21 = a2[13];
  if (v5[13] == 1)
  {
    if (v21 == 1)
    {
      long long v22 = *v20;
      v5[14] = a2[14];
      *uint64_t v19 = v22;
    }
    else
    {
      v5[12] = a2[12];
      v5[13] = a2[13];
      v5[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v21 == 1)
  {
    sub_232F042F8((uint64_t)(v5 + 12));
    uint64_t v23 = a2[14];
    *uint64_t v19 = *v20;
    v5[14] = v23;
  }
  else
  {
    v5[12] = a2[12];
    v5[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = (long long *)(v5 + 15);
  uint64_t v25 = (long long *)(a2 + 15);
  uint64_t v26 = a2[16];
  if (v5[16] == 1)
  {
    if (v26 == 1)
    {
      long long v27 = *v25;
      v5[17] = a2[17];
      *uint64_t v24 = v27;
    }
    else
    {
      v5[15] = a2[15];
      v5[16] = a2[16];
      v5[17] = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v26 == 1)
  {
    sub_232F042F8((uint64_t)(v5 + 15));
    uint64_t v28 = a2[17];
    *uint64_t v24 = *v25;
    v5[17] = v28;
  }
  else
  {
    v5[15] = a2[15];
    v5[16] = a2[16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[17] = a2[17];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v5[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[13];
  uint64_t v30 = (uint64_t)v5 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for FHIRDateTime();
  uint64_t v586 = *(void *)(v32 - 8);
  uint64_t v33 = *(unsigned int (**)(void, void, void))(v586 + 48);
  unsigned int v34 = v33(v30, 1, v32);
  unsigned int v35 = v33(v31, 1, v32);
  uint64_t v606 = a3;
  uint64_t v599 = v33;
  uint64_t v607 = a2;
  if (!v34)
  {
    if (v35)
    {
      uint64_t v36 = v32;
      sub_232EA3DC4(v30, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_42;
    }
    *(unsigned char *)uint64_t v30 = *v31;
    *(void *)(v30 + 8) = *((void *)v31 + 1);
    *(_WORD *)(v30 + 16) = *((_WORD *)v31 + 8);
    *(_WORD *)(v30 + 18) = *((_WORD *)v31 + 9);
    uint64_t v41 = (long long *)(v30 + 24);
    long long v42 = (long long *)(v31 + 24);
    uint64_t v43 = *((void *)v31 + 7);
    if (*(void *)(v30 + 56) == 1)
    {
      if (v43 == 1)
      {
        long long v44 = *v42;
        long long v45 = *(_OWORD *)(v31 + 40);
        *(void *)(v30 + 56) = *((void *)v31 + 7);
        *uint64_t v41 = v44;
        *(_OWORD *)(v30 + 40) = v45;
      }
      else
      {
        *(unsigned char *)(v30 + 24) = v31[24];
        *(unsigned char *)(v30 + 25) = v31[25];
        *(unsigned char *)(v30 + 26) = v31[26];
        long long v59 = *(_OWORD *)(v31 + 28);
        *(_DWORD *)(v30 + 44) = *((_DWORD *)v31 + 11);
        *(_OWORD *)(v30 + 28) = v59;
        *(void *)(v30 + 48) = *((void *)v31 + 6);
        *(void *)(v30 + 56) = *((void *)v31 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v43 == 1)
    {
      sub_232F0434C(v30 + 24);
      uint64_t v57 = *((void *)v31 + 7);
      long long v58 = *(_OWORD *)(v31 + 40);
      *uint64_t v41 = *v42;
      *(_OWORD *)(v30 + 40) = v58;
      *(void *)(v30 + 56) = v57;
    }
    else
    {
      *(unsigned char *)(v30 + 24) = v31[24];
      *(unsigned char *)(v30 + 25) = v31[25];
      *(unsigned char *)(v30 + 26) = v31[26];
      *(_DWORD *)(v30 + 28) = *((_DWORD *)v31 + 7);
      *(_WORD *)(v30 + 32) = *((_WORD *)v31 + 16);
      *(_WORD *)(v30 + 34) = *((_WORD *)v31 + 17);
      *(_WORD *)(v30 + 36) = *((_WORD *)v31 + 18);
      *(_WORD *)(v30 + 38) = *((_WORD *)v31 + 19);
      *(_WORD *)(v30 + 40) = *((_WORD *)v31 + 20);
      *(_WORD *)(v30 + 42) = *((_WORD *)v31 + 21);
      *(_WORD *)(v30 + 44) = *((_WORD *)v31 + 22);
      *(_WORD *)(v30 + 46) = *((_WORD *)v31 + 23);
      *(void *)(v30 + 48) = *((void *)v31 + 6);
      *(void *)(v30 + 56) = *((void *)v31 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v572 = v32;
    uint64_t v60 = *(int *)(v32 + 28);
    uint64_t v61 = (void *)(v30 + v60);
    uint64_t v62 = &v31[v60];
    uint64_t v63 = sub_23309B300();
    uint64_t v64 = *(void *)(v63 - 8);
    uint64_t v65 = *(uint64_t (**)(void, void, void))(v64 + 48);
    int v66 = v65(v61, 1, v63);
    int v67 = v65(v62, 1, v63);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
LABEL_63:
        a3 = v606;
        uint64_t v33 = v599;
        uint64_t v36 = v572;
        uint64_t v69 = *(int *)(v572 + 32);
        uint64_t v70 = (void *)(v30 + v69);
        uint64_t v71 = &v31[v69];
        *uint64_t v70 = *(void *)v71;
        v70[1] = *((void *)v71 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
    }
    else
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 24))(v61, v62, v63);
        goto LABEL_63;
      }
      (*(void (**)(void *, uint64_t))(v64 + 8))(v61, v63);
    }
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v61, v62, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_63;
  }
  if (v35)
  {
    uint64_t v36 = v32;
LABEL_42:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_64;
  }
  *(unsigned char *)uint64_t v30 = *v31;
  uint64_t v38 = *((void *)v31 + 1);
  *(_DWORD *)(v30 + 16) = *((_DWORD *)v31 + 4);
  *(void *)(v30 + 8) = v38;
  if (*((void *)v31 + 7) == 1)
  {
    long long v39 = *(_OWORD *)(v31 + 24);
    long long v40 = *(_OWORD *)(v31 + 40);
    *(void *)(v30 + 56) = *((void *)v31 + 7);
    *(_OWORD *)(v30 + 24) = v39;
    *(_OWORD *)(v30 + 40) = v40;
  }
  else
  {
    *(unsigned char *)(v30 + 24) = v31[24];
    *(unsigned char *)(v30 + 25) = v31[25];
    *(unsigned char *)(v30 + 26) = v31[26];
    long long v46 = *(_OWORD *)(v31 + 28);
    *(_DWORD *)(v30 + 44) = *((_DWORD *)v31 + 11);
    *(_OWORD *)(v30 + 28) = v46;
    *(void *)(v30 + 48) = *((void *)v31 + 6);
    *(void *)(v30 + 56) = *((void *)v31 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v47 = *(int *)(v32 + 28);
  uint64_t v48 = (void *)(v30 + v47);
  uint64_t v49 = &v31[v47];
  uint64_t v50 = sub_23309B300();
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  a3 = v606;
  uint64_t v33 = v599;
  uint64_t v53 = *(int *)(v32 + 32);
  uint64_t v54 = (void *)(v30 + v53);
  uint64_t v55 = &v31[v53];
  *uint64_t v54 = *(void *)v55;
  v54[1] = *((void *)v55 + 1);
  long long v56 = *(void (**)(void, void, void, void))(v586 + 56);
  swift_bridgeObjectRetain();
  uint64_t v36 = v32;
  v56(v30, 0, 1, v32);
LABEL_64:
  uint64_t v72 = a3[14];
  uint64_t v73 = (char *)v5 + v72;
  uint64_t v74 = (char *)v607 + v72;
  uint64_t v75 = type metadata accessor for Period();
  uint64_t v582 = *(void *)(v75 - 8);
  uint64_t v76 = *(uint64_t (**)(void))(v582 + 48);
  uint64_t v77 = (uint64_t)v73;
  LODWORD(v73) = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v73, 1, v75);
  uint64_t v78 = v74;
  uint64_t v593 = v75;
  long long v584 = v76;
  int v79 = ((uint64_t (*)(char *, uint64_t, uint64_t))v76)(v74, 1, v75);
  if (!v73)
  {
    if (v79)
    {
      sub_232EA3DC4(v77, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_70;
    }
    uint64_t v88 = v77;
    uint64_t v81 = v36;
    unsigned int v89 = v33(v77, 1, v36);
    uint64_t v90 = v74;
    unsigned int v91 = v33(v74, 1, v36);
    if (v89)
    {
      if (!v91)
      {
        *(unsigned char *)uint64_t v77 = *v74;
        uint64_t v92 = *((void *)v74 + 1);
        *(_DWORD *)(v77 + 16) = *((_DWORD *)v74 + 4);
        *(void *)(v77 + 8) = v92;
        uint64_t v84 = v607;
        uint64_t v85 = v593;
        if (*((void *)v74 + 7) == 1)
        {
          long long v93 = *(_OWORD *)(v74 + 24);
          long long v94 = *(_OWORD *)(v74 + 40);
          *(void *)(v88 + 56) = *((void *)v74 + 7);
          *(_OWORD *)(v88 + 24) = v93;
          *(_OWORD *)(v88 + 40) = v94;
        }
        else
        {
          *(unsigned char *)(v88 + 24) = v74[24];
          *(unsigned char *)(v88 + 25) = v74[25];
          *(unsigned char *)(v88 + 26) = v74[26];
          long long v135 = *(_OWORD *)(v74 + 28);
          *(_DWORD *)(v88 + 44) = *((_DWORD *)v74 + 11);
          *(_OWORD *)(v88 + 28) = v135;
          *(void *)(v88 + 48) = *((void *)v74 + 6);
          *(void *)(v88 + 56) = *((void *)v74 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v136 = v81;
        uint64_t v137 = *(int *)(v81 + 28);
        uint64_t v138 = (void *)(v88 + v137);
        uint64_t v139 = &v74[v137];
        uint64_t v140 = sub_23309B300();
        uint64_t v141 = *(void *)(v140 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
        }
        uint64_t v81 = v136;
        uint64_t v143 = *(int *)(v136 + 32);
        uint64_t v144 = (void *)(v88 + v143);
        uint64_t v145 = &v90[v143];
        *uint64_t v144 = *(void *)v145;
        v144[1] = *((void *)v145 + 1);
        uint64_t v146 = *(void (**)(void, void, void, void))(v586 + 56);
        swift_bridgeObjectRetain();
        v146(v88, 0, 1, v81);
        uint64_t v87 = v606;
        goto LABEL_118;
      }
LABEL_79:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v77, v74, *(void *)(*(void *)(v98 - 8) + 64));
      uint64_t v84 = v607;
      uint64_t v85 = v593;
      uint64_t v87 = v606;
      goto LABEL_119;
    }
    if (v91)
    {
      sub_232EA3DC4(v77, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_79;
    }
    *(unsigned char *)uint64_t v77 = *v74;
    *(void *)(v77 + 8) = *((void *)v74 + 1);
    *(_WORD *)(v77 + 16) = *((_WORD *)v74 + 8);
    *(_WORD *)(v77 + 18) = *((_WORD *)v74 + 9);
    long long v130 = (long long *)(v77 + 24);
    uint64_t v131 = (long long *)(v74 + 24);
    uint64_t v132 = *((void *)v74 + 7);
    if (*(void *)(v88 + 56) == 1)
    {
      if (v132 == 1)
      {
        long long v133 = *v131;
        long long v134 = *(_OWORD *)(v74 + 40);
        *(void *)(v88 + 56) = *((void *)v74 + 7);
        *long long v130 = v133;
        *(_OWORD *)(v88 + 40) = v134;
      }
      else
      {
        *(unsigned char *)(v88 + 24) = v74[24];
        *(unsigned char *)(v88 + 25) = v74[25];
        *(unsigned char *)(v88 + 26) = v74[26];
        long long v149 = *(_OWORD *)(v74 + 28);
        *(_DWORD *)(v88 + 44) = *((_DWORD *)v74 + 11);
        *(_OWORD *)(v88 + 28) = v149;
        *(void *)(v88 + 48) = *((void *)v74 + 6);
        *(void *)(v88 + 56) = *((void *)v74 + 7);
        swift_bridgeObjectRetain();
      }
      uint64_t v84 = v607;
    }
    else
    {
      uint64_t v84 = v607;
      if (v132 == 1)
      {
        sub_232F0434C(v88 + 24);
        uint64_t v147 = *((void *)v74 + 7);
        long long v148 = *(_OWORD *)(v74 + 40);
        *long long v130 = *v131;
        *(_OWORD *)(v88 + 40) = v148;
        *(void *)(v88 + 56) = v147;
      }
      else
      {
        *(unsigned char *)(v88 + 24) = v74[24];
        *(unsigned char *)(v88 + 25) = v74[25];
        *(unsigned char *)(v88 + 26) = v74[26];
        *(_DWORD *)(v88 + 28) = *((_DWORD *)v74 + 7);
        *(_WORD *)(v88 + 32) = *((_WORD *)v74 + 16);
        *(_WORD *)(v88 + 34) = *((_WORD *)v74 + 17);
        *(_WORD *)(v88 + 36) = *((_WORD *)v74 + 18);
        *(_WORD *)(v88 + 38) = *((_WORD *)v74 + 19);
        *(_WORD *)(v88 + 40) = *((_WORD *)v74 + 20);
        *(_WORD *)(v88 + 42) = *((_WORD *)v74 + 21);
        *(_WORD *)(v88 + 44) = *((_WORD *)v74 + 22);
        *(_WORD *)(v88 + 46) = *((_WORD *)v74 + 23);
        *(void *)(v88 + 48) = *((void *)v74 + 6);
        *(void *)(v88 + 56) = *((void *)v74 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v573 = v81;
    uint64_t v150 = *(int *)(v81 + 28);
    uint64_t v151 = (void *)(v88 + v150);
    uint64_t v152 = &v74[v150];
    uint64_t v153 = sub_23309B300();
    uint64_t v154 = *(void *)(v153 - 8);
    uint64_t v155 = *(uint64_t (**)(void, void, void))(v154 + 48);
    uint64_t v589 = v151;
    LODWORD(v151) = v155(v151, 1, v153);
    int v156 = v155(v152, 1, v153);
    if (v151)
    {
      uint64_t v85 = v593;
      if (!v156)
      {
        (*(void (**)(void *, char *, uint64_t))(v154 + 16))(v589, v152, v153);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56))(v589, 0, 1, v153);
        goto LABEL_117;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v158 = *(void *)(*(void *)(v157 - 8) + 64);
      uint64_t v159 = v589;
    }
    else
    {
      uint64_t v85 = v593;
      if (!v156)
      {
        (*(void (**)(void *, char *, uint64_t))(v154 + 24))(v589, v152, v153);
        goto LABEL_117;
      }
      (*(void (**)(void *, uint64_t))(v154 + 8))(v589, v153);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v158 = *(void *)(*(void *)(v160 - 8) + 64);
      uint64_t v159 = v589;
    }
    memcpy(v159, v152, v158);
LABEL_117:
    uint64_t v81 = v573;
    uint64_t v161 = *(int *)(v573 + 32);
    uint64_t v162 = (void *)(v88 + v161);
    uint64_t v163 = &v90[v161];
    *uint64_t v162 = *(void *)v163;
    v162[1] = *((void *)v163 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v87 = v606;
LABEL_118:
    uint64_t v33 = v599;
LABEL_119:
    uint64_t v164 = *(int *)(v85 + 20);
    uint64_t v165 = v88 + v164;
    uint64_t v166 = &v90[v164];
    unsigned int v167 = v33(v165, 1, v81);
    unsigned int v168 = v33(v166, 1, v81);
    if (v167)
    {
      if (!v168)
      {
        *(unsigned char *)uint64_t v165 = *v166;
        uint64_t v169 = *((void *)v166 + 1);
        *(_DWORD *)(v165 + 16) = *((_DWORD *)v166 + 4);
        *(void *)(v165 + 8) = v169;
        if (*((void *)v166 + 7) == 1)
        {
          long long v170 = *(_OWORD *)(v166 + 24);
          long long v171 = *(_OWORD *)(v166 + 40);
          *(void *)(v165 + 56) = *((void *)v166 + 7);
          *(_OWORD *)(v165 + 24) = v170;
          *(_OWORD *)(v165 + 40) = v171;
        }
        else
        {
          *(unsigned char *)(v165 + 24) = v166[24];
          *(unsigned char *)(v165 + 25) = v166[25];
          *(unsigned char *)(v165 + 26) = v166[26];
          long long v178 = *(_OWORD *)(v166 + 28);
          *(_DWORD *)(v165 + 44) = *((_DWORD *)v166 + 11);
          *(_OWORD *)(v165 + 28) = v178;
          *(void *)(v165 + 48) = *((void *)v166 + 6);
          *(void *)(v165 + 56) = *((void *)v166 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v179 = v81;
        uint64_t v180 = *(int *)(v81 + 28);
        uint64_t v181 = (void *)(v165 + v180);
        uint64_t v182 = &v166[v180];
        uint64_t v183 = sub_23309B300();
        uint64_t v184 = *(void *)(v183 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v181, v182, *(void *)(*(void *)(v185 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v184 + 16))(v181, v182, v183);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v184 + 56))(v181, 0, 1, v183);
        }
        uint64_t v81 = v179;
        uint64_t v186 = *(int *)(v179 + 32);
        uint64_t v187 = (void *)(v165 + v186);
        uint64_t v188 = &v166[v186];
        *uint64_t v187 = *(void *)v188;
        v187[1] = *((void *)v188 + 1);
        uint64_t v189 = *(void (**)(void, void, void, void))(v586 + 56);
        swift_bridgeObjectRetain();
        v189(v165, 0, 1, v81);
        uint64_t v87 = v606;
        goto LABEL_147;
      }
LABEL_125:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v165, v166, *(void *)(*(void *)(v172 - 8) + 64));
      goto LABEL_148;
    }
    if (v168)
    {
      sub_232EA3DC4(v165, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_125;
    }
    *(unsigned char *)uint64_t v165 = *v166;
    *(void *)(v165 + 8) = *((void *)v166 + 1);
    *(_WORD *)(v165 + 16) = *((_WORD *)v166 + 8);
    *(_WORD *)(v165 + 18) = *((_WORD *)v166 + 9);
    uint64_t v173 = (long long *)(v165 + 24);
    uint64_t v174 = (long long *)(v166 + 24);
    uint64_t v175 = *((void *)v166 + 7);
    if (*(void *)(v165 + 56) == 1)
    {
      if (v175 == 1)
      {
        long long v176 = *v174;
        long long v177 = *(_OWORD *)(v166 + 40);
        *(void *)(v165 + 56) = *((void *)v166 + 7);
        long long *v173 = v176;
        *(_OWORD *)(v165 + 40) = v177;
      }
      else
      {
        *(unsigned char *)(v165 + 24) = v166[24];
        *(unsigned char *)(v165 + 25) = v166[25];
        *(unsigned char *)(v165 + 26) = v166[26];
        long long v192 = *(_OWORD *)(v166 + 28);
        *(_DWORD *)(v165 + 44) = *((_DWORD *)v166 + 11);
        *(_OWORD *)(v165 + 28) = v192;
        *(void *)(v165 + 48) = *((void *)v166 + 6);
        *(void *)(v165 + 56) = *((void *)v166 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v175 == 1)
    {
      sub_232F0434C(v165 + 24);
      uint64_t v190 = *((void *)v166 + 7);
      long long v191 = *(_OWORD *)(v166 + 40);
      long long *v173 = *v174;
      *(_OWORD *)(v165 + 40) = v191;
      *(void *)(v165 + 56) = v190;
    }
    else
    {
      *(unsigned char *)(v165 + 24) = v166[24];
      *(unsigned char *)(v165 + 25) = v166[25];
      *(unsigned char *)(v165 + 26) = v166[26];
      *(_DWORD *)(v165 + 28) = *((_DWORD *)v166 + 7);
      *(_WORD *)(v165 + 32) = *((_WORD *)v166 + 16);
      *(_WORD *)(v165 + 34) = *((_WORD *)v166 + 17);
      *(_WORD *)(v165 + 36) = *((_WORD *)v166 + 18);
      *(_WORD *)(v165 + 38) = *((_WORD *)v166 + 19);
      *(_WORD *)(v165 + 40) = *((_WORD *)v166 + 20);
      *(_WORD *)(v165 + 42) = *((_WORD *)v166 + 21);
      *(_WORD *)(v165 + 44) = *((_WORD *)v166 + 22);
      *(_WORD *)(v165 + 46) = *((_WORD *)v166 + 23);
      *(void *)(v165 + 48) = *((void *)v166 + 6);
      *(void *)(v165 + 56) = *((void *)v166 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v574 = v81;
    uint64_t v193 = *(int *)(v81 + 28);
    uint64_t v194 = (void *)(v165 + v193);
    uint64_t v195 = &v166[v193];
    uint64_t v196 = sub_23309B300();
    uint64_t v197 = *(void *)(v196 - 8);
    uint64_t v198 = *(uint64_t (**)(void, void, void))(v197 + 48);
    uint64_t v590 = v194;
    LODWORD(v194) = v198(v194, 1, v196);
    int v199 = v198(v195, 1, v196);
    if (v194)
    {
      uint64_t v85 = v593;
      if (!v199)
      {
        (*(void (**)(void *, char *, uint64_t))(v197 + 16))(v590, v195, v196);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v197 + 56))(v590, 0, 1, v196);
        goto LABEL_146;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v201 = *(void *)(*(void *)(v200 - 8) + 64);
      uint64_t v202 = v590;
    }
    else
    {
      uint64_t v85 = v593;
      if (!v199)
      {
        (*(void (**)(void *, char *, uint64_t))(v197 + 24))(v590, v195, v196);
        goto LABEL_146;
      }
      (*(void (**)(void *, uint64_t))(v197 + 8))(v590, v196);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v201 = *(void *)(*(void *)(v203 - 8) + 64);
      uint64_t v202 = v590;
    }
    memcpy(v202, v195, v201);
LABEL_146:
    uint64_t v87 = v606;
    uint64_t v81 = v574;
    uint64_t v204 = *(int *)(v574 + 32);
    uint64_t v205 = (void *)(v165 + v204);
    uint64_t v206 = &v166[v204];
    void *v205 = *(void *)v206;
    v205[1] = *((void *)v206 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_147:
    uint64_t v33 = v599;
    goto LABEL_148;
  }
  if (v79)
  {
LABEL_70:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v77, v74, *(void *)(*(void *)(v86 - 8) + 64));
    uint64_t v81 = v36;
    uint64_t v84 = v607;
    uint64_t v85 = v75;
    uint64_t v87 = v606;
    goto LABEL_148;
  }
  uint64_t v80 = v74;
  uint64_t v81 = v36;
  uint64_t v82 = v77;
  if (v33(v74, 1, v36))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v77, v74, *(void *)(*(void *)(v83 - 8) + 64));
    uint64_t v84 = v607;
    uint64_t v85 = v593;
  }
  else
  {
    *(unsigned char *)uint64_t v77 = *v74;
    uint64_t v95 = *((void *)v74 + 1);
    *(_DWORD *)(v77 + 16) = *((_DWORD *)v74 + 4);
    *(void *)(v77 + 8) = v95;
    if (*((void *)v74 + 7) == 1)
    {
      long long v96 = *(_OWORD *)(v74 + 24);
      long long v97 = *(_OWORD *)(v74 + 40);
      *(void *)(v77 + 56) = *((void *)v74 + 7);
      *(_OWORD *)(v77 + 24) = v96;
      *(_OWORD *)(v77 + 40) = v97;
    }
    else
    {
      *(unsigned char *)(v77 + 24) = v74[24];
      *(unsigned char *)(v77 + 25) = v74[25];
      *(unsigned char *)(v77 + 26) = v74[26];
      long long v99 = *(_OWORD *)(v74 + 28);
      *(_DWORD *)(v77 + 44) = *((_DWORD *)v74 + 11);
      *(_OWORD *)(v77 + 28) = v99;
      *(void *)(v77 + 48) = *((void *)v74 + 6);
      *(void *)(v77 + 56) = *((void *)v74 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v100 = v36;
    uint64_t v101 = *(int *)(v36 + 28);
    uint64_t v102 = (void *)(v77 + v101);
    uint64_t v103 = &v78[v101];
    uint64_t v104 = sub_23309B300();
    uint64_t v105 = *(void *)(v104 - 8);
    uint64_t v84 = v607;
    uint64_t v85 = v593;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v105 + 16))(v102, v103, v104);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
    }
    uint64_t v81 = v100;
    uint64_t v107 = *(int *)(v100 + 32);
    uint64_t v108 = (void *)(v82 + v107);
    uint64_t v80 = v78;
    uint64_t v109 = &v78[v107];
    *uint64_t v108 = *(void *)v109;
    v108[1] = *((void *)v109 + 1);
    long long v110 = *(void (**)(void, void, void, void))(v586 + 56);
    swift_bridgeObjectRetain();
    v110(v82, 0, 1, v100);
  }
  uint64_t v87 = v606;
  uint64_t v111 = *(int *)(v85 + 20);
  uint64_t v112 = (char *)(v82 + v111);
  uint64_t v113 = &v80[v111];
  if (v599(v113, 1, v81))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v112, v113, *(void *)(*(void *)(v114 - 8) + 64));
  }
  else
  {
    char *v112 = *v113;
    uint64_t v115 = *((void *)v113 + 1);
    *((_DWORD *)v112 + 4) = *((_DWORD *)v113 + 4);
    *((void *)v112 + 1) = v115;
    if (*((void *)v113 + 7) == 1)
    {
      long long v116 = *(_OWORD *)(v113 + 24);
      long long v117 = *(_OWORD *)(v113 + 40);
      *((void *)v112 + 7) = *((void *)v113 + 7);
      *(_OWORD *)(v112 + 24) = v116;
      *(_OWORD *)(v112 + 40) = v117;
    }
    else
    {
      v112[24] = v113[24];
      v112[25] = v113[25];
      v112[26] = v113[26];
      long long v118 = *(_OWORD *)(v113 + 28);
      *((_DWORD *)v112 + 11) = *((_DWORD *)v113 + 11);
      *(_OWORD *)(v112 + 28) = v118;
      *((void *)v112 + 6) = *((void *)v113 + 6);
      *((void *)v112 + 7) = *((void *)v113 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v119 = v81;
    uint64_t v120 = *(int *)(v81 + 28);
    uint64_t v121 = &v112[v120];
    uint64_t v122 = &v113[v120];
    uint64_t v123 = sub_23309B300();
    uint64_t v124 = *(void *)(v123 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v121, v122, *(void *)(*(void *)(v125 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v121, v122, v123);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
    }
    uint64_t v85 = v593;
    uint64_t v81 = v119;
    uint64_t v126 = *(int *)(v119 + 32);
    uint64_t v127 = &v112[v126];
    uint64_t v128 = &v113[v126];
    *(void *)uint64_t v127 = *(void *)v128;
    *((void *)v127 + 1) = *((void *)v128 + 1);
    uint64_t v129 = *(void (**)(void, void, void, void))(v586 + 56);
    swift_bridgeObjectRetain();
    v129(v112, 0, 1, v81);
    uint64_t v87 = v606;
  }
  uint64_t v33 = v599;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v582 + 56))(v82, 0, 1, v85);
LABEL_148:
  uint64_t v207 = v87[15];
  uint64_t v208 = (void *)((char *)v5 + v207);
  uint64_t v209 = (void *)((char *)v84 + v207);
  *uint64_t v208 = *v209;
  v208[1] = v209[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v210 = v87[16];
  uint64_t v211 = (uint64_t)v5 + v210;
  uint64_t v212 = (uint64_t)v84 + v210;
  unsigned int v213 = v33((char *)v5 + v210, 1, v81);
  unsigned int v214 = v33(v212, 1, v81);
  if (!v213)
  {
    if (v214)
    {
      uint64_t v215 = v81;
      sub_232EA3DC4(v211, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_153;
    }
    *(unsigned char *)uint64_t v211 = *(unsigned char *)v212;
    *(void *)(v211 + 8) = *(void *)(v212 + 8);
    *(_WORD *)(v211 + 16) = *(_WORD *)(v212 + 16);
    *(_WORD *)(v211 + 18) = *(_WORD *)(v212 + 18);
    uint64_t v221 = (long long *)(v211 + 24);
    uint64_t v222 = (long long *)(v212 + 24);
    uint64_t v223 = *(void *)(v212 + 56);
    if (*(void *)(v211 + 56) == 1)
    {
      if (v223 == 1)
      {
        long long v224 = *v222;
        long long v225 = *(_OWORD *)(v212 + 40);
        *(void *)(v211 + 56) = *(void *)(v212 + 56);
        *uint64_t v221 = v224;
        *(_OWORD *)(v211 + 40) = v225;
      }
      else
      {
        *(unsigned char *)(v211 + 24) = *(unsigned char *)(v212 + 24);
        *(unsigned char *)(v211 + 25) = *(unsigned char *)(v212 + 25);
        *(unsigned char *)(v211 + 26) = *(unsigned char *)(v212 + 26);
        long long v239 = *(_OWORD *)(v212 + 28);
        *(_DWORD *)(v211 + 44) = *(_DWORD *)(v212 + 44);
        *(_OWORD *)(v211 + 28) = v239;
        *(void *)(v211 + 48) = *(void *)(v212 + 48);
        *(void *)(v211 + 56) = *(void *)(v212 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v223 == 1)
    {
      sub_232F0434C(v211 + 24);
      uint64_t v237 = *(void *)(v212 + 56);
      long long v238 = *(_OWORD *)(v212 + 40);
      *uint64_t v221 = *v222;
      *(_OWORD *)(v211 + 40) = v238;
      *(void *)(v211 + 56) = v237;
    }
    else
    {
      *(unsigned char *)(v211 + 24) = *(unsigned char *)(v212 + 24);
      *(unsigned char *)(v211 + 25) = *(unsigned char *)(v212 + 25);
      *(unsigned char *)(v211 + 26) = *(unsigned char *)(v212 + 26);
      *(_DWORD *)(v211 + 28) = *(_DWORD *)(v212 + 28);
      *(_WORD *)(v211 + 32) = *(_WORD *)(v212 + 32);
      *(_WORD *)(v211 + 34) = *(_WORD *)(v212 + 34);
      *(_WORD *)(v211 + 36) = *(_WORD *)(v212 + 36);
      *(_WORD *)(v211 + 38) = *(_WORD *)(v212 + 38);
      *(_WORD *)(v211 + 40) = *(_WORD *)(v212 + 40);
      *(_WORD *)(v211 + 42) = *(_WORD *)(v212 + 42);
      *(_WORD *)(v211 + 44) = *(_WORD *)(v212 + 44);
      *(_WORD *)(v211 + 46) = *(_WORD *)(v212 + 46);
      *(void *)(v211 + 48) = *(void *)(v212 + 48);
      *(void *)(v211 + 56) = *(void *)(v212 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v575 = v81;
    uint64_t v240 = *(int *)(v81 + 28);
    uint64_t v241 = (void *)(v211 + v240);
    uint64_t v242 = (const void *)(v212 + v240);
    uint64_t v243 = sub_23309B300();
    uint64_t v244 = *(void *)(v243 - 8);
    uint64_t v245 = *(uint64_t (**)(void, void, void))(v244 + 48);
    int v246 = v245(v241, 1, v243);
    int v247 = v245(v242, 1, v243);
    if (v246)
    {
      if (!v247)
      {
        (*(void (**)(void *, const void *, uint64_t))(v244 + 16))(v241, v242, v243);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v244 + 56))(v241, 0, 1, v243);
LABEL_174:
        uint64_t v87 = v606;
        uint64_t v33 = v599;
        uint64_t v85 = v593;
        uint64_t v215 = v575;
        uint64_t v249 = *(int *)(v575 + 32);
        uint64_t v250 = (void *)(v211 + v249);
        uint64_t v251 = (void *)(v212 + v249);
        void *v250 = *v251;
        v250[1] = v251[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_175;
      }
    }
    else
    {
      if (!v247)
      {
        (*(void (**)(void *, const void *, uint64_t))(v244 + 24))(v241, v242, v243);
        goto LABEL_174;
      }
      (*(void (**)(void *, uint64_t))(v244 + 8))(v241, v243);
    }
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v241, v242, *(void *)(*(void *)(v248 - 8) + 64));
    goto LABEL_174;
  }
  if (v214)
  {
    uint64_t v215 = v81;
LABEL_153:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v211, (const void *)v212, *(void *)(*(void *)(v216 - 8) + 64));
    goto LABEL_175;
  }
  *(unsigned char *)uint64_t v211 = *(unsigned char *)v212;
  uint64_t v217 = *(void *)(v212 + 8);
  *(_DWORD *)(v211 + 16) = *(_DWORD *)(v212 + 16);
  *(void *)(v211 + 8) = v217;
  uint64_t v218 = v85;
  if (*(void *)(v212 + 56) == 1)
  {
    long long v219 = *(_OWORD *)(v212 + 24);
    long long v220 = *(_OWORD *)(v212 + 40);
    *(void *)(v211 + 56) = *(void *)(v212 + 56);
    *(_OWORD *)(v211 + 24) = v219;
    *(_OWORD *)(v211 + 40) = v220;
  }
  else
  {
    *(unsigned char *)(v211 + 24) = *(unsigned char *)(v212 + 24);
    *(unsigned char *)(v211 + 25) = *(unsigned char *)(v212 + 25);
    *(unsigned char *)(v211 + 26) = *(unsigned char *)(v212 + 26);
    long long v226 = *(_OWORD *)(v212 + 28);
    *(_DWORD *)(v211 + 44) = *(_DWORD *)(v212 + 44);
    *(_OWORD *)(v211 + 28) = v226;
    *(void *)(v211 + 48) = *(void *)(v212 + 48);
    *(void *)(v211 + 56) = *(void *)(v212 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v227 = *(int *)(v81 + 28);
  uint64_t v228 = (void *)(v211 + v227);
  uint64_t v229 = (const void *)(v212 + v227);
  uint64_t v230 = sub_23309B300();
  uint64_t v231 = *(void *)(v230 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v231 + 48))(v229, 1, v230))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v228, v229, *(void *)(*(void *)(v232 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v231 + 16))(v228, v229, v230);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v231 + 56))(v228, 0, 1, v230);
  }
  uint64_t v87 = v606;
  uint64_t v33 = v599;
  uint64_t v85 = v218;
  uint64_t v233 = *(int *)(v81 + 32);
  uint64_t v234 = (void *)(v211 + v233);
  uint64_t v235 = (void *)(v212 + v233);
  *uint64_t v234 = *v235;
  v234[1] = v235[1];
  uint64_t v236 = *(void (**)(void, void, void, void))(v586 + 56);
  swift_bridgeObjectRetain();
  uint64_t v215 = v81;
  v236(v211, 0, 1, v81);
LABEL_175:
  uint64_t v252 = v87[17];
  uint64_t v253 = (char *)v607 + v252;
  __src = (char *)v5 + v252;
  int v254 = v584();
  uint64_t v591 = v253;
  uint64_t v255 = v253;
  uint64_t v256 = v85;
  int v257 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v584)(v255, 1, v85);
  if (!v254)
  {
    if (v257)
    {
      sub_232EA3DC4((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for Period);
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      size_t v259 = *(void *)(*(void *)(v261 - 8) + 64);
      uint64_t v260 = __src;
      goto LABEL_180;
    }
    uint64_t v262 = v215;
    unsigned int v267 = v33(__src, 1, v215);
    unsigned int v268 = v33(v591, 1, v215);
    if (v267)
    {
      if (v268)
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        size_t v270 = *(void *)(*(void *)(v269 - 8) + 64);
        uint64_t v271 = __src;
LABEL_190:
        uint64_t v276 = v591;
        memcpy(v271, v591, v270);
        uint64_t v263 = v607;
        goto LABEL_229;
      }
      uint64_t v271 = __src;
      char *__src = *v591;
      uint64_t v284 = *((void *)v591 + 1);
      *((_DWORD *)__src + 4) = *((_DWORD *)v591 + 4);
      *((void *)__src + 1) = v284;
      uint64_t v263 = v607;
      if (*((void *)v591 + 7) == 1)
      {
        long long v285 = *(_OWORD *)(v591 + 24);
        long long v286 = *(_OWORD *)(v591 + 40);
        *((void *)__src + 7) = *((void *)v591 + 7);
        *(_OWORD *)(__src + 24) = v285;
        *(_OWORD *)(__src + 40) = v286;
      }
      else
      {
        __src[24] = v591[24];
        __src[25] = v591[25];
        __src[26] = v591[26];
        long long v315 = *(_OWORD *)(v591 + 28);
        *((_DWORD *)__src + 11) = *((_DWORD *)v591 + 11);
        *(_OWORD *)(__src + 28) = v315;
        *((void *)__src + 6) = *((void *)v591 + 6);
        *((void *)__src + 7) = *((void *)v591 + 7);
        swift_bridgeObjectRetain();
      }
      uint64_t v316 = *(int *)(v262 + 28);
      uint64_t v317 = &__src[v316];
      int v318 = &v591[v316];
      uint64_t v319 = sub_23309B300();
      uint64_t v320 = *(void *)(v319 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v320 + 48))(v318, 1, v319))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v317, v318, *(void *)(*(void *)(v321 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v320 + 16))(v317, v318, v319);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v320 + 56))(v317, 0, 1, v319);
      }
      uint64_t v322 = *(int *)(v262 + 32);
      long long v323 = &__src[v322];
      long long v324 = &v591[v322];
      *(void *)long long v323 = *v324;
      *((void *)v323 + 1) = v324[1];
      uint64_t v325 = *(void (**)(void, void, void, void))(v586 + 56);
      swift_bridgeObjectRetain();
      v325(__src, 0, 1, v262);
      uint64_t v276 = v591;
      uint64_t v87 = v606;
      uint64_t v33 = v599;
LABEL_229:
      uint64_t v342 = *(int *)(v256 + 20);
      uint64_t v343 = (uint64_t)&v271[v342];
      uint64_t v344 = &v276[v342];
      unsigned int v345 = v33(&v271[v342], 1, v262);
      unsigned int v346 = v33(v344, 1, v262);
      if (v345)
      {
        if (!v346)
        {
          *(unsigned char *)uint64_t v343 = *v344;
          uint64_t v347 = *((void *)v344 + 1);
          *(_DWORD *)(v343 + 16) = *((_DWORD *)v344 + 4);
          *(void *)(v343 + 8) = v347;
          if (*((void *)v344 + 7) == 1)
          {
            long long v348 = *(_OWORD *)(v344 + 24);
            long long v349 = *(_OWORD *)(v344 + 40);
            *(void *)(v343 + 56) = *((void *)v344 + 7);
            *(_OWORD *)(v343 + 24) = v348;
            *(_OWORD *)(v343 + 40) = v349;
          }
          else
          {
            *(unsigned char *)(v343 + 24) = v344[24];
            *(unsigned char *)(v343 + 25) = v344[25];
            *(unsigned char *)(v343 + 26) = v344[26];
            long long v356 = *(_OWORD *)(v344 + 28);
            *(_DWORD *)(v343 + 44) = *((_DWORD *)v344 + 11);
            *(_OWORD *)(v343 + 28) = v356;
            *(void *)(v343 + 48) = *((void *)v344 + 6);
            *(void *)(v343 + 56) = *((void *)v344 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v357 = *(int *)(v262 + 28);
          uint64_t v358 = (void *)(v343 + v357);
          uint64_t v359 = &v344[v357];
          uint64_t v360 = sub_23309B300();
          uint64_t v361 = *(void *)(v360 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v361 + 48))(v359, 1, v360))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v358, v359, *(void *)(*(void *)(v362 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, unsigned char *, uint64_t))(v361 + 16))(v358, v359, v360);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v361 + 56))(v358, 0, 1, v360);
          }
          uint64_t v87 = v606;
          uint64_t v363 = *(int *)(v262 + 32);
          uint64_t v364 = (void *)(v343 + v363);
          long long v365 = &v344[v363];
          *uint64_t v364 = *v365;
          v364[1] = v365[1];
          uint64_t v366 = *(void (**)(void, void, void, void))(v586 + 56);
          swift_bridgeObjectRetain();
          v366(v343, 0, 1, v262);
          uint64_t v33 = v599;
          goto LABEL_258;
        }
LABEL_235:
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy((void *)v343, v344, *(void *)(*(void *)(v350 - 8) + 64));
        goto LABEL_258;
      }
      if (v346)
      {
        sub_232EA3DC4(v343, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
        goto LABEL_235;
      }
      *(unsigned char *)uint64_t v343 = *v344;
      *(void *)(v343 + 8) = *((void *)v344 + 1);
      *(_WORD *)(v343 + 16) = *((_WORD *)v344 + 8);
      *(_WORD *)(v343 + 18) = *((_WORD *)v344 + 9);
      uint64_t v351 = (long long *)(v343 + 24);
      uint64_t v352 = (long long *)(v344 + 24);
      uint64_t v353 = *((void *)v344 + 7);
      if (*(void *)(v343 + 56) == 1)
      {
        if (v353 == 1)
        {
          long long v354 = *v352;
          long long v355 = *(_OWORD *)(v344 + 40);
          *(void *)(v343 + 56) = *((void *)v344 + 7);
          *uint64_t v351 = v354;
          *(_OWORD *)(v343 + 40) = v355;
        }
        else
        {
          *(unsigned char *)(v343 + 24) = v344[24];
          *(unsigned char *)(v343 + 25) = v344[25];
          *(unsigned char *)(v343 + 26) = v344[26];
          long long v369 = *(_OWORD *)(v344 + 28);
          *(_DWORD *)(v343 + 44) = *((_DWORD *)v344 + 11);
          *(_OWORD *)(v343 + 28) = v369;
          *(void *)(v343 + 48) = *((void *)v344 + 6);
          *(void *)(v343 + 56) = *((void *)v344 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v353 == 1)
      {
        sub_232F0434C(v343 + 24);
        uint64_t v367 = *((void *)v344 + 7);
        long long v368 = *(_OWORD *)(v344 + 40);
        *uint64_t v351 = *v352;
        *(_OWORD *)(v343 + 40) = v368;
        *(void *)(v343 + 56) = v367;
      }
      else
      {
        *(unsigned char *)(v343 + 24) = v344[24];
        *(unsigned char *)(v343 + 25) = v344[25];
        *(unsigned char *)(v343 + 26) = v344[26];
        *(_DWORD *)(v343 + 28) = *((_DWORD *)v344 + 7);
        *(_WORD *)(v343 + 32) = *((_WORD *)v344 + 16);
        *(_WORD *)(v343 + 34) = *((_WORD *)v344 + 17);
        *(_WORD *)(v343 + 36) = *((_WORD *)v344 + 18);
        *(_WORD *)(v343 + 38) = *((_WORD *)v344 + 19);
        *(_WORD *)(v343 + 40) = *((_WORD *)v344 + 20);
        *(_WORD *)(v343 + 42) = *((_WORD *)v344 + 21);
        *(_WORD *)(v343 + 44) = *((_WORD *)v344 + 22);
        *(_WORD *)(v343 + 46) = *((_WORD *)v344 + 23);
        *(void *)(v343 + 48) = *((void *)v344 + 6);
        *(void *)(v343 + 56) = *((void *)v344 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      uint64_t v577 = v262;
      uint64_t v370 = *(int *)(v262 + 28);
      uint64_t v371 = (void *)(v343 + v370);
      uint64_t v372 = &v344[v370];
      uint64_t v373 = sub_23309B300();
      uint64_t v374 = *(void *)(v373 - 8);
      uint64_t v375 = *(uint64_t (**)(void, void, void))(v374 + 48);
      uint64_t v594 = v371;
      LODWORD(v371) = v375(v371, 1, v373);
      int v376 = v375(v372, 1, v373);
      if (v371)
      {
        uint64_t v33 = v599;
        if (!v376)
        {
          (*(void (**)(void *, unsigned char *, uint64_t))(v374 + 16))(v594, v372, v373);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v374 + 56))(v594, 0, 1, v373);
          goto LABEL_257;
        }
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        size_t v378 = *(void *)(*(void *)(v377 - 8) + 64);
        uint64_t v379 = v594;
      }
      else
      {
        uint64_t v33 = v599;
        if (!v376)
        {
          (*(void (**)(void *, unsigned char *, uint64_t))(v374 + 24))(v594, v372, v373);
          goto LABEL_257;
        }
        (*(void (**)(void *, uint64_t))(v374 + 8))(v594, v373);
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        size_t v378 = *(void *)(*(void *)(v380 - 8) + 64);
        uint64_t v379 = v594;
      }
      memcpy(v379, v372, v378);
LABEL_257:
      uint64_t v87 = v606;
      uint64_t v262 = v577;
      uint64_t v381 = *(int *)(v577 + 32);
      long long v382 = (void *)(v343 + v381);
      uint64_t v383 = &v344[v381];
      *long long v382 = *v383;
      v382[1] = v383[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_258;
    }
    if (v268)
    {
      uint64_t v271 = __src;
      sub_232EA3DC4((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      size_t v270 = *(void *)(*(void *)(v275 - 8) + 64);
      goto LABEL_190;
    }
    uint64_t v271 = __src;
    char *__src = *v591;
    *((void *)__src + 1) = *((void *)v591 + 1);
    *((_WORD *)__src + 8) = *((_WORD *)v591 + 8);
    *((_WORD *)__src + 9) = *((_WORD *)v591 + 9);
    uint64_t v310 = (long long *)(__src + 24);
    uint64_t v311 = (long long *)(v591 + 24);
    uint64_t v312 = *((void *)v591 + 7);
    if (*((void *)__src + 7) == 1)
    {
      if (v312 == 1)
      {
        long long v313 = *v311;
        long long v314 = *(_OWORD *)(v591 + 40);
        *((void *)__src + 7) = *((void *)v591 + 7);
        *uint64_t v310 = v313;
        *(_OWORD *)(__src + 40) = v314;
        uint64_t v263 = v607;
LABEL_219:
        uint64_t v328 = v591;
        goto LABEL_222;
      }
      uint64_t v328 = v591;
      __src[24] = v591[24];
      __src[25] = v591[25];
      __src[26] = v591[26];
      long long v329 = *(_OWORD *)(v591 + 28);
      *((_DWORD *)__src + 11) = *((_DWORD *)v591 + 11);
      *(_OWORD *)(__src + 28) = v329;
      *((void *)__src + 6) = *((void *)v591 + 6);
      *((void *)__src + 7) = *((void *)v591 + 7);
      swift_bridgeObjectRetain();
      uint64_t v263 = v607;
    }
    else
    {
      uint64_t v263 = v607;
      if (v312 == 1)
      {
        sub_232F0434C((uint64_t)(__src + 24));
        uint64_t v326 = *((void *)v591 + 7);
        long long v327 = *(_OWORD *)(v591 + 40);
        *uint64_t v310 = *v311;
        *(_OWORD *)(__src + 40) = v327;
        *((void *)__src + 7) = v326;
        goto LABEL_219;
      }
      uint64_t v328 = v591;
      __src[24] = v591[24];
      __src[25] = v591[25];
      __src[26] = v591[26];
      *((_DWORD *)__src + 7) = *((_DWORD *)v591 + 7);
      *((_WORD *)__src + 16) = *((_WORD *)v591 + 16);
      *((_WORD *)__src + 17) = *((_WORD *)v591 + 17);
      *((_WORD *)__src + 18) = *((_WORD *)v591 + 18);
      *((_WORD *)__src + 19) = *((_WORD *)v591 + 19);
      *((_WORD *)__src + 20) = *((_WORD *)v591 + 20);
      *((_WORD *)__src + 21) = *((_WORD *)v591 + 21);
      *((_WORD *)__src + 22) = *((_WORD *)v591 + 22);
      *((_WORD *)__src + 23) = *((_WORD *)v591 + 23);
      *((void *)__src + 6) = *((void *)v591 + 6);
      *((void *)__src + 7) = *((void *)v591 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
LABEL_222:
    uint64_t v576 = v262;
    uint64_t v330 = *(int *)(v262 + 28);
    uint64_t v331 = &__src[v330];
    uint64_t v332 = &v328[v330];
    uint64_t v333 = sub_23309B300();
    uint64_t v334 = *(void *)(v333 - 8);
    uint64_t v335 = *(uint64_t (**)(void, void, void))(v334 + 48);
    int v336 = v335(v331, 1, v333);
    int v337 = v335(v332, 1, v333);
    if (v336)
    {
      uint64_t v87 = v606;
      if (!v337)
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v334 + 16))(v331, v332, v333);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v331, 0, 1, v333);
LABEL_228:
        uint64_t v262 = v576;
        uint64_t v339 = *(int *)(v576 + 32);
        uint64_t v340 = &__src[v339];
        uint64_t v341 = &v591[v339];
        *(void *)uint64_t v340 = *v341;
        *((void *)v340 + 1) = v341[1];
        swift_bridgeObjectRetain();
        uint64_t v276 = v591;
        swift_bridgeObjectRelease();
        uint64_t v33 = v599;
        uint64_t v256 = v593;
        goto LABEL_229;
      }
    }
    else
    {
      uint64_t v87 = v606;
      if (!v337)
      {
        (*(void (**)(char *, unsigned char *, uint64_t))(v334 + 24))(v331, v332, v333);
        goto LABEL_228;
      }
      (*(void (**)(char *, uint64_t))(v334 + 8))(v331, v333);
    }
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v331, v332, *(void *)(*(void *)(v338 - 8) + 64));
    goto LABEL_228;
  }
  if (v257)
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v259 = *(void *)(*(void *)(v258 - 8) + 64);
    uint64_t v260 = __src;
LABEL_180:
    memcpy(v260, v591, v259);
    uint64_t v262 = v215;
    uint64_t v263 = v607;
    goto LABEL_258;
  }
  uint64_t v264 = v591;
  uint64_t v262 = v215;
  if (v33(v591, 1, v215))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v266 = __src;
    memcpy(__src, v591, *(void *)(*(void *)(v265 - 8) + 64));
    uint64_t v263 = v607;
  }
  else
  {
    uint64_t v266 = __src;
    char *__src = *v591;
    uint64_t v272 = *((void *)v591 + 1);
    *((_DWORD *)__src + 4) = *((_DWORD *)v591 + 4);
    *((void *)__src + 1) = v272;
    if (*((void *)v591 + 7) == 1)
    {
      long long v273 = *(_OWORD *)(v591 + 24);
      long long v274 = *(_OWORD *)(v591 + 40);
      *((void *)__src + 7) = *((void *)v591 + 7);
      *(_OWORD *)(__src + 24) = v273;
      *(_OWORD *)(__src + 40) = v274;
    }
    else
    {
      __src[24] = v591[24];
      __src[25] = v591[25];
      __src[26] = v591[26];
      long long v277 = *(_OWORD *)(v591 + 28);
      *((_DWORD *)__src + 11) = *((_DWORD *)v591 + 11);
      *(_OWORD *)(__src + 28) = v277;
      *((void *)__src + 6) = *((void *)v591 + 6);
      *((void *)__src + 7) = *((void *)v591 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v278 = *(int *)(v215 + 28);
    uint64_t v279 = &__src[v278];
    uint64_t v280 = &v591[v278];
    uint64_t v281 = sub_23309B300();
    uint64_t v282 = *(void *)(v281 - 8);
    uint64_t v263 = v607;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v279, v280, *(void *)(*(void *)(v283 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v282 + 16))(v279, v280, v281);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
    }
    uint64_t v85 = v256;
    uint64_t v287 = *(int *)(v262 + 32);
    uint64_t v288 = &__src[v287];
    uint64_t v289 = &v591[v287];
    *(void *)uint64_t v288 = *v289;
    *((void *)v288 + 1) = v289[1];
    uint64_t v290 = *(void (**)(void, void, void, void))(v586 + 56);
    swift_bridgeObjectRetain();
    v290(__src, 0, 1, v262);
    uint64_t v264 = v591;
    uint64_t v87 = v606;
  }
  uint64_t v291 = *(int *)(v85 + 20);
  uint64_t v292 = &v266[v291];
  uint64_t v293 = &v264[v291];
  if (v599(&v264[v291], 1, v262))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v292, v293, *(void *)(*(void *)(v294 - 8) + 64));
  }
  else
  {
    *uint64_t v292 = *v293;
    uint64_t v295 = *((void *)v293 + 1);
    *((_DWORD *)v292 + 4) = *((_DWORD *)v293 + 4);
    *((void *)v292 + 1) = v295;
    if (*((void *)v293 + 7) == 1)
    {
      long long v296 = *(_OWORD *)(v293 + 24);
      long long v297 = *(_OWORD *)(v293 + 40);
      *((void *)v292 + 7) = *((void *)v293 + 7);
      *(_OWORD *)(v292 + 24) = v296;
      *(_OWORD *)(v292 + 40) = v297;
    }
    else
    {
      v292[24] = v293[24];
      v292[25] = v293[25];
      v292[26] = v293[26];
      long long v298 = *(_OWORD *)(v293 + 28);
      *((_DWORD *)v292 + 11) = *((_DWORD *)v293 + 11);
      *(_OWORD *)(v292 + 28) = v298;
      *((void *)v292 + 6) = *((void *)v293 + 6);
      *((void *)v292 + 7) = *((void *)v293 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v299 = v262;
    uint64_t v300 = *(int *)(v262 + 28);
    uint64_t v301 = &v292[v300];
    uint64_t v302 = &v293[v300];
    uint64_t v303 = sub_23309B300();
    uint64_t v304 = *(void *)(v303 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v304 + 48))(v302, 1, v303))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v301, v302, *(void *)(*(void *)(v305 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v304 + 16))(v301, v302, v303);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v304 + 56))(v301, 0, 1, v303);
    }
    uint64_t v85 = v593;
    uint64_t v262 = v299;
    uint64_t v306 = *(int *)(v299 + 32);
    uint64_t v307 = &v292[v306];
    uint64_t v308 = &v293[v306];
    *(void *)uint64_t v307 = *v308;
    *((void *)v307 + 1) = v308[1];
    uint64_t v309 = *(void (**)(void, void, void, void))(v586 + 56);
    swift_bridgeObjectRetain();
    v309(v292, 0, 1, v262);
    uint64_t v87 = v606;
  }
  uint64_t v33 = v599;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v582 + 56))(__src, 0, 1, v85);
LABEL_258:
  uint64_t v384 = v87[18];
  uint64_t v385 = (void *)((char *)v5 + v384);
  uint64_t v386 = (void *)((char *)v263 + v384);
  void *v385 = *v386;
  v385[1] = v386[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v387 = v87[19];
  uint64_t v388 = (uint64_t)v5 + v387;
  uint64_t v389 = (uint64_t)v263 + v387;
  unsigned int v390 = v33((char *)v5 + v387, 1, v262);
  unsigned int v391 = v33(v389, 1, v262);
  if (!v390)
  {
    if (v391)
    {
      sub_232EA3DC4(v388, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_264;
    }
    *(unsigned char *)uint64_t v388 = *(unsigned char *)v389;
    *(void *)(v388 + 8) = *(void *)(v389 + 8);
    *(_WORD *)(v388 + 16) = *(_WORD *)(v389 + 16);
    *(_WORD *)(v388 + 18) = *(_WORD *)(v389 + 18);
    uint64_t v396 = (long long *)(v388 + 24);
    uint64_t v397 = (long long *)(v389 + 24);
    uint64_t v398 = *(void *)(v389 + 56);
    uint64_t v579 = v5;
    if (*(void *)(v388 + 56) == 1)
    {
      if (v398 == 1)
      {
        long long v399 = *v397;
        long long v400 = *(_OWORD *)(v389 + 40);
        *(void *)(v388 + 56) = *(void *)(v389 + 56);
        *uint64_t v396 = v399;
        *(_OWORD *)(v388 + 40) = v400;
      }
      else
      {
        *(unsigned char *)(v388 + 24) = *(unsigned char *)(v389 + 24);
        *(unsigned char *)(v388 + 25) = *(unsigned char *)(v389 + 25);
        *(unsigned char *)(v388 + 26) = *(unsigned char *)(v389 + 26);
        long long v414 = *(_OWORD *)(v389 + 28);
        *(_DWORD *)(v388 + 44) = *(_DWORD *)(v389 + 44);
        *(_OWORD *)(v388 + 28) = v414;
        *(void *)(v388 + 48) = *(void *)(v389 + 48);
        *(void *)(v388 + 56) = *(void *)(v389 + 56);
        swift_bridgeObjectRetain();
      }
    }
    else if (v398 == 1)
    {
      sub_232F0434C(v388 + 24);
      uint64_t v412 = *(void *)(v389 + 56);
      long long v413 = *(_OWORD *)(v389 + 40);
      *uint64_t v396 = *v397;
      *(_OWORD *)(v388 + 40) = v413;
      *(void *)(v388 + 56) = v412;
    }
    else
    {
      *(unsigned char *)(v388 + 24) = *(unsigned char *)(v389 + 24);
      *(unsigned char *)(v388 + 25) = *(unsigned char *)(v389 + 25);
      *(unsigned char *)(v388 + 26) = *(unsigned char *)(v389 + 26);
      *(_DWORD *)(v388 + 28) = *(_DWORD *)(v389 + 28);
      *(_WORD *)(v388 + 32) = *(_WORD *)(v389 + 32);
      *(_WORD *)(v388 + 34) = *(_WORD *)(v389 + 34);
      *(_WORD *)(v388 + 36) = *(_WORD *)(v389 + 36);
      *(_WORD *)(v388 + 38) = *(_WORD *)(v389 + 38);
      *(_WORD *)(v388 + 40) = *(_WORD *)(v389 + 40);
      *(_WORD *)(v388 + 42) = *(_WORD *)(v389 + 42);
      *(_WORD *)(v388 + 44) = *(_WORD *)(v389 + 44);
      *(_WORD *)(v388 + 46) = *(_WORD *)(v389 + 46);
      *(void *)(v388 + 48) = *(void *)(v389 + 48);
      *(void *)(v388 + 56) = *(void *)(v389 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v578 = v262;
    uint64_t v415 = *(int *)(v262 + 28);
    uint64_t v416 = (void *)(v388 + v415);
    uint64_t v417 = (const void *)(v389 + v415);
    uint64_t v418 = sub_23309B300();
    uint64_t v419 = *(void *)(v418 - 8);
    uint64_t v420 = *(uint64_t (**)(void, void, void))(v419 + 48);
    int v421 = v420(v416, 1, v418);
    int v422 = v420(v417, 1, v418);
    if (v421)
    {
      if (!v422)
      {
        (*(void (**)(void *, const void *, uint64_t))(v419 + 16))(v416, v417, v418);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v419 + 56))(v416, 0, 1, v418);
LABEL_283:
        uint64_t v87 = v606;
        uint64_t v5 = v579;
        uint64_t v424 = *(int *)(v578 + 32);
        uint64_t v425 = (void *)(v388 + v424);
        long long v426 = (void *)(v389 + v424);
        *uint64_t v425 = *v426;
        v425[1] = v426[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_284;
      }
    }
    else
    {
      if (!v422)
      {
        (*(void (**)(void *, const void *, uint64_t))(v419 + 24))(v416, v417, v418);
        goto LABEL_283;
      }
      (*(void (**)(void *, uint64_t))(v419 + 8))(v416, v418);
    }
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v416, v417, *(void *)(*(void *)(v423 - 8) + 64));
    goto LABEL_283;
  }
  if (v391)
  {
LABEL_264:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v388, (const void *)v389, *(void *)(*(void *)(v395 - 8) + 64));
    goto LABEL_284;
  }
  *(unsigned char *)uint64_t v388 = *(unsigned char *)v389;
  uint64_t v392 = *(void *)(v389 + 8);
  *(_DWORD *)(v388 + 16) = *(_DWORD *)(v389 + 16);
  *(void *)(v388 + 8) = v392;
  if (*(void *)(v389 + 56) == 1)
  {
    long long v393 = *(_OWORD *)(v389 + 24);
    long long v394 = *(_OWORD *)(v389 + 40);
    *(void *)(v388 + 56) = *(void *)(v389 + 56);
    *(_OWORD *)(v388 + 24) = v393;
    *(_OWORD *)(v388 + 40) = v394;
  }
  else
  {
    *(unsigned char *)(v388 + 24) = *(unsigned char *)(v389 + 24);
    *(unsigned char *)(v388 + 25) = *(unsigned char *)(v389 + 25);
    *(unsigned char *)(v388 + 26) = *(unsigned char *)(v389 + 26);
    long long v401 = *(_OWORD *)(v389 + 28);
    *(_DWORD *)(v388 + 44) = *(_DWORD *)(v389 + 44);
    *(_OWORD *)(v388 + 28) = v401;
    *(void *)(v388 + 48) = *(void *)(v389 + 48);
    *(void *)(v388 + 56) = *(void *)(v389 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v402 = *(int *)(v262 + 28);
  uint64_t v403 = (void *)(v388 + v402);
  uint64_t v404 = (const void *)(v389 + v402);
  uint64_t v405 = sub_23309B300();
  uint64_t v406 = *(void *)(v405 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v406 + 48))(v404, 1, v405))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v403, v404, *(void *)(*(void *)(v407 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v406 + 16))(v403, v404, v405);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v406 + 56))(v403, 0, 1, v405);
  }
  uint64_t v87 = v606;
  uint64_t v408 = *(int *)(v262 + 32);
  uint64_t v409 = (void *)(v388 + v408);
  uint64_t v410 = (void *)(v389 + v408);
  void *v409 = *v410;
  v409[1] = v410[1];
  uint64_t v411 = *(void (**)(void, void, void, void))(v586 + 56);
  swift_bridgeObjectRetain();
  v411(v388, 0, 1, v262);
LABEL_284:
  uint64_t v427 = v87[20];
  uint64_t v428 = (long long *)((char *)v5 + v427);
  uint64_t v429 = (void *)((char *)v263 + v427);
  uint64_t v430 = type metadata accessor for Reference();
  uint64_t v431 = *(void **)(v430 - 8);
  uint64_t v432 = (uint64_t (*)(void, void, void))v431[6];
  int v433 = v432(v428, 1, v430);
  int v434 = v432(v429, 1, v430);
  if (!v433)
  {
    if (v434)
    {
      sub_232EA3DC4((uint64_t)v428, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_290;
    }
    uint64_t v604 = v431;
    *(void *)uint64_t v428 = *v429;
    *((void *)v428 + 1) = v429[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v428 + 2) = v429[2];
    *((void *)v428 + 3) = v429[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v446 = *(int *)(v430 + 24);
    uint64_t v447 = (long long *)((char *)v428 + v446);
    uint64_t v448 = (void *)((char *)v429 + v446);
    uint64_t v449 = type metadata accessor for Identifier();
    uint64_t v592 = *(void **)(v449 - 8);
    uint64_t v450 = (uint64_t (*)(void, void, void))v592[6];
    __srca = v447;
    LODWORD(v447) = v450(v447, 1, v449);
    uint64_t v601 = v448;
    uint64_t v595 = v449;
    int v451 = v450(v448, 1, v449);
    if (v447)
    {
      uint64_t v87 = v606;
      if (v451)
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(__srca, v448, *(void *)(*(void *)(v452 - 8) + 64));
        uint64_t v431 = v604;
      }
      else
      {
        *(void *)__srca = *v448;
        *((void *)__srca + 1) = v448[1];
        uint64_t v466 = v448[3];
        swift_bridgeObjectRetain();
        if (v466 == 1)
        {
          long long v467 = *((_OWORD *)v448 + 1);
          *((void *)__srca + 4) = v448[4];
          __srca[1] = v467;
        }
        else
        {
          *((void *)__srca + 2) = v448[2];
          *((void *)__srca + 3) = v448[3];
          *((void *)__srca + 4) = v448[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v525 = *(int *)(v449 + 24);
        uint64_t v587 = (char *)__srca + v525;
        long long v526 = (char *)v448 + v525;
        uint64_t v527 = sub_23309AF80();
        uint64_t v583 = *(void *)(v527 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v583 + 48))(v526, 1, v527))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v587, v526, *(void *)(*(void *)(v528 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v583 + 16))(v587, v526, v527);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v583 + 56))(v587, 0, 1, v527);
        }
        uint64_t v535 = *(int *)(v595 + 28);
        long long v536 = (void *)((char *)__srca + v535);
        uint64_t v537 = (void *)((char *)v448 + v535);
        *long long v536 = *v537;
        v536[1] = v537[1];
        uint64_t v538 = (void (*)(void, void, void, void))v592[7];
        swift_bridgeObjectRetain();
        v538(__srca, 0, 1, v595);
        uint64_t v431 = v604;
      }
      goto LABEL_307;
    }
    uint64_t v431 = v604;
    uint64_t v87 = v606;
    if (v451)
    {
      sub_232EA3DC4((uint64_t)__srca, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v443 = *(void *)(*(void *)(v455 - 8) + 64);
      long long v444 = __srca;
      uint64_t v445 = v448;
      goto LABEL_291;
    }
    *(void *)__srca = *v448;
    *((void *)__srca + 1) = v448[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v517 = __srca + 1;
    uint64_t v518 = (long long *)(v448 + 2);
    uint64_t v519 = v448[3];
    if (*((void *)__srca + 3) == 1)
    {
      if (v519 == 1)
      {
        long long v520 = *v518;
        *((void *)__srca + 4) = v448[4];
        *uint64_t v517 = v520;
      }
      else
      {
        *((void *)__srca + 2) = v448[2];
        *((void *)__srca + 3) = v448[3];
        *((void *)__srca + 4) = v448[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v519 == 1)
    {
      sub_232F042F8((uint64_t)(__srca + 1));
      uint64_t v543 = v448[4];
      *uint64_t v517 = *v518;
      *((void *)__srca + 4) = v543;
    }
    else
    {
      *((void *)__srca + 2) = v448[2];
      *((void *)__srca + 3) = v448[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)__srca + 4) = v448[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v545 = *(int *)(v595 + 24);
    uint64_t v546 = (char *)__srca + v545;
    uint64_t v547 = (char *)v448 + v545;
    uint64_t v548 = sub_23309AF80();
    uint64_t v585 = *(void *)(v548 - 8);
    uint64_t v549 = *(uint64_t (**)(void, void, void))(v585 + 48);
    uint64_t v588 = v546;
    LODWORD(v546) = v549(v546, 1, v548);
    int v550 = v549(v547, 1, v548);
    if (v546)
    {
      uint64_t v431 = v604;
      if (!v550)
      {
        (*(void (**)(void *, char *, uint64_t))(v585 + 16))(v588, v547, v548);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v585 + 56))(v588, 0, 1, v548);
        goto LABEL_371;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v552 = *(void *)(*(void *)(v551 - 8) + 64);
      uint64_t v553 = v588;
    }
    else
    {
      uint64_t v431 = v604;
      if (!v550)
      {
        (*(void (**)(void *, char *, uint64_t))(v585 + 24))(v588, v547, v548);
        goto LABEL_371;
      }
      (*(void (**)(void *, uint64_t))(v585 + 8))(v588, v548);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v552 = *(void *)(*(void *)(v554 - 8) + 64);
      uint64_t v553 = v588;
    }
    memcpy(v553, v547, v552);
LABEL_371:
    uint64_t v566 = *(int *)(v595 + 28);
    uint64_t v567 = (void *)((char *)__srca + v566);
    uint64_t v568 = (void *)((char *)v601 + v566);
    void *v567 = *v568;
    v567[1] = v568[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v87 = v606;
    goto LABEL_307;
  }
  if (v434)
  {
LABEL_290:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v443 = *(void *)(*(void *)(v442 - 8) + 64);
    long long v444 = v428;
    uint64_t v445 = v429;
LABEL_291:
    memcpy(v444, v445, v443);
    goto LABEL_307;
  }
  uint64_t v600 = v432;
  uint64_t v580 = v5;
  uint64_t v603 = v431;
  *(void *)uint64_t v428 = *v429;
  *((void *)v428 + 1) = v429[1];
  *((void *)v428 + 2) = v429[2];
  *((void *)v428 + 3) = v429[3];
  uint64_t v435 = *(int *)(v430 + 24);
  uint64_t v436 = (void *)((char *)v428 + v435);
  uint64_t v437 = (void *)((char *)v429 + v435);
  uint64_t v438 = type metadata accessor for Identifier();
  uint64_t v439 = *(void *)(v438 - 8);
  uint64_t v440 = *(unsigned int (**)(void, void, void))(v439 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v440(v437, 1, v438))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v436, v437, *(void *)(*(void *)(v441 - 8) + 64));
    uint64_t v263 = v607;
    uint64_t v431 = v603;
    uint64_t v87 = v606;
    uint64_t v5 = v580;
  }
  else
  {
    uint64_t v596 = v439;
    void *v436 = *v437;
    v436[1] = v437[1];
    uint64_t v453 = v437[3];
    swift_bridgeObjectRetain();
    if (v453 == 1)
    {
      long long v454 = *((_OWORD *)v437 + 1);
      v436[4] = v437[4];
      *((_OWORD *)v436 + 1) = v454;
    }
    else
    {
      v436[2] = v437[2];
      v436[3] = v437[3];
      v436[4] = v437[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v456 = v438;
    uint64_t v457 = *(int *)(v438 + 24);
    uint64_t v458 = v436;
    uint64_t v459 = (char *)v436 + v457;
    uint64_t v460 = (char *)v437 + v457;
    uint64_t v461 = sub_23309AF80();
    uint64_t v462 = *(void *)(v461 - 8);
    uint64_t v463 = v460;
    int v464 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v462 + 48))(v460, 1, v461);
    uint64_t v431 = v603;
    if (v464)
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v459, v463, *(void *)(*(void *)(v465 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v462 + 16))(v459, v463, v461);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v462 + 56))(v459, 0, 1, v461);
    }
    uint64_t v87 = v606;
    uint64_t v5 = v580;
    uint64_t v468 = *(int *)(v456 + 28);
    uint64_t v469 = v458;
    uint64_t v470 = (void *)((char *)v458 + v468);
    long long v471 = (void *)((char *)v437 + v468);
    *uint64_t v470 = *v471;
    v470[1] = v471[1];
    uint64_t v472 = *(void (**)(void, void, void, void))(v596 + 56);
    swift_bridgeObjectRetain();
    v472(v469, 0, 1, v456);
    uint64_t v263 = v607;
  }
  uint64_t v432 = v600;
  ((void (*)(long long *, void, uint64_t, uint64_t))v431[7])(v428, 0, 1, v430);
LABEL_307:
  uint64_t v473 = v87[21];
  uint64_t v474 = (long long *)((char *)v5 + v473);
  uint64_t v475 = (long long *)((char *)v263 + v473);
  int v476 = v432((char *)v5 + v473, 1, v430);
  int v477 = v432(v475, 1, v430);
  if (!v476)
  {
    if (v477)
    {
      sub_232EA3DC4((uint64_t)v474, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_313;
    }
    *(void *)uint64_t v474 = *(void *)v475;
    *((void *)v474 + 1) = *((void *)v475 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v474 + 2) = *((void *)v475 + 2);
    *((void *)v474 + 3) = *((void *)v475 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v489 = *(int *)(v430 + 24);
    uint64_t v490 = (long long *)((char *)v474 + v489);
    long long v491 = (long long *)((char *)v475 + v489);
    uint64_t v492 = type metadata accessor for Identifier();
    uint64_t v493 = *(void *)(v492 - 8);
    uint64_t v494 = *(uint64_t (**)(void, void, void))(v493 + 48);
    int v495 = v494(v490, 1, v492);
    int v496 = v494(v491, 1, v492);
    if (v495)
    {
      uint64_t v263 = v607;
      if (v496)
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v490, v491, *(void *)(*(void *)(v497 - 8) + 64));
        uint64_t v87 = v606;
      }
      else
      {
        *(void *)uint64_t v490 = *(void *)v491;
        *((void *)v490 + 1) = *((void *)v491 + 1);
        uint64_t v507 = *((void *)v491 + 3);
        swift_bridgeObjectRetain();
        if (v507 == 1)
        {
          long long v508 = v491[1];
          *((void *)v490 + 4) = *((void *)v491 + 4);
          v490[1] = v508;
        }
        else
        {
          *((void *)v490 + 2) = *((void *)v491 + 2);
          *((void *)v490 + 3) = *((void *)v491 + 3);
          *((void *)v490 + 4) = *((void *)v491 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v529 = *(int *)(v492 + 24);
        uint64_t v530 = (char *)v490 + v529;
        long long v531 = (char *)v491 + v529;
        uint64_t v532 = sub_23309AF80();
        uint64_t v533 = *(void *)(v532 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v533 + 48))(v531, 1, v532))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v530, v531, *(void *)(*(void *)(v534 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v533 + 16))(v530, v531, v532);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v533 + 56))(v530, 0, 1, v532);
        }
        uint64_t v539 = *(int *)(v492 + 28);
        uint64_t v540 = (void *)((char *)v490 + v539);
        uint64_t v541 = (void *)((char *)v491 + v539);
        void *v540 = *v541;
        v540[1] = v541[1];
        uint64_t v542 = *(void (**)(void, void, void, void))(v493 + 56);
        swift_bridgeObjectRetain();
        v542(v490, 0, 1, v492);
        uint64_t v263 = v607;
        uint64_t v87 = v606;
      }
      goto LABEL_330;
    }
    uint64_t v263 = v607;
    uint64_t v87 = v606;
    if (v496)
    {
      sub_232EA3DC4((uint64_t)v490, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v486 = *(void *)(*(void *)(v500 - 8) + 64);
      uint64_t v487 = v490;
      uint64_t v488 = v491;
      goto LABEL_314;
    }
    *(void *)uint64_t v490 = *(void *)v491;
    *((void *)v490 + 1) = *((void *)v491 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v521 = v490 + 1;
    uint64_t v522 = v491 + 1;
    uint64_t v523 = *((void *)v491 + 3);
    if (*((void *)v490 + 3) == 1)
    {
      if (v523 == 1)
      {
        long long v524 = *v522;
        *((void *)v490 + 4) = *((void *)v491 + 4);
        long long *v521 = v524;
      }
      else
      {
        *((void *)v490 + 2) = *((void *)v491 + 2);
        *((void *)v490 + 3) = *((void *)v491 + 3);
        *((void *)v490 + 4) = *((void *)v491 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v523 == 1)
    {
      sub_232F042F8((uint64_t)(v490 + 1));
      uint64_t v544 = *((void *)v491 + 4);
      long long *v521 = *v522;
      *((void *)v490 + 4) = v544;
    }
    else
    {
      *((void *)v490 + 2) = *((void *)v491 + 2);
      *((void *)v490 + 3) = *((void *)v491 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v490 + 4) = *((void *)v491 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v555 = *(int *)(v492 + 24);
    uint64_t v556 = (char *)v490 + v555;
    uint64_t v557 = (char *)v491 + v555;
    uint64_t v558 = sub_23309AF80();
    uint64_t v559 = *(void *)(v558 - 8);
    uint64_t v560 = *(uint64_t (**)(void, void, void))(v559 + 48);
    uint64_t v602 = v556;
    LODWORD(v556) = v560(v556, 1, v558);
    int v561 = v560(v557, 1, v558);
    if (v556)
    {
      uint64_t v263 = v607;
      if (!v561)
      {
        (*(void (**)(void *, char *, uint64_t))(v559 + 16))(v602, v557, v558);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v559 + 56))(v602, 0, 1, v558);
        goto LABEL_373;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v563 = *(void *)(*(void *)(v562 - 8) + 64);
      uint64_t v564 = v602;
    }
    else
    {
      uint64_t v263 = v607;
      if (!v561)
      {
        (*(void (**)(void *, char *, uint64_t))(v559 + 24))(v602, v557, v558);
        goto LABEL_373;
      }
      (*(void (**)(void *, uint64_t))(v559 + 8))(v602, v558);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v563 = *(void *)(*(void *)(v565 - 8) + 64);
      uint64_t v564 = v602;
    }
    memcpy(v564, v557, v563);
LABEL_373:
    uint64_t v87 = v606;
    uint64_t v569 = *(int *)(v492 + 28);
    uint64_t v570 = (void *)((char *)v490 + v569);
    uint64_t v571 = (void *)((char *)v491 + v569);
    void *v570 = *v571;
    v570[1] = v571[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_330;
  }
  if (v477)
  {
LABEL_313:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v486 = *(void *)(*(void *)(v485 - 8) + 64);
    uint64_t v487 = v474;
    uint64_t v488 = v475;
LABEL_314:
    memcpy(v487, v488, v486);
    goto LABEL_330;
  }
  uint64_t v581 = v5;
  uint64_t v605 = v431;
  *(void *)uint64_t v474 = *(void *)v475;
  *((void *)v474 + 1) = *((void *)v475 + 1);
  *((void *)v474 + 2) = *((void *)v475 + 2);
  *((void *)v474 + 3) = *((void *)v475 + 3);
  uint64_t v478 = *(int *)(v430 + 24);
  uint64_t v479 = (void *)((char *)v474 + v478);
  uint64_t v480 = (void *)((char *)v475 + v478);
  uint64_t v481 = type metadata accessor for Identifier();
  uint64_t v482 = *(void *)(v481 - 8);
  uint64_t v483 = *(unsigned int (**)(void, void, void))(v482 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v483(v480, 1, v481))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v479, v480, *(void *)(*(void *)(v484 - 8) + 64));
    uint64_t v263 = v607;
    uint64_t v87 = v606;
  }
  else
  {
    *uint64_t v479 = *v480;
    v479[1] = v480[1];
    uint64_t v498 = v480[3];
    swift_bridgeObjectRetain();
    if (v498 == 1)
    {
      long long v499 = *((_OWORD *)v480 + 1);
      v479[4] = v480[4];
      *((_OWORD *)v479 + 1) = v499;
    }
    else
    {
      v479[2] = v480[2];
      v479[3] = v480[3];
      v479[4] = v480[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v501 = *(int *)(v481 + 24);
    uint64_t v502 = (char *)v479 + v501;
    uint64_t v503 = (char *)v480 + v501;
    uint64_t v504 = sub_23309AF80();
    uint64_t v505 = *(void *)(v504 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v505 + 48))(v503, 1, v504))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v502, v503, *(void *)(*(void *)(v506 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v505 + 16))(v502, v503, v504);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v505 + 56))(v502, 0, 1, v504);
    }
    uint64_t v87 = v606;
    uint64_t v509 = *(int *)(v481 + 28);
    uint64_t v510 = (void *)((char *)v479 + v509);
    uint64_t v511 = (void *)((char *)v480 + v509);
    *uint64_t v510 = *v511;
    v510[1] = v511[1];
    uint64_t v512 = *(void (**)(void, void, void, void))(v482 + 56);
    swift_bridgeObjectRetain();
    v512(v479, 0, 1, v481);
    uint64_t v263 = v607;
  }
  uint64_t v5 = v581;
  (*((void (**)(long long *, void, uint64_t, uint64_t))v605 + 7))(v474, 0, 1, v430);
LABEL_330:
  *(void *)((char *)v5 + v87[22]) = *(void *)((char *)v263 + v87[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v513 = v87[23];
  uint64_t v514 = (void *)((char *)v5 + v513);
  uint64_t v515 = (void *)((char *)v263 + v513);
  *uint64_t v514 = *v515;
  v514[1] = v515[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_232F042A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_232F042F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_232F0434C(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for ModelsR4.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  long long v8 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v8;
  long long v9 = *(_OWORD *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = a3[13];
  long long v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  *(_OWORD *)(a1 + 120) = v9;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(void, void, void))(v15 + 48);
  uint64_t v136 = v3;
  uint64_t v137 = v16;
  uint64_t v133 = v15;
  if (v16(v13, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *long long v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
    *((void *)v12 + 7) = *((void *)v13 + 7);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = &v12[v18];
    long long v20 = &v13[v18];
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
    uint64_t v15 = v133;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v12, 0, 1, v14);
    uint64_t v3 = v136;
    uint64_t v16 = v137;
  }
  uint64_t v24 = v3[14];
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Period();
  uint64_t v125 = *(void *)(v27 - 8);
  __dst = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v125 + 48);
  uint64_t v126 = v27;
  if (__dst(v26, 1, v27))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    if (v16(v26, 1, v14))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *uint64_t v25 = *v26;
      *((void *)v25 + 1) = *((void *)v26 + 1);
      *((_DWORD *)v25 + 4) = *((_DWORD *)v26 + 4);
      *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
      *(_OWORD *)(v25 + 40) = *(_OWORD *)(v26 + 40);
      *((void *)v25 + 7) = *((void *)v26 + 7);
      uint64_t v30 = *(int *)(v14 + 28);
      uint64_t v31 = &v25[v30];
      uint64_t v32 = &v26[v30];
      uint64_t v33 = sub_23309B300();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 32))(v31, v32, v33);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      *(_OWORD *)&v25[*(int *)(v14 + 32)] = *(_OWORD *)&v26[*(int *)(v14 + 32)];
      uint64_t v15 = v133;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v25, 0, 1, v14);
      uint64_t v3 = v136;
      uint64_t v27 = v126;
    }
    uint64_t v36 = *(int *)(v27 + 20);
    uint64_t v37 = &v25[v36];
    uint64_t v38 = &v26[v36];
    if (v137(v38, 1, v14))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      *uint64_t v37 = *v38;
      *((void *)v37 + 1) = *((void *)v38 + 1);
      *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
      *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
      *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
      *((void *)v37 + 7) = *((void *)v38 + 7);
      uint64_t v40 = *(int *)(v14 + 28);
      uint64_t v124 = &v37[v40];
      uint64_t v41 = &v38[v40];
      uint64_t v42 = sub_23309B300();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v124, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 32))(v124, v41, v42);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v124, 0, 1, v42);
      }
      uint64_t v15 = v133;
      uint64_t v3 = v136;
      *(_OWORD *)&v37[*(int *)(v14 + 32)] = *(_OWORD *)&v38[*(int *)(v14 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v37, 0, 1, v14);
      uint64_t v27 = v126;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v125 + 56))(v25, 0, 1, v27);
    uint64_t v16 = v137;
  }
  uint64_t v45 = v3[16];
  *(_OWORD *)(a1 + v3[15]) = *(_OWORD *)(a2 + v3[15]);
  long long v46 = (unsigned char *)(a1 + v45);
  uint64_t v47 = (unsigned char *)(a2 + v45);
  if (v16(a2 + v45, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    *long long v46 = *v47;
    *((void *)v46 + 1) = *((void *)v47 + 1);
    *((_DWORD *)v46 + 4) = *((_DWORD *)v47 + 4);
    *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
    *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
    *((void *)v46 + 7) = *((void *)v47 + 7);
    uint64_t v49 = *(int *)(v14 + 28);
    uint64_t v50 = &v46[v49];
    uint64_t v51 = &v47[v49];
    uint64_t v52 = sub_23309B300();
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
    }
    uint64_t v27 = v126;
    *(_OWORD *)&v46[*(int *)(v14 + 32)] = *(_OWORD *)&v47[*(int *)(v14 + 32)];
    uint64_t v15 = v133;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v46, 0, 1, v14);
    uint64_t v3 = v136;
    uint64_t v16 = v137;
  }
  uint64_t v55 = v3[17];
  long long v56 = (unsigned char *)(a1 + v55);
  uint64_t v57 = (unsigned char *)(a2 + v55);
  if (__dst((unsigned char *)(a2 + v55), 1, v27))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    if (v16(v57, 1, v14))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      unsigned char *v56 = *v57;
      *((void *)v56 + 1) = *((void *)v57 + 1);
      *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
      *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
      *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
      *((void *)v56 + 7) = *((void *)v57 + 7);
      uint64_t v60 = *(int *)(v14 + 28);
      uint64_t v61 = &v56[v60];
      uint64_t v62 = &v57[v60];
      uint64_t v63 = sub_23309B300();
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      uint64_t v27 = v126;
      *(_OWORD *)&v56[*(int *)(v14 + 32)] = *(_OWORD *)&v57[*(int *)(v14 + 32)];
      uint64_t v15 = v133;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v56, 0, 1, v14);
      uint64_t v3 = v136;
    }
    uint64_t v66 = *(int *)(v27 + 20);
    int v67 = &v56[v66];
    uint64_t v68 = &v57[v66];
    if (v137(v68, 1, v14))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      *int v67 = *v68;
      *((void *)v67 + 1) = *((void *)v68 + 1);
      *((_DWORD *)v67 + 4) = *((_DWORD *)v68 + 4);
      *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
      *(_OWORD *)(v67 + 40) = *(_OWORD *)(v68 + 40);
      *((void *)v67 + 7) = *((void *)v68 + 7);
      uint64_t v70 = *(int *)(v14 + 28);
      __dsta = &v67[v70];
      uint64_t v71 = &v68[v70];
      uint64_t v72 = sub_23309B300();
      uint64_t v73 = *(void *)(v72 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v71, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v73 + 32))(__dsta, v71, v72);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v73 + 56))(__dsta, 0, 1, v72);
      }
      uint64_t v15 = v133;
      uint64_t v3 = v136;
      *(_OWORD *)&v67[*(int *)(v14 + 32)] = *(_OWORD *)&v68[*(int *)(v14 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v133 + 56))(v67, 0, 1, v14);
      uint64_t v27 = v126;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v125 + 56))(v56, 0, 1, v27);
    uint64_t v16 = v137;
  }
  uint64_t v75 = v3[19];
  *(_OWORD *)(a1 + v3[18]) = *(_OWORD *)(a2 + v3[18]);
  uint64_t v76 = (unsigned char *)(a1 + v75);
  uint64_t v77 = (unsigned char *)(a2 + v75);
  if (v16(a2 + v75, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    unsigned char *v76 = *v77;
    *((void *)v76 + 1) = *((void *)v77 + 1);
    *((_DWORD *)v76 + 4) = *((_DWORD *)v77 + 4);
    *(_OWORD *)(v76 + 24) = *(_OWORD *)(v77 + 24);
    *(_OWORD *)(v76 + 40) = *(_OWORD *)(v77 + 40);
    *((void *)v76 + 7) = *((void *)v77 + 7);
    uint64_t v79 = *(int *)(v14 + 28);
    uint64_t v80 = &v76[v79];
    uint64_t v81 = &v77[v79];
    uint64_t v82 = sub_23309B300();
    uint64_t v83 = *(void *)(v82 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v83 + 32))(v80, v81, v82);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    *(_OWORD *)&v76[*(int *)(v14 + 32)] = *(_OWORD *)&v77[*(int *)(v14 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v76, 0, 1, v14);
    uint64_t v3 = v136;
  }
  uint64_t v85 = v3[20];
  uint64_t v86 = (_OWORD *)(a1 + v85);
  uint64_t v87 = (_OWORD *)(a2 + v85);
  uint64_t v88 = type metadata accessor for Reference();
  uint64_t v89 = *(void *)(v88 - 8);
  uint64_t v90 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v89 + 48);
  if (v90(v87, 1, v88))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v86, v87, *(void *)(*(void *)(v91 - 8) + 64));
  }
  else
  {
    uint64_t v138 = v89;
    long long v92 = v87[1];
    *uint64_t v86 = *v87;
    v86[1] = v92;
    uint64_t v93 = *(int *)(v88 + 24);
    long long v94 = (_OWORD *)((char *)v86 + v93);
    uint64_t v95 = (_OWORD *)((char *)v87 + v93);
    uint64_t v96 = type metadata accessor for Identifier();
    uint64_t v97 = *(void *)(v96 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
    }
    else
    {
      uint64_t v128 = v97;
      long long v99 = v95[1];
      _OWORD *v94 = *v95;
      v94[1] = v99;
      *((void *)v94 + 4) = *((void *)v95 + 4);
      uint64_t v100 = *(int *)(v96 + 24);
      long long v134 = (char *)v94 + v100;
      uint64_t v101 = (char *)v95 + v100;
      uint64_t v102 = sub_23309AF80();
      uint64_t v127 = *(void *)(v102 - 8);
      __dstb = v101;
      uint64_t v103 = v101;
      uint64_t v104 = v102;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v103, 1, v102))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v134, __dstb, *(void *)(*(void *)(v105 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v127 + 32))(v134, __dstb, v104);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v134, 0, 1, v104);
      }
      *(_OWORD *)((char *)v94 + *(int *)(v96 + 28)) = *(_OWORD *)((char *)v95 + *(int *)(v96 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v128 + 56))(v94, 0, 1, v96);
    }
    uint64_t v89 = v138;
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v138 + 56))(v86, 0, 1, v88);
    uint64_t v3 = v136;
  }
  uint64_t v106 = v3[21];
  uint64_t v107 = (_OWORD *)(a1 + v106);
  uint64_t v108 = (_OWORD *)(a2 + v106);
  if (v90((_OWORD *)(a2 + v106), 1, v88))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v107, v108, *(void *)(*(void *)(v109 - 8) + 64));
  }
  else
  {
    uint64_t v139 = v89;
    long long v110 = v108[1];
    *uint64_t v107 = *v108;
    v107[1] = v110;
    uint64_t v111 = *(int *)(v88 + 24);
    uint64_t v112 = (_OWORD *)((char *)v107 + v111);
    uint64_t v113 = (_OWORD *)((char *)v108 + v111);
    uint64_t v114 = type metadata accessor for Identifier();
    uint64_t v115 = *(void *)(v114 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      long long v117 = v113[1];
      _OWORD *v112 = *v113;
      v112[1] = v117;
      *((void *)v112 + 4) = *((void *)v113 + 4);
      uint64_t v118 = *(int *)(v114 + 24);
      long long v135 = (char *)v112 + v118;
      uint64_t v119 = (char *)v113 + v118;
      uint64_t v120 = sub_23309AF80();
      uint64_t v129 = *(void *)(v120 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v119, 1, v120))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v135, v119, *(void *)(*(void *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v135, v119, v120);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v135, 0, 1, v120);
      }
      *(_OWORD *)((char *)v112 + *(int *)(v114 + 28)) = *(_OWORD *)((char *)v113 + *(int *)(v114 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
      uint64_t v3 = v136;
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v139 + 56))(v107, 0, 1, v88);
  }
  uint64_t v122 = v3[23];
  *(void *)(a1 + v3[22]) = *(void *)(a2 + v3[22]);
  *(_OWORD *)(a1 + v122) = *(_OWORD *)(a2 + v122);
  return a1;
}

uint64_t assignWithTake for ModelsR4.Condition(uint64_t a1, void *a2, int *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = v4[3];
  *(void *)(a1 + 16) = v4[2];
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  long long v8 = (void *)(a1 + 32);
  uint64_t v9 = v4[4];
  if (*(void *)(a1 + 32) == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4(a1 + 32);
    uint64_t v9 = v4[4];
LABEL_4:
    *long long v8 = v9;
    goto LABEL_6;
  }
  *long long v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(void *)(a1 + 48) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v4 + 5);
    *(void *)(a1 + 56) = v4[7];
    goto LABEL_11;
  }
  uint64_t v10 = v4[6];
  if (v10 == 1)
  {
    sub_232F042F8(a1 + 40);
    goto LABEL_9;
  }
  *(void *)(a1 + 40) = v4[5];
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = v4[7];
  swift_bridgeObjectRelease();
LABEL_11:
  if (*(void *)(a1 + 72) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *((_OWORD *)v4 + 4);
    *(void *)(a1 + 80) = v4[10];
    goto LABEL_16;
  }
  uint64_t v11 = v4[9];
  if (v11 == 1)
  {
    sub_232F042F8(a1 + 64);
    goto LABEL_14;
  }
  *(void *)(a1 + 64) = v4[8];
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = v4[10];
  swift_bridgeObjectRelease();
LABEL_16:
  *(void *)(a1 + 88) = v4[11];
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) == 1)
  {
LABEL_19:
    *(_OWORD *)(a1 + 96) = *((_OWORD *)v4 + 6);
    *(void *)(a1 + 112) = v4[14];
    goto LABEL_21;
  }
  uint64_t v12 = v4[13];
  if (v12 == 1)
  {
    sub_232F042F8(a1 + 96);
    goto LABEL_19;
  }
  *(void *)(a1 + 96) = v4[12];
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = v4[14];
  swift_bridgeObjectRelease();
LABEL_21:
  if (*(void *)(a1 + 128) == 1)
  {
LABEL_24:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(v4 + 15);
    *(void *)(a1 + 136) = v4[17];
    goto LABEL_26;
  }
  uint64_t v13 = v4[16];
  if (v13 == 1)
  {
    sub_232F042F8(a1 + 120);
    goto LABEL_24;
  }
  *(void *)(a1 + 120) = v4[15];
  *(void *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = v4[17];
  swift_bridgeObjectRelease();
LABEL_26:
  *(void *)(a1 + 144) = v4[18];
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[13];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (char *)v4 + v14;
  uint64_t v17 = type metadata accessor for FHIRDateTime();
  uint64_t v418 = *(void *)(v17 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v418 + 48);
  int v19 = v18(v15, 1, v17);
  int v20 = v18((uint64_t)v16, 1, v17);
  uint64_t v430 = (int *)v17;
  int v434 = v4;
  int v422 = v18;
  uint64_t v435 = a3;
  if (!v19)
  {
    if (v20)
    {
      sub_232EA3DC4(v15, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_32;
    }
    *(unsigned char *)uint64_t v15 = *v16;
    *(void *)(v15 + 8) = *((void *)v16 + 1);
    *(_DWORD *)(v15 + 16) = *((_DWORD *)v16 + 4);
    if (*(void *)(v15 + 56) != 1)
    {
      uint64_t v28 = *((void *)v16 + 7);
      if (v28 != 1)
      {
        *(unsigned char *)(v15 + 24) = v16[24];
        *(_WORD *)(v15 + 25) = *(_WORD *)(v16 + 25);
        *(_DWORD *)(v15 + 28) = *((_DWORD *)v16 + 7);
        *(_OWORD *)(v15 + 32) = *((_OWORD *)v16 + 2);
        *(void *)(v15 + 48) = *((void *)v16 + 6);
        *(void *)(v15 + 56) = v28;
        swift_bridgeObjectRelease();
LABEL_40:
        uint64_t v30 = *(int *)(v17 + 28);
        uint64_t v31 = (void *)(v15 + v30);
        uint64_t v32 = &v16[v30];
        uint64_t v33 = sub_23309B300();
        uint64_t v34 = *(void *)(v33 - 8);
        uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
        long long v414 = v31;
        LODWORD(v31) = v35(v31, 1, v33);
        int v36 = v35(v32, 1, v33);
        if (v31)
        {
          if (!v36)
          {
            (*(void (**)(void *, char *, uint64_t))(v34 + 32))(v414, v32, v33);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v414, 0, 1, v33);
            goto LABEL_48;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v38 = *(void *)(*(void *)(v37 - 8) + 64);
          uint64_t v39 = v414;
        }
        else
        {
          if (!v36)
          {
            (*(void (**)(void *, char *, uint64_t))(v34 + 40))(v414, v32, v33);
            goto LABEL_48;
          }
          (*(void (**)(void *, uint64_t))(v34 + 8))(v414, v33);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v38 = *(void *)(*(void *)(v40 - 8) + 64);
          uint64_t v39 = v414;
        }
        memcpy(v39, v32, v38);
LABEL_48:
        a3 = v435;
        uint64_t v18 = v422;
        uint64_t v41 = *(int *)(v17 + 32);
        uint64_t v42 = (void *)(v15 + v41);
        uint64_t v43 = &v16[v41];
        uint64_t v45 = *(void *)v43;
        uint64_t v44 = *((void *)v43 + 1);
        *uint64_t v42 = v45;
        v42[1] = v44;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      sub_232F0434C(v15 + 24);
    }
    long long v29 = *(_OWORD *)(v16 + 40);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
    *(_OWORD *)(v15 + 40) = v29;
    *(void *)(v15 + 56) = *((void *)v16 + 7);
    goto LABEL_40;
  }
  if (v20)
  {
LABEL_32:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v15, v16, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_49;
  }
  *(unsigned char *)uint64_t v15 = *v16;
  *(void *)(v15 + 8) = *((void *)v16 + 1);
  *(_DWORD *)(v15 + 16) = *((_DWORD *)v16 + 4);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *(void *)(v15 + 56) = *((void *)v16 + 7);
  uint64_t v21 = *(int *)(v17 + 28);
  uint64_t v22 = (void *)(v15 + v21);
  uint64_t v23 = &v16[v21];
  uint64_t v24 = sub_23309B300();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  unint64_t v4 = v434;
  uint64_t v18 = v422;
  *(_OWORD *)(v15 + *(int *)(v17 + 32)) = *(_OWORD *)&v16[*(int *)(v17 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v418 + 56))(v15, 0, 1, v17);
LABEL_49:
  long long v46 = a3;
  uint64_t v47 = a3[14];
  uint64_t v424 = a1;
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (char *)v4 + v47;
  uint64_t v50 = type metadata accessor for Period();
  uint64_t v412 = *(void *)(v50 - 8);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v412 + 48);
  uint64_t v52 = v48;
  LODWORD(v48) = v51(v48, 1, v50);
  __src = (int *)v50;
  uint64_t v415 = (uint64_t (*)(uint64_t, uint64_t, int *))v51;
  int v53 = v51((uint64_t)v49, 1, v50);
  if (!v48)
  {
    if (v53)
    {
      sub_232EA3DC4(v52, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_55;
    }
    uint64_t v60 = v52;
    uint64_t v54 = v430;
    int v61 = v18(v52, 1, (uint64_t)v430);
    int v62 = v18((uint64_t)v49, 1, (uint64_t)v430);
    if (v61)
    {
      uint64_t v63 = __src;
      if (!v62)
      {
        *(unsigned char *)uint64_t v52 = *v49;
        *(void *)(v52 + 8) = *((void *)v49 + 1);
        *(_DWORD *)(v52 + 16) = *((_DWORD *)v49 + 4);
        *(_OWORD *)(v52 + 24) = *(_OWORD *)(v49 + 24);
        *(_OWORD *)(v52 + 40) = *(_OWORD *)(v49 + 40);
        *(void *)(v52 + 56) = *((void *)v49 + 7);
        uint64_t v64 = v430[7];
        uint64_t v65 = (void *)(v52 + v64);
        uint64_t v66 = &v49[v64];
        uint64_t v67 = sub_23309B300();
        uint64_t v68 = *(void *)(v67 - 8);
        uint64_t v57 = v424;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
        uint64_t v18 = v422;
        *(_OWORD *)(v60 + v430[8]) = *(_OWORD *)&v49[v430[8]];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v60, 0, 1, v430);
        unint64_t v4 = v434;
        a3 = v46;
        goto LABEL_90;
      }
LABEL_64:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v52, v49, *(void *)(*(void *)(v76 - 8) + 64));
      uint64_t v57 = v424;
      goto LABEL_91;
    }
    uint64_t v63 = __src;
    if (v62)
    {
      sub_232EA3DC4(v52, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_64;
    }
    *(unsigned char *)uint64_t v52 = *v49;
    *(void *)(v52 + 8) = *((void *)v49 + 1);
    *(_DWORD *)(v52 + 16) = *((_DWORD *)v49 + 4);
    if (*(void *)(v52 + 56) != 1)
    {
      uint64_t v88 = *((void *)v49 + 7);
      if (v88 != 1)
      {
        *(unsigned char *)(v52 + 24) = v49[24];
        *(_WORD *)(v52 + 25) = *(_WORD *)(v49 + 25);
        *(_DWORD *)(v52 + 28) = *((_DWORD *)v49 + 7);
        *(_OWORD *)(v52 + 32) = *((_OWORD *)v49 + 2);
        *(void *)(v52 + 48) = *((void *)v49 + 6);
        *(void *)(v52 + 56) = v88;
        swift_bridgeObjectRelease();
LABEL_81:
        uint64_t v57 = v424;
        uint64_t v90 = v430[7];
        uint64_t v91 = (void *)(v60 + v90);
        long long v92 = &v49[v90];
        uint64_t v93 = sub_23309B300();
        uint64_t v94 = *(void *)(v93 - 8);
        uint64_t v95 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v94 + 48);
        uint64_t v410 = v91;
        LODWORD(v91) = v95(v91, 1, v93);
        int v96 = v95(v92, 1, v93);
        if (v91)
        {
          unint64_t v4 = v434;
          if (!v96)
          {
            (*(void (**)(void *, char *, uint64_t))(v94 + 32))(v410, v92, v93);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v410, 0, 1, v93);
            goto LABEL_89;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v98 = *(void *)(*(void *)(v97 - 8) + 64);
          long long v99 = v410;
        }
        else
        {
          unint64_t v4 = v434;
          if (!v96)
          {
            (*(void (**)(void *, char *, uint64_t))(v94 + 40))(v410, v92, v93);
            goto LABEL_89;
          }
          (*(void (**)(void *, uint64_t))(v94 + 8))(v410, v93);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v98 = *(void *)(*(void *)(v100 - 8) + 64);
          long long v99 = v410;
        }
        memcpy(v99, v92, v98);
LABEL_89:
        uint64_t v101 = v430[8];
        uint64_t v102 = (void *)(v60 + v101);
        uint64_t v103 = &v49[v101];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        *uint64_t v102 = v105;
        v102[1] = v104;
        swift_bridgeObjectRelease();
        a3 = v435;
        uint64_t v18 = v422;
LABEL_90:
        uint64_t v63 = __src;
LABEL_91:
        uint64_t v106 = v63[5];
        uint64_t v107 = v60 + v106;
        uint64_t v108 = &v49[v106];
        int v109 = v18(v107, 1, (uint64_t)v430);
        int v110 = v18((uint64_t)v108, 1, (uint64_t)v430);
        if (v109)
        {
          if (!v110)
          {
            uint64_t v111 = a3;
            *(unsigned char *)uint64_t v107 = *v108;
            *(void *)(v107 + 8) = *((void *)v108 + 1);
            *(_DWORD *)(v107 + 16) = *((_DWORD *)v108 + 4);
            *(_OWORD *)(v107 + 24) = *(_OWORD *)(v108 + 24);
            *(_OWORD *)(v107 + 40) = *(_OWORD *)(v108 + 40);
            *(void *)(v107 + 56) = *((void *)v108 + 7);
            uint64_t v112 = v430[7];
            uint64_t v113 = (void *)(v107 + v112);
            uint64_t v114 = &v108[v112];
            uint64_t v115 = sub_23309B300();
            uint64_t v116 = *(void *)(v115 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v116 + 32))(v113, v114, v115);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
            }
            a3 = v111;
            uint64_t v18 = v422;
            *(_OWORD *)(v107 + v430[8]) = *(_OWORD *)&v108[v430[8]];
            (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v107, 0, 1, v430);
            unint64_t v4 = v434;
            goto LABEL_114;
          }
LABEL_97:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v107, v108, *(void *)(*(void *)(v118 - 8) + 64));
          goto LABEL_114;
        }
        if (v110)
        {
          sub_232EA3DC4(v107, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_97;
        }
        *(unsigned char *)uint64_t v107 = *v108;
        *(void *)(v107 + 8) = *((void *)v108 + 1);
        *(_DWORD *)(v107 + 16) = *((_DWORD *)v108 + 4);
        if (*(void *)(v107 + 56) != 1)
        {
          uint64_t v119 = *((void *)v108 + 7);
          if (v119 != 1)
          {
            *(unsigned char *)(v107 + 24) = v108[24];
            *(_WORD *)(v107 + 25) = *(_WORD *)(v108 + 25);
            *(_DWORD *)(v107 + 28) = *((_DWORD *)v108 + 7);
            *(_OWORD *)(v107 + 32) = *((_OWORD *)v108 + 2);
            *(void *)(v107 + 48) = *((void *)v108 + 6);
            *(void *)(v107 + 56) = v119;
            swift_bridgeObjectRelease();
LABEL_105:
            uint64_t v121 = v430[7];
            uint64_t v122 = (void *)(v107 + v121);
            uint64_t v123 = &v108[v121];
            uint64_t v124 = sub_23309B300();
            uint64_t v125 = *(void *)(v124 - 8);
            uint64_t v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
            uint64_t v411 = v122;
            LODWORD(v122) = v126(v122, 1, v124);
            int v127 = v126(v123, 1, v124);
            if (v122)
            {
              unint64_t v4 = v434;
              if (!v127)
              {
                (*(void (**)(void *, char *, uint64_t))(v125 + 32))(v411, v123, v124);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(v411, 0, 1, v124);
                goto LABEL_113;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
              long long v130 = v411;
            }
            else
            {
              unint64_t v4 = v434;
              if (!v127)
              {
                (*(void (**)(void *, char *, uint64_t))(v125 + 40))(v411, v123, v124);
                goto LABEL_113;
              }
              (*(void (**)(void *, uint64_t))(v125 + 8))(v411, v124);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
              long long v130 = v411;
            }
            memcpy(v130, v123, v129);
LABEL_113:
            uint64_t v132 = v430[8];
            uint64_t v133 = (void *)(v107 + v132);
            long long v134 = (uint64_t *)&v108[v132];
            uint64_t v136 = *v134;
            uint64_t v135 = v134[1];
            void *v133 = v136;
            v133[1] = v135;
            swift_bridgeObjectRelease();
            a3 = v435;
            uint64_t v18 = v422;
            goto LABEL_114;
          }
          sub_232F0434C(v107 + 24);
        }
        long long v120 = *(_OWORD *)(v108 + 40);
        *(_OWORD *)(v107 + 24) = *(_OWORD *)(v108 + 24);
        *(_OWORD *)(v107 + 40) = v120;
        *(void *)(v107 + 56) = *((void *)v108 + 7);
        goto LABEL_105;
      }
      sub_232F0434C(v52 + 24);
    }
    long long v89 = *(_OWORD *)(v49 + 40);
    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v49 + 24);
    *(_OWORD *)(v52 + 40) = v89;
    *(void *)(v52 + 56) = *((void *)v49 + 7);
    goto LABEL_81;
  }
  if (v53)
  {
LABEL_55:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v52, v49, *(void *)(*(void *)(v59 - 8) + 64));
    uint64_t v54 = v430;
    uint64_t v57 = v424;
    goto LABEL_114;
  }
  uint64_t v54 = v430;
  uint64_t v55 = v52;
  if (v18((uint64_t)v49, 1, (uint64_t)v430))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v52, v49, *(void *)(*(void *)(v56 - 8) + 64));
    uint64_t v57 = v424;
    uint64_t v58 = __src;
  }
  else
  {
    *(unsigned char *)uint64_t v52 = *v49;
    *(void *)(v52 + 8) = *((void *)v49 + 1);
    *(_DWORD *)(v52 + 16) = *((_DWORD *)v49 + 4);
    *(_OWORD *)(v52 + 24) = *(_OWORD *)(v49 + 24);
    *(_OWORD *)(v52 + 40) = *(_OWORD *)(v49 + 40);
    *(void *)(v52 + 56) = *((void *)v49 + 7);
    uint64_t v70 = v430[7];
    uint64_t v71 = (void *)(v52 + v70);
    uint64_t v72 = &v49[v70];
    uint64_t v73 = sub_23309B300();
    uint64_t v74 = *(void *)(v73 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v74 + 32))(v71, v72, v73);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
    uint64_t v57 = v424;
    *(_OWORD *)(v55 + v430[8]) = *(_OWORD *)&v49[v430[8]];
    (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v55, 0, 1, v430);
    a3 = v46;
    uint64_t v18 = v422;
    uint64_t v58 = __src;
  }
  uint64_t v77 = v58[5];
  uint64_t v78 = (char *)(v55 + v77);
  uint64_t v79 = &v49[v77];
  if (v18((uint64_t)v79, 1, (uint64_t)v430))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
    unint64_t v4 = v434;
  }
  else
  {
    uint64_t v81 = a3;
    *uint64_t v78 = *v79;
    *((void *)v78 + 1) = *((void *)v79 + 1);
    *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
    *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
    *(_OWORD *)(v78 + 40) = *(_OWORD *)(v79 + 40);
    *((void *)v78 + 7) = *((void *)v79 + 7);
    uint64_t v82 = v430[7];
    uint64_t v83 = &v78[v82];
    uint64_t v84 = &v79[v82];
    uint64_t v85 = sub_23309B300();
    uint64_t v86 = *(void *)(v85 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v83, v84, v85);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
    }
    *(_OWORD *)&v78[v430[8]] = *(_OWORD *)&v79[v430[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v418 + 56))(v78, 0, 1, v430);
    unint64_t v4 = v434;
    a3 = v81;
    uint64_t v18 = v422;
    uint64_t v58 = __src;
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v412 + 56))(v55, 0, 1, v58);
LABEL_114:
  uint64_t v137 = a3[15];
  uint64_t v138 = (void *)(v57 + v137);
  uint64_t v139 = (void *)((char *)v4 + v137);
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  uint64_t v142 = a3[16];
  uint64_t v143 = v57 + v142;
  uint64_t v144 = (char *)v4 + v142;
  int v145 = v18(v57 + v142, 1, (uint64_t)v54);
  int v146 = v18((uint64_t)v144, 1, (uint64_t)v54);
  if (!v145)
  {
    if (v146)
    {
      sub_232EA3DC4(v143, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_120;
    }
    *(unsigned char *)uint64_t v143 = *v144;
    *(void *)(v143 + 8) = *((void *)v144 + 1);
    *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
    if (*(void *)(v143 + 56) != 1)
    {
      uint64_t v155 = *((void *)v144 + 7);
      if (v155 != 1)
      {
        *(unsigned char *)(v143 + 24) = v144[24];
        *(_WORD *)(v143 + 25) = *(_WORD *)(v144 + 25);
        *(_DWORD *)(v143 + 28) = *((_DWORD *)v144 + 7);
        *(_OWORD *)(v143 + 32) = *((_OWORD *)v144 + 2);
        *(void *)(v143 + 48) = *((void *)v144 + 6);
        *(void *)(v143 + 56) = v155;
        swift_bridgeObjectRelease();
LABEL_128:
        uint64_t v157 = v54[7];
        size_t v158 = (void *)(v143 + v157);
        uint64_t v159 = &v144[v157];
        uint64_t v160 = sub_23309B300();
        uint64_t v161 = *(void *)(v160 - 8);
        uint64_t v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
        int v163 = v162(v158, 1, v160);
        int v164 = v162(v159, 1, v160);
        if (v163)
        {
          if (!v164)
          {
            (*(void (**)(void *, char *, uint64_t))(v161 + 32))(v158, v159, v160);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
LABEL_134:
            unint64_t v4 = v434;
            a3 = v435;
            uint64_t v18 = v422;
            uint64_t v57 = v424;
            uint64_t v154 = __src;
            uint64_t v166 = v54[8];
            unsigned int v167 = (void *)(v143 + v166);
            unsigned int v168 = &v144[v166];
            uint64_t v170 = *(void *)v168;
            uint64_t v169 = *((void *)v168 + 1);
            void *v167 = v170;
            v167[1] = v169;
            swift_bridgeObjectRelease();
            goto LABEL_135;
          }
        }
        else
        {
          if (!v164)
          {
            (*(void (**)(void *, char *, uint64_t))(v161 + 40))(v158, v159, v160);
            goto LABEL_134;
          }
          (*(void (**)(void *, uint64_t))(v161 + 8))(v158, v160);
        }
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v158, v159, *(void *)(*(void *)(v165 - 8) + 64));
        goto LABEL_134;
      }
      sub_232F0434C(v143 + 24);
    }
    long long v156 = *(_OWORD *)(v144 + 40);
    *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
    *(_OWORD *)(v143 + 40) = v156;
    *(void *)(v143 + 56) = *((void *)v144 + 7);
    goto LABEL_128;
  }
  if (v146)
  {
LABEL_120:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v143, v144, *(void *)(*(void *)(v153 - 8) + 64));
    uint64_t v154 = __src;
    goto LABEL_135;
  }
  *(unsigned char *)uint64_t v143 = *v144;
  *(void *)(v143 + 8) = *((void *)v144 + 1);
  *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
  *(_OWORD *)(v143 + 24) = *(_OWORD *)(v144 + 24);
  *(_OWORD *)(v143 + 40) = *(_OWORD *)(v144 + 40);
  *(void *)(v143 + 56) = *((void *)v144 + 7);
  uint64_t v147 = v54[7];
  long long v148 = (void *)(v143 + v147);
  long long v149 = &v144[v147];
  uint64_t v150 = sub_23309B300();
  uint64_t v151 = *(void *)(v150 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v151 + 32))(v148, v149, v150);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
  }
  unint64_t v4 = v434;
  uint64_t v18 = v422;
  uint64_t v154 = __src;
  *(_OWORD *)(v143 + v54[8]) = *(_OWORD *)&v144[v54[8]];
  (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v143, 0, 1, v54);
LABEL_135:
  uint64_t v171 = a3[17];
  uint64_t v172 = v57 + v171;
  uint64_t v173 = (char *)v4 + v171;
  int v174 = v415(v57 + v171, 1, v154);
  uint64_t v175 = v154;
  int v176 = v174;
  int v177 = v415((uint64_t)v173, 1, v175);
  if (!v176)
  {
    if (v177)
    {
      sub_232EA3DC4(v172, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_141;
    }
    long long v178 = v430;
    int v182 = v18(v172, 1, (uint64_t)v430);
    int v183 = v18((uint64_t)v173, 1, (uint64_t)v430);
    if (v182)
    {
      if (!v183)
      {
        *(unsigned char *)uint64_t v172 = *v173;
        *(void *)(v172 + 8) = *((void *)v173 + 1);
        *(_DWORD *)(v172 + 16) = *((_DWORD *)v173 + 4);
        *(_OWORD *)(v172 + 24) = *(_OWORD *)(v173 + 24);
        *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
        *(void *)(v172 + 56) = *((void *)v173 + 7);
        uint64_t v184 = v430[7];
        uint64_t v185 = (void *)(v172 + v184);
        uint64_t v186 = &v173[v184];
        uint64_t v187 = sub_23309B300();
        uint64_t v188 = *(void *)(v187 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v186, 1, v187))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v185, v186, *(void *)(*(void *)(v189 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v188 + 32))(v185, v186, v187);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v188 + 56))(v185, 0, 1, v187);
        }
        uint64_t v18 = v422;
        uint64_t v197 = __src;
        *(_OWORD *)(v172 + v430[8]) = *(_OWORD *)&v173[v430[8]];
        (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v172, 0, 1, v430);
        unint64_t v4 = v434;
LABEL_177:
        uint64_t v227 = v197[5];
        uint64_t v228 = v172 + v227;
        uint64_t v229 = &v173[v227];
        int v230 = v18(v228, 1, (uint64_t)v430);
        int v231 = v18((uint64_t)v229, 1, (uint64_t)v430);
        if (v230)
        {
          if (!v231)
          {
            *(unsigned char *)uint64_t v228 = *v229;
            *(void *)(v228 + 8) = *((void *)v229 + 1);
            *(_DWORD *)(v228 + 16) = *((_DWORD *)v229 + 4);
            *(_OWORD *)(v228 + 24) = *(_OWORD *)(v229 + 24);
            *(_OWORD *)(v228 + 40) = *(_OWORD *)(v229 + 40);
            *(void *)(v228 + 56) = *((void *)v229 + 7);
            uint64_t v232 = v430[7];
            uint64_t v233 = (void *)(v228 + v232);
            uint64_t v234 = &v229[v232];
            uint64_t v235 = sub_23309B300();
            uint64_t v236 = *(void *)(v235 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v236 + 48))(v234, 1, v235))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v233, v234, *(void *)(*(void *)(v237 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v236 + 32))(v233, v234, v235);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v236 + 56))(v233, 0, 1, v235);
            }
            uint64_t v18 = v422;
            *(_OWORD *)(v228 + v430[8]) = *(_OWORD *)&v229[v430[8]];
            (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v228, 0, 1, v430);
            unint64_t v4 = v434;
            goto LABEL_200;
          }
LABEL_183:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v228, v229, *(void *)(*(void *)(v238 - 8) + 64));
          goto LABEL_200;
        }
        if (v231)
        {
          sub_232EA3DC4(v228, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_183;
        }
        *(unsigned char *)uint64_t v228 = *v229;
        *(void *)(v228 + 8) = *((void *)v229 + 1);
        *(_DWORD *)(v228 + 16) = *((_DWORD *)v229 + 4);
        if (*(void *)(v228 + 56) != 1)
        {
          uint64_t v239 = *((void *)v229 + 7);
          if (v239 != 1)
          {
            *(unsigned char *)(v228 + 24) = v229[24];
            *(_WORD *)(v228 + 25) = *(_WORD *)(v229 + 25);
            *(_DWORD *)(v228 + 28) = *((_DWORD *)v229 + 7);
            *(_OWORD *)(v228 + 32) = *((_OWORD *)v229 + 2);
            *(void *)(v228 + 48) = *((void *)v229 + 6);
            *(void *)(v228 + 56) = v239;
            swift_bridgeObjectRelease();
LABEL_191:
            uint64_t v241 = v430[7];
            uint64_t v242 = (void *)(v228 + v241);
            uint64_t v243 = &v229[v241];
            uint64_t v244 = sub_23309B300();
            uint64_t v245 = *(void *)(v244 - 8);
            int v246 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v245 + 48);
            uint64_t v416 = v242;
            LODWORD(v242) = v246(v242, 1, v244);
            int v247 = v246(v243, 1, v244);
            if (v242)
            {
              unint64_t v4 = v434;
              a3 = v435;
              if (!v247)
              {
                (*(void (**)(void *, char *, uint64_t))(v245 + 32))(v416, v243, v244);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v245 + 56))(v416, 0, 1, v244);
                goto LABEL_199;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v249 = *(void *)(*(void *)(v248 - 8) + 64);
              uint64_t v250 = v416;
            }
            else
            {
              unint64_t v4 = v434;
              a3 = v435;
              if (!v247)
              {
                (*(void (**)(void *, char *, uint64_t))(v245 + 40))(v416, v243, v244);
                goto LABEL_199;
              }
              (*(void (**)(void *, uint64_t))(v245 + 8))(v416, v244);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v249 = *(void *)(*(void *)(v251 - 8) + 64);
              uint64_t v250 = v416;
            }
            memcpy(v250, v243, v249);
LABEL_199:
            uint64_t v252 = v430[8];
            uint64_t v253 = (void *)(v228 + v252);
            int v254 = (uint64_t *)&v229[v252];
            uint64_t v256 = *v254;
            uint64_t v255 = v254[1];
            void *v253 = v256;
            v253[1] = v255;
            swift_bridgeObjectRelease();
            uint64_t v18 = v422;
            goto LABEL_200;
          }
          sub_232F0434C(v228 + 24);
        }
        long long v240 = *(_OWORD *)(v229 + 40);
        *(_OWORD *)(v228 + 24) = *(_OWORD *)(v229 + 24);
        *(_OWORD *)(v228 + 40) = v240;
        *(void *)(v228 + 56) = *((void *)v229 + 7);
        goto LABEL_191;
      }
LABEL_150:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v172, v173, *(void *)(*(void *)(v196 - 8) + 64));
      uint64_t v197 = __src;
      goto LABEL_177;
    }
    if (v183)
    {
      sub_232EA3DC4(v172, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_150;
    }
    *(unsigned char *)uint64_t v172 = *v173;
    *(void *)(v172 + 8) = *((void *)v173 + 1);
    *(_DWORD *)(v172 + 16) = *((_DWORD *)v173 + 4);
    if (*(void *)(v172 + 56) != 1)
    {
      uint64_t v209 = *((void *)v173 + 7);
      if (v209 != 1)
      {
        *(unsigned char *)(v172 + 24) = v173[24];
        *(_WORD *)(v172 + 25) = *(_WORD *)(v173 + 25);
        *(_DWORD *)(v172 + 28) = *((_DWORD *)v173 + 7);
        *(_OWORD *)(v172 + 32) = *((_OWORD *)v173 + 2);
        *(void *)(v172 + 48) = *((void *)v173 + 6);
        *(void *)(v172 + 56) = v209;
        swift_bridgeObjectRelease();
LABEL_168:
        uint64_t v211 = v430[7];
        uint64_t v212 = (void *)(v172 + v211);
        unsigned int v213 = &v173[v211];
        uint64_t v214 = sub_23309B300();
        uint64_t v215 = *(void *)(v214 - 8);
        uint64_t v216 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v215 + 48);
        long long v413 = v212;
        LODWORD(v212) = v216(v212, 1, v214);
        int v217 = v216(v213, 1, v214);
        if (v212)
        {
          uint64_t v197 = __src;
          if (!v217)
          {
            (*(void (**)(void *, char *, uint64_t))(v215 + 32))(v413, v213, v214);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v215 + 56))(v413, 0, 1, v214);
            goto LABEL_176;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v219 = *(void *)(*(void *)(v218 - 8) + 64);
          long long v220 = v413;
        }
        else
        {
          uint64_t v197 = __src;
          if (!v217)
          {
            (*(void (**)(void *, char *, uint64_t))(v215 + 40))(v413, v213, v214);
            goto LABEL_176;
          }
          (*(void (**)(void *, uint64_t))(v215 + 8))(v413, v214);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v219 = *(void *)(*(void *)(v221 - 8) + 64);
          long long v220 = v413;
        }
        memcpy(v220, v213, v219);
LABEL_176:
        uint64_t v18 = v422;
        uint64_t v222 = v430[8];
        uint64_t v223 = (void *)(v172 + v222);
        long long v224 = &v173[v222];
        uint64_t v226 = *(void *)v224;
        uint64_t v225 = *((void *)v224 + 1);
        *uint64_t v223 = v226;
        v223[1] = v225;
        swift_bridgeObjectRelease();
        unint64_t v4 = v434;
        a3 = v435;
        goto LABEL_177;
      }
      sub_232F0434C(v172 + 24);
    }
    long long v210 = *(_OWORD *)(v173 + 40);
    *(_OWORD *)(v172 + 24) = *(_OWORD *)(v173 + 24);
    *(_OWORD *)(v172 + 40) = v210;
    *(void *)(v172 + 56) = *((void *)v173 + 7);
    goto LABEL_168;
  }
  if (v177)
  {
LABEL_141:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v172, v173, *(void *)(*(void *)(v181 - 8) + 64));
    long long v178 = v430;
    goto LABEL_200;
  }
  long long v178 = v430;
  if (v18((uint64_t)v173, 1, (uint64_t)v430))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v172, v173, *(void *)(*(void *)(v179 - 8) + 64));
    uint64_t v180 = __src;
  }
  else
  {
    *(unsigned char *)uint64_t v172 = *v173;
    *(void *)(v172 + 8) = *((void *)v173 + 1);
    *(_DWORD *)(v172 + 16) = *((_DWORD *)v173 + 4);
    *(_OWORD *)(v172 + 24) = *(_OWORD *)(v173 + 24);
    *(_OWORD *)(v172 + 40) = *(_OWORD *)(v173 + 40);
    *(void *)(v172 + 56) = *((void *)v173 + 7);
    uint64_t v190 = v430[7];
    long long v191 = (void *)(v172 + v190);
    long long v192 = &v173[v190];
    uint64_t v193 = sub_23309B300();
    uint64_t v194 = *(void *)(v193 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v191, v192, *(void *)(*(void *)(v195 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v194 + 32))(v191, v192, v193);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
    }
    uint64_t v180 = __src;
    *(_OWORD *)(v172 + v430[8]) = *(_OWORD *)&v173[v430[8]];
    (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v172, 0, 1, v430);
    uint64_t v18 = v422;
  }
  uint64_t v198 = v180[5];
  int v199 = (char *)(v172 + v198);
  uint64_t v200 = &v173[v198];
  if (v18((uint64_t)v200, 1, (uint64_t)v430))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v199, v200, *(void *)(*(void *)(v201 - 8) + 64));
    unint64_t v4 = v434;
  }
  else
  {
    uint64_t v202 = a3;
    *int v199 = *v200;
    *((void *)v199 + 1) = *((void *)v200 + 1);
    *((_DWORD *)v199 + 4) = *((_DWORD *)v200 + 4);
    *(_OWORD *)(v199 + 24) = *(_OWORD *)(v200 + 24);
    *(_OWORD *)(v199 + 40) = *(_OWORD *)(v200 + 40);
    *((void *)v199 + 7) = *((void *)v200 + 7);
    uint64_t v203 = v430[7];
    uint64_t v204 = &v199[v203];
    uint64_t v205 = &v200[v203];
    uint64_t v206 = sub_23309B300();
    uint64_t v207 = *(void *)(v206 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v205, 1, v206))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v204, v205, *(void *)(*(void *)(v208 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 32))(v204, v205, v206);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
    }
    *(_OWORD *)&v199[v430[8]] = *(_OWORD *)&v200[v430[8]];
    (*(void (**)(char *, void, uint64_t, int *))(v418 + 56))(v199, 0, 1, v430);
    unint64_t v4 = v434;
    a3 = v202;
    uint64_t v18 = v422;
    uint64_t v180 = __src;
  }
  (*(void (**)(uint64_t, void, uint64_t, int *))(v412 + 56))(v172, 0, 1, v180);
LABEL_200:
  uint64_t v257 = a3[18];
  uint64_t v258 = (void *)(v57 + v257);
  size_t v259 = (void *)((char *)v4 + v257);
  uint64_t v261 = *v259;
  uint64_t v260 = v259[1];
  void *v258 = v261;
  v258[1] = v260;
  swift_bridgeObjectRelease();
  uint64_t v262 = a3[19];
  uint64_t v263 = v57 + v262;
  uint64_t v264 = (char *)v4 + v262;
  int v265 = v18(v57 + v262, 1, (uint64_t)v178);
  int v266 = v18((uint64_t)v264, 1, (uint64_t)v178);
  if (!v265)
  {
    if (v266)
    {
      sub_232EA3DC4(v263, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_206;
    }
    *(unsigned char *)uint64_t v263 = *v264;
    *(void *)(v263 + 8) = *((void *)v264 + 1);
    *(_DWORD *)(v263 + 16) = *((_DWORD *)v264 + 4);
    if (*(void *)(v263 + 56) != 1)
    {
      uint64_t v274 = *((void *)v264 + 7);
      if (v274 != 1)
      {
        *(unsigned char *)(v263 + 24) = v264[24];
        *(_WORD *)(v263 + 25) = *(_WORD *)(v264 + 25);
        *(_DWORD *)(v263 + 28) = *((_DWORD *)v264 + 7);
        *(_OWORD *)(v263 + 32) = *((_OWORD *)v264 + 2);
        *(void *)(v263 + 48) = *((void *)v264 + 6);
        *(void *)(v263 + 56) = v274;
        swift_bridgeObjectRelease();
LABEL_214:
        uint64_t v276 = v178[7];
        long long v277 = (void *)(v263 + v276);
        uint64_t v278 = &v264[v276];
        uint64_t v279 = sub_23309B300();
        uint64_t v280 = *(void *)(v279 - 8);
        uint64_t v281 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v280 + 48);
        int v282 = v281(v277, 1, v279);
        int v283 = v281(v278, 1, v279);
        if (v282)
        {
          if (!v283)
          {
            (*(void (**)(void *, char *, uint64_t))(v280 + 32))(v277, v278, v279);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v280 + 56))(v277, 0, 1, v279);
LABEL_220:
            unint64_t v4 = v434;
            a3 = v435;
            uint64_t v57 = v424;
            uint64_t v285 = v178[8];
            long long v286 = (void *)(v263 + v285);
            uint64_t v287 = &v264[v285];
            uint64_t v289 = *(void *)v287;
            uint64_t v288 = *((void *)v287 + 1);
            *long long v286 = v289;
            v286[1] = v288;
            swift_bridgeObjectRelease();
            goto LABEL_221;
          }
        }
        else
        {
          if (!v283)
          {
            (*(void (**)(void *, char *, uint64_t))(v280 + 40))(v277, v278, v279);
            goto LABEL_220;
          }
          (*(void (**)(void *, uint64_t))(v280 + 8))(v277, v279);
        }
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v277, v278, *(void *)(*(void *)(v284 - 8) + 64));
        goto LABEL_220;
      }
      sub_232F0434C(v263 + 24);
    }
    long long v275 = *(_OWORD *)(v264 + 40);
    *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
    *(_OWORD *)(v263 + 40) = v275;
    *(void *)(v263 + 56) = *((void *)v264 + 7);
    goto LABEL_214;
  }
  if (v266)
  {
LABEL_206:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v263, v264, *(void *)(*(void *)(v273 - 8) + 64));
    goto LABEL_221;
  }
  *(unsigned char *)uint64_t v263 = *v264;
  *(void *)(v263 + 8) = *((void *)v264 + 1);
  *(_DWORD *)(v263 + 16) = *((_DWORD *)v264 + 4);
  *(_OWORD *)(v263 + 24) = *(_OWORD *)(v264 + 24);
  *(_OWORD *)(v263 + 40) = *(_OWORD *)(v264 + 40);
  *(void *)(v263 + 56) = *((void *)v264 + 7);
  uint64_t v267 = v178[7];
  unsigned int v268 = (void *)(v263 + v267);
  uint64_t v269 = &v264[v267];
  uint64_t v270 = sub_23309B300();
  uint64_t v271 = *(void *)(v270 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v268, v269, *(void *)(*(void *)(v272 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v271 + 32))(v268, v269, v270);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v271 + 56))(v268, 0, 1, v270);
  }
  unint64_t v4 = v434;
  *(_OWORD *)(v263 + v178[8]) = *(_OWORD *)&v264[v178[8]];
  (*(void (**)(uint64_t, void, uint64_t, int *))(v418 + 56))(v263, 0, 1, v178);
LABEL_221:
  uint64_t v290 = a3[20];
  uint64_t v291 = (void *)(v57 + v290);
  uint64_t v292 = (char *)v4 + v290;
  uint64_t v293 = type metadata accessor for Reference();
  uint64_t v294 = *(void **)(v293 - 8);
  uint64_t v295 = (uint64_t (*)(void *, uint64_t, uint64_t))v294[6];
  int v296 = v295(v291, 1, v293);
  int v297 = v295(v292, 1, v293);
  if (!v296)
  {
    if (v297)
    {
      sub_232EA3DC4((uint64_t)v291, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_227;
    }
    uint64_t v432 = v294;
    uint64_t v309 = *((void *)v292 + 1);
    *uint64_t v291 = *(void *)v292;
    v291[1] = v309;
    swift_bridgeObjectRelease();
    uint64_t v310 = *((void *)v292 + 3);
    v291[2] = *((void *)v292 + 2);
    v291[3] = v310;
    swift_bridgeObjectRelease();
    uint64_t v311 = *(int *)(v293 + 24);
    uint64_t v312 = (_OWORD *)((char *)v291 + v311);
    long long v313 = &v292[v311];
    uint64_t v314 = type metadata accessor for Identifier();
    uint64_t v315 = *(void *)(v314 - 8);
    uint64_t v316 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v315 + 48);
    __srca = v312;
    LODWORD(v312) = v316(v312, 1, v314);
    uint64_t v423 = v313;
    int v317 = v316(v313, 1, v314);
    if (v312)
    {
      uint64_t v294 = v432;
      if (v317)
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(__srca, v313, *(void *)(*(void *)(v318 - 8) + 64));
        unint64_t v4 = v434;
      }
      else
      {
        long long v325 = *((_OWORD *)v313 + 1);
        _OWORD *__srca = *(_OWORD *)v313;
        __srca[1] = v325;
        *((void *)__srca + 4) = *((void *)v313 + 4);
        uint64_t v326 = *(int *)(v314 + 24);
        uint64_t v419 = (char *)__srca + v326;
        long long v327 = &v313[v326];
        uint64_t v328 = sub_23309AF80();
        uint64_t v329 = *(void *)(v328 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v329 + 48))(v327, 1, v328))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v419, v327, *(void *)(*(void *)(v330 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v329 + 32))(v419, v327, v328);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v329 + 56))(v419, 0, 1, v328);
        }
        *(_OWORD *)((char *)__srca + *(int *)(v314 + 28)) = *(_OWORD *)&v423[*(int *)(v314 + 28)];
        (*(void (**)(void))(v315 + 56))();
        unint64_t v4 = v434;
      }
      goto LABEL_241;
    }
    uint64_t v294 = v432;
    unint64_t v4 = v434;
    if (v317)
    {
      sub_232EA3DC4((uint64_t)__srca, (uint64_t (*)(void))type metadata accessor for Identifier);
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v306 = *(void *)(*(void *)(v324 - 8) + 64);
      uint64_t v307 = __srca;
      uint64_t v308 = v313;
      goto LABEL_228;
    }
    uint64_t v375 = *((void *)v313 + 1);
    *(void *)__srca = *(void *)v313;
    *((void *)__srca + 1) = v375;
    swift_bridgeObjectRelease();
    if (*((void *)__srca + 3) != 1)
    {
      uint64_t v376 = *((void *)v313 + 3);
      if (v376 != 1)
      {
        *((void *)__srca + 2) = *((void *)v313 + 2);
        *((void *)__srca + 3) = v376;
        swift_bridgeObjectRelease();
        *((void *)__srca + 4) = *((void *)v313 + 4);
        swift_bridgeObjectRelease();
LABEL_275:
        uint64_t v379 = *(int *)(v314 + 24);
        uint64_t v380 = (char *)__srca + v379;
        uint64_t v381 = &v313[v379];
        uint64_t v382 = sub_23309AF80();
        uint64_t v417 = *(void **)(v382 - 8);
        uint64_t v383 = (uint64_t (*)(char *, uint64_t, uint64_t))v417[6];
        uint64_t v420 = v380;
        LODWORD(v380) = v383(v380, 1, v382);
        int v384 = v383(v381, 1, v382);
        if (v380)
        {
          uint64_t v294 = v432;
          if (!v384)
          {
            ((void (*)(void *, char *, uint64_t))v417[4])(v420, v381, v382);
            ((void (*)(void *, void, uint64_t, uint64_t))v417[7])(v420, 0, 1, v382);
            goto LABEL_291;
          }
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v386 = *(void *)(*(void *)(v385 - 8) + 64);
          uint64_t v387 = v420;
        }
        else
        {
          uint64_t v294 = v432;
          if (!v384)
          {
            ((void (*)(void *, char *, uint64_t))v417[5])(v420, v381, v382);
            goto LABEL_291;
          }
          ((void (*)(void *, uint64_t))v417[1])(v420, v382);
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v386 = *(void *)(*(void *)(v388 - 8) + 64);
          uint64_t v387 = v420;
        }
        memcpy(v387, v381, v386);
LABEL_291:
        unint64_t v4 = v434;
        uint64_t v400 = *(int *)(v314 + 28);
        long long v401 = (void *)((char *)__srca + v400);
        uint64_t v402 = &v423[v400];
        uint64_t v404 = *(void *)v402;
        uint64_t v403 = *((void *)v402 + 1);
        *long long v401 = v404;
        v401[1] = v403;
        swift_bridgeObjectRelease();
        goto LABEL_241;
      }
      sub_232F042F8((uint64_t)(__srca + 1));
    }
    __srca[1] = *((_OWORD *)v313 + 1);
    *((void *)__srca + 4) = *((void *)v313 + 4);
    goto LABEL_275;
  }
  if (v297)
  {
LABEL_227:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v306 = *(void *)(*(void *)(v305 - 8) + 64);
    uint64_t v307 = v291;
    uint64_t v308 = v292;
LABEL_228:
    memcpy(v307, v308, v306);
    goto LABEL_241;
  }
  uint64_t v431 = v294;
  long long v298 = *((_OWORD *)v292 + 1);
  *(_OWORD *)uint64_t v291 = *(_OWORD *)v292;
  *((_OWORD *)v291 + 1) = v298;
  uint64_t v299 = *(int *)(v293 + 24);
  uint64_t v300 = (_OWORD *)((char *)v291 + v299);
  uint64_t v301 = &v292[v299];
  uint64_t v302 = type metadata accessor for Identifier();
  uint64_t v303 = *(void *)(v302 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v303 + 48))(v301, 1, v302))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v300, v301, *(void *)(*(void *)(v304 - 8) + 64));
  }
  else
  {
    long long v319 = *((_OWORD *)v301 + 1);
    *uint64_t v300 = *(_OWORD *)v301;
    v300[1] = v319;
    *((void *)v300 + 4) = *((void *)v301 + 4);
    uint64_t v320 = *(int *)(v302 + 24);
    __srcb = (char *)v300 + v320;
    uint64_t v321 = &v301[v320];
    uint64_t v322 = sub_23309AF80();
    int v421 = *(void (***)(void *, const void *, uint64_t))(v322 - 8);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v421[6])(v321, 1, v322))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__srcb, v321, *(void *)(*(void *)(v323 - 8) + 64));
    }
    else
    {
      v421[4](__srcb, v321, v322);
      ((void (*)(char *, void, uint64_t, uint64_t))v421[7])(__srcb, 0, 1, v322);
    }
    uint64_t v57 = v424;
    *(_OWORD *)((char *)v300 + *(int *)(v302 + 28)) = *(_OWORD *)&v301[*(int *)(v302 + 28)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v303 + 56))(v300, 0, 1, v302);
  }
  uint64_t v294 = v431;
  unint64_t v4 = v434;
  ((void (*)(void *, void, uint64_t, uint64_t))v431[7])(v291, 0, 1, v293);
LABEL_241:
  uint64_t v331 = v435[21];
  uint64_t v332 = (void *)(v57 + v331);
  uint64_t v333 = (void *)((char *)v4 + v331);
  int v334 = v295((void *)(v57 + v331), 1, v293);
  int v335 = v295(v333, 1, v293);
  if (!v334)
  {
    if (v335)
    {
      sub_232EA3DC4((uint64_t)v332, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_247;
    }
    uint64_t v345 = v333[1];
    *uint64_t v332 = *v333;
    v332[1] = v345;
    swift_bridgeObjectRelease();
    uint64_t v346 = v333[3];
    v332[2] = v333[2];
    v332[3] = v346;
    swift_bridgeObjectRelease();
    uint64_t v347 = *(int *)(v293 + 24);
    long long v348 = (void *)((char *)v332 + v347);
    long long v349 = (void *)((char *)v333 + v347);
    uint64_t v350 = type metadata accessor for Identifier();
    uint64_t v351 = *(void *)(v350 - 8);
    uint64_t v352 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v351 + 48);
    int v353 = v352(v348, 1, v350);
    int v354 = v352(v349, 1, v350);
    uint64_t v342 = v435;
    if (v353)
    {
      if (!v354)
      {
        long long v355 = *((_OWORD *)v349 + 1);
        *(_OWORD *)long long v348 = *(_OWORD *)v349;
        *((_OWORD *)v348 + 1) = v355;
        v348[4] = v349[4];
        uint64_t v356 = *(int *)(v350 + 24);
        uint64_t v357 = (char *)v348 + v356;
        uint64_t v358 = (char *)v349 + v356;
        uint64_t v359 = sub_23309AF80();
        uint64_t v360 = *(void *)(v359 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v360 + 48))(v358, 1, v359))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v357, v358, *(void *)(*(void *)(v361 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v360 + 32))(v357, v358, v359);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v360 + 56))(v357, 0, 1, v359);
        }
        *(_OWORD *)((char *)v348 + *(int *)(v350 + 28)) = *(_OWORD *)((char *)v349 + *(int *)(v350 + 28));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v351 + 56))(v348, 0, 1, v350);
        unint64_t v4 = v434;
        goto LABEL_260;
      }
LABEL_256:
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v348, v349, *(void *)(*(void *)(v368 - 8) + 64));
      goto LABEL_260;
    }
    if (v354)
    {
      sub_232EA3DC4((uint64_t)v348, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_256;
    }
    uint64_t v377 = v349[1];
    *long long v348 = *v349;
    v348[1] = v377;
    swift_bridgeObjectRelease();
    if (v348[3] != 1)
    {
      uint64_t v378 = v349[3];
      if (v378 != 1)
      {
        v348[2] = v349[2];
        v348[3] = v378;
        swift_bridgeObjectRelease();
        v348[4] = v349[4];
        swift_bridgeObjectRelease();
LABEL_282:
        uint64_t v389 = *(int *)(v350 + 24);
        unsigned int v390 = (char *)v348 + v389;
        unsigned int v391 = (char *)v349 + v389;
        uint64_t v392 = sub_23309AF80();
        uint64_t v393 = *(void *)(v392 - 8);
        long long v394 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v393 + 48);
        __srcd = v390;
        LODWORD(v390) = v394(v390, 1, v392);
        int v395 = v394(v391, 1, v392);
        if (v390)
        {
          unint64_t v4 = v434;
          uint64_t v342 = v435;
          if (!v395)
          {
            (*(void (**)(void *, char *, uint64_t))(v393 + 32))(__srcd, v391, v392);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v393 + 56))(__srcd, 0, 1, v392);
            goto LABEL_293;
          }
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v397 = *(void *)(*(void *)(v396 - 8) + 64);
          uint64_t v398 = __srcd;
        }
        else
        {
          unint64_t v4 = v434;
          uint64_t v342 = v435;
          if (!v395)
          {
            (*(void (**)(void *, char *, uint64_t))(v393 + 40))(__srcd, v391, v392);
            goto LABEL_293;
          }
          (*(void (**)(void *, uint64_t))(v393 + 8))(__srcd, v392);
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v397 = *(void *)(*(void *)(v399 - 8) + 64);
          uint64_t v398 = __srcd;
        }
        memcpy(v398, v391, v397);
LABEL_293:
        uint64_t v405 = *(int *)(v350 + 28);
        uint64_t v406 = (void *)((char *)v348 + v405);
        uint64_t v407 = (void *)((char *)v349 + v405);
        uint64_t v409 = *v407;
        uint64_t v408 = v407[1];
        void *v406 = v409;
        v406[1] = v408;
        swift_bridgeObjectRelease();
        goto LABEL_260;
      }
      sub_232F042F8((uint64_t)(v348 + 2));
    }
    *((_OWORD *)v348 + 1) = *((_OWORD *)v349 + 1);
    v348[4] = v349[4];
    goto LABEL_282;
  }
  if (v335)
  {
LABEL_247:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v332, v333, *(void *)(*(void *)(v344 - 8) + 64));
    uint64_t v342 = v435;
    goto LABEL_260;
  }
  int v433 = v294;
  long long v336 = *((_OWORD *)v333 + 1);
  *(_OWORD *)uint64_t v332 = *(_OWORD *)v333;
  *((_OWORD *)v332 + 1) = v336;
  uint64_t v337 = *(int *)(v293 + 24);
  uint64_t v338 = (_OWORD *)((char *)v332 + v337);
  uint64_t v339 = (_OWORD *)((char *)v333 + v337);
  uint64_t v340 = type metadata accessor for Identifier();
  uint64_t v341 = *(void *)(v340 - 8);
  uint64_t v342 = v435;
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v341 + 48))(v339, 1, v340))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v338, v339, *(void *)(*(void *)(v343 - 8) + 64));
    unint64_t v4 = v434;
  }
  else
  {
    long long v362 = v339[1];
    _OWORD *v338 = *v339;
    v338[1] = v362;
    *((void *)v338 + 4) = *((void *)v339 + 4);
    uint64_t v363 = *(int *)(v340 + 24);
    __srcc = (char *)v338 + v363;
    uint64_t v364 = (char *)v339 + v363;
    uint64_t v365 = sub_23309AF80();
    uint64_t v366 = *(void *)(v365 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v366 + 48))(v364, 1, v365))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__srcc, v364, *(void *)(*(void *)(v367 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v366 + 32))(__srcc, v364, v365);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v366 + 56))(__srcc, 0, 1, v365);
    }
    *(_OWORD *)((char *)v338 + *(int *)(v340 + 28)) = *(_OWORD *)((char *)v339 + *(int *)(v340 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v341 + 56))(v338, 0, 1, v340);
    unint64_t v4 = v434;
    uint64_t v342 = v435;
  }
  (*((void (**)(void *, void, uint64_t, uint64_t))v433 + 7))(v332, 0, 1, v293);
LABEL_260:
  *(void *)(v57 + v342[22]) = *(void *)((char *)v4 + v342[22]);
  swift_bridgeObjectRelease();
  uint64_t v369 = v342[23];
  uint64_t v370 = (void *)(v57 + v369);
  uint64_t v371 = (void *)((char *)v4 + v369);
  uint64_t v373 = *v371;
  uint64_t v372 = v371[1];
  void *v370 = v373;
  v370[1] = v372;
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Condition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F09860);
}

uint64_t sub_232F09860(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[13];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_9;
  }
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[20];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Condition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F09A7C);
}

uint64_t sub_232F09A7C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_7;
  }
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[20];
  return v15(v17, a2, a2, v16);
}

void sub_232F09C84()
{
  sub_232EA3854(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232EA3854(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_232EA3854(319, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsR4.DiagnosticReport(void *a1, void *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v17 = (void *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    uint64_t v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    uint64_t v11 = a3[11];
    __dst = (char *)a1 + v11;
    uint64_t v95 = (char *)a2 + v11;
    a1[12] = a2[12];
    uint64_t v12 = type metadata accessor for FHIRDateTime();
    uint64_t v96 = *(void *)(v12 - 8);
    uint64_t v13 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v96 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v100 = v13;
    if (v13(v95, 1, v12))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(__dst, v95, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v16 = a2;
      uint64_t v15 = a3;
      uint64_t v17 = a1;
    }
    else
    {
      unsigned char *__dst = *v95;
      *((void *)__dst + 1) = *((void *)v95 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v95 + 4);
      uint64_t v19 = *((void *)v95 + 7);
      if (v19 == 1)
      {
        long long v20 = *(_OWORD *)(v95 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v95 + 24);
        *(_OWORD *)(__dst + 40) = v20;
        *((void *)__dst + 7) = *((void *)v95 + 7);
      }
      else
      {
        __dst[24] = v95[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v95 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v95 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v95 + 11);
        *((void *)__dst + 6) = *((void *)v95 + 6);
        *((void *)__dst + 7) = v19;
        swift_bridgeObjectRetain();
      }
      uint64_t v16 = a2;
      uint64_t v21 = *(int *)(v12 + 28);
      uint64_t v22 = &__dst[v21];
      uint64_t v23 = &v95[v21];
      uint64_t v24 = sub_23309B300();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      uint64_t v17 = a1;
      uint64_t v27 = *(int *)(v12 + 32);
      uint64_t v28 = &__dst[v27];
      long long v29 = &v95[v27];
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v96 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v12);
      uint64_t v15 = a3;
    }
    uint64_t v32 = v15[12];
    uint64_t v33 = (char *)v17 + v32;
    uint64_t v34 = (char *)v16 + v32;
    uint64_t v35 = type metadata accessor for Period();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      if (v100(v34, 1, v12))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        *uint64_t v33 = *v34;
        *((void *)v33 + 1) = *((void *)v34 + 1);
        *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
        uint64_t v39 = *((void *)v34 + 7);
        if (v39 == 1)
        {
          long long v40 = *(_OWORD *)(v34 + 40);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
          *(_OWORD *)(v33 + 40) = v40;
          *((void *)v33 + 7) = *((void *)v34 + 7);
        }
        else
        {
          v33[24] = v34[24];
          *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
          *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
          *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
          *((void *)v33 + 6) = *((void *)v34 + 6);
          *((void *)v33 + 7) = v39;
          swift_bridgeObjectRetain();
        }
        uint64_t v41 = *(int *)(v12 + 28);
        uint64_t v42 = &v33[v41];
        uint64_t v43 = &v34[v41];
        uint64_t v44 = sub_23309B300();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v45 + 16))(v42, v43, v44);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
        uint64_t v16 = a2;
        uint64_t v17 = a1;
        uint64_t v47 = *(int *)(v12 + 32);
        uint64_t v48 = &v33[v47];
        uint64_t v49 = &v34[v47];
        uint64_t v50 = v49[1];
        void *v48 = *v49;
        v48[1] = v50;
        uint64_t v51 = v12;
        uint64_t v52 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v96 + 56);
        swift_bridgeObjectRetain();
        v52(v33, 0, 1, v51);
        uint64_t v12 = v51;
        uint64_t v15 = a3;
      }
      uint64_t v53 = *(int *)(v35 + 20);
      uint64_t v54 = &v33[v53];
      uint64_t v55 = &v34[v53];
      if (v100(v55, 1, v12))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        *uint64_t v54 = *v55;
        *((void *)v54 + 1) = *((void *)v55 + 1);
        *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
        uint64_t v57 = *((void *)v55 + 7);
        if (v57 == 1)
        {
          long long v58 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
          *(_OWORD *)(v54 + 40) = v58;
          *((void *)v54 + 7) = *((void *)v55 + 7);
        }
        else
        {
          v54[24] = v55[24];
          *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
          *(_OWORD *)(v54 + 28) = *(_OWORD *)(v55 + 28);
          *((_DWORD *)v54 + 11) = *((_DWORD *)v55 + 11);
          *((void *)v54 + 6) = *((void *)v55 + 6);
          *((void *)v54 + 7) = v57;
          swift_bridgeObjectRetain();
        }
        uint64_t v59 = *(int *)(v12 + 28);
        uint64_t v60 = &v54[v59];
        int v61 = &v55[v59];
        uint64_t v62 = sub_23309B300();
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v63 + 16))(v60, v61, v62);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        }
        uint64_t v16 = a2;
        uint64_t v17 = a1;
        uint64_t v65 = *(int *)(v12 + 32);
        uint64_t v66 = &v54[v65];
        uint64_t v67 = &v55[v65];
        uint64_t v68 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v68;
        uint64_t v69 = v12;
        uint64_t v70 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v96 + 56);
        swift_bridgeObjectRetain();
        v70(v54, 0, 1, v69);
        uint64_t v12 = v69;
        uint64_t v15 = a3;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v71 = v15[13];
    uint64_t v72 = (char *)v17 + v71;
    uint64_t v73 = (char *)v16 + v71;
    if (v100((unsigned char *)v16 + v71, 1, v12))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      *uint64_t v72 = *v73;
      *((void *)v72 + 1) = *((void *)v73 + 1);
      *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
      uint64_t v75 = *((void *)v73 + 7);
      if (v75 == 1)
      {
        long long v76 = *(_OWORD *)(v73 + 40);
        *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
        *(_OWORD *)(v72 + 40) = v76;
        *((void *)v72 + 7) = *((void *)v73 + 7);
      }
      else
      {
        v72[24] = v73[24];
        *(_WORD *)(v72 + 25) = *(_WORD *)(v73 + 25);
        *(_OWORD *)(v72 + 28) = *(_OWORD *)(v73 + 28);
        *((_DWORD *)v72 + 11) = *((_DWORD *)v73 + 11);
        *((void *)v72 + 6) = *((void *)v73 + 6);
        *((void *)v72 + 7) = v75;
        swift_bridgeObjectRetain();
      }
      uint64_t v77 = *(int *)(v12 + 28);
      uint64_t v78 = &v72[v77];
      uint64_t v79 = &v73[v77];
      uint64_t v80 = sub_23309B300();
      uint64_t v81 = *(void *)(v80 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v81 + 16))(v78, v79, v80);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
      }
      uint64_t v17 = a1;
      uint64_t v83 = *(int *)(v12 + 32);
      uint64_t v84 = &v72[v83];
      uint64_t v85 = &v73[v83];
      uint64_t v86 = v85[1];
      *uint64_t v84 = *v85;
      v84[1] = v86;
      uint64_t v87 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v96 + 56);
      swift_bridgeObjectRetain();
      v87(v72, 0, 1, v12);
    }
    uint64_t v88 = v15[15];
    *(void *)((char *)v17 + v15[14]) = *(void *)((char *)v16 + v15[14]);
    *(void *)((char *)v17 + v88) = *(void *)((char *)v16 + v88);
    uint64_t v89 = v15[16];
    uint64_t v90 = (void *)((char *)v17 + v89);
    uint64_t v91 = (void *)((char *)v16 + v89);
    uint64_t v92 = v91[1];
    *uint64_t v90 = *v91;
    v90[1] = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v17;
}

uint64_t destroy for ModelsR4.DiagnosticReport(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[11];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[12];
  uint64_t v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(void *)(v10 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v12 = v10 + *(int *)(v5 + 28);
      uint64_t v13 = sub_23309B300();
      uint64_t v14 = *(void *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(void *)(v15 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = v15 + *(int *)(v5 + 28);
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v19 = a1 + a2[13];
  if (!v6(v19, 1, v5))
  {
    if (*(void *)(v19 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = v19 + *(int *)(v5 + 28);
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.DiagnosticReport(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a3[11];
  __dst = (char *)a1 + v9;
  uint64_t v92 = (char *)a2 + v9;
  a1[12] = a2[12];
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v94 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v94 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v97 = v11;
  if (v11(v92, 1, v10))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(__dst, v92, *(void *)(*(void *)(v12 - 8) + 64));
    uint64_t v13 = a2;
    uint64_t v14 = a3;
    uint64_t v15 = a1;
  }
  else
  {
    unsigned char *__dst = *v92;
    *((void *)__dst + 1) = *((void *)v92 + 1);
    *((_DWORD *)__dst + 4) = *((_DWORD *)v92 + 4);
    uint64_t v16 = *((void *)v92 + 7);
    if (v16 == 1)
    {
      long long v17 = *(_OWORD *)(v92 + 40);
      *(_OWORD *)(__dst + 24) = *(_OWORD *)(v92 + 24);
      *(_OWORD *)(__dst + 40) = v17;
      *((void *)__dst + 7) = *((void *)v92 + 7);
    }
    else
    {
      __dst[24] = v92[24];
      *(_WORD *)(__dst + 25) = *(_WORD *)(v92 + 25);
      *(_OWORD *)(__dst + 28) = *(_OWORD *)(v92 + 28);
      *((_DWORD *)__dst + 11) = *((_DWORD *)v92 + 11);
      *((void *)__dst + 6) = *((void *)v92 + 6);
      *((void *)__dst + 7) = v16;
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = a3;
    uint64_t v15 = a1;
    uint64_t v18 = *(int *)(v10 + 28);
    uint64_t v19 = &__dst[v18];
    uint64_t v20 = &v92[v18];
    uint64_t v21 = sub_23309B300();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v24 = *(int *)(v10 + 32);
    uint64_t v25 = &__dst[v24];
    uint64_t v26 = &v92[v24];
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v94 + 56);
    swift_bridgeObjectRetain();
    v28(__dst, 0, 1, v10);
    uint64_t v13 = a2;
  }
  uint64_t v29 = v14[12];
  uint64_t v30 = (char *)v15 + v29;
  uint64_t v31 = (char *)v13 + v29;
  uint64_t v32 = type metadata accessor for Period();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    if (v97(v31, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      *uint64_t v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
      uint64_t v36 = *((void *)v31 + 7);
      if (v36 == 1)
      {
        long long v37 = *(_OWORD *)(v31 + 40);
        *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
        *(_OWORD *)(v30 + 40) = v37;
        *((void *)v30 + 7) = *((void *)v31 + 7);
      }
      else
      {
        v30[24] = v31[24];
        *(_WORD *)(v30 + 25) = *(_WORD *)(v31 + 25);
        *(_OWORD *)(v30 + 28) = *(_OWORD *)(v31 + 28);
        *((_DWORD *)v30 + 11) = *((_DWORD *)v31 + 11);
        *((void *)v30 + 6) = *((void *)v31 + 6);
        *((void *)v30 + 7) = v36;
        swift_bridgeObjectRetain();
      }
      uint64_t v38 = *(int *)(v10 + 28);
      uint64_t v39 = &v30[v38];
      long long v40 = &v31[v38];
      uint64_t v41 = sub_23309B300();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16))(v39, v40, v41);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      uint64_t v14 = a3;
      uint64_t v44 = *(int *)(v10 + 32);
      uint64_t v45 = &v30[v44];
      uint64_t v46 = &v31[v44];
      uint64_t v47 = v46[1];
      void *v45 = *v46;
      v45[1] = v47;
      uint64_t v48 = v10;
      uint64_t v49 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v94 + 56);
      swift_bridgeObjectRetain();
      v49(v30, 0, 1, v48);
      uint64_t v10 = v48;
      uint64_t v13 = a2;
    }
    uint64_t v50 = *(int *)(v32 + 20);
    uint64_t v51 = &v30[v50];
    uint64_t v52 = &v31[v50];
    if (v97(v52, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      *uint64_t v51 = *v52;
      *((void *)v51 + 1) = *((void *)v52 + 1);
      *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
      uint64_t v54 = *((void *)v52 + 7);
      if (v54 == 1)
      {
        long long v55 = *(_OWORD *)(v52 + 40);
        *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
        *(_OWORD *)(v51 + 40) = v55;
        *((void *)v51 + 7) = *((void *)v52 + 7);
      }
      else
      {
        v51[24] = v52[24];
        *(_WORD *)(v51 + 25) = *(_WORD *)(v52 + 25);
        *(_OWORD *)(v51 + 28) = *(_OWORD *)(v52 + 28);
        *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
        *((void *)v51 + 6) = *((void *)v52 + 6);
        *((void *)v51 + 7) = v54;
        swift_bridgeObjectRetain();
      }
      uint64_t v56 = *(int *)(v10 + 28);
      uint64_t v93 = &v51[v56];
      uint64_t v57 = &v52[v56];
      uint64_t v58 = sub_23309B300();
      uint64_t v59 = *(void *)(v58 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v93, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v59 + 16))(v93, v57, v58);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v59 + 56))(v93, 0, 1, v58);
      }
      uint64_t v61 = *(int *)(v10 + 32);
      uint64_t v62 = &v51[v61];
      uint64_t v63 = &v52[v61];
      uint64_t v64 = v63[1];
      void *v62 = *v63;
      v62[1] = v64;
      uint64_t v65 = v10;
      uint64_t v66 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v94 + 56);
      swift_bridgeObjectRetain();
      v66(v51, 0, 1, v65);
      uint64_t v10 = v65;
      uint64_t v13 = a2;
      uint64_t v14 = a3;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  uint64_t v67 = v14[13];
  uint64_t v68 = (char *)v15 + v67;
  uint64_t v69 = (char *)v13 + v67;
  if (v97((unsigned char *)v13 + v67, 1, v10))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
  }
  else
  {
    *uint64_t v68 = *v69;
    *((void *)v68 + 1) = *((void *)v69 + 1);
    *((_DWORD *)v68 + 4) = *((_DWORD *)v69 + 4);
    uint64_t v71 = *((void *)v69 + 7);
    if (v71 == 1)
    {
      long long v72 = *(_OWORD *)(v69 + 40);
      *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
      *(_OWORD *)(v68 + 40) = v72;
      *((void *)v68 + 7) = *((void *)v69 + 7);
    }
    else
    {
      v68[24] = v69[24];
      *(_WORD *)(v68 + 25) = *(_WORD *)(v69 + 25);
      *(_OWORD *)(v68 + 28) = *(_OWORD *)(v69 + 28);
      *((_DWORD *)v68 + 11) = *((_DWORD *)v69 + 11);
      *((void *)v68 + 6) = *((void *)v69 + 6);
      *((void *)v68 + 7) = v71;
      swift_bridgeObjectRetain();
    }
    uint64_t v73 = *(int *)(v10 + 28);
    uint64_t v74 = &v68[v73];
    uint64_t v75 = &v69[v73];
    uint64_t v76 = sub_23309B300();
    uint64_t v77 = *(void *)(v76 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 16))(v74, v75, v76);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
    }
    uint64_t v79 = *(int *)(v10 + 32);
    uint64_t v80 = &v68[v79];
    uint64_t v81 = &v69[v79];
    uint64_t v82 = v81[1];
    *uint64_t v80 = *v81;
    v80[1] = v82;
    uint64_t v83 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v94 + 56);
    swift_bridgeObjectRetain();
    v83(v68, 0, 1, v10);
  }
  uint64_t v84 = v14[15];
  *(void *)((char *)v15 + v14[14]) = *(void *)((char *)v13 + v14[14]);
  *(void *)((char *)v15 + v84) = *(void *)((char *)v13 + v84);
  uint64_t v85 = v14[16];
  uint64_t v86 = (void *)((char *)v15 + v85);
  uint64_t v87 = (void *)((char *)v13 + v85);
  uint64_t v88 = v87[1];
  *uint64_t v86 = *v87;
  v86[1] = v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v15;
}

void *assignWithCopy for ModelsR4.DiagnosticReport(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FHIRDateTime();
  uint64_t v10 = (void **)(*(void *)(v9 - 8) + 48);
  uint64_t v234 = *(void *)(v9 - 8);
  uint64_t v235 = (uint64_t (*)(char *, uint64_t, uint64_t))*v10;
  int v11 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v10)(v7, 1, v9);
  int v12 = v235(v8, 1, v9);
  if (!v11)
  {
    if (v12)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    uint64_t v18 = (long long *)(v7 + 24);
    uint64_t v19 = (long long *)(v8 + 24);
    uint64_t v20 = *((void *)v8 + 7);
    uint64_t v222 = a3;
    if (*(void *)(v7 + 56) == 1)
    {
      if (v20 == 1)
      {
        long long v21 = *v19;
        long long v22 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        *uint64_t v18 = v21;
        *(_OWORD *)(v7 + 40) = v22;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v36 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v36;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v34 = *((void *)v8 + 7);
      long long v35 = *(_OWORD *)(v8 + 40);
      *uint64_t v18 = *v19;
      *(_OWORD *)(v7 + 40) = v35;
      *(void *)(v7 + 56) = v34;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v229 = (int *)v9;
    uint64_t v37 = *(int *)(v9 + 28);
    uint64_t v38 = (void *)(v7 + v37);
    uint64_t v39 = &v8[v37];
    uint64_t v40 = sub_23309B300();
    uint64_t v41 = *(void *)(v40 - 8);
    uint64_t v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
    size_t v219 = v38;
    LODWORD(v38) = v42(v38, 1, v40);
    int v43 = v42(v39, 1, v40);
    if (v38)
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v219, v39, v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v219, 0, 1, v40);
        goto LABEL_28;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
      uint64_t v46 = v219;
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v41 + 24))(v219, v39, v40);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v41 + 8))(v219, v40);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v45 = *(void *)(*(void *)(v47 - 8) + 64);
      uint64_t v46 = v219;
    }
    memcpy(v46, v39, v45);
LABEL_28:
    a3 = v222;
    uint64_t v9 = (uint64_t)v229;
    uint64_t v48 = v229[8];
    uint64_t v49 = (void *)(v7 + v48);
    uint64_t v50 = &v8[v48];
    *uint64_t v49 = *(void *)v50;
    v49[1] = *((void *)v50 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (v12)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v7 = *v8;
  uint64_t v13 = *((void *)v8 + 1);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
  *(void *)(v7 + 8) = v13;
  uint64_t v14 = a3;
  if (*((void *)v8 + 7) == 1)
  {
    long long v15 = *(_OWORD *)(v8 + 24);
    long long v16 = *(_OWORD *)(v8 + 40);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v15;
    *(_OWORD *)(v7 + 40) = v16;
  }
  else
  {
    *(unsigned char *)(v7 + 24) = v8[24];
    *(unsigned char *)(v7 + 25) = v8[25];
    *(unsigned char *)(v7 + 26) = v8[26];
    long long v23 = *(_OWORD *)(v8 + 28);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v23;
    *(void *)(v7 + 48) = *((void *)v8 + 6);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = *(int *)(v9 + 28);
  uint64_t v25 = (void *)(v7 + v24);
  uint64_t v26 = &v8[v24];
  uint64_t v27 = sub_23309B300();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  a3 = v14;
  uint64_t v30 = *(int *)(v9 + 32);
  uint64_t v31 = (void *)(v7 + v30);
  uint64_t v32 = &v8[v30];
  *uint64_t v31 = *(void *)v32;
  v31[1] = *((void *)v32 + 1);
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56);
  swift_bridgeObjectRetain();
  v33(v7, 0, 1, v9);
LABEL_29:
  uint64_t v51 = a3[12];
  uint64_t v52 = (uint64_t)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = type metadata accessor for Period();
  int v230 = *(void **)(v54 - 8);
  long long v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v230[6];
  int v56 = v55(v52, 1, v54);
  int v57 = v55((uint64_t)v53, 1, v54);
  if (!v56)
  {
    if (v57)
    {
      sub_232EA3DC4(v52, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_35;
    }
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
    int v61 = v235((char *)v52, 1, v9);
    int v62 = v235(v53, 1, v9);
    if (v61)
    {
      if (!v62)
      {
        *(unsigned char *)uint64_t v52 = *v53;
        uint64_t v63 = *((void *)v53 + 1);
        *(_DWORD *)(v52 + 16) = *((_DWORD *)v53 + 4);
        *(void *)(v52 + 8) = v63;
        uint64_t v223 = a3;
        if (*((void *)v53 + 7) == 1)
        {
          long long v64 = *(_OWORD *)(v53 + 24);
          long long v65 = *(_OWORD *)(v53 + 40);
          *(void *)(v52 + 56) = *((void *)v53 + 7);
          *(_OWORD *)(v52 + 24) = v64;
          *(_OWORD *)(v52 + 40) = v65;
        }
        else
        {
          *(unsigned char *)(v52 + 24) = v53[24];
          *(unsigned char *)(v52 + 25) = v53[25];
          *(unsigned char *)(v52 + 26) = v53[26];
          long long v103 = *(_OWORD *)(v53 + 28);
          *(_DWORD *)(v52 + 44) = *((_DWORD *)v53 + 11);
          *(_OWORD *)(v52 + 28) = v103;
          *(void *)(v52 + 48) = *((void *)v53 + 6);
          *(void *)(v52 + 56) = *((void *)v53 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v104 = *(int *)(v9 + 28);
        uint64_t v105 = (void *)(v52 + v104);
        uint64_t v106 = &v53[v104];
        uint64_t v107 = sub_23309B300();
        uint64_t v108 = *(void *)(v107 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
        }
        a3 = v223;
        uint64_t v110 = *(int *)(v9 + 32);
        uint64_t v111 = (void *)(v52 + v110);
        uint64_t v112 = &v53[v110];
        *uint64_t v111 = *(void *)v112;
        v111[1] = *((void *)v112 + 1);
        uint64_t v113 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56);
        swift_bridgeObjectRetain();
        v113(v52, 0, 1, v9);
        uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
LABEL_81:
        uint64_t v129 = *(int *)(v54 + 20);
        uint64_t v130 = v52 + v129;
        uint64_t v131 = &v53[v129];
        int v132 = v58(v130, 1, v9);
        int v133 = v58((uint64_t)v131, 1, v9);
        if (v132)
        {
          if (!v133)
          {
            *(unsigned char *)uint64_t v130 = *v131;
            uint64_t v134 = *((void *)v131 + 1);
            *(_DWORD *)(v130 + 16) = *((_DWORD *)v131 + 4);
            *(void *)(v130 + 8) = v134;
            uint64_t v135 = a3;
            if (*((void *)v131 + 7) == 1)
            {
              long long v136 = *(_OWORD *)(v131 + 24);
              long long v137 = *(_OWORD *)(v131 + 40);
              *(void *)(v130 + 56) = *((void *)v131 + 7);
              *(_OWORD *)(v130 + 24) = v136;
              *(_OWORD *)(v130 + 40) = v137;
            }
            else
            {
              *(unsigned char *)(v130 + 24) = v131[24];
              *(unsigned char *)(v130 + 25) = v131[25];
              *(unsigned char *)(v130 + 26) = v131[26];
              long long v144 = *(_OWORD *)(v131 + 28);
              *(_DWORD *)(v130 + 44) = *((_DWORD *)v131 + 11);
              *(_OWORD *)(v130 + 28) = v144;
              *(void *)(v130 + 48) = *((void *)v131 + 6);
              *(void *)(v130 + 56) = *((void *)v131 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v145 = *(int *)(v9 + 28);
            int v146 = (void *)(v130 + v145);
            uint64_t v147 = &v131[v145];
            uint64_t v148 = sub_23309B300();
            uint64_t v149 = *(void *)(v148 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v146, v147, *(void *)(*(void *)(v150 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v149 + 16))(v146, v147, v148);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
            }
            a3 = v135;
            uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
            uint64_t v151 = *(int *)(v9 + 32);
            uint64_t v152 = (void *)(v130 + v151);
            uint64_t v153 = &v131[v151];
            *uint64_t v152 = *(void *)v153;
            v152[1] = *((void *)v153 + 1);
            uint64_t v154 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56);
            swift_bridgeObjectRetain();
            v154(v130, 0, 1, v9);
            goto LABEL_109;
          }
LABEL_87:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v130, v131, *(void *)(*(void *)(v138 - 8) + 64));
          goto LABEL_109;
        }
        if (v133)
        {
          sub_232EA3DC4(v130, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_87;
        }
        *(unsigned char *)uint64_t v130 = *v131;
        *(void *)(v130 + 8) = *((void *)v131 + 1);
        *(_WORD *)(v130 + 16) = *((_WORD *)v131 + 8);
        *(_WORD *)(v130 + 18) = *((_WORD *)v131 + 9);
        uint64_t v139 = (long long *)(v130 + 24);
        uint64_t v140 = (long long *)(v131 + 24);
        uint64_t v141 = *((void *)v131 + 7);
        uint64_t v227 = a3;
        if (*(void *)(v130 + 56) == 1)
        {
          if (v141 == 1)
          {
            long long v142 = *v140;
            long long v143 = *(_OWORD *)(v131 + 40);
            *(void *)(v130 + 56) = *((void *)v131 + 7);
            *uint64_t v139 = v142;
            *(_OWORD *)(v130 + 40) = v143;
          }
          else
          {
            *(unsigned char *)(v130 + 24) = v131[24];
            *(unsigned char *)(v130 + 25) = v131[25];
            *(unsigned char *)(v130 + 26) = v131[26];
            long long v157 = *(_OWORD *)(v131 + 28);
            *(_DWORD *)(v130 + 44) = *((_DWORD *)v131 + 11);
            *(_OWORD *)(v130 + 28) = v157;
            *(void *)(v130 + 48) = *((void *)v131 + 6);
            *(void *)(v130 + 56) = *((void *)v131 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v141 == 1)
        {
          sub_232F0434C(v130 + 24);
          uint64_t v155 = *((void *)v131 + 7);
          long long v156 = *(_OWORD *)(v131 + 40);
          *uint64_t v139 = *v140;
          *(_OWORD *)(v130 + 40) = v156;
          *(void *)(v130 + 56) = v155;
        }
        else
        {
          *(unsigned char *)(v130 + 24) = v131[24];
          *(unsigned char *)(v130 + 25) = v131[25];
          *(unsigned char *)(v130 + 26) = v131[26];
          *(_DWORD *)(v130 + 28) = *((_DWORD *)v131 + 7);
          *(_WORD *)(v130 + 32) = *((_WORD *)v131 + 16);
          *(_WORD *)(v130 + 34) = *((_WORD *)v131 + 17);
          *(_WORD *)(v130 + 36) = *((_WORD *)v131 + 18);
          *(_WORD *)(v130 + 38) = *((_WORD *)v131 + 19);
          *(_WORD *)(v130 + 40) = *((_WORD *)v131 + 20);
          *(_WORD *)(v130 + 42) = *((_WORD *)v131 + 21);
          *(_WORD *)(v130 + 44) = *((_WORD *)v131 + 22);
          *(_WORD *)(v130 + 46) = *((_WORD *)v131 + 23);
          *(void *)(v130 + 48) = *((void *)v131 + 6);
          *(void *)(v130 + 56) = *((void *)v131 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v158 = *(int *)(v9 + 28);
        uint64_t v159 = (void *)(v130 + v158);
        uint64_t v160 = &v131[v158];
        uint64_t v161 = sub_23309B300();
        __srca = *(void **)(v161 - 8);
        uint64_t v162 = (uint64_t (*)(void *, uint64_t, uint64_t))__srca[6];
        uint64_t v232 = v159;
        LODWORD(v159) = v162(v159, 1, v161);
        int v163 = v162(v160, 1, v161);
        if (v159)
        {
          if (!v163)
          {
            ((void (*)(void *, char *, uint64_t))__srca[2])(v232, v160, v161);
            ((void (*)(void *, void, uint64_t, uint64_t))__srca[7])(v232, 0, 1, v161);
            goto LABEL_108;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v165 = *(void *)(*(void *)(v164 - 8) + 64);
          uint64_t v166 = v232;
        }
        else
        {
          if (!v163)
          {
            ((void (*)(void *, char *, uint64_t))__srca[3])(v232, v160, v161);
            goto LABEL_108;
          }
          ((void (*)(void *, uint64_t))__srca[1])(v232, v161);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v165 = *(void *)(*(void *)(v167 - 8) + 64);
          uint64_t v166 = v232;
        }
        memcpy(v166, v160, v165);
LABEL_108:
        a3 = v227;
        uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
        uint64_t v168 = *(int *)(v9 + 32);
        uint64_t v169 = (void *)(v130 + v168);
        uint64_t v170 = &v131[v168];
        *uint64_t v169 = *(void *)v170;
        v169[1] = *((void *)v170 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_109;
      }
LABEL_44:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v52, v53, *(void *)(*(void *)(v69 - 8) + 64));
      goto LABEL_81;
    }
    if (v62)
    {
      sub_232EA3DC4(v52, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_44;
    }
    uint64_t v226 = a3;
    *(unsigned char *)uint64_t v52 = *v53;
    *(void *)(v52 + 8) = *((void *)v53 + 1);
    *(_WORD *)(v52 + 16) = *((_WORD *)v53 + 8);
    *(_WORD *)(v52 + 18) = *((_WORD *)v53 + 9);
    size_t v98 = (long long *)(v52 + 24);
    long long v99 = (long long *)(v53 + 24);
    uint64_t v100 = *((void *)v53 + 7);
    if (*(void *)(v52 + 56) == 1)
    {
      if (v100 == 1)
      {
        long long v101 = *v99;
        long long v102 = *(_OWORD *)(v53 + 40);
        *(void *)(v52 + 56) = *((void *)v53 + 7);
        *size_t v98 = v101;
        *(_OWORD *)(v52 + 40) = v102;
      }
      else
      {
        *(unsigned char *)(v52 + 24) = v53[24];
        *(unsigned char *)(v52 + 25) = v53[25];
        *(unsigned char *)(v52 + 26) = v53[26];
        long long v116 = *(_OWORD *)(v53 + 28);
        *(_DWORD *)(v52 + 44) = *((_DWORD *)v53 + 11);
        *(_OWORD *)(v52 + 28) = v116;
        *(void *)(v52 + 48) = *((void *)v53 + 6);
        *(void *)(v52 + 56) = *((void *)v53 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v100 == 1)
    {
      sub_232F0434C(v52 + 24);
      uint64_t v114 = *((void *)v53 + 7);
      long long v115 = *(_OWORD *)(v53 + 40);
      *size_t v98 = *v99;
      *(_OWORD *)(v52 + 40) = v115;
      *(void *)(v52 + 56) = v114;
    }
    else
    {
      *(unsigned char *)(v52 + 24) = v53[24];
      *(unsigned char *)(v52 + 25) = v53[25];
      *(unsigned char *)(v52 + 26) = v53[26];
      *(_DWORD *)(v52 + 28) = *((_DWORD *)v53 + 7);
      *(_WORD *)(v52 + 32) = *((_WORD *)v53 + 16);
      *(_WORD *)(v52 + 34) = *((_WORD *)v53 + 17);
      *(_WORD *)(v52 + 36) = *((_WORD *)v53 + 18);
      *(_WORD *)(v52 + 38) = *((_WORD *)v53 + 19);
      *(_WORD *)(v52 + 40) = *((_WORD *)v53 + 20);
      *(_WORD *)(v52 + 42) = *((_WORD *)v53 + 21);
      *(_WORD *)(v52 + 44) = *((_WORD *)v53 + 22);
      *(_WORD *)(v52 + 46) = *((_WORD *)v53 + 23);
      *(void *)(v52 + 48) = *((void *)v53 + 6);
      *(void *)(v52 + 56) = *((void *)v53 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v117 = *(int *)(v9 + 28);
    uint64_t v118 = (void *)(v52 + v117);
    int v231 = &v53[v117];
    uint64_t v119 = sub_23309B300();
    __src = *(void **)(v119 - 8);
    long long v120 = (uint64_t (*)(void *, uint64_t, uint64_t))__src[6];
    uint64_t v221 = v118;
    LODWORD(v118) = v120(v118, 1, v119);
    int v121 = v120(v231, 1, v119);
    if (v118)
    {
      if (!v121)
      {
        ((void (*)(void *, char *, uint64_t))__src[2])(v221, v231, v119);
        ((void (*)(void *, void, uint64_t, uint64_t))__src[7])(v221, 0, 1, v119);
        goto LABEL_80;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v123 = *(void *)(*(void *)(v122 - 8) + 64);
      uint64_t v124 = v221;
    }
    else
    {
      if (!v121)
      {
        ((void (*)(void *, char *, uint64_t))__src[3])(v221, v231, v119);
        goto LABEL_80;
      }
      ((void (*)(void *, uint64_t))__src[1])(v221, v119);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v123 = *(void *)(*(void *)(v125 - 8) + 64);
      uint64_t v124 = v221;
    }
    memcpy(v124, v231, v123);
LABEL_80:
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
    uint64_t v126 = *(int *)(v9 + 32);
    int v127 = (void *)(v52 + v126);
    uint64_t v128 = &v53[v126];
    *int v127 = *(void *)v128;
    v127[1] = *((void *)v128 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v226;
    goto LABEL_81;
  }
  if (v57)
  {
LABEL_35:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v52, v53, *(void *)(*(void *)(v60 - 8) + 64));
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
    goto LABEL_109;
  }
  uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
  if (v235(v53, 1, v9))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v52, v53, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v52 = *v53;
    uint64_t v66 = *((void *)v53 + 1);
    *(_DWORD *)(v52 + 16) = *((_DWORD *)v53 + 4);
    *(void *)(v52 + 8) = v66;
    long long v224 = a3;
    if (*((void *)v53 + 7) == 1)
    {
      long long v67 = *(_OWORD *)(v53 + 24);
      long long v68 = *(_OWORD *)(v53 + 40);
      *(void *)(v52 + 56) = *((void *)v53 + 7);
      *(_OWORD *)(v52 + 24) = v67;
      *(_OWORD *)(v52 + 40) = v68;
    }
    else
    {
      *(unsigned char *)(v52 + 24) = v53[24];
      *(unsigned char *)(v52 + 25) = v53[25];
      *(unsigned char *)(v52 + 26) = v53[26];
      long long v70 = *(_OWORD *)(v53 + 28);
      *(_DWORD *)(v52 + 44) = *((_DWORD *)v53 + 11);
      *(_OWORD *)(v52 + 28) = v70;
      *(void *)(v52 + 48) = *((void *)v53 + 6);
      *(void *)(v52 + 56) = *((void *)v53 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v71 = *(int *)(v9 + 28);
    long long v72 = (void *)(v52 + v71);
    uint64_t v73 = &v53[v71];
    uint64_t v74 = sub_23309B300();
    uint64_t v75 = *(void *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
    }
    a3 = v224;
    uint64_t v77 = *(int *)(v9 + 32);
    uint64_t v78 = (void *)(v52 + v77);
    uint64_t v79 = &v53[v77];
    *uint64_t v78 = *(void *)v79;
    v78[1] = *((void *)v79 + 1);
    uint64_t v80 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56);
    swift_bridgeObjectRetain();
    v80(v52, 0, 1, v9);
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
  }
  uint64_t v81 = *(int *)(v54 + 20);
  uint64_t v82 = (char *)(v52 + v81);
  uint64_t v83 = &v53[v81];
  if (v58((uint64_t)v83, 1, v9))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    *uint64_t v82 = *v83;
    uint64_t v85 = *((void *)v83 + 1);
    *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
    *((void *)v82 + 1) = v85;
    uint64_t v225 = a3;
    if (*((void *)v83 + 7) == 1)
    {
      long long v86 = *(_OWORD *)(v83 + 24);
      long long v87 = *(_OWORD *)(v83 + 40);
      *((void *)v82 + 7) = *((void *)v83 + 7);
      *(_OWORD *)(v82 + 24) = v86;
      *(_OWORD *)(v82 + 40) = v87;
    }
    else
    {
      v82[24] = v83[24];
      v82[25] = v83[25];
      v82[26] = v83[26];
      long long v88 = *(_OWORD *)(v83 + 28);
      *((_DWORD *)v82 + 11) = *((_DWORD *)v83 + 11);
      *(_OWORD *)(v82 + 28) = v88;
      *((void *)v82 + 6) = *((void *)v83 + 6);
      *((void *)v82 + 7) = *((void *)v83 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v89 = *(int *)(v9 + 28);
    long long v220 = &v82[v89];
    uint64_t v90 = &v83[v89];
    uint64_t v91 = sub_23309B300();
    uint64_t v92 = *(void *)(v91 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v220, v90, *(void *)(*(void *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v220, v90, v91);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v220, 0, 1, v91);
    }
    a3 = v225;
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
    uint64_t v94 = *(int *)(v9 + 32);
    uint64_t v95 = &v82[v94];
    uint64_t v96 = &v83[v94];
    *(void *)uint64_t v95 = *(void *)v96;
    *((void *)v95 + 1) = *((void *)v96 + 1);
    uint64_t v97 = *(void (**)(char *, void, uint64_t, uint64_t))(v234 + 56);
    swift_bridgeObjectRetain();
    v97(v82, 0, 1, v9);
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v230[7])(v52, 0, 1, v54);
LABEL_109:
  uint64_t v171 = a3[13];
  uint64_t v172 = (uint64_t)a1 + v171;
  uint64_t v173 = (char *)a2 + v171;
  int v174 = v58((uint64_t)a1 + v171, 1, v9);
  int v175 = v58((uint64_t)v173, 1, v9);
  if (!v174)
  {
    if (v175)
    {
      sub_232EA3DC4(v172, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_115;
    }
    *(unsigned char *)uint64_t v172 = *v173;
    *(void *)(v172 + 8) = *((void *)v173 + 1);
    *(_WORD *)(v172 + 16) = *((_WORD *)v173 + 8);
    *(_WORD *)(v172 + 18) = *((_WORD *)v173 + 9);
    uint64_t v180 = (long long *)(v172 + 24);
    uint64_t v181 = (long long *)(v173 + 24);
    uint64_t v182 = *((void *)v173 + 7);
    uint64_t v228 = a3;
    if (*(void *)(v172 + 56) == 1)
    {
      if (v182 == 1)
      {
        long long v183 = *v181;
        long long v184 = *(_OWORD *)(v173 + 40);
        *(void *)(v172 + 56) = *((void *)v173 + 7);
        *uint64_t v180 = v183;
        *(_OWORD *)(v172 + 40) = v184;
      }
      else
      {
        *(unsigned char *)(v172 + 24) = v173[24];
        *(unsigned char *)(v172 + 25) = v173[25];
        *(unsigned char *)(v172 + 26) = v173[26];
        long long v198 = *(_OWORD *)(v173 + 28);
        *(_DWORD *)(v172 + 44) = *((_DWORD *)v173 + 11);
        *(_OWORD *)(v172 + 28) = v198;
        *(void *)(v172 + 48) = *((void *)v173 + 6);
        *(void *)(v172 + 56) = *((void *)v173 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v182 == 1)
    {
      sub_232F0434C(v172 + 24);
      uint64_t v196 = *((void *)v173 + 7);
      long long v197 = *(_OWORD *)(v173 + 40);
      *uint64_t v180 = *v181;
      *(_OWORD *)(v172 + 40) = v197;
      *(void *)(v172 + 56) = v196;
    }
    else
    {
      *(unsigned char *)(v172 + 24) = v173[24];
      *(unsigned char *)(v172 + 25) = v173[25];
      *(unsigned char *)(v172 + 26) = v173[26];
      *(_DWORD *)(v172 + 28) = *((_DWORD *)v173 + 7);
      *(_WORD *)(v172 + 32) = *((_WORD *)v173 + 16);
      *(_WORD *)(v172 + 34) = *((_WORD *)v173 + 17);
      *(_WORD *)(v172 + 36) = *((_WORD *)v173 + 18);
      *(_WORD *)(v172 + 38) = *((_WORD *)v173 + 19);
      *(_WORD *)(v172 + 40) = *((_WORD *)v173 + 20);
      *(_WORD *)(v172 + 42) = *((_WORD *)v173 + 21);
      *(_WORD *)(v172 + 44) = *((_WORD *)v173 + 22);
      *(_WORD *)(v172 + 46) = *((_WORD *)v173 + 23);
      *(void *)(v172 + 48) = *((void *)v173 + 6);
      *(void *)(v172 + 56) = *((void *)v173 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v233 = (int *)v9;
    uint64_t v199 = *(int *)(v9 + 28);
    uint64_t v200 = (void *)(v172 + v199);
    uint64_t v201 = &v173[v199];
    uint64_t v202 = sub_23309B300();
    uint64_t v203 = *(void *)(v202 - 8);
    uint64_t v204 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v203 + 48);
    uint64_t v236 = v200;
    LODWORD(v200) = v204(v200, 1, v202);
    int v205 = v204(v201, 1, v202);
    if (v200)
    {
      if (!v205)
      {
        (*(void (**)(void *, char *, uint64_t))(v203 + 16))(v236, v201, v202);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v203 + 56))(v236, 0, 1, v202);
        goto LABEL_136;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v207 = *(void *)(*(void *)(v206 - 8) + 64);
      uint64_t v208 = v236;
    }
    else
    {
      if (!v205)
      {
        (*(void (**)(void *, char *, uint64_t))(v203 + 24))(v236, v201, v202);
        goto LABEL_136;
      }
      (*(void (**)(void *, uint64_t))(v203 + 8))(v236, v202);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v207 = *(void *)(*(void *)(v209 - 8) + 64);
      uint64_t v208 = v236;
    }
    memcpy(v208, v201, v207);
LABEL_136:
    a3 = v228;
    uint64_t v210 = v233[8];
    uint64_t v211 = (void *)(v172 + v210);
    uint64_t v212 = &v173[v210];
    *uint64_t v211 = *(void *)v212;
    v211[1] = *((void *)v212 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_137;
  }
  if (v175)
  {
LABEL_115:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v172, v173, *(void *)(*(void *)(v179 - 8) + 64));
    goto LABEL_137;
  }
  *(unsigned char *)uint64_t v172 = *v173;
  uint64_t v176 = *((void *)v173 + 1);
  *(_DWORD *)(v172 + 16) = *((_DWORD *)v173 + 4);
  *(void *)(v172 + 8) = v176;
  if (*((void *)v173 + 7) == 1)
  {
    long long v177 = *(_OWORD *)(v173 + 24);
    long long v178 = *(_OWORD *)(v173 + 40);
    *(void *)(v172 + 56) = *((void *)v173 + 7);
    *(_OWORD *)(v172 + 24) = v177;
    *(_OWORD *)(v172 + 40) = v178;
  }
  else
  {
    *(unsigned char *)(v172 + 24) = v173[24];
    *(unsigned char *)(v172 + 25) = v173[25];
    *(unsigned char *)(v172 + 26) = v173[26];
    long long v185 = *(_OWORD *)(v173 + 28);
    *(_DWORD *)(v172 + 44) = *((_DWORD *)v173 + 11);
    *(_OWORD *)(v172 + 28) = v185;
    *(void *)(v172 + 48) = *((void *)v173 + 6);
    *(void *)(v172 + 56) = *((void *)v173 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v186 = *(int *)(v9 + 28);
  uint64_t v187 = (void *)(v172 + v186);
  uint64_t v188 = &v173[v186];
  uint64_t v189 = sub_23309B300();
  uint64_t v190 = *(void *)(v189 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v188, 1, v189))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v187, v188, *(void *)(*(void *)(v191 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v190 + 16))(v187, v188, v189);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v190 + 56))(v187, 0, 1, v189);
  }
  uint64_t v192 = *(int *)(v9 + 32);
  uint64_t v193 = (void *)(v172 + v192);
  uint64_t v194 = &v173[v192];
  *uint64_t v193 = *(void *)v194;
  v193[1] = *((void *)v194 + 1);
  uint64_t v195 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56);
  swift_bridgeObjectRetain();
  v195(v172, 0, 1, v9);
LABEL_137:
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v213 = a3[16];
  uint64_t v214 = (void *)((char *)a1 + v213);
  uint64_t v215 = (void *)((char *)a2 + v213);
  *uint64_t v214 = *v215;
  v214[1] = v215[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsR4.DiagnosticReport(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = a3[11];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v10 = type metadata accessor for FHIRDateTime();
  uint64_t v62 = *(void *)(v10 - 8);
  int v11 = *(unsigned int (**)(void, void, void))(v62 + 48);
  if (v11(v9, 1, v10))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    int v56 = v11;
    uint64_t v59 = v3;
    *uint64_t v8 = *v9;
    *((void *)v8 + 1) = *((void *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((void *)v8 + 7) = *((void *)v9 + 7);
    uint64_t v13 = *(int *)(v10 + 28);
    uint64_t v14 = &v8[v13];
    long long v15 = &v9[v13];
    uint64_t v16 = sub_23309B300();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(v8, 0, 1, v10);
    int v11 = v56;
    uint64_t v3 = v59;
  }
  uint64_t v19 = v3[12];
  uint64_t v20 = (unsigned char *)(a1 + v19);
  long long v21 = (unsigned char *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Period();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v55 = v23;
    if (v11(v21, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      int v57 = v11;
      uint64_t v60 = v3;
      *uint64_t v20 = *v21;
      *((void *)v20 + 1) = *((void *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((void *)v20 + 7) = *((void *)v21 + 7);
      uint64_t v26 = *(int *)(v10 + 28);
      __dst = &v20[v26];
      uint64_t v27 = &v21[v26];
      uint64_t v28 = sub_23309B300();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 32))(__dst, v27, v28);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(v20, 0, 1, v10);
      int v11 = v57;
      uint64_t v3 = v60;
    }
    uint64_t v31 = *(int *)(v22 + 20);
    uint64_t v32 = &v20[v31];
    uint64_t v33 = &v21[v31];
    if (v11(v33, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v58 = v11;
      int v61 = v3;
      *uint64_t v32 = *v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
      *((void *)v32 + 7) = *((void *)v33 + 7);
      uint64_t v35 = *(int *)(v10 + 28);
      __dsta = &v32[v35];
      long long v36 = &v33[v35];
      uint64_t v37 = sub_23309B300();
      uint64_t v52 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v52 + 48))(v36, 1, v37))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v36, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v52 + 32))(__dsta, v36, v37);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v52 + 56))(__dsta, 0, 1, v37);
      }
      *(_OWORD *)&v32[*(int *)(v10 + 32)] = *(_OWORD *)&v33[*(int *)(v10 + 32)];
      uint64_t v3 = v61;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(v32, 0, 1, v10);
      int v11 = v58;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v55 + 56))(v20, 0, 1, v22);
  }
  uint64_t v39 = v3[13];
  uint64_t v40 = (unsigned char *)(a1 + v39);
  uint64_t v41 = (unsigned char *)(a2 + v39);
  if (v11(a2 + v39, 1, v10))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    int v43 = v3;
    *uint64_t v40 = *v41;
    *((void *)v40 + 1) = *((void *)v41 + 1);
    *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
    *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
    *((void *)v40 + 7) = *((void *)v41 + 7);
    uint64_t v44 = *(int *)(v10 + 28);
    size_t v45 = &v40[v44];
    uint64_t v46 = &v41[v44];
    uint64_t v47 = sub_23309B300();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *(_OWORD *)&v40[*(int *)(v10 + 32)] = *(_OWORD *)&v41[*(int *)(v10 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v62 + 56))(v40, 0, 1, v10);
    uint64_t v3 = v43;
  }
  uint64_t v50 = v3[15];
  *(void *)(a1 + v3[14]) = *(void *)(a2 + v3[14]);
  *(void *)(a1 + v50) = *(void *)(a2 + v50);
  *(_OWORD *)(a1 + v3[16]) = *(_OWORD *)(a2 + v3[16]);
  return a1;
}

void *assignWithTake for ModelsR4.DiagnosticReport(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[12];
  a1[11] = a2[11];
  a1[12] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[11];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  long long v15 = (void **)(*(void *)(v14 - 8) + 48);
  uint64_t v174 = *(void *)(v14 - 8);
  uint64_t v176 = (uint64_t (*)(char *, uint64_t, uint64_t))*v15;
  int v16 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v15)(v12, 1, v14);
  int v17 = v176(v13, 1, v14);
  if (!v16)
  {
    if (v17)
    {
      sub_232EA3DC4(v12, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_7;
    }
    *(unsigned char *)uint64_t v12 = *v13;
    *(void *)(v12 + 8) = *((void *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    int v163 = a3;
    if (*(void *)(v12 + 56) != 1)
    {
      uint64_t v26 = *((void *)v13 + 7);
      if (v26 != 1)
      {
        *(unsigned char *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(void *)(v12 + 48) = *((void *)v13 + 6);
        *(void *)(v12 + 56) = v26;
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v28 = *(int *)(v14 + 28);
        uint64_t v29 = (void *)(v12 + v28);
        uint64_t v30 = &v13[v28];
        uint64_t v31 = sub_23309B300();
        uint64_t v158 = *(void *)(v31 - 8);
        uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v158 + 48);
        uint64_t v170 = v29;
        LODWORD(v29) = v32(v29, 1, v31);
        int v33 = v32(v30, 1, v31);
        if (v29)
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 32))(v170, v30, v31);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v158 + 56))(v170, 0, 1, v31);
            goto LABEL_23;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
          long long v36 = v170;
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 40))(v170, v30, v31);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v158 + 8))(v170, v31);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v37 - 8) + 64);
          long long v36 = v170;
        }
        memcpy(v36, v30, v35);
LABEL_23:
        a3 = v163;
        uint64_t v38 = *(int *)(v14 + 32);
        uint64_t v39 = (void *)(v12 + v38);
        uint64_t v40 = &v13[v38];
        uint64_t v42 = *(void *)v40;
        uint64_t v41 = *((void *)v40 + 1);
        *uint64_t v39 = v42;
        v39[1] = v41;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      sub_232F0434C(v12 + 24);
    }
    long long v27 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v27;
    *(void *)(v12 + 56) = *((void *)v13 + 7);
    goto LABEL_15;
  }
  if (v17)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v18 = a3;
  *(unsigned char *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  uint64_t v19 = *(int *)(v14 + 28);
  uint64_t v20 = (void *)(v12 + v19);
  long long v21 = &v13[v19];
  uint64_t v22 = sub_23309B300();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a3 = v18;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v12, 0, 1, v14);
LABEL_24:
  uint64_t v43 = a3[12];
  uint64_t v44 = (uint64_t)a1 + v43;
  size_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for Period();
  uint64_t v171 = *(void **)(v46 - 8);
  uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v171[6];
  int v48 = v47(v44, 1, v46);
  int v49 = v47((uint64_t)v45, 1, v46);
  if (!v48)
  {
    if (v49)
    {
      sub_232EA3DC4(v44, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_30;
    }
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
    int v53 = v176((char *)v44, 1, v14);
    int v54 = v176(v45, 1, v14);
    if (v53)
    {
      if (!v54)
      {
        uint64_t v164 = a3;
        *(unsigned char *)uint64_t v44 = *v45;
        *(void *)(v44 + 8) = *((void *)v45 + 1);
        *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
        *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
        *(void *)(v44 + 56) = *((void *)v45 + 7);
        uint64_t v55 = *(int *)(v14 + 28);
        int v56 = (void *)(v44 + v55);
        int v57 = &v45[v55];
        uint64_t v58 = sub_23309B300();
        uint64_t v59 = *(void *)(v58 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        }
        *(_OWORD *)(v44 + *(int *)(v14 + 32)) = *(_OWORD *)&v45[*(int *)(v14 + 32)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v44, 0, 1, v14);
        a3 = v164;
        uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
LABEL_66:
        uint64_t v93 = *(int *)(v46 + 20);
        uint64_t v94 = v44 + v93;
        uint64_t v95 = &v45[v93];
        int v96 = v50(v94, 1, v14);
        int v97 = v50((uint64_t)v95, 1, v14);
        if (v96)
        {
          if (!v97)
          {
            size_t v98 = a3;
            *(unsigned char *)uint64_t v94 = *v95;
            *(void *)(v94 + 8) = *((void *)v95 + 1);
            *(_DWORD *)(v94 + 16) = *((_DWORD *)v95 + 4);
            *(_OWORD *)(v94 + 24) = *(_OWORD *)(v95 + 24);
            *(_OWORD *)(v94 + 40) = *(_OWORD *)(v95 + 40);
            *(void *)(v94 + 56) = *((void *)v95 + 7);
            uint64_t v99 = *(int *)(v14 + 28);
            uint64_t v100 = (void *)(v94 + v99);
            long long v101 = &v95[v99];
            uint64_t v102 = sub_23309B300();
            uint64_t v103 = *(void *)(v102 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v103 + 32))(v100, v101, v102);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
            }
            a3 = v98;
            *(_OWORD *)(v94 + *(int *)(v14 + 32)) = *(_OWORD *)&v95[*(int *)(v14 + 32)];
            uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v94, 0, 1, v14);
            goto LABEL_79;
          }
LABEL_72:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v94, v95, *(void *)(*(void *)(v105 - 8) + 64));
          goto LABEL_79;
        }
        if (v97)
        {
          sub_232EA3DC4(v94, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_72;
        }
        *(unsigned char *)uint64_t v94 = *v95;
        *(void *)(v94 + 8) = *((void *)v95 + 1);
        *(_DWORD *)(v94 + 16) = *((_DWORD *)v95 + 4);
        uint64_t v168 = a3;
        if (*(void *)(v94 + 56) != 1)
        {
          uint64_t v106 = *((void *)v95 + 7);
          if (v106 != 1)
          {
            *(unsigned char *)(v94 + 24) = v95[24];
            *(_WORD *)(v94 + 25) = *(_WORD *)(v95 + 25);
            *(_DWORD *)(v94 + 28) = *((_DWORD *)v95 + 7);
            *(_OWORD *)(v94 + 32) = *((_OWORD *)v95 + 2);
            *(void *)(v94 + 48) = *((void *)v95 + 6);
            *(void *)(v94 + 56) = v106;
            swift_bridgeObjectRelease();
LABEL_104:
            uint64_t v143 = *(int *)(v14 + 28);
            long long v144 = (void *)(v94 + v143);
            uint64_t v145 = &v95[v143];
            uint64_t v146 = sub_23309B300();
            uint64_t v160 = *(void *)(v146 - 8);
            uint64_t v147 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v160 + 48);
            uint64_t v173 = v144;
            LODWORD(v144) = v147(v144, 1, v146);
            int v148 = v147(v145, 1, v146);
            if (v144)
            {
              if (!v148)
              {
                (*(void (**)(void *, char *, uint64_t))(v160 + 32))(v173, v145, v146);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v173, 0, 1, v146);
                goto LABEL_112;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v150 = *(void *)(*(void *)(v149 - 8) + 64);
              uint64_t v151 = v173;
            }
            else
            {
              if (!v148)
              {
                (*(void (**)(void *, char *, uint64_t))(v160 + 40))(v173, v145, v146);
                goto LABEL_112;
              }
              (*(void (**)(void *, uint64_t))(v160 + 8))(v173, v146);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v150 = *(void *)(*(void *)(v152 - 8) + 64);
              uint64_t v151 = v173;
            }
            memcpy(v151, v145, v150);
LABEL_112:
            a3 = v168;
            uint64_t v153 = *(int *)(v14 + 32);
            uint64_t v154 = (void *)(v94 + v153);
            uint64_t v155 = &v95[v153];
            uint64_t v157 = *(void *)v155;
            uint64_t v156 = *((void *)v155 + 1);
            *uint64_t v154 = v157;
            v154[1] = v156;
            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
          sub_232F0434C(v94 + 24);
        }
        long long v107 = *(_OWORD *)(v95 + 40);
        *(_OWORD *)(v94 + 24) = *(_OWORD *)(v95 + 24);
        *(_OWORD *)(v94 + 40) = v107;
        *(void *)(v94 + 56) = *((void *)v95 + 7);
        goto LABEL_104;
      }
LABEL_40:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v44, v45, *(void *)(*(void *)(v67 - 8) + 64));
      goto LABEL_66;
    }
    if (v54)
    {
      sub_232EA3DC4(v44, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_40;
    }
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
    uint64_t v167 = a3;
    if (*(void *)(v44 + 56) != 1)
    {
      uint64_t v77 = *((void *)v45 + 7);
      if (v77 != 1)
      {
        *(unsigned char *)(v44 + 24) = v45[24];
        *(_WORD *)(v44 + 25) = *(_WORD *)(v45 + 25);
        *(_DWORD *)(v44 + 28) = *((_DWORD *)v45 + 7);
        *(_OWORD *)(v44 + 32) = *((_OWORD *)v45 + 2);
        *(void *)(v44 + 48) = *((void *)v45 + 6);
        *(void *)(v44 + 56) = v77;
        swift_bridgeObjectRelease();
LABEL_57:
        uint64_t v79 = *(int *)(v14 + 28);
        uint64_t v80 = (void *)(v44 + v79);
        uint64_t v172 = &v45[v79];
        uint64_t v81 = sub_23309B300();
        uint64_t v159 = *(void *)(v81 - 8);
        uint64_t v82 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v159 + 48);
        __srca = v80;
        LODWORD(v80) = v82(v80, 1, v81);
        int v83 = v82(v172, 1, v81);
        if (v80)
        {
          if (!v83)
          {
            (*(void (**)(void *, char *, uint64_t))(v159 + 32))(__srca, v172, v81);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v159 + 56))(__srca, 0, 1, v81);
            goto LABEL_65;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v85 = *(void *)(*(void *)(v84 - 8) + 64);
          long long v86 = __srca;
        }
        else
        {
          if (!v83)
          {
            (*(void (**)(void *, char *, uint64_t))(v159 + 40))(__srca, v172, v81);
            goto LABEL_65;
          }
          (*(void (**)(void *, uint64_t))(v159 + 8))(__srca, v81);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v85 = *(void *)(*(void *)(v87 - 8) + 64);
          long long v86 = __srca;
        }
        memcpy(v86, v172, v85);
LABEL_65:
        uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
        uint64_t v88 = *(int *)(v14 + 32);
        uint64_t v89 = (void *)(v44 + v88);
        uint64_t v90 = &v45[v88];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        *uint64_t v89 = v92;
        v89[1] = v91;
        swift_bridgeObjectRelease();
        a3 = v167;
        goto LABEL_66;
      }
      sub_232F0434C(v44 + 24);
    }
    long long v78 = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = v78;
    *(void *)(v44 + 56) = *((void *)v45 + 7);
    goto LABEL_57;
  }
  if (v49)
  {
LABEL_30:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
LABEL_31:
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
    goto LABEL_79;
  }
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  if (v176(v45, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v44, v45, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    size_t v165 = a3;
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *(void *)(v44 + 56) = *((void *)v45 + 7);
    uint64_t v61 = *(int *)(v14 + 28);
    uint64_t v62 = (void *)(v44 + v61);
    uint64_t v63 = &v45[v61];
    uint64_t v64 = sub_23309B300();
    uint64_t v65 = *(void *)(v64 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v65 + 32))(v62, v63, v64);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
    }
    *(_OWORD *)(v44 + *(int *)(v14 + 32)) = *(_OWORD *)&v45[*(int *)(v14 + 32)];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v44, 0, 1, v14);
    a3 = v165;
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  }
  uint64_t v68 = *(int *)(v46 + 20);
  uint64_t v69 = (char *)(v44 + v68);
  long long v70 = &v45[v68];
  if (v50((uint64_t)v70, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    *uint64_t v69 = *v70;
    *((void *)v69 + 1) = *((void *)v70 + 1);
    *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
    *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
    *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
    *((void *)v69 + 7) = *((void *)v70 + 7);
    uint64_t v72 = *(int *)(v14 + 28);
    __src = &v69[v72];
    uint64_t v166 = a3;
    uint64_t v73 = &v70[v72];
    uint64_t v74 = sub_23309B300();
    uint64_t v75 = *(void *)(v74 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v73, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(__src, v73, v74);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(__src, 0, 1, v74);
    }
    a3 = v166;
    *(_OWORD *)&v69[*(int *)(v14 + 32)] = *(_OWORD *)&v70[*(int *)(v14 + 32)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(v69, 0, 1, v14);
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v171[7])(v44, 0, 1, v46);
LABEL_79:
  uint64_t v108 = a3[13];
  uint64_t v109 = (uint64_t)a1 + v108;
  uint64_t v110 = (char *)a2 + v108;
  int v111 = v50((uint64_t)a1 + v108, 1, v14);
  int v112 = v50((uint64_t)v110, 1, v14);
  if (!v111)
  {
    if (v112)
    {
      sub_232EA3DC4(v109, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_85;
    }
    *(unsigned char *)uint64_t v109 = *v110;
    *(void *)(v109 + 8) = *((void *)v110 + 1);
    *(_DWORD *)(v109 + 16) = *((_DWORD *)v110 + 4);
    uint64_t v169 = a3;
    if (*(void *)(v109 + 56) != 1)
    {
      uint64_t v120 = *((void *)v110 + 7);
      if (v120 != 1)
      {
        *(unsigned char *)(v109 + 24) = v110[24];
        *(_WORD *)(v109 + 25) = *(_WORD *)(v110 + 25);
        *(_DWORD *)(v109 + 28) = *((_DWORD *)v110 + 7);
        *(_OWORD *)(v109 + 32) = *((_OWORD *)v110 + 2);
        *(void *)(v109 + 48) = *((void *)v110 + 6);
        *(void *)(v109 + 56) = v120;
        swift_bridgeObjectRelease();
LABEL_93:
        uint64_t v122 = *(int *)(v14 + 28);
        size_t v123 = (void *)(v109 + v122);
        uint64_t v124 = &v110[v122];
        uint64_t v125 = sub_23309B300();
        uint64_t v175 = *(void *)(v125 - 8);
        uint64_t v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v175 + 48);
        long long v177 = v123;
        LODWORD(v123) = v126(v123, 1, v125);
        int v127 = v126(v124, 1, v125);
        if (v123)
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v175 + 32))(v177, v124, v125);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v177, 0, 1, v125);
            goto LABEL_101;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
          uint64_t v130 = v177;
        }
        else
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v175 + 40))(v177, v124, v125);
            goto LABEL_101;
          }
          (*(void (**)(void *, uint64_t))(v175 + 8))(v177, v125);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
          uint64_t v130 = v177;
        }
        memcpy(v130, v124, v129);
LABEL_101:
        a3 = v169;
        uint64_t v132 = *(int *)(v14 + 32);
        int v133 = (void *)(v109 + v132);
        uint64_t v134 = &v110[v132];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        void *v133 = v136;
        v133[1] = v135;
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
      sub_232F0434C(v109 + 24);
    }
    long long v121 = *(_OWORD *)(v110 + 40);
    *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
    *(_OWORD *)(v109 + 40) = v121;
    *(void *)(v109 + 56) = *((void *)v110 + 7);
    goto LABEL_93;
  }
  if (v112)
  {
LABEL_85:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v109, v110, *(void *)(*(void *)(v119 - 8) + 64));
    goto LABEL_102;
  }
  *(unsigned char *)uint64_t v109 = *v110;
  *(void *)(v109 + 8) = *((void *)v110 + 1);
  *(_DWORD *)(v109 + 16) = *((_DWORD *)v110 + 4);
  *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
  *(_OWORD *)(v109 + 40) = *(_OWORD *)(v110 + 40);
  *(void *)(v109 + 56) = *((void *)v110 + 7);
  uint64_t v113 = *(int *)(v14 + 28);
  uint64_t v114 = (void *)(v109 + v113);
  long long v115 = &v110[v113];
  uint64_t v116 = sub_23309B300();
  uint64_t v117 = *(void *)(v116 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v114, v115, *(void *)(*(void *)(v118 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v117 + 32))(v114, v115, v116);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
  }
  *(_OWORD *)(v109 + *(int *)(v14 + 32)) = *(_OWORD *)&v110[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v174 + 56))(v109, 0, 1, v14);
LABEL_102:
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  uint64_t v137 = a3[16];
  uint64_t v138 = (void *)((char *)a1 + v137);
  uint64_t v139 = (void *)((char *)a2 + v137);
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DiagnosticReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F0FD30);
}

uint64_t sub_232F0FD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DiagnosticReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F0FED0);
}

uint64_t sub_232F0FED0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_232F1005C()
{
  sub_232EA3854(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232EA3854(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReference(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    uint64_t v28 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1) {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v12 = a2[7];
    uint64_t v13 = a2[8];
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    a1[8] = v13;
    a1[9] = v14;
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    a1[10] = v15;
    a1[11] = v16;
    int v111 = a3;
    int v112 = a2;
    uint64_t v18 = a3[11];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = a1;
    long long v21 = (char *)a2 + v18;
    uint64_t v109 = v20;
    v20[12] = v17;
    uint64_t v22 = type metadata accessor for FHIRDateTime();
    uint64_t v108 = *(void *)(v22 - 8);
    uint64_t v23 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v108 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dst = v23;
    uint64_t v105 = v22;
    if (v23(v21, 1, v22))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v19, v21, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v111;
      long long v27 = v112;
      uint64_t v28 = v109;
    }
    else
    {
      *uint64_t v19 = *v21;
      *((void *)v19 + 1) = *((void *)v21 + 1);
      *((_DWORD *)v19 + 4) = *((_DWORD *)v21 + 4);
      uint64_t v30 = *((void *)v21 + 7);
      uint64_t v31 = v19;
      if (v30 == 1)
      {
        long long v32 = *(_OWORD *)(v21 + 40);
        *(_OWORD *)(v19 + 24) = *(_OWORD *)(v21 + 24);
        *(_OWORD *)(v19 + 40) = v32;
        *((void *)v19 + 7) = *((void *)v21 + 7);
      }
      else
      {
        v19[24] = v21[24];
        *(_WORD *)(v19 + 25) = *(_WORD *)(v21 + 25);
        *(_OWORD *)(v19 + 28) = *(_OWORD *)(v21 + 28);
        *((_DWORD *)v19 + 11) = *((_DWORD *)v21 + 11);
        *((void *)v19 + 6) = *((void *)v21 + 6);
        *((void *)v19 + 7) = v30;
        swift_bridgeObjectRetain();
      }
      long long v27 = v112;
      uint64_t v28 = v109;
      uint64_t v33 = *(int *)(v22 + 28);
      uint64_t v34 = &v19[v33];
      size_t v35 = &v24[v33];
      uint64_t v36 = sub_23309B300();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v39 = *(int *)(v22 + 32);
      uint64_t v40 = &v19[v39];
      uint64_t v41 = &v24[v39];
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v108 + 56);
      swift_bridgeObjectRetain();
      v43(v31, 0, 1, v22);
      uint64_t v26 = v111;
    }
    uint64_t v44 = v26[12];
    uint64_t v45 = v26[13];
    uint64_t v46 = (void *)((char *)v28 + v44);
    uint64_t v47 = (void *)((char *)v27 + v44);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    *(void *)((char *)v28 + v45) = *(void *)((char *)v27 + v45);
    uint64_t v49 = v26[15];
    *(void *)((char *)v28 + v26[14]) = *(void *)((char *)v27 + v26[14]);
    uint64_t v50 = (void *)((char *)v28 + v49);
    uint64_t v51 = (void *)((char *)v27 + v49);
    uint64_t v52 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    uint64_t v53 = *(void *)(v52 - 8);
    int v54 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v54(v51, 1, v52))
    {
      sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
      memcpy(v50, v51, *(void *)(*(void *)(v55 - 8) + 64));
      int v56 = v111;
      int v57 = v112;
    }
    else
    {
      uint64_t v104 = v52;
      *uint64_t v50 = *v51;
      uint64_t v58 = *(int *)(v52 + 20);
      uint64_t v110 = v50;
      uint64_t v59 = (char *)v50 + v58;
      uint64_t v60 = (char *)v51 + v58;
      uint64_t v61 = type metadata accessor for Period();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v62 + 48);
      swift_bridgeObjectRetain();
      if (v63(v60, 1, v61))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v59, v60, *(void *)(*(void *)(v64 - 8) + 64));
        uint64_t v65 = v110;
        int v56 = v111;
        uint64_t v66 = v104;
        int v57 = v112;
      }
      else
      {
        uint64_t v103 = v62;
        if (__dst(v60, 1, v105))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v59, v60, *(void *)(*(void *)(v67 - 8) + 64));
        }
        else
        {
          *uint64_t v59 = *v60;
          *((void *)v59 + 1) = *((void *)v60 + 1);
          *((_DWORD *)v59 + 4) = *((_DWORD *)v60 + 4);
          uint64_t v68 = *((void *)v60 + 7);
          if (v68 == 1)
          {
            long long v69 = *(_OWORD *)(v60 + 40);
            *(_OWORD *)(v59 + 24) = *(_OWORD *)(v60 + 24);
            *(_OWORD *)(v59 + 40) = v69;
            *((void *)v59 + 7) = *((void *)v60 + 7);
          }
          else
          {
            v59[24] = v60[24];
            *(_WORD *)(v59 + 25) = *(_WORD *)(v60 + 25);
            *(_OWORD *)(v59 + 28) = *(_OWORD *)(v60 + 28);
            *((_DWORD *)v59 + 11) = *((_DWORD *)v60 + 11);
            *((void *)v59 + 6) = *((void *)v60 + 6);
            *((void *)v59 + 7) = v68;
            swift_bridgeObjectRetain();
          }
          uint64_t v70 = *(int *)(v105 + 28);
          uint64_t v71 = &v59[v70];
          uint64_t v72 = &v60[v70];
          uint64_t v73 = sub_23309B300();
          uint64_t v74 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v74 + 16))(v71, v72, v73);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
          }
          uint64_t v76 = *(int *)(v105 + 32);
          uint64_t v77 = &v59[v76];
          long long v78 = &v60[v76];
          uint64_t v79 = v78[1];
          *uint64_t v77 = *v78;
          v77[1] = v79;
          uint64_t v80 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v108 + 56);
          swift_bridgeObjectRetain();
          v80(v59, 0, 1, v105);
        }
        uint64_t v81 = *(int *)(v61 + 20);
        uint64_t v82 = &v59[v81];
        int v83 = &v60[v81];
        int v57 = v112;
        if (__dst(v83, 1, v105))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          *uint64_t v82 = *v83;
          *((void *)v82 + 1) = *((void *)v83 + 1);
          *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
          uint64_t v85 = *((void *)v83 + 7);
          if (v85 == 1)
          {
            long long v86 = *(_OWORD *)(v83 + 40);
            *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
            *(_OWORD *)(v82 + 40) = v86;
            *((void *)v82 + 7) = *((void *)v83 + 7);
          }
          else
          {
            v82[24] = v83[24];
            *(_WORD *)(v82 + 25) = *(_WORD *)(v83 + 25);
            *(_OWORD *)(v82 + 28) = *(_OWORD *)(v83 + 28);
            *((_DWORD *)v82 + 11) = *((_DWORD *)v83 + 11);
            *((void *)v82 + 6) = *((void *)v83 + 6);
            *((void *)v82 + 7) = v85;
            swift_bridgeObjectRetain();
          }
          uint64_t v87 = *(int *)(v105 + 28);
          __dsta = &v82[v87];
          uint64_t v88 = &v83[v87];
          uint64_t v89 = sub_23309B300();
          uint64_t v90 = *(void *)(v89 - 8);
          uint64_t v91 = v89;
          if ((*(unsigned int (**)(unsigned char *, uint64_t))(v90 + 48))(v88, 1))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dsta, v88, *(void *)(*(void *)(v92 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v90 + 16))(__dsta, v88, v91);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v90 + 56))(__dsta, 0, 1, v91);
          }
          uint64_t v93 = *(int *)(v105 + 32);
          uint64_t v94 = &v82[v93];
          uint64_t v95 = &v83[v93];
          uint64_t v96 = v95[1];
          void *v94 = *v95;
          v94[1] = v96;
          int v97 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v108 + 56);
          swift_bridgeObjectRetain();
          v97(v82, 0, 1, v105);
          int v57 = v112;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v103 + 56))(v59, 0, 1, v61);
        uint64_t v65 = v110;
        int v56 = v111;
        uint64_t v66 = v104;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v65, 0, 1, v66);
    }
    uint64_t v98 = v56[16];
    uint64_t v99 = (void *)((char *)v28 + v98);
    uint64_t v100 = (void *)((char *)v57 + v98);
    uint64_t v101 = v100[1];
    *uint64_t v99 = *v100;
    v99[1] = v101;
    swift_bridgeObjectRetain();
  }
  return v28;
}

uint64_t destroy for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(a2 + 60);
  uint64_t v11 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + *(int *)(v11 + 20);
    uint64_t v13 = type metadata accessor for Period();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      if (!v6(v12, 1, v5))
      {
        if (*(void *)(v12 + 56) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v14 = v12 + *(int *)(v5 + 28);
        uint64_t v15 = sub_23309B300();
        uint64_t v16 = *(void *)(v15 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v17 = v12 + *(int *)(v13 + 20);
      if (!v6(v17, 1, v5))
      {
        if (*(void *)(v17 + 56) != 1) {
          swift_bridgeObjectRelease();
        }
        uint64_t v18 = v17 + *(int *)(v5 + 28);
        uint64_t v19 = sub_23309B300();
        uint64_t v20 = *(void *)(v19 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.DocumentReference(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v11 = a2[7];
  uint64_t v12 = a2[8];
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  a1[8] = v12;
  a1[9] = v13;
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  a1[10] = v14;
  a1[11] = v15;
  uint64_t v108 = a3;
  uint64_t v109 = a2;
  uint64_t v17 = a3[11];
  uint64_t v18 = a1;
  uint64_t v19 = (char *)a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  uint64_t v106 = v18;
  v18[12] = v16;
  uint64_t v21 = type metadata accessor for FHIRDateTime();
  uint64_t v105 = *(void *)(v21 - 8);
  uint64_t v22 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v105 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dst = v22;
  uint64_t v102 = v21;
  if (v22(v20, 1, v21))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = v108;
    uint64_t v25 = v109;
    uint64_t v26 = v106;
  }
  else
  {
    *uint64_t v19 = *v20;
    *((void *)v19 + 1) = *((void *)v20 + 1);
    *((_DWORD *)v19 + 4) = *((_DWORD *)v20 + 4);
    uint64_t v27 = *((void *)v20 + 7);
    uint64_t v28 = v19;
    if (v27 == 1)
    {
      long long v29 = *(_OWORD *)(v20 + 40);
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
      *(_OWORD *)(v19 + 40) = v29;
      *((void *)v19 + 7) = *((void *)v20 + 7);
    }
    else
    {
      v19[24] = v20[24];
      *(_WORD *)(v19 + 25) = *(_WORD *)(v20 + 25);
      *(_OWORD *)(v19 + 28) = *(_OWORD *)(v20 + 28);
      *((_DWORD *)v19 + 11) = *((_DWORD *)v20 + 11);
      *((void *)v19 + 6) = *((void *)v20 + 6);
      *((void *)v19 + 7) = v27;
      swift_bridgeObjectRetain();
    }
    uint64_t v25 = v109;
    uint64_t v26 = v106;
    uint64_t v30 = *(int *)(v21 + 28);
    uint64_t v31 = &v28[v30];
    long long v32 = &v20[v30];
    uint64_t v33 = sub_23309B300();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v36 = *(int *)(v21 + 32);
    uint64_t v37 = &v28[v36];
    uint64_t v38 = &v20[v36];
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v105 + 56);
    swift_bridgeObjectRetain();
    v40(v28, 0, 1, v21);
    uint64_t v24 = v108;
  }
  uint64_t v41 = v24[12];
  uint64_t v42 = v24[13];
  uint64_t v43 = (void *)((char *)v26 + v41);
  uint64_t v44 = (void *)((char *)v25 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  *(void *)((char *)v26 + v42) = *(void *)((char *)v25 + v42);
  uint64_t v46 = v24[15];
  *(void *)((char *)v26 + v24[14]) = *(void *)((char *)v25 + v24[14]);
  uint64_t v47 = (void *)((char *)v26 + v46);
  uint64_t v48 = (void *)((char *)v25 + v46);
  uint64_t v49 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v51(v48, 1, v49))
  {
    sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    uint64_t v53 = v108;
    int v54 = v109;
  }
  else
  {
    uint64_t v101 = v49;
    void *v47 = *v48;
    uint64_t v55 = *(int *)(v49 + 20);
    long long v107 = v47;
    int v56 = (char *)v47 + v55;
    int v57 = (char *)v48 + v55;
    uint64_t v58 = type metadata accessor for Period();
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v60 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v59 + 48);
    swift_bridgeObjectRetain();
    if (v60(v57, 1, v58))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
      uint64_t v62 = v107;
      uint64_t v53 = v108;
      uint64_t v63 = v101;
      int v54 = v109;
    }
    else
    {
      uint64_t v100 = v59;
      if (__dst(v57, 1, v102))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v56, v57, *(void *)(*(void *)(v64 - 8) + 64));
      }
      else
      {
        unsigned char *v56 = *v57;
        *((void *)v56 + 1) = *((void *)v57 + 1);
        *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
        uint64_t v65 = *((void *)v57 + 7);
        if (v65 == 1)
        {
          long long v66 = *(_OWORD *)(v57 + 40);
          *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
          *(_OWORD *)(v56 + 40) = v66;
          *((void *)v56 + 7) = *((void *)v57 + 7);
        }
        else
        {
          v56[24] = v57[24];
          *(_WORD *)(v56 + 25) = *(_WORD *)(v57 + 25);
          *(_OWORD *)(v56 + 28) = *(_OWORD *)(v57 + 28);
          *((_DWORD *)v56 + 11) = *((_DWORD *)v57 + 11);
          *((void *)v56 + 6) = *((void *)v57 + 6);
          *((void *)v56 + 7) = v65;
          swift_bridgeObjectRetain();
        }
        uint64_t v67 = *(int *)(v102 + 28);
        uint64_t v68 = &v56[v67];
        long long v69 = &v57[v67];
        uint64_t v70 = sub_23309B300();
        uint64_t v71 = *(void *)(v70 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 16))(v68, v69, v70);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
        }
        uint64_t v73 = *(int *)(v102 + 32);
        uint64_t v74 = &v56[v73];
        uint64_t v75 = &v57[v73];
        uint64_t v76 = v75[1];
        void *v74 = *v75;
        v74[1] = v76;
        uint64_t v77 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v105 + 56);
        swift_bridgeObjectRetain();
        v77(v56, 0, 1, v102);
      }
      uint64_t v78 = *(int *)(v58 + 20);
      uint64_t v79 = &v56[v78];
      uint64_t v80 = &v57[v78];
      int v54 = v109;
      if (__dst(v80, 1, v102))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
      }
      else
      {
        *uint64_t v79 = *v80;
        *((void *)v79 + 1) = *((void *)v80 + 1);
        *((_DWORD *)v79 + 4) = *((_DWORD *)v80 + 4);
        uint64_t v82 = *((void *)v80 + 7);
        if (v82 == 1)
        {
          long long v83 = *(_OWORD *)(v80 + 40);
          *(_OWORD *)(v79 + 24) = *(_OWORD *)(v80 + 24);
          *(_OWORD *)(v79 + 40) = v83;
          *((void *)v79 + 7) = *((void *)v80 + 7);
        }
        else
        {
          v79[24] = v80[24];
          *(_WORD *)(v79 + 25) = *(_WORD *)(v80 + 25);
          *(_OWORD *)(v79 + 28) = *(_OWORD *)(v80 + 28);
          *((_DWORD *)v79 + 11) = *((_DWORD *)v80 + 11);
          *((void *)v79 + 6) = *((void *)v80 + 6);
          *((void *)v79 + 7) = v82;
          swift_bridgeObjectRetain();
        }
        uint64_t v84 = *(int *)(v102 + 28);
        __dsta = &v79[v84];
        uint64_t v85 = &v80[v84];
        uint64_t v86 = sub_23309B300();
        uint64_t v87 = *(void *)(v86 - 8);
        uint64_t v88 = v86;
        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v87 + 48))(v85, 1))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dsta, v85, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v87 + 16))(__dsta, v85, v88);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v87 + 56))(__dsta, 0, 1, v88);
        }
        uint64_t v90 = *(int *)(v102 + 32);
        uint64_t v91 = &v79[v90];
        uint64_t v92 = &v80[v90];
        uint64_t v93 = v92[1];
        void *v91 = *v92;
        v91[1] = v93;
        uint64_t v94 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v105 + 56);
        swift_bridgeObjectRetain();
        v94(v79, 0, 1, v102);
        int v54 = v109;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v100 + 56))(v56, 0, 1, v58);
      uint64_t v62 = v107;
      uint64_t v53 = v108;
      uint64_t v63 = v101;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v62, 0, 1, v63);
  }
  uint64_t v95 = v53[16];
  uint64_t v96 = (void *)((char *)v26 + v95);
  int v97 = (void *)((char *)v54 + v95);
  uint64_t v98 = v97[1];
  *uint64_t v96 = *v97;
  v96[1] = v98;
  swift_bridgeObjectRetain();
  return v26;
}

void *assignWithCopy for ModelsR4.DocumentReference(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 4;
  uint64_t v7 = a2[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(a1 + 4));
      uint64_t v8 = a2[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[11];
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  uint64_t v258 = *(void **)(v12 - 8);
  uint64_t v13 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v258[6];
  unsigned int v14 = v13(v10, 1, v12);
  uint64_t v255 = v13;
  unsigned int v15 = v13((uint64_t)v11, 1, v12);
  uint64_t v259 = v12;
  if (!v14)
  {
    if (v15)
    {
      sub_232EA3DC4(v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_15;
    }
    *(unsigned char *)uint64_t v10 = *v11;
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    uint64_t v20 = (long long *)(v10 + 24);
    uint64_t v21 = (long long *)(v11 + 24);
    uint64_t v22 = *((void *)v11 + 7);
    size_t v249 = a3;
    if (*(void *)(v10 + 56) == 1)
    {
      if (v22 == 1)
      {
        long long v23 = *v21;
        long long v24 = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        *uint64_t v20 = v23;
        *(_OWORD *)(v10 + 40) = v24;
      }
      else
      {
        *(unsigned char *)(v10 + 24) = v11[24];
        *(unsigned char *)(v10 + 25) = v11[25];
        *(unsigned char *)(v10 + 26) = v11[26];
        long long v39 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v39;
        *(void *)(v10 + 48) = *((void *)v11 + 6);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v22 == 1)
    {
      sub_232F0434C(v10 + 24);
      uint64_t v37 = *((void *)v11 + 7);
      long long v38 = *(_OWORD *)(v11 + 40);
      *uint64_t v20 = *v21;
      *(_OWORD *)(v10 + 40) = v38;
      *(void *)(v10 + 56) = v37;
    }
    else
    {
      *(unsigned char *)(v10 + 24) = v11[24];
      *(unsigned char *)(v10 + 25) = v11[25];
      *(unsigned char *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(void *)(v10 + 48) = *((void *)v11 + 6);
      *(void *)(v10 + 56) = *((void *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = *(int *)(v12 + 28);
    uint64_t v41 = (void *)(v10 + v40);
    uint64_t v42 = &v11[v40];
    uint64_t v43 = sub_23309B300();
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
    uint64_t v245 = v41;
    LODWORD(v41) = v45(v41, 1, v43);
    int v46 = v45(v42, 1, v43);
    if (v41)
    {
      if (!v46)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 16))(v245, v42, v43);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v245, 0, 1, v43);
        goto LABEL_36;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v48 = *(void *)(*(void *)(v47 - 8) + 64);
      uint64_t v49 = v245;
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 24))(v245, v42, v43);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v44 + 8))(v245, v43);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v48 = *(void *)(*(void *)(v50 - 8) + 64);
      uint64_t v49 = v245;
    }
    memcpy(v49, v42, v48);
LABEL_36:
    a3 = v249;
    uint64_t v51 = *(int *)(v12 + 32);
    uint64_t v52 = (void *)(v10 + v51);
    uint64_t v53 = &v11[v51];
    void *v52 = *(void *)v53;
    v52[1] = *((void *)v53 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v15)
  {
LABEL_15:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_37;
  }
  *(unsigned char *)uint64_t v10 = *v11;
  uint64_t v16 = *((void *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(void *)(v10 + 8) = v16;
  if (*((void *)v11 + 7) == 1)
  {
    long long v17 = *(_OWORD *)(v11 + 24);
    long long v18 = *(_OWORD *)(v11 + 40);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v17;
    *(_OWORD *)(v10 + 40) = v18;
  }
  else
  {
    *(unsigned char *)(v10 + 24) = v11[24];
    *(unsigned char *)(v10 + 25) = v11[25];
    *(unsigned char *)(v10 + 26) = v11[26];
    long long v25 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v25;
    *(void *)(v10 + 48) = *((void *)v11 + 6);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = *(int *)(v12 + 28);
  uint64_t v27 = (void *)(v10 + v26);
  uint64_t v28 = &v11[v26];
  uint64_t v29 = sub_23309B300();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v32 = *(int *)(v12 + 32);
  uint64_t v33 = (void *)(v10 + v32);
  uint64_t v34 = &v11[v32];
  *uint64_t v33 = *(void *)v34;
  v33[1] = *((void *)v34 + 1);
  uint64_t v35 = v12;
  uint64_t v36 = (void (*)(uint64_t, void, uint64_t, uint64_t))v258[7];
  swift_bridgeObjectRetain();
  v36(v10, 0, 1, v35);
LABEL_37:
  uint64_t v54 = a3[12];
  uint64_t v55 = (void *)((char *)a1 + v54);
  int v56 = (void *)((char *)a2 + v54);
  *uint64_t v55 = *v56;
  v55[1] = v56[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[15];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v60 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v61 = *(void **)(v60 - 8);
  uint64_t v62 = (uint64_t (*)(void *, uint64_t, uint64_t))v61[6];
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (v64)
    {
      sub_232EA3DC4((uint64_t)v58, type metadata accessor for ModelsR4.DocumentReferenceContext);
      goto LABEL_43;
    }
    *uint64_t v58 = *v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v76 = *(int *)(v60 + 20);
    uint64_t v77 = (char *)v58 + v76;
    uint64_t v78 = (char *)v59 + v76;
    uint64_t v79 = type metadata accessor for Period();
    uint64_t v80 = *(void *)(v79 - 8);
    uint64_t v81 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v80 + 48);
    int v82 = v81(v77, 1, v79);
    int v83 = v81(v78, 1, v79);
    if (v82)
    {
      uint64_t v84 = v259;
      if (!v83)
      {
        if (v255((uint64_t)v78, 1, v259))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v77, v78, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          *uint64_t v77 = *v78;
          uint64_t v108 = *((void *)v78 + 1);
          *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
          *((void *)v77 + 1) = v108;
          uint64_t v251 = a3;
          if (*((void *)v78 + 7) == 1)
          {
            long long v109 = *(_OWORD *)(v78 + 24);
            long long v110 = *(_OWORD *)(v78 + 40);
            *((void *)v77 + 7) = *((void *)v78 + 7);
            *(_OWORD *)(v77 + 24) = v109;
            *(_OWORD *)(v77 + 40) = v110;
          }
          else
          {
            v77[24] = v78[24];
            v77[25] = v78[25];
            v77[26] = v78[26];
            long long v140 = *(_OWORD *)(v78 + 28);
            *((_DWORD *)v77 + 11) = *((_DWORD *)v78 + 11);
            *(_OWORD *)(v77 + 28) = v140;
            *((void *)v77 + 6) = *((void *)v78 + 6);
            *((void *)v77 + 7) = *((void *)v78 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v141 = *(int *)(v259 + 28);
          long long v142 = &v77[v141];
          uint64_t v143 = &v78[v141];
          uint64_t v144 = sub_23309B300();
          uint64_t v145 = *(void *)(v144 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v142, v143, *(void *)(*(void *)(v146 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v145 + 16))(v142, v143, v144);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v145 + 56))(v142, 0, 1, v144);
          }
          a3 = v251;
          uint64_t v84 = v259;
          uint64_t v147 = *(int *)(v259 + 32);
          int v148 = &v77[v147];
          uint64_t v149 = &v78[v147];
          *int v148 = *v149;
          v148[1] = v149[1];
          size_t v150 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v258[7];
          swift_bridgeObjectRetain();
          v150(v77, 0, 1, v259);
        }
        uint64_t v151 = *(int *)(v79 + 20);
        uint64_t v152 = &v77[v151];
        uint64_t v153 = &v78[v151];
        if (v255((uint64_t)v153, 1, v84))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
        }
        else
        {
          *uint64_t v152 = *v153;
          uint64_t v155 = *((void *)v153 + 1);
          *((_DWORD *)v152 + 4) = *((_DWORD *)v153 + 4);
          *((void *)v152 + 1) = v155;
          uint64_t v252 = a3;
          if (*((void *)v153 + 7) == 1)
          {
            long long v156 = *(_OWORD *)(v153 + 24);
            long long v157 = *(_OWORD *)(v153 + 40);
            *((void *)v152 + 7) = *((void *)v153 + 7);
            *(_OWORD *)(v152 + 24) = v156;
            *(_OWORD *)(v152 + 40) = v157;
          }
          else
          {
            v152[24] = v153[24];
            v152[25] = v153[25];
            v152[26] = v153[26];
            long long v158 = *(_OWORD *)(v153 + 28);
            *((_DWORD *)v152 + 11) = *((_DWORD *)v153 + 11);
            *(_OWORD *)(v152 + 28) = v158;
            *((void *)v152 + 6) = *((void *)v153 + 6);
            *((void *)v152 + 7) = *((void *)v153 + 7);
            swift_bridgeObjectRetain();
          }
          uint64_t v159 = *(int *)(v84 + 28);
          __dst = &v152[v159];
          uint64_t v160 = &v153[v159];
          uint64_t v161 = sub_23309B300();
          uint64_t v162 = *(void *)(v161 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(__dst, v160, *(void *)(*(void *)(v163 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v162 + 16))(__dst, v160, v161);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v162 + 56))(__dst, 0, 1, v161);
          }
          uint64_t v164 = *(int *)(v259 + 32);
          size_t v165 = &v152[v164];
          uint64_t v166 = &v153[v164];
          void *v165 = *v166;
          v165[1] = v166[1];
          uint64_t v167 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v258[7];
          swift_bridgeObjectRetain();
          v167(v152, 0, 1, v259);
          a3 = v252;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        goto LABEL_78;
      }
      goto LABEL_53;
    }
    uint64_t v89 = v259;
    if (v83)
    {
      sub_232EA3DC4((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for Period);
LABEL_53:
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      size_t v73 = *(void *)(*(void *)(v90 - 8) + 64);
      uint64_t v74 = v77;
      uint64_t v75 = v78;
      goto LABEL_44;
    }
    unsigned int v94 = v255((uint64_t)v77, 1, v259);
    unsigned int v95 = v255((uint64_t)v78, 1, v259);
    if (v94)
    {
      if (!v95)
      {
        *uint64_t v77 = *v78;
        uint64_t v96 = *((void *)v78 + 1);
        *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
        *((void *)v77 + 1) = v96;
        int v97 = a3;
        if (*((void *)v78 + 7) == 1)
        {
          long long v98 = *(_OWORD *)(v78 + 24);
          long long v99 = *(_OWORD *)(v78 + 40);
          *((void *)v77 + 7) = *((void *)v78 + 7);
          *(_OWORD *)(v77 + 24) = v98;
          *(_OWORD *)(v77 + 40) = v99;
        }
        else
        {
          v77[24] = v78[24];
          v77[25] = v78[25];
          v77[26] = v78[26];
          long long v173 = *(_OWORD *)(v78 + 28);
          *((_DWORD *)v77 + 11) = *((_DWORD *)v78 + 11);
          *(_OWORD *)(v77 + 28) = v173;
          *((void *)v77 + 6) = *((void *)v78 + 6);
          *((void *)v77 + 7) = *((void *)v78 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v174 = *(int *)(v259 + 28);
        uint64_t v175 = &v77[v174];
        uint64_t v176 = &v78[v174];
        uint64_t v177 = sub_23309B300();
        uint64_t v178 = *(void *)(v177 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v175, v176, *(void *)(*(void *)(v179 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v178 + 16))(v175, v176, v177);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
        }
        a3 = v97;
        uint64_t v180 = *(int *)(v259 + 32);
        uint64_t v181 = &v77[v180];
        uint64_t v182 = &v78[v180];
        *uint64_t v181 = *v182;
        v181[1] = v182[1];
        long long v183 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v258[7];
        swift_bridgeObjectRetain();
        v183(v77, 0, 1, v259);
        uint64_t v89 = v259;
LABEL_118:
        uint64_t v200 = *(int *)(v79 + 20);
        uint64_t v201 = (uint64_t)&v77[v200];
        uint64_t v202 = &v78[v200];
        unsigned int v203 = v255(v201, 1, v89);
        unsigned int v204 = v255((uint64_t)v202, 1, v89);
        if (v203)
        {
          if (!v204)
          {
            *(unsigned char *)uint64_t v201 = *v202;
            uint64_t v205 = *((void *)v202 + 1);
            *(_DWORD *)(v201 + 16) = *((_DWORD *)v202 + 4);
            *(void *)(v201 + 8) = v205;
            if (*((void *)v202 + 7) == 1)
            {
              long long v206 = *(_OWORD *)(v202 + 24);
              long long v207 = *(_OWORD *)(v202 + 40);
              *(void *)(v201 + 56) = *((void *)v202 + 7);
              *(_OWORD *)(v201 + 24) = v206;
              *(_OWORD *)(v201 + 40) = v207;
            }
            else
            {
              *(unsigned char *)(v201 + 24) = v202[24];
              *(unsigned char *)(v201 + 25) = v202[25];
              *(unsigned char *)(v201 + 26) = v202[26];
              long long v214 = *(_OWORD *)(v202 + 28);
              *(_DWORD *)(v201 + 44) = *((_DWORD *)v202 + 11);
              *(_OWORD *)(v201 + 28) = v214;
              *(void *)(v201 + 48) = *((void *)v202 + 6);
              *(void *)(v201 + 56) = *((void *)v202 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v215 = *(int *)(v89 + 28);
            uint64_t v216 = (void *)(v201 + v215);
            int v217 = &v202[v215];
            uint64_t v218 = sub_23309B300();
            uint64_t v219 = *(void *)(v218 - 8);
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v216, v217, *(void *)(*(void *)(v220 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, unsigned char *, uint64_t))(v219 + 16))(v216, v217, v218);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
            }
            uint64_t v221 = *(int *)(v89 + 32);
            uint64_t v222 = (void *)(v201 + v221);
            uint64_t v223 = &v202[v221];
            *uint64_t v222 = *v223;
            v222[1] = v223[1];
            long long v224 = (void (*)(uint64_t, void, uint64_t, uint64_t))v258[7];
            swift_bridgeObjectRetain();
            v224(v201, 0, 1, v89);
            goto LABEL_78;
          }
          goto LABEL_124;
        }
        if (v204)
        {
          sub_232EA3DC4(v201, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_124:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v73 = *(void *)(*(void *)(v208 - 8) + 64);
          uint64_t v74 = (void *)v201;
          uint64_t v75 = v202;
          goto LABEL_44;
        }
        *(unsigned char *)uint64_t v201 = *v202;
        *(void *)(v201 + 8) = *((void *)v202 + 1);
        *(_WORD *)(v201 + 16) = *((_WORD *)v202 + 8);
        *(_WORD *)(v201 + 18) = *((_WORD *)v202 + 9);
        uint64_t v209 = (long long *)(v201 + 24);
        uint64_t v210 = (long long *)(v202 + 24);
        uint64_t v211 = *((void *)v202 + 7);
        int v254 = a3;
        if (*(void *)(v201 + 56) == 1)
        {
          if (v211 == 1)
          {
            long long v212 = *v210;
            long long v213 = *(_OWORD *)(v202 + 40);
            *(void *)(v201 + 56) = *((void *)v202 + 7);
            *uint64_t v209 = v212;
            *(_OWORD *)(v201 + 40) = v213;
          }
          else
          {
            *(unsigned char *)(v201 + 24) = v202[24];
            *(unsigned char *)(v201 + 25) = v202[25];
            *(unsigned char *)(v201 + 26) = v202[26];
            long long v227 = *(_OWORD *)(v202 + 28);
            *(_DWORD *)(v201 + 44) = *((_DWORD *)v202 + 11);
            *(_OWORD *)(v201 + 28) = v227;
            *(void *)(v201 + 48) = *((void *)v202 + 6);
            *(void *)(v201 + 56) = *((void *)v202 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v211 == 1)
        {
          sub_232F0434C(v201 + 24);
          uint64_t v225 = *((void *)v202 + 7);
          long long v226 = *(_OWORD *)(v202 + 40);
          *uint64_t v209 = *v210;
          *(_OWORD *)(v201 + 40) = v226;
          *(void *)(v201 + 56) = v225;
        }
        else
        {
          *(unsigned char *)(v201 + 24) = v202[24];
          *(unsigned char *)(v201 + 25) = v202[25];
          *(unsigned char *)(v201 + 26) = v202[26];
          *(_DWORD *)(v201 + 28) = *((_DWORD *)v202 + 7);
          *(_WORD *)(v201 + 32) = *((_WORD *)v202 + 16);
          *(_WORD *)(v201 + 34) = *((_WORD *)v202 + 17);
          *(_WORD *)(v201 + 36) = *((_WORD *)v202 + 18);
          *(_WORD *)(v201 + 38) = *((_WORD *)v202 + 19);
          *(_WORD *)(v201 + 40) = *((_WORD *)v202 + 20);
          *(_WORD *)(v201 + 42) = *((_WORD *)v202 + 21);
          *(_WORD *)(v201 + 44) = *((_WORD *)v202 + 22);
          *(_WORD *)(v201 + 46) = *((_WORD *)v202 + 23);
          *(void *)(v201 + 48) = *((void *)v202 + 6);
          *(void *)(v201 + 56) = *((void *)v202 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v228 = *(int *)(v89 + 28);
        uint64_t v229 = (void *)(v201 + v228);
        int v230 = &v202[v228];
        uint64_t v231 = sub_23309B300();
        uint64_t v232 = *(void *)(v231 - 8);
        uint64_t v233 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v232 + 48);
        __dsta = v229;
        LODWORD(v229) = v233(v229, 1, v231);
        int v234 = v233(v230, 1, v231);
        if (v229)
        {
          if (!v234)
          {
            (*(void (**)(void *, unsigned char *, uint64_t))(v232 + 16))(__dsta, v230, v231);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v232 + 56))(__dsta, 0, 1, v231);
            goto LABEL_145;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v236 = *(void *)(*(void *)(v235 - 8) + 64);
          uint64_t v237 = __dsta;
        }
        else
        {
          if (!v234)
          {
            (*(void (**)(void *, unsigned char *, uint64_t))(v232 + 24))(__dsta, v230, v231);
            goto LABEL_145;
          }
          (*(void (**)(void *, uint64_t))(v232 + 8))(__dsta, v231);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v236 = *(void *)(*(void *)(v238 - 8) + 64);
          uint64_t v237 = __dsta;
        }
        memcpy(v237, v230, v236);
LABEL_145:
        a3 = v254;
        uint64_t v239 = *(int *)(v259 + 32);
        long long v240 = (void *)(v201 + v239);
        uint64_t v241 = &v202[v239];
        *long long v240 = *v241;
        v240[1] = v241[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
LABEL_81:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v77, v78, *(void *)(*(void *)(v139 - 8) + 64));
      goto LABEL_118;
    }
    if (v95)
    {
      sub_232EA3DC4((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_81;
    }
    *uint64_t v77 = *v78;
    *((void *)v77 + 1) = *((void *)v78 + 1);
    *((_WORD *)v77 + 8) = *((_WORD *)v78 + 8);
    *((_WORD *)v77 + 9) = *((_WORD *)v78 + 9);
    uint64_t v168 = (long long *)(v77 + 24);
    uint64_t v169 = (long long *)(v78 + 24);
    uint64_t v170 = *((void *)v78 + 7);
    uint64_t v253 = a3;
    if (*((void *)v77 + 7) == 1)
    {
      if (v170 == 1)
      {
        long long v171 = *v169;
        long long v172 = *(_OWORD *)(v78 + 40);
        *((void *)v77 + 7) = *((void *)v78 + 7);
        *uint64_t v168 = v171;
        *(_OWORD *)(v77 + 40) = v172;
      }
      else
      {
        v77[24] = v78[24];
        v77[25] = v78[25];
        v77[26] = v78[26];
        long long v186 = *(_OWORD *)(v78 + 28);
        *((_DWORD *)v77 + 11) = *((_DWORD *)v78 + 11);
        *(_OWORD *)(v77 + 28) = v186;
        *((void *)v77 + 6) = *((void *)v78 + 6);
        *((void *)v77 + 7) = *((void *)v78 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v170 == 1)
    {
      sub_232F0434C((uint64_t)(v77 + 24));
      uint64_t v184 = *((void *)v78 + 7);
      long long v185 = *(_OWORD *)(v78 + 40);
      *uint64_t v168 = *v169;
      *(_OWORD *)(v77 + 40) = v185;
      *((void *)v77 + 7) = v184;
    }
    else
    {
      v77[24] = v78[24];
      v77[25] = v78[25];
      v77[26] = v78[26];
      *((_DWORD *)v77 + 7) = *((_DWORD *)v78 + 7);
      *((_WORD *)v77 + 16) = *((_WORD *)v78 + 16);
      *((_WORD *)v77 + 17) = *((_WORD *)v78 + 17);
      *((_WORD *)v77 + 18) = *((_WORD *)v78 + 18);
      *((_WORD *)v77 + 19) = *((_WORD *)v78 + 19);
      *((_WORD *)v77 + 20) = *((_WORD *)v78 + 20);
      *((_WORD *)v77 + 21) = *((_WORD *)v78 + 21);
      *((_WORD *)v77 + 22) = *((_WORD *)v78 + 22);
      *((_WORD *)v77 + 23) = *((_WORD *)v78 + 23);
      *((void *)v77 + 6) = *((void *)v78 + 6);
      *((void *)v77 + 7) = *((void *)v78 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v187 = *(int *)(v259 + 28);
    uint64_t v188 = &v77[v187];
    uint64_t v189 = &v78[v187];
    uint64_t v190 = sub_23309B300();
    uint64_t v244 = *(void *)(v190 - 8);
    uint64_t v191 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v244 + 48);
    __srca = v188;
    LODWORD(v188) = v191(v188, 1, v190);
    int v192 = v191(v189, 1, v190);
    if (v188)
    {
      if (!v192)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v244 + 16))(__srca, v189, v190);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v244 + 56))(__srca, 0, 1, v190);
        goto LABEL_117;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v194 = *(void *)(*(void *)(v193 - 8) + 64);
      uint64_t v195 = __srca;
    }
    else
    {
      if (!v192)
      {
        (*(void (**)(void *, unsigned char *, uint64_t))(v244 + 24))(__srca, v189, v190);
        goto LABEL_117;
      }
      (*(void (**)(void *, uint64_t))(v244 + 8))(__srca, v190);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v194 = *(void *)(*(void *)(v196 - 8) + 64);
      uint64_t v195 = __srca;
    }
    memcpy(v195, v189, v194);
LABEL_117:
    uint64_t v89 = v259;
    uint64_t v197 = *(int *)(v259 + 32);
    long long v198 = &v77[v197];
    uint64_t v199 = &v78[v197];
    void *v198 = *v199;
    v198[1] = v199[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v253;
    goto LABEL_118;
  }
  if (v64)
  {
LABEL_43:
    sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
    size_t v73 = *(void *)(*(void *)(v72 - 8) + 64);
    uint64_t v74 = v58;
    uint64_t v75 = v59;
LABEL_44:
    memcpy(v74, v75, v73);
    goto LABEL_78;
  }
  uint64_t v250 = a3;
  *uint64_t v58 = *v59;
  uint64_t v65 = *(int *)(v60 + 20);
  int v246 = v61;
  __src = (char *)v58 + v65;
  long long v66 = (char *)v59 + v65;
  uint64_t v67 = type metadata accessor for Period();
  uint64_t v68 = *(void *)(v67 - 8);
  long long v69 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v68 + 48);
  uint64_t v70 = v66;
  swift_bridgeObjectRetain();
  if (v69(v66, 1, v67))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(__src, v66, *(void *)(*(void *)(v71 - 8) + 64));
  }
  else
  {
    uint64_t v242 = v68;
    uint64_t v243 = v67;
    uint64_t v86 = v259;
    if (v255((uint64_t)v66, 1, v259))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      uint64_t v88 = __src;
      memcpy(__src, v70, *(void *)(*(void *)(v87 - 8) + 64));
    }
    else
    {
      unsigned char *__src = *v66;
      uint64_t v91 = *((void *)v66 + 1);
      *((_DWORD *)__src + 4) = *((_DWORD *)v66 + 4);
      *((void *)__src + 1) = v91;
      if (*((void *)v66 + 7) == 1)
      {
        long long v92 = *(_OWORD *)(v66 + 24);
        long long v93 = *(_OWORD *)(v66 + 40);
        *((void *)__src + 7) = *((void *)v66 + 7);
        *(_OWORD *)(__src + 24) = v92;
        *(_OWORD *)(__src + 40) = v93;
      }
      else
      {
        __src[24] = v66[24];
        __src[25] = v66[25];
        __src[26] = v66[26];
        long long v100 = *(_OWORD *)(v66 + 28);
        *((_DWORD *)__src + 11) = *((_DWORD *)v66 + 11);
        *(_OWORD *)(__src + 28) = v100;
        *((void *)__src + 6) = *((void *)v66 + 6);
        *((void *)__src + 7) = *((void *)v66 + 7);
        swift_bridgeObjectRetain();
      }
      uint64_t v101 = *(int *)(v259 + 28);
      uint64_t v102 = &__src[v101];
      uint64_t v103 = v66;
      uint64_t v104 = &v66[v101];
      uint64_t v105 = sub_23309B300();
      uint64_t v106 = *(void *)(v105 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v102, v104, *(void *)(*(void *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v106 + 16))(v102, v104, v105);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v106 + 56))(v102, 0, 1, v105);
      }
      uint64_t v111 = *(int *)(v259 + 32);
      uint64_t v88 = __src;
      int v112 = &__src[v111];
      uint64_t v70 = v103;
      uint64_t v113 = &v103[v111];
      void *v112 = *(void *)v113;
      v112[1] = *((void *)v113 + 1);
      uint64_t v114 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v258[7];
      swift_bridgeObjectRetain();
      v114(__src, 0, 1, v259);
      uint64_t v86 = v259;
    }
    uint64_t v115 = v243;
    uint64_t v116 = *(int *)(v243 + 20);
    uint64_t v117 = &v88[v116];
    uint64_t v118 = &v70[v116];
    if (v255((uint64_t)&v70[v116], 1, v86))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v117, v118, *(void *)(*(void *)(v119 - 8) + 64));
    }
    else
    {
      *uint64_t v117 = *v118;
      uint64_t v120 = *((void *)v118 + 1);
      *((_DWORD *)v117 + 4) = *((_DWORD *)v118 + 4);
      *((void *)v117 + 1) = v120;
      if (*((void *)v118 + 7) == 1)
      {
        long long v121 = *(_OWORD *)(v118 + 24);
        long long v122 = *(_OWORD *)(v118 + 40);
        *((void *)v117 + 7) = *((void *)v118 + 7);
        *(_OWORD *)(v117 + 24) = v121;
        *(_OWORD *)(v117 + 40) = v122;
      }
      else
      {
        v117[24] = v118[24];
        v117[25] = v118[25];
        v117[26] = v118[26];
        long long v123 = *(_OWORD *)(v118 + 28);
        *((_DWORD *)v117 + 11) = *((_DWORD *)v118 + 11);
        *(_OWORD *)(v117 + 28) = v123;
        *((void *)v117 + 6) = *((void *)v118 + 6);
        *((void *)v117 + 7) = *((void *)v118 + 7);
        swift_bridgeObjectRetain();
      }
      uint64_t v124 = *(int *)(v86 + 28);
      uint64_t v125 = &v117[v124];
      uint64_t v126 = &v118[v124];
      uint64_t v127 = sub_23309B300();
      uint64_t v128 = *(void *)(v127 - 8);
      uint64_t v129 = v127;
      if ((*(unsigned int (**)(char *, uint64_t))(v128 + 48))(v126, 1))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v125, v126, *(void *)(*(void *)(v130 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v126, v129);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v129);
      }
      uint64_t v131 = *(int *)(v259 + 32);
      uint64_t v132 = &v117[v131];
      int v133 = &v118[v131];
      *(void *)uint64_t v132 = *(void *)v133;
      *((void *)v132 + 1) = *((void *)v133 + 1);
      uint64_t v134 = (void (*)(char *, void, uint64_t, uint64_t))v258[7];
      swift_bridgeObjectRetain();
      v134(v117, 0, 1, v259);
      uint64_t v115 = v243;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v242 + 56))(__src, 0, 1, v115);
  }
  a3 = v250;
  (*((void (**)(void *, void, uint64_t, uint64_t))v246 + 7))(v58, 0, 1, v60);
LABEL_78:
  uint64_t v135 = a3[16];
  uint64_t v136 = (void *)((char *)a1 + v135);
  uint64_t v137 = (void *)((char *)a2 + v135);
  *uint64_t v136 = *v137;
  v136[1] = v137[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = a3[11];
  uint64_t v10 = (unsigned char *)(a1 + v9);
  uint64_t v11 = (unsigned char *)(a2 + v9);
  *(_OWORD *)(a1 + 72) = v7;
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  uint64_t v13 = *(void *)(v12 - 8);
  long long v66 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48);
  if (v66(v11, 1, v12))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v12;
    uint64_t v64 = v13;
    *uint64_t v10 = *v11;
    *((void *)v10 + 1) = *((void *)v11 + 1);
    *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *((void *)v10 + 7) = *((void *)v11 + 7);
    uint64_t v15 = *(int *)(v12 + 28);
    uint64_t v16 = &v10[v15];
    long long v17 = &v11[v15];
    uint64_t v18 = sub_23309B300();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v12 = v61;
    uint64_t v13 = v64;
    *(_OWORD *)&v10[*(int *)(v61 + 32)] = *(_OWORD *)&v11[*(int *)(v61 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56))(v10, 0, 1, v61);
  }
  uint64_t v21 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v22 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  long long v23 = (void *)(a1 + v22);
  long long v24 = (void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v59 = v26;
    uint64_t v60 = v23;
    uint64_t v65 = v13;
    *long long v23 = *v24;
    uint64_t v28 = *(int *)(v25 + 20);
    uint64_t v29 = (char *)v23 + v28;
    uint64_t v30 = (char *)v24 + v28;
    uint64_t v31 = type metadata accessor for Period();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      uint64_t v34 = v60;
    }
    else
    {
      uint64_t v56 = v32;
      __dst = v29;
      uint64_t v57 = v31;
      if (v66(v30, 1, v12))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        *uint64_t v29 = *v30;
        *((void *)v29 + 1) = *((void *)v30 + 1);
        *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
        *((void *)v29 + 7) = *((void *)v30 + 7);
        uint64_t v62 = v12;
        uint64_t v36 = *(int *)(v12 + 28);
        uint64_t v37 = &v29[v36];
        long long v38 = &v30[v36];
        uint64_t v39 = sub_23309B300();
        uint64_t v40 = *(void *)(v39 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v40 + 32))(v37, v38, v39);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
        }
        uint64_t v31 = v57;
        uint64_t v29 = __dst;
        uint64_t v12 = v62;
        *(_OWORD *)&__dst[*(int *)(v62 + 32)] = *(_OWORD *)&v30[*(int *)(v62 + 32)];
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v65 + 56))(__dst, 0, 1, v62);
      }
      uint64_t v42 = *(int *)(v31 + 20);
      uint64_t v43 = &v29[v42];
      uint64_t v44 = &v30[v42];
      if (v66(v44, 1, v12))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
        uint64_t v34 = v60;
        uint64_t v46 = v56;
      }
      else
      {
        *uint64_t v43 = *v44;
        *((void *)v43 + 1) = *((void *)v44 + 1);
        *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
        *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
        *(_OWORD *)(v43 + 40) = *(_OWORD *)(v44 + 40);
        *((void *)v43 + 7) = *((void *)v44 + 7);
        uint64_t v63 = v12;
        uint64_t v47 = *(int *)(v12 + 28);
        uint64_t v67 = &v43[v47];
        size_t v48 = &v44[v47];
        uint64_t v49 = sub_23309B300();
        uint64_t v50 = *(void *)(v49 - 8);
        __src = v48;
        uint64_t v51 = v49;
        int v52 = (*(uint64_t (**)(unsigned char *, uint64_t))(v50 + 48))(v48, 1);
        uint64_t v34 = v60;
        if (v52)
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v67, __src, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, void *, uint64_t))(v50 + 32))(v67, __src, v51);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v50 + 56))(v67, 0, 1, v51);
        }
        uint64_t v46 = v56;
        *(_OWORD *)&v43[*(int *)(v63 + 32)] = *(_OWORD *)&v44[*(int *)(v63 + 32)];
        (*(void (**)(unsigned char *, void, uint64_t))(v65 + 56))(v43, 0, 1);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v57);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v34, 0, 1, v25);
  }
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

void *assignWithTake for ModelsR4.DocumentReference(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + 4;
  uint64_t v9 = a2[4];
  if (a1[4] == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4((uint64_t)(a1 + 4));
    uint64_t v9 = a2[4];
LABEL_4:
    *uint64_t v8 = v9;
    goto LABEL_6;
  }
  *uint64_t v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[10];
  a1[9] = a2[9];
  a1[10] = v12;
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[11];
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for FHIRDateTime();
  long long v185 = *(void **)(v16 - 8);
  long long v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v185[6];
  int v18 = v17(v14, 1, v16);
  uint64_t v181 = v17;
  int v19 = v17((uint64_t)v15, 1, v16);
  uint64_t v186 = v16;
  uint64_t v187 = a3;
  if (!v18)
  {
    if (v19)
    {
      sub_232EA3DC4(v14, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_12;
    }
    *(unsigned char *)uint64_t v14 = *v15;
    *(void *)(v14 + 8) = *((void *)v15 + 1);
    *(_DWORD *)(v14 + 16) = *((_DWORD *)v15 + 4);
    if (*(void *)(v14 + 56) != 1)
    {
      uint64_t v27 = *((void *)v15 + 7);
      if (v27 != 1)
      {
        *(unsigned char *)(v14 + 24) = v15[24];
        *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
        *(_DWORD *)(v14 + 28) = *((_DWORD *)v15 + 7);
        *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
        *(void *)(v14 + 48) = *((void *)v15 + 6);
        *(void *)(v14 + 56) = v27;
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t v29 = *(int *)(v16 + 28);
        uint64_t v30 = (void *)(v14 + v29);
        uint64_t v31 = &v15[v29];
        uint64_t v32 = sub_23309B300();
        uint64_t v33 = *(void *)(v32 - 8);
        uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
        __dst = v30;
        LODWORD(v30) = v34(v30, 1, v32);
        int v35 = v34(v31, 1, v32);
        if (v30)
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
            goto LABEL_28;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v37 = *(void *)(*(void *)(v36 - 8) + 64);
          long long v38 = __dst;
        }
        else
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 40))(__dst, v31, v32);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v33 + 8))(__dst, v32);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v37 = *(void *)(*(void *)(v39 - 8) + 64);
          long long v38 = __dst;
        }
        memcpy(v38, v31, v37);
LABEL_28:
        a3 = v187;
        uint64_t v40 = *(int *)(v186 + 32);
        uint64_t v41 = (void *)(v14 + v40);
        uint64_t v42 = &v15[v40];
        uint64_t v44 = *(void *)v42;
        uint64_t v43 = *((void *)v42 + 1);
        *uint64_t v41 = v44;
        v41[1] = v43;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      sub_232F0434C(v14 + 24);
    }
    long long v28 = *(_OWORD *)(v15 + 40);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 40) = v28;
    *(void *)(v14 + 56) = *((void *)v15 + 7);
    goto LABEL_20;
  }
  if (v19)
  {
LABEL_12:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v14, v15, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v14 = *v15;
  *(void *)(v14 + 8) = *((void *)v15 + 1);
  *(_DWORD *)(v14 + 16) = *((_DWORD *)v15 + 4);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  *(void *)(v14 + 56) = *((void *)v15 + 7);
  uint64_t v20 = *(int *)(v16 + 28);
  uint64_t v21 = (void *)(v14 + v20);
  uint64_t v22 = &v15[v20];
  uint64_t v23 = sub_23309B300();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_OWORD *)(v14 + *(int *)(v186 + 32)) = *(_OWORD *)&v15[*(int *)(v186 + 32)];
  ((void (*)(uint64_t, void, uint64_t))v185[7])(v14, 0, 1);
LABEL_29:
  uint64_t v45 = a3[12];
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[15];
  uint64_t v51 = (void *)((char *)a1 + v50);
  int v52 = (void *)((char *)a2 + v50);
  uint64_t v53 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      *uint64_t v51 = *v52;
      uint64_t v58 = *(int *)(v53 + 20);
      uint64_t v59 = (char *)v51 + v58;
      uint64_t v60 = (char *)v52 + v58;
      uint64_t v61 = type metadata accessor for Period();
      uint64_t v62 = *(unsigned int (***)(unsigned char *, uint64_t, uint64_t))(v61 - 8);
      if (v62[6](v60, 1, v61))
      {
        sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
        memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        __src = v62;
        uint64_t v76 = v186;
        __dsta = v59;
        if (v181((uint64_t)v60, 1, v186))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v59, v60, *(void *)(*(void *)(v77 - 8) + 64));
        }
        else
        {
          *uint64_t v59 = *v60;
          *((void *)v59 + 1) = *((void *)v60 + 1);
          *((_DWORD *)v59 + 4) = *((_DWORD *)v60 + 4);
          *(_OWORD *)(v59 + 24) = *(_OWORD *)(v60 + 24);
          *(_OWORD *)(v59 + 40) = *(_OWORD *)(v60 + 40);
          *((void *)v59 + 7) = *((void *)v60 + 7);
          uint64_t v80 = *(int *)(v186 + 28);
          long long v172 = &v59[v80];
          uint64_t v81 = &v60[v80];
          uint64_t v82 = sub_23309B300();
          uint64_t v171 = *(void *)(v82 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v171 + 48))(v81, 1, v82))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v172, v81, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v171 + 32))(v172, v81, v82);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v171 + 56))(v172, 0, 1, v82);
          }
          uint64_t v76 = v186;
          uint64_t v59 = __dsta;
          *(_OWORD *)&__dsta[*(int *)(v186 + 32)] = *(_OWORD *)&v60[*(int *)(v186 + 32)];
          ((void (*)(unsigned char *, void, uint64_t, uint64_t))v185[7])(__dsta, 0, 1, v186);
        }
        uint64_t v97 = *(int *)(v61 + 20);
        long long v98 = &v59[v97];
        long long v99 = &v60[v97];
        if (v181((uint64_t)v99, 1, v76))
        {
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy(v98, v99, *(void *)(*(void *)(v100 - 8) + 64));
          uint64_t v101 = (void (**)(unsigned char *, void, uint64_t, uint64_t))__src;
        }
        else
        {
          *long long v98 = *v99;
          *((void *)v98 + 1) = *((void *)v99 + 1);
          *((_DWORD *)v98 + 4) = *((_DWORD *)v99 + 4);
          *(_OWORD *)(v98 + 24) = *(_OWORD *)(v99 + 24);
          *(_OWORD *)(v98 + 40) = *(_OWORD *)(v99 + 40);
          *((void *)v98 + 7) = *((void *)v99 + 7);
          uint64_t v102 = *(int *)(v76 + 28);
          uint64_t v182 = &v98[v102];
          uint64_t v103 = &v99[v102];
          uint64_t v104 = sub_23309B300();
          uint64_t v105 = *(void *)(v104 - 8);
          uint64_t v174 = v103;
          uint64_t v106 = v103;
          uint64_t v107 = v104;
          if ((*(unsigned int (**)(unsigned char *, uint64_t))(v105 + 48))(v106, 1))
          {
            sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
            memcpy(v182, v174, *(void *)(*(void *)(v108 - 8) + 64));
          }
          else
          {
            (*(void (**)(unsigned char *, void *, uint64_t))(v105 + 32))(v182, v174, v107);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v105 + 56))(v182, 0, 1, v107);
          }
          uint64_t v101 = (void (**)(unsigned char *, void, uint64_t, uint64_t))__src;
          *(_OWORD *)&v98[*(int *)(v186 + 32)] = *(_OWORD *)&v99[*(int *)(v186 + 32)];
          ((void (*)(unsigned char *, void, uint64_t))v185[7])(v98, 0, 1);
        }
        v101[7](__dsta, 0, 1, v61);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_63;
    }
LABEL_35:
    sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v64 - 8) + 64));
LABEL_63:
    uint64_t v74 = v187;
    goto LABEL_64;
  }
  if (v57)
  {
    sub_232EA3DC4((uint64_t)v51, type metadata accessor for ModelsR4.DocumentReferenceContext);
    goto LABEL_35;
  }
  *uint64_t v51 = *v52;
  swift_bridgeObjectRelease();
  uint64_t v65 = *(int *)(v53 + 20);
  uint64_t v66 = (uint64_t)v51 + v65;
  uint64_t v67 = (char *)v52 + v65;
  uint64_t v68 = type metadata accessor for Period();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1, v68);
  int v72 = v70((uint64_t)v67, 1, v68);
  if (!v71)
  {
    uint64_t v78 = v186;
    uint64_t v74 = v187;
    if (v72)
    {
      sub_232EA3DC4(v66, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_44;
    }
    unsigned int v84 = v181(v66, 1, v186);
    unsigned int v85 = v181((uint64_t)v67, 1, v186);
    if (v84)
    {
      if (!v85)
      {
        *(unsigned char *)uint64_t v66 = *v67;
        *(void *)(v66 + 8) = *((void *)v67 + 1);
        *(_DWORD *)(v66 + 16) = *((_DWORD *)v67 + 4);
        *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
        *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
        *(void *)(v66 + 56) = *((void *)v67 + 7);
        uint64_t v86 = *(int *)(v186 + 28);
        uint64_t v87 = (void *)(v66 + v86);
        uint64_t v88 = &v67[v86];
        uint64_t v89 = sub_23309B300();
        uint64_t v90 = *(void *)(v89 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
        }
        uint64_t v78 = v186;
        *(_OWORD *)(v66 + *(int *)(v186 + 32)) = *(_OWORD *)&v67[*(int *)(v186 + 32)];
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v185[7])(v66, 0, 1, v186);
        goto LABEL_93;
      }
LABEL_67:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v66, v67, *(void *)(*(void *)(v115 - 8) + 64));
      goto LABEL_94;
    }
    if (v85)
    {
      sub_232EA3DC4(v66, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_67;
    }
    *(unsigned char *)uint64_t v66 = *v67;
    *(void *)(v66 + 8) = *((void *)v67 + 1);
    *(_DWORD *)(v66 + 16) = *((_DWORD *)v67 + 4);
    if (*(void *)(v66 + 56) != 1)
    {
      uint64_t v125 = *((void *)v67 + 7);
      if (v125 != 1)
      {
        *(unsigned char *)(v66 + 24) = v67[24];
        *(_WORD *)(v66 + 25) = *(_WORD *)(v67 + 25);
        *(_DWORD *)(v66 + 28) = *((_DWORD *)v67 + 7);
        *(_OWORD *)(v66 + 32) = *((_OWORD *)v67 + 2);
        *(void *)(v66 + 48) = *((void *)v67 + 6);
        *(void *)(v66 + 56) = v125;
        swift_bridgeObjectRelease();
LABEL_84:
        uint64_t v127 = *(int *)(v186 + 28);
        uint64_t v128 = (void *)(v66 + v127);
        __dstc = &v67[v127];
        uint64_t v129 = sub_23309B300();
        uint64_t v173 = *(void *)(v129 - 8);
        uint64_t v130 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v173 + 48);
        __srca = v128;
        LODWORD(v128) = v130(v128, 1, v129);
        int v131 = v130(__dstc, 1, v129);
        if (v128)
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v173 + 32))(__srca, __dstc, v129);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v173 + 56))(__srca, 0, 1, v129);
            goto LABEL_92;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v133 = *(void *)(*(void *)(v132 - 8) + 64);
          uint64_t v134 = __srca;
        }
        else
        {
          if (!v131)
          {
            (*(void (**)(void *, char *, uint64_t))(v173 + 40))(__srca, __dstc, v129);
            goto LABEL_92;
          }
          (*(void (**)(void *, uint64_t))(v173 + 8))(__srca, v129);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v133 = *(void *)(*(void *)(v135 - 8) + 64);
          uint64_t v134 = __srca;
        }
        memcpy(v134, __dstc, v133);
LABEL_92:
        uint64_t v78 = v186;
        uint64_t v136 = *(int *)(v186 + 32);
        uint64_t v137 = (void *)(v66 + v136);
        uint64_t v138 = &v67[v136];
        uint64_t v140 = *(void *)v138;
        uint64_t v139 = *((void *)v138 + 1);
        *uint64_t v137 = v140;
        v137[1] = v139;
        swift_bridgeObjectRelease();
LABEL_93:
        uint64_t v74 = v187;
LABEL_94:
        uint64_t v141 = *(int *)(v68 + 20);
        uint64_t v142 = v66 + v141;
        uint64_t v143 = &v67[v141];
        unsigned int v144 = v181(v142, 1, v78);
        unsigned int v145 = v181((uint64_t)v143, 1, v78);
        if (v144)
        {
          if (!v145)
          {
            *(unsigned char *)uint64_t v142 = *v143;
            *(void *)(v142 + 8) = *((void *)v143 + 1);
            *(_DWORD *)(v142 + 16) = *((_DWORD *)v143 + 4);
            *(_OWORD *)(v142 + 24) = *(_OWORD *)(v143 + 24);
            *(_OWORD *)(v142 + 40) = *(_OWORD *)(v143 + 40);
            *(void *)(v142 + 56) = *((void *)v143 + 7);
            uint64_t v146 = *(int *)(v78 + 28);
            uint64_t v147 = (void *)(v142 + v146);
            int v148 = &v143[v146];
            uint64_t v149 = sub_23309B300();
            uint64_t v150 = *(void *)(v149 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v148, 1, v149))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v147, v148, *(void *)(*(void *)(v151 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v150 + 32))(v147, v148, v149);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
            }
            *(_OWORD *)(v142 + *(int *)(v186 + 32)) = *(_OWORD *)&v143[*(int *)(v186 + 32)];
            ((void (*)(uint64_t, void, uint64_t))v185[7])(v142, 0, 1);
            goto LABEL_64;
          }
LABEL_100:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v142, v143, *(void *)(*(void *)(v152 - 8) + 64));
          goto LABEL_64;
        }
        if (v145)
        {
          sub_232EA3DC4(v142, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_100;
        }
        *(unsigned char *)uint64_t v142 = *v143;
        *(void *)(v142 + 8) = *((void *)v143 + 1);
        *(_DWORD *)(v142 + 16) = *((_DWORD *)v143 + 4);
        if (*(void *)(v142 + 56) != 1)
        {
          uint64_t v153 = *((void *)v143 + 7);
          if (v153 != 1)
          {
            *(unsigned char *)(v142 + 24) = v143[24];
            *(_WORD *)(v142 + 25) = *(_WORD *)(v143 + 25);
            *(_DWORD *)(v142 + 28) = *((_DWORD *)v143 + 7);
            *(_OWORD *)(v142 + 32) = *((_OWORD *)v143 + 2);
            *(void *)(v142 + 48) = *((void *)v143 + 6);
            *(void *)(v142 + 56) = v153;
            swift_bridgeObjectRelease();
LABEL_108:
            uint64_t v155 = *(int *)(v186 + 28);
            long long v156 = (void *)(v142 + v155);
            long long v157 = &v143[v155];
            uint64_t v158 = sub_23309B300();
            uint64_t v159 = *(void *)(v158 - 8);
            uint64_t v160 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v159 + 48);
            uint64_t v184 = v156;
            LODWORD(v156) = v160(v156, 1, v158);
            int v161 = v160(v157, 1, v158);
            if (v156)
            {
              if (!v161)
              {
                (*(void (**)(void *, char *, uint64_t))(v159 + 32))(v184, v157, v158);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v159 + 56))(v184, 0, 1, v158);
                goto LABEL_116;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v163 = *(void *)(*(void *)(v162 - 8) + 64);
              uint64_t v164 = v184;
            }
            else
            {
              if (!v161)
              {
                (*(void (**)(void *, char *, uint64_t))(v159 + 40))(v184, v157, v158);
                goto LABEL_116;
              }
              (*(void (**)(void *, uint64_t))(v159 + 8))(v184, v158);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v163 = *(void *)(*(void *)(v165 - 8) + 64);
              uint64_t v164 = v184;
            }
            memcpy(v164, v157, v163);
LABEL_116:
            uint64_t v74 = v187;
            uint64_t v166 = *(int *)(v186 + 32);
            uint64_t v167 = (void *)(v142 + v166);
            uint64_t v168 = &v143[v166];
            uint64_t v170 = *(void *)v168;
            uint64_t v169 = *((void *)v168 + 1);
            void *v167 = v170;
            v167[1] = v169;
            swift_bridgeObjectRelease();
            goto LABEL_64;
          }
          sub_232F0434C(v142 + 24);
        }
        long long v154 = *(_OWORD *)(v143 + 40);
        *(_OWORD *)(v142 + 24) = *(_OWORD *)(v143 + 24);
        *(_OWORD *)(v142 + 40) = v154;
        *(void *)(v142 + 56) = *((void *)v143 + 7);
        goto LABEL_108;
      }
      sub_232F0434C(v66 + 24);
    }
    long long v126 = *(_OWORD *)(v67 + 40);
    *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
    *(_OWORD *)(v66 + 40) = v126;
    *(void *)(v66 + 56) = *((void *)v67 + 7);
    goto LABEL_84;
  }
  uint64_t v73 = v186;
  uint64_t v74 = v187;
  if (v72)
  {
LABEL_44:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v66, v67, *(void *)(*(void *)(v79 - 8) + 64));
    goto LABEL_64;
  }
  if (v181((uint64_t)v67, 1, v186))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v66, v67, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v66 = *v67;
    *(void *)(v66 + 8) = *((void *)v67 + 1);
    *(_DWORD *)(v66 + 16) = *((_DWORD *)v67 + 4);
    *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
    *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
    *(void *)(v66 + 56) = *((void *)v67 + 7);
    uint64_t v92 = *(int *)(v186 + 28);
    __dstb = (void *)(v66 + v92);
    long long v93 = &v67[v92];
    uint64_t v94 = sub_23309B300();
    uint64_t v95 = *(void *)(v94 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dstb, v93, *(void *)(*(void *)(v96 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v95 + 32))(__dstb, v93, v94);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(__dstb, 0, 1, v94);
    }
    uint64_t v73 = v186;
    *(_OWORD *)(v66 + *(int *)(v186 + 32)) = *(_OWORD *)&v67[*(int *)(v186 + 32)];
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v185[7])(v66, 0, 1, v186);
    uint64_t v74 = v187;
  }
  uint64_t v116 = *(int *)(v68 + 20);
  uint64_t v117 = (char *)(v66 + v116);
  uint64_t v118 = &v67[v116];
  if (v181((uint64_t)v118, 1, v73))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v117, v118, *(void *)(*(void *)(v119 - 8) + 64));
  }
  else
  {
    *uint64_t v117 = *v118;
    *((void *)v117 + 1) = *((void *)v118 + 1);
    *((_DWORD *)v117 + 4) = *((_DWORD *)v118 + 4);
    *(_OWORD *)(v117 + 24) = *(_OWORD *)(v118 + 24);
    *(_OWORD *)(v117 + 40) = *(_OWORD *)(v118 + 40);
    *((void *)v117 + 7) = *((void *)v118 + 7);
    uint64_t v120 = *(int *)(v73 + 28);
    long long v183 = &v117[v120];
    long long v121 = &v118[v120];
    uint64_t v122 = sub_23309B300();
    uint64_t v123 = *(void *)(v122 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v183, v121, *(void *)(*(void *)(v124 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v183, v121, v122);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v123 + 56))(v183, 0, 1, v122);
    }
    *(_OWORD *)&v117[*(int *)(v186 + 32)] = *(_OWORD *)&v118[*(int *)(v186 + 32)];
    ((void (*)(char *, void, uint64_t))v185[7])(v117, 0, 1);
    uint64_t v74 = v187;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
LABEL_64:
  uint64_t v109 = v74[16];
  long long v110 = (void *)((char *)a1 + v109);
  uint64_t v111 = (void *)((char *)a2 + v109);
  uint64_t v113 = *v111;
  uint64_t v112 = v111[1];
  *long long v110 = v113;
  v110[1] = v112;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F15FBC);
}

uint64_t sub_232F15FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 60);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F1615C);
}

uint64_t sub_232F1615C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 60);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_232F162E8()
{
  sub_232EA3854(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232EA3854(319, &qword_2687567F0, type metadata accessor for ModelsR4.DocumentReferenceContext, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReferenceContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    int v57 = (int *)type metadata accessor for Attachment();
    uint64_t v8 = v57[6];
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_23309AF80();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = v57[7];
    long long v17 = (char *)v4 + v16;
    int v18 = (char *)a2 + v16;
    *(_DWORD *)long long v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    uint64_t v19 = v57[8];
    uint64_t v20 = (uint64_t *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v57[9];
    uint64_t v24 = (uint64_t *)((char *)v4 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = v57[10];
    long long v28 = (char *)v4 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = type metadata accessor for FHIRDateTime();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      *long long v28 = *v29;
      *((void *)v28 + 1) = *((void *)v29 + 1);
      *((_DWORD *)v28 + 4) = *((_DWORD *)v29 + 4);
      uint64_t v34 = *((void *)v29 + 7);
      if (v34 == 1)
      {
        long long v35 = *(_OWORD *)(v29 + 40);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 40) = v35;
        *((void *)v28 + 7) = *((void *)v29 + 7);
      }
      else
      {
        v28[24] = v29[24];
        *(_WORD *)(v28 + 25) = *(_WORD *)(v29 + 25);
        *(_OWORD *)(v28 + 28) = *(_OWORD *)(v29 + 28);
        *((_DWORD *)v28 + 11) = *((_DWORD *)v29 + 11);
        *((void *)v28 + 6) = *((void *)v29 + 6);
        *((void *)v28 + 7) = v34;
        swift_bridgeObjectRetain();
      }
      uint64_t v36 = *(int *)(v30 + 28);
      size_t v37 = &v28[v36];
      long long v38 = &v29[v36];
      uint64_t v39 = sub_23309B300();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      uint64_t v42 = *(int *)(v30 + 32);
      uint64_t v43 = &v28[v42];
      uint64_t v44 = &v29[v42];
      uint64_t v45 = v44[1];
      *uint64_t v43 = *v44;
      v43[1] = v45;
      uint64_t v46 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56);
      swift_bridgeObjectRetain();
      v46(v28, 0, 1, v30);
    }
    uint64_t v47 = v57[11];
    uint64_t v48 = (uint64_t *)((char *)v4 + v47);
    uint64_t v49 = (uint64_t *)((char *)a2 + v47);
    uint64_t v50 = v49[1];
    void *v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = *(int *)(a3 + 20);
    int v52 = (char *)v4 + v51;
    uint64_t v53 = (char *)a2 + v51;
    uint64_t v54 = *(uint64_t *)((char *)a2 + v51 + 8);
    swift_bridgeObjectRetain();
    if (v54 == 1)
    {
      *(_OWORD *)int v52 = *(_OWORD *)v53;
      *((void *)v52 + 2) = *((void *)v53 + 2);
    }
    else
    {
      *(void *)int v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      *((void *)v52 + 2) = *((void *)v53 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for ModelsR4.DocumentReferenceContent(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Attachment();
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = sub_23309AF80();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(v4 + 40);
  uint64_t v9 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    if (*(void *)(v8 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = v8 + *(int *)(v9 + 28);
    uint64_t v11 = sub_23309B300();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 20) + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ModelsR4.DocumentReferenceContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v55 = (int *)type metadata accessor for Attachment();
  uint64_t v7 = v55[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_23309AF80();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = v55[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  uint64_t v17 = v55[8];
  int v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *int v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v55[9];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = v55[10];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for FHIRDateTime();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    *uint64_t v26 = *v27;
    *((void *)v26 + 1) = *((void *)v27 + 1);
    *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
    uint64_t v32 = *((void *)v27 + 7);
    if (v32 == 1)
    {
      long long v33 = *(_OWORD *)(v27 + 40);
      *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
      *(_OWORD *)(v26 + 40) = v33;
      *((void *)v26 + 7) = *((void *)v27 + 7);
    }
    else
    {
      v26[24] = v27[24];
      *(_WORD *)(v26 + 25) = *(_WORD *)(v27 + 25);
      *(_OWORD *)(v26 + 28) = *(_OWORD *)(v27 + 28);
      *((_DWORD *)v26 + 11) = *((_DWORD *)v27 + 11);
      *((void *)v26 + 6) = *((void *)v27 + 6);
      *((void *)v26 + 7) = v32;
      swift_bridgeObjectRetain();
    }
    uint64_t v34 = *(int *)(v28 + 28);
    long long v35 = &v26[v34];
    uint64_t v36 = &v27[v34];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v40 = *(int *)(v28 + 32);
    uint64_t v41 = &v26[v40];
    uint64_t v42 = &v27[v40];
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56);
    swift_bridgeObjectRetain();
    v44(v26, 0, 1, v28);
  }
  uint64_t v45 = v55[11];
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  uint64_t v48 = v47[1];
  *uint64_t v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = *(int *)(a3 + 20);
  uint64_t v50 = (char *)a1 + v49;
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = *(void *)((char *)a2 + v49 + 8);
  swift_bridgeObjectRetain();
  if (v52 == 1)
  {
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    *((void *)v50 + 2) = *((void *)v51 + 2);
  }
  else
  {
    *(void *)uint64_t v50 = *(void *)v51;
    *((void *)v50 + 1) = v52;
    *((void *)v50 + 2) = *((void *)v51 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for ModelsR4.DocumentReferenceContent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for Attachment();
  uint64_t v6 = v5[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_23309AF80();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = v5[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  int v18 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = v18;
  uint64_t v19 = v5[8];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = v5[9];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v5[10];
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for FHIRDateTime();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30((uint64_t)v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      sub_232EA3DC4(v26, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_13;
    }
    *(unsigned char *)uint64_t v26 = *v27;
    *(void *)(v26 + 8) = *((void *)v27 + 1);
    *(_WORD *)(v26 + 16) = *((_WORD *)v27 + 8);
    *(_WORD *)(v26 + 18) = *((_WORD *)v27 + 9);
    uint64_t v37 = (long long *)(v26 + 24);
    uint64_t v38 = (long long *)(v27 + 24);
    uint64_t v39 = *((void *)v27 + 7);
    if (*(void *)(v26 + 56) == 1)
    {
      if (v39 == 1)
      {
        long long v40 = *v38;
        long long v41 = *(_OWORD *)(v27 + 40);
        *(void *)(v26 + 56) = *((void *)v27 + 7);
        *uint64_t v37 = v40;
        *(_OWORD *)(v26 + 40) = v41;
      }
      else
      {
        *(unsigned char *)(v26 + 24) = v27[24];
        *(unsigned char *)(v26 + 25) = v27[25];
        *(unsigned char *)(v26 + 26) = v27[26];
        long long v54 = *(_OWORD *)(v27 + 28);
        *(_DWORD *)(v26 + 44) = *((_DWORD *)v27 + 11);
        *(_OWORD *)(v26 + 28) = v54;
        *(void *)(v26 + 48) = *((void *)v27 + 6);
        *(void *)(v26 + 56) = *((void *)v27 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v39 == 1)
    {
      sub_232F0434C(v26 + 24);
      uint64_t v52 = *((void *)v27 + 7);
      long long v53 = *(_OWORD *)(v27 + 40);
      *uint64_t v37 = *v38;
      *(_OWORD *)(v26 + 40) = v53;
      *(void *)(v26 + 56) = v52;
    }
    else
    {
      *(unsigned char *)(v26 + 24) = v27[24];
      *(unsigned char *)(v26 + 25) = v27[25];
      *(unsigned char *)(v26 + 26) = v27[26];
      *(_DWORD *)(v26 + 28) = *((_DWORD *)v27 + 7);
      *(_WORD *)(v26 + 32) = *((_WORD *)v27 + 16);
      *(_WORD *)(v26 + 34) = *((_WORD *)v27 + 17);
      *(_WORD *)(v26 + 36) = *((_WORD *)v27 + 18);
      *(_WORD *)(v26 + 38) = *((_WORD *)v27 + 19);
      *(_WORD *)(v26 + 40) = *((_WORD *)v27 + 20);
      *(_WORD *)(v26 + 42) = *((_WORD *)v27 + 21);
      *(_WORD *)(v26 + 44) = *((_WORD *)v27 + 22);
      *(_WORD *)(v26 + 46) = *((_WORD *)v27 + 23);
      *(void *)(v26 + 48) = *((void *)v27 + 6);
      *(void *)(v26 + 56) = *((void *)v27 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v55 = *(int *)(v28 + 28);
    int v56 = (void *)(v26 + v55);
    __dsta = &v27[v55];
    uint64_t v57 = sub_23309B300();
    uint64_t v78 = *(void *)(v57 - 8);
    uint64_t v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v78 + 48);
    uint64_t v79 = v56;
    LODWORD(v56) = v58(v56, 1, v57);
    int v59 = v58(__dsta, 1, v57);
    if (v56)
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v78 + 16))(v79, __dsta, v57);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v57);
        goto LABEL_35;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v61 = *(void *)(*(void *)(v60 - 8) + 64);
      uint64_t v62 = v79;
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(void *, char *, uint64_t))(v78 + 24))(v79, __dsta, v57);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v78 + 8))(v79, v57);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v61 = *(void *)(*(void *)(v63 - 8) + 64);
      uint64_t v62 = v79;
    }
    memcpy(v62, __dsta, v61);
LABEL_35:
    uint64_t v64 = *(int *)(v28 + 32);
    uint64_t v65 = (void *)(v26 + v64);
    uint64_t v66 = &v27[v64];
    *uint64_t v65 = *(void *)v66;
    v65[1] = *((void *)v66 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (v32)
  {
LABEL_13:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v26, v27, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_36;
  }
  *(unsigned char *)uint64_t v26 = *v27;
  uint64_t v33 = *((void *)v27 + 1);
  *(_DWORD *)(v26 + 16) = *((_DWORD *)v27 + 4);
  *(void *)(v26 + 8) = v33;
  if (*((void *)v27 + 7) == 1)
  {
    long long v34 = *(_OWORD *)(v27 + 24);
    long long v35 = *(_OWORD *)(v27 + 40);
    *(void *)(v26 + 56) = *((void *)v27 + 7);
    *(_OWORD *)(v26 + 24) = v34;
    *(_OWORD *)(v26 + 40) = v35;
  }
  else
  {
    *(unsigned char *)(v26 + 24) = v27[24];
    *(unsigned char *)(v26 + 25) = v27[25];
    *(unsigned char *)(v26 + 26) = v27[26];
    long long v42 = *(_OWORD *)(v27 + 28);
    *(_DWORD *)(v26 + 44) = *((_DWORD *)v27 + 11);
    *(_OWORD *)(v26 + 28) = v42;
    *(void *)(v26 + 48) = *((void *)v27 + 6);
    *(void *)(v26 + 56) = *((void *)v27 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v43 = *(int *)(v28 + 28);
  __dst = (void *)(v26 + v43);
  uint64_t v44 = &v27[v43];
  uint64_t v45 = sub_23309B300();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v46 + 16))(__dst, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
  }
  uint64_t v48 = *(int *)(v28 + 32);
  uint64_t v49 = (void *)(v26 + v48);
  uint64_t v50 = &v27[v48];
  *uint64_t v49 = *(void *)v50;
  v49[1] = *((void *)v50 + 1);
  uint64_t v51 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
  swift_bridgeObjectRetain();
  v51(v26, 0, 1, v28);
LABEL_36:
  uint64_t v67 = v5[11];
  uint64_t v68 = (void *)((char *)a1 + v67);
  uint64_t v69 = (void *)((char *)a2 + v67);
  *uint64_t v68 = *v69;
  v68[1] = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = *(int *)(a3 + 20);
  uint64_t v71 = (uint64_t)a1 + v70;
  int v72 = (char *)a2 + v70;
  uint64_t v73 = *(void *)((char *)a1 + v70 + 8);
  uint64_t v74 = *((void *)v72 + 1);
  if (v73 == 1)
  {
    if (v74 == 1)
    {
      long long v75 = *(_OWORD *)v72;
      *(void *)(v71 + 16) = *((void *)v72 + 2);
      *(_OWORD *)uint64_t v71 = v75;
    }
    else
    {
      *(void *)uint64_t v71 = *(void *)v72;
      *(void *)(v71 + 8) = *((void *)v72 + 1);
      *(void *)(v71 + 16) = *((void *)v72 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v74 == 1)
  {
    sub_232F042F8(v71);
    uint64_t v76 = *((void *)v72 + 2);
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
    *(void *)(v71 + 16) = v76;
  }
  else
  {
    *(void *)uint64_t v71 = *(void *)v72;
    *(void *)(v71 + 8) = *((void *)v72 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v71 + 16) = *((void *)v72 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.DocumentReferenceContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (int *)type metadata accessor for Attachment();
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = v7[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
  uint64_t v17 = v7[10];
  int v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for FHIRDateTime();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *int v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
    *((void *)v18 + 7) = *((void *)v19 + 7);
    uint64_t v23 = *(int *)(v20 + 28);
    uint64_t v32 = a3;
    __dst = &v18[v23];
    uint64_t v24 = &v19[v23];
    uint64_t v25 = sub_23309B300();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32))(__dst, v24, v25);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    a3 = v32;
    *(_OWORD *)&v18[*(int *)(v20 + 32)] = *(_OWORD *)&v19[*(int *)(v20 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)((char *)a1 + v7[11]) = *(_OWORD *)((char *)a2 + v7[11]);
  uint64_t v28 = *(int *)(a3 + 20);
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *((void *)v29 + 2) = *((void *)v30 + 2);
  return a1;
}

void *assignWithTake for ModelsR4.DocumentReferenceContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for Attachment();
  uint64_t v8 = v7[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_23309AF80();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = v7[7];
  int v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(_DWORD *)int v18 = *(_DWORD *)v19;
  v18[4] = v19[4];
  uint64_t v20 = v7[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v7[9];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = v7[10];
  uint64_t v31 = (uint64_t)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for FHIRDateTime();
  uint64_t v34 = *(void *)(v33 - 8);
  long long v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35((uint64_t)v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      sub_232EA3DC4(v31, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_13;
    }
    *(unsigned char *)uint64_t v31 = *v32;
    *(void *)(v31 + 8) = *((void *)v32 + 1);
    *(_DWORD *)(v31 + 16) = *((_DWORD *)v32 + 4);
    if (*(void *)(v31 + 56) != 1)
    {
      uint64_t v44 = *((void *)v32 + 7);
      if (v44 != 1)
      {
        *(unsigned char *)(v31 + 24) = v32[24];
        *(_WORD *)(v31 + 25) = *(_WORD *)(v32 + 25);
        *(_DWORD *)(v31 + 28) = *((_DWORD *)v32 + 7);
        *(_OWORD *)(v31 + 32) = *((_OWORD *)v32 + 2);
        *(void *)(v31 + 48) = *((void *)v32 + 6);
        *(void *)(v31 + 56) = v44;
        swift_bridgeObjectRelease();
LABEL_22:
        uint64_t v46 = *(int *)(v33 + 28);
        uint64_t v47 = (void *)(v31 + v46);
        __dsta = &v32[v46];
        uint64_t v48 = sub_23309B300();
        uint64_t v70 = *(void *)(v48 - 8);
        uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v70 + 48);
        uint64_t v71 = v47;
        LODWORD(v47) = v49(v47, 1, v48);
        int v50 = v49(__dsta, 1, v48);
        if (v47)
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 32))(v71, __dsta, v48);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v48);
            goto LABEL_30;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v52 = *(void *)(*(void *)(v51 - 8) + 64);
          long long v53 = v71;
        }
        else
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v70 + 40))(v71, __dsta, v48);
            goto LABEL_30;
          }
          (*(void (**)(void *, uint64_t))(v70 + 8))(v71, v48);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v52 = *(void *)(*(void *)(v54 - 8) + 64);
          long long v53 = v71;
        }
        memcpy(v53, __dsta, v52);
LABEL_30:
        uint64_t v55 = *(int *)(v33 + 32);
        int v56 = (void *)(v31 + v55);
        uint64_t v57 = &v32[v55];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        void *v56 = v59;
        v56[1] = v58;
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      sub_232F0434C(v31 + 24);
    }
    long long v45 = *(_OWORD *)(v32 + 40);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 40) = v45;
    *(void *)(v31 + 56) = *((void *)v32 + 7);
    goto LABEL_22;
  }
  if (v37)
  {
LABEL_13:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v31, v32, *(void *)(*(void *)(v43 - 8) + 64));
    goto LABEL_31;
  }
  *(unsigned char *)uint64_t v31 = *v32;
  *(void *)(v31 + 8) = *((void *)v32 + 1);
  *(_DWORD *)(v31 + 16) = *((_DWORD *)v32 + 4);
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
  *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
  *(void *)(v31 + 56) = *((void *)v32 + 7);
  uint64_t v38 = *(int *)(v33 + 28);
  __dst = (void *)(v31 + v38);
  uint64_t v39 = &v32[v38];
  uint64_t v40 = sub_23309B300();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v41 + 32))(__dst, v39, v40);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
  }
  *(_OWORD *)(v31 + *(int *)(v33 + 32)) = *(_OWORD *)&v32[*(int *)(v33 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_31:
  uint64_t v60 = v7[11];
  size_t v61 = (void *)((char *)a1 + v60);
  uint64_t v62 = (void *)((char *)a2 + v60);
  uint64_t v64 = *v62;
  uint64_t v63 = v62[1];
  *size_t v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = *(int *)(a3 + 20);
  uint64_t v66 = (void *)((char *)a1 + v65);
  uint64_t v67 = (void *)((char *)a2 + v65);
  if (*(void *)((char *)a1 + v65 + 8) != 1)
  {
    uint64_t v68 = v67[1];
    if (v68 != 1)
    {
      *uint64_t v66 = *v67;
      v66[1] = v68;
      swift_bridgeObjectRelease();
      v66[2] = v67[2];
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_232F042F8((uint64_t)v66);
  }
  *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  v66[2] = v67[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReferenceContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F18590);
}

uint64_t sub_232F18590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Attachment();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 - 1) & ~(((int)v10 - 1) >> 31);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReferenceContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F1866C);
}

uint64_t sub_232F1866C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Attachment();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 + 1);
  }
  return result;
}

uint64_t sub_232F1872C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F3191C(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReferenceContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Period();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for FHIRDateTime();
      uint64_t v49 = *(void *)(v13 - 8);
      int v14 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48);
      if (v14(v8, 1, v13))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        *uint64_t v7 = *v8;
        *((void *)v7 + 1) = *((void *)v8 + 1);
        *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
        uint64_t v16 = *((void *)v8 + 7);
        uint64_t v47 = v10;
        if (v16 == 1)
        {
          long long v17 = *(_OWORD *)(v8 + 40);
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
          *(_OWORD *)(v7 + 40) = v17;
          *((void *)v7 + 7) = *((void *)v8 + 7);
        }
        else
        {
          v7[24] = v8[24];
          *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
          *(_OWORD *)(v7 + 28) = *(_OWORD *)(v8 + 28);
          *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
          *((void *)v7 + 6) = *((void *)v8 + 6);
          *((void *)v7 + 7) = v16;
          swift_bridgeObjectRetain();
        }
        uint64_t v18 = *(int *)(v13 + 28);
        __dst = &v7[v18];
        uint64_t v19 = &v8[v18];
        uint64_t v20 = sub_23309B300();
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 16))(__dst, v19, v20);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
        }
        uint64_t v10 = v47;
        uint64_t v23 = *(int *)(v13 + 32);
        uint64_t v24 = &v7[v23];
        uint64_t v25 = &v8[v23];
        uint64_t v26 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v26;
        uint64_t v27 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v49 + 56);
        swift_bridgeObjectRetain();
        v27(v7, 0, 1, v13);
      }
      uint64_t v28 = *(int *)(v9 + 20);
      uint64_t v29 = &v7[v28];
      uint64_t v30 = &v8[v28];
      if (v14(v30, 1, v13))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        *uint64_t v29 = *v30;
        *((void *)v29 + 1) = *((void *)v30 + 1);
        *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
        uint64_t v32 = *((void *)v30 + 7);
        uint64_t v48 = v10;
        if (v32 == 1)
        {
          long long v33 = *(_OWORD *)(v30 + 40);
          *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
          *(_OWORD *)(v29 + 40) = v33;
          *((void *)v29 + 7) = *((void *)v30 + 7);
        }
        else
        {
          v29[24] = v30[24];
          *(_WORD *)(v29 + 25) = *(_WORD *)(v30 + 25);
          *(_OWORD *)(v29 + 28) = *(_OWORD *)(v30 + 28);
          *((_DWORD *)v29 + 11) = *((_DWORD *)v30 + 11);
          *((void *)v29 + 6) = *((void *)v30 + 6);
          *((void *)v29 + 7) = v32;
          swift_bridgeObjectRetain();
        }
        uint64_t v34 = *(int *)(v13 + 28);
        long long v35 = &v29[v34];
        int v36 = &v30[v34];
        uint64_t v37 = sub_23309B300();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v38 + 16))(v35, v36, v37);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        uint64_t v10 = v48;
        uint64_t v40 = *(int *)(v13 + 32);
        uint64_t v41 = &v29[v40];
        uint64_t v42 = &v30[v40];
        uint64_t v43 = v42[1];
        *uint64_t v41 = *v42;
        v41[1] = v43;
        uint64_t v44 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v49 + 56);
        swift_bridgeObjectRetain();
        v44(v29, 0, 1, v13);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for ModelsR4.DocumentReferenceContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Period();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for FHIRDateTime();
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(void *)(v4 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v9 = v4 + *(int *)(v7 + 28);
      uint64_t v10 = sub_23309B300();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v4 + *(int *)(v5 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!result)
    {
      if (*(void *)(v12 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = v12 + *(int *)(v7 + 28);
      uint64_t v14 = sub_23309B300();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *initializeWithCopy for ModelsR4.DocumentReferenceContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Period();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for FHIRDateTime();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void, void, void))(v12 + 48);
    if (v13(v6, 1, v11))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v5, v6, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      *uint64_t v5 = *v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      uint64_t v15 = *((void *)v6 + 7);
      uint64_t v47 = v12;
      uint64_t v44 = v13;
      if (v15 == 1)
      {
        long long v16 = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v5 + 40) = v16;
        *((void *)v5 + 7) = *((void *)v6 + 7);
      }
      else
      {
        v5[24] = v6[24];
        *(_WORD *)(v5 + 25) = *(_WORD *)(v6 + 25);
        *(_OWORD *)(v5 + 28) = *(_OWORD *)(v6 + 28);
        *((_DWORD *)v5 + 11) = *((_DWORD *)v6 + 11);
        *((void *)v5 + 6) = *((void *)v6 + 6);
        *((void *)v5 + 7) = v15;
        swift_bridgeObjectRetain();
      }
      uint64_t v17 = *(int *)(v11 + 28);
      __dst = &v5[v17];
      uint64_t v18 = &v6[v17];
      uint64_t v19 = sub_23309B300();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      uint64_t v22 = *(int *)(v11 + 32);
      uint64_t v23 = &v5[v22];
      uint64_t v24 = &v6[v22];
      uint64_t v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      uint64_t v12 = v47;
      uint64_t v26 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain();
      v26(v5, 0, 1, v11);
      uint64_t v13 = v44;
    }
    uint64_t v27 = *(int *)(v7 + 20);
    uint64_t v28 = &v5[v27];
    uint64_t v29 = &v6[v27];
    if (v13(v29, 1, v11))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      *uint64_t v28 = *v29;
      *((void *)v28 + 1) = *((void *)v29 + 1);
      *((_DWORD *)v28 + 4) = *((_DWORD *)v29 + 4);
      uint64_t v31 = *((void *)v29 + 7);
      uint64_t v48 = v12;
      if (v31 == 1)
      {
        long long v32 = *(_OWORD *)(v29 + 40);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 40) = v32;
        *((void *)v28 + 7) = *((void *)v29 + 7);
      }
      else
      {
        v28[24] = v29[24];
        *(_WORD *)(v28 + 25) = *(_WORD *)(v29 + 25);
        *(_OWORD *)(v28 + 28) = *(_OWORD *)(v29 + 28);
        *((_DWORD *)v28 + 11) = *((_DWORD *)v29 + 11);
        *((void *)v28 + 6) = *((void *)v29 + 6);
        *((void *)v28 + 7) = v31;
        swift_bridgeObjectRetain();
      }
      uint64_t v33 = *(int *)(v11 + 28);
      __dsta = &v28[v33];
      uint64_t v34 = &v29[v33];
      uint64_t v35 = sub_23309B300();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 16))(__dsta, v34, v35);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(__dsta, 0, 1, v35);
      }
      uint64_t v38 = *(int *)(v11 + 32);
      uint64_t v39 = &v28[v38];
      uint64_t v40 = &v29[v38];
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      uint64_t v42 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56);
      swift_bridgeObjectRetain();
      v42(v28, 0, 1, v11);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for ModelsR4.DocumentReferenceContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v22 = type metadata accessor for FHIRDateTime();
    uint64_t v23 = *(void **)(v22 - 8);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23[6];
    int v25 = v24(v7, 1, v22);
    int v26 = v24((uint64_t)v8, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        *(unsigned char *)uint64_t v7 = *v8;
        uint64_t v27 = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
        *(void *)(v7 + 8) = v27;
        __src = v23;
        if (*((void *)v8 + 7) == 1)
        {
          long long v28 = *(_OWORD *)(v8 + 24);
          long long v29 = *(_OWORD *)(v8 + 40);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(_OWORD *)(v7 + 24) = v28;
          *(_OWORD *)(v7 + 40) = v29;
        }
        else
        {
          *(unsigned char *)(v7 + 24) = v8[24];
          *(unsigned char *)(v7 + 25) = v8[25];
          *(unsigned char *)(v7 + 26) = v8[26];
          long long v67 = *(_OWORD *)(v8 + 28);
          *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
          *(_OWORD *)(v7 + 28) = v67;
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v68 = *(int *)(v22 + 28);
        __dstb = (void *)(v7 + v68);
        uint64_t v69 = &v8[v68];
        uint64_t v70 = sub_23309B300();
        uint64_t v71 = *(void *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstb, v69, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v71 + 16))(__dstb, v69, v70);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(__dstb, 0, 1, v70);
        }
        uint64_t v73 = *(int *)(v22 + 32);
        uint64_t v74 = (void *)(v7 + v73);
        long long v75 = &v8[v73];
        void *v74 = *(void *)v75;
        v74[1] = *((void *)v75 + 1);
        uint64_t v23 = __src;
        uint64_t v76 = (void (*)(uint64_t, void, uint64_t, uint64_t))__src[7];
        swift_bridgeObjectRetain();
        v76(v7, 0, 1, v22);
LABEL_55:
        uint64_t v92 = *(int *)(v9 + 20);
        uint64_t v93 = v7 + v92;
        uint64_t v94 = &v8[v92];
        int v95 = v24(v93, 1, v22);
        int v96 = v24((uint64_t)v94, 1, v22);
        if (v95)
        {
          if (!v96)
          {
            *(unsigned char *)uint64_t v93 = *v94;
            uint64_t v97 = *((void *)v94 + 1);
            *(_DWORD *)(v93 + 16) = *((_DWORD *)v94 + 4);
            *(void *)(v93 + 8) = v97;
            long long v98 = v23;
            if (*((void *)v94 + 7) == 1)
            {
              long long v99 = *(_OWORD *)(v94 + 24);
              long long v100 = *(_OWORD *)(v94 + 40);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              *(_OWORD *)(v93 + 24) = v99;
              *(_OWORD *)(v93 + 40) = v100;
            }
            else
            {
              *(unsigned char *)(v93 + 24) = v94[24];
              *(unsigned char *)(v93 + 25) = v94[25];
              *(unsigned char *)(v93 + 26) = v94[26];
              long long v107 = *(_OWORD *)(v94 + 28);
              *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
              *(_OWORD *)(v93 + 28) = v107;
              *(void *)(v93 + 48) = *((void *)v94 + 6);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v108 = *(int *)(v22 + 28);
            uint64_t v109 = (void *)(v93 + v108);
            long long v110 = &v94[v108];
            uint64_t v111 = sub_23309B300();
            uint64_t v112 = *(void *)(v111 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v112 + 16))(v109, v110, v111);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
            }
            uint64_t v114 = *(int *)(v22 + 32);
            uint64_t v115 = (void *)(v93 + v114);
            uint64_t v116 = &v94[v114];
            *uint64_t v115 = *(void *)v116;
            v115[1] = *((void *)v116 + 1);
            uint64_t v117 = (void (*)(uint64_t, void, uint64_t, uint64_t))v98[7];
            swift_bridgeObjectRetain();
            v117(v93, 0, 1, v22);
            return a1;
          }
          goto LABEL_61;
        }
        if (v96)
        {
          sub_232EA3DC4(v93, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_61:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v19 = *(void *)(*(void *)(v101 - 8) + 64);
          uint64_t v20 = (void *)v93;
          uint64_t v21 = v94;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v93 = *v94;
        *(void *)(v93 + 8) = *((void *)v94 + 1);
        *(_WORD *)(v93 + 16) = *((_WORD *)v94 + 8);
        *(_WORD *)(v93 + 18) = *((_WORD *)v94 + 9);
        uint64_t v102 = (long long *)(v93 + 24);
        uint64_t v103 = (long long *)(v94 + 24);
        uint64_t v104 = *((void *)v94 + 7);
        if (*(void *)(v93 + 56) == 1)
        {
          if (v104 == 1)
          {
            long long v105 = *v103;
            long long v106 = *(_OWORD *)(v94 + 40);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            *uint64_t v102 = v105;
            *(_OWORD *)(v93 + 40) = v106;
          }
          else
          {
            *(unsigned char *)(v93 + 24) = v94[24];
            *(unsigned char *)(v93 + 25) = v94[25];
            *(unsigned char *)(v93 + 26) = v94[26];
            long long v120 = *(_OWORD *)(v94 + 28);
            *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
            *(_OWORD *)(v93 + 28) = v120;
            *(void *)(v93 + 48) = *((void *)v94 + 6);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v104 == 1)
        {
          sub_232F0434C(v93 + 24);
          uint64_t v118 = *((void *)v94 + 7);
          long long v119 = *(_OWORD *)(v94 + 40);
          *uint64_t v102 = *v103;
          *(_OWORD *)(v93 + 40) = v119;
          *(void *)(v93 + 56) = v118;
        }
        else
        {
          *(unsigned char *)(v93 + 24) = v94[24];
          *(unsigned char *)(v93 + 25) = v94[25];
          *(unsigned char *)(v93 + 26) = v94[26];
          *(_DWORD *)(v93 + 28) = *((_DWORD *)v94 + 7);
          *(_WORD *)(v93 + 32) = *((_WORD *)v94 + 16);
          *(_WORD *)(v93 + 34) = *((_WORD *)v94 + 17);
          *(_WORD *)(v93 + 36) = *((_WORD *)v94 + 18);
          *(_WORD *)(v93 + 38) = *((_WORD *)v94 + 19);
          *(_WORD *)(v93 + 40) = *((_WORD *)v94 + 20);
          *(_WORD *)(v93 + 42) = *((_WORD *)v94 + 21);
          *(_WORD *)(v93 + 44) = *((_WORD *)v94 + 22);
          *(_WORD *)(v93 + 46) = *((_WORD *)v94 + 23);
          *(void *)(v93 + 48) = *((void *)v94 + 6);
          *(void *)(v93 + 56) = *((void *)v94 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v121 = *(int *)(v22 + 28);
        uint64_t v122 = (void *)(v93 + v121);
        uint64_t v123 = &v94[v121];
        uint64_t v124 = sub_23309B300();
        uint64_t v125 = *(void *)(v124 - 8);
        long long v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
        __dstd = v122;
        LODWORD(v122) = v126(v122, 1, v124);
        int v127 = v126(v123, 1, v124);
        if (v122)
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 16))(__dstd, v123, v124);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(__dstd, 0, 1, v124);
            goto LABEL_82;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        else
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 24))(__dstd, v123, v124);
            goto LABEL_82;
          }
          (*(void (**)(void *, uint64_t))(v125 + 8))(__dstd, v124);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        memcpy(v130, v123, v129);
LABEL_82:
        uint64_t v132 = *(int *)(v22 + 32);
        size_t v133 = (void *)(v93 + v132);
        uint64_t v134 = &v94[v132];
        void *v133 = *(void *)v134;
        v133[1] = *((void *)v134 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
LABEL_17:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
      goto LABEL_55;
    }
    if (v26)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    __srcc = v23;
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    uint64_t v62 = (long long *)(v7 + 24);
    uint64_t v63 = (long long *)(v8 + 24);
    uint64_t v64 = *((void *)v8 + 7);
    if (*(void *)(v7 + 56) == 1)
    {
      if (v64 == 1)
      {
        long long v65 = *v63;
        long long v66 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        long long *v62 = v65;
        *(_OWORD *)(v7 + 40) = v66;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v79 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v79;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v77 = *((void *)v8 + 7);
      long long v78 = *(_OWORD *)(v8 + 40);
      long long *v62 = *v63;
      *(_OWORD *)(v7 + 40) = v78;
      *(void *)(v7 + 56) = v77;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v136 = v22;
    uint64_t v80 = *(int *)(v22 + 28);
    uint64_t v81 = (void *)(v7 + v80);
    __dstc = &v8[v80];
    uint64_t v82 = sub_23309B300();
    uint64_t v135 = *(void *)(v82 - 8);
    uint64_t v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v135 + 48);
    uint64_t v138 = v81;
    LODWORD(v81) = v83(v81, 1, v82);
    int v84 = v83(__dstc, 1, v82);
    if (v81)
    {
      uint64_t v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v138, __dstc, v82);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v135 + 56))(v138, 0, 1, v82);
        goto LABEL_54;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v85 - 8) + 64);
      uint64_t v87 = v138;
    }
    else
    {
      uint64_t v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 24))(v138, __dstc, v82);
        goto LABEL_54;
      }
      (*(void (**)(void *, uint64_t))(v135 + 8))(v138, v82);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v88 - 8) + 64);
      uint64_t v87 = v138;
    }
    memcpy(v87, __dstc, v86);
LABEL_54:
    uint64_t v22 = v136;
    uint64_t v89 = *(int *)(v136 + 32);
    uint64_t v90 = (void *)(v7 + v89);
    uint64_t v91 = &v8[v89];
    *uint64_t v90 = *(void *)v91;
    v90[1] = *((void *)v91 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  if (v13)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = (void *)v7;
    uint64_t v21 = v8;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void **)(v14 - 8);
  long long v16 = (unsigned int (*)(void, void, void))v15[6];
  if (v16(v8, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v7 = *v8;
    uint64_t v30 = *((void *)v8 + 1);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
    *(void *)(v7 + 8) = v30;
    __srca = v15;
    uint64_t v137 = v16;
    if (*((void *)v8 + 7) == 1)
    {
      long long v31 = *(_OWORD *)(v8 + 24);
      long long v32 = *(_OWORD *)(v8 + 40);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v31;
      *(_OWORD *)(v7 + 40) = v32;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      long long v34 = *(_OWORD *)(v8 + 28);
      *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v34;
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = *(int *)(v14 + 28);
    __dst = (void *)(v7 + v35);
    uint64_t v36 = &v8[v35];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    uint64_t v40 = *(int *)(v14 + 32);
    uint64_t v41 = (void *)(v7 + v40);
    uint64_t v42 = &v8[v40];
    *uint64_t v41 = *(void *)v42;
    v41[1] = *((void *)v42 + 1);
    uint64_t v15 = __srca;
    uint64_t v43 = (void (*)(uint64_t, void, uint64_t, uint64_t))__srca[7];
    swift_bridgeObjectRetain();
    v43(v7, 0, 1, v14);
    long long v16 = v137;
  }
  uint64_t v44 = *(int *)(v9 + 20);
  long long v45 = (char *)(v7 + v44);
  uint64_t v46 = &v8[v44];
  if (v16(v46, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    char *v45 = *v46;
    uint64_t v48 = *((void *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    *((void *)v45 + 1) = v48;
    __srcb = v15;
    if (*((void *)v46 + 7) == 1)
    {
      long long v49 = *(_OWORD *)(v46 + 24);
      long long v50 = *(_OWORD *)(v46 + 40);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      *(_OWORD *)(v45 + 24) = v49;
      *(_OWORD *)(v45 + 40) = v50;
    }
    else
    {
      v45[24] = v46[24];
      v45[25] = v46[25];
      v45[26] = v46[26];
      long long v51 = *(_OWORD *)(v46 + 28);
      *((_DWORD *)v45 + 11) = *((_DWORD *)v46 + 11);
      *(_OWORD *)(v45 + 28) = v51;
      *((void *)v45 + 6) = *((void *)v46 + 6);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = *(int *)(v14 + 28);
    __dsta = &v45[v52];
    long long v53 = &v46[v52];
    uint64_t v54 = sub_23309B300();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dsta, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
    }
    uint64_t v57 = *(int *)(v14 + 32);
    uint64_t v58 = &v45[v57];
    uint64_t v59 = &v46[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    *((void *)v58 + 1) = *((void *)v59 + 1);
    uint64_t v60 = (void (*)(char *, void, uint64_t, uint64_t))__srcb[7];
    swift_bridgeObjectRetain();
    v60(v45, 0, 1, v14);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

void *initializeWithTake for ModelsR4.DocumentReferenceContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Period();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for FHIRDateTime();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = *(unsigned int (**)(void, void, void))(v11 + 48);
    if (v12(v6, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v5, v6, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      long long v29 = v12;
      *uint64_t v5 = *v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *((void *)v5 + 7) = *((void *)v6 + 7);
      uint64_t v14 = *(int *)(v10 + 28);
      __dst = &v5[v14];
      uint64_t v32 = v11;
      uint64_t v15 = &v6[v14];
      uint64_t v16 = sub_23309B300();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v5[*(int *)(v10 + 32)] = *(_OWORD *)&v6[*(int *)(v10 + 32)];
      uint64_t v11 = v32;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v32 + 56))(v5, 0, 1, v10);
      int v12 = v29;
    }
    uint64_t v19 = *(int *)(v7 + 20);
    uint64_t v20 = &v5[v19];
    uint64_t v21 = &v6[v19];
    if (v12(v21, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *uint64_t v20 = *v21;
      *((void *)v20 + 1) = *((void *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((void *)v20 + 7) = *((void *)v21 + 7);
      uint64_t v23 = *(int *)(v10 + 28);
      __dsta = &v20[v23];
      uint64_t v33 = v11;
      uint64_t v24 = &v21[v23];
      uint64_t v25 = sub_23309B300();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32))(__dsta, v24, v25);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v33 + 56))(v20, 0, 1, v10);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for ModelsR4.DocumentReferenceContext(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v22 = type metadata accessor for FHIRDateTime();
    uint64_t v23 = *(void **)(v22 - 8);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23[6];
    int v25 = v24(v7, 1, v22);
    int v26 = v24((uint64_t)v8, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        *(unsigned char *)uint64_t v7 = *v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
        *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        uint64_t v27 = *(int *)(v22 + 28);
        __dst = (void *)(v7 + v27);
        uint64_t v103 = (void (**)(uint64_t, void, uint64_t, uint64_t))v23;
        long long v28 = &v8[v27];
        uint64_t v29 = sub_23309B300();
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v30 + 32))(__dst, v28, v29);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
        }
        *(_OWORD *)(v7 + *(int *)(v22 + 32)) = *(_OWORD *)&v8[*(int *)(v22 + 32)];
        uint64_t v23 = v103;
        v103[7](v7, 0, 1, v22);
LABEL_44:
        uint64_t v63 = *(int *)(v9 + 20);
        uint64_t v64 = v7 + v63;
        long long v65 = &v8[v63];
        int v66 = v24(v64, 1, v22);
        int v67 = v24((uint64_t)v65, 1, v22);
        if (v66)
        {
          if (!v67)
          {
            uint64_t v68 = v23;
            *(unsigned char *)uint64_t v64 = *v65;
            *(void *)(v64 + 8) = *((void *)v65 + 1);
            *(_DWORD *)(v64 + 16) = *((_DWORD *)v65 + 4);
            *(_OWORD *)(v64 + 24) = *(_OWORD *)(v65 + 24);
            *(_OWORD *)(v64 + 40) = *(_OWORD *)(v65 + 40);
            *(void *)(v64 + 56) = *((void *)v65 + 7);
            uint64_t v69 = *(int *)(v22 + 28);
            uint64_t v70 = (void *)(v64 + v69);
            uint64_t v71 = &v65[v69];
            uint64_t v72 = sub_23309B300();
            uint64_t v73 = *(void *)(v72 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v73 + 32))(v70, v71, v72);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
            }
            *(_OWORD *)(v64 + *(int *)(v22 + 32)) = *(_OWORD *)&v65[*(int *)(v22 + 32)];
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v68[7])(v64, 0, 1, v22);
            return a1;
          }
          goto LABEL_50;
        }
        if (v67)
        {
          sub_232EA3DC4(v64, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_50:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v19 = *(void *)(*(void *)(v75 - 8) + 64);
          uint64_t v20 = (void *)v64;
          uint64_t v21 = v65;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v64 = *v65;
        *(void *)(v64 + 8) = *((void *)v65 + 1);
        *(_DWORD *)(v64 + 16) = *((_DWORD *)v65 + 4);
        if (*(void *)(v64 + 56) != 1)
        {
          uint64_t v76 = *((void *)v65 + 7);
          if (v76 != 1)
          {
            *(unsigned char *)(v64 + 24) = v65[24];
            *(_WORD *)(v64 + 25) = *(_WORD *)(v65 + 25);
            *(_DWORD *)(v64 + 28) = *((_DWORD *)v65 + 7);
            *(_OWORD *)(v64 + 32) = *((_OWORD *)v65 + 2);
            *(void *)(v64 + 48) = *((void *)v65 + 6);
            *(void *)(v64 + 56) = v76;
            swift_bridgeObjectRelease();
LABEL_58:
            uint64_t v78 = *(int *)(v22 + 28);
            long long v79 = (void *)(v64 + v78);
            uint64_t v80 = &v65[v78];
            uint64_t v81 = sub_23309B300();
            uint64_t v82 = *(void *)(v81 - 8);
            uint64_t v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 48);
            __dstd = v79;
            LODWORD(v79) = v83(v79, 1, v81);
            int v84 = v83(v80, 1, v81);
            if (v79)
            {
              if (!v84)
              {
                (*(void (**)(void *, char *, uint64_t))(v82 + 32))(__dstd, v80, v81);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(__dstd, 0, 1, v81);
                goto LABEL_66;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v86 = *(void *)(*(void *)(v85 - 8) + 64);
              uint64_t v87 = __dstd;
            }
            else
            {
              if (!v84)
              {
                (*(void (**)(void *, char *, uint64_t))(v82 + 40))(__dstd, v80, v81);
                goto LABEL_66;
              }
              (*(void (**)(void *, uint64_t))(v82 + 8))(__dstd, v81);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v86 = *(void *)(*(void *)(v88 - 8) + 64);
              uint64_t v87 = __dstd;
            }
            memcpy(v87, v80, v86);
LABEL_66:
            uint64_t v89 = *(int *)(v22 + 32);
            uint64_t v90 = (void *)(v64 + v89);
            uint64_t v91 = &v65[v89];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            *uint64_t v90 = v93;
            v90[1] = v92;
            swift_bridgeObjectRelease();
            return a1;
          }
          sub_232F0434C(v64 + 24);
        }
        long long v77 = *(_OWORD *)(v65 + 40);
        *(_OWORD *)(v64 + 24) = *(_OWORD *)(v65 + 24);
        *(_OWORD *)(v64 + 40) = v77;
        *(void *)(v64 + 56) = *((void *)v65 + 7);
        goto LABEL_58;
      }
LABEL_17:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v7, v8, *(void *)(*(void *)(v37 - 8) + 64));
      goto LABEL_44;
    }
    if (v26)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    long long v106 = v23;
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
    if (*(void *)(v7 + 56) != 1)
    {
      uint64_t v48 = *((void *)v8 + 7);
      if (v48 != 1)
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
        *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
        *(_OWORD *)(v7 + 32) = *((_OWORD *)v8 + 2);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = v48;
        swift_bridgeObjectRelease();
LABEL_35:
        uint64_t v50 = *(int *)(v22 + 28);
        __src = &v8[v50];
        __dstc = (void *)(v7 + v50);
        uint64_t v51 = sub_23309B300();
        uint64_t v94 = *(void *)(v51 - 8);
        uint64_t v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v94 + 48);
        int v96 = v52(__dstc, 1, v51);
        int v53 = v52(__src, 1, v51);
        if (v96)
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v94 + 32))(__dstc, __src, v51);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(__dstc, 0, 1, v51);
            goto LABEL_43;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v55 = *(void *)(*(void *)(v54 - 8) + 64);
          uint64_t v56 = __dstc;
        }
        else
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v94 + 40))(__dstc, __src, v51);
            goto LABEL_43;
          }
          (*(void (**)(void *, uint64_t))(v94 + 8))(__dstc, v51);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v55 = *(void *)(*(void *)(v57 - 8) + 64);
          uint64_t v56 = __dstc;
        }
        memcpy(v56, __src, v55);
LABEL_43:
        uint64_t v23 = v106;
        uint64_t v58 = *(int *)(v22 + 32);
        uint64_t v59 = (void *)(v7 + v58);
        uint64_t v60 = &v8[v58];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        *uint64_t v59 = v62;
        v59[1] = v61;
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      sub_232F0434C(v7 + 24);
    }
    long long v49 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = v49;
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    goto LABEL_35;
  }
  if (v13)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = (void *)v7;
    uint64_t v21 = v8;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = (unsigned int (*)(void, void, void))v15[6];
  if (v16(v8, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    int v95 = v16;
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(void *)(v7 + 56) = *((void *)v8 + 7);
    uint64_t v32 = *(int *)(v14 + 28);
    __dsta = (void *)(v7 + v32);
    uint64_t v104 = (void (**)(uint64_t, void, uint64_t, uint64_t))v15;
    uint64_t v33 = &v8[v32];
    uint64_t v34 = sub_23309B300();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v35 + 32))(__dsta, v33, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(__dsta, 0, 1, v34);
    }
    *(_OWORD *)(v7 + *(int *)(v14 + 32)) = *(_OWORD *)&v8[*(int *)(v14 + 32)];
    uint64_t v15 = v104;
    v104[7](v7, 0, 1, v14);
    uint64_t v16 = v95;
  }
  uint64_t v38 = *(int *)(v9 + 20);
  uint64_t v39 = (char *)(v7 + v38);
  uint64_t v40 = &v8[v38];
  if (v16(v40, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    *uint64_t v39 = *v40;
    *((void *)v39 + 1) = *((void *)v40 + 1);
    *((_DWORD *)v39 + 4) = *((_DWORD *)v40 + 4);
    *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 + 24);
    *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
    *((void *)v39 + 7) = *((void *)v40 + 7);
    uint64_t v42 = *(int *)(v14 + 28);
    __dstb = &v39[v42];
    long long v105 = (void (**)(char *, void, uint64_t, uint64_t))v15;
    uint64_t v43 = &v40[v42];
    uint64_t v44 = sub_23309B300();
    uint64_t v45 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dstb, v43, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(__dstb, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(__dstb, 0, 1, v44);
    }
    *(_OWORD *)&v39[*(int *)(v14 + 32)] = *(_OWORD *)&v40[*(int *)(v14 + 32)];
    v105[7](v39, 0, 1, v14);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReferenceContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F1BDE8);
}

uint64_t sub_232F1BDE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReferenceContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F1BEE8);
}

void *sub_232F1BEE8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    void *result = a2;
  }
  else
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_232F1BFC0()
{
  sub_232EA3854(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsR4.Immunization(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1) {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = a2[5];
    uint64_t v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v12 = a2[7];
    a1[6] = v11;
    a1[7] = v12;
    *(void *)((char *)a1 + 61) = *(void *)((char *)a2 + 61);
    uint64_t v13 = a3[10];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    a1[9] = a2[9];
    uint64_t v16 = type metadata accessor for FHIRDateTime();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(void, void, void))(v17 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
      uint64_t v21 = *((void *)v15 + 7);
      uint64_t v109 = v17;
      uint64_t v104 = v18;
      if (v21 == 1)
      {
        long long v22 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
        *(_OWORD *)(v14 + 40) = v22;
        *((void *)v14 + 7) = *((void *)v15 + 7);
      }
      else
      {
        v14[24] = v15[24];
        *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v15 + 28);
        *((_DWORD *)v14 + 11) = *((_DWORD *)v15 + 11);
        *((void *)v14 + 6) = *((void *)v15 + 6);
        *((void *)v14 + 7) = v21;
        swift_bridgeObjectRetain();
      }
      uint64_t v23 = *(int *)(v16 + 28);
      __dst = &v14[v23];
      uint64_t v24 = &v15[v23];
      uint64_t v25 = sub_23309B300();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 16))(__dst, v24, v25);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      uint64_t v28 = *(int *)(v16 + 32);
      uint64_t v29 = &v14[v28];
      uint64_t v30 = &v15[v28];
      uint64_t v31 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v31;
      uint64_t v17 = v109;
      uint64_t v32 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56);
      swift_bridgeObjectRetain();
      v32(v14, 0, 1, v16);
      uint64_t v18 = (unsigned int (*)(void, void, void))v104;
    }
    uint64_t v33 = a3[12];
    *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    uint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    swift_bridgeObjectRetain();
    if (v18(v35, 1, v16))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      *uint64_t v34 = *v35;
      *((void *)v34 + 1) = *((void *)v35 + 1);
      *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
      uint64_t v37 = *((void *)v35 + 7);
      uint64_t v110 = v17;
      if (v37 == 1)
      {
        long long v38 = *(_OWORD *)(v35 + 40);
        *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
        *(_OWORD *)(v34 + 40) = v38;
        *((void *)v34 + 7) = *((void *)v35 + 7);
      }
      else
      {
        v34[24] = v35[24];
        *(_WORD *)(v34 + 25) = *(_WORD *)(v35 + 25);
        *(_OWORD *)(v34 + 28) = *(_OWORD *)(v35 + 28);
        *((_DWORD *)v34 + 11) = *((_DWORD *)v35 + 11);
        *((void *)v34 + 6) = *((void *)v35 + 6);
        *((void *)v34 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      uint64_t v39 = *(int *)(v16 + 28);
      uint64_t v40 = &v34[v39];
      uint64_t v41 = &v35[v39];
      uint64_t v42 = sub_23309B300();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v45 = *(int *)(v16 + 32);
      uint64_t v46 = &v34[v45];
      uint64_t v47 = &v35[v45];
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      long long v49 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v110 + 56);
      swift_bridgeObjectRetain();
      v49(v34, 0, 1, v16);
    }
    uint64_t v50 = a3[13];
    uint64_t v51 = a3[14];
    uint64_t v52 = (void *)((char *)a1 + v50);
    int v53 = (void *)((char *)a2 + v50);
    uint64_t v54 = v53[1];
    void *v52 = *v53;
    v52[1] = v54;
    v52[2] = v53[2];
    size_t v55 = (void *)((char *)a1 + v51);
    uint64_t v56 = (void *)((char *)a2 + v51);
    uint64_t v57 = type metadata accessor for Reference();
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v58 + 48);
    uint64_t v60 = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v56, 1, v60))
    {
      sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      memcpy(v55, v56, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v103 = v58;
      long long v105 = v55;
      uint64_t v62 = v56[1];
      *size_t v55 = *v56;
      v55[1] = v62;
      uint64_t v63 = v56[3];
      v55[2] = v56[2];
      void v55[3] = v63;
      uint64_t v64 = *(int *)(v60 + 24);
      __dsta = (void *)((char *)v55 + v64);
      uint64_t v111 = v60;
      long long v65 = (void *)((char *)v56 + v64);
      uint64_t v66 = type metadata accessor for Identifier();
      uint64_t v67 = *(void *)(v66 - 8);
      uint64_t v68 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v67 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v68(v65, 1, v66))
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v65, *(void *)(*(void *)(v69 - 8) + 64));
        uint64_t v70 = v103;
        uint64_t v71 = v105;
      }
      else
      {
        uint64_t v101 = v67;
        uint64_t v72 = v65[1];
        void *__dsta = *v65;
        __dsta[1] = v72;
        uint64_t v73 = v65[3];
        swift_bridgeObjectRetain();
        uint64_t v102 = v65;
        if (v73 == 1)
        {
          *((_OWORD *)__dsta + 1) = *((_OWORD *)v65 + 1);
          __dsta[4] = v65[4];
        }
        else
        {
          __dsta[2] = v65[2];
          __dsta[3] = v73;
          __dsta[4] = v65[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v71 = v105;
        uint64_t v74 = *(int *)(v66 + 24);
        long long v106 = (char *)__dsta + v74;
        uint64_t v75 = (char *)v65 + v74;
        uint64_t v76 = sub_23309AF80();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v106, v75, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v106, v75, v76);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v106, 0, 1, v76);
        }
        uint64_t v70 = v103;
        uint64_t v79 = *(int *)(v66 + 28);
        uint64_t v80 = (void *)((char *)__dsta + v79);
        uint64_t v81 = (void *)((char *)v102 + v79);
        uint64_t v82 = v81[1];
        *uint64_t v80 = *v81;
        v80[1] = v82;
        uint64_t v83 = *(void (**)(void *, void, uint64_t, uint64_t))(v101 + 56);
        swift_bridgeObjectRetain();
        v83(__dsta, 0, 1, v66);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v111);
    }
    uint64_t v84 = a3[16];
    *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v85 = (void *)((char *)a1 + v84);
    size_t v86 = (void *)((char *)a2 + v84);
    uint64_t v87 = v86[1];
    *uint64_t v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = a3[18];
    *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    *((unsigned char *)a1 + v88) = *((unsigned char *)a2 + v88);
    uint64_t v89 = a3[19];
    uint64_t v90 = (char *)a1 + v89;
    uint64_t v91 = (char *)a2 + v89;
    uint64_t v92 = *(void *)((char *)a2 + v89);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v92 == 1)
    {
      long long v93 = *((_OWORD *)v91 + 1);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v93;
      *((_OWORD *)v90 + 2) = *((_OWORD *)v91 + 2);
      *((void *)v90 + 6) = *((void *)v91 + 6);
    }
    else
    {
      *(void *)uint64_t v90 = v92;
      uint64_t v94 = *((void *)v91 + 2);
      swift_bridgeObjectRetain();
      if (v94 == 1)
      {
        *(_OWORD *)(v90 + 8) = *(_OWORD *)(v91 + 8);
        *((void *)v90 + 3) = *((void *)v91 + 3);
      }
      else
      {
        *((void *)v90 + 1) = *((void *)v91 + 1);
        *((void *)v90 + 2) = v94;
        *((void *)v90 + 3) = *((void *)v91 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v95 = *((void *)v91 + 5);
      *((void *)v90 + 4) = *((void *)v91 + 4);
      *((void *)v90 + 5) = v95;
      *((void *)v90 + 6) = *((void *)v91 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v96 = a3[20];
    uint64_t v97 = (void *)((char *)a1 + v96);
    long long v98 = (void *)((char *)a2 + v96);
    uint64_t v99 = v98[1];
    *uint64_t v97 = *v98;
    v97[1] = v99;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Immunization(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[12];
  if (!v6(v10, 1, v5))
  {
    if (*(void *)(v10 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = v10 + *(int *)(v5 + 28);
    uint64_t v12 = sub_23309B300();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + a2[14];
  uint64_t v15 = type metadata accessor for Reference();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v14 + *(int *)(v15 + 24);
    uint64_t v17 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v18 = v16 + *(int *)(v17 + 24);
      uint64_t v19 = sub_23309AF80();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)(a1 + a2[19]);
  if (*v21 != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[2] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.Immunization(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v11 = a2[7];
  a1[6] = v10;
  a1[7] = v11;
  *(void *)((char *)a1 + 61) = *(void *)((char *)a2 + 61);
  uint64_t v12 = a3[10];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  a1[9] = a2[9];
  uint64_t v15 = type metadata accessor for FHIRDateTime();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(void, void, void))(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    *((void *)v13 + 1) = *((void *)v14 + 1);
    *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
    uint64_t v19 = *((void *)v14 + 7);
    uint64_t v107 = v16;
    uint64_t v103 = v17;
    if (v19 == 1)
    {
      long long v20 = *(_OWORD *)(v14 + 40);
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v13 + 40) = v20;
      *((void *)v13 + 7) = *((void *)v14 + 7);
    }
    else
    {
      v13[24] = v14[24];
      *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
      *(_OWORD *)(v13 + 28) = *(_OWORD *)(v14 + 28);
      *((_DWORD *)v13 + 11) = *((_DWORD *)v14 + 11);
      *((void *)v13 + 6) = *((void *)v14 + 6);
      *((void *)v13 + 7) = v19;
      swift_bridgeObjectRetain();
    }
    uint64_t v21 = *(int *)(v15 + 28);
    __dst = &v13[v21];
    long long v22 = &v14[v21];
    uint64_t v23 = sub_23309B300();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v24 + 16))(__dst, v22, v23);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    uint64_t v26 = *(int *)(v15 + 32);
    uint64_t v27 = &v13[v26];
    uint64_t v28 = &v14[v26];
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v16 = v107;
    uint64_t v30 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v107 + 56);
    swift_bridgeObjectRetain();
    v30(v13, 0, 1, v15);
    uint64_t v17 = (unsigned int (*)(void, void, void))v103;
  }
  uint64_t v31 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  swift_bridgeObjectRetain();
  if (v17(v33, 1, v15))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    *uint64_t v32 = *v33;
    *((void *)v32 + 1) = *((void *)v33 + 1);
    *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
    uint64_t v35 = *((void *)v33 + 7);
    uint64_t v108 = v16;
    if (v35 == 1)
    {
      long long v36 = *(_OWORD *)(v33 + 40);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 40) = v36;
      *((void *)v32 + 7) = *((void *)v33 + 7);
    }
    else
    {
      v32[24] = v33[24];
      *(_WORD *)(v32 + 25) = *(_WORD *)(v33 + 25);
      *(_OWORD *)(v32 + 28) = *(_OWORD *)(v33 + 28);
      *((_DWORD *)v32 + 11) = *((_DWORD *)v33 + 11);
      *((void *)v32 + 6) = *((void *)v33 + 6);
      *((void *)v32 + 7) = v35;
      swift_bridgeObjectRetain();
    }
    uint64_t v37 = *(int *)(v15 + 28);
    long long v38 = &v32[v37];
    uint64_t v39 = &v33[v37];
    uint64_t v40 = sub_23309B300();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = *(int *)(v15 + 32);
    uint64_t v44 = &v32[v43];
    uint64_t v45 = &v33[v43];
    uint64_t v46 = v45[1];
    void *v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v108 + 56);
    swift_bridgeObjectRetain();
    v47(v32, 0, 1, v15);
  }
  uint64_t v48 = a3[13];
  uint64_t v49 = a3[14];
  uint64_t v50 = (void *)((char *)a1 + v48);
  uint64_t v51 = (void *)((char *)a2 + v48);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  v50[2] = v51[2];
  int v53 = (void *)((char *)a1 + v49);
  uint64_t v54 = (void *)((char *)a2 + v49);
  uint64_t v55 = type metadata accessor for Reference();
  uint64_t v56 = *(void **)(v55 - 8);
  uint64_t v57 = (unsigned int (*)(void *, uint64_t, uint64_t))v56[6];
  uint64_t v58 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v57(v54, 1, v58))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v53, v54, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    __dsta = v56;
    uint64_t v109 = v58;
    uint64_t v60 = v54[1];
    *int v53 = *v54;
    v53[1] = v60;
    uint64_t v61 = v54[3];
    v53[2] = v54[2];
    v53[3] = v61;
    uint64_t v62 = *(int *)(v58 + 24);
    __src = v53;
    uint64_t v104 = (void *)((char *)v53 + v62);
    uint64_t v63 = (void *)((char *)v54 + v62);
    uint64_t v64 = type metadata accessor for Identifier();
    uint64_t v65 = *(void *)(v64 - 8);
    uint64_t v66 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v65 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v66(v63, 1, v64))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v104, v63, *(void *)(*(void *)(v67 - 8) + 64));
      uint64_t v68 = (void (**)(void *, void, uint64_t, void))__dsta;
      uint64_t v69 = __src;
    }
    else
    {
      uint64_t v101 = v65;
      uint64_t v70 = v63[1];
      *uint64_t v104 = *v63;
      v104[1] = v70;
      uint64_t v71 = v63[3];
      swift_bridgeObjectRetain();
      uint64_t v72 = v63;
      if (v71 == 1)
      {
        *((_OWORD *)v104 + 1) = *((_OWORD *)v63 + 1);
        v104[4] = v63[4];
      }
      else
      {
        v104[2] = v63[2];
        v104[3] = v71;
        v104[4] = v63[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v69 = __src;
      uint64_t v73 = *(int *)(v64 + 24);
      long long v100 = (char *)v104 + v73;
      uint64_t v74 = (char *)v63 + v73;
      uint64_t v75 = sub_23309AF80();
      uint64_t v76 = *(void *)(v75 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v100, v74, *(void *)(*(void *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v100, v74, v75);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v100, 0, 1, v75);
      }
      uint64_t v68 = (void (**)(void *, void, uint64_t, void))__dsta;
      uint64_t v78 = *(int *)(v64 + 28);
      uint64_t v79 = (void *)((char *)v104 + v78);
      uint64_t v80 = (void *)((char *)v72 + v78);
      uint64_t v81 = v80[1];
      *uint64_t v79 = *v80;
      v79[1] = v81;
      uint64_t v82 = *(void (**)(void *, void, uint64_t, uint64_t))(v101 + 56);
      swift_bridgeObjectRetain();
      v82(v104, 0, 1, v64);
    }
    v68[7](v69, 0, 1, v109);
  }
  uint64_t v83 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  uint64_t v84 = (void *)((char *)a1 + v83);
  uint64_t v85 = (void *)((char *)a2 + v83);
  uint64_t v86 = v85[1];
  *uint64_t v84 = *v85;
  v84[1] = v86;
  uint64_t v87 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  *((unsigned char *)a1 + v87) = *((unsigned char *)a2 + v87);
  uint64_t v88 = a3[19];
  uint64_t v89 = (char *)a1 + v88;
  uint64_t v90 = (char *)a2 + v88;
  uint64_t v91 = *(void *)((char *)a2 + v88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91 == 1)
  {
    long long v92 = *((_OWORD *)v90 + 1);
    *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
    *((_OWORD *)v89 + 1) = v92;
    *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
    *((void *)v89 + 6) = *((void *)v90 + 6);
  }
  else
  {
    *(void *)uint64_t v89 = v91;
    uint64_t v93 = *((void *)v90 + 2);
    swift_bridgeObjectRetain();
    if (v93 == 1)
    {
      *(_OWORD *)(v89 + 8) = *(_OWORD *)(v90 + 8);
      *((void *)v89 + 3) = *((void *)v90 + 3);
    }
    else
    {
      *((void *)v89 + 1) = *((void *)v90 + 1);
      *((void *)v89 + 2) = v93;
      *((void *)v89 + 3) = *((void *)v90 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v94 = *((void *)v90 + 5);
    *((void *)v89 + 4) = *((void *)v90 + 4);
    *((void *)v89 + 5) = v94;
    *((void *)v89 + 6) = *((void *)v90 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v95 = a3[20];
  uint64_t v96 = (void *)((char *)a1 + v95);
  uint64_t v97 = (void *)((char *)a2 + v95);
  uint64_t v98 = v97[1];
  *uint64_t v96 = *v97;
  v96[1] = v98;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.Immunization(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = v4[2];
  a1[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + 4;
  uint64_t v7 = v4[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(a1 + 4));
      uint64_t v8 = v4[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = v4[5];
  a1[6] = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = v4[7];
  *(void *)((char *)a1 + 61) = *(void *)((char *)v4 + 61);
  a1[7] = v9;
  a1[9] = v4[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[10];
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)v4 + v10;
  uint64_t v13 = type metadata accessor for FHIRDateTime();
  uint64_t v14 = *(void **)(v13 - 8);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14[6];
  int v16 = v15(v11, 1, v13);
  int v17 = v15((uint64_t)v12, 1, v13);
  uint64_t v210 = a3;
  if (!v16)
  {
    if (v17)
    {
      sub_232EA3DC4(v11, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_15;
    }
    uint64_t v205 = v14;
    *(unsigned char *)uint64_t v11 = *v12;
    *(void *)(v11 + 8) = *((void *)v12 + 1);
    *(_WORD *)(v11 + 16) = *((_WORD *)v12 + 8);
    *(_WORD *)(v11 + 18) = *((_WORD *)v12 + 9);
    long long v22 = (long long *)(v11 + 24);
    uint64_t v23 = (long long *)(v12 + 24);
    uint64_t v24 = *((void *)v12 + 7);
    if (*(void *)(v11 + 56) == 1)
    {
      if (v24 == 1)
      {
        long long v25 = *v23;
        long long v26 = *(_OWORD *)(v12 + 40);
        *(void *)(v11 + 56) = *((void *)v12 + 7);
        *long long v22 = v25;
        *(_OWORD *)(v11 + 40) = v26;
      }
      else
      {
        *(unsigned char *)(v11 + 24) = v12[24];
        *(unsigned char *)(v11 + 25) = v12[25];
        *(unsigned char *)(v11 + 26) = v12[26];
        long long v39 = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v11 + 44) = *((_DWORD *)v12 + 11);
        *(_OWORD *)(v11 + 28) = v39;
        *(void *)(v11 + 48) = *((void *)v12 + 6);
        *(void *)(v11 + 56) = *((void *)v12 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v24 == 1)
    {
      sub_232F0434C(v11 + 24);
      uint64_t v37 = *((void *)v12 + 7);
      long long v38 = *(_OWORD *)(v12 + 40);
      *long long v22 = *v23;
      *(_OWORD *)(v11 + 40) = v38;
      *(void *)(v11 + 56) = v37;
    }
    else
    {
      *(unsigned char *)(v11 + 24) = v12[24];
      *(unsigned char *)(v11 + 25) = v12[25];
      *(unsigned char *)(v11 + 26) = v12[26];
      *(_DWORD *)(v11 + 28) = *((_DWORD *)v12 + 7);
      *(_WORD *)(v11 + 32) = *((_WORD *)v12 + 16);
      *(_WORD *)(v11 + 34) = *((_WORD *)v12 + 17);
      *(_WORD *)(v11 + 36) = *((_WORD *)v12 + 18);
      *(_WORD *)(v11 + 38) = *((_WORD *)v12 + 19);
      *(_WORD *)(v11 + 40) = *((_WORD *)v12 + 20);
      *(_WORD *)(v11 + 42) = *((_WORD *)v12 + 21);
      *(_WORD *)(v11 + 44) = *((_WORD *)v12 + 22);
      *(_WORD *)(v11 + 46) = *((_WORD *)v12 + 23);
      *(void *)(v11 + 48) = *((void *)v12 + 6);
      *(void *)(v11 + 56) = *((void *)v12 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v195 = v13;
    uint64_t v40 = *(int *)(v13 + 28);
    uint64_t v41 = (void *)(v11 + v40);
    __dsta = &v12[v40];
    uint64_t v42 = sub_23309B300();
    uint64_t v193 = *(void *)(v42 - 8);
    uint64_t v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v193 + 48);
    uint64_t v197 = v41;
    LODWORD(v41) = v43(v41, 1, v42);
    int v44 = v43(__dsta, 1, v42);
    if (v41)
    {
      if (!v44)
      {
        (*(void (**)(void *, char *, uint64_t))(v193 + 16))(v197, __dsta, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v193 + 56))(v197, 0, 1, v42);
        goto LABEL_36;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v46 = *(void *)(*(void *)(v45 - 8) + 64);
      uint64_t v47 = v197;
    }
    else
    {
      if (!v44)
      {
        (*(void (**)(void *, char *, uint64_t))(v193 + 24))(v197, __dsta, v42);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v193 + 8))(v197, v42);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v46 = *(void *)(*(void *)(v48 - 8) + 64);
      uint64_t v47 = v197;
    }
    memcpy(v47, __dsta, v46);
LABEL_36:
    uint64_t v14 = v205;
    a3 = v210;
    uint64_t v13 = v195;
    uint64_t v49 = *(int *)(v195 + 32);
    uint64_t v50 = (void *)(v11 + v49);
    uint64_t v51 = &v12[v49];
    *uint64_t v50 = *(void *)v51;
    v50[1] = *((void *)v51 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v17)
  {
LABEL_15:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v11, v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_37;
  }
  *(unsigned char *)uint64_t v11 = *v12;
  uint64_t v18 = *((void *)v12 + 1);
  *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
  *(void *)(v11 + 8) = v18;
  unsigned int v204 = v14;
  if (*((void *)v12 + 7) == 1)
  {
    long long v19 = *(_OWORD *)(v12 + 24);
    long long v20 = *(_OWORD *)(v12 + 40);
    *(void *)(v11 + 56) = *((void *)v12 + 7);
    *(_OWORD *)(v11 + 24) = v19;
    *(_OWORD *)(v11 + 40) = v20;
  }
  else
  {
    *(unsigned char *)(v11 + 24) = v12[24];
    *(unsigned char *)(v11 + 25) = v12[25];
    *(unsigned char *)(v11 + 26) = v12[26];
    long long v27 = *(_OWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 44) = *((_DWORD *)v12 + 11);
    *(_OWORD *)(v11 + 28) = v27;
    *(void *)(v11 + 48) = *((void *)v12 + 6);
    *(void *)(v11 + 56) = *((void *)v12 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = *(int *)(v13 + 28);
  __dst = (void *)(v11 + v28);
  uint64_t v29 = &v12[v28];
  uint64_t v30 = sub_23309B300();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  uint64_t v14 = v204;
  a3 = v210;
  uint64_t v33 = *(int *)(v13 + 32);
  uint64_t v34 = (void *)(v11 + v33);
  uint64_t v35 = &v12[v33];
  *uint64_t v34 = *(void *)v35;
  v34[1] = *((void *)v35 + 1);
  long long v36 = (void (*)(uint64_t, void, uint64_t, uint64_t))v204[7];
  swift_bridgeObjectRetain();
  v36(v11, 0, 1, v13);
LABEL_37:
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)v4 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[12];
  uint64_t v53 = (uint64_t)a1 + v52;
  uint64_t v54 = (char *)v4 + v52;
  int v55 = v15((uint64_t)a1 + v52, 1, v13);
  int v56 = v15((uint64_t)v54, 1, v13);
  if (!v55)
  {
    if (v56)
    {
      sub_232EA3DC4(v53, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_43;
    }
    *(unsigned char *)uint64_t v53 = *v54;
    *(void *)(v53 + 8) = *((void *)v54 + 1);
    *(_WORD *)(v53 + 16) = *((_WORD *)v54 + 8);
    *(_WORD *)(v53 + 18) = *((_WORD *)v54 + 9);
    uint64_t v62 = (long long *)(v53 + 24);
    uint64_t v63 = (long long *)(v54 + 24);
    uint64_t v64 = *((void *)v54 + 7);
    if (*(void *)(v53 + 56) == 1)
    {
      if (v64 == 1)
      {
        long long v65 = *v63;
        long long v66 = *(_OWORD *)(v54 + 40);
        *(void *)(v53 + 56) = *((void *)v54 + 7);
        long long *v62 = v65;
        *(_OWORD *)(v53 + 40) = v66;
      }
      else
      {
        *(unsigned char *)(v53 + 24) = v54[24];
        *(unsigned char *)(v53 + 25) = v54[25];
        *(unsigned char *)(v53 + 26) = v54[26];
        long long v80 = *(_OWORD *)(v54 + 28);
        *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
        *(_OWORD *)(v53 + 28) = v80;
        *(void *)(v53 + 48) = *((void *)v54 + 6);
        *(void *)(v53 + 56) = *((void *)v54 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_232F0434C(v53 + 24);
      uint64_t v78 = *((void *)v54 + 7);
      long long v79 = *(_OWORD *)(v54 + 40);
      long long *v62 = *v63;
      *(_OWORD *)(v53 + 40) = v79;
      *(void *)(v53 + 56) = v78;
    }
    else
    {
      *(unsigned char *)(v53 + 24) = v54[24];
      *(unsigned char *)(v53 + 25) = v54[25];
      *(unsigned char *)(v53 + 26) = v54[26];
      *(_DWORD *)(v53 + 28) = *((_DWORD *)v54 + 7);
      *(_WORD *)(v53 + 32) = *((_WORD *)v54 + 16);
      *(_WORD *)(v53 + 34) = *((_WORD *)v54 + 17);
      *(_WORD *)(v53 + 36) = *((_WORD *)v54 + 18);
      *(_WORD *)(v53 + 38) = *((_WORD *)v54 + 19);
      *(_WORD *)(v53 + 40) = *((_WORD *)v54 + 20);
      *(_WORD *)(v53 + 42) = *((_WORD *)v54 + 21);
      *(_WORD *)(v53 + 44) = *((_WORD *)v54 + 22);
      *(_WORD *)(v53 + 46) = *((_WORD *)v54 + 23);
      *(void *)(v53 + 48) = *((void *)v54 + 6);
      *(void *)(v53 + 56) = *((void *)v54 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v81 = *(int *)(v13 + 28);
    uint64_t v82 = (void *)(v53 + v81);
    uint64_t v83 = &v54[v81];
    uint64_t v84 = sub_23309B300();
    uint64_t v198 = *(void *)(v84 - 8);
    uint64_t v85 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v198 + 48);
    long long v207 = v82;
    LODWORD(v82) = v85(v82, 1, v84);
    int v86 = v85(v83, 1, v84);
    if (v82)
    {
      if (!v86)
      {
        (*(void (**)(void *, char *, uint64_t))(v198 + 16))(v207, v83, v84);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v198 + 56))(v207, 0, 1, v84);
        goto LABEL_64;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v88 = *(void *)(*(void *)(v87 - 8) + 64);
      uint64_t v89 = v207;
    }
    else
    {
      if (!v86)
      {
        (*(void (**)(void *, char *, uint64_t))(v198 + 24))(v207, v83, v84);
        goto LABEL_64;
      }
      (*(void (**)(void *, uint64_t))(v198 + 8))(v207, v84);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v88 = *(void *)(*(void *)(v90 - 8) + 64);
      uint64_t v89 = v207;
    }
    memcpy(v89, v83, v88);
LABEL_64:
    a3 = v210;
    uint64_t v91 = *(int *)(v13 + 32);
    long long v92 = (void *)(v53 + v91);
    uint64_t v93 = &v54[v91];
    *long long v92 = *(void *)v93;
    v92[1] = *((void *)v93 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  if (v56)
  {
LABEL_43:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v53, v54, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_65;
  }
  *(unsigned char *)uint64_t v53 = *v54;
  uint64_t v57 = *((void *)v54 + 1);
  *(_DWORD *)(v53 + 16) = *((_DWORD *)v54 + 4);
  *(void *)(v53 + 8) = v57;
  long long v206 = v14;
  uint64_t v58 = a3;
  if (*((void *)v54 + 7) == 1)
  {
    long long v59 = *(_OWORD *)(v54 + 24);
    long long v60 = *(_OWORD *)(v54 + 40);
    *(void *)(v53 + 56) = *((void *)v54 + 7);
    *(_OWORD *)(v53 + 24) = v59;
    *(_OWORD *)(v53 + 40) = v60;
  }
  else
  {
    *(unsigned char *)(v53 + 24) = v54[24];
    *(unsigned char *)(v53 + 25) = v54[25];
    *(unsigned char *)(v53 + 26) = v54[26];
    long long v67 = *(_OWORD *)(v54 + 28);
    *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
    *(_OWORD *)(v53 + 28) = v67;
    *(void *)(v53 + 48) = *((void *)v54 + 6);
    *(void *)(v53 + 56) = *((void *)v54 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v68 = *(int *)(v13 + 28);
  uint64_t v69 = (void *)(v53 + v68);
  uint64_t v70 = &v54[v68];
  uint64_t v71 = sub_23309B300();
  uint64_t v72 = *(void *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  a3 = v58;
  uint64_t v74 = *(int *)(v13 + 32);
  uint64_t v75 = (void *)(v53 + v74);
  uint64_t v76 = &v54[v74];
  *uint64_t v75 = *(void *)v76;
  v75[1] = *((void *)v76 + 1);
  uint64_t v77 = (void (*)(uint64_t, void, uint64_t, uint64_t))v206[7];
  swift_bridgeObjectRetain();
  v77(v53, 0, 1, v13);
LABEL_65:
  uint64_t v94 = a3[13];
  uint64_t v95 = (void *)((char *)a1 + v94);
  uint64_t v96 = (char *)v4 + v94;
  *uint64_t v95 = *(void *)((char *)v4 + v94);
  v95[1] = *(void *)((char *)v4 + v94 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v95[2] = *((void *)v96 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = a3[14];
  uint64_t v98 = (void *)((char *)a1 + v97);
  uint64_t v99 = (void *)((char *)v4 + v97);
  uint64_t v100 = type metadata accessor for Reference();
  uint64_t v101 = *(void **)(v100 - 8);
  uint64_t v102 = (uint64_t (*)(void *, uint64_t, uint64_t))v101[6];
  int v103 = v102(v98, 1, v100);
  int v104 = v102(v99, 1, v100);
  if (!v103)
  {
    if (v104)
    {
      sub_232EA3DC4((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_71;
    }
    *uint64_t v98 = *v99;
    v98[1] = v99[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v98[2] = v99[2];
    v98[3] = v99[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v114 = *(int *)(v100 + 24);
    uint64_t v115 = (void *)((char *)v98 + v114);
    uint64_t v116 = (void *)((char *)v99 + v114);
    uint64_t v117 = type metadata accessor for Identifier();
    uint64_t v118 = *(void *)(v117 - 8);
    long long v119 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v118 + 48);
    int v120 = v119(v115, 1, v117);
    int v121 = v119(v116, 1, v117);
    if (v120)
    {
      uint64_t v111 = v210;
      if (!v121)
      {
        *uint64_t v115 = *v116;
        v115[1] = v116[1];
        uint64_t v122 = v116[3];
        swift_bridgeObjectRetain();
        if (v122 == 1)
        {
          long long v123 = *((_OWORD *)v116 + 1);
          v115[4] = v116[4];
          *((_OWORD *)v115 + 1) = v123;
        }
        else
        {
          v115[2] = v116[2];
          v115[3] = v116[3];
          v115[4] = v116[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v169 = *(int *)(v117 + 24);
        uint64_t v170 = (char *)v115 + v169;
        uint64_t v171 = (char *)v116 + v169;
        uint64_t v172 = sub_23309AF80();
        uint64_t v173 = *(void *)(v172 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v170, v171, *(void *)(*(void *)(v174 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v173 + 16))(v170, v171, v172);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
        }
        uint64_t v175 = *(int *)(v117 + 28);
        uint64_t v176 = (void *)((char *)v115 + v175);
        uint64_t v177 = (void *)((char *)v116 + v175);
        void *v176 = *v177;
        v176[1] = v177[1];
        uint64_t v178 = *(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56);
        swift_bridgeObjectRetain();
        v178(v115, 0, 1, v117);
        goto LABEL_72;
      }
LABEL_82:
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v115, v116, *(void *)(*(void *)(v128 - 8) + 64));
      goto LABEL_88;
    }
    uint64_t v111 = v210;
    if (v121)
    {
      sub_232EA3DC4((uint64_t)v115, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_82;
    }
    *uint64_t v115 = *v116;
    v115[1] = v116[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v165 = (long long *)(v115 + 2);
    uint64_t v166 = (long long *)(v116 + 2);
    uint64_t v167 = v116[3];
    if (v115[3] == 1)
    {
      if (v167 == 1)
      {
        long long v168 = *v166;
        v115[4] = v116[4];
        long long *v165 = v168;
      }
      else
      {
        v115[2] = v116[2];
        v115[3] = v116[3];
        v115[4] = v116[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v167 == 1)
    {
      sub_232F042F8((uint64_t)(v115 + 2));
      uint64_t v179 = v116[4];
      long long *v165 = *v166;
      v115[4] = v179;
    }
    else
    {
      v115[2] = v116[2];
      v115[3] = v116[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v115[4] = v116[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v180 = *(int *)(v117 + 24);
    uint64_t v181 = (char *)v115 + v180;
    uint64_t v182 = (char *)v116 + v180;
    uint64_t v183 = sub_23309AF80();
    uint64_t v200 = *(void *)(v183 - 8);
    uint64_t v184 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v200 + 48);
    uint64_t v209 = v181;
    LODWORD(v181) = v184(v181, 1, v183);
    int v185 = v184(v182, 1, v183);
    if (v181)
    {
      uint64_t v111 = v210;
      if (!v185)
      {
        (*(void (**)(void *, char *, uint64_t))(v200 + 16))(v209, v182, v183);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v200 + 56))(v209, 0, 1, v183);
        goto LABEL_126;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v187 = *(void *)(*(void *)(v186 - 8) + 64);
      uint64_t v188 = v209;
    }
    else
    {
      uint64_t v111 = v210;
      if (!v185)
      {
        (*(void (**)(void *, char *, uint64_t))(v200 + 24))(v209, v182, v183);
        goto LABEL_126;
      }
      (*(void (**)(void *, uint64_t))(v200 + 8))(v209, v183);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v187 = *(void *)(*(void *)(v189 - 8) + 64);
      uint64_t v188 = v209;
    }
    memcpy(v188, v182, v187);
LABEL_126:
    uint64_t v190 = *(int *)(v117 + 28);
    uint64_t v191 = (void *)((char *)v115 + v190);
    int v192 = (void *)((char *)v116 + v190);
    *uint64_t v191 = *v192;
    v191[1] = v192[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  if (v104)
  {
LABEL_71:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v98, v99, *(void *)(*(void *)(v113 - 8) + 64));
LABEL_72:
    uint64_t v111 = v210;
    goto LABEL_88;
  }
  uint64_t v199 = v4;
  __dstb = v101;
  *uint64_t v98 = *v99;
  v98[1] = v99[1];
  v98[2] = v99[2];
  v98[3] = v99[3];
  uint64_t v105 = *(int *)(v100 + 24);
  uint64_t v208 = (void *)((char *)v98 + v105);
  long long v106 = (void *)((char *)v99 + v105);
  uint64_t v107 = type metadata accessor for Identifier();
  uint64_t v108 = *(void *)(v107 - 8);
  uint64_t v109 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v108 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v109(v106, 1, v107))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v208, v106, *(void *)(*(void *)(v110 - 8) + 64));
    uint64_t v111 = v210;
    uint64_t v112 = (void (**)(void *, void, uint64_t, uint64_t))__dstb;
  }
  else
  {
    uint64_t v194 = v108;
    uint64_t v196 = v107;
    *uint64_t v208 = *v106;
    v208[1] = v106[1];
    uint64_t v124 = v106[3];
    swift_bridgeObjectRetain();
    BOOL v125 = v124 == 1;
    long long v126 = v106;
    if (v125)
    {
      long long v127 = *((_OWORD *)v106 + 1);
      v208[4] = v106[4];
      *((_OWORD *)v208 + 1) = v127;
    }
    else
    {
      v208[2] = v106[2];
      v208[3] = v106[3];
      v208[4] = v106[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v111 = v210;
    uint64_t v129 = *(int *)(v107 + 24);
    uint64_t v130 = (char *)v208 + v129;
    uint64_t v131 = (char *)v106 + v129;
    uint64_t v132 = sub_23309AF80();
    uint64_t v133 = *(void *)(v132 - 8);
    uint64_t v134 = v131;
    int v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132);
    uint64_t v112 = (void (**)(void *, void, uint64_t, uint64_t))__dstb;
    if (v135)
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v130, v134, *(void *)(*(void *)(v136 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, v134, v132);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
    }
    uint64_t v137 = *(int *)(v196 + 28);
    uint64_t v138 = (void *)((char *)v208 + v137);
    uint64_t v139 = (void *)((char *)v126 + v137);
    *uint64_t v138 = *v139;
    v138[1] = v139[1];
    uint64_t v140 = *(void (**)(void *, void, uint64_t, uint64_t))(v194 + 56);
    swift_bridgeObjectRetain();
    v140(v208, 0, 1, v196);
  }
  uint64_t v4 = v199;
  v112[7](v98, 0, 1, v100);
LABEL_88:
  *((unsigned char *)a1 + v111[15]) = *((unsigned char *)v4 + v111[15]);
  uint64_t v141 = v111[16];
  uint64_t v142 = (void *)((char *)a1 + v141);
  uint64_t v143 = (void *)((char *)v4 + v141);
  *uint64_t v142 = *v143;
  v142[1] = v143[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v111[17]) = *(void *)((char *)v4 + v111[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v111[18]) = *((unsigned char *)v4 + v111[18]);
  uint64_t v144 = v111[19];
  unsigned int v145 = (char *)a1 + v144;
  uint64_t v146 = (char *)v4 + v144;
  uint64_t v147 = *(void *)((char *)v4 + v144);
  if (*(void *)((char *)a1 + v144) == 1)
  {
    if (v147 == 1)
    {
      long long v148 = *(_OWORD *)v146;
      long long v149 = *((_OWORD *)v146 + 1);
      long long v150 = *((_OWORD *)v146 + 2);
      *((void *)v145 + 6) = *((void *)v146 + 6);
      *((_OWORD *)v145 + 1) = v149;
      *((_OWORD *)v145 + 2) = v150;
      *(_OWORD *)unsigned int v145 = v148;
    }
    else
    {
      *(void *)unsigned int v145 = v147;
      uint64_t v154 = *((void *)v146 + 2);
      swift_bridgeObjectRetain();
      if (v154 == 1)
      {
        long long v155 = *(_OWORD *)(v146 + 8);
        *((void *)v145 + 3) = *((void *)v146 + 3);
        *(_OWORD *)(v145 + 8) = v155;
      }
      else
      {
        *((void *)v145 + 1) = *((void *)v146 + 1);
        *((void *)v145 + 2) = *((void *)v146 + 2);
        *((void *)v145 + 3) = *((void *)v146 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *((void *)v145 + 4) = *((void *)v146 + 4);
      *((void *)v145 + 5) = *((void *)v146 + 5);
      *((void *)v145 + 6) = *((void *)v146 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v147 == 1)
  {
    sub_232F1F428((uint64_t)a1 + v144);
    long long v152 = *((_OWORD *)v146 + 1);
    long long v151 = *((_OWORD *)v146 + 2);
    long long v153 = *(_OWORD *)v146;
    *((void *)v145 + 6) = *((void *)v146 + 6);
    *((_OWORD *)v145 + 1) = v152;
    *((_OWORD *)v145 + 2) = v151;
    *(_OWORD *)unsigned int v145 = v153;
  }
  else
  {
    *(void *)unsigned int v145 = v147;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    long long v156 = (long long *)(v145 + 8);
    long long v157 = (long long *)(v146 + 8);
    uint64_t v158 = *((void *)v146 + 2);
    if (*((void *)v145 + 2) == 1)
    {
      if (v158 == 1)
      {
        long long v159 = *v157;
        *((void *)v145 + 3) = *((void *)v146 + 3);
        *long long v156 = v159;
      }
      else
      {
        *((void *)v145 + 1) = *((void *)v146 + 1);
        *((void *)v145 + 2) = *((void *)v146 + 2);
        *((void *)v145 + 3) = *((void *)v146 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v158 == 1)
    {
      sub_232F042F8((uint64_t)(v145 + 8));
      uint64_t v160 = *((void *)v146 + 3);
      *long long v156 = *v157;
      *((void *)v145 + 3) = v160;
    }
    else
    {
      *((void *)v145 + 1) = *((void *)v146 + 1);
      *((void *)v145 + 2) = *((void *)v146 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v145 + 3) = *((void *)v146 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    *((void *)v145 + 4) = *((void *)v146 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v145 + 5) = *((void *)v146 + 5);
    *((void *)v145 + 6) = *((void *)v146 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v161 = v111[20];
  uint64_t v162 = (void *)((char *)a1 + v161);
  size_t v163 = (void *)((char *)v4 + v161);
  *uint64_t v162 = *v163;
  v162[1] = v163[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_232F1F428(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for ModelsR4.Immunization(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 61) = *(void *)(a2 + 61);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = a3[10];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *(_OWORD *)(a1 + 40) = v7;
  uint64_t v11 = type metadata accessor for FHIRDateTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(void, void, void))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v13;
    *uint64_t v9 = *v10;
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    uint64_t v15 = *(int *)(v11 + 28);
    uint64_t v64 = &v9[v15];
    uint64_t v66 = v12;
    int v16 = &v10[v15];
    uint64_t v17 = sub_23309B300();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v64, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v64, v16, v17);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v64, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    uint64_t v12 = v66;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v66 + 56))(v9, 0, 1, v11);
    uint64_t v13 = v61;
  }
  uint64_t v20 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v21 = (unsigned char *)(a1 + v20);
  long long v22 = (unsigned char *)(a2 + v20);
  if (v13(a2 + v20, 1, v11))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v67 = v12;
    *uint64_t v21 = *v22;
    *((void *)v21 + 1) = *((void *)v22 + 1);
    *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((void *)v21 + 7) = *((void *)v22 + 7);
    uint64_t v24 = *(int *)(v11 + 28);
    long long v25 = &v21[v24];
    long long v26 = &v22[v24];
    uint64_t v27 = sub_23309B300();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v67 + 56))(v21, 0, 1, v11);
  }
  uint64_t v30 = a3[13];
  uint64_t v31 = a3[14];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(void *)(v32 + 16) = *(void *)(v33 + 16);
  uint64_t v34 = (_OWORD *)(a1 + v31);
  uint64_t v35 = (_OWORD *)(a2 + v31);
  uint64_t v36 = type metadata accessor for Reference();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    long long v39 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v39;
    uint64_t v40 = *(int *)(v36 + 24);
    uint64_t v41 = (_OWORD *)((char *)v34 + v40);
    uint64_t v42 = (_OWORD *)((char *)v35 + v40);
    uint64_t v43 = type metadata accessor for Identifier();
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      uint64_t v63 = v44;
      long long v46 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v46;
      *((void *)v41 + 4) = *((void *)v42 + 4);
      uint64_t v47 = *(int *)(v43 + 24);
      uint64_t v68 = (char *)v41 + v47;
      uint64_t v48 = (char *)v42 + v47;
      uint64_t v49 = sub_23309AF80();
      uint64_t v62 = *(void *)(v49 - 8);
      long long v65 = v48;
      uint64_t v50 = v48;
      uint64_t v51 = v49;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v50, 1, v49))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v68, v65, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v62 + 32))(v68, v65, v51);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v68, 0, 1, v51);
      }
      *(_OWORD *)((char *)v41 + *(int *)(v43 + 28)) = *(_OWORD *)((char *)v42 + *(int *)(v43 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v63 + 56))(v41, 0, 1, v43);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v53 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v53) = *(_OWORD *)(a2 + v53);
  uint64_t v54 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v54) = *(unsigned char *)(a2 + v54);
  uint64_t v55 = a3[19];
  uint64_t v56 = a3[20];
  uint64_t v57 = a1 + v55;
  uint64_t v58 = a2 + v55;
  long long v59 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
  *(_OWORD *)(v57 + 16) = v59;
  *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
  *(void *)(v57 + 48) = *(void *)(v58 + 48);
  *(_OWORD *)(a1 + v56) = *(_OWORD *)(a2 + v56);
  return a1;
}

void *assignWithTake for ModelsR4.Immunization(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + 4;
  uint64_t v9 = a2[4];
  if (a1[4] == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4((uint64_t)(a1 + 4));
    uint64_t v9 = a2[4];
LABEL_4:
    *uint64_t v8 = v9;
    goto LABEL_6;
  }
  *uint64_t v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  *(void *)((char *)a1 + 61) = *(void *)((char *)a2 + 61);
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[10];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16((uint64_t)v13, 1, v14);
  uint64_t v164 = a3;
  if (!v17)
  {
    if (v18)
    {
      sub_232EA3DC4(v12, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_12;
    }
    *(unsigned char *)uint64_t v12 = *v13;
    *(void *)(v12 + 8) = *((void *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    if (*(void *)(v12 + 56) != 1)
    {
      uint64_t v25 = *((void *)v13 + 7);
      if (v25 != 1)
      {
        *(unsigned char *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(void *)(v12 + 48) = *((void *)v13 + 6);
        *(void *)(v12 + 56) = v25;
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t v27 = *(int *)(v14 + 28);
        __src = &v13[v27];
        __dsta = (void *)(v12 + v27);
        uint64_t v28 = sub_23309B300();
        uint64_t v150 = *(void *)(v28 - 8);
        uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v150 + 48);
        int v151 = v29(__dsta, 1, v28);
        int v30 = v29(__src, 1, v28);
        if (v151)
        {
          if (!v30)
          {
            (*(void (**)(void *, char *, uint64_t))(v150 + 32))(__dsta, __src, v28);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v150 + 56))(__dsta, 0, 1, v28);
            goto LABEL_28;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v32 = *(void *)(*(void *)(v31 - 8) + 64);
          uint64_t v33 = __dsta;
        }
        else
        {
          if (!v30)
          {
            (*(void (**)(void *, char *, uint64_t))(v150 + 40))(__dsta, __src, v28);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v150 + 8))(__dsta, v28);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v32 = *(void *)(*(void *)(v34 - 8) + 64);
          uint64_t v33 = __dsta;
        }
        memcpy(v33, __src, v32);
LABEL_28:
        a3 = v164;
        uint64_t v35 = *(int *)(v14 + 32);
        uint64_t v36 = (void *)(v12 + v35);
        uint64_t v37 = &v13[v35];
        uint64_t v39 = *(void *)v37;
        uint64_t v38 = *((void *)v37 + 1);
        *uint64_t v36 = v39;
        v36[1] = v38;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      sub_232F0434C(v12 + 24);
    }
    long long v26 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v26;
    *(void *)(v12 + 56) = *((void *)v13 + 7);
    goto LABEL_20;
  }
  if (v18)
  {
LABEL_12:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v12, v13, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v12 = *v13;
  *(void *)(v12 + 8) = *((void *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(void *)(v12 + 56) = *((void *)v13 + 7);
  uint64_t v19 = *(int *)(v14 + 28);
  __dst = (void *)(v12 + v19);
  uint64_t v159 = v15;
  uint64_t v20 = &v13[v19];
  uint64_t v21 = sub_23309B300();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v22 + 32))(__dst, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  uint64_t v15 = v159;
  a3 = v164;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v159 + 56))(v12, 0, 1, v14);
LABEL_29:
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[12];
  uint64_t v41 = (uint64_t)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  int v43 = v16((uint64_t)a1 + v40, 1, v14);
  int v44 = v16((uint64_t)v42, 1, v14);
  if (!v43)
  {
    if (v44)
    {
      sub_232EA3DC4(v41, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_35;
    }
    *(unsigned char *)uint64_t v41 = *v42;
    *(void *)(v41 + 8) = *((void *)v42 + 1);
    *(_DWORD *)(v41 + 16) = *((_DWORD *)v42 + 4);
    if (*(void *)(v41 + 56) != 1)
    {
      uint64_t v53 = *((void *)v42 + 7);
      if (v53 != 1)
      {
        *(unsigned char *)(v41 + 24) = v42[24];
        *(_WORD *)(v41 + 25) = *(_WORD *)(v42 + 25);
        *(_DWORD *)(v41 + 28) = *((_DWORD *)v42 + 7);
        *(_OWORD *)(v41 + 32) = *((_OWORD *)v42 + 2);
        *(void *)(v41 + 48) = *((void *)v42 + 6);
        *(void *)(v41 + 56) = v53;
        swift_bridgeObjectRelease();
LABEL_43:
        uint64_t v55 = *(int *)(v14 + 28);
        uint64_t v56 = (void *)(v41 + v55);
        uint64_t v57 = &v42[v55];
        uint64_t v58 = sub_23309B300();
        __srca = *(void **)(v58 - 8);
        long long v59 = (uint64_t (*)(void *, uint64_t, uint64_t))__srca[6];
        uint64_t v161 = v56;
        LODWORD(v56) = v59(v56, 1, v58);
        int v60 = v59(v57, 1, v58);
        if (v56)
        {
          if (!v60)
          {
            ((void (*)(void *, char *, uint64_t))__srca[4])(v161, v57, v58);
            ((void (*)(void *, void, uint64_t, uint64_t))__srca[7])(v161, 0, 1, v58);
            goto LABEL_51;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v62 = *(void *)(*(void *)(v61 - 8) + 64);
          uint64_t v63 = v161;
        }
        else
        {
          if (!v60)
          {
            ((void (*)(void *, char *, uint64_t))__srca[5])(v161, v57, v58);
            goto LABEL_51;
          }
          ((void (*)(void *, uint64_t))__srca[1])(v161, v58);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v62 = *(void *)(*(void *)(v64 - 8) + 64);
          uint64_t v63 = v161;
        }
        memcpy(v63, v57, v62);
LABEL_51:
        a3 = v164;
        uint64_t v65 = *(int *)(v14 + 32);
        uint64_t v66 = (void *)(v41 + v65);
        uint64_t v67 = &v42[v65];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        *uint64_t v66 = v69;
        v66[1] = v68;
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      sub_232F0434C(v41 + 24);
    }
    long long v54 = *(_OWORD *)(v42 + 40);
    *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
    *(_OWORD *)(v41 + 40) = v54;
    *(void *)(v41 + 56) = *((void *)v42 + 7);
    goto LABEL_43;
  }
  if (v44)
  {
LABEL_35:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v41, v42, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_52;
  }
  uint64_t v160 = v15;
  uint64_t v45 = a3;
  *(unsigned char *)uint64_t v41 = *v42;
  *(void *)(v41 + 8) = *((void *)v42 + 1);
  *(_DWORD *)(v41 + 16) = *((_DWORD *)v42 + 4);
  *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
  *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
  *(void *)(v41 + 56) = *((void *)v42 + 7);
  uint64_t v46 = *(int *)(v14 + 28);
  uint64_t v47 = (void *)(v41 + v46);
  uint64_t v48 = &v42[v46];
  uint64_t v49 = sub_23309B300();
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  a3 = v45;
  *(_OWORD *)(v41 + *(int *)(v14 + 32)) = *(_OWORD *)&v42[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v160 + 56))(v41, 0, 1, v14);
LABEL_52:
  uint64_t v70 = a3[13];
  uint64_t v71 = (void *)((char *)a1 + v70);
  uint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = *(void *)((char *)a2 + v70 + 8);
  *uint64_t v71 = *(void *)((char *)a2 + v70);
  v71[1] = v73;
  swift_bridgeObjectRelease();
  v71[2] = *((void *)v72 + 2);
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[14];
  uint64_t v75 = (void *)((char *)a1 + v74);
  uint64_t v76 = (void *)((char *)a2 + v74);
  uint64_t v77 = type metadata accessor for Reference();
  uint64_t v78 = *(void *)(v77 - 8);
  long long v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v78 + 48);
  int v80 = v79(v75, 1, v77);
  int v81 = v79(v76, 1, v77);
  if (!v80)
  {
    if (v81)
    {
      sub_232EA3DC4((uint64_t)v75, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_58;
    }
    uint64_t v91 = v76[1];
    *uint64_t v75 = *v76;
    v75[1] = v91;
    swift_bridgeObjectRelease();
    uint64_t v92 = v76[3];
    v75[2] = v76[2];
    v75[3] = v92;
    swift_bridgeObjectRelease();
    uint64_t v93 = *(int *)(v77 + 24);
    uint64_t v94 = (void *)((char *)v75 + v93);
    uint64_t v95 = (void *)((char *)v76 + v93);
    uint64_t v96 = type metadata accessor for Identifier();
    uint64_t v97 = *(void *)(v96 - 8);
    uint64_t v98 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
    int v99 = v98(v94, 1, v96);
    int v100 = v98(v95, 1, v96);
    if (v99)
    {
      uint64_t v90 = v164;
      if (!v100)
      {
        long long v101 = *((_OWORD *)v95 + 1);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v101;
        v94[4] = v95[4];
        uint64_t v102 = *(int *)(v96 + 24);
        int v103 = (char *)v94 + v102;
        int v104 = (char *)v95 + v102;
        uint64_t v105 = sub_23309AF80();
        uint64_t v106 = *(void *)(v105 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v103, v104, *(void *)(*(void *)(v107 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v103, v104, v105);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        }
        *(_OWORD *)((char *)v94 + *(int *)(v96 + 28)) = *(_OWORD *)((char *)v95 + *(int *)(v96 + 28));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
        goto LABEL_59;
      }
LABEL_68:
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v94, v95, *(void *)(*(void *)(v115 - 8) + 64));
      goto LABEL_72;
    }
    uint64_t v90 = v164;
    if (v100)
    {
      sub_232EA3DC4((uint64_t)v94, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_68;
    }
    uint64_t v133 = v95[1];
    void *v94 = *v95;
    v94[1] = v133;
    swift_bridgeObjectRelease();
    if (v94[3] != 1)
    {
      uint64_t v134 = v95[3];
      if (v134 != 1)
      {
        v94[2] = v95[2];
        v94[3] = v134;
        swift_bridgeObjectRelease();
        v94[4] = v95[4];
        swift_bridgeObjectRelease();
LABEL_90:
        uint64_t v135 = *(int *)(v96 + 24);
        uint64_t v136 = (char *)v94 + v135;
        uint64_t v137 = (char *)v95 + v135;
        uint64_t v138 = sub_23309AF80();
        __srcc = *(void **)(v138 - 8);
        uint64_t v139 = (uint64_t (*)(char *, uint64_t, uint64_t))__srcc[6];
        size_t v163 = v136;
        LODWORD(v136) = v139(v136, 1, v138);
        int v140 = v139(v137, 1, v138);
        if (v136)
        {
          uint64_t v90 = v164;
          if (!v140)
          {
            ((void (*)(void *, char *, uint64_t))__srcc[4])(v163, v137, v138);
            ((void (*)(void *, void, uint64_t, uint64_t))__srcc[7])(v163, 0, 1, v138);
            goto LABEL_98;
          }
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v142 = *(void *)(*(void *)(v141 - 8) + 64);
          uint64_t v143 = v163;
        }
        else
        {
          uint64_t v90 = v164;
          if (!v140)
          {
            ((void (*)(void *, char *, uint64_t))__srcc[5])(v163, v137, v138);
            goto LABEL_98;
          }
          ((void (*)(void *, uint64_t))__srcc[1])(v163, v138);
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v142 = *(void *)(*(void *)(v144 - 8) + 64);
          uint64_t v143 = v163;
        }
        memcpy(v143, v137, v142);
LABEL_98:
        uint64_t v145 = *(int *)(v96 + 28);
        uint64_t v146 = (void *)((char *)v94 + v145);
        uint64_t v147 = (void *)((char *)v95 + v145);
        uint64_t v149 = *v147;
        uint64_t v148 = v147[1];
        *uint64_t v146 = v149;
        v146[1] = v148;
        swift_bridgeObjectRelease();
        goto LABEL_72;
      }
      sub_232F042F8((uint64_t)(v94 + 2));
    }
    *((_OWORD *)v94 + 1) = *((_OWORD *)v95 + 1);
    v94[4] = v95[4];
    goto LABEL_90;
  }
  if (v81)
  {
LABEL_58:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(v75, v76, *(void *)(*(void *)(v89 - 8) + 64));
LABEL_59:
    uint64_t v90 = v164;
    goto LABEL_72;
  }
  long long v82 = *((_OWORD *)v76 + 1);
  *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
  *((_OWORD *)v75 + 1) = v82;
  uint64_t v83 = *(int *)(v77 + 24);
  uint64_t v84 = (_OWORD *)((char *)v75 + v83);
  uint64_t v85 = (_OWORD *)((char *)v76 + v83);
  uint64_t v86 = type metadata accessor for Identifier();
  uint64_t v87 = *(void *)(v86 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
  }
  else
  {
    long long v108 = v85[1];
    *uint64_t v84 = *v85;
    v84[1] = v108;
    *((void *)v84 + 4) = *((void *)v85 + 4);
    uint64_t v109 = *(int *)(v86 + 24);
    uint64_t v162 = (char *)v84 + v109;
    uint64_t v110 = (char *)v85 + v109;
    uint64_t v111 = sub_23309AF80();
    __srcb = *(void (***)(void *, void *, void))(v111 - 8);
    __dstb = v110;
    uint64_t v112 = v110;
    uint64_t v113 = v111;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcb[6])(v112, 1, v111))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v162, __dstb, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      __srcb[4](v162, __dstb, v113);
      ((void (*)(char *, void, uint64_t, uint64_t))__srcb[7])(v162, 0, 1, v113);
    }
    *(_OWORD *)((char *)v84 + *(int *)(v86 + 28)) = *(_OWORD *)((char *)v85 + *(int *)(v86 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
  }
  uint64_t v90 = v164;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
LABEL_72:
  uint64_t v116 = v90[16];
  *((unsigned char *)a1 + v90[15]) = *((unsigned char *)a2 + v90[15]);
  uint64_t v117 = (void *)((char *)a1 + v116);
  uint64_t v118 = (void *)((char *)a2 + v116);
  uint64_t v120 = *v118;
  uint64_t v119 = v118[1];
  *uint64_t v117 = v120;
  v117[1] = v119;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v90[17]) = *(void *)((char *)a2 + v90[17]);
  swift_bridgeObjectRelease();
  uint64_t v121 = v90[19];
  *((unsigned char *)a1 + v90[18]) = *((unsigned char *)a2 + v90[18]);
  uint64_t v122 = (void *)((char *)a1 + v121);
  long long v123 = (void *)((char *)a2 + v121);
  if (*(void *)((char *)a1 + v121) != 1)
  {
    if (*v123 == 1)
    {
      sub_232F1F428((uint64_t)a1 + v121);
      goto LABEL_75;
    }
    *uint64_t v122 = *v123;
    swift_bridgeObjectRelease();
    if (v122[2] != 1)
    {
      uint64_t v125 = v123[2];
      if (v125 != 1)
      {
        v122[1] = v123[1];
        v122[2] = v125;
        swift_bridgeObjectRelease();
        _OWORD v122[3] = v123[3];
        swift_bridgeObjectRelease();
        goto LABEL_81;
      }
      sub_232F042F8((uint64_t)(v122 + 1));
    }
    *(_OWORD *)(v122 + 1) = *(_OWORD *)(v123 + 1);
    _OWORD v122[3] = v123[3];
LABEL_81:
    v122[4] = v123[4];
    swift_bridgeObjectRelease();
    uint64_t v126 = v123[6];
    v122[5] = v123[5];
    v122[6] = v126;
    swift_bridgeObjectRelease();
    goto LABEL_82;
  }
LABEL_75:
  long long v124 = *((_OWORD *)v123 + 1);
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
  *((_OWORD *)v122 + 1) = v124;
  *((_OWORD *)v122 + 2) = *((_OWORD *)v123 + 2);
  v122[6] = v123[6];
LABEL_82:
  uint64_t v127 = v90[20];
  uint64_t v128 = (void *)((char *)a1 + v127);
  uint64_t v129 = (void *)((char *)a2 + v127);
  uint64_t v131 = *v129;
  uint64_t v130 = v129[1];
  void *v128 = v131;
  v128[1] = v130;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Immunization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F210B4);
}

uint64_t sub_232F210B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 56);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Immunization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F21254);
}

uint64_t sub_232F21254(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 56);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_232F213E0()
{
  sub_232EA3854(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232EA3854(319, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for FHIRTime(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ModelsR4.ImmunizationProtocol(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 72);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  else
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 64);
  uint64_t v7 = (long long *)(a2 + 8);
  uint64_t v8 = a2[9];
  if (*(void *)(a1 + 72) == 1)
  {
    if (v8 == 1)
    {
      long long v9 = *v7;
      *(void *)(a1 + 80) = a2[10];
      *uint64_t v6 = v9;
    }
    else
    {
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_232F042F8(a1 + 64);
    uint64_t v10 = a2[10];
    *uint64_t v6 = *v7;
    *(void *)(a1 + 80) = v10;
  }
  else
  {
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = a2[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 72);
    if (v6 != 1)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_232F042F8(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationProtocol(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ImmunizationProtocol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationProtocol()
{
  return &type metadata for ModelsR4.ImmunizationProtocol;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.ImmunizationPerformer(uint64_t *a1, uint64_t *a2)
{
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for Reference();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v35 = v8;
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      uint64_t v12 = *(int *)(v7 + 24);
      uint64_t v13 = (uint64_t *)((char *)a1 + v12);
      uint64_t v14 = (uint64_t *)((char *)a2 + v12);
      uint64_t v15 = type metadata accessor for Identifier();
      uint64_t v16 = *(void *)(v15 - 8);
      int v17 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
        uint64_t v19 = v35;
      }
      else
      {
        uint64_t v20 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v20;
        uint64_t v21 = v14[3];
        swift_bridgeObjectRetain();
        uint64_t v22 = v13;
        if (v21 == 1)
        {
          *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
          v13[4] = v14[4];
        }
        else
        {
          v13[2] = v14[2];
          v13[3] = v21;
          v13[4] = v14[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v23 = *(int *)(v15 + 24);
        uint64_t v24 = (char *)v13 + v23;
        uint64_t v25 = (char *)v14 + v23;
        uint64_t v26 = sub_23309AF80();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        uint64_t v19 = v35;
        uint64_t v29 = *(int *)(v15 + 28);
        int v30 = (void *)((char *)v22 + v29);
        uint64_t v31 = (void *)((char *)v14 + v29);
        uint64_t v32 = v31[1];
        *int v30 = *v31;
        v30[1] = v32;
        uint64_t v33 = *(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56);
        swift_bridgeObjectRetain();
        v33(v22, 0, 1, v15);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ModelsR4.ImmunizationPerformer(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Reference();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = a1 + *(int *)(v2 + 24);
    uint64_t v5 = type metadata accessor for Identifier();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
    if (!result)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v4 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v6 = v4 + *(int *)(v5 + 24);
      uint64_t v7 = sub_23309AF80();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *initializeWithCopy for ModelsR4.ImmunizationPerformer(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v4 - 8);
  if (v5[6](a2, 1, v4))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    __dst = v5;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(v4 + 24);
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for Identifier();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      uint64_t v16 = (void (**)(void *, void, uint64_t, uint64_t))__dst;
    }
    else
    {
      uint64_t v17 = v11[1];
      *uint64_t v10 = *v11;
      v10[1] = v17;
      uint64_t v18 = v11[3];
      swift_bridgeObjectRetain();
      uint64_t v19 = v10;
      if (v18 == 1)
      {
        *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
        v10[4] = v11[4];
      }
      else
      {
        void v10[2] = v11[2];
        v10[3] = v18;
        v10[4] = v11[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v16 = (void (**)(void *, void, uint64_t, uint64_t))__dst;
      uint64_t v20 = *(int *)(v12 + 24);
      __dsta = (char *)v19 + v20;
      uint64_t v21 = (char *)v11 + v20;
      uint64_t v22 = sub_23309AF80();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dsta, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dsta, 0, 1, v22);
      }
      uint64_t v25 = *(int *)(v12 + 28);
      uint64_t v26 = (void *)((char *)v19 + v25);
      uint64_t v27 = (void *)((char *)v11 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = *(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56);
      swift_bridgeObjectRetain();
      v29(v19, 0, 1, v12);
    }
    v16[7](a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ModelsR4.ImmunizationPerformer(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, uint64_t))v5[6];
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_232EA3DC4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_7;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(int *)(v4 + 24);
    uint64_t v22 = (uint64_t)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for Identifier();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    int v27 = v26(v22, 1, v24);
    int v28 = v26((uint64_t)v23, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        *(void *)uint64_t v22 = *(void *)v23;
        *(void *)(v22 + 8) = *((void *)v23 + 1);
        uint64_t v29 = *((void *)v23 + 3);
        swift_bridgeObjectRetain();
        if (v29 == 1)
        {
          long long v30 = *((_OWORD *)v23 + 1);
          *(void *)(v22 + 32) = *((void *)v23 + 4);
          *(_OWORD *)(v22 + 16) = v30;
        }
        else
        {
          *(void *)(v22 + 16) = *((void *)v23 + 2);
          *(void *)(v22 + 24) = *((void *)v23 + 3);
          *(void *)(v22 + 32) = *((void *)v23 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v52 = *(int *)(v24 + 24);
        uint64_t v53 = (void *)(v22 + v52);
        long long v54 = &v23[v52];
        uint64_t v55 = sub_23309AF80();
        uint64_t v56 = *(void *)(v55 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
        }
        uint64_t v58 = *(int *)(v24 + 28);
        long long v59 = (void *)(v22 + v58);
        int v60 = &v23[v58];
        *long long v59 = *(void *)v60;
        v59[1] = *((void *)v60 + 1);
        uint64_t v61 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56);
        swift_bridgeObjectRetain();
        v61(v22, 0, 1, v24);
        return a1;
      }
      goto LABEL_17;
    }
    if (v28)
    {
      sub_232EA3DC4(v22, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_17:
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v18 = *(void *)(*(void *)(v34 - 8) + 64);
      uint64_t v19 = (void *)v22;
      uint64_t v20 = v23;
      goto LABEL_8;
    }
    *(void *)uint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = *((void *)v23 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v48 = (long long *)(v22 + 16);
    uint64_t v49 = (long long *)(v23 + 16);
    uint64_t v50 = *((void *)v23 + 3);
    if (*(void *)(v22 + 24) == 1)
    {
      if (v50 == 1)
      {
        long long v51 = *v49;
        *(void *)(v22 + 32) = *((void *)v23 + 4);
        long long *v48 = v51;
      }
      else
      {
        *(void *)(v22 + 16) = *((void *)v23 + 2);
        *(void *)(v22 + 24) = *((void *)v23 + 3);
        *(void *)(v22 + 32) = *((void *)v23 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v50 == 1)
    {
      sub_232F042F8(v22 + 16);
      uint64_t v62 = *((void *)v23 + 4);
      long long *v48 = *v49;
      *(void *)(v22 + 32) = v62;
    }
    else
    {
      *(void *)(v22 + 16) = *((void *)v23 + 2);
      *(void *)(v22 + 24) = *((void *)v23 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v22 + 32) = *((void *)v23 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v63 = *(int *)(v24 + 24);
    uint64_t v64 = (void *)(v22 + v63);
    uint64_t v65 = &v23[v63];
    uint64_t v66 = sub_23309AF80();
    uint64_t v67 = *(void *)(v66 - 8);
    uint64_t v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v67 + 48);
    uint64_t v77 = v64;
    LODWORD(v64) = v68(v64, 1, v66);
    int v69 = v68(v65, 1, v66);
    if (v64)
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v67 + 16))(v77, v65, v66);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v77, 0, 1, v66);
        goto LABEL_45;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v71 = *(void *)(*(void *)(v70 - 8) + 64);
      uint64_t v72 = v77;
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v67 + 24))(v77, v65, v66);
        goto LABEL_45;
      }
      (*(void (**)(void *, uint64_t))(v67 + 8))(v77, v66);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v71 = *(void *)(*(void *)(v73 - 8) + 64);
      uint64_t v72 = v77;
    }
    memcpy(v72, v65, v71);
LABEL_45:
    uint64_t v74 = *(int *)(v24 + 28);
    uint64_t v75 = (void *)(v22 + v74);
    uint64_t v76 = &v23[v74];
    *uint64_t v75 = *(void *)v76;
    v75[1] = *((void *)v76 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v8)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
    uint64_t v19 = a1;
    uint64_t v20 = a2;
LABEL_8:
    memcpy(v19, v20, v18);
    return a1;
  }
  __src = v5;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v9 = *(int *)(v4 + 24);
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = type metadata accessor for Identifier();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  uint64_t v15 = v11;
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    uint64_t v31 = v11[3];
    swift_bridgeObjectRetain();
    uint64_t v32 = v10;
    if (v31 == 1)
    {
      long long v33 = *((_OWORD *)v11 + 1);
      v10[4] = v11[4];
      *((_OWORD *)v10 + 1) = v33;
    }
    else
    {
      void v10[2] = v11[2];
      v10[3] = v11[3];
      v10[4] = v11[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = v12;
    uint64_t v36 = *(int *)(v12 + 24);
    uint64_t v37 = (char *)v32 + v36;
    uint64_t v38 = v15;
    uint64_t v39 = (char *)v15 + v36;
    uint64_t v40 = sub_23309AF80();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v37, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v37, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
    }
    uint64_t v43 = *(int *)(v35 + 28);
    int v44 = (void *)((char *)v32 + v43);
    uint64_t v45 = (void *)((char *)v38 + v43);
    void *v44 = *v45;
    v44[1] = v45[1];
    uint64_t v46 = *(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    v46(v32, 0, 1, v35);
  }
  (*((void (**)(void *, void, uint64_t, uint64_t))__src + 7))(a1, 0, 1, v4);
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.ImmunizationPerformer(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(v4 + 24);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    uint64_t v10 = (_OWORD *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for Identifier();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      long long v14 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v14;
      *((void *)v9 + 4) = *((void *)v10 + 4);
      uint64_t v15 = *(int *)(v11 + 24);
      __dst = (char *)v9 + v15;
      uint64_t v16 = (char *)v10 + v15;
      uint64_t v17 = sub_23309AF80();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ModelsR4.ImmunizationPerformer(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Reference();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_232EA3DC4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Reference);
      goto LABEL_7;
    }
    uint64_t v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = a2[3];
    a1[2] = a2[2];
    a1[3] = v21;
    swift_bridgeObjectRelease();
    uint64_t v22 = *(int *)(v4 + 24);
    uint64_t v23 = (uint64_t)a1 + v22;
    uint64_t v24 = (void *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for Identifier();
    uint64_t v26 = *(void *)(v25 - 8);
    int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    int v28 = v27(v23, 1, v25);
    int v29 = v27((uint64_t)v24, 1, v25);
    if (v28)
    {
      if (!v29)
      {
        long long v30 = *((_OWORD *)v24 + 1);
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
        *(_OWORD *)(v23 + 16) = v30;
        *(void *)(v23 + 32) = v24[4];
        uint64_t v31 = *(int *)(v25 + 24);
        uint64_t v32 = (void *)(v23 + v31);
        long long v33 = (char *)v24 + v31;
        uint64_t v34 = sub_23309AF80();
        uint64_t v35 = *(void *)(v34 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
        {
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        *(_OWORD *)(v23 + *(int *)(v25 + 28)) = *(_OWORD *)((char *)v24 + *(int *)(v25 + 28));
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        return a1;
      }
      goto LABEL_17;
    }
    if (v29)
    {
      sub_232EA3DC4(v23, (uint64_t (*)(void))type metadata accessor for Identifier);
LABEL_17:
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      size_t v17 = *(void *)(*(void *)(v43 - 8) + 64);
      uint64_t v18 = (void *)v23;
      uint64_t v19 = v24;
      goto LABEL_8;
    }
    uint64_t v45 = v24[1];
    *(void *)uint64_t v23 = *v24;
    *(void *)(v23 + 8) = v45;
    swift_bridgeObjectRelease();
    if (*(void *)(v23 + 24) != 1)
    {
      uint64_t v46 = v24[3];
      if (v46 != 1)
      {
        *(void *)(v23 + 16) = v24[2];
        *(void *)(v23 + 24) = v46;
        swift_bridgeObjectRelease();
        *(void *)(v23 + 32) = v24[4];
        swift_bridgeObjectRelease();
LABEL_29:
        uint64_t v47 = *(int *)(v25 + 24);
        uint64_t v48 = (void *)(v23 + v47);
        uint64_t v49 = (char *)v24 + v47;
        uint64_t v50 = sub_23309AF80();
        uint64_t v51 = *(void *)(v50 - 8);
        uint64_t v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
        uint64_t v63 = v48;
        LODWORD(v48) = v52(v48, 1, v50);
        int v53 = v52(v49, 1, v50);
        if (v48)
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v51 + 32))(v63, v49, v50);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v63, 0, 1, v50);
            goto LABEL_37;
          }
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v55 = *(void *)(*(void *)(v54 - 8) + 64);
          uint64_t v56 = v63;
        }
        else
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v51 + 40))(v63, v49, v50);
            goto LABEL_37;
          }
          (*(void (**)(void *, uint64_t))(v51 + 8))(v63, v50);
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v55 = *(void *)(*(void *)(v57 - 8) + 64);
          uint64_t v56 = v63;
        }
        memcpy(v56, v49, v55);
LABEL_37:
        uint64_t v58 = *(int *)(v25 + 28);
        long long v59 = (void *)(v23 + v58);
        int v60 = (void *)((char *)v24 + v58);
        uint64_t v62 = *v60;
        uint64_t v61 = v60[1];
        *long long v59 = v62;
        v59[1] = v61;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_232F042F8(v23 + 16);
    }
    *(_OWORD *)(v23 + 16) = *((_OWORD *)v24 + 1);
    *(void *)(v23 + 32) = v24[4];
    goto LABEL_29;
  }
  if (v8)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
    size_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
    uint64_t v18 = a1;
    uint64_t v19 = a2;
LABEL_8:
    memcpy(v18, v19, v17);
    return a1;
  }
  long long v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  uint64_t v10 = *(int *)(v4 + 24);
  uint64_t v11 = (_OWORD *)((char *)a1 + v10);
  uint64_t v12 = (_OWORD *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for Identifier();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v37 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v37;
    *((void *)v11 + 4) = *((void *)v12 + 4);
    uint64_t v38 = *(int *)(v13 + 24);
    __dst = (char *)v11 + v38;
    uint64_t v39 = (char *)v12 + v38;
    uint64_t v40 = sub_23309AF80();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(__dst, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
    }
    *(_OWORD *)((char *)v11 + *(int *)(v13 + 28)) = *(_OWORD *)((char *)v12 + *(int *)(v13 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationPerformer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F23920);
}

uint64_t sub_232F23920(uint64_t a1, uint64_t a2)
{
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ImmunizationPerformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F239D0);
}

uint64_t sub_232F239D0(uint64_t a1, uint64_t a2)
{
  sub_232EA3854(0, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_232F23A70()
{
  sub_232EA3854(319, &qword_268756580, (uint64_t (*)(uint64_t))type metadata accessor for Reference, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for ModelsR4.Observation(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != 1) {
      swift_bridgeObjectRetain();
    }
    uint64_t v9 = a2[5];
    uint64_t v10 = a2[6];
    a1[4] = v8;
    a1[5] = v9;
    uint64_t v12 = a2[7];
    uint64_t v11 = a2[8];
    a1[6] = v10;
    a1[7] = v12;
    uint64_t v13 = a2;
    uint64_t v14 = a2[9];
    uint64_t v15 = v13[10];
    a1[8] = v11;
    a1[9] = v14;
    uint64_t v16 = a3[10];
    size_t v17 = (char *)a1 + v16;
    uint64_t v145 = v13;
    uint64_t v18 = (char *)v13 + v16;
    a1[10] = v15;
    uint64_t v19 = type metadata accessor for FHIRDateTime();
    uint64_t v146 = *(void *)(v19 - 8);
    uint64_t v20 = *(unsigned int (**)(void, void, void))(v146 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    size_t v142 = v20;
    if (v20(v18, 1, v19))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = a3;
      uint64_t v23 = v145;
    }
    else
    {
      *size_t v17 = *v18;
      *((void *)v17 + 1) = *((void *)v18 + 1);
      *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
      uint64_t v25 = *((void *)v18 + 7);
      if (v25 == 1)
      {
        long long v26 = *(_OWORD *)(v18 + 40);
        *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v17 + 40) = v26;
        *((void *)v17 + 7) = *((void *)v18 + 7);
      }
      else
      {
        v17[24] = v18[24];
        *(_WORD *)(v17 + 25) = *(_WORD *)(v18 + 25);
        *(_OWORD *)(v17 + 28) = *(_OWORD *)(v18 + 28);
        *((_DWORD *)v17 + 11) = *((_DWORD *)v18 + 11);
        *((void *)v17 + 6) = *((void *)v18 + 6);
        *((void *)v17 + 7) = v25;
        swift_bridgeObjectRetain();
      }
      uint64_t v22 = a3;
      uint64_t v23 = v145;
      uint64_t v27 = *(int *)(v19 + 28);
      int v28 = &v17[v27];
      int v29 = &v18[v27];
      uint64_t v30 = sub_23309B300();
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      uint64_t v20 = (unsigned int (*)(void, void, void))v142;
      uint64_t v33 = *(int *)(v19 + 32);
      uint64_t v34 = &v17[v33];
      uint64_t v35 = &v18[v33];
      uint64_t v36 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v36;
      long long v37 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_bridgeObjectRetain();
      v37(v17, 0, 1, v19);
    }
    uint64_t v38 = v22[11];
    uint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)v23 + v38;
    if (v20((char *)v23 + v38, 1, v19))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      *uint64_t v39 = *v40;
      *((void *)v39 + 1) = *((void *)v40 + 1);
      *((_DWORD *)v39 + 4) = *((_DWORD *)v40 + 4);
      uint64_t v42 = *((void *)v40 + 7);
      if (v42 == 1)
      {
        long long v43 = *(_OWORD *)(v40 + 40);
        *(_OWORD *)(v39 + 24) = *(_OWORD *)(v40 + 24);
        *(_OWORD *)(v39 + 40) = v43;
        *((void *)v39 + 7) = *((void *)v40 + 7);
      }
      else
      {
        v39[24] = v40[24];
        *(_WORD *)(v39 + 25) = *(_WORD *)(v40 + 25);
        *(_OWORD *)(v39 + 28) = *(_OWORD *)(v40 + 28);
        *((_DWORD *)v39 + 11) = *((_DWORD *)v40 + 11);
        *((void *)v39 + 6) = *((void *)v40 + 6);
        *((void *)v39 + 7) = v42;
        swift_bridgeObjectRetain();
      }
      uint64_t v44 = *(int *)(v19 + 28);
      uint64_t v45 = &v39[v44];
      uint64_t v46 = &v40[v44];
      uint64_t v47 = sub_23309B300();
      uint64_t v48 = *(void *)(v47 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v48 + 16))(v45, v46, v47);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      uint64_t v20 = (unsigned int (*)(void, void, void))v142;
      uint64_t v50 = *(int *)(v19 + 32);
      uint64_t v51 = &v39[v50];
      uint64_t v52 = &v40[v50];
      uint64_t v53 = v52[1];
      *uint64_t v51 = *v52;
      v51[1] = v53;
      uint64_t v54 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_bridgeObjectRetain();
      v54(v39, 0, 1, v19);
    }
    uint64_t v55 = v22[12];
    uint64_t v56 = (char *)a1 + v55;
    uint64_t v57 = (char *)v23 + v55;
    uint64_t v58 = type metadata accessor for Period();
    uint64_t v59 = *(void *)(v58 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      uint64_t v141 = v59;
      if (v20(v57, 1, v19))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        unsigned char *v56 = *v57;
        *((void *)v56 + 1) = *((void *)v57 + 1);
        *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
        uint64_t v62 = *((void *)v57 + 7);
        if (v62 == 1)
        {
          long long v63 = *(_OWORD *)(v57 + 40);
          *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
          *(_OWORD *)(v56 + 40) = v63;
          *((void *)v56 + 7) = *((void *)v57 + 7);
        }
        else
        {
          v56[24] = v57[24];
          *(_WORD *)(v56 + 25) = *(_WORD *)(v57 + 25);
          *(_OWORD *)(v56 + 28) = *(_OWORD *)(v57 + 28);
          *((_DWORD *)v56 + 11) = *((_DWORD *)v57 + 11);
          *((void *)v56 + 6) = *((void *)v57 + 6);
          *((void *)v56 + 7) = v62;
          swift_bridgeObjectRetain();
        }
        uint64_t v64 = *(int *)(v19 + 28);
        uint64_t v65 = &v56[v64];
        uint64_t v66 = &v57[v64];
        uint64_t v67 = sub_23309B300();
        uint64_t v68 = *(void *)(v67 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v68 + 16))(v65, v66, v67);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
        }
        uint64_t v22 = a3;
        uint64_t v20 = (unsigned int (*)(void, void, void))v142;
        uint64_t v70 = *(int *)(v19 + 32);
        size_t v71 = &v56[v70];
        uint64_t v72 = &v57[v70];
        uint64_t v73 = v72[1];
        *size_t v71 = *v72;
        v71[1] = v73;
        uint64_t v74 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
        swift_bridgeObjectRetain();
        v74(v56, 0, 1, v19);
      }
      uint64_t v75 = *(int *)(v58 + 20);
      uint64_t v76 = &v56[v75];
      uint64_t v77 = &v57[v75];
      if (v20(v77, 1, v19))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
      }
      else
      {
        unsigned char *v76 = *v77;
        *((void *)v76 + 1) = *((void *)v77 + 1);
        *((_DWORD *)v76 + 4) = *((_DWORD *)v77 + 4);
        uint64_t v79 = *((void *)v77 + 7);
        if (v79 == 1)
        {
          long long v80 = *(_OWORD *)(v77 + 40);
          *(_OWORD *)(v76 + 24) = *(_OWORD *)(v77 + 24);
          *(_OWORD *)(v76 + 40) = v80;
          *((void *)v76 + 7) = *((void *)v77 + 7);
        }
        else
        {
          v76[24] = v77[24];
          *(_WORD *)(v76 + 25) = *(_WORD *)(v77 + 25);
          *(_OWORD *)(v76 + 28) = *(_OWORD *)(v77 + 28);
          *((_DWORD *)v76 + 11) = *((_DWORD *)v77 + 11);
          *((void *)v76 + 6) = *((void *)v77 + 6);
          *((void *)v76 + 7) = v79;
          swift_bridgeObjectRetain();
        }
        uint64_t v81 = *(int *)(v19 + 28);
        __dst = &v76[v81];
        long long v82 = &v77[v81];
        uint64_t v83 = sub_23309B300();
        uint64_t v84 = *(void *)(v83 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v82, *(void *)(*(void *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v84 + 16))(__dst, v82, v83);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v83);
        }
        uint64_t v22 = a3;
        uint64_t v20 = (unsigned int (*)(void, void, void))v142;
        uint64_t v86 = *(int *)(v19 + 32);
        uint64_t v87 = &v76[v86];
        uint64_t v88 = &v77[v86];
        uint64_t v89 = v88[1];
        *uint64_t v87 = *v88;
        v87[1] = v89;
        uint64_t v90 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
        swift_bridgeObjectRetain();
        v90(v76, 0, 1, v19);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v141 + 56))(v56, 0, 1, v58);
    }
    uint64_t v91 = v22[13];
    uint64_t v92 = (char *)a1 + v91;
    uint64_t v93 = (char *)v23 + v91;
    if (v20((char *)v23 + v91, 1, v19))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
    }
    else
    {
      *uint64_t v92 = *v93;
      *((void *)v92 + 1) = *((void *)v93 + 1);
      *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
      uint64_t v95 = *((void *)v93 + 7);
      if (v95 == 1)
      {
        long long v96 = *(_OWORD *)(v93 + 40);
        *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
        *(_OWORD *)(v92 + 40) = v96;
        *((void *)v92 + 7) = *((void *)v93 + 7);
      }
      else
      {
        v92[24] = v93[24];
        *(_WORD *)(v92 + 25) = *(_WORD *)(v93 + 25);
        *(_OWORD *)(v92 + 28) = *(_OWORD *)(v93 + 28);
        *((_DWORD *)v92 + 11) = *((_DWORD *)v93 + 11);
        *((void *)v92 + 6) = *((void *)v93 + 6);
        *((void *)v92 + 7) = v95;
        swift_bridgeObjectRetain();
      }
      uint64_t v97 = *(int *)(v19 + 28);
      uint64_t v98 = &v92[v97];
      int v99 = &v93[v97];
      uint64_t v100 = sub_23309B300();
      uint64_t v101 = *(void *)(v100 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v98, v99, *(void *)(*(void *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v101 + 16))(v98, v99, v100);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
      }
      uint64_t v103 = *(int *)(v19 + 32);
      int v104 = &v92[v103];
      uint64_t v105 = &v93[v103];
      uint64_t v106 = v105[1];
      *int v104 = *v105;
      v104[1] = v106;
      uint64_t v107 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_bridgeObjectRetain();
      v107(v92, 0, 1, v19);
    }
    uint64_t v108 = v22[15];
    *(void *)((char *)a1 + v22[14]) = *(void *)((char *)v23 + v22[14]);
    *(void *)((char *)a1 + v108) = *(void *)((char *)v23 + v108);
    uint64_t v109 = v22[16];
    uint64_t v110 = v22[17];
    uint64_t v111 = (void *)((char *)a1 + v109);
    uint64_t v112 = (void *)((char *)v23 + v109);
    uint64_t v113 = v112[1];
    *uint64_t v111 = *v112;
    v111[1] = v113;
    uint64_t v114 = (char *)a1 + v110;
    uint64_t v115 = (uint64_t)v23 + v110;
    uint64_t v116 = *(void *)((char *)v23 + v110 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v116 == 1)
    {
      *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
      *((void *)v114 + 2) = *(void *)(v115 + 16);
    }
    else
    {
      *(void *)uint64_t v114 = *(void *)v115;
      *((void *)v114 + 1) = v116;
      *((void *)v114 + 2) = *(void *)(v115 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v117 = v22[18];
    uint64_t v118 = (void *)((char *)a1 + v117);
    uint64_t v119 = (void *)((char *)v23 + v117);
    uint64_t v120 = type metadata accessor for Quantity();
    uint64_t v121 = *(void *)(v120 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
    {
      sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
      memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(void *)((char *)v118 + 13) = *(void *)((char *)v119 + 13);
      uint64_t v123 = v119[4];
      v118[3] = v119[3];
      v118[4] = v123;
      uint64_t v124 = v119[6];
      v118[5] = v119[5];
      v118[6] = v124;
      uint64_t v125 = *(int *)(v120 + 28);
      uint64_t v143 = (char *)v118 + v125;
      uint64_t v144 = v121;
      uint64_t v126 = (char *)v119 + v125;
      uint64_t v127 = sub_23309AF80();
      uint64_t v128 = *(void *)(v127 - 8);
      uint64_t v147 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v147(v126, 1, v127))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(v143, v126, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v143, v126, v127);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v143, 0, 1, v127);
      }
      uint64_t v130 = *(int *)(v120 + 32);
      uint64_t v131 = (void *)((char *)v118 + v130);
      uint64_t v132 = (void *)((char *)v119 + v130);
      uint64_t v133 = v132[1];
      void *v131 = *v132;
      v131[1] = v133;
      uint64_t v134 = *(void (**)(void *, void, uint64_t, uint64_t))(v144 + 56);
      swift_bridgeObjectRetain();
      v134(v118, 0, 1, v120);
      uint64_t v22 = a3;
      uint64_t v23 = v145;
    }
    uint64_t v135 = v22[20];
    *(void *)((char *)a1 + v22[19]) = *(void *)((char *)v23 + v22[19]);
    uint64_t v136 = (void *)((char *)a1 + v135);
    uint64_t v137 = (void *)((char *)v23 + v135);
    uint64_t v138 = v137[1];
    *uint64_t v136 = *v137;
    v136[1] = v138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Observation(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = type metadata accessor for FHIRDateTime();
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(void *)(v4 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_23309B300();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[11];
  if (!v6(v10, 1, v5))
  {
    if (*(void *)(v10 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = v10 + *(int *)(v5 + 28);
    uint64_t v12 = sub_23309B300();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = a1 + a2[12];
  uint64_t v15 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    if (!v6(v14, 1, v5))
    {
      if (*(void *)(v14 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v16 = v14 + *(int *)(v5 + 28);
      uint64_t v17 = sub_23309B300();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = v14 + *(int *)(v15 + 20);
    if (!v6(v19, 1, v5))
    {
      if (*(void *)(v19 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = v19 + *(int *)(v5 + 28);
      uint64_t v21 = sub_23309B300();
      uint64_t v22 = *(void *)(v21 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v23 = a1 + a2[13];
  if (!v6(v23, 1, v5))
  {
    if (*(void *)(v23 + 56) != 1) {
      swift_bridgeObjectRelease();
    }
    uint64_t v24 = v23 + *(int *)(v5 + 28);
    uint64_t v25 = sub_23309B300();
    uint64_t v26 = *(void *)(v25 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25)) {
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[17] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = a1 + a2[18];
  uint64_t v28 = type metadata accessor for Quantity();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v27 + *(int *)(v28 + 28);
    uint64_t v30 = sub_23309AF80();
    uint64_t v31 = *(void *)(v30 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30)) {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.Observation(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = v4[5];
  uint64_t v10 = v4[6];
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v12 = v4[7];
  uint64_t v11 = v4[8];
  a1[6] = v10;
  a1[7] = v12;
  uint64_t v13 = a1;
  uint64_t v14 = v4[9];
  uint64_t v15 = v4[10];
  void v13[8] = v11;
  v13[9] = v14;
  uint64_t v148 = a3;
  uint64_t v16 = a3[10];
  uint64_t v17 = (char *)v13 + v16;
  uint64_t v18 = (char *)v4 + v16;
  uint64_t v145 = v13;
  v13[10] = v15;
  uint64_t v19 = type metadata accessor for FHIRDateTime();
  uint64_t v146 = *(void *)(v19 - 8);
  uint64_t v20 = *(unsigned int (**)(void, void, void))(v146 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  size_t v142 = v20;
  if (v20(v18, 1, v19))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = a3;
    uint64_t v23 = v145;
  }
  else
  {
    *uint64_t v17 = *v18;
    *((void *)v17 + 1) = *((void *)v18 + 1);
    *((_DWORD *)v17 + 4) = *((_DWORD *)v18 + 4);
    uint64_t v24 = *((void *)v18 + 7);
    if (v24 == 1)
    {
      long long v25 = *(_OWORD *)(v18 + 40);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
      *(_OWORD *)(v17 + 40) = v25;
      *((void *)v17 + 7) = *((void *)v18 + 7);
    }
    else
    {
      v17[24] = v18[24];
      *(_WORD *)(v17 + 25) = *(_WORD *)(v18 + 25);
      *(_OWORD *)(v17 + 28) = *(_OWORD *)(v18 + 28);
      *((_DWORD *)v17 + 11) = *((_DWORD *)v18 + 11);
      *((void *)v17 + 6) = *((void *)v18 + 6);
      *((void *)v17 + 7) = v24;
      swift_bridgeObjectRetain();
    }
    uint64_t v22 = a3;
    uint64_t v23 = v145;
    uint64_t v26 = *(int *)(v19 + 28);
    uint64_t v27 = &v17[v26];
    uint64_t v28 = &v18[v26];
    uint64_t v29 = sub_23309B300();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v20 = (unsigned int (*)(void, void, void))v142;
    uint64_t v32 = *(int *)(v19 + 32);
    uint64_t v33 = &v17[v32];
    uint64_t v34 = &v18[v32];
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
    swift_bridgeObjectRetain();
    v36(v17, 0, 1, v19);
  }
  uint64_t v37 = v22[11];
  uint64_t v38 = (char *)v23 + v37;
  uint64_t v39 = (char *)v4 + v37;
  if (v20((char *)v4 + v37, 1, v19))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    *uint64_t v38 = *v39;
    *((void *)v38 + 1) = *((void *)v39 + 1);
    *((_DWORD *)v38 + 4) = *((_DWORD *)v39 + 4);
    uint64_t v41 = *((void *)v39 + 7);
    if (v41 == 1)
    {
      long long v42 = *(_OWORD *)(v39 + 40);
      *(_OWORD *)(v38 + 24) = *(_OWORD *)(v39 + 24);
      *(_OWORD *)(v38 + 40) = v42;
      *((void *)v38 + 7) = *((void *)v39 + 7);
    }
    else
    {
      v38[24] = v39[24];
      *(_WORD *)(v38 + 25) = *(_WORD *)(v39 + 25);
      *(_OWORD *)(v38 + 28) = *(_OWORD *)(v39 + 28);
      *((_DWORD *)v38 + 11) = *((_DWORD *)v39 + 11);
      *((void *)v38 + 6) = *((void *)v39 + 6);
      *((void *)v38 + 7) = v41;
      swift_bridgeObjectRetain();
    }
    uint64_t v43 = *(int *)(v19 + 28);
    uint64_t v44 = &v38[v43];
    uint64_t v45 = &v39[v43];
    uint64_t v46 = sub_23309B300();
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    uint64_t v20 = (unsigned int (*)(void, void, void))v142;
    uint64_t v49 = *(int *)(v19 + 32);
    uint64_t v50 = &v38[v49];
    uint64_t v51 = &v39[v49];
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
    swift_bridgeObjectRetain();
    v53(v38, 0, 1, v19);
  }
  uint64_t v54 = v22[12];
  uint64_t v55 = (char *)v23 + v54;
  uint64_t v56 = (char *)v4 + v54;
  uint64_t v57 = type metadata accessor for Period();
  uint64_t v58 = *(void *)(v57 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    uint64_t v141 = v58;
    if (v20(v56, 1, v19))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      *uint64_t v55 = *v56;
      *((void *)v55 + 1) = *((void *)v56 + 1);
      *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
      uint64_t v61 = *((void *)v56 + 7);
      if (v61 == 1)
      {
        long long v62 = *(_OWORD *)(v56 + 40);
        *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
        *(_OWORD *)(v55 + 40) = v62;
        *((void *)v55 + 7) = *((void *)v56 + 7);
      }
      else
      {
        v55[24] = v56[24];
        *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
        *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
        *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
        *((void *)v55 + 6) = *((void *)v56 + 6);
        *((void *)v55 + 7) = v61;
        swift_bridgeObjectRetain();
      }
      uint64_t v63 = *(int *)(v19 + 28);
      uint64_t v64 = &v55[v63];
      uint64_t v65 = &v56[v63];
      uint64_t v66 = sub_23309B300();
      uint64_t v67 = *(void *)(v66 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v67 + 16))(v64, v65, v66);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      }
      uint64_t v22 = v148;
      uint64_t v69 = *(int *)(v19 + 32);
      uint64_t v70 = &v55[v69];
      size_t v71 = &v56[v69];
      uint64_t v72 = v71[1];
      *uint64_t v70 = *v71;
      v70[1] = v72;
      uint64_t v73 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_bridgeObjectRetain();
      v73(v55, 0, 1, v19);
      uint64_t v20 = (unsigned int (*)(void, void, void))v142;
    }
    uint64_t v74 = *(int *)(v57 + 20);
    uint64_t v75 = &v55[v74];
    uint64_t v76 = &v56[v74];
    if (v20(v76, 1, v19))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
    }
    else
    {
      *uint64_t v75 = *v76;
      *((void *)v75 + 1) = *((void *)v76 + 1);
      *((_DWORD *)v75 + 4) = *((_DWORD *)v76 + 4);
      uint64_t v78 = *((void *)v76 + 7);
      if (v78 == 1)
      {
        long long v79 = *(_OWORD *)(v76 + 40);
        *(_OWORD *)(v75 + 24) = *(_OWORD *)(v76 + 24);
        *(_OWORD *)(v75 + 40) = v79;
        *((void *)v75 + 7) = *((void *)v76 + 7);
      }
      else
      {
        v75[24] = v76[24];
        *(_WORD *)(v75 + 25) = *(_WORD *)(v76 + 25);
        *(_OWORD *)(v75 + 28) = *(_OWORD *)(v76 + 28);
        *((_DWORD *)v75 + 11) = *((_DWORD *)v76 + 11);
        *((void *)v75 + 6) = *((void *)v76 + 6);
        *((void *)v75 + 7) = v78;
        swift_bridgeObjectRetain();
      }
      uint64_t v80 = *(int *)(v19 + 28);
      __dst = &v75[v80];
      uint64_t v81 = &v76[v80];
      uint64_t v82 = sub_23309B300();
      uint64_t v83 = *(void *)(v82 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v81, *(void *)(*(void *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v83 + 16))(__dst, v81, v82);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v83 + 56))(__dst, 0, 1, v82);
      }
      uint64_t v20 = (unsigned int (*)(void, void, void))v142;
      uint64_t v85 = *(int *)(v19 + 32);
      uint64_t v86 = &v75[v85];
      uint64_t v87 = &v76[v85];
      uint64_t v88 = v87[1];
      *uint64_t v86 = *v87;
      v86[1] = v88;
      uint64_t v89 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_bridgeObjectRetain();
      v89(v75, 0, 1, v19);
      uint64_t v22 = v148;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v141 + 56))(v55, 0, 1, v57);
  }
  uint64_t v90 = v22[13];
  uint64_t v91 = (char *)v23 + v90;
  uint64_t v92 = (char *)v4 + v90;
  if (v20((char *)v4 + v90, 1, v19))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
  }
  else
  {
    unsigned char *v91 = *v92;
    *((void *)v91 + 1) = *((void *)v92 + 1);
    *((_DWORD *)v91 + 4) = *((_DWORD *)v92 + 4);
    uint64_t v94 = *((void *)v92 + 7);
    if (v94 == 1)
    {
      long long v95 = *(_OWORD *)(v92 + 40);
      *(_OWORD *)(v91 + 24) = *(_OWORD *)(v92 + 24);
      *(_OWORD *)(v91 + 40) = v95;
      *((void *)v91 + 7) = *((void *)v92 + 7);
    }
    else
    {
      v91[24] = v92[24];
      *(_WORD *)(v91 + 25) = *(_WORD *)(v92 + 25);
      *(_OWORD *)(v91 + 28) = *(_OWORD *)(v92 + 28);
      *((_DWORD *)v91 + 11) = *((_DWORD *)v92 + 11);
      *((void *)v91 + 6) = *((void *)v92 + 6);
      *((void *)v91 + 7) = v94;
      swift_bridgeObjectRetain();
    }
    uint64_t v96 = *(int *)(v19 + 28);
    uint64_t v97 = &v91[v96];
    uint64_t v98 = &v92[v96];
    uint64_t v99 = sub_23309B300();
    uint64_t v100 = *(void *)(v99 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v100 + 16))(v97, v98, v99);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
    }
    uint64_t v102 = *(int *)(v19 + 32);
    uint64_t v103 = &v91[v102];
    int v104 = &v92[v102];
    uint64_t v105 = v104[1];
    void *v103 = *v104;
    v103[1] = v105;
    uint64_t v106 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56);
    swift_bridgeObjectRetain();
    v106(v91, 0, 1, v19);
  }
  uint64_t v107 = v22[15];
  *(void *)((char *)v23 + v22[14]) = *(void *)((char *)v4 + v22[14]);
  *(void *)((char *)v23 + v107) = *(void *)((char *)v4 + v107);
  uint64_t v108 = v22[16];
  uint64_t v109 = v22[17];
  uint64_t v110 = (void *)((char *)v23 + v108);
  uint64_t v111 = (void *)((char *)v4 + v108);
  uint64_t v112 = v111[1];
  *uint64_t v110 = *v111;
  v110[1] = v112;
  uint64_t v113 = (uint64_t)v23 + v109;
  uint64_t v114 = (char *)v4 + v109;
  uint64_t v115 = *(void *)((char *)v4 + v109 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v115 == 1)
  {
    *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
    *(void *)(v113 + 16) = *((void *)v114 + 2);
  }
  else
  {
    *(void *)uint64_t v113 = *(void *)v114;
    *(void *)(v113 + 8) = v115;
    *(void *)(v113 + 16) = *((void *)v114 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v116 = v22[18];
  uint64_t v117 = (void *)((char *)v23 + v116);
  uint64_t v118 = (void *)((char *)v4 + v116);
  uint64_t v119 = type metadata accessor for Quantity();
  uint64_t v120 = *(void *)(v119 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
  {
    sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
  }
  else
  {
    uint64_t v147 = v4;
    *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
    *(void *)((char *)v117 + 13) = *(void *)((char *)v118 + 13);
    uint64_t v122 = v118[4];
    v117[3] = v118[3];
    v117[4] = v122;
    uint64_t v123 = v118[6];
    v117[5] = v118[5];
    v117[6] = v123;
    uint64_t v124 = *(int *)(v119 + 28);
    uint64_t v143 = (char *)v117 + v124;
    uint64_t v144 = v120;
    uint64_t v125 = (char *)v118 + v124;
    uint64_t v126 = sub_23309AF80();
    uint64_t v127 = *(void *)(v126 - 8);
    uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v128(v125, 1, v126))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v143, v125, *(void *)(*(void *)(v129 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v143, v125, v126);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v143, 0, 1, v126);
    }
    uint64_t v130 = *(int *)(v119 + 32);
    uint64_t v131 = (void *)((char *)v117 + v130);
    uint64_t v132 = (void *)((char *)v118 + v130);
    uint64_t v133 = v132[1];
    void *v131 = *v132;
    v131[1] = v133;
    uint64_t v134 = *(void (**)(void *, void, uint64_t, uint64_t))(v144 + 56);
    swift_bridgeObjectRetain();
    v134(v117, 0, 1, v119);
    uint64_t v4 = v147;
    uint64_t v22 = v148;
    uint64_t v23 = v145;
  }
  uint64_t v135 = v22[20];
  *(void *)((char *)v23 + v22[19]) = *(void *)((char *)v4 + v22[19]);
  uint64_t v136 = (void *)((char *)v23 + v135);
  uint64_t v137 = (void *)((char *)v4 + v135);
  uint64_t v138 = v137[1];
  *uint64_t v136 = *v137;
  v136[1] = v138;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v23;
}

void *assignWithCopy for ModelsR4.Observation(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = v4[2];
  v5[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v4[4];
  if (v5[4] == 1)
  {
    if (v7 == 1)
    {
      uint64_t v8 = 1;
LABEL_6:
      *uint64_t v6 = v8;
      goto LABEL_9;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_232F042A4((uint64_t)(v5 + 4));
      uint64_t v8 = v4[4];
      goto LABEL_6;
    }
    *uint64_t v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v5[5] = v4[5];
  v5[6] = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[7] = v4[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[8] = v4[8];
  v5[9] = v4[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[10] = v4[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[10];
  uint64_t v10 = (uint64_t)v5 + v9;
  uint64_t v11 = (char *)v4 + v9;
  uint64_t v12 = type metadata accessor for FHIRDateTime();
  __dst = *(void **)(v12 - 8);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dst[6];
  int v14 = v13(v10, 1, v12);
  int v15 = v13((uint64_t)v11, 1, v12);
  uint64_t v322 = v13;
  uint64_t v324 = a3;
  uint64_t v321 = v4;
  if (!v14)
  {
    if (v15)
    {
      sub_232EA3DC4(v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_15;
    }
    *(unsigned char *)uint64_t v10 = *v11;
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    uint64_t v20 = (long long *)(v10 + 24);
    uint64_t v21 = (long long *)(v11 + 24);
    uint64_t v22 = *((void *)v11 + 7);
    if (*(void *)(v10 + 56) == 1)
    {
      if (v22 == 1)
      {
        long long v23 = *v21;
        long long v24 = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        *uint64_t v20 = v23;
        *(_OWORD *)(v10 + 40) = v24;
      }
      else
      {
        *(unsigned char *)(v10 + 24) = v11[24];
        *(unsigned char *)(v10 + 25) = v11[25];
        *(unsigned char *)(v10 + 26) = v11[26];
        long long v38 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v38;
        *(void *)(v10 + 48) = *((void *)v11 + 6);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v22 == 1)
    {
      sub_232F0434C(v10 + 24);
      uint64_t v36 = *((void *)v11 + 7);
      long long v37 = *(_OWORD *)(v11 + 40);
      *uint64_t v20 = *v21;
      *(_OWORD *)(v10 + 40) = v37;
      *(void *)(v10 + 56) = v36;
    }
    else
    {
      *(unsigned char *)(v10 + 24) = v11[24];
      *(unsigned char *)(v10 + 25) = v11[25];
      *(unsigned char *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(void *)(v10 + 48) = *((void *)v11 + 6);
      *(void *)(v10 + 56) = *((void *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = *(int *)(v12 + 28);
    uint64_t v40 = (void *)(v10 + v39);
    uint64_t v41 = &v11[v39];
    uint64_t v42 = sub_23309B300();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
    uint64_t v311 = v40;
    LODWORD(v40) = v44(v40, 1, v42);
    int v45 = v44(v41, 1, v42);
    if (v40)
    {
      if (!v45)
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v311, v41, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v311, 0, 1, v42);
        goto LABEL_36;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v47 = *(void *)(*(void *)(v46 - 8) + 64);
      uint64_t v48 = v311;
    }
    else
    {
      if (!v45)
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 24))(v311, v41, v42);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v43 + 8))(v311, v42);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v47 = *(void *)(*(void *)(v49 - 8) + 64);
      uint64_t v48 = v311;
    }
    memcpy(v48, v41, v47);
LABEL_36:
    uint64_t v4 = v321;
    uint64_t v13 = v322;
    a3 = v324;
    uint64_t v50 = *(int *)(v12 + 32);
    uint64_t v51 = (void *)(v10 + v50);
    uint64_t v52 = &v11[v50];
    *uint64_t v51 = *(void *)v52;
    v51[1] = *((void *)v52 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v15)
  {
LABEL_15:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_37;
  }
  *(unsigned char *)uint64_t v10 = *v11;
  uint64_t v16 = *((void *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(void *)(v10 + 8) = v16;
  if (*((void *)v11 + 7) == 1)
  {
    long long v17 = *(_OWORD *)(v11 + 24);
    long long v18 = *(_OWORD *)(v11 + 40);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v17;
    *(_OWORD *)(v10 + 40) = v18;
  }
  else
  {
    *(unsigned char *)(v10 + 24) = v11[24];
    *(unsigned char *)(v10 + 25) = v11[25];
    *(unsigned char *)(v10 + 26) = v11[26];
    long long v25 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v25;
    *(void *)(v10 + 48) = *((void *)v11 + 6);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = *(int *)(v12 + 28);
  uint64_t v27 = (void *)(v10 + v26);
  uint64_t v28 = &v11[v26];
  uint64_t v29 = sub_23309B300();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  a3 = v324;
  uint64_t v32 = *(int *)(v12 + 32);
  uint64_t v33 = (void *)(v10 + v32);
  uint64_t v34 = &v11[v32];
  *uint64_t v33 = *(void *)v34;
  v33[1] = *((void *)v34 + 1);
  uint64_t v35 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
  swift_bridgeObjectRetain();
  v35(v10, 0, 1, v12);
  uint64_t v13 = v322;
LABEL_37:
  uint64_t v53 = a3[11];
  uint64_t v54 = (uint64_t)v5 + v53;
  uint64_t v55 = (char *)v4 + v53;
  int v56 = v13((uint64_t)v5 + v53, 1, v12);
  int v57 = v13((uint64_t)v55, 1, v12);
  if (!v56)
  {
    if (v57)
    {
      sub_232EA3DC4(v54, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_43;
    }
    *(unsigned char *)uint64_t v54 = *v55;
    *(void *)(v54 + 8) = *((void *)v55 + 1);
    *(_WORD *)(v54 + 16) = *((_WORD *)v55 + 8);
    *(_WORD *)(v54 + 18) = *((_WORD *)v55 + 9);
    long long v62 = (long long *)(v54 + 24);
    uint64_t v63 = (long long *)(v55 + 24);
    uint64_t v64 = *((void *)v55 + 7);
    if (*(void *)(v54 + 56) == 1)
    {
      if (v64 == 1)
      {
        long long v65 = *v63;
        long long v66 = *(_OWORD *)(v55 + 40);
        *(void *)(v54 + 56) = *((void *)v55 + 7);
        long long *v62 = v65;
        *(_OWORD *)(v54 + 40) = v66;
      }
      else
      {
        *(unsigned char *)(v54 + 24) = v55[24];
        *(unsigned char *)(v54 + 25) = v55[25];
        *(unsigned char *)(v54 + 26) = v55[26];
        long long v80 = *(_OWORD *)(v55 + 28);
        *(_DWORD *)(v54 + 44) = *((_DWORD *)v55 + 11);
        *(_OWORD *)(v54 + 28) = v80;
        *(void *)(v54 + 48) = *((void *)v55 + 6);
        *(void *)(v54 + 56) = *((void *)v55 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_232F0434C(v54 + 24);
      uint64_t v78 = *((void *)v55 + 7);
      long long v79 = *(_OWORD *)(v55 + 40);
      long long *v62 = *v63;
      *(_OWORD *)(v54 + 40) = v79;
      *(void *)(v54 + 56) = v78;
    }
    else
    {
      *(unsigned char *)(v54 + 24) = v55[24];
      *(unsigned char *)(v54 + 25) = v55[25];
      *(unsigned char *)(v54 + 26) = v55[26];
      *(_DWORD *)(v54 + 28) = *((_DWORD *)v55 + 7);
      *(_WORD *)(v54 + 32) = *((_WORD *)v55 + 16);
      *(_WORD *)(v54 + 34) = *((_WORD *)v55 + 17);
      *(_WORD *)(v54 + 36) = *((_WORD *)v55 + 18);
      *(_WORD *)(v54 + 38) = *((_WORD *)v55 + 19);
      *(_WORD *)(v54 + 40) = *((_WORD *)v55 + 20);
      *(_WORD *)(v54 + 42) = *((_WORD *)v55 + 21);
      *(_WORD *)(v54 + 44) = *((_WORD *)v55 + 22);
      *(_WORD *)(v54 + 46) = *((_WORD *)v55 + 23);
      *(void *)(v54 + 48) = *((void *)v55 + 6);
      *(void *)(v54 + 56) = *((void *)v55 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v306 = v12;
    uint64_t v81 = *(int *)(v12 + 28);
    uint64_t v82 = (void *)(v54 + v81);
    uint64_t v83 = &v55[v81];
    uint64_t v84 = sub_23309B300();
    uint64_t v85 = *(void *)(v84 - 8);
    uint64_t v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
    uint64_t v312 = v82;
    LODWORD(v82) = v86(v82, 1, v84);
    int v87 = v86(v83, 1, v84);
    if (v82)
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v85 + 16))(v312, v83, v84);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v312, 0, 1, v84);
        goto LABEL_64;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v89 = *(void *)(*(void *)(v88 - 8) + 64);
      uint64_t v90 = v312;
    }
    else
    {
      if (!v87)
      {
        (*(void (**)(void *, char *, uint64_t))(v85 + 24))(v312, v83, v84);
        goto LABEL_64;
      }
      (*(void (**)(void *, uint64_t))(v85 + 8))(v312, v84);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v89 = *(void *)(*(void *)(v91 - 8) + 64);
      uint64_t v90 = v312;
    }
    memcpy(v90, v83, v89);
LABEL_64:
    uint64_t v4 = v321;
    a3 = v324;
    uint64_t v12 = v306;
    uint64_t v92 = *(int *)(v306 + 32);
    uint64_t v93 = (void *)(v54 + v92);
    uint64_t v94 = &v55[v92];
    *uint64_t v93 = *(void *)v94;
    v93[1] = *((void *)v94 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  if (v57)
  {
LABEL_43:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_65;
  }
  *(unsigned char *)uint64_t v54 = *v55;
  uint64_t v58 = *((void *)v55 + 1);
  *(_DWORD *)(v54 + 16) = *((_DWORD *)v55 + 4);
  *(void *)(v54 + 8) = v58;
  if (*((void *)v55 + 7) == 1)
  {
    long long v59 = *(_OWORD *)(v55 + 24);
    long long v60 = *(_OWORD *)(v55 + 40);
    *(void *)(v54 + 56) = *((void *)v55 + 7);
    *(_OWORD *)(v54 + 24) = v59;
    *(_OWORD *)(v54 + 40) = v60;
  }
  else
  {
    *(unsigned char *)(v54 + 24) = v55[24];
    *(unsigned char *)(v54 + 25) = v55[25];
    *(unsigned char *)(v54 + 26) = v55[26];
    long long v67 = *(_OWORD *)(v55 + 28);
    *(_DWORD *)(v54 + 44) = *((_DWORD *)v55 + 11);
    *(_OWORD *)(v54 + 28) = v67;
    *(void *)(v54 + 48) = *((void *)v55 + 6);
    *(void *)(v54 + 56) = *((void *)v55 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v68 = *(int *)(v12 + 28);
  uint64_t v69 = (void *)(v54 + v68);
  uint64_t v70 = &v55[v68];
  uint64_t v71 = sub_23309B300();
  uint64_t v72 = *(void *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  a3 = v324;
  uint64_t v74 = *(int *)(v12 + 32);
  uint64_t v75 = (void *)(v54 + v74);
  uint64_t v76 = &v55[v74];
  *uint64_t v75 = *(void *)v76;
  v75[1] = *((void *)v76 + 1);
  uint64_t v77 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
  swift_bridgeObjectRetain();
  v77(v54, 0, 1, v12);
LABEL_65:
  uint64_t v95 = a3[12];
  uint64_t v96 = (uint64_t)v5 + v95;
  uint64_t v97 = (char *)v4 + v95;
  uint64_t v98 = type metadata accessor for Period();
  long long v313 = *(void **)(v98 - 8);
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v313[6];
  int v100 = v99(v96, 1, v98);
  int v101 = v99((uint64_t)v97, 1, v98);
  if (!v100)
  {
    if (v101)
    {
      sub_232EA3DC4(v96, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_71;
    }
    uint64_t v102 = v322;
    int v106 = v322(v96, 1, v12);
    int v107 = v322((uint64_t)v97, 1, v12);
    uint64_t v103 = v324;
    if (v106)
    {
      if (!v107)
      {
        *(unsigned char *)uint64_t v96 = *v97;
        uint64_t v108 = *((void *)v97 + 1);
        *(_DWORD *)(v96 + 16) = *((_DWORD *)v97 + 4);
        *(void *)(v96 + 8) = v108;
        if (*((void *)v97 + 7) == 1)
        {
          long long v109 = *(_OWORD *)(v97 + 24);
          long long v110 = *(_OWORD *)(v97 + 40);
          *(void *)(v96 + 56) = *((void *)v97 + 7);
          *(_OWORD *)(v96 + 24) = v109;
          *(_OWORD *)(v96 + 40) = v110;
        }
        else
        {
          *(unsigned char *)(v96 + 24) = v97[24];
          *(unsigned char *)(v96 + 25) = v97[25];
          *(unsigned char *)(v96 + 26) = v97[26];
          long long v148 = *(_OWORD *)(v97 + 28);
          *(_DWORD *)(v96 + 44) = *((_DWORD *)v97 + 11);
          *(_OWORD *)(v96 + 28) = v148;
          *(void *)(v96 + 48) = *((void *)v97 + 6);
          *(void *)(v96 + 56) = *((void *)v97 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v149 = *(int *)(v12 + 28);
        uint64_t v150 = (void *)(v96 + v149);
        int v151 = &v97[v149];
        uint64_t v152 = sub_23309B300();
        uint64_t v153 = *(void *)(v152 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v153 + 16))(v150, v151, v152);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v152);
        }
        uint64_t v4 = v321;
        uint64_t v155 = *(int *)(v12 + 32);
        long long v156 = (void *)(v96 + v155);
        long long v157 = &v97[v155];
        *long long v156 = *(void *)v157;
        v156[1] = *((void *)v157 + 1);
        uint64_t v158 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
        swift_bridgeObjectRetain();
        v158(v96, 0, 1, v12);
        uint64_t v102 = v322;
        uint64_t v103 = v324;
LABEL_118:
        uint64_t v174 = *(int *)(v98 + 20);
        uint64_t v175 = v96 + v174;
        uint64_t v176 = &v97[v174];
        int v177 = v102(v175, 1, v12);
        int v178 = v102((uint64_t)v176, 1, v12);
        if (v177)
        {
          if (!v178)
          {
            *(unsigned char *)uint64_t v175 = *v176;
            uint64_t v179 = *((void *)v176 + 1);
            *(_DWORD *)(v175 + 16) = *((_DWORD *)v176 + 4);
            *(void *)(v175 + 8) = v179;
            if (*((void *)v176 + 7) == 1)
            {
              long long v180 = *(_OWORD *)(v176 + 24);
              long long v181 = *(_OWORD *)(v176 + 40);
              *(void *)(v175 + 56) = *((void *)v176 + 7);
              *(_OWORD *)(v175 + 24) = v180;
              *(_OWORD *)(v175 + 40) = v181;
            }
            else
            {
              *(unsigned char *)(v175 + 24) = v176[24];
              *(unsigned char *)(v175 + 25) = v176[25];
              *(unsigned char *)(v175 + 26) = v176[26];
              long long v279 = *(_OWORD *)(v176 + 28);
              *(_DWORD *)(v175 + 44) = *((_DWORD *)v176 + 11);
              *(_OWORD *)(v175 + 28) = v279;
              *(void *)(v175 + 48) = *((void *)v176 + 6);
              *(void *)(v175 + 56) = *((void *)v176 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v280 = *(int *)(v12 + 28);
            uint64_t v281 = (void *)(v175 + v280);
            int v282 = &v176[v280];
            uint64_t v283 = sub_23309B300();
            uint64_t v284 = *(void *)(v283 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v281, v282, *(void *)(*(void *)(v285 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v284 + 16))(v281, v282, v283);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
            }
            uint64_t v103 = v324;
            uint64_t v286 = *(int *)(v12 + 32);
            uint64_t v287 = (void *)(v175 + v286);
            uint64_t v288 = &v176[v286];
            *uint64_t v287 = *(void *)v288;
            v287[1] = *((void *)v288 + 1);
            uint64_t v289 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
            swift_bridgeObjectRetain();
            v289(v175, 0, 1, v12);
            goto LABEL_72;
          }
LABEL_124:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v175, v176, *(void *)(*(void *)(v182 - 8) + 64));
          goto LABEL_125;
        }
        if (v178)
        {
          sub_232EA3DC4(v175, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_124;
        }
        *(unsigned char *)uint64_t v175 = *v176;
        *(void *)(v175 + 8) = *((void *)v176 + 1);
        *(_WORD *)(v175 + 16) = *((_WORD *)v176 + 8);
        *(_WORD *)(v175 + 18) = *((_WORD *)v176 + 9);
        uint64_t v222 = (long long *)(v175 + 24);
        uint64_t v223 = (long long *)(v176 + 24);
        uint64_t v224 = *((void *)v176 + 7);
        if (*(void *)(v175 + 56) == 1)
        {
          if (v224 == 1)
          {
            long long v225 = *v223;
            long long v226 = *(_OWORD *)(v176 + 40);
            *(void *)(v175 + 56) = *((void *)v176 + 7);
            *uint64_t v222 = v225;
            *(_OWORD *)(v175 + 40) = v226;
          }
          else
          {
            *(unsigned char *)(v175 + 24) = v176[24];
            *(unsigned char *)(v175 + 25) = v176[25];
            *(unsigned char *)(v175 + 26) = v176[26];
            long long v292 = *(_OWORD *)(v176 + 28);
            *(_DWORD *)(v175 + 44) = *((_DWORD *)v176 + 11);
            *(_OWORD *)(v175 + 28) = v292;
            *(void *)(v175 + 48) = *((void *)v176 + 6);
            *(void *)(v175 + 56) = *((void *)v176 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v224 == 1)
        {
          sub_232F0434C(v175 + 24);
          uint64_t v290 = *((void *)v176 + 7);
          long long v291 = *(_OWORD *)(v176 + 40);
          *uint64_t v222 = *v223;
          *(_OWORD *)(v175 + 40) = v291;
          *(void *)(v175 + 56) = v290;
        }
        else
        {
          *(unsigned char *)(v175 + 24) = v176[24];
          *(unsigned char *)(v175 + 25) = v176[25];
          *(unsigned char *)(v175 + 26) = v176[26];
          *(_DWORD *)(v175 + 28) = *((_DWORD *)v176 + 7);
          *(_WORD *)(v175 + 32) = *((_WORD *)v176 + 16);
          *(_WORD *)(v175 + 34) = *((_WORD *)v176 + 17);
          *(_WORD *)(v175 + 36) = *((_WORD *)v176 + 18);
          *(_WORD *)(v175 + 38) = *((_WORD *)v176 + 19);
          *(_WORD *)(v175 + 40) = *((_WORD *)v176 + 20);
          *(_WORD *)(v175 + 42) = *((_WORD *)v176 + 21);
          *(_WORD *)(v175 + 44) = *((_WORD *)v176 + 22);
          *(_WORD *)(v175 + 46) = *((_WORD *)v176 + 23);
          *(void *)(v175 + 48) = *((void *)v176 + 6);
          *(void *)(v175 + 56) = *((void *)v176 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v293 = *(int *)(v12 + 28);
        uint64_t v294 = (void *)(v175 + v293);
        uint64_t v295 = &v176[v293];
        uint64_t v296 = sub_23309B300();
        uint64_t v308 = *(void *)(v296 - 8);
        int v297 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v308 + 48);
        uint64_t v316 = v294;
        LODWORD(v294) = v297(v294, 1, v296);
        int v298 = v297(v295, 1, v296);
        if (v294)
        {
          if (!v298)
          {
            (*(void (**)(void *, char *, uint64_t))(v308 + 16))(v316, v295, v296);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v308 + 56))(v316, 0, 1, v296);
            goto LABEL_199;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v300 = *(void *)(*(void *)(v299 - 8) + 64);
          uint64_t v301 = v316;
        }
        else
        {
          if (!v298)
          {
            (*(void (**)(void *, char *, uint64_t))(v308 + 24))(v316, v295, v296);
            goto LABEL_199;
          }
          (*(void (**)(void *, uint64_t))(v308 + 8))(v316, v296);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v300 = *(void *)(*(void *)(v302 - 8) + 64);
          uint64_t v301 = v316;
        }
        memcpy(v301, v295, v300);
LABEL_199:
        uint64_t v4 = v321;
        uint64_t v102 = v322;
        uint64_t v303 = *(int *)(v12 + 32);
        uint64_t v304 = (void *)(v175 + v303);
        uint64_t v305 = &v176[v303];
        *uint64_t v304 = *(void *)v305;
        v304[1] = *((void *)v305 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v103 = v324;
        goto LABEL_125;
      }
LABEL_81:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v96, v97, *(void *)(*(void *)(v114 - 8) + 64));
      goto LABEL_118;
    }
    if (v107)
    {
      sub_232EA3DC4(v96, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_81;
    }
    *(unsigned char *)uint64_t v96 = *v97;
    *(void *)(v96 + 8) = *((void *)v97 + 1);
    *(_WORD *)(v96 + 16) = *((_WORD *)v97 + 8);
    *(_WORD *)(v96 + 18) = *((_WORD *)v97 + 9);
    uint64_t v143 = (long long *)(v96 + 24);
    uint64_t v144 = (long long *)(v97 + 24);
    uint64_t v145 = *((void *)v97 + 7);
    if (*(void *)(v96 + 56) == 1)
    {
      if (v145 == 1)
      {
        long long v146 = *v144;
        long long v147 = *(_OWORD *)(v97 + 40);
        *(void *)(v96 + 56) = *((void *)v97 + 7);
        *uint64_t v143 = v146;
        *(_OWORD *)(v96 + 40) = v147;
      }
      else
      {
        *(unsigned char *)(v96 + 24) = v97[24];
        *(unsigned char *)(v96 + 25) = v97[25];
        *(unsigned char *)(v96 + 26) = v97[26];
        long long v161 = *(_OWORD *)(v97 + 28);
        *(_DWORD *)(v96 + 44) = *((_DWORD *)v97 + 11);
        *(_OWORD *)(v96 + 28) = v161;
        *(void *)(v96 + 48) = *((void *)v97 + 6);
        *(void *)(v96 + 56) = *((void *)v97 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v145 == 1)
    {
      sub_232F0434C(v96 + 24);
      uint64_t v159 = *((void *)v97 + 7);
      long long v160 = *(_OWORD *)(v97 + 40);
      *uint64_t v143 = *v144;
      *(_OWORD *)(v96 + 40) = v160;
      *(void *)(v96 + 56) = v159;
    }
    else
    {
      *(unsigned char *)(v96 + 24) = v97[24];
      *(unsigned char *)(v96 + 25) = v97[25];
      *(unsigned char *)(v96 + 26) = v97[26];
      *(_DWORD *)(v96 + 28) = *((_DWORD *)v97 + 7);
      *(_WORD *)(v96 + 32) = *((_WORD *)v97 + 16);
      *(_WORD *)(v96 + 34) = *((_WORD *)v97 + 17);
      *(_WORD *)(v96 + 36) = *((_WORD *)v97 + 18);
      *(_WORD *)(v96 + 38) = *((_WORD *)v97 + 19);
      *(_WORD *)(v96 + 40) = *((_WORD *)v97 + 20);
      *(_WORD *)(v96 + 42) = *((_WORD *)v97 + 21);
      *(_WORD *)(v96 + 44) = *((_WORD *)v97 + 22);
      *(_WORD *)(v96 + 46) = *((_WORD *)v97 + 23);
      *(void *)(v96 + 48) = *((void *)v97 + 6);
      *(void *)(v96 + 56) = *((void *)v97 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v162 = *(int *)(v12 + 28);
    size_t v163 = (void *)(v96 + v162);
    uint64_t v314 = &v97[v162];
    uint64_t v164 = sub_23309B300();
    uint64_t v307 = *(void *)(v164 - 8);
    uint64_t v165 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v307 + 48);
    __srca = v163;
    LODWORD(v163) = v165(v163, 1, v164);
    int v166 = v165(v314, 1, v164);
    if (v163)
    {
      uint64_t v102 = v322;
      if (!v166)
      {
        (*(void (**)(void *, char *, uint64_t))(v307 + 16))(__srca, v314, v164);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v307 + 56))(__srca, 0, 1, v164);
        goto LABEL_117;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v168 = *(void *)(*(void *)(v167 - 8) + 64);
      uint64_t v169 = __srca;
    }
    else
    {
      uint64_t v102 = v322;
      if (!v166)
      {
        (*(void (**)(void *, char *, uint64_t))(v307 + 24))(__srca, v314, v164);
        goto LABEL_117;
      }
      (*(void (**)(void *, uint64_t))(v307 + 8))(__srca, v164);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v168 = *(void *)(*(void *)(v170 - 8) + 64);
      uint64_t v169 = __srca;
    }
    memcpy(v169, v314, v168);
LABEL_117:
    uint64_t v103 = v324;
    uint64_t v171 = *(int *)(v12 + 32);
    uint64_t v172 = (void *)(v96 + v171);
    uint64_t v173 = &v97[v171];
    void *v172 = *(void *)v173;
    v172[1] = *((void *)v173 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v4 = v321;
    goto LABEL_118;
  }
  if (v101)
  {
LABEL_71:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v96, v97, *(void *)(*(void *)(v105 - 8) + 64));
    uint64_t v103 = v324;
LABEL_72:
    uint64_t v102 = v322;
    goto LABEL_125;
  }
  uint64_t v102 = v322;
  uint64_t v103 = v324;
  if (v322((uint64_t)v97, 1, v12))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v96, v97, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v96 = *v97;
    uint64_t v111 = *((void *)v97 + 1);
    *(_DWORD *)(v96 + 16) = *((_DWORD *)v97 + 4);
    *(void *)(v96 + 8) = v111;
    if (*((void *)v97 + 7) == 1)
    {
      long long v112 = *(_OWORD *)(v97 + 24);
      long long v113 = *(_OWORD *)(v97 + 40);
      *(void *)(v96 + 56) = *((void *)v97 + 7);
      *(_OWORD *)(v96 + 24) = v112;
      *(_OWORD *)(v96 + 40) = v113;
    }
    else
    {
      *(unsigned char *)(v96 + 24) = v97[24];
      *(unsigned char *)(v96 + 25) = v97[25];
      *(unsigned char *)(v96 + 26) = v97[26];
      long long v115 = *(_OWORD *)(v97 + 28);
      *(_DWORD *)(v96 + 44) = *((_DWORD *)v97 + 11);
      *(_OWORD *)(v96 + 28) = v115;
      *(void *)(v96 + 48) = *((void *)v97 + 6);
      *(void *)(v96 + 56) = *((void *)v97 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v116 = *(int *)(v12 + 28);
    uint64_t v117 = (void *)(v96 + v116);
    uint64_t v118 = &v97[v116];
    uint64_t v119 = sub_23309B300();
    uint64_t v120 = *(void *)(v119 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v120 + 16))(v117, v118, v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
    }
    uint64_t v4 = v321;
    uint64_t v122 = *(int *)(v12 + 32);
    uint64_t v123 = (void *)(v96 + v122);
    uint64_t v124 = &v97[v122];
    void *v123 = *(void *)v124;
    v123[1] = *((void *)v124 + 1);
    uint64_t v125 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
    swift_bridgeObjectRetain();
    v125(v96, 0, 1, v12);
    uint64_t v102 = v322;
    uint64_t v103 = v324;
  }
  uint64_t v126 = *(int *)(v98 + 20);
  uint64_t v127 = (char *)(v96 + v126);
  uint64_t v128 = &v97[v126];
  if (v102((uint64_t)v128, 1, v12))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v127, v128, *(void *)(*(void *)(v129 - 8) + 64));
  }
  else
  {
    *uint64_t v127 = *v128;
    uint64_t v130 = *((void *)v128 + 1);
    *((_DWORD *)v127 + 4) = *((_DWORD *)v128 + 4);
    *((void *)v127 + 1) = v130;
    if (*((void *)v128 + 7) == 1)
    {
      long long v131 = *(_OWORD *)(v128 + 24);
      long long v132 = *(_OWORD *)(v128 + 40);
      *((void *)v127 + 7) = *((void *)v128 + 7);
      *(_OWORD *)(v127 + 24) = v131;
      *(_OWORD *)(v127 + 40) = v132;
    }
    else
    {
      v127[24] = v128[24];
      v127[25] = v128[25];
      v127[26] = v128[26];
      long long v133 = *(_OWORD *)(v128 + 28);
      *((_DWORD *)v127 + 11) = *((_DWORD *)v128 + 11);
      *(_OWORD *)(v127 + 28) = v133;
      *((void *)v127 + 6) = *((void *)v128 + 6);
      *((void *)v127 + 7) = *((void *)v128 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v134 = *(int *)(v12 + 28);
    __src = &v127[v134];
    uint64_t v135 = &v128[v134];
    uint64_t v136 = sub_23309B300();
    uint64_t v137 = *(void *)(v136 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v135, *(void *)(*(void *)(v138 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v137 + 16))(__src, v135, v136);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v137 + 56))(__src, 0, 1, v136);
    }
    uint64_t v103 = v324;
    uint64_t v139 = *(int *)(v12 + 32);
    int v140 = &v127[v139];
    uint64_t v141 = &v128[v139];
    *(void *)int v140 = *(void *)v141;
    *((void *)v140 + 1) = *((void *)v141 + 1);
    size_t v142 = (void (*)(char *, void, uint64_t, uint64_t))__dst[7];
    swift_bridgeObjectRetain();
    v142(v127, 0, 1, v12);
    uint64_t v4 = v321;
    uint64_t v102 = v322;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v313[7])(v96, 0, 1, v98);
LABEL_125:
  uint64_t v183 = v103[13];
  uint64_t v184 = (uint64_t)v5 + v183;
  int v185 = (char *)v4 + v183;
  int v186 = v102((uint64_t)v5 + v183, 1, v12);
  int v187 = v102((uint64_t)v185, 1, v12);
  if (!v186)
  {
    if (v187)
    {
      sub_232EA3DC4(v184, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_131;
    }
    *(unsigned char *)uint64_t v184 = *v185;
    *(void *)(v184 + 8) = *((void *)v185 + 1);
    *(_WORD *)(v184 + 16) = *((_WORD *)v185 + 8);
    *(_WORD *)(v184 + 18) = *((_WORD *)v185 + 9);
    int v192 = (long long *)(v184 + 24);
    uint64_t v193 = (long long *)(v185 + 24);
    uint64_t v194 = *((void *)v185 + 7);
    if (*(void *)(v184 + 56) == 1)
    {
      if (v194 == 1)
      {
        long long v195 = *v193;
        long long v196 = *(_OWORD *)(v185 + 40);
        *(void *)(v184 + 56) = *((void *)v185 + 7);
        *int v192 = v195;
        *(_OWORD *)(v184 + 40) = v196;
      }
      else
      {
        *(unsigned char *)(v184 + 24) = v185[24];
        *(unsigned char *)(v184 + 25) = v185[25];
        *(unsigned char *)(v184 + 26) = v185[26];
        long long v210 = *(_OWORD *)(v185 + 28);
        *(_DWORD *)(v184 + 44) = *((_DWORD *)v185 + 11);
        *(_OWORD *)(v184 + 28) = v210;
        *(void *)(v184 + 48) = *((void *)v185 + 6);
        *(void *)(v184 + 56) = *((void *)v185 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v194 == 1)
    {
      sub_232F0434C(v184 + 24);
      uint64_t v208 = *((void *)v185 + 7);
      long long v209 = *(_OWORD *)(v185 + 40);
      *int v192 = *v193;
      *(_OWORD *)(v184 + 40) = v209;
      *(void *)(v184 + 56) = v208;
    }
    else
    {
      *(unsigned char *)(v184 + 24) = v185[24];
      *(unsigned char *)(v184 + 25) = v185[25];
      *(unsigned char *)(v184 + 26) = v185[26];
      *(_DWORD *)(v184 + 28) = *((_DWORD *)v185 + 7);
      *(_WORD *)(v184 + 32) = *((_WORD *)v185 + 16);
      *(_WORD *)(v184 + 34) = *((_WORD *)v185 + 17);
      *(_WORD *)(v184 + 36) = *((_WORD *)v185 + 18);
      *(_WORD *)(v184 + 38) = *((_WORD *)v185 + 19);
      *(_WORD *)(v184 + 40) = *((_WORD *)v185 + 20);
      *(_WORD *)(v184 + 42) = *((_WORD *)v185 + 21);
      *(_WORD *)(v184 + 44) = *((_WORD *)v185 + 22);
      *(_WORD *)(v184 + 46) = *((_WORD *)v185 + 23);
      *(void *)(v184 + 48) = *((void *)v185 + 6);
      *(void *)(v184 + 56) = *((void *)v185 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v211 = *(int *)(v12 + 28);
    long long v212 = (void *)(v184 + v211);
    long long v213 = &v185[v211];
    uint64_t v214 = sub_23309B300();
    uint64_t v215 = *(void *)(v214 - 8);
    uint64_t v216 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v215 + 48);
    __dsta = v212;
    LODWORD(v212) = v216(v212, 1, v214);
    int v217 = v216(v213, 1, v214);
    if (v212)
    {
      if (!v217)
      {
        (*(void (**)(void *, char *, uint64_t))(v215 + 16))(__dsta, v213, v214);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v215 + 56))(__dsta, 0, 1, v214);
        goto LABEL_155;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v219 = *(void *)(*(void *)(v218 - 8) + 64);
      uint64_t v220 = __dsta;
    }
    else
    {
      if (!v217)
      {
        (*(void (**)(void *, char *, uint64_t))(v215 + 24))(__dsta, v213, v214);
        goto LABEL_155;
      }
      (*(void (**)(void *, uint64_t))(v215 + 8))(__dsta, v214);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v219 = *(void *)(*(void *)(v221 - 8) + 64);
      uint64_t v220 = __dsta;
    }
    memcpy(v220, v213, v219);
LABEL_155:
    uint64_t v4 = v321;
    uint64_t v103 = v324;
    uint64_t v227 = *(int *)(v12 + 32);
    uint64_t v228 = (void *)(v184 + v227);
    uint64_t v229 = &v185[v227];
    *uint64_t v228 = *(void *)v229;
    v228[1] = *((void *)v229 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_156;
  }
  if (v187)
  {
LABEL_131:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v184, v185, *(void *)(*(void *)(v191 - 8) + 64));
    goto LABEL_156;
  }
  *(unsigned char *)uint64_t v184 = *v185;
  uint64_t v188 = *((void *)v185 + 1);
  *(_DWORD *)(v184 + 16) = *((_DWORD *)v185 + 4);
  *(void *)(v184 + 8) = v188;
  if (*((void *)v185 + 7) == 1)
  {
    long long v189 = *(_OWORD *)(v185 + 24);
    long long v190 = *(_OWORD *)(v185 + 40);
    *(void *)(v184 + 56) = *((void *)v185 + 7);
    *(_OWORD *)(v184 + 24) = v189;
    *(_OWORD *)(v184 + 40) = v190;
  }
  else
  {
    *(unsigned char *)(v184 + 24) = v185[24];
    *(unsigned char *)(v184 + 25) = v185[25];
    *(unsigned char *)(v184 + 26) = v185[26];
    long long v197 = *(_OWORD *)(v185 + 28);
    *(_DWORD *)(v184 + 44) = *((_DWORD *)v185 + 11);
    *(_OWORD *)(v184 + 28) = v197;
    *(void *)(v184 + 48) = *((void *)v185 + 6);
    *(void *)(v184 + 56) = *((void *)v185 + 7);
    swift_bridgeObjectRetain();
  }
  uint64_t v198 = *(int *)(v12 + 28);
  uint64_t v199 = (void *)(v184 + v198);
  uint64_t v200 = &v185[v198];
  uint64_t v201 = sub_23309B300();
  uint64_t v202 = *(void *)(v201 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v200, 1, v201))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v199, v200, *(void *)(*(void *)(v203 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v202 + 16))(v199, v200, v201);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v202 + 56))(v199, 0, 1, v201);
  }
  uint64_t v103 = v324;
  uint64_t v204 = *(int *)(v12 + 32);
  uint64_t v205 = (void *)(v184 + v204);
  long long v206 = &v185[v204];
  void *v205 = *(void *)v206;
  v205[1] = *((void *)v206 + 1);
  long long v207 = (void (*)(uint64_t, void, uint64_t, uint64_t))__dst[7];
  swift_bridgeObjectRetain();
  v207(v184, 0, 1, v12);
LABEL_156:
  *(void *)((char *)v5 + v103[14]) = *(void *)((char *)v4 + v103[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v5 + v103[15]) = *(void *)((char *)v4 + v103[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v230 = v103[16];
  uint64_t v231 = (void *)((char *)v5 + v230);
  uint64_t v232 = (void *)((char *)v4 + v230);
  *uint64_t v231 = *v232;
  v231[1] = v232[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v233 = v103[17];
  uint64_t v234 = (uint64_t)v5 + v233;
  uint64_t v235 = (char *)v4 + v233;
  uint64_t v236 = *(void *)((char *)v5 + v233 + 8);
  uint64_t v237 = *(void *)((char *)v4 + v233 + 8);
  if (v236 == 1)
  {
    if (v237 == 1)
    {
      long long v238 = *(_OWORD *)v235;
      *(void *)(v234 + 16) = *((void *)v235 + 2);
      *(_OWORD *)uint64_t v234 = v238;
    }
    else
    {
      *(void *)uint64_t v234 = *(void *)v235;
      *(void *)(v234 + 8) = *((void *)v235 + 1);
      *(void *)(v234 + 16) = *((void *)v235 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v237 == 1)
  {
    sub_232F042F8(v234);
    uint64_t v239 = *((void *)v235 + 2);
    *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
    *(void *)(v234 + 16) = v239;
  }
  else
  {
    *(void *)uint64_t v234 = *(void *)v235;
    *(void *)(v234 + 8) = *((void *)v235 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v234 + 16) = *((void *)v235 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v240 = v103[18];
  uint64_t v241 = (void *)((char *)v5 + v240);
  uint64_t v242 = (void *)((char *)v4 + v240);
  uint64_t v243 = type metadata accessor for Quantity();
  uint64_t v244 = *(void **)(v243 - 8);
  uint64_t v245 = (uint64_t (*)(void *, uint64_t, uint64_t))v244[6];
  int v246 = v245(v241, 1, v243);
  int v247 = v245(v242, 1, v243);
  if (!v246)
  {
    if (v247)
    {
      sub_232EA3DC4((uint64_t)v241, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_169;
    }
    long long v256 = *(_OWORD *)v242;
    *(void *)((char *)v241 + 13) = *(void *)((char *)v242 + 13);
    *(_OWORD *)uint64_t v241 = v256;
    v241[3] = v242[3];
    v241[4] = v242[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v241[5] = v242[5];
    v241[6] = v242[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v257 = *(int *)(v243 + 28);
    uint64_t v258 = (char *)v241 + v257;
    uint64_t v259 = (char *)v242 + v257;
    uint64_t v260 = sub_23309AF80();
    uint64_t v261 = *(void *)(v260 - 8);
    uint64_t v262 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v261 + 48);
    __dstc = v258;
    LODWORD(v258) = v262(v258, 1, v260);
    int v263 = v262(v259, 1, v260);
    if (v258)
    {
      if (!v263)
      {
        (*(void (**)(void *, char *, uint64_t))(v261 + 16))(__dstc, v259, v260);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v261 + 56))(__dstc, 0, 1, v260);
        goto LABEL_180;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v265 = *(void *)(*(void *)(v264 - 8) + 64);
      int v266 = __dstc;
    }
    else
    {
      if (!v263)
      {
        (*(void (**)(void *, char *, uint64_t))(v261 + 24))(__dstc, v259, v260);
        goto LABEL_180;
      }
      (*(void (**)(void *, uint64_t))(v261 + 8))(__dstc, v260);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v265 = *(void *)(*(void *)(v271 - 8) + 64);
      int v266 = __dstc;
    }
    memcpy(v266, v259, v265);
LABEL_180:
    uint64_t v4 = v321;
    uint64_t v103 = v324;
    uint64_t v272 = *(int *)(v243 + 32);
    uint64_t v273 = (void *)((char *)v241 + v272);
    uint64_t v274 = (void *)((char *)v242 + v272);
    void *v273 = *v274;
    v273[1] = v274[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_181;
  }
  if (v247)
  {
LABEL_169:
    sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v241, v242, *(void *)(*(void *)(v255 - 8) + 64));
    goto LABEL_181;
  }
  uint64_t v323 = v5;
  long long v248 = *(_OWORD *)v242;
  *(void *)((char *)v241 + 13) = *(void *)((char *)v242 + 13);
  *(_OWORD *)uint64_t v241 = v248;
  v241[3] = v242[3];
  v241[4] = v242[4];
  v241[5] = v242[5];
  v241[6] = v242[6];
  uint64_t v249 = *(int *)(v243 + 28);
  uint64_t v315 = v244;
  __dstb = (char *)v241 + v249;
  uint64_t v250 = (char *)v242 + v249;
  uint64_t v251 = sub_23309AF80();
  uint64_t v252 = *(void *)(v251 - 8);
  uint64_t v253 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v253(v250, 1, v251))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(__dstb, v250, *(void *)(*(void *)(v254 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v252 + 16))(__dstb, v250, v251);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(__dstb, 0, 1, v251);
  }
  uint64_t v4 = v321;
  uint64_t v103 = v324;
  uint64_t v267 = *(int *)(v243 + 32);
  unsigned int v268 = (void *)((char *)v241 + v267);
  uint64_t v269 = (void *)((char *)v242 + v267);
  void *v268 = *v269;
  v268[1] = v269[1];
  uint64_t v270 = (void (*)(void *, void, uint64_t, uint64_t))v315[7];
  swift_bridgeObjectRetain();
  v270(v241, 0, 1, v243);
  uint64_t v5 = v323;
LABEL_181:
  *(void *)((char *)v5 + v103[19]) = *(void *)((char *)v4 + v103[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v275 = v103[20];
  uint64_t v276 = (void *)((char *)v5 + v275);
  long long v277 = (void *)((char *)v4 + v275);
  *uint64_t v276 = *v277;
  v276[1] = v277[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t initializeWithTake for ModelsR4.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v8 = a3[10];
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v11 = type metadata accessor for FHIRDateTime();
  uint64_t v82 = *(void **)(v11 - 8);
  uint64_t v12 = (unsigned int (*)(void, void, void))v82[6];
  uint64_t v81 = v12;
  if (v12(v10, 1, v11))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *uint64_t v9 = *v10;
    *((void *)v9 + 1) = *((void *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((void *)v9 + 7) = *((void *)v10 + 7);
    uint64_t v14 = *(int *)(v11 + 28);
    int v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = sub_23309B300();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v82[7])(v9, 0, 1, v11);
    uint64_t v12 = v81;
  }
  uint64_t v20 = a3[11];
  uint64_t v21 = (unsigned char *)(a1 + v20);
  uint64_t v22 = (unsigned char *)(a2 + v20);
  if (v12(a2 + v20, 1, v11))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v21 = *v22;
    *((void *)v21 + 1) = *((void *)v22 + 1);
    *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((void *)v21 + 7) = *((void *)v22 + 7);
    uint64_t v24 = *(int *)(v11 + 28);
    long long v25 = &v21[v24];
    uint64_t v26 = &v22[v24];
    uint64_t v27 = sub_23309B300();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v82[7])(v21, 0, 1, v11);
    uint64_t v12 = v81;
  }
  uint64_t v30 = a3[12];
  uint64_t v31 = (unsigned char *)(a1 + v30);
  uint64_t v32 = (unsigned char *)(a2 + v30);
  uint64_t v33 = type metadata accessor for Period();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v80 = v34;
    if (v12(v32, 1, v11))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      *uint64_t v31 = *v32;
      *((void *)v31 + 1) = *((void *)v32 + 1);
      *((_DWORD *)v31 + 4) = *((_DWORD *)v32 + 4);
      *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
      *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
      *((void *)v31 + 7) = *((void *)v32 + 7);
      uint64_t v37 = *(int *)(v11 + 28);
      __dst = &v31[v37];
      long long v38 = &v32[v37];
      uint64_t v39 = sub_23309B300();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v40 + 32))(__dst, v38, v39);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      *(_OWORD *)&v31[*(int *)(v11 + 32)] = *(_OWORD *)&v32[*(int *)(v11 + 32)];
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v82[7])(v31, 0, 1, v11);
      uint64_t v12 = v81;
    }
    uint64_t v42 = *(int *)(v33 + 20);
    uint64_t v43 = &v31[v42];
    uint64_t v44 = &v32[v42];
    if (v12(v44, 1, v11))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      *uint64_t v43 = *v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
      *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
      *(_OWORD *)(v43 + 40) = *(_OWORD *)(v44 + 40);
      *((void *)v43 + 7) = *((void *)v44 + 7);
      uint64_t v46 = *(int *)(v11 + 28);
      __dsta = &v43[v46];
      size_t v47 = &v44[v46];
      uint64_t v48 = sub_23309B300();
      uint64_t v77 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v77 + 48))(v47, 1, v48))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v47, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v77 + 32))(__dsta, v47, v48);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v77 + 56))(__dsta, 0, 1, v48);
      }
      *(_OWORD *)&v43[*(int *)(v11 + 32)] = *(_OWORD *)&v44[*(int *)(v11 + 32)];
      ((void (*)(unsigned char *, void, uint64_t, uint64_t))v82[7])(v43, 0, 1, v11);
      uint64_t v12 = v81;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v31, 0, 1, v33);
  }
  uint64_t v50 = a3[13];
  uint64_t v51 = (unsigned char *)(a1 + v50);
  uint64_t v52 = (unsigned char *)(a2 + v50);
  if (v12(a2 + v50, 1, v11))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    *uint64_t v51 = *v52;
    *((void *)v51 + 1) = *((void *)v52 + 1);
    *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
    *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
    *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
    *((void *)v51 + 7) = *((void *)v52 + 7);
    uint64_t v54 = *(int *)(v11 + 28);
    uint64_t v55 = &v51[v54];
    int v56 = &v52[v54];
    uint64_t v57 = sub_23309B300();
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v58 + 32))(v55, v56, v57);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    *(_OWORD *)&v51[*(int *)(v11 + 32)] = *(_OWORD *)&v52[*(int *)(v11 + 32)];
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v82[7])(v51, 0, 1, v11);
  }
  uint64_t v60 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(void *)(a1 + v60) = *(void *)(a2 + v60);
  uint64_t v61 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  *(void *)(v62 + 16) = *(void *)(v63 + 16);
  uint64_t v64 = a3[18];
  long long v65 = (_OWORD *)(a1 + v64);
  long long v66 = (_OWORD *)(a2 + v64);
  uint64_t v67 = type metadata accessor for Quantity();
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    *long long v65 = *v66;
    *(void *)((char *)v65 + 13) = *(void *)((char *)v66 + 13);
    *(_OWORD *)((char *)v65 + 24) = *(_OWORD *)((char *)v66 + 24);
    *(_OWORD *)((char *)v65 + 40) = *(_OWORD *)((char *)v66 + 40);
    uint64_t v70 = *(int *)(v67 + 28);
    uint64_t v83 = (char *)v65 + v70;
    uint64_t v71 = (char *)v66 + v70;
    uint64_t v72 = sub_23309AF80();
    uint64_t v73 = *(void *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v83, v71, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v83, v71, v72);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v83, 0, 1, v72);
    }
    *(_OWORD *)((char *)v65 + *(int *)(v67 + 32)) = *(_OWORD *)((char *)v66 + *(int *)(v67 + 32));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  uint64_t v75 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v75) = *(_OWORD *)(a2 + v75);
  return a1;
}

void *assignWithTake for ModelsR4.Observation(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + 4;
  uint64_t v9 = a2[4];
  if (a1[4] == 1) {
    goto LABEL_4;
  }
  if (v9 == 1)
  {
    sub_232F042A4((uint64_t)(a1 + 4));
    uint64_t v9 = a2[4];
LABEL_4:
    *uint64_t v8 = v9;
    goto LABEL_6;
  }
  *uint64_t v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[10];
  uint64_t v13 = (uint64_t)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for FHIRDateTime();
  uint64_t v239 = *(void *)(v15 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 48);
  int v17 = v16(v13, 1, v15);
  int v18 = v16((uint64_t)v14, 1, v15);
  uint64_t v242 = a3;
  uint64_t v243 = v16;
  if (!v17)
  {
    if (v18)
    {
      sub_232EA3DC4(v13, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_12;
    }
    *(unsigned char *)uint64_t v13 = *v14;
    *(void *)(v13 + 8) = *((void *)v14 + 1);
    *(_DWORD *)(v13 + 16) = *((_DWORD *)v14 + 4);
    if (*(void *)(v13 + 56) != 1)
    {
      uint64_t v26 = *((void *)v14 + 7);
      if (v26 != 1)
      {
        *(unsigned char *)(v13 + 24) = v14[24];
        *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
        *(_DWORD *)(v13 + 28) = *((_DWORD *)v14 + 7);
        *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
        *(void *)(v13 + 48) = *((void *)v14 + 6);
        *(void *)(v13 + 56) = v26;
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t v28 = *(int *)(v15 + 28);
        uint64_t v29 = (void *)(v13 + v28);
        uint64_t v30 = &v14[v28];
        uint64_t v31 = sub_23309B300();
        uint64_t v226 = *(void *)(v31 - 8);
        uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v226 + 48);
        __dst = v29;
        LODWORD(v29) = v32(v29, 1, v31);
        int v33 = v32(v30, 1, v31);
        if (v29)
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v226 + 32))(__dst, v30, v31);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v226 + 56))(__dst, 0, 1, v31);
            goto LABEL_28;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v34 - 8) + 64);
          uint64_t v36 = __dst;
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v226 + 40))(__dst, v30, v31);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v226 + 8))(__dst, v31);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v35 = *(void *)(*(void *)(v37 - 8) + 64);
          uint64_t v36 = __dst;
        }
        memcpy(v36, v30, v35);
LABEL_28:
        a3 = v242;
        uint64_t v16 = v243;
        uint64_t v38 = *(int *)(v15 + 32);
        uint64_t v39 = (void *)(v13 + v38);
        uint64_t v40 = &v14[v38];
        uint64_t v42 = *(void *)v40;
        uint64_t v41 = *((void *)v40 + 1);
        *uint64_t v39 = v42;
        v39[1] = v41;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
      sub_232F0434C(v13 + 24);
    }
    long long v27 = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v13 + 40) = v27;
    *(void *)(v13 + 56) = *((void *)v14 + 7);
    goto LABEL_20;
  }
  if (v18)
  {
LABEL_12:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v13, v14, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_29;
  }
  *(unsigned char *)uint64_t v13 = *v14;
  *(void *)(v13 + 8) = *((void *)v14 + 1);
  *(_DWORD *)(v13 + 16) = *((_DWORD *)v14 + 4);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
  *(void *)(v13 + 56) = *((void *)v14 + 7);
  uint64_t v19 = *(int *)(v15 + 28);
  uint64_t v20 = (void *)(v13 + v19);
  uint64_t v21 = &v14[v19];
  uint64_t v22 = sub_23309B300();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  a3 = v242;
  uint64_t v16 = v243;
  *(_OWORD *)(v13 + *(int *)(v15 + 32)) = *(_OWORD *)&v14[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v13, 0, 1, v15);
LABEL_29:
  uint64_t v43 = a3[11];
  uint64_t v44 = (uint64_t)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  int v46 = v16((uint64_t)a1 + v43, 1, v15);
  int v47 = v16((uint64_t)v45, 1, v15);
  if (!v46)
  {
    if (v47)
    {
      sub_232EA3DC4(v44, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_35;
    }
    *(unsigned char *)uint64_t v44 = *v45;
    *(void *)(v44 + 8) = *((void *)v45 + 1);
    *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
    if (*(void *)(v44 + 56) != 1)
    {
      uint64_t v55 = *((void *)v45 + 7);
      if (v55 != 1)
      {
        *(unsigned char *)(v44 + 24) = v45[24];
        *(_WORD *)(v44 + 25) = *(_WORD *)(v45 + 25);
        *(_DWORD *)(v44 + 28) = *((_DWORD *)v45 + 7);
        *(_OWORD *)(v44 + 32) = *((_OWORD *)v45 + 2);
        *(void *)(v44 + 48) = *((void *)v45 + 6);
        *(void *)(v44 + 56) = v55;
        swift_bridgeObjectRelease();
LABEL_43:
        uint64_t v57 = *(int *)(v15 + 28);
        uint64_t v58 = (void *)(v44 + v57);
        uint64_t v59 = &v45[v57];
        uint64_t v60 = sub_23309B300();
        uint64_t v227 = *(void *)(v60 - 8);
        uint64_t v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v227 + 48);
        __dsta = v58;
        LODWORD(v58) = v61(v58, 1, v60);
        int v62 = v61(v59, 1, v60);
        if (v58)
        {
          if (!v62)
          {
            (*(void (**)(void *, char *, uint64_t))(v227 + 32))(__dsta, v59, v60);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v227 + 56))(__dsta, 0, 1, v60);
            goto LABEL_51;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v64 = *(void *)(*(void *)(v63 - 8) + 64);
          long long v65 = __dsta;
        }
        else
        {
          if (!v62)
          {
            (*(void (**)(void *, char *, uint64_t))(v227 + 40))(__dsta, v59, v60);
            goto LABEL_51;
          }
          (*(void (**)(void *, uint64_t))(v227 + 8))(__dsta, v60);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v64 = *(void *)(*(void *)(v66 - 8) + 64);
          long long v65 = __dsta;
        }
        memcpy(v65, v59, v64);
LABEL_51:
        a3 = v242;
        uint64_t v67 = *(int *)(v15 + 32);
        uint64_t v68 = (void *)(v44 + v67);
        uint64_t v69 = &v45[v67];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        *uint64_t v68 = v71;
        v68[1] = v70;
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
      sub_232F0434C(v44 + 24);
    }
    long long v56 = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = v56;
    *(void *)(v44 + 56) = *((void *)v45 + 7);
    goto LABEL_43;
  }
  if (v47)
  {
LABEL_35:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v44, v45, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_52;
  }
  *(unsigned char *)uint64_t v44 = *v45;
  *(void *)(v44 + 8) = *((void *)v45 + 1);
  *(_DWORD *)(v44 + 16) = *((_DWORD *)v45 + 4);
  *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
  *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
  *(void *)(v44 + 56) = *((void *)v45 + 7);
  uint64_t v48 = *(int *)(v15 + 28);
  uint64_t v49 = (void *)(v44 + v48);
  uint64_t v50 = &v45[v48];
  uint64_t v51 = sub_23309B300();
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v52 + 32))(v49, v50, v51);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  a3 = v242;
  *(_OWORD *)(v44 + *(int *)(v15 + 32)) = *(_OWORD *)&v45[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v44, 0, 1, v15);
LABEL_52:
  uint64_t v72 = a3[12];
  uint64_t v73 = (uint64_t)a1 + v72;
  uint64_t v74 = (char *)a2 + v72;
  uint64_t v75 = type metadata accessor for Period();
  __dstb = *(void **)(v75 - 8);
  uint64_t v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstb[6];
  int v77 = v76(v73, 1, v75);
  int v78 = v76((uint64_t)v74, 1, v75);
  if (!v77)
  {
    if (v78)
    {
      sub_232EA3DC4(v73, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_58;
    }
    long long v79 = v243;
    int v82 = v243(v73, 1, v15);
    int v83 = v243((uint64_t)v74, 1, v15);
    if (v82)
    {
      if (!v83)
      {
        *(unsigned char *)uint64_t v73 = *v74;
        *(void *)(v73 + 8) = *((void *)v74 + 1);
        *(_DWORD *)(v73 + 16) = *((_DWORD *)v74 + 4);
        *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
        *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
        *(void *)(v73 + 56) = *((void *)v74 + 7);
        uint64_t v84 = *(int *)(v15 + 28);
        __dstc = (void *)(v73 + v84);
        uint64_t v85 = &v74[v84];
        uint64_t v86 = sub_23309B300();
        uint64_t v87 = *(void *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstc, v85, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v87 + 32))(__dstc, v85, v86);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v87 + 56))(__dstc, 0, 1, v86);
        }
        *(_OWORD *)(v73 + *(int *)(v15 + 32)) = *(_OWORD *)&v74[*(int *)(v15 + 32)];
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v73, 0, 1, v15);
        a3 = v242;
        long long v79 = v243;
LABEL_94:
        uint64_t v121 = *(int *)(v75 + 20);
        uint64_t v122 = v73 + v121;
        uint64_t v123 = &v74[v121];
        int v124 = v79(v122, 1, v15);
        int v125 = v79((uint64_t)v123, 1, v15);
        if (v124)
        {
          if (!v125)
          {
            *(unsigned char *)uint64_t v122 = *v123;
            *(void *)(v122 + 8) = *((void *)v123 + 1);
            *(_DWORD *)(v122 + 16) = *((_DWORD *)v123 + 4);
            *(_OWORD *)(v122 + 24) = *(_OWORD *)(v123 + 24);
            *(_OWORD *)(v122 + 40) = *(_OWORD *)(v123 + 40);
            *(void *)(v122 + 56) = *((void *)v123 + 7);
            uint64_t v126 = *(int *)(v15 + 28);
            uint64_t v127 = (void *)(v122 + v126);
            uint64_t v128 = &v123[v126];
            uint64_t v129 = sub_23309B300();
            uint64_t v130 = *(void *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v127, v128, *(void *)(*(void *)(v131 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v130 + 32))(v127, v128, v129);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
            }
            a3 = v242;
            long long v79 = v243;
            *(_OWORD *)(v122 + *(int *)(v15 + 32)) = *(_OWORD *)&v123[*(int *)(v15 + 32)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v122, 0, 1, v15);
            goto LABEL_107;
          }
LABEL_100:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          memcpy((void *)v122, v123, *(void *)(*(void *)(v132 - 8) + 64));
          goto LABEL_107;
        }
        if (v125)
        {
          sub_232EA3DC4(v122, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
          goto LABEL_100;
        }
        *(unsigned char *)uint64_t v122 = *v123;
        *(void *)(v122 + 8) = *((void *)v123 + 1);
        *(_DWORD *)(v122 + 16) = *((_DWORD *)v123 + 4);
        if (*(void *)(v122 + 56) != 1)
        {
          uint64_t v133 = *((void *)v123 + 7);
          if (v133 != 1)
          {
            *(unsigned char *)(v122 + 24) = v123[24];
            *(_WORD *)(v122 + 25) = *(_WORD *)(v123 + 25);
            *(_DWORD *)(v122 + 28) = *((_DWORD *)v123 + 7);
            *(_OWORD *)(v122 + 32) = *((_OWORD *)v123 + 2);
            *(void *)(v122 + 48) = *((void *)v123 + 6);
            *(void *)(v122 + 56) = v133;
            swift_bridgeObjectRelease();
LABEL_155:
            uint64_t v211 = *(int *)(v15 + 28);
            long long v212 = (void *)(v122 + v211);
            long long v213 = &v123[v211];
            uint64_t v214 = sub_23309B300();
            uint64_t v229 = *(void *)(v214 - 8);
            uint64_t v215 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v229 + 48);
            __dste = v212;
            LODWORD(v212) = v215(v212, 1, v214);
            int v216 = v215(v213, 1, v214);
            if (v212)
            {
              if (!v216)
              {
                (*(void (**)(void *, char *, uint64_t))(v229 + 32))(__dste, v213, v214);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v229 + 56))(__dste, 0, 1, v214);
                goto LABEL_163;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v218 = *(void *)(*(void *)(v217 - 8) + 64);
              size_t v219 = __dste;
            }
            else
            {
              if (!v216)
              {
                (*(void (**)(void *, char *, uint64_t))(v229 + 40))(__dste, v213, v214);
                goto LABEL_163;
              }
              (*(void (**)(void *, uint64_t))(v229 + 8))(__dste, v214);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v218 = *(void *)(*(void *)(v220 - 8) + 64);
              size_t v219 = __dste;
            }
            memcpy(v219, v213, v218);
LABEL_163:
            a3 = v242;
            uint64_t v221 = *(int *)(v15 + 32);
            uint64_t v222 = (void *)(v122 + v221);
            uint64_t v223 = &v123[v221];
            uint64_t v225 = *(void *)v223;
            uint64_t v224 = *((void *)v223 + 1);
            *uint64_t v222 = v225;
            v222[1] = v224;
            swift_bridgeObjectRelease();
            goto LABEL_59;
          }
          sub_232F0434C(v122 + 24);
        }
        long long v134 = *(_OWORD *)(v123 + 40);
        *(_OWORD *)(v122 + 24) = *(_OWORD *)(v123 + 24);
        *(_OWORD *)(v122 + 40) = v134;
        *(void *)(v122 + 56) = *((void *)v123 + 7);
        goto LABEL_155;
      }
LABEL_68:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v73, v74, *(void *)(*(void *)(v94 - 8) + 64));
      goto LABEL_94;
    }
    if (v83)
    {
      sub_232EA3DC4(v73, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_68;
    }
    *(unsigned char *)uint64_t v73 = *v74;
    *(void *)(v73 + 8) = *((void *)v74 + 1);
    *(_DWORD *)(v73 + 16) = *((_DWORD *)v74 + 4);
    if (*(void *)(v73 + 56) != 1)
    {
      uint64_t v105 = *((void *)v74 + 7);
      if (v105 != 1)
      {
        *(unsigned char *)(v73 + 24) = v74[24];
        *(_WORD *)(v73 + 25) = *(_WORD *)(v74 + 25);
        *(_DWORD *)(v73 + 28) = *((_DWORD *)v74 + 7);
        *(_OWORD *)(v73 + 32) = *((_OWORD *)v74 + 2);
        *(void *)(v73 + 48) = *((void *)v74 + 6);
        *(void *)(v73 + 56) = v105;
        swift_bridgeObjectRelease();
LABEL_85:
        uint64_t v107 = *(int *)(v15 + 28);
        uint64_t v108 = (void *)(v73 + v107);
        __dstd = &v74[v107];
        uint64_t v109 = sub_23309B300();
        uint64_t v228 = *(void *)(v109 - 8);
        long long v110 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v228 + 48);
        __srcb = v108;
        LODWORD(v108) = v110(v108, 1, v109);
        int v111 = v110(__dstd, 1, v109);
        if (v108)
        {
          if (!v111)
          {
            (*(void (**)(void *, char *, uint64_t))(v228 + 32))(__srcb, __dstd, v109);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v228 + 56))(__srcb, 0, 1, v109);
            goto LABEL_93;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v113 = *(void *)(*(void *)(v112 - 8) + 64);
          uint64_t v114 = __srcb;
        }
        else
        {
          if (!v111)
          {
            (*(void (**)(void *, char *, uint64_t))(v228 + 40))(__srcb, __dstd, v109);
            goto LABEL_93;
          }
          (*(void (**)(void *, uint64_t))(v228 + 8))(__srcb, v109);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v113 = *(void *)(*(void *)(v115 - 8) + 64);
          uint64_t v114 = __srcb;
        }
        memcpy(v114, __dstd, v113);
LABEL_93:
        long long v79 = v243;
        uint64_t v116 = *(int *)(v15 + 32);
        uint64_t v117 = (void *)(v73 + v116);
        uint64_t v118 = &v74[v116];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        *uint64_t v117 = v120;
        v117[1] = v119;
        swift_bridgeObjectRelease();
        a3 = v242;
        goto LABEL_94;
      }
      sub_232F0434C(v73 + 24);
    }
    long long v106 = *(_OWORD *)(v74 + 40);
    *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
    *(_OWORD *)(v73 + 40) = v106;
    *(void *)(v73 + 56) = *((void *)v74 + 7);
    goto LABEL_85;
  }
  if (v78)
  {
LABEL_58:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy((void *)v73, v74, *(void *)(*(void *)(v81 - 8) + 64));
LABEL_59:
    long long v79 = v243;
    goto LABEL_107;
  }
  long long v79 = v243;
  if (v243((uint64_t)v74, 1, v15))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v73, v74, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v73 = *v74;
    *(void *)(v73 + 8) = *((void *)v74 + 1);
    *(_DWORD *)(v73 + 16) = *((_DWORD *)v74 + 4);
    *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
    *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
    *(void *)(v73 + 56) = *((void *)v74 + 7);
    uint64_t v89 = *(int *)(v15 + 28);
    __src = (void *)(v73 + v89);
    uint64_t v90 = &v74[v89];
    uint64_t v91 = sub_23309B300();
    uint64_t v92 = *(void *)(v91 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__src, v90, *(void *)(*(void *)(v93 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v92 + 32))(__src, v90, v91);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v92 + 56))(__src, 0, 1, v91);
    }
    *(_OWORD *)(v73 + *(int *)(v15 + 32)) = *(_OWORD *)&v74[*(int *)(v15 + 32)];
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v73, 0, 1, v15);
    a3 = v242;
    long long v79 = v243;
  }
  uint64_t v95 = *(int *)(v75 + 20);
  uint64_t v96 = (char *)(v73 + v95);
  uint64_t v97 = &v74[v95];
  if (v79((uint64_t)v97, 1, v15))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v96, v97, *(void *)(*(void *)(v98 - 8) + 64));
    uint64_t v99 = __dstb;
  }
  else
  {
    *uint64_t v96 = *v97;
    *((void *)v96 + 1) = *((void *)v97 + 1);
    *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
    *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
    *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
    *((void *)v96 + 7) = *((void *)v97 + 7);
    uint64_t v100 = *(int *)(v15 + 28);
    __srca = &v96[v100];
    int v101 = &v97[v100];
    uint64_t v102 = sub_23309B300();
    uint64_t v103 = *(void *)(v102 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__srca, v101, *(void *)(*(void *)(v104 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(__srca, v101, v102);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(__srca, 0, 1, v102);
    }
    a3 = v242;
    *(_OWORD *)&v96[*(int *)(v15 + 32)] = *(_OWORD *)&v97[*(int *)(v15 + 32)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(v96, 0, 1, v15);
    long long v79 = v243;
    uint64_t v99 = __dstb;
  }
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v99[7])(v73, 0, 1, v75);
LABEL_107:
  uint64_t v135 = a3[13];
  uint64_t v136 = (uint64_t)a1 + v135;
  uint64_t v137 = (char *)a2 + v135;
  int v138 = v79((uint64_t)a1 + v135, 1, v15);
  int v139 = v79((uint64_t)v137, 1, v15);
  if (!v138)
  {
    if (v139)
    {
      sub_232EA3DC4(v136, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_113;
    }
    *(unsigned char *)uint64_t v136 = *v137;
    *(void *)(v136 + 8) = *((void *)v137 + 1);
    *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
    if (*(void *)(v136 + 56) != 1)
    {
      uint64_t v147 = *((void *)v137 + 7);
      if (v147 != 1)
      {
        *(unsigned char *)(v136 + 24) = v137[24];
        *(_WORD *)(v136 + 25) = *(_WORD *)(v137 + 25);
        *(_DWORD *)(v136 + 28) = *((_DWORD *)v137 + 7);
        *(_OWORD *)(v136 + 32) = *((_OWORD *)v137 + 2);
        *(void *)(v136 + 48) = *((void *)v137 + 6);
        *(void *)(v136 + 56) = v147;
        swift_bridgeObjectRelease();
LABEL_121:
        uint64_t v149 = *(int *)(v15 + 28);
        uint64_t v150 = (void *)(v136 + v149);
        int v151 = &v137[v149];
        uint64_t v152 = sub_23309B300();
        uint64_t v240 = *(void *)(v152 - 8);
        uint64_t v153 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v240 + 48);
        uint64_t v244 = v150;
        LODWORD(v150) = v153(v150, 1, v152);
        int v154 = v153(v151, 1, v152);
        if (v150)
        {
          if (!v154)
          {
            (*(void (**)(void *, char *, uint64_t))(v240 + 32))(v244, v151, v152);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v240 + 56))(v244, 0, 1, v152);
            goto LABEL_129;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v156 = *(void *)(*(void *)(v155 - 8) + 64);
          long long v157 = v244;
        }
        else
        {
          if (!v154)
          {
            (*(void (**)(void *, char *, uint64_t))(v240 + 40))(v244, v151, v152);
            goto LABEL_129;
          }
          (*(void (**)(void *, uint64_t))(v240 + 8))(v244, v152);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v156 = *(void *)(*(void *)(v158 - 8) + 64);
          long long v157 = v244;
        }
        memcpy(v157, v151, v156);
LABEL_129:
        a3 = v242;
        uint64_t v159 = *(int *)(v15 + 32);
        long long v160 = (void *)(v136 + v159);
        long long v161 = &v137[v159];
        uint64_t v163 = *(void *)v161;
        uint64_t v162 = *((void *)v161 + 1);
        void *v160 = v163;
        v160[1] = v162;
        swift_bridgeObjectRelease();
        goto LABEL_130;
      }
      sub_232F0434C(v136 + 24);
    }
    long long v148 = *(_OWORD *)(v137 + 40);
    *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
    *(_OWORD *)(v136 + 40) = v148;
    *(void *)(v136 + 56) = *((void *)v137 + 7);
    goto LABEL_121;
  }
  if (v139)
  {
LABEL_113:
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v136, v137, *(void *)(*(void *)(v146 - 8) + 64));
    goto LABEL_130;
  }
  *(unsigned char *)uint64_t v136 = *v137;
  *(void *)(v136 + 8) = *((void *)v137 + 1);
  *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
  *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
  *(_OWORD *)(v136 + 40) = *(_OWORD *)(v137 + 40);
  *(void *)(v136 + 56) = *((void *)v137 + 7);
  uint64_t v140 = *(int *)(v15 + 28);
  uint64_t v141 = (void *)(v136 + v140);
  size_t v142 = &v137[v140];
  uint64_t v143 = sub_23309B300();
  uint64_t v144 = *(void *)(v143 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
  {
    sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v144 + 32))(v141, v142, v143);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
  }
  *(_OWORD *)(v136 + *(int *)(v15 + 32)) = *(_OWORD *)&v137[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v136, 0, 1, v15);
LABEL_130:
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  uint64_t v164 = a3[16];
  uint64_t v165 = (void *)((char *)a1 + v164);
  int v166 = (void *)((char *)a2 + v164);
  uint64_t v168 = *v166;
  uint64_t v167 = v166[1];
  void *v165 = v168;
  v165[1] = v167;
  swift_bridgeObjectRelease();
  uint64_t v169 = a3[17];
  uint64_t v170 = (uint64_t)a1 + v169;
  uint64_t v171 = (char *)a2 + v169;
  if (*(void *)((char *)a1 + v169 + 8) == 1)
  {
LABEL_133:
    *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
    *(void *)(v170 + 16) = *((void *)v171 + 2);
    goto LABEL_135;
  }
  uint64_t v172 = *((void *)v171 + 1);
  if (v172 == 1)
  {
    sub_232F042F8(v170);
    goto LABEL_133;
  }
  *(void *)uint64_t v170 = *(void *)v171;
  *(void *)(v170 + 8) = v172;
  swift_bridgeObjectRelease();
  *(void *)(v170 + 16) = *((void *)v171 + 2);
  swift_bridgeObjectRelease();
LABEL_135:
  uint64_t v173 = a3[18];
  uint64_t v174 = (uint64_t)a1 + v173;
  uint64_t v175 = (char *)a2 + v173;
  uint64_t v176 = type metadata accessor for Quantity();
  uint64_t v177 = *(void *)(v176 - 8);
  int v178 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
  int v179 = v178(v174, 1, v176);
  int v180 = v178((uint64_t)v175, 1, v176);
  if (!v179)
  {
    if (v180)
    {
      sub_232EA3DC4(v174, (uint64_t (*)(void))type metadata accessor for Quantity);
      goto LABEL_141;
    }
    *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
    *(void *)(v174 + 13) = *(void *)(v175 + 13);
    uint64_t v188 = *((void *)v175 + 4);
    *(void *)(v174 + 24) = *((void *)v175 + 3);
    *(void *)(v174 + 32) = v188;
    swift_bridgeObjectRelease();
    uint64_t v189 = *((void *)v175 + 6);
    *(void *)(v174 + 40) = *((void *)v175 + 5);
    *(void *)(v174 + 48) = v189;
    swift_bridgeObjectRelease();
    uint64_t v190 = *(int *)(v176 + 28);
    uint64_t v191 = (void *)(v174 + v190);
    int v192 = &v175[v190];
    uint64_t v193 = sub_23309AF80();
    uint64_t v241 = *(void *)(v193 - 8);
    uint64_t v194 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v241 + 48);
    uint64_t v245 = v191;
    LODWORD(v191) = v194(v191, 1, v193);
    int v195 = v194(v192, 1, v193);
    if (v191)
    {
      if (!v195)
      {
        (*(void (**)(void *, char *, uint64_t))(v241 + 32))(v245, v192, v193);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v241 + 56))(v245, 0, 1, v193);
        goto LABEL_152;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v197 = *(void *)(*(void *)(v196 - 8) + 64);
      uint64_t v198 = v245;
    }
    else
    {
      if (!v195)
      {
        (*(void (**)(void *, char *, uint64_t))(v241 + 40))(v245, v192, v193);
        goto LABEL_152;
      }
      (*(void (**)(void *, uint64_t))(v241 + 8))(v245, v193);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v197 = *(void *)(*(void *)(v199 - 8) + 64);
      uint64_t v198 = v245;
    }
    memcpy(v198, v192, v197);
LABEL_152:
    a3 = v242;
    uint64_t v200 = *(int *)(v176 + 32);
    uint64_t v201 = (void *)(v174 + v200);
    uint64_t v202 = &v175[v200];
    uint64_t v204 = *(void *)v202;
    uint64_t v203 = *((void *)v202 + 1);
    void *v201 = v204;
    v201[1] = v203;
    swift_bridgeObjectRelease();
    goto LABEL_153;
  }
  if (v180)
  {
LABEL_141:
    sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
    memcpy((void *)v174, v175, *(void *)(*(void *)(v187 - 8) + 64));
    goto LABEL_153;
  }
  *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
  *(void *)(v174 + 13) = *(void *)(v175 + 13);
  *(_OWORD *)(v174 + 24) = *(_OWORD *)(v175 + 24);
  *(_OWORD *)(v174 + 40) = *(_OWORD *)(v175 + 40);
  uint64_t v181 = *(int *)(v176 + 28);
  uint64_t v182 = (void *)(v174 + v181);
  uint64_t v183 = &v175[v181];
  uint64_t v184 = sub_23309AF80();
  uint64_t v185 = *(void *)(v184 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v183, 1, v184))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v185 + 32))(v182, v183, v184);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v185 + 56))(v182, 0, 1, v184);
  }
  a3 = v242;
  *(_OWORD *)(v174 + *(int *)(v176 + 32)) = *(_OWORD *)&v175[*(int *)(v176 + 32)];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56))(v174, 0, 1, v176);
LABEL_153:
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  swift_bridgeObjectRelease();
  uint64_t v205 = a3[20];
  long long v206 = (void *)((char *)a1 + v205);
  long long v207 = (void *)((char *)a2 + v205);
  uint64_t v209 = *v207;
  uint64_t v208 = v207[1];
  void *v206 = v209;
  v206[1] = v208;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Observation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F2BFC4);
}

uint64_t sub_232F2BFC4(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[10];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[12];
    goto LABEL_9;
  }
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[18];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Observation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F2C1E0);
}

uint64_t sub_232F2C1E0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[10];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[12];
    goto LABEL_7;
  }
  sub_232EA3854(0, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[18];
  return v15(v17, a2, a2, v16);
}

void sub_232F2C3E8()
{
  sub_232EA3854(319, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_232EA3854(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_232EA3854(319, &qword_268756578, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.HumanName(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    a1[8] = a2[8];
    uint64_t v11 = type metadata accessor for Period();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v58 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v58(v10, 1, v11))
    {
      sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v12;
      uint64_t v17 = type metadata accessor for FHIRDateTime();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      uint64_t v56 = v18;
      if (v19(v10, 1, v17))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        uint64_t v21 = __dst;
        memcpy(__dst, v13, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        unsigned char *__dst = *v10;
        *((void *)__dst + 1) = *((void *)v10 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v10 + 4);
        uint64_t v22 = *((void *)v10 + 7);
        uint64_t v55 = v11;
        if (v22 == 1)
        {
          long long v23 = *(_OWORD *)(v10 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v10 + 24);
          *(_OWORD *)(__dst + 40) = v23;
          *((void *)__dst + 7) = *((void *)v10 + 7);
        }
        else
        {
          __dst[24] = v10[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v10 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v10 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v10 + 11);
          *((void *)__dst + 6) = *((void *)v10 + 6);
          *((void *)__dst + 7) = v22;
          swift_bridgeObjectRetain();
        }
        uint64_t v24 = *(int *)(v17 + 28);
        uint64_t v25 = &__dst[v24];
        uint64_t v26 = &v10[v24];
        uint64_t v27 = sub_23309B300();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v11 = v55;
        uint64_t v13 = v10;
        uint64_t v30 = *(int *)(v17 + 32);
        uint64_t v31 = &__dst[v30];
        uint64_t v32 = &v10[v30];
        uint64_t v33 = v32[1];
        *uint64_t v31 = *v32;
        v31[1] = v33;
        uint64_t v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56);
        swift_bridgeObjectRetain();
        v34(__dst, 0, 1, v17);
        uint64_t v21 = __dst;
      }
      uint64_t v35 = *(int *)(v11 + 20);
      uint64_t v36 = &v21[v35];
      uint64_t v37 = &v13[v35];
      if (v19(&v13[v35], 1, v17))
      {
        sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
        memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
        uint64_t v39 = v59;
      }
      else
      {
        *uint64_t v36 = *v37;
        *((void *)v36 + 1) = *((void *)v37 + 1);
        *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
        uint64_t v40 = *((void *)v37 + 7);
        uint64_t v41 = v11;
        if (v40 == 1)
        {
          long long v42 = *(_OWORD *)(v37 + 40);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 24);
          *(_OWORD *)(v36 + 40) = v42;
          *((void *)v36 + 7) = *((void *)v37 + 7);
        }
        else
        {
          v36[24] = v37[24];
          *(_WORD *)(v36 + 25) = *(_WORD *)(v37 + 25);
          *(_OWORD *)(v36 + 28) = *(_OWORD *)(v37 + 28);
          *((_DWORD *)v36 + 11) = *((_DWORD *)v37 + 11);
          *((void *)v36 + 6) = *((void *)v37 + 6);
          *((void *)v36 + 7) = v40;
          swift_bridgeObjectRetain();
        }
        uint64_t v43 = *(int *)(v17 + 28);
        uint64_t v44 = &v36[v43];
        uint64_t v45 = &v37[v43];
        uint64_t v46 = sub_23309B300();
        uint64_t v47 = *(void *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        uint64_t v11 = v41;
        uint64_t v39 = v59;
        uint64_t v49 = *(int *)(v17 + 32);
        uint64_t v50 = &v36[v49];
        uint64_t v51 = &v37[v49];
        uint64_t v52 = *((void *)v51 + 1);
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = v52;
        uint64_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56);
        swift_bridgeObjectRetain();
        v53(v36, 0, 1, v17);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v39 + 56))(v21, 0, 1, v11);
    }
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t destroy for ModelsR4.HumanName(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Period();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for FHIRDateTime();
    uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(void *)(v4 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v9 = v4 + *(int *)(v7 + 28);
      uint64_t v10 = sub_23309B300();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v4 + *(int *)(v5 + 20);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!result)
    {
      if (*(void *)(v12 + 56) != 1) {
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = v12 + *(int *)(v7 + 28);
      uint64_t v14 = sub_23309B300();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void *initializeWithCopy for ModelsR4.HumanName(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = *(int *)(a3 + 40);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  a1[8] = a2[8];
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v55 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v55(v8, 1, v9))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v56 = v10;
    uint64_t v13 = type metadata accessor for FHIRDateTime();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v51 = v14;
    if (v15(v11, 1, v13))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      uint64_t v17 = __dst;
      memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      unsigned char *__dst = *v11;
      *((void *)__dst + 1) = *((void *)v11 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v11 + 4);
      uint64_t v18 = *((void *)v11 + 7);
      uint64_t v52 = v9;
      if (v18 == 1)
      {
        long long v19 = *(_OWORD *)(v11 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(__dst + 40) = v19;
        *((void *)__dst + 7) = *((void *)v11 + 7);
      }
      else
      {
        __dst[24] = v11[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v11 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v11 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v11 + 11);
        *((void *)__dst + 6) = *((void *)v11 + 6);
        *((void *)__dst + 7) = v18;
        swift_bridgeObjectRetain();
      }
      uint64_t v20 = *(int *)(v13 + 28);
      uint64_t v21 = &__dst[v20];
      uint64_t v22 = v11;
      long long v23 = &v11[v20];
      uint64_t v24 = sub_23309B300();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v21, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(v21, v23, v24);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      uint64_t v27 = *(int *)(v13 + 32);
      uint64_t v28 = &__dst[v27];
      uint64_t v11 = v22;
      uint64_t v29 = &v22[v27];
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v13);
      uint64_t v17 = __dst;
      uint64_t v9 = v52;
    }
    uint64_t v32 = *(int *)(v9 + 20);
    uint64_t v33 = &v17[v32];
    uint64_t v34 = &v11[v32];
    if (v15(&v11[v32], 1, v13))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
      uint64_t v36 = v56;
    }
    else
    {
      *uint64_t v33 = *v34;
      *((void *)v33 + 1) = *((void *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      uint64_t v37 = *((void *)v34 + 7);
      uint64_t v53 = v9;
      if (v37 == 1)
      {
        long long v38 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v38;
        *((void *)v33 + 7) = *((void *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((void *)v33 + 6) = *((void *)v34 + 6);
        *((void *)v33 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      uint64_t v39 = *(int *)(v13 + 28);
      uint64_t v40 = &v33[v39];
      uint64_t v41 = &v34[v39];
      uint64_t v42 = sub_23309B300();
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v36 = v56;
      uint64_t v45 = *(int *)(v13 + 32);
      uint64_t v46 = &v33[v45];
      uint64_t v47 = &v34[v45];
      uint64_t v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v51 + 56);
      swift_bridgeObjectRetain();
      v49(v33, 0, 1, v13);
      uint64_t v9 = v53;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v9);
  }
  return a1;
}

void *assignWithCopy for ModelsR4.HumanName(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Period();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v22 = type metadata accessor for FHIRDateTime();
    long long v23 = *(void **)(v22 - 8);
    uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23[6];
    int v25 = v24(v7, 1, v22);
    int v26 = v24((uint64_t)v8, 1, v22);
    if (v25)
    {
      if (!v26)
      {
        *(unsigned char *)uint64_t v7 = *v8;
        uint64_t v27 = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
        *(void *)(v7 + 8) = v27;
        __src = v23;
        if (*((void *)v8 + 7) == 1)
        {
          long long v28 = *(_OWORD *)(v8 + 24);
          long long v29 = *(_OWORD *)(v8 + 40);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          *(_OWORD *)(v7 + 24) = v28;
          *(_OWORD *)(v7 + 40) = v29;
        }
        else
        {
          *(unsigned char *)(v7 + 24) = v8[24];
          *(unsigned char *)(v7 + 25) = v8[25];
          *(unsigned char *)(v7 + 26) = v8[26];
          long long v67 = *(_OWORD *)(v8 + 28);
          *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
          *(_OWORD *)(v7 + 28) = v67;
          *(void *)(v7 + 48) = *((void *)v8 + 6);
          *(void *)(v7 + 56) = *((void *)v8 + 7);
          swift_bridgeObjectRetain();
        }
        uint64_t v68 = *(int *)(v22 + 28);
        __dstb = (void *)(v7 + v68);
        uint64_t v69 = &v8[v68];
        uint64_t v70 = sub_23309B300();
        uint64_t v71 = *(void *)(v70 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dstb, v69, *(void *)(*(void *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v71 + 16))(__dstb, v69, v70);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v71 + 56))(__dstb, 0, 1, v70);
        }
        uint64_t v73 = *(int *)(v22 + 32);
        uint64_t v74 = (void *)(v7 + v73);
        uint64_t v75 = &v8[v73];
        void *v74 = *(void *)v75;
        v74[1] = *((void *)v75 + 1);
        long long v23 = __src;
        uint64_t v76 = (void (*)(uint64_t, void, uint64_t, uint64_t))__src[7];
        swift_bridgeObjectRetain();
        v76(v7, 0, 1, v22);
LABEL_55:
        uint64_t v92 = *(int *)(v9 + 20);
        uint64_t v93 = v7 + v92;
        uint64_t v94 = &v8[v92];
        int v95 = v24(v93, 1, v22);
        int v96 = v24((uint64_t)v94, 1, v22);
        if (v95)
        {
          if (!v96)
          {
            *(unsigned char *)uint64_t v93 = *v94;
            uint64_t v97 = *((void *)v94 + 1);
            *(_DWORD *)(v93 + 16) = *((_DWORD *)v94 + 4);
            *(void *)(v93 + 8) = v97;
            uint64_t v98 = v23;
            if (*((void *)v94 + 7) == 1)
            {
              long long v99 = *(_OWORD *)(v94 + 24);
              long long v100 = *(_OWORD *)(v94 + 40);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              *(_OWORD *)(v93 + 24) = v99;
              *(_OWORD *)(v93 + 40) = v100;
            }
            else
            {
              *(unsigned char *)(v93 + 24) = v94[24];
              *(unsigned char *)(v93 + 25) = v94[25];
              *(unsigned char *)(v93 + 26) = v94[26];
              long long v107 = *(_OWORD *)(v94 + 28);
              *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
              *(_OWORD *)(v93 + 28) = v107;
              *(void *)(v93 + 48) = *((void *)v94 + 6);
              *(void *)(v93 + 56) = *((void *)v94 + 7);
              swift_bridgeObjectRetain();
            }
            uint64_t v108 = *(int *)(v22 + 28);
            uint64_t v109 = (void *)(v93 + v108);
            long long v110 = &v94[v108];
            uint64_t v111 = sub_23309B300();
            uint64_t v112 = *(void *)(v111 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v112 + 16))(v109, v110, v111);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
            }
            uint64_t v114 = *(int *)(v22 + 32);
            uint64_t v115 = (void *)(v93 + v114);
            uint64_t v116 = &v94[v114];
            *uint64_t v115 = *(void *)v116;
            v115[1] = *((void *)v116 + 1);
            uint64_t v117 = (void (*)(uint64_t, void, uint64_t, uint64_t))v98[7];
            swift_bridgeObjectRetain();
            v117(v93, 0, 1, v22);
            return a1;
          }
          goto LABEL_61;
        }
        if (v96)
        {
          sub_232EA3DC4(v93, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_61:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v19 = *(void *)(*(void *)(v101 - 8) + 64);
          uint64_t v20 = (void *)v93;
          uint64_t v21 = v94;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v93 = *v94;
        *(void *)(v93 + 8) = *((void *)v94 + 1);
        *(_WORD *)(v93 + 16) = *((_WORD *)v94 + 8);
        *(_WORD *)(v93 + 18) = *((_WORD *)v94 + 9);
        uint64_t v102 = (long long *)(v93 + 24);
        uint64_t v103 = (long long *)(v94 + 24);
        uint64_t v104 = *((void *)v94 + 7);
        if (*(void *)(v93 + 56) == 1)
        {
          if (v104 == 1)
          {
            long long v105 = *v103;
            long long v106 = *(_OWORD *)(v94 + 40);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            *uint64_t v102 = v105;
            *(_OWORD *)(v93 + 40) = v106;
          }
          else
          {
            *(unsigned char *)(v93 + 24) = v94[24];
            *(unsigned char *)(v93 + 25) = v94[25];
            *(unsigned char *)(v93 + 26) = v94[26];
            long long v120 = *(_OWORD *)(v94 + 28);
            *(_DWORD *)(v93 + 44) = *((_DWORD *)v94 + 11);
            *(_OWORD *)(v93 + 28) = v120;
            *(void *)(v93 + 48) = *((void *)v94 + 6);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            swift_bridgeObjectRetain();
          }
        }
        else if (v104 == 1)
        {
          sub_232F0434C(v93 + 24);
          uint64_t v118 = *((void *)v94 + 7);
          long long v119 = *(_OWORD *)(v94 + 40);
          *uint64_t v102 = *v103;
          *(_OWORD *)(v93 + 40) = v119;
          *(void *)(v93 + 56) = v118;
        }
        else
        {
          *(unsigned char *)(v93 + 24) = v94[24];
          *(unsigned char *)(v93 + 25) = v94[25];
          *(unsigned char *)(v93 + 26) = v94[26];
          *(_DWORD *)(v93 + 28) = *((_DWORD *)v94 + 7);
          *(_WORD *)(v93 + 32) = *((_WORD *)v94 + 16);
          *(_WORD *)(v93 + 34) = *((_WORD *)v94 + 17);
          *(_WORD *)(v93 + 36) = *((_WORD *)v94 + 18);
          *(_WORD *)(v93 + 38) = *((_WORD *)v94 + 19);
          *(_WORD *)(v93 + 40) = *((_WORD *)v94 + 20);
          *(_WORD *)(v93 + 42) = *((_WORD *)v94 + 21);
          *(_WORD *)(v93 + 44) = *((_WORD *)v94 + 22);
          *(_WORD *)(v93 + 46) = *((_WORD *)v94 + 23);
          *(void *)(v93 + 48) = *((void *)v94 + 6);
          *(void *)(v93 + 56) = *((void *)v94 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        uint64_t v121 = *(int *)(v22 + 28);
        uint64_t v122 = (void *)(v93 + v121);
        uint64_t v123 = &v94[v121];
        uint64_t v124 = sub_23309B300();
        uint64_t v125 = *(void *)(v124 - 8);
        uint64_t v126 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
        __dstd = v122;
        LODWORD(v122) = v126(v122, 1, v124);
        int v127 = v126(v123, 1, v124);
        if (v122)
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 16))(__dstd, v123, v124);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v125 + 56))(__dstd, 0, 1, v124);
            goto LABEL_82;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v128 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        else
        {
          if (!v127)
          {
            (*(void (**)(void *, char *, uint64_t))(v125 + 24))(__dstd, v123, v124);
            goto LABEL_82;
          }
          (*(void (**)(void *, uint64_t))(v125 + 8))(__dstd, v124);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v129 = *(void *)(*(void *)(v131 - 8) + 64);
          uint64_t v130 = __dstd;
        }
        memcpy(v130, v123, v129);
LABEL_82:
        uint64_t v132 = *(int *)(v22 + 32);
        uint64_t v133 = (void *)(v93 + v132);
        long long v134 = &v94[v132];
        void *v133 = *(void *)v134;
        v133[1] = *((void *)v134 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
LABEL_17:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
      goto LABEL_55;
    }
    if (v26)
    {
      sub_232EA3DC4(v7, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    __srcc = v23;
    *(unsigned char *)uint64_t v7 = *v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    int v62 = (long long *)(v7 + 24);
    uint64_t v63 = (long long *)(v8 + 24);
    uint64_t v64 = *((void *)v8 + 7);
    if (*(void *)(v7 + 56) == 1)
    {
      if (v64 == 1)
      {
        long long v65 = *v63;
        long long v66 = *(_OWORD *)(v8 + 40);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        long long *v62 = v65;
        *(_OWORD *)(v7 + 40) = v66;
      }
      else
      {
        *(unsigned char *)(v7 + 24) = v8[24];
        *(unsigned char *)(v7 + 25) = v8[25];
        *(unsigned char *)(v7 + 26) = v8[26];
        long long v79 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v79;
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(void *)(v7 + 56) = *((void *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_232F0434C(v7 + 24);
      uint64_t v77 = *((void *)v8 + 7);
      long long v78 = *(_OWORD *)(v8 + 40);
      long long *v62 = *v63;
      *(_OWORD *)(v7 + 40) = v78;
      *(void *)(v7 + 56) = v77;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v136 = v22;
    uint64_t v80 = *(int *)(v22 + 28);
    uint64_t v81 = (void *)(v7 + v80);
    __dstc = &v8[v80];
    uint64_t v82 = sub_23309B300();
    uint64_t v135 = *(void *)(v82 - 8);
    int v83 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v135 + 48);
    int v138 = v81;
    LODWORD(v81) = v83(v81, 1, v82);
    int v84 = v83(__dstc, 1, v82);
    if (v81)
    {
      long long v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 16))(v138, __dstc, v82);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v135 + 56))(v138, 0, 1, v82);
        goto LABEL_54;
      }
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v85 - 8) + 64);
      uint64_t v87 = v138;
    }
    else
    {
      long long v23 = __srcc;
      if (!v84)
      {
        (*(void (**)(void *, char *, uint64_t))(v135 + 24))(v138, __dstc, v82);
        goto LABEL_54;
      }
      (*(void (**)(void *, uint64_t))(v135 + 8))(v138, v82);
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      size_t v86 = *(void *)(*(void *)(v88 - 8) + 64);
      uint64_t v87 = v138;
    }
    memcpy(v87, __dstc, v86);
LABEL_54:
    uint64_t v22 = v136;
    uint64_t v89 = *(int *)(v136 + 32);
    uint64_t v90 = (void *)(v7 + v89);
    uint64_t v91 = &v8[v89];
    *uint64_t v90 = *(void *)v91;
    v90[1] = *((void *)v91 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  if (v13)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
    uint64_t v20 = (void *)v7;
    uint64_t v21 = v8;
LABEL_8:
    memcpy(v20, v21, v19);
    return a1;
  }
  uint64_t v14 = type metadata accessor for FHIRDateTime();
  uint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = (unsigned int (*)(void, void, void))v15[6];
  if (v16(v8, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(unsigned char *)uint64_t v7 = *v8;
    uint64_t v30 = *((void *)v8 + 1);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
    *(void *)(v7 + 8) = v30;
    __srca = v15;
    uint64_t v137 = v16;
    if (*((void *)v8 + 7) == 1)
    {
      long long v31 = *(_OWORD *)(v8 + 24);
      long long v32 = *(_OWORD *)(v8 + 40);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v31;
      *(_OWORD *)(v7 + 40) = v32;
    }
    else
    {
      *(unsigned char *)(v7 + 24) = v8[24];
      *(unsigned char *)(v7 + 25) = v8[25];
      *(unsigned char *)(v7 + 26) = v8[26];
      long long v34 = *(_OWORD *)(v8 + 28);
      *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v34;
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = *(int *)(v14 + 28);
    __dst = (void *)(v7 + v35);
    uint64_t v36 = &v8[v35];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    uint64_t v40 = *(int *)(v14 + 32);
    uint64_t v41 = (void *)(v7 + v40);
    uint64_t v42 = &v8[v40];
    *uint64_t v41 = *(void *)v42;
    v41[1] = *((void *)v42 + 1);
    uint64_t v15 = __srca;
    uint64_t v43 = (void (*)(uint64_t, void, uint64_t, uint64_t))__srca[7];
    swift_bridgeObjectRetain();
    v43(v7, 0, 1, v14);
    uint64_t v16 = v137;
  }
  uint64_t v44 = *(int *)(v9 + 20);
  uint64_t v45 = (char *)(v7 + v44);
  uint64_t v46 = &v8[v44];
  if (v16(v46, 1, v14))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    char *v45 = *v46;
    uint64_t v48 = *((void *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    *((void *)v45 + 1) = v48;
    __srcb = v15;
    if (*((void *)v46 + 7) == 1)
    {
      long long v49 = *(_OWORD *)(v46 + 24);
      long long v50 = *(_OWORD *)(v46 + 40);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      *(_OWORD *)(v45 + 24) = v49;
      *(_OWORD *)(v45 + 40) = v50;
    }
    else
    {
      v45[24] = v46[24];
      v45[25] = v46[25];
      v45[26] = v46[26];
      long long v51 = *(_OWORD *)(v46 + 28);
      *((_DWORD *)v45 + 11) = *((_DWORD *)v46 + 11);
      *(_OWORD *)(v45 + 28) = v51;
      *((void *)v45 + 6) = *((void *)v46 + 6);
      *((void *)v45 + 7) = *((void *)v46 + 7);
      swift_bridgeObjectRetain();
    }
    uint64_t v52 = *(int *)(v14 + 28);
    __dsta = &v45[v52];
    uint64_t v53 = &v46[v52];
    uint64_t v54 = sub_23309B300();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dsta, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
    }
    uint64_t v57 = *(int *)(v14 + 32);
    uint64_t v58 = &v45[v57];
    uint64_t v59 = &v46[v57];
    *(void *)uint64_t v58 = *(void *)v59;
    *((void *)v58 + 1) = *((void *)v59 + 1);
    uint64_t v60 = (void (*)(char *, void, uint64_t, uint64_t))__srcb[7];
    swift_bridgeObjectRetain();
    v60(v45, 0, 1, v14);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for ModelsR4.HumanName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = (unsigned char *)(a1 + v4);
  uint64_t v6 = (unsigned char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Period();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for FHIRDateTime();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = *(unsigned int (**)(void, void, void))(v11 + 48);
    if (v12(v6, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v5, v6, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      long long v29 = v12;
      *uint64_t v5 = *v6;
      *((void *)v5 + 1) = *((void *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *((void *)v5 + 7) = *((void *)v6 + 7);
      uint64_t v14 = *(int *)(v10 + 28);
      __dst = &v5[v14];
      uint64_t v32 = v11;
      uint64_t v15 = &v6[v14];
      uint64_t v16 = sub_23309B300();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v5[*(int *)(v10 + 32)] = *(_OWORD *)&v6[*(int *)(v10 + 32)];
      uint64_t v11 = v32;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v32 + 56))(v5, 0, 1, v10);
      int v12 = v29;
    }
    uint64_t v19 = *(int *)(v7 + 20);
    uint64_t v20 = &v5[v19];
    uint64_t v21 = &v6[v19];
    if (v12(v21, 1, v10))
    {
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      *uint64_t v20 = *v21;
      *((void *)v20 + 1) = *((void *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((void *)v20 + 7) = *((void *)v21 + 7);
      uint64_t v23 = *(int *)(v10 + 28);
      __dsta = &v20[v23];
      uint64_t v33 = v11;
      uint64_t v24 = &v21[v23];
      uint64_t v25 = sub_23309B300();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v26 + 32))(__dsta, v24, v25);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v33 + 56))(v20, 0, 1, v10);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for ModelsR4.HumanName(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (uint64_t)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Period();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_232EA3DC4(v10, (uint64_t (*)(void))type metadata accessor for Period);
      goto LABEL_7;
    }
    uint64_t v25 = type metadata accessor for FHIRDateTime();
    uint64_t v26 = *(void **)(v25 - 8);
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26[6];
    int v28 = v27(v10, 1, v25);
    int v29 = v27((uint64_t)v11, 1, v25);
    if (v28)
    {
      if (!v29)
      {
        *(unsigned char *)uint64_t v10 = *v11;
        *(void *)(v10 + 8) = *((void *)v11 + 1);
        *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 56) = *((void *)v11 + 7);
        uint64_t v30 = *(int *)(v25 + 28);
        __dst = (void *)(v10 + v30);
        long long v106 = (void (**)(uint64_t, void, uint64_t, uint64_t))v26;
        long long v31 = &v11[v30];
        uint64_t v32 = sub_23309B300();
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v33 + 32))(__dst, v31, v32);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
        }
        *(_OWORD *)(v10 + *(int *)(v25 + 32)) = *(_OWORD *)&v11[*(int *)(v25 + 32)];
        uint64_t v26 = v106;
        v106[7](v10, 0, 1, v25);
LABEL_44:
        uint64_t v66 = *(int *)(v12 + 20);
        uint64_t v67 = v10 + v66;
        uint64_t v68 = &v11[v66];
        int v69 = v27(v67, 1, v25);
        int v70 = v27((uint64_t)v68, 1, v25);
        if (v69)
        {
          if (!v70)
          {
            uint64_t v71 = v26;
            *(unsigned char *)uint64_t v67 = *v68;
            *(void *)(v67 + 8) = *((void *)v68 + 1);
            *(_DWORD *)(v67 + 16) = *((_DWORD *)v68 + 4);
            *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
            *(_OWORD *)(v67 + 40) = *(_OWORD *)(v68 + 40);
            *(void *)(v67 + 56) = *((void *)v68 + 7);
            uint64_t v72 = *(int *)(v25 + 28);
            uint64_t v73 = (void *)(v67 + v72);
            uint64_t v74 = &v68[v72];
            uint64_t v75 = sub_23309B300();
            uint64_t v76 = *(void *)(v75 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
            {
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v76 + 32))(v73, v74, v75);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
            }
            *(_OWORD *)(v67 + *(int *)(v25 + 32)) = *(_OWORD *)&v68[*(int *)(v25 + 32)];
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v71[7])(v67, 0, 1, v25);
            return a1;
          }
          goto LABEL_50;
        }
        if (v70)
        {
          sub_232EA3DC4(v67, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
LABEL_50:
          sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
          size_t v22 = *(void *)(*(void *)(v78 - 8) + 64);
          uint64_t v23 = (void *)v67;
          uint64_t v24 = v68;
          goto LABEL_8;
        }
        *(unsigned char *)uint64_t v67 = *v68;
        *(void *)(v67 + 8) = *((void *)v68 + 1);
        *(_DWORD *)(v67 + 16) = *((_DWORD *)v68 + 4);
        if (*(void *)(v67 + 56) != 1)
        {
          uint64_t v79 = *((void *)v68 + 7);
          if (v79 != 1)
          {
            *(unsigned char *)(v67 + 24) = v68[24];
            *(_WORD *)(v67 + 25) = *(_WORD *)(v68 + 25);
            *(_DWORD *)(v67 + 28) = *((_DWORD *)v68 + 7);
            *(_OWORD *)(v67 + 32) = *((_OWORD *)v68 + 2);
            *(void *)(v67 + 48) = *((void *)v68 + 6);
            *(void *)(v67 + 56) = v79;
            swift_bridgeObjectRelease();
LABEL_58:
            uint64_t v81 = *(int *)(v25 + 28);
            uint64_t v82 = (void *)(v67 + v81);
            int v83 = &v68[v81];
            uint64_t v84 = sub_23309B300();
            uint64_t v85 = *(void *)(v84 - 8);
            size_t v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
            __dstd = v82;
            LODWORD(v82) = v86(v82, 1, v84);
            int v87 = v86(v83, 1, v84);
            if (v82)
            {
              if (!v87)
              {
                (*(void (**)(void *, char *, uint64_t))(v85 + 32))(__dstd, v83, v84);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(__dstd, 0, 1, v84);
                goto LABEL_66;
              }
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v89 = *(void *)(*(void *)(v88 - 8) + 64);
              uint64_t v90 = __dstd;
            }
            else
            {
              if (!v87)
              {
                (*(void (**)(void *, char *, uint64_t))(v85 + 40))(__dstd, v83, v84);
                goto LABEL_66;
              }
              (*(void (**)(void *, uint64_t))(v85 + 8))(__dstd, v84);
              sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
              size_t v89 = *(void *)(*(void *)(v91 - 8) + 64);
              uint64_t v90 = __dstd;
            }
            memcpy(v90, v83, v89);
LABEL_66:
            uint64_t v92 = *(int *)(v25 + 32);
            uint64_t v93 = (void *)(v67 + v92);
            uint64_t v94 = &v68[v92];
            uint64_t v96 = *(void *)v94;
            uint64_t v95 = *((void *)v94 + 1);
            *uint64_t v93 = v96;
            v93[1] = v95;
            swift_bridgeObjectRelease();
            return a1;
          }
          sub_232F0434C(v67 + 24);
        }
        long long v80 = *(_OWORD *)(v68 + 40);
        *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
        *(_OWORD *)(v67 + 40) = v80;
        *(void *)(v67 + 56) = *((void *)v68 + 7);
        goto LABEL_58;
      }
LABEL_17:
      sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
      memcpy((void *)v10, v11, *(void *)(*(void *)(v40 - 8) + 64));
      goto LABEL_44;
    }
    if (v29)
    {
      sub_232EA3DC4(v10, (uint64_t (*)(void))type metadata accessor for FHIRDateTime);
      goto LABEL_17;
    }
    uint64_t v109 = v26;
    *(unsigned char *)uint64_t v10 = *v11;
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
    if (*(void *)(v10 + 56) != 1)
    {
      uint64_t v51 = *((void *)v11 + 7);
      if (v51 != 1)
      {
        *(unsigned char *)(v10 + 24) = v11[24];
        *(_WORD *)(v10 + 25) = *(_WORD *)(v11 + 25);
        *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
        *(_OWORD *)(v10 + 32) = *((_OWORD *)v11 + 2);
        *(void *)(v10 + 48) = *((void *)v11 + 6);
        *(void *)(v10 + 56) = v51;
        swift_bridgeObjectRelease();
LABEL_35:
        uint64_t v53 = *(int *)(v25 + 28);
        __src = &v11[v53];
        __dstc = (void *)(v10 + v53);
        uint64_t v54 = sub_23309B300();
        uint64_t v97 = *(void *)(v54 - 8);
        uint64_t v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
        int v99 = v55(__dstc, 1, v54);
        int v56 = v55(__src, 1, v54);
        if (v99)
        {
          if (!v56)
          {
            (*(void (**)(void *, char *, uint64_t))(v97 + 32))(__dstc, __src, v54);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(__dstc, 0, 1, v54);
            goto LABEL_43;
          }
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v58 = *(void *)(*(void *)(v57 - 8) + 64);
          uint64_t v59 = __dstc;
        }
        else
        {
          if (!v56)
          {
            (*(void (**)(void *, char *, uint64_t))(v97 + 40))(__dstc, __src, v54);
            goto LABEL_43;
          }
          (*(void (**)(void *, uint64_t))(v97 + 8))(__dstc, v54);
          sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
          size_t v58 = *(void *)(*(void *)(v60 - 8) + 64);
          uint64_t v59 = __dstc;
        }
        memcpy(v59, __src, v58);
LABEL_43:
        uint64_t v26 = v109;
        uint64_t v61 = *(int *)(v25 + 32);
        int v62 = (void *)(v10 + v61);
        uint64_t v63 = &v11[v61];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        void *v62 = v65;
        v62[1] = v64;
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      sub_232F0434C(v10 + 24);
    }
    long long v52 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = v52;
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    goto LABEL_35;
  }
  if (v16)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    size_t v22 = *(void *)(*(void *)(v21 - 8) + 64);
    uint64_t v23 = (void *)v10;
    uint64_t v24 = v11;
LABEL_8:
    memcpy(v23, v24, v22);
    return a1;
  }
  uint64_t v17 = type metadata accessor for FHIRDateTime();
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = (unsigned int (*)(void, void, void))v18[6];
  if (v19(v11, 1, v17))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy((void *)v10, v11, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v98 = v19;
    *(unsigned char *)uint64_t v10 = *v11;
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *(void *)(v10 + 56) = *((void *)v11 + 7);
    uint64_t v35 = *(int *)(v17 + 28);
    __dsta = (void *)(v10 + v35);
    long long v107 = (void (**)(uint64_t, void, uint64_t, uint64_t))v18;
    uint64_t v36 = &v11[v35];
    uint64_t v37 = sub_23309B300();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dsta, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v38 + 32))(__dsta, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dsta, 0, 1, v37);
    }
    *(_OWORD *)(v10 + *(int *)(v17 + 32)) = *(_OWORD *)&v11[*(int *)(v17 + 32)];
    uint64_t v18 = v107;
    v107[7](v10, 0, 1, v17);
    uint64_t v19 = v98;
  }
  uint64_t v41 = *(int *)(v12 + 20);
  uint64_t v42 = (char *)(v10 + v41);
  uint64_t v43 = &v11[v41];
  if (v19(v43, 1, v17))
  {
    sub_232EA3854(0, &qword_268756548, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, MEMORY[0x263F8D8F0]);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    *uint64_t v42 = *v43;
    *((void *)v42 + 1) = *((void *)v43 + 1);
    *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
    *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *((void *)v42 + 7) = *((void *)v43 + 7);
    uint64_t v45 = *(int *)(v17 + 28);
    __dstb = &v42[v45];
    uint64_t v108 = (void (**)(char *, void, uint64_t, uint64_t))v18;
    uint64_t v46 = &v43[v45];
    uint64_t v47 = sub_23309B300();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_232EA3854(0, &qword_268756590, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(__dstb, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(__dstb, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(__dstb, 0, 1, v47);
    }
    *(_OWORD *)&v42[*(int *)(v17 + 32)] = *(_OWORD *)&v43[*(int *)(v17 + 32)];
    v108[7](v42, 0, 1, v17);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.HumanName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F2FE78);
}

uint64_t sub_232F2FE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 40);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.HumanName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F2FF78);
}

uint64_t sub_232F2FF78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    sub_232EA3854(0, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_232F30050()
{
  sub_232EA3854(319, &qword_268756730, (uint64_t (*)(uint64_t))type metadata accessor for Period, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.PatientLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = *(int *)(type metadata accessor for Reference() + 24);
    uint64_t v9 = (uint64_t *)((char *)v4 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for Identifier();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = a3;
    }
    else
    {
      uint64_t v17 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v17;
      uint64_t v18 = v10[3];
      swift_bridgeObjectRetain();
      if (v18 == 1)
      {
        *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
        v9[4] = v10[4];
      }
      else
      {
        v9[2] = v10[2];
        v9[3] = v18;
        v9[4] = v10[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v15 = a3;
      uint64_t v19 = *(int *)(v11 + 24);
      __dsta = (char *)v9 + v19;
      uint64_t v20 = (char *)v10 + v19;
      uint64_t v21 = sub_23309AF80();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
        memcpy(__dsta, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dsta, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dsta, 0, 1, v21);
      }
      uint64_t v24 = *(int *)(v11 + 28);
      uint64_t v25 = (void *)((char *)v9 + v24);
      uint64_t v26 = (void *)((char *)v10 + v24);
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      int v28 = *(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56);
      swift_bridgeObjectRetain();
      v28(v9, 0, 1, v11);
    }
    uint64_t v29 = *(int *)(v15 + 20);
    uint64_t v30 = (uint64_t *)((char *)v4 + v29);
    long long v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ModelsR4.PatientLink(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Reference() + 24);
  uint64_t v3 = type metadata accessor for Identifier();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v2 + 24) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v4 = v2 + *(int *)(v3 + 24);
    uint64_t v5 = sub_23309AF80();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ModelsR4.PatientLink(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for Reference() + 24);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for Identifier();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v14;
    uint64_t v15 = v9[3];
    swift_bridgeObjectRetain();
    if (v15 == 1)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
      v8[4] = v9[4];
    }
    else
    {
      v8[2] = v9[2];
      v8[3] = v15;
      v8[4] = v9[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v16 = *(int *)(v10 + 24);
    uint64_t v17 = (char *)v8 + v16;
    uint64_t v18 = (char *)v9 + v16;
    uint64_t v19 = sub_23309AF80();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = *(int *)(v10 + 28);
    uint64_t v23 = (void *)((char *)v8 + v22);
    uint64_t v24 = (void *)((char *)v9 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v26(v8, 0, 1, v10);
  }
  uint64_t v27 = *(int *)(a3 + 20);
  int v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = v29[1];
  *int v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.PatientLink(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(type metadata accessor for Reference() + 24);
  uint64_t v7 = (long long *)((char *)a1 + v6);
  uint64_t v8 = (long long *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for Identifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_232EA3DC4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_7;
    }
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = *((void *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = v7 + 1;
    uint64_t v18 = v8 + 1;
    uint64_t v19 = *((void *)v8 + 3);
    uint64_t v52 = a3;
    if (*((void *)v7 + 3) == 1)
    {
      if (v19 == 1)
      {
        long long v20 = *v18;
        *((void *)v7 + 4) = *((void *)v8 + 4);
        *uint64_t v17 = v20;
      }
      else
      {
        *((void *)v7 + 2) = *((void *)v8 + 2);
        *((void *)v7 + 3) = *((void *)v8 + 3);
        *((void *)v7 + 4) = *((void *)v8 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v19 == 1)
    {
      sub_232F042F8((uint64_t)(v7 + 1));
      uint64_t v31 = *((void *)v8 + 4);
      *uint64_t v17 = *v18;
      *((void *)v7 + 4) = v31;
    }
    else
    {
      *((void *)v7 + 2) = *((void *)v8 + 2);
      *((void *)v7 + 3) = *((void *)v8 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v7 + 4) = *((void *)v8 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    uint64_t v32 = *(int *)(v9 + 24);
    uint64_t v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)v8 + v32;
    uint64_t v35 = sub_23309AF80();
    uint64_t v49 = *(void *)(v35 - 8);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
    long long v50 = v33;
    LODWORD(v33) = v36(v33, 1, v35);
    int v37 = v36(v34, 1, v35);
    if (v33)
    {
      if (!v37)
      {
        (*(void (**)(void *, char *, uint64_t))(v49 + 16))(v50, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v35);
        goto LABEL_28;
      }
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v39 = *(void *)(*(void *)(v38 - 8) + 64);
      uint64_t v40 = v50;
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(void *, char *, uint64_t))(v49 + 24))(v50, v34, v35);
        goto LABEL_28;
      }
      (*(void (**)(void *, uint64_t))(v49 + 8))(v50, v35);
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      size_t v39 = *(void *)(*(void *)(v41 - 8) + 64);
      uint64_t v40 = v50;
    }
    memcpy(v40, v34, v39);
LABEL_28:
    uint64_t v42 = *(int *)(v9 + 28);
    uint64_t v43 = (void *)((char *)v7 + v42);
    uint64_t v44 = (void *)((char *)v8 + v42);
    *uint64_t v43 = *v44;
    v43[1] = v44[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v52;
    goto LABEL_29;
  }
  if (v13)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_29;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = *((void *)v8 + 1);
  uint64_t v14 = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  uint64_t v51 = a3;
  if (v14 == 1)
  {
    long long v15 = v8[1];
    *((void *)v7 + 4) = *((void *)v8 + 4);
    v7[1] = v15;
  }
  else
  {
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *((void *)v7 + 3) = *((void *)v8 + 3);
    *((void *)v7 + 4) = *((void *)v8 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = *(int *)(v9 + 24);
  uint64_t v22 = (char *)v7 + v21;
  uint64_t v23 = (char *)v8 + v21;
  uint64_t v24 = sub_23309AF80();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  a3 = v51;
  uint64_t v27 = *(int *)(v9 + 28);
  int v28 = (void *)((char *)v7 + v27);
  uint64_t v29 = (void *)((char *)v8 + v27);
  *int v28 = *v29;
  v28[1] = v29[1];
  uint64_t v30 = *(void (**)(long long *, void, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v30(v7, 0, 1, v9);
LABEL_29:
  uint64_t v45 = *(int *)(a3 + 20);
  uint64_t v46 = (void *)((char *)a1 + v45);
  uint64_t v47 = (void *)((char *)a2 + v45);
  *uint64_t v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.PatientLink(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for Reference() + 24);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for Identifier();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    long long v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    *((void *)v8 + 4) = *((void *)v9 + 4);
    uint64_t v14 = *(int *)(v10 + 24);
    __dst = (char *)v8 + v14;
    long long v15 = (char *)v9 + v14;
    uint64_t v16 = sub_23309AF80();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v10 + 28)) = *(_OWORD *)((char *)v9 + *(int *)(v10 + 28));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for ModelsR4.PatientLink(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for Reference() + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for Identifier();
  uint64_t v12 = *(void *)(v11 - 8);
  long long v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_232EA3DC4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Identifier);
      goto LABEL_7;
    }
    uint64_t v24 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v24;
    swift_bridgeObjectRelease();
    uint64_t v50 = a3;
    if (v9[3] != 1)
    {
      uint64_t v25 = v10[3];
      if (v25 != 1)
      {
        v9[2] = v10[2];
        v9[3] = v25;
        swift_bridgeObjectRelease();
        v9[4] = v10[4];
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v26 = *(int *)(v11 + 24);
        uint64_t v27 = (char *)v9 + v26;
        int v28 = (char *)v10 + v26;
        uint64_t v29 = sub_23309AF80();
        uint64_t v47 = *(void *)(v29 - 8);
        uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
        uint64_t v48 = v27;
        LODWORD(v27) = v30(v27, 1, v29);
        int v31 = v30(v28, 1, v29);
        if (v27)
        {
          if (!v31)
          {
            (*(void (**)(void *, char *, uint64_t))(v47 + 32))(v48, v28, v29);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v29);
            goto LABEL_23;
          }
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v33 = *(void *)(*(void *)(v32 - 8) + 64);
          uint64_t v34 = v48;
        }
        else
        {
          if (!v31)
          {
            (*(void (**)(void *, char *, uint64_t))(v47 + 40))(v48, v28, v29);
            goto LABEL_23;
          }
          (*(void (**)(void *, uint64_t))(v47 + 8))(v48, v29);
          sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
          size_t v33 = *(void *)(*(void *)(v35 - 8) + 64);
          uint64_t v34 = v48;
        }
        memcpy(v34, v28, v33);
LABEL_23:
        uint64_t v36 = *(int *)(v11 + 28);
        int v37 = (void *)((char *)v9 + v36);
        uint64_t v38 = (void *)((char *)v10 + v36);
        uint64_t v40 = *v38;
        uint64_t v39 = v38[1];
        *int v37 = v40;
        v37[1] = v39;
        swift_bridgeObjectRelease();
        a3 = v50;
        goto LABEL_24;
      }
      sub_232F042F8((uint64_t)(v9 + 2));
    }
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    goto LABEL_15;
  }
  if (v15)
  {
LABEL_7:
    sub_232EA3854(0, &qword_268756538, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, MEMORY[0x263F8D8F0]);
    memcpy(v9, v10, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_24;
  }
  uint64_t v49 = a3;
  long long v16 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v16;
  v9[4] = v10[4];
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = (char *)v9 + v17;
  uint64_t v19 = (char *)v10 + v17;
  uint64_t v20 = sub_23309AF80();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_232EA3854(0, (unint64_t *)&qword_268756520, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  a3 = v49;
  *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_24:
  uint64_t v41 = *(int *)(a3 + 20);
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.PatientLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_232F31764);
}

uint64_t sub_232F31764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Reference();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.PatientLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_232F3183C);
}

uint64_t sub_232F3183C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Reference();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_232F318FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_232F3191C(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t sub_232F3191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ModelsR4.Patient(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsR4.Patient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
  }
  else
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = v11;
  *(void *)(a1 + 144) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ModelsR4.Patient(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[4];
  *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
  a1[4] = v4;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (long long *)(a1 + 12);
  uint64_t v6 = (long long *)(a2 + 12);
  uint64_t v7 = a2[13];
  if (a1[13] == 1)
  {
    if (v7 == 1)
    {
      long long v8 = *v6;
      a1[14] = a2[14];
      *uint64_t v5 = v8;
    }
    else
    {
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_232F042F8((uint64_t)(a1 + 12));
    uint64_t v9 = a2[14];
    *uint64_t v5 = *v6;
    a1[14] = v9;
  }
  else
  {
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void *assignWithTake for ModelsR4.Patient(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  *(void *)((char *)a1 + 37) = *(void *)((char *)a2 + 37);
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    uint64_t v7 = a2[13];
    if (v7 != 1)
    {
      a1[12] = a2[12];
      a1[13] = v7;
      swift_bridgeObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_232F042F8((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  a1[14] = a2[14];
LABEL_6:
  a1[15] = a2[15];
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[18];
  a1[17] = a2[17];
  a1[18] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Patient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Patient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Patient()
{
  return &type metadata for ModelsR4.Patient;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  void *result = *a2;
  return result;
}

uint64_t sub_232F31FAC(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_232F31FB4(unsigned char *result, char a2)
{
  void *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.PatientLink.CodingKeys()
{
  return &type metadata for ModelsR4.PatientLink.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.HumanName.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.HumanName.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F3212CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.HumanName.CodingKeys()
{
  return &type metadata for ModelsR4.HumanName.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationPerformer.CodingKeys()
{
  return &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationProtocol.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.ImmunizationProtocol.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F322D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationProtocol.CodingKeys()
{
  return &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReferenceContext.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReferenceContent.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FHIRResourceType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s23HealthRecordsExtraction8ModelsR4V11PatientLinkV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F3248CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle.BundleEntry.CodingKeys()
{
  return &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Patient.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.Patient.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    void *result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F32620);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Patient.CodingKeys()
{
  return &type metadata for ModelsR4.Patient.CodingKeys;
}

unsigned char *sub_232F32660(unsigned char *result, char a2)
{
  void *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Observation.CodingKeys()
{
  return &type metadata for ModelsR4.Observation.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11ObservationV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s23HealthRecordsExtraction8ModelsR4V11ObservationV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    void *result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F327D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Immunization.CodingKeys()
{
  return &type metadata for ModelsR4.Immunization.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReference.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReference.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    void *result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F32980);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.DiagnosticReport.CodingKeys()
{
  return &type metadata for ModelsR4.DiagnosticReport.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Condition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.Condition.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    void *result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F32B14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Condition.CodingKeys()
{
  return &type metadata for ModelsR4.Condition.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.Bundle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F32CA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle.CodingKeys()
{
  return &type metadata for ModelsR4.Bundle.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Binary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelsR4.Binary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x232F32E3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Binary.CodingKeys()
{
  return &type metadata for ModelsR4.Binary.CodingKeys;
}

unsigned char *_s23HealthRecordsExtraction8ModelsR4V21ImmunizationPerformerV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x232F32F10);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ResourceProxy.CodingKeys()
{
  return &type metadata for ModelsR4.ResourceProxy.CodingKeys;
}

unint64_t sub_232F32F4C()
{
  unint64_t result = qword_268756DD0;
  if (!qword_268756DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DD0);
  }
  return result;
}

unint64_t sub_232F32FA4()
{
  unint64_t result = qword_268756DD8;
  if (!qword_268756DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DD8);
  }
  return result;
}

unint64_t sub_232F32FFC()
{
  unint64_t result = qword_268756DE0;
  if (!qword_268756DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DE0);
  }
  return result;
}

unint64_t sub_232F33054()
{
  unint64_t result = qword_268756DE8;
  if (!qword_268756DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DE8);
  }
  return result;
}

unint64_t sub_232F330AC()
{
  unint64_t result = qword_268756DF0;
  if (!qword_268756DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DF0);
  }
  return result;
}

unint64_t sub_232F33104()
{
  unint64_t result = qword_268756DF8;
  if (!qword_268756DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756DF8);
  }
  return result;
}

unint64_t sub_232F3315C()
{
  unint64_t result = qword_268756E00;
  if (!qword_268756E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E00);
  }
  return result;
}

unint64_t sub_232F331B4()
{
  unint64_t result = qword_268756E08;
  if (!qword_268756E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E08);
  }
  return result;
}

unint64_t sub_232F3320C()
{
  unint64_t result = qword_268756E10;
  if (!qword_268756E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E10);
  }
  return result;
}

unint64_t sub_232F33264()
{
  unint64_t result = qword_268756E18;
  if (!qword_268756E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E18);
  }
  return result;
}

unint64_t sub_232F332BC()
{
  unint64_t result = qword_268756E20;
  if (!qword_268756E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E20);
  }
  return result;
}

unint64_t sub_232F33314()
{
  unint64_t result = qword_268756E28;
  if (!qword_268756E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E28);
  }
  return result;
}

unint64_t sub_232F3336C()
{
  unint64_t result = qword_268756E30;
  if (!qword_268756E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E30);
  }
  return result;
}

unint64_t sub_232F333C4()
{
  unint64_t result = qword_268756E38;
  if (!qword_268756E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E38);
  }
  return result;
}

unint64_t sub_232F3341C()
{
  unint64_t result = qword_268756E40;
  if (!qword_268756E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E40);
  }
  return result;
}

unint64_t sub_232F33474()
{
  unint64_t result = qword_268756E48;
  if (!qword_268756E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E48);
  }
  return result;
}

unint64_t sub_232F334CC()
{
  unint64_t result = qword_268756E50;
  if (!qword_268756E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E50);
  }
  return result;
}

unint64_t sub_232F33524()
{
  unint64_t result = qword_268756E58;
  if (!qword_268756E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E58);
  }
  return result;
}

unint64_t sub_232F3357C()
{
  unint64_t result = qword_268756E60;
  if (!qword_268756E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E60);
  }
  return result;
}

unint64_t sub_232F335D4()
{
  unint64_t result = qword_268756E68;
  if (!qword_268756E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E68);
  }
  return result;
}

unint64_t sub_232F3362C()
{
  unint64_t result = qword_268756E70;
  if (!qword_268756E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E70);
  }
  return result;
}

unint64_t sub_232F33684()
{
  unint64_t result = qword_268756E78;
  if (!qword_268756E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E78);
  }
  return result;
}

unint64_t sub_232F336DC()
{
  unint64_t result = qword_268756E80;
  if (!qword_268756E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E80);
  }
  return result;
}

unint64_t sub_232F33734()
{
  unint64_t result = qword_268756E88;
  if (!qword_268756E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E88);
  }
  return result;
}

unint64_t sub_232F3378C()
{
  unint64_t result = qword_268756E90;
  if (!qword_268756E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E90);
  }
  return result;
}

unint64_t sub_232F337E4()
{
  unint64_t result = qword_268756E98;
  if (!qword_268756E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756E98);
  }
  return result;
}

unint64_t sub_232F3383C()
{
  unint64_t result = qword_268756EA0;
  if (!qword_268756EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EA0);
  }
  return result;
}

unint64_t sub_232F33894()
{
  unint64_t result = qword_268756EA8;
  if (!qword_268756EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EA8);
  }
  return result;
}

unint64_t sub_232F338EC()
{
  unint64_t result = qword_268756EB0;
  if (!qword_268756EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EB0);
  }
  return result;
}

unint64_t sub_232F33944()
{
  unint64_t result = qword_268756EB8;
  if (!qword_268756EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EB8);
  }
  return result;
}

unint64_t sub_232F3399C()
{
  unint64_t result = qword_268756EC0;
  if (!qword_268756EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EC0);
  }
  return result;
}

unint64_t sub_232F339F4()
{
  unint64_t result = qword_268756EC8;
  if (!qword_268756EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EC8);
  }
  return result;
}

unint64_t sub_232F33A4C()
{
  unint64_t result = qword_268756ED0;
  if (!qword_268756ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756ED0);
  }
  return result;
}

unint64_t sub_232F33AA4()
{
  unint64_t result = qword_268756ED8;
  if (!qword_268756ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756ED8);
  }
  return result;
}

unint64_t sub_232F33AFC()
{
  unint64_t result = qword_268756EE0;
  if (!qword_268756EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EE0);
  }
  return result;
}

unint64_t sub_232F33B54()
{
  unint64_t result = qword_268756EE8;
  if (!qword_268756EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EE8);
  }
  return result;
}

unint64_t sub_232F33BAC()
{
  unint64_t result = qword_268756EF0;
  if (!qword_268756EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EF0);
  }
  return result;
}

unint64_t sub_232F33C04()
{
  unint64_t result = qword_268756EF8;
  if (!qword_268756EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756EF8);
  }
  return result;
}

unint64_t sub_232F33C5C()
{
  unint64_t result = qword_268756F00;
  if (!qword_268756F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F00);
  }
  return result;
}

unint64_t sub_232F33CB4()
{
  unint64_t result = qword_268756F08;
  if (!qword_268756F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F08);
  }
  return result;
}

unint64_t sub_232F33D0C()
{
  unint64_t result = qword_268756F10;
  if (!qword_268756F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F10);
  }
  return result;
}

unint64_t sub_232F33D64()
{
  unint64_t result = qword_268756F18;
  if (!qword_268756F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F18);
  }
  return result;
}

unint64_t sub_232F33DBC()
{
  unint64_t result = qword_268756F20;
  if (!qword_268756F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F20);
  }
  return result;
}

unint64_t sub_232F33E14()
{
  unint64_t result = qword_268756F28;
  if (!qword_268756F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F28);
  }
  return result;
}

unint64_t sub_232F33E6C()
{
  unint64_t result = qword_268756F30;
  if (!qword_268756F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F30);
  }
  return result;
}

unint64_t sub_232F33EC4()
{
  unint64_t result = qword_268756F38;
  if (!qword_268756F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F38);
  }
  return result;
}

unint64_t sub_232F33F1C()
{
  unint64_t result = qword_268756F40;
  if (!qword_268756F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F40);
  }
  return result;
}

unint64_t sub_232F33F74()
{
  unint64_t result = qword_268756F48;
  if (!qword_268756F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268756F48);
  }
  return result;
}

uint64_t sub_232F33FC8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_232F341A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972746E65 && a2 == 0xE500000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_232F3430C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6163696E696C63 && a2 == 0xEE00737574617453 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002330B4F80 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974697265766573 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6574695379646F62 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7461447465736E6FLL && a2 == 0xED0000656D695465 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7265507465736E6FLL && a2 == 0xEB00000000646F69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7274537465736E6FLL && a2 == 0xEB00000000676E69 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002330B4FA0 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF646F6972655074 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF676E6972745374 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x646564726F636572 && a2 == 0xEC00000065746144 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x726564726F636572 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x7265747265737361 && a2 == 0xE800000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_23309C220() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    char v6 = sub_23309C220();
    swift_bridgeObjectRelease();
    if (v6) {
      return 19;
    }
    else {
      return 20;
    }
  }
}